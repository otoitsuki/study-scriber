# Project Directory Structure:
.
├── .cursor/
│   └── rules/
│       ├── backend.mdc
│       ├── frontend.mdc
│       ├── playwright-e2e-testing.mdc
│       ├── python.mdc
│       ├── react.mdc
│       ├── rules.mdc
│       └── ui-rules/
│           ├── create-prototype.mdc
│           └── shadcn-tailwind-ui-guideline.mdc
├── .cursorignore
├── .dockerignore
├── .editorconfig
├── .env.example
├── .gptree_config
├── .pytest_cache/
├── PRD.md
├── README.md
├── SPEC.md
├── app/
│   ├── __init__.py
│   ├── api/
│   │   ├── __init__.py
│   │   ├── export.py
│   │   ├── notes.py
│   │   ├── segments.py
│   │   └── sessions.py
│   ├── core/
│   │   ├── __init__.py
│   │   ├── audio_vad.py
│   │   ├── config.py
│   │   ├── container.py
│   │   ├── ffmpeg.py
│   │   └── webm_header_repairer.py
│   ├── db/
│   │   ├── __init__.py
│   │   ├── database.py
│   │   ├── supabase_config.py
│   │   └── supabase_init.sql
│   ├── lib/
│   │   ├── httpx_timeout.py
│   │   ├── prom_helpers.py
│   │   ├── rate_limit.py
│   │   └── settings_utils.py
│   ├── middleware/
│   │   └── __init__.py
│   ├── schemas/
│   │   ├── __init__.py
│   │   ├── note.py
│   │   └── session.py
│   ├── services/
│   │   ├── __init__.py
│   │   ├── azure_openai_v2.py
│   │   ├── azure_whisper.py
│   │   ├── r2_client.py
│   │   ├── stt/
│   │   │   ├── __init__.py
│   │   │   ├── base.py
│   │   │   ├── factory.py
│   │   │   ├── gemini_provider.py
│   │   │   ├── gpt4o_provider.py
│   │   │   ├── interfaces.py
│   │   │   ├── lang_map.py
│   │   │   ├── save_utils.py
│   │   │   └── whisper_provider.py
│   │   └── transcript_feed.py
│   ├── utils/
│   │   ├── __init__.py
│   │   ├── timer.py
│   │   ├── timing.py
│   │   └── validators.py
│   └── ws/
│       ├── __init__.py
│       ├── transcript_feed.py
│       └── upload_audio.py
├── docs/
│   ├── ADD_GEMINI.md
│   ├── auto-retry-upload-spec.md
│   ├── lang-map-refactor.md
│   ├── skip-silence-spec.md
│   ├── stop-processing-finish-flow.md
│   ├── traceback-debug-spec.md
│   └── webm-to-wav-gpt4o.md
├── e2e/
│   └── export-api.spec.ts
├── frontend/
│   ├── .env.example
│   ├── .eslintrc.json
│   ├── .next/
│   ├── README.md
│   ├── __tests__/
│   │   └── integration/
│   │       ├── app-state-provider.test.tsx
│   │       ├── state-transitions.test.ts
│   │       ├── state-transitions.test.tsx
│   │       └── websocket-state-sync.test.ts
│   ├── app/
│   │   ├── globals.css
│   │   ├── layout.tsx
│   │   └── page.tsx
│   ├── app-store-zustand.ts
│   ├── components/
│   │   ├── NetworkRestorerClient.tsx
│   │   ├── SessionLoadingOverlay.tsx
│   │   ├── default-state.tsx
│   │   ├── finish-state.tsx
│   │   ├── provider-context-menu.tsx
│   │   ├── recording-active-state.tsx
│   │   ├── recording-state.tsx
│   │   ├── recording-waiting-state.tsx
│   │   ├── theme-provider.tsx
│   │   ├── ui/
│   │   │   ├── ExportButton.test.tsx
│   │   │   ├── ExportButton.tsx
│   │   │   ├── accordion.tsx
│   │   │   ├── alert-dialog.tsx
│   │   │   ├── alert.tsx
│   │   │   ├── aspect-ratio.tsx
│   │   │   ├── avatar.tsx
│   │   │   ├── badge.tsx
│   │   │   ├── breadcrumb.tsx
│   │   │   ├── button.tsx
│   │   │   ├── calendar.tsx
│   │   │   ├── card.tsx
│   │   │   ├── carousel.tsx
│   │   │   ├── chart.tsx
│   │   │   ├── checkbox.tsx
│   │   │   ├── collapsible.tsx
│   │   │   ├── command.tsx
│   │   │   ├── context-menu.tsx
│   │   │   ├── dialog.tsx
│   │   │   ├── drawer.tsx
│   │   │   ├── dropdown-menu.tsx
│   │   │   ├── form.tsx
│   │   │   ├── hover-card.tsx
│   │   │   ├── input-otp.tsx
│   │   │   ├── input.tsx
│   │   │   ├── label.tsx
│   │   │   ├── menubar.tsx
│   │   │   ├── navigation-menu.tsx
│   │   │   ├── pagination.tsx
│   │   │   ├── popover.tsx
│   │   │   ├── progress.tsx
│   │   │   ├── radio-group.tsx
│   │   │   ├── resizable.tsx
│   │   │   ├── scroll-area.tsx
│   │   │   ├── select.tsx
│   │   │   ├── separator.tsx
│   │   │   ├── sheet.tsx
│   │   │   ├── sidebar.tsx
│   │   │   ├── skeleton.tsx
│   │   │   ├── slider.tsx
│   │   │   ├── sonner.tsx
│   │   │   ├── switch.tsx
│   │   │   ├── table.tsx
│   │   │   ├── tabs.tsx
│   │   │   ├── textarea.tsx
│   │   │   ├── toast.tsx
│   │   │   ├── toaster.tsx
│   │   │   ├── toggle-group.tsx
│   │   │   ├── toggle.tsx
│   │   │   ├── tooltip.tsx
│   │   │   ├── use-mobile.tsx
│   │   │   └── use-toast.ts
│   │   ├── upload-status-indicator.tsx
│   │   └── waiting-state.tsx
│   ├── components.json
│   ├── constants/
│   │   ├── languages.ts
│   │   └── providers.ts
│   ├── e2e/
│   │   ├── export-api.spec.ts
│   │   ├── offline-recovery.spec.ts
│   │   ├── service-layer-integration.spec.ts
│   │   └── transcript-integration.spec.ts
│   ├── hooks/
│   │   ├── use-app-state-adapter.ts
│   │   ├── use-app-state-context.ts
│   │   ├── use-app-state-new.ts
│   │   ├── use-app-state.ts
│   │   ├── use-local-draft.ts
│   │   ├── use-mobile.tsx
│   │   ├── use-notes.ts
│   │   ├── use-recording-adapter.ts
│   │   ├── use-recording-new.ts
│   │   ├── use-recording.ts
│   │   ├── use-session-adapter.ts
│   │   ├── use-session-new.ts
│   │   ├── use-session.test.ts
│   │   ├── use-session.ts
│   │   ├── use-toast.ts
│   │   ├── use-transcript-adapter.ts
│   │   ├── use-transcript-new.ts
│   │   ├── use-transcript.ts
│   │   └── useNetworkRestorer.ts
│   ├── lib/
│   │   ├── __tests__/
│   │   │   ├── advanced-audio-recorder.test.ts
│   │   │   ├── initial-state-loader.test.ts
│   │   │   ├── migration-adapter.test.ts
│   │   │   ├── network-restorer.test.ts
│   │   │   ├── rest-audio-uploader-409.test.ts
│   │   │   ├── segmented-audio-recorder.test.ts
│   │   │   ├── state-machine.test.ts
│   │   │   └── state-management.test.ts
│   │   ├── advanced-audio-recorder.ts
│   │   ├── api.test.ts
│   │   ├── api.ts
│   │   ├── app-state-reducer.ts
│   │   ├── app-store-zustand.ts
│   │   ├── app-store.ts
│   │   ├── audio-recorder.ts
│   │   ├── config.ts
│   │   ├── feature-flags.ts
│   │   ├── initial-state-loader.ts
│   │   ├── interfaces.ts
│   │   ├── migration-adapter.ts
│   │   ├── rest-audio-uploader.ts
│   │   ├── segmented-audio-recorder.ts
│   │   ├── services/
│   │   │   ├── __tests__/
│   │   │   │   ├── recording-flow-service.test.ts
│   │   │   │   ├── recording-service.test.ts
│   │   │   │   ├── session-service-409.test.ts
│   │   │   │   ├── session-service.test.ts
│   │   │   │   ├── simple-recording-service.test.ts
│   │   │   │   └── transcript-service.test.ts
│   │   │   ├── base-service.ts
│   │   │   ├── index.ts
│   │   │   ├── interfaces.ts
│   │   │   ├── recording-flow-service.ts
│   │   │   ├── recording-service.ts
│   │   │   ├── service-container.ts
│   │   │   ├── service-registry.ts
│   │   │   ├── session-service.ts
│   │   │   ├── simple-recording-service.ts
│   │   │   ├── transcript-service-adapted.ts
│   │   │   └── transcript-service.ts
│   │   ├── simple-audio-recorder.ts
│   │   ├── state-machine.ts
│   │   ├── stream/
│   │   │   ├── __tests__/
│   │   │   │   └── audio-uploader.test.ts
│   │   │   └── audio-uploader.ts
│   │   ├── transcript-manager-adapter.ts
│   │   ├── transcript-manager-new.ts
│   │   ├── transcript-manager.ts
│   │   ├── typed-emitter.ts
│   │   ├── utils.ts
│   │   └── websocket.ts
│   ├── next.config.mjs
│   ├── node_modules/
│   ├── package.json
│   ├── playwright-report/
│   ├── playwright.config.ts
│   ├── pnpm-lock.yaml
│   ├── postcss.config.mjs
│   ├── providers/
│   │   └── app-state-provider-wrapper.tsx
│   ├── public/
│   │   ├── placeholder-logo.png
│   │   ├── placeholder-logo.svg
│   │   ├── placeholder-user.jpg
│   │   ├── placeholder.jpg
│   │   └── placeholder.svg
│   ├── refresh.ts
│   ├── src/
│   │   └── test-setup.ts
│   ├── study-scriber.tsx
│   ├── styles/
│   │   └── globals.css
│   ├── tailwind.config.ts
│   ├── test-transcript-integration.js
│   ├── tests/
│   ├── tsconfig.json
│   ├── types/
│   │   ├── app-state-context.ts
│   │   ├── app-state.ts
│   │   ├── state-transitions.ts
│   │   └── websocket-messages.ts
│   ├── utils/
│   │   ├── event-bus.ts
│   │   ├── export.ts
│   │   └── time.ts
│   └── vitest.config.ts
├── gptree_output.txt
├── main.py
├── package.json
├── playwright.config.ts
├── pnpm-lock.yaml
├── pyproject.toml
├── pytest.ini
├── tests/
└── uv.lock

# BEGIN FILE CONTENTS

# File: frontend/components/theme-provider.tsx

'use client'

import * as React from 'react'
import {
  ThemeProvider as NextThemesProvider,
  type ThemeProviderProps,
} from 'next-themes'

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}


# END FILE CONTENTS


# File: frontend/components/ui/ExportButton.test.tsx

import { render, fireEvent, waitFor } from '@testing-library/react'
import ExportButton from './ExportButton'

jest.mock('@/hooks/use-session', () => ({
    useSession: () => ({ waitUntilCompleted: jest.fn() }),
}))
jest.mock('@/lib/api', () => ({
    notesAPI: { updateNote: jest.fn() },
}))
jest.mock('@/utils/export', () => ({
    downloadZip: jest.fn(),
}))
jest.mock('@/hooks/use-toast', () => ({
    toast: jest.fn(),
}))

const { useSession } = require('@/hooks/use-session')
const { notesAPI } = require('@/lib/api')
const { downloadZip } = require('@/utils/export')
const { toast } = require('@/hooks/use-toast')

describe('ExportButton', () => {
    beforeEach(() => {
        jest.clearAllMocks()
    })

    it('calls waitUntilCompleted and downloads on success', async () => {
        useSession.mockReturnValue({ waitUntilCompleted: jest.fn().mockResolvedValue(true) })
        notesAPI.updateNote.mockResolvedValue({})
        downloadZip.mockResolvedValue()
        const { getByText } = render(<ExportButton sid="sid" editorContent="abc" />)
        fireEvent.click(getByText(/Export/))
        await waitFor(() => expect(notesAPI.updateNote).toHaveBeenCalledWith('sid', { content: 'abc' }))
        expect(downloadZip).toHaveBeenCalledWith('sid')
    })

    it('shows toast if waitUntilCompleted returns false', async () => {
        useSession.mockReturnValue({ waitUntilCompleted: jest.fn().mockResolvedValue(false) })
        const { getByText } = render(<ExportButton sid="sid" editorContent="abc" />)
        fireEvent.click(getByText(/Export/))
        await waitFor(() => expect(toast).toHaveBeenCalledWith(expect.objectContaining({ title: expect.stringMatching(/後端仍在處理/) })))
    })

    it('shows error toast if updateNote fails', async () => {
        useSession.mockReturnValue({ waitUntilCompleted: jest.fn().mockResolvedValue(true) })
        notesAPI.updateNote.mockRejectedValue(new Error('fail'))
        const { getByText } = render(<ExportButton sid="sid" editorContent="abc" />)
        fireEvent.click(getByText(/Export/))
        await waitFor(() => expect(toast).toHaveBeenCalledWith(expect.objectContaining({ variant: 'destructive' })))
    })

    it('shows error toast if downloadZip fails', async () => {
        useSession.mockReturnValue({ waitUntilCompleted: jest.fn().mockResolvedValue(true) })
        notesAPI.updateNote.mockResolvedValue({})
        downloadZip.mockRejectedValue(new Error('fail'))
        const { getByText } = render(<ExportButton sid="sid" editorContent="abc" />)
        fireEvent.click(getByText(/Export/))
        await waitFor(() => expect(toast).toHaveBeenCalledWith(expect.objectContaining({ variant: 'destructive' })))
    })

    it('does not trigger export when busy', async () => {
        useSession.mockReturnValue({ waitUntilCompleted: jest.fn().mockResolvedValue(true) })
        notesAPI.updateNote.mockResolvedValue({})
        downloadZip.mockResolvedValue()
        const { getByText } = render(<ExportButton sid="sid" editorContent="abc" />)
        const btn = getByText(/Export/)
        fireEvent.click(btn)
        fireEvent.click(btn)
        await waitFor(() => expect(notesAPI.updateNote).toHaveBeenCalledTimes(1))
    })
})


# END FILE CONTENTS


# File: frontend/lib/services/__tests__/recording-flow-service.test.ts

/**
 * RecordingFlowService 核心功能測試
 *
 * 測試 RecordingFlowService 的核心功能，確保：
 * 1. startRecordingFlow 成功時返回 SessionResponse
 * 2. startRecordingFlow 失敗時拋出錯誤
 * 3. 狀態管理正確
 */

import { describe, test, expect, vi, beforeEach, afterEach } from 'vitest'
import { RecordingFlowService } from '../recording-flow-service'
import { serviceContainer } from '../service-container'
import { SERVICE_KEYS } from '../interfaces'
import type { ISessionService, IRecordingService, ITranscriptService } from '../interfaces'
import type { SessionResponse } from '../../api'

// Mock 服務容器
vi.mock('../service-container', () => ({
    serviceContainer: {
        resolve: vi.fn()
    }
}))

// 1. 修改 RecordingFlowService 讓 setAppState 可注入
class TestableRecordingFlowService extends RecordingFlowService {
    constructor(setAppState: (state: string) => void) {
        super()
        // @ts-ignore
        this.setAppState = setAppState
    }
}

describe('RecordingFlowService - 核心功能', () => {
    let recordingFlowService: RecordingFlowService
    let mockSessionService: any
    let mockRecordingService: any
    let mockTranscriptService: any
    let mockServiceContainer: any
    let setAppStateMock: any

    // 測試用的會話數據
    const mockSessionResponse: SessionResponse = {
        id: 'test-session-123',
        title: '測試錄音會話',
        type: 'recording',
        status: 'active',
        language: 'zh-TW',
        created_at: '2024-01-01T00:00:00Z',
        updated_at: '2024-01-01T00:00:00Z'
    }

    beforeEach(async () => {
        // 創建 mock 服務
        mockSessionService = {
            ensureRecordingSession: vi.fn().mockResolvedValue(mockSessionResponse),
            createRecordingSession: vi.fn().mockResolvedValue(mockSessionResponse),
            waitForSessionReady: vi.fn().mockResolvedValue(true),
            finishSession: vi.fn(),
            checkActiveSession: vi.fn(),
        } as Partial<ISessionService>

        mockRecordingService = {
            requestPermission: vi.fn().mockResolvedValue(true),
            startRecording: vi.fn(),
            stopRecording: vi.fn(),
            isRecording: vi.fn(),
            getRecordingTime: vi.fn(),
            getRecordingState: vi.fn(),
        } as Partial<IRecordingService>

        mockTranscriptService = {
            connect: vi.fn(),
            disconnect: vi.fn(),
            addTranscriptListener: vi.fn(),
            removeTranscriptListener: vi.fn(),
            isConnected: vi.fn(),
            start: vi.fn(),
        } as Partial<ITranscriptService>

        // 設置服務容器 mock
        mockServiceContainer = serviceContainer as any
        mockServiceContainer.resolve.mockImplementation((key: string) => {
            switch (key) {
                case SERVICE_KEYS.SESSION_SERVICE:
                    return mockSessionService
                case SERVICE_KEYS.RECORDING_SERVICE:
                    return mockRecordingService
                case SERVICE_KEYS.TRANSCRIPT_SERVICE:
                    return mockTranscriptService
                default:
                    throw new Error(`Unknown service key: ${key}`)
            }
        })

        // mock setAppState
        setAppStateMock = vi.fn()
        // 這裡用 spyOn 取代 setAppState
        const zustand = await import('../../app-store-zustand')
        vi.spyOn(zustand.useAppStore.getState(), 'setState').mockImplementation(setAppStateMock)

        recordingFlowService = new TestableRecordingFlowService(setAppStateMock)
        await recordingFlowService.initialize()
        vi.clearAllMocks()
    })

    afterEach(() => {
        vi.restoreAllMocks()
    })

    describe('startRecordingFlow - 成功情境', () => {
        test('成功啟動錄音流程應該返回 SessionResponse', async () => {
            // Arrange
            mockSessionService.createRecordingSession.mockResolvedValueOnce(mockSessionResponse)
            mockSessionService.waitForSessionReady.mockResolvedValueOnce(true)
            mockTranscriptService.connect.mockResolvedValueOnce(undefined)
            mockRecordingService.startRecording.mockResolvedValueOnce(undefined)

            // Act
            const result = await recordingFlowService.startRecordingFlow('測試標題')

            // Assert
            expect(result).toEqual(mockSessionResponse)
            expect(result.id).toBe(mockSessionResponse.id)
            expect(result.status).toBe('active')
            expect(result.type).toBe('recording')

            // 驗證服務調用
            expect(mockSessionService.createRecordingSession).toHaveBeenCalledWith('測試標題', undefined, undefined, undefined)
            expect(mockSessionService.waitForSessionReady).toHaveBeenCalledWith(mockSessionResponse.id, 5000)
            expect(mockTranscriptService.connect).toHaveBeenCalledWith(mockSessionResponse.id)
            expect(mockRecordingService.startRecording).toHaveBeenCalledWith(mockSessionResponse.id)

            // 驗證狀態
            expect(recordingFlowService.isFlowRunning()).toBe(true)
            expect(recordingFlowService.getCurrentSession()).toEqual(mockSessionResponse)
        })

        test('當標題為空時，應該使用預設標題', async () => {
            // Arrange
            mockSessionService.createRecordingSession.mockResolvedValueOnce(mockSessionResponse)
            mockSessionService.waitForSessionReady.mockResolvedValueOnce(true)
            mockTranscriptService.connect.mockResolvedValueOnce(undefined)
            mockRecordingService.startRecording.mockResolvedValueOnce(undefined)

            // Act
            await recordingFlowService.startRecordingFlow()

            // Assert
            expect(mockSessionService.createRecordingSession).toHaveBeenCalledWith(
                expect.stringMatching(/錄音筆記 \d{1,2}\/\d{1,2}\/\d{4}/),
                undefined, undefined, undefined
            )
        })
    })

    describe('startRecordingFlow - 錯誤情境', () => {
        test('當會話創建失敗時，應該拋出錯誤', async () => {
            // Arrange
            const sessionError = new Error('會話創建失敗')
            mockSessionService.createRecordingSession.mockRejectedValueOnce(sessionError)

            // Act & Assert
            await expect(recordingFlowService.startRecordingFlow('測試標題'))
                .rejects.toThrow('會話創建失敗')

            // 驗證其他服務沒有被調用
            expect(mockTranscriptService.connect).not.toHaveBeenCalled()
            expect(mockRecordingService.startRecording).not.toHaveBeenCalled()

            // 驗證狀態重置
            expect(recordingFlowService.isFlowRunning()).toBe(false)
            expect(recordingFlowService.getCurrentSession()).toBeNull()
        })

        test('當會話準備失敗時，應該拋出錯誤', async () => {
            // Arrange
            mockSessionService.createRecordingSession.mockResolvedValueOnce(mockSessionResponse)
            mockSessionService.waitForSessionReady.mockResolvedValueOnce(false)

            // Act & Assert
            await expect(recordingFlowService.startRecordingFlow('測試標題'))
                .rejects.toThrow('會話準備超時')

            // 驗證其他服務沒有被調用
            expect(mockTranscriptService.connect).not.toHaveBeenCalled()
            expect(mockRecordingService.startRecording).not.toHaveBeenCalled()
        })

        test('當逐字稿服務連接失敗時，應該拋出錯誤', async () => {
            // Arrange
            mockSessionService.createRecordingSession.mockResolvedValueOnce(mockSessionResponse)
            mockSessionService.waitForSessionReady.mockResolvedValueOnce(true)
            const transcriptError = new Error('逐字稿服務連接失敗')
            mockTranscriptService.connect.mockRejectedValueOnce(transcriptError)

            // Act & Assert
            await expect(recordingFlowService.startRecordingFlow('測試標題'))
                .rejects.toThrow('逐字稿服務連接失敗')

            // 驗證錄音沒有啟動
            expect(mockRecordingService.startRecording).not.toHaveBeenCalled()
        })

        test('當錄音服務啟動失敗時，應該拋出錯誤', async () => {
            // Arrange
            mockSessionService.createRecordingSession.mockResolvedValueOnce(mockSessionResponse)
            mockSessionService.waitForSessionReady.mockResolvedValueOnce(true)
            mockTranscriptService.connect.mockResolvedValueOnce(undefined)
            const recordingError = new Error('錄音啟動失敗')
            mockRecordingService.startRecording.mockRejectedValueOnce(recordingError)

            // Act & Assert
            await expect(recordingFlowService.startRecordingFlow('測試標題'))
                .rejects.toThrow('錄音啟動失敗')
        })

        test('當流程已在運行時，應該先停止現有流程', async () => {
            // Arrange - 先啟動一個流程
            mockSessionService.createRecordingSession.mockResolvedValue(mockSessionResponse)
            mockSessionService.waitForSessionReady.mockResolvedValue(true)
            mockTranscriptService.connect.mockResolvedValue(undefined)
            mockRecordingService.startRecording.mockResolvedValue(undefined)
            mockRecordingService.stopRecording.mockResolvedValue(undefined)
            mockTranscriptService.disconnect.mockResolvedValue(undefined)
            mockSessionService.finishSession.mockResolvedValue(undefined)

            await recordingFlowService.startRecordingFlow('第一個會話')

            // Act - 啟動第二個流程
            const result = await recordingFlowService.startRecordingFlow('第二個會話')

            // Assert - 驗證第二次啟動成功
            expect(result).toEqual(mockSessionResponse)
            expect(recordingFlowService.isFlowRunning()).toBe(true)
        })
    })

    describe('stopRecordingFlow', () => {
        beforeEach(async () => {
            // 先啟動錄音流程
            mockSessionService.createRecordingSession.mockResolvedValueOnce(mockSessionResponse)
            mockSessionService.waitForSessionReady.mockResolvedValueOnce(true)
            mockTranscriptService.connect.mockResolvedValueOnce(undefined)
            mockRecordingService.startRecording.mockResolvedValueOnce(undefined)
            mockRecordingService.isRecording.mockReturnValue(true)

            await recordingFlowService.startRecordingFlow('測試標題')
        })

        test('只停止錄音，不呼叫 disconnect/finishSession', async () => {
            // Arrange
            mockRecordingService.stopRecording.mockResolvedValueOnce(undefined)
            // Act
            await recordingFlowService.stopRecordingFlow()
            // Assert
            expect(mockRecordingService.stopRecording).toHaveBeenCalled()
            expect(mockTranscriptService.disconnect).not.toHaveBeenCalled()
            expect(mockSessionService.finishSession).not.toHaveBeenCalled()
        })
    })

    describe('Stop → processing → finished 狀態流', () => {
        beforeEach(async () => {
            // 先啟動錄音流程
            mockSessionService.createRecordingSession.mockResolvedValueOnce(mockSessionResponse)
            mockSessionService.waitForSessionReady.mockResolvedValueOnce(true)
            mockTranscriptService.connect.mockResolvedValueOnce(undefined)
            mockTranscriptService.start.mockResolvedValueOnce(undefined)
            mockRecordingService.startRecording.mockResolvedValueOnce(undefined)
            mockRecordingService.isRecording.mockReturnValue(true)

            await recordingFlowService.startRecordingFlow('測試標題')
        })

        test('停止錄音後應進入 processing 狀態', async () => {
            mockRecordingService.stopRecording.mockResolvedValueOnce(undefined)
            await recordingFlowService.stopRecordingFlow()
            expect(setAppStateMock).toHaveBeenCalledWith('processing')
        })

        test('收到 transcript_complete 才進入 finished 並呼叫 disconnect', async () => {
            mockRecordingService.stopRecording.mockResolvedValueOnce(undefined)
            mockTranscriptService.disconnect.mockResolvedValueOnce(undefined)
            await recordingFlowService.stopRecordingFlow()
            const msg = { type: 'transcript_complete', session_id: mockSessionResponse.id }
            await (recordingFlowService as any).handleTranscriptMessage(msg)
            expect(setAppStateMock).toHaveBeenCalledWith('finished')
            expect(mockTranscriptService.disconnect).toHaveBeenCalledWith(mockSessionResponse.id)
        })

        test('Race condition: stop 剛呼叫後馬上收到 transcript_complete 也能正確流轉', async () => {
            mockRecordingService.stopRecording.mockResolvedValueOnce(undefined)
            mockTranscriptService.disconnect.mockResolvedValueOnce(undefined)
            // stopRecordingFlow 尚未完全結束時收到 transcript_complete
            const stopPromise = recordingFlowService.stopRecordingFlow()
            const msg = { type: 'transcript_complete', session_id: mockSessionResponse.id }
            await (recordingFlowService as any).handleTranscriptMessage(msg)
            await stopPromise
            expect(setAppStateMock).toHaveBeenCalledWith('processing')
            expect(setAppStateMock).toHaveBeenCalledWith('finished')
            expect(mockTranscriptService.disconnect).toHaveBeenCalledWith(mockSessionResponse.id)
        })
    })

    describe('狀態管理', () => {
        test('初始狀態應該正確', () => {
            expect(recordingFlowService.isFlowRunning()).toBe(false)
            expect(recordingFlowService.getCurrentSession()).toBeNull()
            expect(recordingFlowService.getTranscriptEntries()).toEqual([])
        })

        test('啟動後狀態應該正確', async () => {
            // Arrange
            mockSessionService.createRecordingSession.mockResolvedValueOnce(mockSessionResponse)
            mockSessionService.waitForSessionReady.mockResolvedValueOnce(true)
            mockTranscriptService.connect.mockResolvedValueOnce(undefined)
            mockRecordingService.startRecording.mockResolvedValueOnce(undefined)

            // Act
            await recordingFlowService.startRecordingFlow('測試標題')

            // Assert
            expect(recordingFlowService.isFlowRunning()).toBe(true)
            expect(recordingFlowService.getCurrentSession()).toEqual(mockSessionResponse)
        })
    })
})




# END FILE CONTENTS


# File: frontend/lib/state-machine.ts

"use client"

import { AppState } from "../types/app-state"
import {
    StateTransitionTrigger,
    StateTransitionCondition,
    StateTransitionContext,
    StateTransitionResult,
    StateTransitionSideEffect,
    STATE_TRANSITION_RULES,
    STATE_TRANSITION_SIDE_EFFECTS
} from "../types/state-transitions"

// 狀態機類別
export class StateMachine {
    private currentState: AppState = "default"
    private context: StateTransitionContext
    private listeners: Set<(newState: AppState, sideEffects: StateTransitionSideEffect[]) => void> = new Set()

    constructor(initialContext: StateTransitionContext) {
        this.context = initialContext
        this.currentState = initialContext.currentState
        this.exposeToWindow()
    }

    // 更新上下文
    updateContext(newContext: Partial<StateTransitionContext>): void {
        this.context = { ...this.context, ...newContext }
        console.log('🔄 [StateMachine] 上下文已更新:', this.context)
    }

    // 嘗試狀態轉換
    transition(trigger: StateTransitionTrigger): StateTransitionResult {
        const transitionKey = `${this.currentState}->${trigger}`
        console.log(`🔄 [StateMachine] 嘗試狀態轉換: ${transitionKey}`)

        // 尋找符合的轉換規則
        const matchingRules = this.findMatchingRules(trigger)

        if (matchingRules.length === 0) {
            const error = `沒有找到符合的轉換規則: ${transitionKey}`
            console.warn(`⚠️ [StateMachine] ${error}`)
            return {
                success: false,
                newState: this.currentState,
                error
            }
        }

        // 驗證轉換條件
        const validRule = this.validateTransitionRules(matchingRules)

        if (!validRule) {
            const error = `轉換條件不符合: ${transitionKey}`
            console.warn(`⚠️ [StateMachine] ${error}`)
            return {
                success: false,
                newState: this.currentState,
                error
            }
        }

        // 執行狀態轉換
        const result = this.executeTransition(validRule, trigger)

        if (result.success) {
            this.currentState = result.newState
            console.log(`✅ [StateMachine] 狀態轉換成功: ${this.context.currentState} -> ${result.newState}`)

            // 更新上下文中的當前狀態
            this.context.currentState = result.newState

            // 通知監聽器
            this.notifyListeners(result.newState, result.sideEffects || [])
        }

        return result
    }

    // 尋找匹配的轉換規則
    private findMatchingRules(trigger: StateTransitionTrigger): StateTransitionCondition[] {
        return STATE_TRANSITION_RULES.filter(rule =>
            rule.currentState === this.currentState && rule.trigger === trigger
        )
    }

    // 驗證轉換規則
    private validateTransitionRules(rules: StateTransitionCondition[]): StateTransitionCondition | null {
        for (const rule of rules) {
            if (this.isRuleValid(rule)) {
                return rule
            }
        }
        return null
    }

    // 檢查單一規則是否有效
    private isRuleValid(rule: StateTransitionCondition): boolean {
        const context = this.context

        // 檢查 session 存在性
        if (rule.sessionExists !== undefined) {
            const hasSession = context.session !== null
            if (rule.sessionExists !== hasSession) {
                console.log(`🔍 [StateMachine] Session 存在性檢查失敗: 期望 ${rule.sessionExists}, 實際 ${hasSession}`)
                return false
            }
        }

        // 檢查 session 狀態
        if (rule.sessionStatus !== undefined) {
            if (!context.session || context.session.status !== rule.sessionStatus) {
                console.log(`🔍 [StateMachine] Session 狀態檢查失敗: 期望 ${rule.sessionStatus}, 實際 ${context.session?.status}`)
                return false
            }
        }

        // 檢查 session 類型
        if (rule.sessionType !== undefined) {
            if (!context.session || context.session.type !== rule.sessionType) {
                console.log(`🔍 [StateMachine] Session 類型檢查失敗: 期望 ${rule.sessionType}, 實際 ${context.session?.type}`)
                return false
            }
        }

        // 檢查錄音狀態
        if (rule.isRecording !== undefined) {
            if (context.isRecording !== rule.isRecording) {
                console.log(`🔍 [StateMachine] 錄音狀態檢查失敗: 期望 ${rule.isRecording}, 實際 ${context.isRecording}`)
                return false
            }
        }

        // 檢查逐字稿存在性
        if (rule.hasTranscripts !== undefined) {
            const hasTranscripts = context.transcriptCount > 0
            if (rule.hasTranscripts !== hasTranscripts) {
                console.log(`🔍 [StateMachine] 逐字稿存在性檢查失敗: 期望 ${rule.hasTranscripts}, 實際 ${hasTranscripts}`)
                return false
            }
        }

        // 執行自定義驗證
        if (rule.customValidator) {
            const isValid = rule.customValidator(context)
            if (!isValid) {
                console.log(`🔍 [StateMachine] 自定義驗證失敗`)
                return false
            }
        }

        console.log(`✅ [StateMachine] 規則驗證通過: ${rule.currentState} -> ${rule.targetState}`)
        return true
    }

    // 執行狀態轉換
    private executeTransition(rule: StateTransitionCondition, trigger: StateTransitionTrigger): StateTransitionResult {
        const sideEffectKey = `${rule.currentState}->${rule.targetState}->${trigger}`
        const sideEffects = STATE_TRANSITION_SIDE_EFFECTS[sideEffectKey] || []

        console.log(`🔄 [StateMachine] 執行轉換: ${sideEffectKey}`)
        console.log(`🔄 [StateMachine] 副作用:`, sideEffects)

        return {
            success: true,
            newState: rule.targetState,
            sideEffects
        }
    }

    // 添加狀態變更監聽器
    addListener(listener: (newState: AppState, sideEffects: StateTransitionSideEffect[]) => void): void {
        this.listeners.add(listener)
    }

    // 移除狀態變更監聽器
    removeListener(listener: (newState: AppState, sideEffects: StateTransitionSideEffect[]) => void): void {
        this.listeners.delete(listener)
    }

    // 通知所有監聽器
    private notifyListeners(newState: AppState, sideEffects: StateTransitionSideEffect[]): void {
        this.listeners.forEach(listener => {
            try {
                listener(newState, sideEffects)
            } catch (error) {
                console.error('🔄 [StateMachine] 監聽器執行失敗:', error)
            }
        })
    }

    // 取得當前狀態
    getCurrentState(): AppState {
        return this.currentState
    }

    // 取得當前上下文
    getContext(): StateTransitionContext {
        return { ...this.context }
    }

    // 檢查是否可以執行特定轉換
    canTransition(trigger: StateTransitionTrigger): boolean {
        const matchingRules = this.findMatchingRules(trigger)
        return matchingRules.some(rule => this.isRuleValid(rule))
    }

    // 取得可用的轉換
    getAvailableTransitions(): StateTransitionTrigger[] {
        const availableTransitions: StateTransitionTrigger[] = []

        // 檢查所有可能的觸發器
        const allTriggers: StateTransitionTrigger[] = [
            "USER_START_RECORDING",
            "USER_STOP_RECORDING",
            "FIRST_TRANSCRIPT_RECEIVED",
            "SESSION_CREATED",
            "SESSION_UPGRADED",
            "PROCESSING_STARTED",
            "PROCESSING_COMPLETED",
            "ERROR_OCCURRED",
            "USER_NEW_NOTE",
            "TRANSCRIPT_COMPLETED"
        ]

        for (const trigger of allTriggers) {
            if (this.canTransition(trigger)) {
                availableTransitions.push(trigger)
            }
        }

        return availableTransitions
    }

    // 重置狀態機
    reset(newContext?: StateTransitionContext): void {
        this.currentState = "default"
        if (newContext) {
            this.context = newContext
        } else {
            this.context = {
                currentState: "default",
                isRecording: false,
                transcriptCount: 0,
                session: null,
                error: null
            }
        }
        console.log('🔄 [StateMachine] 狀態機已重置')
    }

    // 暴露到 window 供調試使用
    private exposeToWindow(): void {
        if (typeof window !== 'undefined') {
            (window as any).stateMachine = {
                getCurrentState: () => this.getCurrentState(),
                getContext: () => this.getContext(),
                canTransition: (trigger: StateTransitionTrigger) => this.canTransition(trigger),
                getAvailableTransitions: () => this.getAvailableTransitions(),
                transition: (trigger: StateTransitionTrigger) => this.transition(trigger),
                reset: () => this.reset(),

                // 便利方法
                startRecording: () => this.transition("USER_START_RECORDING"),
                stopRecording: () => this.transition("USER_STOP_RECORDING"),
                newNote: () => this.transition("USER_NEW_NOTE"),
                firstTranscript: () => this.transition("FIRST_TRANSCRIPT_RECEIVED"),
                processingComplete: () => this.transition("PROCESSING_COMPLETED"),
                error: () => this.transition("ERROR_OCCURRED"),
            }

            console.log('🔄 [StateMachine] 調試介面已暴露到 window.stateMachine')
            console.log('   使用方法: window.stateMachine.startRecording()')
            console.log('   查看狀態: window.stateMachine.getCurrentState()')
            console.log('   可用轉換: window.stateMachine.getAvailableTransitions()')
        }
    }
}

// 副作用處理器介面
export interface SideEffectHandler {
    handleSideEffect(effect: StateTransitionSideEffect): Promise<void> | void
}

// 狀態機管理器
export class StateMachineManager {
    private stateMachine: StateMachine
    private sideEffectHandlers: Map<string, SideEffectHandler> = new Map()

    constructor(initialContext: StateTransitionContext) {
        this.stateMachine = new StateMachine(initialContext)

        // 監聽狀態變更並處理副作用
        this.stateMachine.addListener((newState, sideEffects) => {
            this.handleSideEffects(sideEffects)
        })
    }

    // 註冊副作用處理器
    registerSideEffectHandler(effectType: string, handler: SideEffectHandler): void {
        this.sideEffectHandlers.set(effectType, handler)
        console.log(`🔄 [StateMachineManager] 副作用處理器已註冊: ${effectType}`)
    }

    // 處理副作用
    private async handleSideEffects(sideEffects: StateTransitionSideEffect[]): Promise<void> {
        for (const effect of sideEffects) {
            const handler = this.sideEffectHandlers.get(effect.type)
            if (handler) {
                try {
                    await handler.handleSideEffect(effect)
                    console.log(`✅ [StateMachineManager] 副作用處理完成: ${effect.type}`)
                } catch (error) {
                    console.error(`❌ [StateMachineManager] 副作用處理失敗: ${effect.type}`, error)
                }
            } else {
                console.warn(`⚠️ [StateMachineManager] 未找到副作用處理器: ${effect.type}`)
            }
        }
    }

    // 取得狀態機實例
    getStateMachine(): StateMachine {
        return this.stateMachine
    }

    // 更新上下文並觸發自動轉換
    updateContextAndTransition(
        newContext: Partial<StateTransitionContext>,
        autoTrigger?: StateTransitionTrigger
    ): StateTransitionResult | null {
        this.stateMachine.updateContext(newContext)

        if (autoTrigger && this.stateMachine.canTransition(autoTrigger)) {
            return this.stateMachine.transition(autoTrigger)
        }

        return null
    }
}

// 便利函數：建立狀態機實例
export function createStateMachine(initialContext: StateTransitionContext): StateMachineManager {
    return new StateMachineManager(initialContext)
}


# END FILE CONTENTS


# File: frontend/hooks/use-session-adapter.ts

"use client"

import { useSession as useSessionLegacy } from './use-session'
import { useSessionNew } from './use-session-new'
import { isFeatureEnabled } from '../lib/feature-flags'
import { SessionResponse } from '../lib/api'

// 統一的 UseSession 介面
interface UseSessionReturn {
    currentSession: SessionResponse | null
    isLoading: boolean
    error: string | null
    createNoteSession: (title: string, content?: string) => Promise<SessionResponse | null>
    createRecordingSession: (title: string, content?: string) => Promise<SessionResponse | null>
    upgradeToRecording: () => Promise<SessionResponse | null>
    finishSession: () => Promise<void>
    deleteSession: () => Promise<void>
    clearSession: () => void
    checkActiveSession: () => Promise<SessionResponse | null>
}

/**
 * useSession 適配器 Hook
 * 根據功能開關決定使用新舊版本的 useSession
 * 確保 API 完全相容，現有組件無需修改
 */
export function useSession(): UseSessionReturn {
    const useNewSessionHook = isFeatureEnabled('useNewSessionHook')
    const useNewStateManagement = isFeatureEnabled('useNewStateManagement')

    console.log('🔄 [useSessionAdapter] 功能開關狀態:', {
        useNewSessionHook,
        useNewStateManagement,
        willUseNewVersion: useNewSessionHook || useNewStateManagement
    })

    // 如果啟用新 Session Hook 或新狀態管理，使用新版本
    if (useNewSessionHook || useNewStateManagement) {
        console.log('🔄 [useSessionAdapter] 使用新版本 useSessionNew')
        return useSessionNew()
    }

    // 否則使用舊版本
    console.log('🔄 [useSessionAdapter] 使用舊版本 useSession')
    return useSessionLegacy()
}

// 導出舊版本供直接使用（用於測試或特殊情況）
export { useSession as useSessionLegacy } from './use-session'
export { useSessionNew } from './use-session-new'


# END FILE CONTENTS


# File: frontend/hooks/use-transcript-adapter.ts

"use client"

import { useTranscript as useTranscriptLegacy } from './use-transcript'
import { useTranscriptNew } from './use-transcript-new'
import { isFeatureEnabled } from '../lib/feature-flags'
import { TranscriptMessage } from '../lib/transcript-manager'

// 統一的 UseTranscript 介面
interface UseTranscriptReturn {
    transcripts: TranscriptMessage[]
    isConnected: boolean
    isCompleted: boolean
    error: string | null
    connect: (sessionId: string) => Promise<void>
    disconnect: () => void
    clearTranscripts: () => void
    // 自動捲動功能
    autoScrollEnabled: boolean
    enableAutoScroll: () => void
    disableAutoScroll: () => void
    scrollToLatest: () => void
    setScrollContainer: (element: HTMLElement | null) => void
}

/**
 * useTranscript 適配器 Hook
 * 根據功能開關決定使用新舊版本的 useTranscript
 * 特別注意保持 TranscriptManager 的 WebSocket 重連機制
 */
export function useTranscript(): UseTranscriptReturn {
    const useNewTranscriptHook = isFeatureEnabled('useNewTranscriptHook')
    const useNewStateManagement = isFeatureEnabled('useNewStateManagement')

    console.log('🔄 [useTranscriptAdapter] 功能開關狀態:', {
        useNewTranscriptHook,
        useNewStateManagement,
        willUseNewVersion: useNewTranscriptHook || useNewStateManagement
    })

    // 如果啟用新 Transcript Hook 或新狀態管理，使用新版本
    if (useNewTranscriptHook || useNewStateManagement) {
        console.log('🔄 [useTranscriptAdapter] 使用新版本 useTranscriptNew')
        return useTranscriptNew()
    }

    // 否則使用舊版本
    console.log('🔄 [useTranscriptAdapter] 使用舊版本 useTranscript')
    return useTranscriptLegacy()
}

// 導出舊版本供直接使用（用於測試或特殊情況）
export { useTranscript as useTranscriptLegacy } from './use-transcript'
export { useTranscriptNew } from './use-transcript-new'


# END FILE CONTENTS


# File: app/services/r2_client.py

"""
Cloudflare R2 儲存服務客戶端
使用 Cloudflare API Token 認證
"""

import os
import logging
import asyncio
import aiohttp
from typing import Dict, Any
from uuid import UUID
import requests
from dotenv import load_dotenv
from supabase import Client
from app.core.config import settings

# 載入環境變數
load_dotenv()

logger = logging.getLogger(__name__)

class R2ClientError(Exception):
    """R2 客戶端異常"""
    pass

class R2Client:
    """Cloudflare R2 儲存客戶端 - 使用 API Token 認證"""

    def __init__(self):
        """初始化 R2 客戶端"""
        self.account_id = os.getenv('R2_ACCOUNT_ID')
        self.bucket_name = os.getenv('R2_BUCKET_NAME', 'studyscriber-audio')
        self.api_token = os.getenv('R2_API_TOKEN')

        # 驗證必要配置
        if not self.account_id:
            raise R2ClientError("缺少 R2_ACCOUNT_ID 環境變數")

        if not self.api_token:
            raise R2ClientError("缺少 R2_API_TOKEN 環境變數")

        # 初始化 API Token 客戶端
        self.api_base_url = f"https://api.cloudflare.com/client/v4/accounts/{self.account_id}/r2/buckets/{self.bucket_name}/objects"
        self.headers = {
            'Authorization': f'Bearer {self.api_token}',
            'Content-Type': 'application/octet-stream'
        }

        logger.info("R2 客戶端初始化成功，使用 API Token 認證")

    async def store_segment(self, sid: UUID, seq: int, blob: bytes) -> str:
        """
        儲存音檔切片到 R2 (簡化版 REST API 架構)

        Args:
            sid: 會話 ID
            seq: 切片序號
            blob: 音檔二進制資料

        Returns:
            str: R2 儲存鍵值

        Raises:
            R2ClientError: 上傳失敗時拋出
        """
        key = f"{sid}/{seq:06}.webm"
        url = f"{self.api_base_url}/{key}"

        headers = {
            "Authorization": f"Bearer {self.api_token}",
            "Content-Type": "audio/webm"
        }

        try:
            async with aiohttp.ClientSession() as session:
                async with session.put(url, data=blob, headers=headers) as response:
                    if response.status in [200, 201]:
                        logger.info(f"✅ R2 上傳成功: {key} ({len(blob)} bytes)")
                        return key
                    else:
                        error_text = await response.text()
                        raise R2ClientError(f"R2 上傳失敗: {response.status} - {error_text}")

        except aiohttp.ClientError as e:
            raise R2ClientError(f"R2 上傳連線錯誤: {str(e)}")
        except Exception as e:
            raise R2ClientError(f"R2 上傳未知錯誤: {str(e)}")

    async def test_connection(self) -> Dict[str, Any]:
        """測試連接"""
        try:
            # 測試 token 有效性
            verify_url = "https://api.cloudflare.com/client/v4/user/tokens/verify"
            response = requests.get(verify_url, headers={'Authorization': f'Bearer {self.api_token}'})

            if response.status_code == 200:
                result = response.json()
                return {
                    'success': True,
                    'auth_method': 'api_token',
                    'token_status': result.get('result', {}).get('status'),
                    'account_id': self.account_id,
                    'bucket_name': self.bucket_name
                }
            else:
                return {
                    'success': False,
                    'error': f'Token 驗證失敗: {response.status_code}',
                    'auth_method': 'api_token'
                }
        except Exception as e:
            return {
                'success': False,
                'error': f'API Token 連接測試失敗: {str(e)}',
                'auth_method': 'api_token'
            }

    async def upload_file(self, key: str, data: bytes, content_type: str = 'application/octet-stream') -> Dict[str, Any]:
        """上傳檔案到 R2"""
        try:
            url = f"{self.api_base_url}/{key}"
            headers = self.headers.copy()
            headers['Content-Type'] = content_type

            response = requests.put(url, data=data, headers=headers)

            if response.status_code in [200, 201]:
                return {
                    'success': True,
                    'key': key,
                    'size': len(data),
                    'method': 'api_token'
                }
            else:
                return {
                    'success': False,
                    'error': f'上傳失敗: {response.status_code} - {response.text}',
                    'method': 'api_token'
                }
        except Exception as e:
            return {
                'success': False,
                'error': f'API Token 上傳失敗: {str(e)}',
                'method': 'api_token'
            }

    async def store_chunk_blob(
        self, session_id: UUID, chunk_sequence: int, blob_data: bytes, supabase_client: Client
    ) -> dict:
        """
        將音檔切片 Blob 存儲到 R2 並在資料庫中記錄

        Args:
            session_id: 會話 ID
            chunk_sequence: 音檔切片序號
            blob_data: 音檔二進制數據
            supabase_client: Supabase 客戶端實例

        Returns:
            Dict: 包含操作結果的字典
        """
        # 生成 R2 儲存鍵值
        r2_key = generate_audio_key(str(session_id), chunk_sequence)

        # 最多重試3次上傳
        max_retries = 3
        upload_result = None

        for attempt in range(max_retries):
            try:
                # 上傳檔案到 R2
                upload_result = await self.upload_file(
                    key=r2_key,
                    data=blob_data,
                    content_type='audio/webm'
                )

                if upload_result['success']:
                    break

                logger.warning(f"上傳失敗，第 {attempt + 1} 次嘗試: {upload_result.get('error')}")

                # 指數退避
                if attempt < max_retries - 1:
                    await asyncio.sleep(2 ** attempt)

            except Exception as e:
                logger.error(f"上傳異常，第 {attempt + 1} 次嘗試: {str(e)}")
                if attempt == max_retries - 1:
                    upload_result = {
                        'success': False,
                        'error': f'上傳失敗，已重試 {max_retries} 次: {str(e)}'
                    }
                elif attempt < max_retries - 1:
                    await asyncio.sleep(2 ** attempt)

        if not upload_result['success']:
            return {
                'success': False,
                'error': f'R2 上傳失敗: {upload_result.get("error")}',
                'session_id': session_id,
                'chunk_sequence': chunk_sequence
            }

        # 使用傳入的 supabase_client 進行資料庫操作
        try:
            audio_file_record = {
                "session_id": str(session_id),
                "chunk_sequence": chunk_sequence,
                "r2_key": r2_key,
                "r2_bucket": self.bucket_name,
                "file_size": len(blob_data),
                "duration_seconds": settings.AUDIO_CHUNK_DURATION_SEC  # 從環境變數讀取切片時長
            }

            db_response = supabase_client.table("audio_files").insert(audio_file_record).execute()

            if not db_response.data:
                return {
                    'success': False,
                    'error': '資料庫記錄建立失敗',
                    'session_id': session_id,
                    'chunk_sequence': chunk_sequence
                }

        except Exception as db_error:
            logger.error(f"資料庫操作失敗: {str(db_error)}")
            return {
                'success': False,
                'error': f'資料庫記錄建立失敗: {str(db_error)}',
                'session_id': session_id,
                'chunk_sequence': chunk_sequence
            }

        return {
            'success': True,
            'session_id': session_id,
            'chunk_sequence': chunk_sequence,
            'r2_key': r2_key,
            'r2_bucket': self.bucket_name,
            'file_size': len(blob_data),
            'upload_method': upload_result.get('method')
        }

    def get_download_url(self, key: str) -> str:
        """
        獲取檔案的直接下載 URL

        注意：此 URL 需要 API Token 認證，適用於服務端使用
        對於客戶端下載，建議使用 Cloudflare 的公開 URL 或實作代理端點
        """
        return f"{self.api_base_url}/{key}"

    async def download_file(self, key: str) -> Dict[str, Any]:
        """從 R2 下載檔案"""
        try:
            url = f"{self.api_base_url}/{key}"
            headers = {'Authorization': f'Bearer {self.api_token}'}

            response = requests.get(url, headers=headers)

            if response.status_code == 200:
                return {
                    'success': True,
                    'key': key,
                    'data': response.content,
                    'size': len(response.content),
                    'method': 'api_token'
                }
            elif response.status_code == 404:
                return {
                    'success': False,
                    'error': f'檔案不存在: {key}',
                    'method': 'api_token'
                }
            else:
                return {
                    'success': False,
                    'error': f'下載失敗: {response.status_code} - {response.text}',
                    'method': 'api_token'
                }
        except Exception as e:
            return {
                'success': False,
                'error': f'API Token 下載失敗: {str(e)}',
                'method': 'api_token'
            }

def get_r2_client() -> R2Client:
    """獲取 R2 客戶端實例"""
    return R2Client()

def generate_audio_key(session_id: str, chunk_sequence: int) -> str:
    """生成音檔儲存鍵名"""
    return f"audio/{session_id}/chunk_{chunk_sequence:04d}.webm"


# END FILE CONTENTS


# File: frontend/lib/services/recording-flow-service.ts

"use client"

import { BaseService } from './base-service'
import { serviceContainer } from './service-container'
import { SERVICE_KEYS, type ISessionService, type IRecordingService, type ITranscriptService, type TranscriptMessage } from './interfaces'
import type { SessionResponse } from '../api'
import type { AppState } from '../../types/app-state'
import { useAppStore } from '../app-store-zustand'
import { formatTime } from '../../utils/time'

/**
 * 錄音流程管理服務
 *
 * 整合 SessionService、RecordingService 和 TranscriptService
 * 提供統一的錄音流程管理
 */
import { STTProvider } from '../api'

const AUDIO_CHUNK_SEC = Number(
  process.env.NEXT_PUBLIC_AUDIO_CHUNK_INTERVAL_SEC ?? "15"
);

export class RecordingFlowService extends BaseService {
  protected readonly serviceName = 'RecordingFlowService'

  // 服務依賴
  private sessionService!: ISessionService
  private recordingService!: IRecordingService
  private transcriptService!: ITranscriptService

  // 流程狀態
  private currentSession: SessionResponse | null = null
  private isFlowActive = false
  private labelIntervalSec = (() => {
    const raw = process.env.NEXT_PUBLIC_TRANSCRIPT_LABEL_INTERVAL
    const n = Number(raw)
    return Number.isFinite(n) && n > 0 ? Math.floor(n) : 15
  })()
  private lastLabelSec = 0
  private transcriptEntries: Array<{ time: string; text: string }> = []

  private setAppState: (s: AppState) => void

  constructor(setAppStateFn?: (s: AppState) => void) {
    super()
    if (setAppStateFn) {
      this.setAppState = setAppStateFn
    } else {
      this.setAppState = useAppStore.getState().setState
    }
  }

  /**
   * 服務初始化
   */
  async initialize(): Promise<void> {
    this.logInfo('初始化錄音流程服務')

    // 解析服務依賴
    this.sessionService = serviceContainer.resolve<ISessionService>(SERVICE_KEYS.SESSION_SERVICE)
    this.recordingService = serviceContainer.resolve<IRecordingService>(SERVICE_KEYS.RECORDING_SERVICE)
    this.transcriptService = serviceContainer.resolve<ITranscriptService>(SERVICE_KEYS.TRANSCRIPT_SERVICE)

    this.logSuccess('服務依賴解析完成')
    this.logSuccess('初始化完成')
  }

  /**
   * 服務清理
   */
  async cleanup(): Promise<void> {
    this.logInfo('清理錄音流程服務')

    // 如果有活躍的流程，先停止
    if (this.isFlowActive) {
      await this.stopRecordingFlow()
    }

    // 重置狀態
    this.currentSession = null
    this.isFlowActive = false
    this.transcriptEntries = []

    this.logSuccess('清理完成')
  }

  /**
   * 開始錄音流程
   */
  async startRecordingFlow(title?: string, content?: string, startTs?: number, sttProvider?: STTProvider): Promise<SessionResponse> {
    this.logInfo('開始錄音流程', { title, content, startTs })

    try {
      // ① 先拿權限
      if (!(await this.recordingService.requestPermission())) {
        this.setAppState('default')
        throw new Error('麥克風權限被拒')
      }

      // === 🛠 追加: 若有現有活躍會話，先結束它，避免 Session 打架 ===
      const activeSession = await this.sessionService.checkActiveSession()
      if (activeSession) {
        this.logInfo('檢測到現有活躍會話，先完成它以避免衝突', {
          sessionId: activeSession.id,
          type: activeSession.type,
          status: activeSession.status
        })
        await this.sessionService.finishSession(activeSession.id)
        this.logSuccess('已完成現有活躍會話', { sessionId: activeSession.id })
      }
      // === 🛠 追加結束 ===

      // ② 建 Session（POST /session）
      const session = await this.sessionService.createRecordingSession(
        title || `錄音筆記 ${new Date().toLocaleString()}`,
        content,
        startTs,
        sttProvider
      )
      if (!session) {
        this.setAppState('default')
        throw new Error('建立 Session 失敗')
      }

      // ③ 啟動逐字稿服務
      await this.transcriptService.start(session.id)
      this.setAppState('processing')

      // 步驟 1: 使用新建立的會話
      this.currentSession = session
      this.logSuccess('錄音會話已準備', { sessionId: this.currentSession.id, withStartTs: !!startTs })

      // 步驟 2: 等待會話在資料庫中完全可見
      this.logInfo('步驟 2: 等待會話準備完成')
      const isReady = await this.sessionService.waitForSessionReady(this.currentSession.id, 5000)
      if (!isReady) {
        throw new Error('會話準備超時')
      }
      this.logSuccess('會話準備完成')

      // 步驟 3: 連接逐字稿服務
      this.logInfo('步驟 3: 連接逐字稿服務')
      await this.transcriptService.connect(this.currentSession.id)
      this.setupTranscriptListener()
      this.logSuccess('逐字稿服務連接成功')

      // 步驟 4: 開始錄音
      this.logInfo('步驟 4: 開始錄音')
      await this.recordingService.startRecording(this.currentSession.id)

      // 通知全域狀態：設置錄音開始時間，啟動計時器
      try {
        const setRecordingStart = (await import('../app-store-zustand')).useAppStore.getState().setRecordingStart
        setRecordingStart(Date.now())
        console.log('🕐 [RecordingFlowService] 已透過 AppStore 設置錄音開始時間')
      } catch (e) {
        console.warn('⚠️ [RecordingFlowService] 無法設置錄音開始時間:', e)
      }

      this.logSuccess('錄音啟動成功')

      // 標記流程為活躍
      this.isFlowActive = true

      this.logSuccess('錄音流程啟動完成', {
        sessionId: this.currentSession.id,
        isRecording: this.recordingService.isRecording(),
        transcriptConnected: this.transcriptService.isConnected(this.currentSession.id)
      })

      // 診斷資訊
      console.log('🎉 [RecordingFlowService] 錄音流程已完全啟動', {
        sessionId: this.currentSession.id,
        audioRecording: this.recordingService.isRecording() ? '✅ 錄音中' : '❌ 未錄音',
        transcriptWS: this.transcriptService.isConnected(this.currentSession.id) ? '✅ 已連接' : '❌ 未連接',
        recordingState: this.recordingService.getRecordingState(),
        timestamp: new Date().toISOString()
      })

      console.log('📋 [RecordingFlowService] 請檢查：')
      console.log('1. 應該每秒看到 [AudioRecorder] ondataavailable 觸發')
      console.log('2. 應該每秒看到 [AudioUploadWebSocket] Binary frame 已送出')
      console.log('3. DevTools > Network > WS > /ws/upload_audio 應該看到 binary frames')
      console.log('4. DevTools > Network > WS > /ws/transcript_feed 應該收到逐字稿')

      return this.currentSession

    } catch (error) {
      await this.cleanupFlowResources()
      this.handleError('開始錄音流程', error)
      throw error
    }
  }

  /**
   * 停止錄音流程
   */
  async stopRecordingFlow(): Promise<void> {
    this.logInfo('停止錄音流程')

    try {
      if (!this.isFlowActive || !this.currentSession) {
        this.logWarning('沒有活躍的錄音流程')
        return
      }

      // 只停止錄音，不主動斷線或結束 session
      if (this.recordingService.isRecording()) {
        await this.recordingService.stopRecording()
        this.logSuccess('錄音已停止')
      }
      // 進入 processing 狀態，等待 transcript_complete
      this.setAppState('processing')
    } catch (error) {
      this.handleError('停止錄音流程', error)
      throw error
    }
  }

  /**
   * 取得當前會話
   */
  getCurrentSession(): SessionResponse | null {
    return this.currentSession
  }

  /**
   * 檢查流程是否活躍
   */
  isFlowRunning(): boolean {
    return this.isFlowActive
  }

  /**
   * 取得逐字稿項目
   */
  getTranscriptEntries(): Array<{ time: string; text: string }> {
    return [...this.transcriptEntries]
  }

  /**
   * 取得錄音狀態
   */
  getRecordingState() {
    return this.recordingService.getRecordingState()
  }

  /**
   * 設定逐字稿監聽器
   */
  private setupTranscriptListener(): void {
    if (!this.currentSession) return

    const sessionId = this.currentSession.id

    // 移除現有監聽器（如果有）
    this.transcriptService.removeTranscriptListener(sessionId, this.handleTranscriptMessage)

    // 添加新的監聽器
    this.transcriptService.addTranscriptListener(sessionId, this.handleTranscriptMessage)

    this.logInfo('逐字稿監聽器已設定', { sessionId })
  }

  /**
   * 處理逐字稿訊息
   */
  private handleTranscriptMessage = (msg: TranscriptMessage): void => {
    try {
      // 1. 判斷訊息型別
      if (
        (msg.type === 'transcript' || msg.type === 'transcript_segment') &&
        msg.text
      ) {
        /* 2. 計算 startSec
           a. 後端若有 start_time → 用它
           b. 否則用 chunk_sequence × 切片長度
        */
        const startSec =
          msg.start_time !== undefined
            ? msg.start_time
            : (msg.chunk_sequence ?? 0) * AUDIO_CHUNK_SEC;

        /* 3. 每隔 labelIntervalSec 秒插入一條時間碼 */
        if (startSec - this.lastLabelSec >= this.labelIntervalSec) {
          this.transcriptEntries.push({
            time: formatTime(startSec),
            text: '',              // 純時間標籤
          })
          this.lastLabelSec = startSec
        }

        /* 4. 真正的逐字稿行 */
        this.transcriptEntries.push({
          time: formatTime(startSec),
          text: msg.text.trim(),
        })
      } else if (msg.type === 'error') {
        this.logWarning('逐字稿錯誤', msg)
      } else if (msg.type === 'transcript_complete') {
        this.setAppState('finished')
        if (this.currentSession) {
          this.transcriptService.disconnect(this.currentSession.id)
        }
        this.isFlowActive = false
        this.logSuccess('收到 transcript_complete，流程結束')
      }
    } catch (e) {
      this.logWarning('處理逐字稿訊息失敗', e)
    }
  }

  /**
   * 清理流程資源
   */
  private async cleanupFlowResources(): Promise<void> {
    try {
      // 停止錄音（如果還在錄音）
      if (this.recordingService?.isRecording()) {
        await this.recordingService.stopRecording()
      }

      // 斷開逐字稿服務
      if (this.currentSession && this.transcriptService?.isConnected(this.currentSession.id)) {
        await this.transcriptService.disconnect(this.currentSession.id)
      }

      // 重置狀態
      this.currentSession = null
      this.isFlowActive = false

      this.logInfo('流程資源清理完成')
    } catch (error) {
      this.logWarning('清理流程資源時發生錯誤', error)
    }
  }

  /**
   * 取得流程詳細狀態
   */
  async getFlowStatus() {
    const baseStatus = this.getStatus()

    return {
      ...baseStatus,
      isFlowActive: this.isFlowActive,
      currentSession: this.currentSession,
      transcriptEntriesCount: this.transcriptEntries.length,
      recordingState: this.recordingService?.getRecordingState() || null,
      transcriptConnected: this.currentSession
        ? this.transcriptService?.isConnected(this.currentSession.id) || false
        : false
    }
  }
}


# END FILE CONTENTS


# File: frontend/README.md

# Recreate the UI

*Automatically synced with your [v0.dev](https://v0.dev) deployments*

[![Deployed on Vercel](https://img.shields.io/badge/Deployed%20on-Vercel-black?style=for-the-badge&logo=vercel)](https://vercel.com/otoitsukis-projects/v0-recreate-the-ui)
[![Built with v0](https://img.shields.io/badge/Built%20with-v0.dev-black?style=for-the-badge)](https://v0.dev/chat/projects/5FBRtobaC6g)

## Overview

This repository will stay in sync with your deployed chats on [v0.dev](https://v0.dev).
Any changes you make to your deployed app will be automatically pushed to this repository from [v0.dev](https://v0.dev).

## Deployment

Your project is live at:

**[https://vercel.com/otoitsukis-projects/v0-recreate-the-ui](https://vercel.com/otoitsukis-projects/v0-recreate-the-ui)**

## Build your app

Continue building your app on:

**[https://v0.dev/chat/projects/5FBRtobaC6g](https://v0.dev/chat/projects/5FBRtobaC6g)**

## How It Works

1. Create and modify your project using [v0.dev](https://v0.dev)
2. Deploy your chats from the v0 interface
3. Changes are automatically pushed to this repository
4. Vercel deploys the latest version from this repository

# END FILE CONTENTS


# File: frontend/components/ui/drawer.tsx

"use client"

import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}


# END FILE CONTENTS


# File: frontend/components/ui/accordion.tsx

"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }


# END FILE CONTENTS


# File: .editorconfig

root = true

[*]
charset = utf-8
end_of_line = lf
insert_final_newline = true
trim_trailing_whitespace = true

[*.py]
indent_style = space
indent_size = 4
max_line_length = 79

[*.{yml,yaml}]
indent_style = space
indent_size = 2

[*.{json,js,ts}]
indent_style = space
indent_size = 2

[*.md]
trim_trailing_whitespace = false


# END FILE CONTENTS


# File: frontend/components/NetworkRestorerClient.tsx

"use client"
import { useNetworkRestorer } from '@/hooks/useNetworkRestorer'

export function NetworkRestorerClient() {
    useNetworkRestorer()
    return null
}


# END FILE CONTENTS


# File: frontend/hooks/use-session-new.ts

"use client"

import { useCallback, useMemo, useEffect } from 'react'
import { useAppStateContext } from './use-app-state-context'
import { isFeatureEnabled } from '../lib/feature-flags'
import { SERVICE_KEYS, serviceContainer } from '../lib/services'
import type { ISessionService } from '../lib/services'
import type { SessionResponse } from '../lib/api'

interface UseSessionNewReturn {
    currentSession: SessionResponse | null
    isLoading: boolean
    error: string | null
    createNoteSession: (title?: string, content?: string) => Promise<SessionResponse | null>
    createRecordingSession: (title?: string, content?: string) => Promise<SessionResponse | null>
    upgradeToRecording: () => Promise<SessionResponse | null>
    finishSession: () => Promise<void>
    deleteSession: () => Promise<void>
    clearSession: () => void
    checkActiveSession: () => Promise<SessionResponse | null>
}

/**
 * useSessionNew - 會話管理 Hook (適配器層)
 *
 * 重構為適配器層：
 * - 內部調用 SessionService 而非直接調用 sessionAPI
 * - 保持對外接口完全不變，確保組件層無感知變更
 * - 使用服務層實現清晰的架構分層
 */
export function useSessionNew(): UseSessionNewReturn {
    const context = useAppStateContext()

    console.log('🔄 [useSessionNew] Hook 初始化 (適配器層)，功能開關狀態:', {
        useNewStateManagement: isFeatureEnabled('useNewStateManagement'),
        useNewSessionHook: isFeatureEnabled('useNewSessionHook'),
        contextSession: context.appData.session,
        contextError: context.error,
        contextLoading: context.isLoading,
    })

    // 解析服務實例 - 使用服務層
    const sessionService = useMemo(() => {
        try {
            return serviceContainer.resolve<ISessionService>(SERVICE_KEYS.SESSION_SERVICE)
        } catch (error) {
            console.error('❌ [useSessionNew] 無法解析 SessionService:', error)
            throw new Error('會話服務初始化失敗')
        }
    }, [])

    const clearError = useCallback(() => {
        context.setError(null)
    }, [context])

    const checkActiveSession = useCallback(async (): Promise<SessionResponse | null> => {
        context.setLoading(true)
        clearError()

        try {
            const activeSession = await sessionService.checkActiveSession()
            if (activeSession) {
                context.setSession({
                    id: activeSession.id,
                    status: activeSession.status,
                    type: activeSession.type,
                })
                console.log('✅ [useSessionNew] 已恢復活躍會話狀態:', activeSession)
                return activeSession
            } else {
                console.log('ℹ️ [useSessionNew] 沒有活躍會話，使用預設狀態')
                context.setSession(null)
                return null
            }
        } catch (err) {
            if (err instanceof Error && err.message.includes('Network Error')) {
                console.warn('⚠️ [useSessionNew] Backend API 連線暫時失敗，將在後續重試:', err.message)
                return null
            }

            const errorMessage = err instanceof Error ? err.message : '檢查活躍會話失敗'
            context.setError(errorMessage)
            console.error('❌ [useSessionNew] 檢查活躍會話失敗:', err)
            return null
        } finally {
            context.setLoading(false)
        }
    }, [clearError, context, sessionService])

    const createNoteSession = useCallback(async (title?: string, content?: string): Promise<SessionResponse | null> => {
        context.setLoading(true)
        clearError()

        try {
            const session = await sessionService.createNoteSession(title, content)

            context.setSession({
                id: session.id,
                status: session.status,
                type: session.type,
            })

            console.log('✅ [useSessionNew] 純筆記會話建立成功:', session)
            return session
        } catch (err) {
            // 保持原有的 409 衝突錯誤處理邏輯
            if (err instanceof Error && err.message.includes('409')) {
                const conflictMessage = '檢測到活躍會話衝突，請重新整理頁面後再試'
                context.setError(conflictMessage)
                console.error('❌ [useSessionNew] 會話衝突錯誤 (409):', err.message)
                return null
            }

            const errorMessage = err instanceof Error ? err.message : '建立會話失敗'
            context.setError(errorMessage)
            console.error('❌ [useSessionNew] 建立純筆記會話失敗:', err)
            return null
        } finally {
            context.setLoading(false)
        }
    }, [clearError, context, sessionService])

    const createRecordingSession = useCallback(async (title?: string, content?: string): Promise<SessionResponse | null> => {
        context.setLoading(true)
        clearError()

        try {
            const session = await sessionService.createRecordingSession(title, content)

            context.setSession({
                id: session.id,
                status: session.status,
                type: session.type,
            })

            console.log('✅ [useSessionNew] 錄音會話建立成功:', session)
            return session
        } catch (err) {
            // 保持原有的 409 衝突錯誤處理邏輯
            if (err instanceof Error && err.message.includes('409')) {
                const conflictMessage = '檢測到活躍會話衝突，請重新整理頁面後再試'
                context.setError(conflictMessage)
                console.error('❌ [useSessionNew] 會話衝突錯誤 (409):', err.message)
                return null
            }

            const errorMessage = err instanceof Error ? err.message : '建立錄音會話失敗'
            context.setError(errorMessage)
            console.error('❌ [useSessionNew] 建立錄音會話失敗:', err)
            return null
        } finally {
            context.setLoading(false)
        }
    }, [clearError, context, sessionService])

    const upgradeToRecording = useCallback(async (): Promise<SessionResponse | null> => {
        const currentSessionData = context.appData.session

        if (!currentSessionData) {
            context.setError('沒有活躍的會話可以升級')
            return null
        }

        if (currentSessionData.type === 'recording') {
            console.log('🔄 [useSessionNew] 會話已經是錄音模式')
            try {
                const activeSession = await sessionService.checkActiveSession()
                return activeSession
            } catch (err) {
                console.error('❌ [useSessionNew] 獲取活躍會話失敗:', err)
                return null
            }
        }

        context.setLoading(true)
        clearError()

        try {
            const updatedSession = await sessionService.upgradeToRecording(currentSessionData.id)

            context.setSession({
                id: updatedSession.id,
                status: updatedSession.status,
                type: updatedSession.type,
            })

            console.log('✅ [useSessionNew] 會話升級為錄音模式成功:', updatedSession)
            return updatedSession
        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : '升級會話失敗'
            context.setError(errorMessage)
            console.error('❌ [useSessionNew] 升級會話失敗:', err)
            return null
        } finally {
            context.setLoading(false)
        }
    }, [clearError, context, sessionService])

    const finishSession = useCallback(async (): Promise<void> => {
        const currentSessionData = context.appData.session

        if (!currentSessionData) {
            console.log('🔄 [useSessionNew] 沒有活躍的會話需要完成')
            return
        }

        context.setLoading(true)
        clearError()

        try {
            await sessionService.finishSession(currentSessionData.id)
            console.log('✅ [useSessionNew] 會話完成成功:', currentSessionData.id)

            context.updateSessionStatus('completed')
        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : '完成會話失敗'
            context.setError(errorMessage)
            console.error('❌ [useSessionNew] 完成會話失敗:', err)
        } finally {
            context.setLoading(false)
        }
    }, [clearError, context, sessionService])

    const deleteSession = useCallback(async (): Promise<void> => {
        const currentSessionData = context.appData.session

        if (!currentSessionData) {
            console.log('🔄 [useSessionNew] 沒有活躍的會話需要刪除')
            return
        }

        context.setLoading(true)
        clearError()

        try {
            await sessionService.deleteSession(currentSessionData.id)
            console.log('✅ [useSessionNew] 會話刪除成功:', currentSessionData.id)
            context.setSession(null)
        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : '刪除會話失敗'
            context.setError(errorMessage)
            console.error('❌ [useSessionNew] 刪除會話失敗:', err)
        } finally {
            context.setLoading(false)
        }
    }, [clearError, context, sessionService])

    const clearSession = useCallback(() => {
        context.setSession(null)
        context.setError(null)
        console.log('🔄 [useSessionNew] 會話已清除')
    }, [context])

    // 向後相容的 currentSession 格式
    const currentSession: SessionResponse | null = useMemo(() => {
        const sessionData = context.appData.session
        if (!sessionData) return null

        return {
            id: sessionData.id,
            title: '',
            type: sessionData.type,
            status: sessionData.status,
            language: 'zh-TW',
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString(),
        }
    }, [context.appData.session])

    // 確保服務層已初始化
    useEffect(() => {
        if (!sessionService) {
            console.error('❌ [useSessionNew] SessionService 未正確初始化')
            context.setError('會話服務初始化失敗')
        }
    }, [sessionService, context])

    return useMemo(() => ({
        currentSession,
        isLoading: context.isLoading,
        error: context.error,
        createNoteSession,
        createRecordingSession,
        upgradeToRecording,
        finishSession,
        deleteSession,
        clearSession,
        checkActiveSession,
    }), [
        currentSession,
        context.isLoading,
        context.error,
        createNoteSession,
        createRecordingSession,
        upgradeToRecording,
        finishSession,
        deleteSession,
        clearSession,
        checkActiveSession,
    ])
}


# END FILE CONTENTS


# File: frontend/lib/app-store.ts

"use client"

import { useState, useCallback, useRef } from 'react'
import { serviceContainer, SERVICE_KEYS } from './services'
import type { RecordingFlowService, RecordingFlowListener } from './services/recording-flow-service'
import type { SessionResponse } from './api'
import { AppState, SessionStatus, SessionType, TranscriptEntry } from '../types/app-state'

/**
 * Store 狀態介面
 */
export interface AppStoreState {
  // 應用狀態
  currentState: AppState
  isLoading: boolean
  error: string | null

  // 會話狀態
  session: {
    id: string
    status: SessionStatus
    type: SessionType
  } | null

  // 錄音狀態
  isRecording: boolean
  recordingTime: number

  // 逐字稿狀態
  transcriptEntries: TranscriptEntry[]

  // 編輯器狀態
  editorContent: string
}

/**
 * Store 操作介面
 */
export interface AppStoreActions {
  // 核心業務操作
  startRecording: (title?: string) => Promise<void>
  stopRecording: () => Promise<void>

  // 編輯器操作
  updateEditorContent: (content: string) => void

  // 狀態重置
  resetState: () => void

  // 錯誤處理
  clearError: () => void
}

/**
 * Store Hook 返回值
 */
export interface AppStoreReturn {
  state: AppStoreState
  actions: AppStoreActions
}

/**
 * AppStore - 統一的狀態管理
 *
 * 職責：
 * 1. 管理應用狀態
 * 2. 調用服務層執行業務邏輯
 * 3. 處理 loading 和錯誤狀態
 * 4. 提供簡潔的 API 給 UI 層
 */
export function useAppStore(): AppStoreReturn {
  // === 狀態定義 ===
  const [currentState, setCurrentState] = useState<AppState>('default')
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [session, setSession] = useState<AppStoreState['session']>(null)
  const [isRecording, setIsRecording] = useState(false)
  const [recordingTime, setRecordingTime] = useState(0)
  const [transcriptEntries, setTranscriptEntries] = useState<TranscriptEntry[]>([])
  const [editorContent, setEditorContent] = useState('')

  // === 服務引用 ===
  const recordingFlowServiceRef = useRef<RecordingFlowService | null>(null)
  const flowListenerRef = useRef<RecordingFlowListener | null>(null)

  // === 初始化服務 ===
  const initializeRecordingFlowService = useCallback(() => {
    if (!recordingFlowServiceRef.current) {
      recordingFlowServiceRef.current = serviceContainer.resolve<RecordingFlowService>(
        SERVICE_KEYS.RECORDING_FLOW_SERVICE
      )
    }
    return recordingFlowServiceRef.current
  }, [])

  // === 流程監聽器 ===
  const createFlowListener = useCallback((): RecordingFlowListener => {
    return {
      onTranscriptReceived: (transcript) => {
        console.log('📝 [AppStore] 收到逐字稿:', transcript)
        setTranscriptEntries(prev => [...prev, transcript])
      },

      onFirstTranscriptReceived: () => {
        console.log('🎯 [AppStore] 收到第一個逐字稿，轉換狀態')
        setCurrentState('recording_active')
      },

      onRecordingStatusChange: (recording) => {
        console.log('�� [AppStore] 錄音狀態變更:', recording)
        setIsRecording(recording)
      },

      onTranscriptComplete: () => {
        console.log('✅ [AppStore] 逐字稿轉錄完成')
        setCurrentState('finished')
      },

      onError: (errorMessage) => {
        console.error('❌ [AppStore] 錄音流程錯誤:', errorMessage)
        setError(errorMessage)
        setIsLoading(false)
        setCurrentState('default')
      }
    }
  }, [])

  // === 錄音時間追蹤 ===
  const startRecordingTimeTracking = useCallback(() => {
    const interval = setInterval(() => {
      const service = recordingFlowServiceRef.current
      if (service && service.isActive()) {
        const time = service.getRecordingTime()
        setRecordingTime(time)
      } else {
        clearInterval(interval)
      }
    }, 1000)

    return interval
  }, [])

  // === 業務操作 ===

  /**
   * 開始錄音流程
   */
  const startRecording = useCallback(async (title?: string): Promise<void> => {
    console.log('🎤 [AppStore] 開始錄音流程')

    try {
      // 1. 設置 loading 狀態
      setIsLoading(true)
      setError(null)
      setCurrentState('recording_waiting')

      // 2. 初始化服務
      const recordingFlowService = initializeRecordingFlowService()

      // 3. 設置流程監聽器
      if (flowListenerRef.current) {
        recordingFlowService.removeListener(flowListenerRef.current)
      }
      flowListenerRef.current = createFlowListener()
      recordingFlowService.addListener(flowListenerRef.current)

      // 4. 啟動錄音流程
      const result: RecordingFlowResult = await recordingFlowService.startRecordingFlow(title)

      if (result.success) {
        // 成功：更新會話資訊和狀態
        setSession({
          id: result.sessionId,
          status: 'active' as SessionStatus,
          type: 'recording' as SessionType
        })

        setCurrentState('recording_waiting')

        // 啟動時間追蹤
        startRecordingTimeTracking()

        console.log('✅ [AppStore] 錄音流程啟動成功:', result.sessionId)
      } else {
        // 失敗：顯示錯誤
        throw new Error(result.error || '錄音流程啟動失敗')
      }

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : '開始錄音失敗'
      console.error('❌ [AppStore] 錄音流程啟動失敗:', error)

      setError(errorMessage)
      setCurrentState('default')
    } finally {
      setIsLoading(false)
    }
  }, [initializeRecordingFlowService, createFlowListener, startRecordingTimeTracking])

  /**
   * 停止錄音流程
   */
  const stopRecording = useCallback(async (): Promise<void> => {
    console.log('🛑 [AppStore] 停止錄音流程')

    try {
      setIsLoading(true)
      setCurrentState('processing')

      const recordingFlowService = recordingFlowServiceRef.current
      if (recordingFlowService) {
        await recordingFlowService.stopRecordingFlow()

        // 清理監聽器
        if (flowListenerRef.current) {
          recordingFlowService.removeListener(flowListenerRef.current)
          flowListenerRef.current = null
        }
      }

      // 更新狀態
      setIsRecording(false)
      setCurrentState('finished')

      console.log('✅ [AppStore] 錄音流程停止成功')

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : '停止錄音失敗'
      console.error('❌ [AppStore] 停止錄音失敗:', error)
      setError(errorMessage)
    } finally {
      setIsLoading(false)
    }
  }, [])

  /**
   * 更新編輯器內容
   */
  const updateEditorContent = useCallback((content: string) => {
    setEditorContent(content)
  }, [])

  /**
   * 重置狀態
   */
  const resetState = useCallback(() => {
    console.log('🔄 [AppStore] 重置狀態')

    // 停止錄音流程（如果有）
    const recordingFlowService = recordingFlowServiceRef.current
    if (recordingFlowService && recordingFlowService.isActive()) {
      recordingFlowService.stopRecordingFlow().catch(console.error)
    }

    // 重置所有狀態
    setCurrentState('default')
    setIsLoading(false)
    setError(null)
    setSession(null)
    setIsRecording(false)
    setRecordingTime(0)
    setTranscriptEntries([])
    setEditorContent('')
  }, [])

  /**
   * 清除錯誤
   */
  const clearError = useCallback(() => {
    setError(null)
  }, [])

  // === 返回 Store 狀態和操作 ===
  return {
    state: {
      currentState,
      isLoading,
      error,
      session,
      isRecording,
      recordingTime,
      transcriptEntries,
      editorContent
    },
    actions: {
      startRecording,
      stopRecording,
      updateEditorContent,
      resetState,
      clearError
    }
  }
}


# END FILE CONTENTS


# File: frontend/lib/services/service-registry.ts

"use client"

import { serviceContainer } from './service-container'
import { SessionService } from './session-service'
import { RecordingService } from './recording-service'
import { SimpleRecordingService } from './simple-recording-service'
import { TranscriptService } from './transcript-service'
import { RecordingFlowService } from './recording-flow-service'
import { SERVICE_KEYS } from './interfaces'
import { isFeatureEnabled } from '../feature-flags'

/**
 * 服務註冊管理
 *
 * 統一管理所有服務的註冊和初始化
 */
export class ServiceRegistry {
    private static isRegistered = false

    /**
     * 註冊所有服務
     *
     * 使用 Singleton 模式確保服務只註冊一次
     */
    static async registerServices(): Promise<void> {
        if (ServiceRegistry.isRegistered) {
            console.log('🔄 [ServiceRegistry] 服務已註冊，跳過重複註冊')
            return
        }

        try {
            console.log('🚀 [ServiceRegistry] 開始註冊服務...')

            // 註冊 SessionService
            serviceContainer.registerSingleton(SERVICE_KEYS.SESSION_SERVICE, () => new SessionService())
            console.log('✅ [ServiceRegistry] SessionService 註冊完成')

            // 註冊 RecordingService（根據功能開關選擇）
            if (isFeatureEnabled('useSimpleRecordingService')) {
                serviceContainer.registerSingleton(SERVICE_KEYS.RECORDING_SERVICE, () => new SimpleRecordingService())
                console.log('✅ [ServiceRegistry] SimpleRecordingService 註冊完成 (Phase 2)')
            } else {
                serviceContainer.registerSingleton(SERVICE_KEYS.RECORDING_SERVICE, () => new RecordingService())
                console.log('✅ [ServiceRegistry] RecordingService 註冊完成 (Legacy)')
            }

            // 註冊 TranscriptService
            serviceContainer.registerSingleton(SERVICE_KEYS.TRANSCRIPT_SERVICE, () => new TranscriptService())
            console.log('✅ [ServiceRegistry] TranscriptService 註冊完成')

            // 註冊 RecordingFlowService
            serviceContainer.registerSingleton(SERVICE_KEYS.RECORDING_FLOW_SERVICE, () => new RecordingFlowService())
            console.log('✅ [ServiceRegistry] RecordingFlowService 註冊完成')

            ServiceRegistry.isRegistered = true
            console.log('✅ [ServiceRegistry] 所有服務註冊完成')

        } catch (error) {
            console.error('❌ [ServiceRegistry] 服務註冊失敗:', error)
            throw error
        }
    }

    /**
     * 初始化所有服務
     *
     * 啟動所有已註冊的服務
     */
    static async initializeServices(): Promise<void> {
        try {
            console.log('🚀 [ServiceRegistry] 開始初始化服務...')

            // 確保服務已註冊
            await ServiceRegistry.registerServices()

            // 初始化 SessionService
            const sessionService = serviceContainer.resolve<SessionService>(SERVICE_KEYS.SESSION_SERVICE)
            await sessionService.start()

            // 初始化 RecordingService
            const recordingService = serviceContainer.resolve<RecordingService>(SERVICE_KEYS.RECORDING_SERVICE)
            await recordingService.start()

            // 初始化 TranscriptService
            const transcriptService = serviceContainer.resolve<TranscriptService>(SERVICE_KEYS.TRANSCRIPT_SERVICE)
            await transcriptService.start()

            // 初始化 RecordingFlowService
            const recordingFlowService = serviceContainer.resolve<RecordingFlowService>(SERVICE_KEYS.RECORDING_FLOW_SERVICE)
            await recordingFlowService.start()

            console.log('✅ [ServiceRegistry] 所有服務初始化完成')

        } catch (error) {
            console.error('❌ [ServiceRegistry] 服務初始化失敗:', error)
            throw error
        }
    }

    /**
     * 停止所有服務
     */
    static async stopServices(): Promise<void> {
        try {
            console.log('🛑 [ServiceRegistry] 開始停止服務...')

            if (!ServiceRegistry.isRegistered) {
                console.log('ℹ️ [ServiceRegistry] 服務未註冊，無需停止')
                return
            }

            // 按相反順序停止服務
            const recordingFlowService = serviceContainer.resolve<RecordingFlowService>(SERVICE_KEYS.RECORDING_FLOW_SERVICE)
            await recordingFlowService.stop()

            const transcriptService = serviceContainer.resolve<TranscriptService>(SERVICE_KEYS.TRANSCRIPT_SERVICE)
            await transcriptService.stop()

            const recordingService = serviceContainer.resolve<RecordingService>(SERVICE_KEYS.RECORDING_SERVICE)
            await recordingService.stop()

            const sessionService = serviceContainer.resolve<SessionService>(SERVICE_KEYS.SESSION_SERVICE)
            await sessionService.stop()

            console.log('✅ [ServiceRegistry] 所有服務停止完成')

        } catch (error) {
            console.error('❌ [ServiceRegistry] 服務停止失敗:', error)
            throw error
        }
    }

    /**
     * 取得服務註冊狀態
     */
    static getRegistrationStatus(): {
        isRegistered: boolean
        registeredServices: string[]
    } {
        return {
            isRegistered: ServiceRegistry.isRegistered,
            registeredServices: serviceContainer.getRegisteredServices()
        }
    }
}

// 自動註冊服務（在模組載入時）
ServiceRegistry.registerServices().catch(error => {
    console.error('❌ [ServiceRegistry] 自動註冊失敗:', error)
})


# END FILE CONTENTS


# File: frontend/lib/transcript-manager.ts

"use client"

import { TranscriptWebSocket, TranscriptMessage, WebSocketManager } from './websocket'
import { useAppStore } from './app-store-zustand'
import type { TranscriptEntry } from '../types/app-state'

/**
 * TranscriptManager - 統一管理 transcript WebSocket 連接的 Singleton
 *
 * 功能：
 * - 確保每個 session 只有一個 transcript 連接
 * - 統一管理連接狀態、心跳、重連
 * - 提供簡潔的 API 給其他組件使用
 */
export class TranscriptManager {
  private static instance: TranscriptManager | null = null
  private connections: Map<string, TranscriptWebSocket> = new Map()
  private listeners: Map<string, Set<(message: TranscriptMessage) => void>> = new Map()
  private connectionStates: Map<string, boolean> = new Map()
  private heartbeatIntervals: Map<string, NodeJS.Timeout> = new Map()
  private reconnectAttempts: Map<string, number> = new Map()
  private maxReconnectAttempts = 5
  private heartbeatInterval = 10000 // 10秒，避免伺服器過早判定逾時
  private reconnectDelay = 2000 // 2秒

  private constructor() {
    // Singleton pattern - 私有建構子

    // 開發模式下將實例掛到全域以利除錯
    if (typeof window !== 'undefined') {
      // @ts-ignore
      ; (window as any).transcriptManager = this
    }
  }

  /**
   * 取得 TranscriptManager 實例
   */
  static getInstance(): TranscriptManager {
    if (!TranscriptManager.instance) {
      TranscriptManager.instance = new TranscriptManager()
    }
    return TranscriptManager.instance
  }

  /**
   * 連接到指定 session 的 transcript feed
   */
  async connect(sessionId: string): Promise<void> {
    // 如果已經有連接，直接返回
    if (this.connections.has(sessionId) && this.connectionStates.get(sessionId)) {
      console.log(`📱 [TranscriptManager] Session ${sessionId} 已連接，跳過重複連接`)
      return
    }

    try {
      console.log(`📱 [TranscriptManager] 開始連接 session ${sessionId}`)

      // 清理舊連接（如果存在）
      await this.disconnect(sessionId)

      // 重置重連計數
      this.reconnectAttempts.set(sessionId, 0)

      // 建立新連接
      await this.establishConnection(sessionId)

      // 等待連線完全就緒
      await this.waitForConnectionReady(sessionId)

      console.log(`✅ [TranscriptManager] Session ${sessionId} 連接並就緒`)

    } catch (error) {
      console.error(`❌ [TranscriptManager] Session ${sessionId} 連接失敗:`, error)
      this.connectionStates.set(sessionId, false)

      // 嘗試重連
      this.scheduleReconnect(sessionId)
      throw error
    }
  }

  /**
   * 等待連線完全就緒
   */
  private async waitForConnectionReady(sessionId: string, timeout: number = 5000): Promise<void> {
    return new Promise((resolve, reject) => {
      const startTime = Date.now()

      const checkReady = () => {
        const ws = this.connections.get(sessionId)
        const isConnected = this.connectionStates.get(sessionId)

        console.log(`🔍 [TranscriptManager] 檢查連線就緒狀態:`, {
          sessionId,
          hasWebSocket: !!ws,
          isConnected: !!isConnected,
          wsReadyState: ws?.readyState,
          wsIsConnected: ws?.isConnected || false,
          elapsedTime: Date.now() - startTime
        })

        // 優化：更可靠的 WebSocket 就緒狀態檢測
        const wsReady = ws && (
          ws.isConnected ||
          ws.readyState === WebSocket.OPEN ||
          (typeof window !== 'undefined' && window.WebSocket && ws.readyState === 1) // 測試環境兼容
        )

        // 即時同步狀態，確保一致性
        if (ws && wsReady) {
          const actualConnected = true
          if (this.connectionStates.get(sessionId) !== actualConnected) {
            console.log(`🔄 [TranscriptManager] 即時同步連接狀態: ${sessionId} → ${actualConnected}`)
            this.connectionStates.set(sessionId, actualConnected)
          }

          console.log(`✅ [TranscriptManager] Session ${sessionId} 連線就緒`)
          resolve()
          return
        } else if (ws && !wsReady) {
          // WebSocket 存在但未就緒，同步狀態為 false
          const actualConnected = false
          if (this.connectionStates.get(sessionId) !== actualConnected) {
            console.log(`🔄 [TranscriptManager] 即時同步連接狀態: ${sessionId} → ${actualConnected}`)
            this.connectionStates.set(sessionId, actualConnected)
          }
        }

        // 檢查超時
        if (Date.now() - startTime > timeout) {
          console.error(`⏰ [TranscriptManager] Session ${sessionId} 連線就緒等待超時`)
          console.error(`   最終狀態: ws=${!!ws}, isConnected=${!!isConnected}, wsReady=${!!wsReady}`)
          reject(new Error(`連線就緒等待超時 (${timeout}ms)`))
          return
        }

        // 繼續等待
        setTimeout(checkReady, 100)
      }

      checkReady()
    })
  }

  /**
   * 建立 WebSocket 連接
   */
  private async establishConnection(sessionId: string): Promise<void> {
    const ws = new TranscriptWebSocket(sessionId)

    // 🧪 測試：跳過 TranscriptWebSocket 抽象層，直接使用 WebSocketManager 的 onMessage
    // 註釋原來的設定，使用直接的原生 WebSocket 處理
    // ws.onMessage((message) => {
    //   this.handleMessage(sessionId, message)
    // })

    // 設定連接關閉處理
    this.setupConnectionHandlers(ws, sessionId)

    // 連接 WebSocket
    await ws.connect()

    // 直接使用 WebSocketManager 的 onMessage 來設置原生 onmessage
    WebSocketManager.prototype.onMessage.call(ws, (evt: MessageEvent) => {
      console.log('[WS] raw frame', evt.data?.slice?.(0, 100))
      try {
        const message = JSON.parse(evt.data)
        console.log('[WS] parsed', message.type, message.text?.slice?.(0, 20))
        this.handleMessage(sessionId, message)
      } catch (error) {
        console.error('[WS] parse error', error)
      }
    })

    // 儲存連接
    this.connections.set(sessionId, ws)
    this.connectionStates.set(sessionId, true)

    // 發送初始 ping 啟動後端處理循環
    this.sendPing(sessionId)

    // 啟動心跳
    this.startHeartbeat(sessionId)

    console.log(`✅ TranscriptManager: Session ${sessionId} 連接成功`)
  }

  /**
* 設定連接處理器
*/
  private setupConnectionHandlers(ws: TranscriptWebSocket, sessionId: string): void {
    // 監聽 WebSocket 關閉事件
    ws.onClose((event) => {
      console.log(`🔌 TranscriptManager: Session ${sessionId} 連接關閉:`, event.code, event.reason)

      // 更新狀態
      this.connectionStates.set(sessionId, false)
      this.stopHeartbeat(sessionId)

      // 如果不是手動關閉，嘗試重連
      if (event.code !== 1000) { // 1000 = 正常關閉
        this.scheduleReconnect(sessionId)
      }
    })
  }

  /**
   * 處理收到的訊息
   */
  private handleMessage(sessionId: string, message: any): void {
    console.log('[T] raw', message.type, message.text?.slice(0, 20))

    console.log('🚨 [TranscriptManager] handleMessage 被調用!', {
      sessionId,
      rawMessage: message,
      messageType: typeof message,
      messageKeys: Object.keys(message || {}),
      timestamp: new Date().toISOString()
    })

    console.log('📨 [TranscriptManager] 收到訊息:', {
      sessionId,
      type: message.type,
      message: message,
      timestamp: new Date().toISOString(),
      listenerCount: this.listeners.get(sessionId)?.size || 0
    })

    // 處理不同類型的訊息
    if (message.type === 'transcript_entry') {
      console.log('📝 [TranscriptManager] 收到逐字稿條目:', {
        sessionId,
        payload: message.payload,
        timestamp: new Date().toISOString()
      })

      // 推送到 Zustand store
      const raw = message.payload
      if (raw && raw.text) {
        const parseTime = (t: string | undefined): number => {
          if (!t) return 0
          const parts = t.split(':').map(Number)
          return parts.length === 3
            ? parts[0] * 3600 + parts[1] * 60 + parts[2]
            : parts[0] * 60 + parts[1]
        }

        const startTime = (typeof raw.start_time === 'number') ? raw.start_time : (raw.startTime ?? parseTime(raw.time))

        const entry = {
          startTime,
          time: raw.time ?? `${Math.floor(startTime / 60).toString().padStart(2, '0')}:${(startTime % 60).toString().padStart(2, '0')}`,
          text: raw.text
        }

        console.log('🎯 [TranscriptManager] 準備推送 transcript_segment 到 store:', {
          originalStartTime: raw.start_time,
          startTimeInSeconds: startTime,
          formattedTime: entry.time,
          text: entry.text.substring(0, 50) + '...'
        })

        console.log('[T] before push', useAppStore.getState().appState)
        useAppStore.getState().addTranscriptEntry(entry)
        console.log('✅ [TranscriptManager] transcript_segment 已推送到 store:', entry)

        // 檢查狀態是否有變化
        const currentState = useAppStore.getState()
        console.log('📊 [TranscriptManager] Store 狀態檢查:', {
          appState: currentState.appState,
          transcriptCount: currentState.transcriptEntries.length,
          latestEntry: currentState.transcriptEntries[currentState.transcriptEntries.length - 1]
        })

      } else {
        console.warn('⚠️ [TranscriptManager] 無效的逐字稿條目:', raw)
      }

      this.broadcastToListeners(sessionId, message)
    } else if (message.type === 'transcript_segment') {
      console.log('📝 [TranscriptManager] 逐字稿片段詳情:', {
        sessionId,
        text: message.text,
        textLength: message.text?.length || 0,
        textPreview: message.text?.substring(0, 50) + (message.text?.length > 50 ? '...' : ''),
        start_time: message.start_time,
        end_time: message.end_time,
        confidence: message.confidence
      })

      // 🎯 轉換 transcript_segment 為 TranscriptEntry 格式並推送到 store
      if (message.text) {
        try {
          // 使用 start_time 而不是 timestamp，並轉換為 HH:MM:SS 格式
          const startTimeInSeconds = message.start_time ?? 0
          const hours = Math.floor(startTimeInSeconds / 3600)
          const minutes = Math.floor((startTimeInSeconds % 3600) / 60)
          const seconds = Math.floor(startTimeInSeconds % 60)

          const entry = {
            startTime: startTimeInSeconds,
            time: `${hours.toString().padStart(2, "0")}:${minutes.toString().padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`,
            text: message.text
          }

          console.log('🎯 [TranscriptManager] 準備推送 transcript_segment 到 store:', {
            originalStartTime: message.start_time,
            startTimeInSeconds,
            formattedTime: entry.time,
            text: entry.text.substring(0, 50) + '...'
          })

          console.log('[T] before push', useAppStore.getState().appState)
          useAppStore.getState().addTranscriptEntry(entry)
          console.log('✅ [TranscriptManager] transcript_segment 已推送到 store:', entry)

          // 檢查狀態是否有變化
          const currentState = useAppStore.getState()
          console.log('📊 [TranscriptManager] Store 狀態檢查:', {
            appState: currentState.appState,
            transcriptCount: currentState.transcriptEntries.length,
            latestEntry: currentState.transcriptEntries[currentState.transcriptEntries.length - 1]
          })

        } catch (error) {
          console.error('❌ [TranscriptManager] 處理 transcript_segment 時發生錯誤:', error)
        }
      }

      this.broadcastToListeners(sessionId, message)
    } else if (message.type === 'connection_established') {
      console.log('✅ [TranscriptManager] 連接已建立:', {
        sessionId,
        message: message.message,
        timestamp: message.timestamp
      })
    } else if (message.type === 'transcript_complete') {
      console.log('🎯 [TranscriptManager] 轉錄完成:', {
        sessionId,
        message: message.message,
        timestamp: message.timestamp
      })
      this.broadcastToListeners(sessionId, message)
    } else if (message.type === 'heartbeat_ack') {
      console.log('💓 [TranscriptManager] 心跳回應:', {
        sessionId,
        timestamp: message.timestamp
      })
    } else if (message.type === 'pong') {
      console.log('🏓 [TranscriptManager] Pong 回應:', {
        sessionId,
        timestamp: message.timestamp
      })
    } else if (message.phase === 'waiting') {
      console.log('⏳ [TranscriptManager] 收到 waiting phase:', {
        sessionId,
        phase: message.phase,
        timestamp: new Date().toISOString()
      })
    } else if (message.phase === 'active') {
      console.log('✅ [TranscriptManager] 收到 active phase，轉錄已開始:', {
        sessionId,
        phase: message.phase,
        timestamp: new Date().toISOString()
      })
      // 廣播 active phase 訊息給監聽器
      this.broadcastToListeners(sessionId, message)
    } else if (message.type === 'error' || message.type === 'transcription_error') {
      console.error('🚨 [TranscriptManager] 收到轉錄錯誤:', {
        sessionId,
        type: message.type,
        error_type: message.error_type,
        error_message: message.error_message,
        details: message.details,
        timestamp: new Date().toISOString()
      })
      // 廣播錯誤訊息給監聽器
      this.broadcastToListeners(sessionId, message)
    } else {
      console.log('📨 [TranscriptManager] 未知訊息類型:', {
        sessionId,
        type: message.type,
        fullMessage: message
      })
    }
  }

  /**
   * 廣播訊息給所有監聽器
   */
  private broadcastToListeners(sessionId: string, message: TranscriptMessage): void {
    const sessionListeners = this.listeners.get(sessionId)
    console.log('📡 [TranscriptManager] 廣播訊息給監聽器:', {
      sessionId,
      messageType: message.type,
      listenerCount: sessionListeners?.size || 0,
      hasListeners: !!sessionListeners
    })

    if (sessionListeners) {
      let successCount = 0
      let errorCount = 0

      sessionListeners.forEach(callback => {
        try {
          callback(message)
          successCount++
          console.log(`✅ [TranscriptManager] 監聽器回調成功 (${successCount}/${sessionListeners.size})`)
        } catch (error) {
          errorCount++
          console.error(`❌ [TranscriptManager] 監聽器回調錯誤 (${errorCount}/${sessionListeners.size}):`, error)
        }
      })

      console.log(`📡 [TranscriptManager] 廣播完成: ${successCount} 成功, ${errorCount} 失敗`)
    } else {
      console.warn(`⚠️ [TranscriptManager] 沒有找到 session ${sessionId} 的監聽器`)
    }
  }

  /**
   * 發送 ping
   */
  private sendPing(sessionId: string): void {
    const ws = this.connections.get(sessionId)
    if (ws && ws.isConnected) {
      ws.sendJson({ type: 'ping' })
      console.log(`🏓 TranscriptManager: 向 session ${sessionId} 發送 ping`)
    }
  }

  /**
   * 發送心跳 - 增強狀態同步
   */
  private sendHeartbeat(sessionId: string): void {
    // 先同步狀態
    const isActuallyConnected = this.syncConnectionState(sessionId)

    const ws = this.connections.get(sessionId)
    if (ws && isActuallyConnected) {
      try {
        ws.sendJson({
          type: 'heartbeat',
          timestamp: Date.now()
        })
        console.log(`💓 TranscriptManager: 向 session ${sessionId} 發送心跳`)
      } catch (error) {
        console.error(`❌ TranscriptManager: 發送心跳失敗 ${sessionId}:`, error)
        // 心跳發送失敗，可能連接已斷開
        this.connectionStates.set(sessionId, false)
        this.scheduleReconnect(sessionId)
      }
    } else {
      // 連接已斷開，停止心跳並嘗試重連
      console.warn(`⚠️ TranscriptManager: 心跳檢測到連接斷開 ${sessionId}`)
      this.stopHeartbeat(sessionId)
      this.connectionStates.set(sessionId, false)
      this.scheduleReconnect(sessionId)
    }
  }

  /**
   * 啟動心跳機制
   */
  private startHeartbeat(sessionId: string): void {
    this.stopHeartbeat(sessionId)

    const interval = setInterval(() => {
      this.sendHeartbeat(sessionId)
    }, this.heartbeatInterval)

    this.heartbeatIntervals.set(sessionId, interval)
    console.log(`💓 TranscriptManager: 為 session ${sessionId} 啟動心跳`)
  }

  /**
   * 停止心跳機制
   */
  private stopHeartbeat(sessionId: string): void {
    const interval = this.heartbeatIntervals.get(sessionId)
    if (interval) {
      clearInterval(interval)
      this.heartbeatIntervals.delete(sessionId)
      console.log(`💓 TranscriptManager: 為 session ${sessionId} 停止心跳`)
    }
  }

  /**
   * 安排重連
   */
  private scheduleReconnect(sessionId: string): void {
    const attempts = this.reconnectAttempts.get(sessionId) ?? 0

    if (attempts >= this.maxReconnectAttempts) {
      console.error(`❌ TranscriptManager: Session ${sessionId} 重連次數已達上限`)
      return
    }

    this.reconnectAttempts.set(sessionId, attempts + 1)

    const delay = this.reconnectDelay * Math.pow(2, attempts) // 指數退避
    console.log(`🔄 TranscriptManager: Session ${sessionId} 將在 ${delay}ms 後重連 (第 ${attempts + 1} 次)`)

    setTimeout(async () => {
      try {
        await this.establishConnection(sessionId)
        this.reconnectAttempts.set(sessionId, 0) // 重連成功，重置計數
      } catch (error) {
        console.error(`❌ TranscriptManager: Session ${sessionId} 重連失敗:`, error)
      }
    }, delay)
  }

  /**
   * 斷開指定 session 的連接
   */
  async disconnect(sessionId: string): Promise<void> {
    console.log(`📱 TranscriptManager: 斷開 session ${sessionId}`)

    // 停止心跳
    this.stopHeartbeat(sessionId)

    // 斷開 WebSocket
    const ws = this.connections.get(sessionId)
    if (ws) {
      ws.disconnect()
      this.connections.delete(sessionId)
    }

    // 更新狀態
    this.connectionStates.set(sessionId, false)

    // 清理監聽器
    this.listeners.delete(sessionId)

    // 清理重連計數
    this.reconnectAttempts.delete(sessionId)
  }

  /**
   * 添加訊息監聽器
   */
  addListener(sessionId: string, callback: (message: TranscriptMessage) => void): void {
    if (!this.listeners.has(sessionId)) {
      this.listeners.set(sessionId, new Set())
    }
    this.listeners.get(sessionId)!.add(callback)
    console.log(`📱 TranscriptManager: 為 session ${sessionId} 添加監聽器`)
  }

  /**
   * 移除訊息監聽器
   */
  removeListener(sessionId: string, callback: (message: TranscriptMessage) => void): void {
    const sessionListeners = this.listeners.get(sessionId)
    if (sessionListeners) {
      sessionListeners.delete(callback)
      if (sessionListeners.size === 0) {
        this.listeners.delete(sessionId)
      }
    }
    console.log(`📱 TranscriptManager: 為 session ${sessionId} 移除監聽器`)
  }

  /**
   * 檢查連接狀態 - 優化版，確保即時狀態同步
   */
  isConnected(sessionId: string): boolean {
    const ws = this.connections.get(sessionId)
    const stateConnected = this.connectionStates.get(sessionId) ?? false

    // 實作更可靠的即時狀態檢測
    let actualConnected = false

    if (ws) {
      // 多重檢查確保準確性
      actualConnected = ws.isConnected && (
        ws.readyState === WebSocket.OPEN ||
        (typeof window !== 'undefined' && window.WebSocket && ws.readyState === 1)
      )
    }

    console.log(`🔍 [TranscriptManager] 連接狀態檢查:`, {
      sessionId,
      hasWebSocket: !!ws,
      wsReadyState: ws?.readyState,
      wsIsConnected: ws?.isConnected ?? false,
      stateConnected,
      actualConnected,
      needsSync: stateConnected !== actualConnected,
      timestamp: Date.now()
    })

    // 即時同步狀態，確保 connectionStates 與實際 WebSocket 狀態一致
    if (stateConnected !== actualConnected) {
      console.log(`🔄 [TranscriptManager] 狀態不一致，即時同步: ${sessionId} ${stateConnected} → ${actualConnected}`, {
        previousState: stateConnected,
        newState: actualConnected,
        wsDetails: {
          isConnected: ws?.isConnected,
          readyState: ws?.readyState
        }
      })
      this.connectionStates.set(sessionId, actualConnected)

      // 如果連接斷開但狀態顯示連接，觸發重連
      if (stateConnected && !actualConnected) {
        console.warn(`⚠️ [TranscriptManager] 檢測到連接斷開，將觸發重連: ${sessionId}`)
        this.scheduleReconnect(sessionId)
      }
    }

    return actualConnected
  }

  /**
   * 強化的連接狀態一致性檢查
   */
  private syncConnectionState(sessionId: string): boolean {
    const ws = this.connections.get(sessionId)
    const currentState = this.connectionStates.get(sessionId) ?? false

    if (!ws) {
      // 沒有 WebSocket，狀態應該是 false
      if (currentState !== false) {
        console.log(`🔄 [TranscriptManager] 同步狀態 (無WebSocket): ${sessionId} → false`)
        this.connectionStates.set(sessionId, false)
      }
      return false
    }

    // 有 WebSocket，檢查實際連接狀態
    const actualConnected = ws.isConnected && (
      ws.readyState === WebSocket.OPEN ||
      (typeof window !== 'undefined' && window.WebSocket && ws.readyState === 1)
    )

    if (currentState !== actualConnected) {
      console.log(`🔄 [TranscriptManager] 同步狀態: ${sessionId} ${currentState} → ${actualConnected}`)
      this.connectionStates.set(sessionId, actualConnected)
    }

    return actualConnected
  }

  /**
   * 取得連接數量
   */
  getConnectionCount(): number {
    return Array.from(this.connections.values()).filter(ws => ws.isConnected).length
  }

  /**
   * 清理所有連接
   */
  async disconnectAll(): Promise<void> {
    console.log('📱 TranscriptManager: 清理所有連接')

    const sessionIds = Array.from(this.connections.keys())
    await Promise.all(sessionIds.map(sessionId => this.disconnect(sessionId)))
  }
}

// 匯出 Singleton 實例
export const transcriptManager = TranscriptManager.getInstance()

// 匯出類型
export type { TranscriptMessage }


# END FILE CONTENTS


# File: frontend/components/provider-context-menu.tsx

"use client"

import {
    DropdownMenu,
    DropdownMenuTrigger,
    DropdownMenuContent,
    DropdownMenuItem,
    DropdownMenuSub,
    DropdownMenuSubTrigger,
    DropdownMenuSubContent,
    DropdownMenuRadioGroup,
    DropdownMenuRadioItem,
    DropdownMenuPortal,
} from "@/components/ui/dropdown-menu"
import { Button } from "@/components/ui/button"
import { Settings, Mic, Zap } from "lucide-react"
import { STTProvider } from "@/lib/api"
import { PROVIDERS } from "../constants/providers"

interface ProviderContextMenuProps {
    currentProvider: STTProvider
    onProviderChange: (provider: STTProvider) => void
    disabled?: boolean
}

export function ProviderContextMenu({ currentProvider, onProviderChange, disabled = false }: ProviderContextMenuProps) {
    const providerDisplayName = Object.fromEntries(PROVIDERS.map(p => [p.code, p.label]))

    return (
        <DropdownMenu>
            <DropdownMenuTrigger asChild>
                <Button
                    variant="ghost"
                    size="icon"
                    className="h-8 w-8"
                    disabled={disabled}
                    data-testid="settings-button"
                >
                    <Settings className="w-4 h-4" />
                </Button>
            </DropdownMenuTrigger>
            <DropdownMenuPortal>
                <DropdownMenuContent side="bottom" sideOffset={4} className="bg-white rounded-md">
                    <DropdownMenuItem disabled>Config</DropdownMenuItem>
                    <DropdownMenuSub>
                        <DropdownMenuSubTrigger>Switch Provider</DropdownMenuSubTrigger>
                        <DropdownMenuSubContent className="bg-white rounded-md">
                            <DropdownMenuRadioGroup value={currentProvider} onValueChange={(value) => onProviderChange(value as STTProvider)}>
                                {PROVIDERS.map((p) => (
                                    <DropdownMenuRadioItem value={p.code} key={p.code}>
                                        {p.label}
                                    </DropdownMenuRadioItem>
                                ))}
                            </DropdownMenuRadioGroup>
                        </DropdownMenuSubContent>
                    </DropdownMenuSub>
                </DropdownMenuContent>
            </DropdownMenuPortal>
        </DropdownMenu>
    )
}


# END FILE CONTENTS


# File: frontend/lib/services/__tests__/session-service.test.ts

"use client"

import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest'
import { SessionService } from '../session-service'
import { sessionAPI } from '../../api'
import type { SessionResponse } from '../../api'

// Mock sessionAPI
vi.mock('../../api', () => ({
    sessionAPI: {
        createSession: vi.fn(),
        upgradeToRecording: vi.fn(),
        finishSession: vi.fn(),
        deleteSession: vi.fn(),
        getActiveSession: vi.fn(),
    }
}))

describe('SessionService', () => {
    let sessionService: SessionService
    const mockSessionAPI = sessionAPI as any

    beforeEach(() => {
        sessionService = new SessionService()
        vi.clearAllMocks()
    })

    afterEach(() => {
        vi.restoreAllMocks()
    })

    describe('服務初始化', () => {
        it('應該正確初始化 SessionService', () => {
            expect(sessionService).toBeDefined()
            expect(sessionService['serviceName']).toBe('SessionService')
        })

        it('應該正確啟動和停止服務', async () => {
            await sessionService.start()
            expect(sessionService['isRunning']).toBe(true)

            await sessionService.stop()
            expect(sessionService['isRunning']).toBe(false)
        })
    })

    describe('createRecordingSession', () => {
        const mockSession: SessionResponse = {
            id: 'test-session-id',
            title: 'Test Recording Session',
            type: 'recording',
            status: 'active',
            language: 'zh-TW',
            created_at: '2024-01-01T00:00:00Z',
            updated_at: '2024-01-01T00:00:00Z'
        }

        it('應該成功創建錄音會話', async () => {
            mockSessionAPI.createSession.mockResolvedValue(mockSession)

            const result = await sessionService.createRecordingSession('Test Title', 'Test Content')

            expect(mockSessionAPI.createSession).toHaveBeenCalledWith({
                title: 'Test Title',
                type: 'recording',
                content: 'Test Content'
            })
            expect(result).toEqual(mockSession)
        })

        it('應該處理可選內容參數', async () => {
            mockSessionAPI.createSession.mockResolvedValue(mockSession)

            await sessionService.createRecordingSession('Test Title')

            expect(mockSessionAPI.createSession).toHaveBeenCalledWith({
                title: 'Test Title',
                type: 'recording',
                content: undefined
            })
        })

        it('應該處理 API 錯誤', async () => {
            const apiError = new Error('API Error')
            mockSessionAPI.createSession.mockRejectedValue(apiError)

            await expect(sessionService.createRecordingSession('Test Title'))
                .rejects.toThrow('API Error')
        })

        it('應該處理 409 衝突錯誤', async () => {
            const conflictError = new Error('409 Conflict')
            conflictError.message = '409'
            mockSessionAPI.createSession.mockRejectedValue(conflictError)

            await expect(sessionService.createRecordingSession('Test Title'))
                .rejects.toThrow('409')
        })
    })

    describe('createNoteSession', () => {
        const mockSession: SessionResponse = {
            id: 'test-note-session',
            title: 'Test Note Session',
            type: 'note_only',
            status: 'active',
            language: 'zh-TW',
            created_at: '2024-01-01T00:00:00Z',
            updated_at: '2024-01-01T00:00:00Z'
        }

        it('應該成功創建純筆記會話', async () => {
            mockSessionAPI.createSession.mockResolvedValue(mockSession)

            const result = await sessionService.createNoteSession('Note Title', 'Note Content')

            expect(mockSessionAPI.createSession).toHaveBeenCalledWith({
                title: 'Note Title',
                type: 'note_only',
                content: 'Note Content'
            })
            expect(result).toEqual(mockSession)
        })

        it('應該處理可選內容參數', async () => {
            mockSessionAPI.createSession.mockResolvedValue(mockSession)

            await sessionService.createNoteSession('Note Title')

            expect(mockSessionAPI.createSession).toHaveBeenCalledWith({
                title: 'Note Title',
                type: 'note_only',
                content: undefined
            })
        })
    })

    describe('upgradeToRecording', () => {
        const mockUpgradedSession: SessionResponse = {
            id: 'upgraded-session',
            title: 'Upgraded Session',
            type: 'recording',
            status: 'active',
            language: 'zh-TW',
            created_at: '2024-01-01T00:00:00Z',
            updated_at: '2024-01-01T00:00:00Z'
        }

        it('應該成功升級會話至錄音模式', async () => {
            mockSessionAPI.upgradeToRecording.mockResolvedValue(mockUpgradedSession)

            const result = await sessionService.upgradeToRecording('session-id')

            expect(mockSessionAPI.upgradeToRecording).toHaveBeenCalledWith('session-id')
            expect(result).toEqual(mockUpgradedSession)
        })

        it('應該處理升級失敗', async () => {
            const upgradeError = new Error('Upgrade failed')
            mockSessionAPI.upgradeToRecording.mockRejectedValue(upgradeError)

            await expect(sessionService.upgradeToRecording('session-id'))
                .rejects.toThrow('Upgrade failed')
        })
    })

    describe('finishSession', () => {
        it('應該成功完成會話', async () => {
            mockSessionAPI.finishSession.mockResolvedValue(undefined)

            await sessionService.finishSession('session-id')

            expect(mockSessionAPI.finishSession).toHaveBeenCalledWith('session-id')
        })

        it('應該處理完成會話失敗', async () => {
            const finishError = new Error('Finish failed')
            mockSessionAPI.finishSession.mockRejectedValue(finishError)

            await expect(sessionService.finishSession('session-id'))
                .rejects.toThrow('Finish failed')
        })
    })

    describe('deleteSession', () => {
        it('應該成功刪除會話', async () => {
            mockSessionAPI.deleteSession.mockResolvedValue(undefined)

            await sessionService.deleteSession('session-id')

            expect(mockSessionAPI.deleteSession).toHaveBeenCalledWith('session-id')
        })

        it('應該處理刪除會話失敗', async () => {
            const deleteError = new Error('Delete failed')
            mockSessionAPI.deleteSession.mockRejectedValue(deleteError)

            await expect(sessionService.deleteSession('session-id'))
                .rejects.toThrow('Delete failed')
        })
    })

    describe('checkActiveSession', () => {
        const mockActiveSession: SessionResponse = {
            id: 'active-session',
            title: 'Active Session',
            type: 'recording',
            status: 'active',
            language: 'zh-TW',
            created_at: '2024-01-01T00:00:00Z',
            updated_at: '2024-01-01T00:00:00Z'
        }

        it('應該返回活躍會話', async () => {
            mockSessionAPI.getActiveSession.mockResolvedValue(mockActiveSession)

            const result = await sessionService.checkActiveSession()

            expect(mockSessionAPI.getActiveSession).toHaveBeenCalled()
            expect(result).toEqual(mockActiveSession)
        })

        it('應該在沒有活躍會話時返回 null', async () => {
            mockSessionAPI.getActiveSession.mockResolvedValue(null)

            const result = await sessionService.checkActiveSession()

            expect(result).toBeNull()
        })

        it('應該處理檢查活躍會話失敗', async () => {
            const checkError = new Error('Check failed')
            mockSessionAPI.getActiveSession.mockRejectedValue(checkError)

            await expect(sessionService.checkActiveSession())
                .rejects.toThrow('Check failed')
        })
    })

    describe('錯誤處理和邊界條件', () => {
        it('應該處理空字符串參數', async () => {
            mockSessionAPI.createSession.mockResolvedValue({
                id: 'test-session',
                title: '',
                type: 'recording',
                status: 'active',
                language: 'zh-TW',
                created_at: '2024-01-01T00:00:00Z',
                updated_at: '2024-01-01T00:00:00Z'
            })

            await sessionService.createRecordingSession('')

            expect(mockSessionAPI.createSession).toHaveBeenCalledWith({
                title: '',
                type: 'recording',
                content: undefined
            })
        })

        it('應該處理網路錯誤', async () => {
            const networkError = new Error('Network Error')
            mockSessionAPI.createSession.mockRejectedValue(networkError)

            await expect(sessionService.createRecordingSession('Test'))
                .rejects.toThrow('Network Error')
        })

        it('應該處理超時錯誤', async () => {
            const timeoutError = new Error('Request timeout')
            mockSessionAPI.createSession.mockRejectedValue(timeoutError)

            await expect(sessionService.createRecordingSession('Test'))
                .rejects.toThrow('Request timeout')
        })
    })

    describe('並發場景測試', () => {
        it('應該處理並發的會話創建請求', async () => {
            const mockSession1 = { ...mockSessionAPI, id: 'session-1' }
            const mockSession2 = { ...mockSessionAPI, id: 'session-2' }

            mockSessionAPI.createSession
                .mockResolvedValueOnce(mockSession1)
                .mockResolvedValueOnce(mockSession2)

            const promises = [
                sessionService.createRecordingSession('Session 1'),
                sessionService.createRecordingSession('Session 2')
            ]

            const results = await Promise.all(promises)

            expect(results).toHaveLength(2)
            expect(mockSessionAPI.createSession).toHaveBeenCalledTimes(2)
        })

        it('應該處理一個成功一個失敗的並發請求', async () => {
            const mockSession = { id: 'success-session' }
            const error = new Error('Failed')

            mockSessionAPI.createSession
                .mockResolvedValueOnce(mockSession)
                .mockRejectedValueOnce(error)

            const promises = [
                sessionService.createRecordingSession('Success'),
                sessionService.createRecordingSession('Fail')
            ]

            const results = await Promise.allSettled(promises)

            expect(results[0].status).toBe('fulfilled')
            expect(results[1].status).toBe('rejected')
        })
    })

    describe('服務狀態管理', () => {
        it('應該報告正確的服務狀態', () => {
            const info = sessionService.getServiceInfo()

            expect(info).toMatchObject({
                serviceName: 'SessionService',
                isInitialized: expect.any(Boolean),
                isRunning: expect.any(Boolean)
            })
        })

        it('應該在多次啟動時保持穩定', async () => {
            await sessionService.start()
            await sessionService.start()
            await sessionService.start()

            expect(sessionService['isRunning']).toBe(true)
        })

        it('應該在多次停止時保持穩定', async () => {
            await sessionService.start()
            await sessionService.stop()
            await sessionService.stop()
            await sessionService.stop()

            expect(sessionService['isRunning']).toBe(false)
        })
    })
})


# END FILE CONTENTS


# File: .env.example

# StudyScriber 環境變數

# ============================================
# Supabase 資料庫配置 (必須)
# ============================================
DB_MODE=supabase
SUPABASE_URL=https://your-project-ref.supabase.co
SUPABASE_KEY=your-anon-public-key

# ============================================
# 語音轉文字 Provider 設定
# ============================================
# 預設 STT Provider：whisper (Azure OpenAI) 或 gemini (Google Vertex AI)
STT_PROVIDER_DEFAULT=whisper

# ============================================
# Azure OpenAI 服務 (Whisper STT - 必須)
# ============================================
AZURE_OPENAI_API_KEY=your-api-key
AZURE_OPENAI_ENDPOINT=https://your-resource.openai.azure.com/
AZURE_OPENAI_API_VERSION=2024-02-01
WHISPER_DEPLOYMENT_NAME=whisper-1

# ============================================
# Google Vertex AI 服務 (Gemini STT - 可選)
# ============================================
# 取消註釋以下設定以啟用 Gemini 2.5 Pro STT
# GEMINI_ENDPOINT=us-central1-aiplatform.googleapis.com
# GEMINI_API_KEY=your-gcp-service-account-key
# GEMINI_PROMPT=請輸出逐字稿：
# GEMINI_MAX_REQUESTS=90


# ============================================
# Azure OpenAI 批次處理設定 (優化為低延遲)
# ============================================

# 批次處理設定 (優化為低延遲)
# 批次大小：2個音檔切片
WHISPER_BATCH_SIZE=2
# 批次超時：3秒 (目標延遲 ≤5秒)
WHISPER_BATCH_TIMEOUT=3

# 效能監控設定
# 啟用效能日誌記錄
ENABLE_PERFORMANCE_LOGGING=true

# ============================================
# Whisper 幻覺過濾設定 (提升轉錄品質)
# ============================================
# 這些參數用於過濾 Azure Whisper API 產生的低品質或幻覺段落
# 使用 verbose_json 格式的回應進行後端自動過濾

# 靜音檢測門檻 - 過濾高靜音機率的段落
# 範圍：0.0-1.0，值越高越嚴格
# 建議值：0.8 (過濾 80% 以上靜音機率的段落)
# 用途：移除「嗯」、「呃」等填充詞和靜音片段
FILTER_NO_SPEECH=0.8

# 置信度過濾門檻 - 過濾低置信度的段落
# 範圍：-5.0 到 0.0，值越高越嚴格
# 建議值：-1.0 (過濾平均對數機率低於 -1.0 的段落)
# 用途：移除模型不確定的轉錄結果
FILTER_LOGPROB=-1.0

# 重複內容檢測門檻 - 過濾高重複比率的段落
# 範圍：1.0+，值越低越嚴格
# 建議值：2.4 (過濾壓縮比大於 2.4 的段落)
# 用途：移除重複文字、迴圈幻覺等內容
FILTER_COMPRESSION=2.4

# ============================================
# 音頻切片配置 (影響前後端錄音切片時間)
# ============================================
# 音頻切片時長（秒）- 同時影響前後端錄音間隔
# 建議值：5-30秒，預設10秒
AUDIO_CHUNK_DURATION_SEC=5

# ============================================
# Cloudflare R2 儲存配置 (必須 - 用於音檔儲存)
# ============================================
# 帳戶 ID - 在 Cloudflare 控制台中可以找到
R2_ACCOUNT_ID=your-account-id

# API Token - 在 Cloudflare 控制台 > API 權杖中建立
# 需要的權限: Zone:Zone:Read, Account:Cloudflare R2:Edit
R2_API_TOKEN=your-r2-api-token

# 儲存桶名稱
R2_BUCKET_NAME=studyscriber-audio

# R2_ENDPOINT_URL 會自動生成: https://{R2_ACCOUNT_ID}.r2.cloudflarestorage.com
# 如需自訂端點，請取消註釋下面這行
# R2_ENDPOINT_URL=https://your-custom-endpoint.com

# ============================================
# 應用程式設定 (可選)
# ============================================
DEBUG=false
LOG_LEVEL=INFO


# END FILE CONTENTS


# File: .cursor/rules/backend.mdc

---
description:
globs:
alwaysApply: false
---
## Development Notes

- Dependency-Injection everywhere (container + FastAPI `Depends`)
- Strict TDD workflow: **Red → Green → Refactor** for every ticket
- Clean, layered architecture (API / Services / Domain / Infra / Core)
- Async-first, non-blocking I/O only (`httpx`, `aioboto3`, SQLAlchemy 2.0 async)
- Structured JSON logging with `structlog`
- Environment-based, typed configuration (`pydantic-settings`, Pydantic v2)
- OpenTelemetry tracing + Prometheus metrics
- Graceful startup/shutdown with FastAPI lifespan
- Health, metrics & readiness endpoints for orchestration
- Blue-green/containerised deployment (uvicorn + uvloop)

---

- Async context managers for resources

```python
# Good
async with aiofiles.open(file_path, "rb") as f:
    content = await f.read()

# Bad
f = await aiofiles.open(file_path, "rb")
content = await f.read()
f.close()
```

- Always use structured logging (never `print`)

```python
# Good
logger.info(
    "processing_chunk",
    extra={"chunk_id": chunk_id, "size": len(data)}
)
```

---

## Error-Handling Patterns

```python
# Good
try:
    result = await some_operation()
except ValidationError as e:
    raise HTTPException(status_code=422, detail=e.errors())
except ResourceNotFound as e:
    raise HTTPException(status_code=404, detail=str(e))
except Exception as e:
    logger.error("unexpected_error", exc_info=True)
    raise HTTPException(status_code=500, detail="Internal server error")
```

## WebSocket Patterns

```python
class ConnectionManager:
    def __init__(self):
        self.active: dict[str, WebSocket] = {}

    async def connect(self, ws: WebSocket, client_id: str):
        await ws.accept()
        self.active[client_id] = ws
        logger.info("ws_connected", client_id=client_id)

    async def disconnect(self, client_id: str):
        if client_id in self.active:
            del self.active[client_id]
            logger.info("ws_disconnected", client_id=client_id)

    async def broadcast(self, msg: str, client_id: str):
        if ws := self.active.get(client_id):
            try:
                await ws.send_text(msg)
            except WebSocketDisconnect:
                await self.disconnect(client_id)
```

---

## Database Patterns

```python
async def get_db():
    async with AsyncSession(engine) as session, session.begin():
        yield session
```

---

# Tests

- pytest + pytest-asyncio
- tests/ mirrors source tree
- Fixtures for common data/deps
- Mock external services (OpenAI, R2, Supabase)
- Test success & failure paths
- Coverage ≥ 90%

```python
@pytest.mark.asyncio
async def test_process_audio_chunk_success(azure_client_mock, supabase_mock):
    svc = AudioTranscriptionService(azure_client_mock, "deployment")
    ok = await svc.process_audio_chunk(uuid4(), 0, b"webm")
    assert ok is True
    azure_client_mock.audio.transcriptions.create.assert_called_once()
```

---

# Performance Considerations

- DB connection pooling
- Async cache (aioredis TTL)
- Background tasks for heavy CPU work
- Stream files with StreamingResponse
- Proper DB indexes
- PerformanceTimer wrapper for critical paths

---

# Security

- No secrets in code (use env or secret manager)
- Validate all inputs with Pydantic
- CORS allow list, never "*" in prod
- Rate-limit APIs (SlowAPI / gateway)
- Sanitize file uploads
- Secure WebSockets (wss) in production

---

# Logging Levels

- **DEBUG** detailed diagnostics
- **INFO** high-level flow
- **WARNING** unusual situations
- **ERROR** request failed, with stack
- **CRITICAL** service unusable

---

# Deployment
- uvicorn[standard] with `--loop uvloop --http httptools`
- Workers = (2 × CPU) + 1
- Env-specific `.env.*` files
- /healthz & /metrics endpoints
- Graceful shutdown hooks
- Memory monitoring & cleanup tasks


# END FILE CONTENTS


# File: frontend/app/page.tsx

"use client"

import dynamic from "next/dynamic"
import Component from "../study-scriber"

// 添加全局除錯功能
if (typeof window !== 'undefined') {
  // 立即初始化 TranscriptManager，確保在測試環境中可用
  import('../lib/transcript-manager').then(({ transcriptManager }) => {
    // 確保 TranscriptManager 已暴露到 window
    ; (window as any).transcriptManager = transcriptManager
    console.log('✅ TranscriptManager 已初始化並暴露到 window')
  });

  (window as any).debugTranscript = () => {
    const testMessage = {
      type: 'transcript_segment',
      text: '測試逐字稿內容 - 如果看到這個表示前端可以正常處理',
      start_time: 0,
      end_time: 12,
      start_sequence: 0,
      confidence: 0.95
    };

    // 取得當前 session ID
    const appData = (window as any).appData;
    const sessionId = appData?.session?.id || '861f8cee-1f57-476c-8819-0ffe9ec084c8';

    console.log('🔍 測試逐字稿接收，Session ID:', sessionId);

    // 直接觸發 TranscriptManager 的訊息處理
    const manager = (window as any).transcriptManager;
    if (manager) {
      const listeners = manager.listeners.get(sessionId);
      if (listeners && listeners.size > 0) {
        console.log(`📡 找到 ${listeners.size} 個監聽器，開始廣播測試訊息`);
        listeners.forEach((callback: any) => {
          try {
            callback(testMessage);
            console.log('✅ 測試訊息已發送');
          } catch (error) {
            console.error('❌ 發送測試訊息失敗:', error);
          }
        });
      } else {
        console.error('❌ 沒有找到監聽器，請確認 WebSocket 已連接');
      }
    } else {
      console.error('❌ TranscriptManager 未初始化');
    }
  };

  // 新增：診斷函數
  (window as any).debugState = () => {
    const appData = (window as any).appData;
    console.log('🔍 完整應用狀態診斷：');
    console.log('1. AppData:', appData);
    console.log('2. Session:', appData?.session);
    console.log('3. 錄音狀態:', {
      isRecording: appData?.isRecording,
      recordingTime: appData?.recordingTime,
      state: appData?.state
    });
    console.log('4. 逐字稿:', {
      transcriptEntries: appData?.transcriptEntries,
      count: appData?.transcriptEntries?.length || 0
    });

    // 檢查 transcriptManager 的內部狀態
    const manager = (window as any).transcriptManager;
    if (manager) {
      console.log('5. TranscriptManager:');
      console.log('   - 連接數:', manager.getConnectionCount());
      console.log('   - 連接Map:', manager.connections);
      console.log('   - 監聽器Map:', manager.listeners);
    }

    // 檢查為什麼狀態是 default
    console.log('6. 狀態映射條件:');
    console.log('   - hasSession:', !!appData?.session);
    console.log('   - sessionStatus:', appData?.session?.status);
    console.log('   - sessionType:', appData?.session?.type);
    console.log('   - isRecording:', appData?.isRecording);
    console.log('   - transcriptCount:', appData?.transcriptEntries?.length || 0);
  };

  // 新增：監聽逐字稿更新
  (window as any).watchTranscripts = () => {
    const sessionId = '861f8cee-1f57-476c-8819-0ffe9ec084c8';

    // 添加一個測試監聽器
    const testListener = (message: any) => {
      console.log('🎯 [測試監聽器] 收到訊息:', {
        type: message.type,
        text: message.text,
        time: new Date().toISOString()
      });
    };

    const manager = (window as any).transcriptManager;
    if (manager) {
      manager.addListener(sessionId, testListener);
      console.log('✅ 測試監聽器已添加，等待逐字稿訊息...');

      // 返回移除函數
      return () => {
        manager.removeListener(sessionId, testListener);
        console.log('❌ 測試監聽器已移除');
      };
    } else {
      console.error('❌ TranscriptManager 未初始化');
      return () => { };
    }
  };

  // 新增：手動推送逐字稿
  (window as any).pushTranscript = (text: string, startTime: number = 0) => {
    const appData = (window as any).appData;
    if (!appData) {
      console.error('❌ appData 未定義');
      return;
    }

    // 計算時間格式
    const hours = Math.floor(startTime / 3600);
    const minutes = Math.floor((startTime % 3600) / 60);
    const seconds = Math.floor(startTime % 60);
    const timeStr = `${hours.toString().padStart(2, "0")}:${minutes.toString().padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`;

    // 創建新的逐字稿項目
    const newEntry = {
      time: timeStr,
      text: text
    };

    // 更新 appData
    const currentEntries = appData.transcriptEntries || [];
    const newEntries = [...currentEntries, newEntry];

    // 手動觸發狀態更新
    console.log('📝 手動推送逐字稿:', newEntry);
    console.log('📊 更新前:', currentEntries.length, '條');
    console.log('📊 更新後:', newEntries.length, '條');

    // 更新狀態
    appData.transcriptEntries = newEntries;

    // 如果狀態還是 recording_waiting，改為 recording_active
    if (appData.state === 'recording_waiting' && newEntries.length > 0) {
      appData.state = 'recording_active';
      console.log('✅ 狀態更新: recording_waiting → recording_active');
    }

    // 強制重新渲染
    window.location.reload();
  };

  // 新增：診斷 WebSocket 和狀態
  (window as any).diagnose = () => {
    console.log('🔍 ========== 診斷開始 ==========');

    // 1. 檢查 appData 狀態
    const appData = (window as any).appData;
    console.log('📊 [1] appData 狀態:', {
      state: appData?.state,
      isRecording: appData?.isRecording,
      transcriptEntries: appData?.transcriptEntries?.length || 0,
      session: appData?.session ? {
        id: appData.session.id,
        status: appData.session.status,
        type: appData.session.type
      } : undefined
    });

    // 2. 檢查 recording hook 狀態
    const recordingHook = (window as any).recordingHook;
    if (recordingHook) {
      console.log('🎤 [2] recording hook 狀態:', {
        isRecording: recordingHook.isRecording,
        transcriptsCount: recordingHook.transcripts?.length || 0,
        transcripts: recordingHook.transcripts
      });
    } else {
      console.error('❌ [2] recording hook 未找到');
    }

    // 2.5 檢查 session hook 狀態
    const sessionHook = (window as any).sessionHook;
    if (sessionHook) {
      console.log('🔐 [2.5] session hook 狀態:', {
        currentSession: sessionHook.currentSession,
        isLoading: sessionHook.isLoading,
        error: sessionHook.error
      });
    } else {
      console.error('❌ [2.5] session hook 未找到');
    }

    // 3. 檢查 TranscriptManager 狀態
    const manager = (window as any).transcriptManager;
    const sessionId = appData?.session?.id || sessionHook?.currentSession?.id;

    if (manager && sessionId) {
      console.log('💬 [3] TranscriptManager 狀態:', {
        isConnected: manager.isConnected(sessionId),
        listeners: manager.listeners.size,
        websocket: manager.websocket ? '存在' : '不存在',
        sessionId: sessionId
      });
    } else {
      console.error('❌ [3] session ID 未定義 或 TranscriptManager 未找到', {
        manager: !!manager,
        sessionId: sessionId
      });
    }

    // 4. 檢查 WebSocket 詳情
    if (manager && sessionId) {
      const connections = manager.connections;
      const ws = connections.get(sessionId);
      if (ws) {
        console.log('🔌 [4] WebSocket 詳情:', {
          readyState: ws.readyState,
          readyStateText: ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'][ws.readyState],
          url: ws.url || ws.wsUrl,
          isConnected: ws.isConnected,
          bufferedAmount: ws.bufferedAmount || 'N/A',
          protocol: ws.protocol || 'N/A'
        });
      } else {
        console.error('❌ [4] WebSocket 連接未找到 for session:', sessionId);
      }
    } else {
      console.error('❌ [4] TranscriptManager 或 sessionId 未定義');
    }

    // 5. 檢查 localStorage
    console.log('💾 [5] localStorage 內容:', {
      draft_note: localStorage.getItem('draft_note')?.substring(0, 100) + '...',
      hasOtherSessionKeys: Object.keys(localStorage).filter(k => k.includes('session')).length > 0
    });

    // 6. 手動建立 WebSocket 連接測試
    console.log('🧪 [6] 測試 WebSocket 連接...');
    const testSessionId = sessionId || '23f6bbfe-a846-44db-ba1b-2751adafe0bc'; // 使用後端日誌中的 session ID
    const wsUrl = `ws://localhost:8000/ws/transcript_feed/${testSessionId}`;
    console.log('🧪 測試 URL:', wsUrl);

    // 7. 檢查 appData 中所有可用的屬性
    console.log('🔍 [7] appData 完整內容:', appData);

    console.log('🔍 ========== 診斷結束 ==========');
  };

  // 新增：強制同步狀態
  (window as any).syncStates = () => {
    console.log('🔄 強制同步所有狀態...');

    const recordingHook = (window as any).recordingHook;
    const sessionHook = (window as any).sessionHook;
    const appData = (window as any).appData;

    if (recordingHook && sessionHook && appData) {
      console.log('🔄 [同步前] 狀態對比:', {
        'appData.isRecording': appData.isRecording,
        'recording.isRecording': recordingHook.isRecording,
        'appData.state': appData.state,
        'session.status': sessionHook.currentSession?.status,
        'session.type': sessionHook.currentSession?.type,
        'recording.transcripts.length': recordingHook.transcripts?.length || 0,
        'appData.transcriptEntries.length': appData.transcriptEntries?.length || 0
      });

      // 強制觸發狀態重新計算
      const forceUpdate = () => {
        // 觸發一個微小的狀態變化來強制重新渲染
        const currentTime = appData.recordingTime || 0;
        appData.recordingTime = currentTime + 0.001;

        setTimeout(() => {
          appData.recordingTime = currentTime;
          console.log('✅ 強制同步完成');
        }, 50);
      };

      forceUpdate();
    } else {
      console.error('❌ 無法找到必要的 hooks');
    }
  };

  // 新增：修復狀態不一致
  (window as any).fixStates = () => {
    console.log('🔧 手動修復狀態不一致...');

    const recordingHook = (window as any).recordingHook;
    const appData = (window as any).appData;

    if (recordingHook && appData) {
      console.log('🔧 [修復前] 狀態:', {
        'appData.isRecording': appData.isRecording,
        'recording.isRecording': recordingHook.isRecording,
        'appData.state': appData.state
      });

      // 強制修復 isRecording 狀態
      if (appData.isRecording !== recordingHook.isRecording) {
        console.log('🔧 修復 isRecording 狀態不一致');
        appData.isRecording = recordingHook.isRecording;

        // 如果錄音已停止但狀態還是 recording_waiting，改為 default
        if (!recordingHook.isRecording && appData.state === 'recording_waiting') {
          console.log('🔧 修復狀態: recording_waiting → default');
          appData.state = 'default';
        }

        // 觸發重新渲染
        window.location.reload();
      } else {
        console.log('✅ 狀態已一致，無需修復');
      }
    } else {
      console.error('❌ 無法找到必要的 hooks');
    }
  };

  // 新增：強制 React 重新渲染
  (window as any).forceUpdate = () => {
    console.log('🔄 強制 React 重新渲染...');

    // 方法 1：創建一個微小的狀態變化來觸發重新渲染
    const appData = (window as any).appData;
    if (appData) {
      const originalRecordingTime = appData.recordingTime;
      appData.recordingTime = originalRecordingTime + 0.1;

      setTimeout(() => {
        appData.recordingTime = originalRecordingTime;
        console.log('✅ 強制更新完成');
      }, 100);
    }

    // 方法 2：如果上面不工作，重新載入頁面
    console.log('如果UI還是沒有更新，將在3秒後重新載入頁面...');
    setTimeout(() => {
      if (confirm('UI 沒有更新，是否重新載入頁面？')) {
        window.location.reload();
      }
    }, 3000);
  };
}

export default function Page() {
  return <Component />
}


# END FILE CONTENTS


# File: app/services/stt/save_utils.py

import json, logging
from uuid import UUID
from datetime import datetime

from app.db.database import get_supabase_client
from app.utils.timing import calc_times
from app.ws.transcript_feed import manager as ws

logger = logging.getLogger(__name__)


async def save_and_push_result(
    sid: UUID,
    chunk_seq: int,
    res: dict,
) -> None:
    """
    將 provider 回傳的結果：
      1. 寫入 transcript_segments
      2. 透過 WebSocket 推送給前端
    必要欄位：text, lang_code, timestamp
    可選欄位：start_time, end_time
    """
    # -------- 1. 時間欄位保障 --------
    if "start_time" not in res or "end_time" not in res:
        res["start_time"], res["end_time"] = calc_times(chunk_seq)

    # -------- 2. 寫入 DB -------------
    supa = get_supabase_client()
    seg_data = {
        "session_id": str(sid),
        "chunk_sequence": chunk_seq,
        "text": res["text"],
        "start_time": res["start_time"],
        "end_time": res["end_time"],
        "confidence": 1.0,
        "lang_code": res["lang_code"],
        "created_at": res.get("timestamp", datetime.utcnow().isoformat()),
    }
    row = supa.table("transcript_segments").insert(seg_data).execute()
    seg_id = row.data[0]["id"]

    # -------- 3. WebSocket 推送 ------
    await ws.broadcast(
        json.dumps(
            {
                "type": "transcript_segment",
                "session_id": str(sid),
                "segment_id": seg_id,
                "chunk_sequence": chunk_seq,
                "start_time": res["start_time"],
                "end_time": res["end_time"],
                "text": res["text"],
            }
        ),
        str(sid),
    )
    logger.info("📡 推送 transcript_segment seq=%s start=%.1f", chunk_seq, res["start_time"])


# END FILE CONTENTS


# File: app/utils/timer.py

import time, logging
logger = logging.getLogger(__name__)

class PerformanceTimer:
    """with PerformanceTimer("name"): ..."""

    def __init__(self, label: str):
        self.label = label
        self._t0: float | None = None

    def __enter__(self):
        self._t0 = time.perf_counter()
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        t_spent = (time.perf_counter() - self._t0) * 1000
        logger.debug("⏱️  %s took %.1f ms", self.label, t_spent)


# END FILE CONTENTS


# File: frontend/lib/api.test.ts

import { describe, it, expect, vi } from 'vitest'

// 模擬 axios 完整配置
vi.mock('axios', () => ({
    default: {
        create: vi.fn(() => ({
            post: vi.fn().mockResolvedValue({ data: {} }),
            get: vi.fn().mockResolvedValue({ data: {} }),
            patch: vi.fn().mockResolvedValue({ data: {} }),
            put: vi.fn().mockResolvedValue({ data: {} }),
            interceptors: {
                request: {
                    use: vi.fn(),
                },
                response: {
                    use: vi.fn(),
                },
            },
        })),
        isAxiosError: vi.fn(),
    },
}))

describe('API Configuration', () => {
    it('should use environment variables for API_BASE_URL', () => {
        // 測試環境變數配置
        const expectedURL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000'
        expect(expectedURL).toBe('http://localhost:8000')
    })

    it('should construct WebSocket URL correctly', async () => {
        // 動態 import 以避免模組載入時的錯誤
        const { getWebSocketURL } = await import('./api')

        const wsURL = getWebSocketURL('/test/path')
        const expectedURL = (process.env.NEXT_PUBLIC_WS_URL || 'ws://localhost:8000') + '/test/path'
        expect(wsURL).toBe(expectedURL)
    })
})

describe('API Methods', () => {
    it('should have all required sessionAPI methods', async () => {
        const { sessionAPI } = await import('./api')

        expect(typeof sessionAPI.createSession).toBe('function')
        expect(typeof sessionAPI.getActiveSession).toBe('function')
        expect(typeof sessionAPI.finishSession).toBe('function')
        expect(typeof sessionAPI.upgradeToRecording).toBe('function')
    })

    it('should have all required notesAPI methods', async () => {
        const { notesAPI } = await import('./api')

        expect(typeof notesAPI.updateNote).toBe('function')
        expect(typeof notesAPI.getNote).toBe('function')
    })
})


# END FILE CONTENTS


# File: frontend/lib/api.ts

import axios, { AxiosResponse, AxiosError } from 'axios'

// API 基礎配置 - 使用環境變數
const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000'

// 差異化超時配置
const API_TIMEOUTS = {
  session: 15000,    // 會話操作需要更多時間（建立、升級等）
  notes: 8000,       // 筆記操作相對較快
  export: 30000,     // 匯出操作可能需要更長時間
  default: 10000     // 其他操作保持現有設定
} as const

// 錯誤分類：判斷是否可重試
const isRetriableError = (error: AxiosError): boolean => {
  // 網路錯誤（連接失敗、DNS 失敗等）
  if (error.code === 'ERR_NETWORK' || error.code === 'ECONNABORTED') {
    return true
  }

  // 超時錯誤
  if (error.code === 'ECONNRESET' || error.message.includes('timeout')) {
    return true
  }

  // 伺服器錯誤（5xx）
  if (error.response?.status && error.response.status >= 500) {
    return true
  }

  // 特定的 4xx 錯誤（速率限制）
  if (error.response?.status === 429) {
    return true
  }

  return false
}

// 通用重試機制配置
interface RetryConfig {
  maxRetries: number
  baseDelay: number
  maxDelay: number
  backoffFactor: number
}

const DEFAULT_RETRY_CONFIG: RetryConfig = {
  maxRetries: 3,
  baseDelay: 1000,    // 1秒基礎延遲
  maxDelay: 10000,    // 最大延遲 10秒
  backoffFactor: 2    // 指數退避因子
}

// 指數退避算法
const calculateDelay = (attempt: number, config: RetryConfig): number => {
  const delay = config.baseDelay * Math.pow(config.backoffFactor, attempt - 1)
  return Math.min(delay, config.maxDelay)
}

// 建立專用的 API 客戶端
const createApiClient = (timeoutMs: number) => {
  return axios.create({
    baseURL: API_BASE_URL,
    timeout: timeoutMs,
    headers: {
      'Content-Type': 'application/json',
    },
  })
}

// 不同類型的 API 客戶端
const sessionClient = createApiClient(API_TIMEOUTS.session)
const notesClient = createApiClient(API_TIMEOUTS.notes)
const exportClient = createApiClient(API_TIMEOUTS.export)
const defaultClient = createApiClient(API_TIMEOUTS.default)

// 通用重試包裝器
async function withRetry<T>(
  operation: () => Promise<T>,
  context: string,
  config: Partial<RetryConfig> = {}
): Promise<T> {
  const retryConfig = { ...DEFAULT_RETRY_CONFIG, ...config }

  for (let attempt = 1; attempt <= retryConfig.maxRetries; attempt++) {
    try {
      const result = await operation()

      if (attempt > 1) {
        console.log(`✅ [API重試] ${context} 重試成功 (第 ${attempt} 次嘗試)`)
      }

      return result
    } catch (error) {
      const isLastAttempt = attempt === retryConfig.maxRetries

      if (axios.isAxiosError(error)) {
        // 不可重試的錯誤，立即失敗
        if (!isRetriableError(error)) {
          console.log(`❌ [API重試] ${context} 遇到不可重試錯誤，立即終止:`, {
            status: error.response?.status,
            code: error.code,
            message: error.message,
          });
          throw error;
        }

        // 最後一次嘗試失敗
        if (isLastAttempt) {
          console.error(`❌ [API重試] ${context} 重試失敗，已達最大重試次數 (${retryConfig.maxRetries})`)
          throw error
        }

        // 計算延遲時間
        const delay = calculateDelay(attempt, retryConfig)

        console.warn(`⚠️ [API重試] ${context} 第 ${attempt} 次嘗試失敗，${delay}ms 後重試...`, {
          status: error.response?.status,
          code: error.code,
          attempt: `${attempt}/${retryConfig.maxRetries}`,
          nextDelay: delay
        })

        // 等待後重試
        await new Promise(resolve => setTimeout(resolve, delay))
      } else {
        // 非 Axios 錯誤，直接拋出
        throw error
      }
    }
  }

  // 這裡不應該被執行到
  throw new Error(`${context} 重試邏輯異常`)
}

// 統一的回應攔截器設置
const setupInterceptors = (client: typeof sessionClient, clientName: string) => {
  client.interceptors.response.use(
    (response: AxiosResponse) => {
      console.log(`📡 [${clientName}] API 請求成功:`, {
        method: response.config.method?.toUpperCase(),
        url: response.config.url,
        status: response.status,
        duration: response.headers['x-response-time'] || 'unknown'
      })
      return response
    },
    (error: AxiosError) => {
      // 不顯示預期的 404 錯誤（例如：沒有活躍會話）
      const isExpected404 = error.response?.status === 404 &&
        error.config?.url?.includes('/api/session/active')

      if (!isExpected404) {
        console.error(`❌ [${clientName}] API 錯誤:`, {
          method: error.config?.method?.toUpperCase(),
          url: error.config?.url,
          status: error.response?.status,
          code: error.code,
          message: error.message,
          isRetriable: isRetriableError(error)
        })
      }

      return Promise.reject(error)
    }
  )
}

// 設置所有客戶端的攔截器
setupInterceptors(sessionClient, 'Session')
setupInterceptors(notesClient, 'Notes')
setupInterceptors(exportClient, 'Export')
setupInterceptors(defaultClient, 'Default')

// 型別定義
export interface SessionCreateRequest {
  title?: string
  type: 'note_only' | 'recording'
  content?: string
  start_ts?: number  // 錄音開始時間戳（毫秒），用於精確時間同步
  lang_code?: string  // BCP-47 語言碼（如 zh-TW, en-US）
  stt_provider?: string  // 語音轉文字 Provider 名稱（如 whisper, gpt4o）
}

// STT Provider 類型定義
export type STTProvider = 'whisper' | 'gemini' | 'gpt4o'

export interface SessionResponse {
  id: string
  title?: string
  type: 'note_only' | 'recording'
  status: 'draft' | 'active' | 'processing' | 'completed' | 'error'
  language: string
  created_at: string
  updated_at: string
}

export interface NoteUpdateRequest {
  content: string
  client_ts?: string  // ISO 時間戳字串，可選
}

export interface NoteUpdateResponse {
  success: boolean
  message: string
  server_ts: string  // ISO 時間戳字串
  note: NoteResponse
}

export interface NoteResponse {
  session_id: string
  content: string
  client_ts?: string  // ISO 時間戳字串，可選
  created_at: string
  updated_at: string
}

// Session API - 使用會話專用客戶端和重試機制
export const sessionAPI = {
  // 建立新會話
  async createSession(data: SessionCreateRequest): Promise<SessionResponse> {
    return withRetry(
      async () => {
        const response = await sessionClient.post('/api/session', data)
        return response.data
      },
      `建立會話 (${data.type})`,
      { maxRetries: 2 } // 會話建立重試次數較少，避免重複建立
    )
  },

  // 獲取活躍會話 - 增強重試機制
  async getActiveSession(): Promise<SessionResponse | null> {
    return withRetry(
      async () => {
        try {
          const response = await sessionClient.get('/api/session/active')
          return response.data
        } catch (error) {
          // 如果沒有活躍會話，返回 null 而不是拋出錯誤
          if (axios.isAxiosError(error) && error.response?.status === 404) {
            return null
          }
          throw error
        }
      },
      '檢查活躍會話',
      { maxRetries: 3, baseDelay: 500 } // 更頻繁的重試，基礎延遲較短
    )
  },

  // 完成會話
  async finishSession(sessionId: string): Promise<void> {
    return withRetry(
      async () => {
        await sessionClient.patch(`/api/session/${sessionId}/finish`)
      },
      `完成會話 (${sessionId})`,
      { maxRetries: 2 }
    )
  },

  // 升級會話至錄音模式
  async upgradeToRecording(sessionId: string): Promise<SessionResponse> {
    return withRetry(
      async () => {
        const response = await sessionClient.patch(`/api/session/${sessionId}/upgrade`)
        return response.data
      },
      `升級會話 (${sessionId})`,
      { maxRetries: 2 }
    )
  },

  // 刪除會話及其所有相關數據
  async deleteSession(sessionId: string): Promise<{ success: boolean; message: string }> {
    return withRetry(
      async () => {
        const response = await sessionClient.delete(`/api/session/${sessionId}`)
        return response.data
      },
      `刪除會話 (${sessionId})`,
      { maxRetries: 2 }
    )
  },
}

// Notes API - 使用筆記專用客戶端和重試機制
export const notesAPI = {
  // 更新筆記內容
  async updateNote(sessionId: string, data: NoteUpdateRequest): Promise<NoteUpdateResponse> {
    return withRetry(
      async () => {
        const response = await notesClient.put(`/api/notes/${sessionId}`, data)
        return response.data
      },
      `更新筆記 (${sessionId})`,
      { maxRetries: 3, baseDelay: 500 } // 筆記更新重試較積極
    )
  },

  // 獲取筆記內容
  async getNote(sessionId: string): Promise<NoteResponse> {
    return withRetry(
      async () => {
        const response = await notesClient.get(`/api/notes/${sessionId}`)
        return response.data
      },
      `獲取筆記 (${sessionId})`,
      { maxRetries: 3, baseDelay: 500 }
    )
  },
}

// Export API - 使用匯出專用客戶端
export const exportAPI = {
  // 匯出會話資料
  async exportSession(sessionId: string, type: 'zip' | 'md' = 'zip'): Promise<Blob> {
    return withRetry(
      async () => {
        const response = await exportClient.get(`/api/export/${sessionId}`, {
          params: { type },
          responseType: 'blob',
        })
        return response.data
      },
      `匯出會話 (${sessionId})`,
      { maxRetries: 2, baseDelay: 2000 } // 匯出重試延遲較長
    )
  },
}

// WebSocket URL 建構 - 使用環境變數
export const getWebSocketURL = (path: string): string => {
  const wsBaseURL = process.env.NEXT_PUBLIC_WS_URL || 'ws://localhost:8000'
  return `${wsBaseURL}${path}`
}

// 匯出重試功能供其他模組使用
export { withRetry, isRetriableError, API_TIMEOUTS }

// 保持向後兼容性
export default defaultClient


# END FILE CONTENTS


# File: frontend/lib/audio-recorder.ts

"use client"

import { getAudioChunkIntervalMs } from './config'

// 音訊錄製狀態
export type AudioRecorderState = 'idle' | 'recording' | 'paused' | 'error'

// 音訊錄製配置
export interface AudioRecorderConfig {
  chunkInterval: number // 切片間隔（毫秒）
  mimeType: string // 音訊格式
  audioBitsPerSecond?: number // 音訊位元率
}

// 音訊切片資料
export interface AudioChunk {
  blob: Blob
  timestamp: number
  duration: number
  sequence: number
}

// 預設配置
const DEFAULT_CONFIG: AudioRecorderConfig = {
  chunkInterval: 12000, // 12 秒
  mimeType: 'audio/webm;codecs=opus',
  audioBitsPerSecond: 64000, // 64 kbps
}

// 支援的音訊格式列表（優先順序）
// MP4 格式在 FFmpeg 7.1.1 中有更好的兼容性，因此放在第一位
const SUPPORTED_MIME_TYPES = [
  'audio/webm;codecs=opus', // 第一優先：WebM Opus 編解碼器，音質優秀且串流友好
  'audio/webm',             // 第二優先：WebM 通用格式
  'audio/mp4',              // 第三優先：MP4 作為備選方案
  'audio/ogg;codecs=opus',
  'audio/wav',
]

export class AudioRecorder {
  private mediaRecorder: MediaRecorder | null = null
  private stream: MediaStream | null = null
  private config: AudioRecorderConfig
  private state: AudioRecorderState = 'idle'
  private chunkSequence: number = 0 // 切片序號計數器

  // 事件回調
  private onChunkCallback?: (chunk: AudioChunk) => void
  private onStateChangeCallback?: (state: AudioRecorderState) => void
  private onErrorCallback?: (error: Error) => void

  constructor(config: Partial<AudioRecorderConfig> = {}) {
    this.config = { ...DEFAULT_CONFIG, ...config }
  }

  /**
   * 開始錄製
   */
  async start(onDataAvailable: (chunk: AudioChunk) => void): Promise<void> {
    if (this.mediaRecorder && this.mediaRecorder.state === 'recording') {
      throw new Error('錄製已在進行中')
    }

    // 獲取麥克風權限
    this.stream = await navigator.mediaDevices.getUserMedia({ audio: true })

    // 創建 MediaRecorder
    this.mediaRecorder = new MediaRecorder(this.stream, {
      mimeType: this.config.mimeType,
      audioBitsPerSecond: this.config.audioBitsPerSecond,
    })

    // 重置序號計數器
    this.chunkSequence = 0

    // 監聽資料可用事件
    this.mediaRecorder.ondataavailable = (event) => {
      console.log('🎙️ [AudioRecorder] MediaRecorder.ondataavailable 觸發', {
        dataSize: event.data.size,
        sequence: this.chunkSequence,
        timestamp: new Date().toISOString()
      })

      if (event.data.size > 0) {
        const chunk: AudioChunk = {
          blob: event.data,
          timestamp: Date.now(),
          duration: this.config.chunkInterval,
          sequence: this.chunkSequence++, // 分配序號並遞增
        }

        console.log('📦 [AudioRecorder] 建立音頻切片', {
          sequence: chunk.sequence,
          size: chunk.blob.size,
          duration: chunk.duration,
          mimeType: this.config.mimeType
        })

        onDataAvailable(chunk)
      } else {
        console.warn('⚠️ [AudioRecorder] ondataavailable 但 data.size = 0')
      }
    }

    // 開始錄製，每隔指定時間產生一個切片
    console.log('🎬 [AudioRecorder] 開始錄製', {
      chunkInterval: this.config.chunkInterval,
      mimeType: this.config.mimeType,
      state: this.mediaRecorder.state
    })

    this.mediaRecorder.start(this.config.chunkInterval)

    console.log('✅ [AudioRecorder] MediaRecorder.start() 已調用', {
      state: this.mediaRecorder.state,
      stream: this.stream ? 'active' : 'null'
    })
  }

  /**
   * 停止錄製
   */
  stop(): void {
    if (this.mediaRecorder && this.mediaRecorder.state === 'recording') {
      this.mediaRecorder.stop()
    }

    if (this.stream) {
      this.stream.getTracks().forEach(track => track.stop())
      this.stream = null
    }

    this.mediaRecorder = null
    this.chunkSequence = 0 // 重置序號
  }

  /**
   * 獲取錄製狀態
   */
  get isRecording(): boolean {
    return this.mediaRecorder !== null && this.mediaRecorder.state === 'recording'
  }

  /**
   * 獲取當前序號
   */
  get currentSequence(): number {
    return this.chunkSequence
  }

  // 清理資源
  cleanup(): void {
    this.stop()

    if (this.stream) {
      this.stream.getTracks().forEach(track => track.stop())
      this.stream = null
    }

    this.mediaRecorder = null
    console.log('🧹 音訊錄製器已清理')
  }

  // 設定狀態
  private setState(newState: AudioRecorderState): void {
    this.state = newState
    this.onStateChangeCallback?.(newState)
  }

  // 錯誤處理
  private handleError(error: Error): void {
    console.error('❌ AudioRecorder 錯誤:', error)
    this.setState('error')
    this.onErrorCallback?.(error)
  }

  // 事件回調設定
  onChunk(callback: (chunk: AudioChunk) => void): void {
    this.onChunkCallback = callback
  }

  onStateChange(callback: (state: AudioRecorderState) => void): void {
    this.onStateChangeCallback = callback
  }

  onError(callback: (error: Error) => void): void {
    this.onErrorCallback = callback
  }

  // Getter
  get currentState(): AudioRecorderState {
    return this.state
  }

  get currentConfig(): AudioRecorderConfig {
    return { ...this.config }
  }
}

// 工廠函數
export const createAudioRecorder = (config?: Partial<AudioRecorderConfig>): AudioRecorder => {
  return new AudioRecorder(config)
}

/**
 * 檢查瀏覽器音訊錄製支援
 */
export async function checkAudioRecordingSupport(): Promise<{ isSupported: boolean; error?: string }> {
  if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
    return { isSupported: false, error: '瀏覽器不支援 MediaDevices API' }
  }

  if (!window.MediaRecorder) {
    return { isSupported: false, error: '瀏覽器不支援 MediaRecorder API' }
  }

  // 檢查 MIME 類型支援
  if (!MediaRecorder.isTypeSupported(DEFAULT_CONFIG.mimeType)) {
    return { isSupported: false, error: `不支援音訊格式: ${DEFAULT_CONFIG.mimeType}` }
  }

  try {
    const stream = await navigator.mediaDevices.getUserMedia({ audio: true })
    // 立即停止串流以釋放資源
    stream.getTracks().forEach(track => track.stop())
    return { isSupported: true }
  } catch (error) {
    return { isSupported: false, error: `無法獲取麥克風權限: ${error}` }
  }
}


# END FILE CONTENTS


# File: frontend/vitest.config.ts

/// <reference types="vitest" />
import { defineConfig } from 'vitest/config'
import react from '@vitejs/plugin-react'
import path from 'path'

export default defineConfig({
    plugins: [react()],
    test: {
        globals: true,
        environment: 'jsdom',
    },
    resolve: {
        alias: {
            '@': path.resolve(__dirname, './'),
        },
    },
})


# END FILE CONTENTS


# File: playwright.config.ts

 

# END FILE CONTENTS


# File: frontend/lib/__tests__/state-management.test.ts

import { beforeEach, describe, expect, test, vi } from 'vitest'
import { renderHook, act } from '@testing-library/react'
import { createElement } from 'react'
import { AppStateProvider, useAppStateContext } from '../../hooks/use-app-state-context'
import { useAppStateNew } from '../../hooks/use-app-state-new'
import { featureFlagManager } from '../feature-flags'
import { InitialStateLoader } from '../initial-state-loader'
import type { ReactNode } from 'react'

// Mock 外部依賴
vi.mock('../../hooks/use-session-adapter', () => ({
    useSession: vi.fn(() => ({
        currentSession: null,
        isLoading: false,
        error: null,
        createNoteSession: vi.fn(),
        createRecordingSession: vi.fn(),
        upgradeToRecording: vi.fn(),
        finishSession: vi.fn(),
        deleteSession: vi.fn(),
        checkActiveSession: vi.fn(),
    }))
}))

vi.mock('../../hooks/use-recording-adapter', () => ({
    useRecording: vi.fn(() => ({
        isRecording: false,
        recordingTime: 0,
        transcripts: [],
        error: null,
        startRecording: vi.fn(),
        stopRecording: vi.fn(),
        clearTranscripts: vi.fn(),
    }))
}))

vi.mock('../../hooks/use-notes', () => ({
    useNotes: vi.fn(() => ({
        noteContent: '',
        loadNote: vi.fn(),
        clearNote: vi.fn(),
    }))
}))

vi.mock('../../hooks/use-transcript-adapter', () => ({
    useTranscript: vi.fn(() => ({
        isConnected: false,
        error: null,
        autoScrollEnabled: true,
        disconnect: vi.fn(),
        clearTranscripts: vi.fn(),
        enableAutoScroll: vi.fn(),
        disableAutoScroll: vi.fn(),
        scrollToLatest: vi.fn(),
    }))
}))

vi.mock('@/components/ui/use-toast', () => ({
    useToast: vi.fn(() => ({
        toast: vi.fn(),
    }))
}))

// Mock InitialStateLoader
vi.mock('../../initial-state-loader', () => ({
    InitialStateLoader: {
        loadInitialAppData: vi.fn(() => ({
            state: 'default',
            transcriptEntries: [],
            editorContent: '',
            isRecording: false,
            recordingTime: 0,
            session: null,
        })),
        saveAppState: vi.fn(),
        clearPersistedState: vi.fn(),
        hasPersistedState: vi.fn(() => false),
    }
}))

function TestWrapper({ children }: { children: ReactNode }) {
    return createElement(AppStateProvider, null, children)
}

describe('狀態管理整合測試', () => {
    beforeEach(() => {
        vi.clearAllMocks()
        featureFlagManager.reset()
        featureFlagManager.enable('useNewStateManagement')
    })

    describe('Context 與 Hook 協作', () => {
        test('Context 應該為 Hook 提供正確的狀態', () => {
            const { result } = renderHook(() => useAppStateNew(), {
                wrapper: TestWrapper
            })

            expect(result.current.appData).toBeDefined()
            expect(result.current.appData.state).toBe('default')
            expect(result.current.appData.isRecording).toBe(false)
            expect(result.current.appData.transcriptEntries).toEqual([])
        })

        test('Hook 的狀態變更應該更新 Context', async () => {
            const { result } = renderHook(() => {
                const context = useAppStateContext()
                const hook = useAppStateNew()
                return { context, hook }
            }, {
                wrapper: TestWrapper
            })

            // 測試編輯器內容更新
            await act(async () => {
                result.current.hook.saveLocalDraft('測試內容')
            })

            expect(result.current.context.appData.editorContent).toBe('測試內容')
        })

        test('Context dispatch 應該觸發 Hook 重新渲染', async () => {
            const { result } = renderHook(() => {
                const context = useAppStateContext()
                const hook = useAppStateNew()
                return { context, hook }
            }, {
                wrapper: TestWrapper
            })

            const initialIsRecording = result.current.hook.appData.isRecording

            // 直接透過 Context dispatch 更新狀態
            await act(async () => {
                result.current.context.dispatch({
                    type: 'SET_RECORDING',
                    payload: true
                })
            })

            // Hook 應該重新渲染並反映新狀態
            expect(result.current.hook.appData.isRecording).toBe(true)
            expect(result.current.hook.appData.isRecording).not.toBe(initialIsRecording)
        })
    })

    describe('狀態一致性測試', () => {
        test('多個 Hook 實例應該共享相同狀態', () => {
            const { result: result1 } = renderHook(() => useAppStateNew(), {
                wrapper: TestWrapper
            })
            const { result: result2 } = renderHook(() => useAppStateNew(), {
                wrapper: TestWrapper
            })

            // 兩個 Hook 實例應該有相同的狀態
            expect(result1.current.appData.state).toBe(result2.current.appData.state)
            expect(result1.current.appData.isRecording).toBe(result2.current.appData.isRecording)
        })

        test('狀態變更應該同步到所有 Hook 實例', async () => {
            const { result: result1 } = renderHook(() => useAppStateNew(), {
                wrapper: TestWrapper
            })
            const { result: result2 } = renderHook(() => useAppStateNew(), {
                wrapper: TestWrapper
            })

            // 透過第一個 Hook 更新狀態
            await act(async () => {
                result1.current.saveLocalDraft('同步測試')
            })

            // 第二個 Hook 應該反映相同的變更
            expect(result2.current.appData.editorContent).toBe('同步測試')
        })
    })

    describe('初始狀態載入整合', () => {
        test('Provider 啟動時應該載入初始狀態', () => {
            const mockInitialData = {
                state: 'recording_active' as const,
                transcriptEntries: [{ time: '00:01', text: '測試逐字稿' }],
                editorContent: '測試內容',
                isRecording: true,
                recordingTime: 30,
                session: { id: 'test-session', status: 'active' as const, type: 'recording' as const }
            }

            vi.mocked(InitialStateLoader.loadInitialAppData).mockReturnValue(mockInitialData)

            const { result } = renderHook(() => useAppStateNew(), {
                wrapper: TestWrapper
            })

            // 應該載入初始狀態
            expect(InitialStateLoader.loadInitialAppData).toHaveBeenCalled()
            // 注意：由於 useEffect 的異步特性，初始狀態可能需要額外的渲染週期
        })

        test('狀態變更應該觸發持久化', async () => {
            const { result } = renderHook(() => useAppStateNew(), {
                wrapper: TestWrapper
            })

            await act(async () => {
                result.current.saveLocalDraft('需要持久化的內容')
            })

            // 等待持久化邏輯執行
            await new Promise(resolve => setTimeout(resolve, 1100)) // 等待超過 1 秒的延遲

            expect(InitialStateLoader.saveAppState).toHaveBeenCalled()
        })
    })

    describe('錯誤處理整合', () => {
        test('初始狀態載入失敗應該使用預設狀態', () => {
            vi.mocked(InitialStateLoader.loadInitialAppData).mockImplementation(() => {
                throw new Error('載入失敗')
            })

            const { result } = renderHook(() => useAppStateNew(), {
                wrapper: TestWrapper
            })

            // 應該回退到預設狀態
            expect(result.current.appData.state).toBe('default')
            expect(result.current.appData.transcriptEntries).toEqual([])
        })

        test('持久化失敗不應該影響應用運作', async () => {
            vi.mocked(InitialStateLoader.saveAppState).mockImplementation(() => {
                throw new Error('儲存失敗')
            })

            const { result } = renderHook(() => useAppStateNew(), {
                wrapper: TestWrapper
            })

            // 狀態變更應該仍然正常工作
            await act(async () => {
                result.current.saveLocalDraft('測試內容')
            })

            expect(result.current.appData.editorContent).toBe('測試內容')
        })
    })

    describe('記憶體管理', () => {
        test('Hook unmount 不應該導致記憶體洩漏', () => {
            const { unmount } = renderHook(() => useAppStateNew(), {
                wrapper: TestWrapper
            })

            // unmount 應該正常執行而不拋出錯誤
            expect(() => unmount()).not.toThrow()
        })

        test('多次 mount/unmount 應該穩定', () => {
            for (let i = 0; i < 5; i++) {
                const { unmount } = renderHook(() => useAppStateNew(), {
                    wrapper: TestWrapper
                })
                unmount()
            }

            // 最後一次應該仍然正常工作
            const { result } = renderHook(() => useAppStateNew(), {
                wrapper: TestWrapper
            })

            expect(result.current.appData).toBeDefined()
        })
    })
})


# END FILE CONTENTS


# File: frontend/next.config.mjs

/** @type {import('next').NextConfig} */
const nextConfig = {
  eslint: {
    ignoreDuringBuilds: true,
  },
  typescript: {
    ignoreBuildErrors: true,
  },
  images: {
    unoptimized: true,
  },
}

export default nextConfig

# END FILE CONTENTS


# File: frontend/hooks/use-transcript-new.ts

"use client"

import { useState, useCallback, useRef, useEffect } from 'react'
import { useAppStateContext } from './use-app-state-context'
import { isFeatureEnabled } from '../lib/feature-flags'
import { SERVICE_KEYS, serviceContainer } from '../lib/services'
import type { ITranscriptService, TranscriptMessage } from '../lib/services'

interface UseTranscriptNewReturn {
    transcripts: TranscriptMessage[]
    isConnected: boolean
    isCompleted: boolean
    error: string | null
    connect: (sessionId: string) => Promise<void>
    disconnect: () => void
    clearTranscripts: () => void
    // 自動捲動功能
    autoScrollEnabled: boolean
    enableAutoScroll: () => void
    disableAutoScroll: () => void
    scrollToLatest: () => void
    setScrollContainer: (element: HTMLElement | null) => void
}

/**
 * useTranscriptNew - 逐字稿管理 Hook (適配器層)
 *
 * 重構為適配器層：
 * - 內部調用 TranscriptService 而非直接使用 transcriptManager
 * - 保持對外接口完全不變，確保組件層無感知變更
 * - 保持 TranscriptManager 的獨立性和 WebSocket 重連機制
 */
export function useTranscriptNew(): UseTranscriptNewReturn {
    // 使用新的 Context 狀態管理
    const context = useAppStateContext()

    // 本地狀態（保持 TranscriptService 獨立性，避免影響 WebSocket 重連機制）
    const [isConnected, setIsConnected] = useState(false)
    const [isCompleted, setIsCompleted] = useState(false)
    const [localError, setLocalError] = useState<string | null>(null)
    const [autoScrollEnabled, setAutoScrollEnabled] = useState(true)

    const containerRef = useRef<HTMLElement | null>(null)
    const currentSessionIdRef = useRef<string | null>(null)
    const transcriptServiceRef = useRef<ITranscriptService | null>(null)

    console.log('🔄 [useTranscriptNew] Hook 初始化 (適配器層)', {
        useNewStateManagement: isFeatureEnabled('useNewStateManagement'),
        useNewTranscriptHook: isFeatureEnabled('useNewTranscriptHook'),
        contextTranscriptCount: context.appData.transcriptEntries.length,
    })

    // 初始化服務實例
    const initializeService = useCallback(() => {
        if (!transcriptServiceRef.current) {
            try {
                transcriptServiceRef.current = serviceContainer.resolve<ITranscriptService>(SERVICE_KEYS.TRANSCRIPT_SERVICE)
                console.log('✅ [useTranscriptNew] TranscriptService 初始化成功')
            } catch (error) {
                console.error('❌ [useTranscriptNew] 無法解析 TranscriptService:', error)
                throw new Error('逐字稿服務初始化失敗')
            }
        }
    }, [])

    // 處理逐字稿接收與合併邏輯 - 整合 Context
    const handleTranscript = useCallback((transcript: TranscriptMessage) => {
        if (transcript.type === 'transcript_complete') {
            setIsCompleted(true)
            // 觸發狀態轉換
            context.transition('PROCESSING_COMPLETED')
            return
        }

        const anyMessage = transcript as any
        if (anyMessage.type === 'error') {
            const errorMessage = anyMessage.error_message || '轉錄過程中發生錯誤'
            setLocalError(errorMessage)
            context.setError(errorMessage)
            return
        }

        if (transcript.type === 'transcript_segment' && transcript.text) {
            const startTime = transcript.start_time ?? 0
            const hours = Math.floor(startTime / 3600)
            const minutes = Math.floor((startTime % 3600) / 60)
            const seconds = Math.floor(startTime % 60)
            const timeStr = `${hours.toString().padStart(2, "0")}:${minutes.toString().padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`

            context.addTranscriptEntry({
                time: timeStr,
                text: transcript.text,
            })
        }
    }, [context])

    // 自動捲動功能
    const scrollToLatest = useCallback(() => {
        if (containerRef.current && autoScrollEnabled) {
            containerRef.current.scrollTop = containerRef.current.scrollHeight
        }
    }, [autoScrollEnabled])

    // 檢測使用者滾動 - 離底部 >60px 時禁用自動捲動
    const handleScroll = useCallback((event: Event) => {
        const container = event.target as HTMLElement
        if (!container) return

        const { scrollTop, scrollHeight, clientHeight } = container
        const distanceFromBottom = scrollHeight - scrollTop - clientHeight

        if (distanceFromBottom > 60) {
            setAutoScrollEnabled(false)
        } else if (distanceFromBottom <= 10) {
            setAutoScrollEnabled(true)
        }
    }, [])

    // 設定自動捲動容器
    const setScrollContainer = useCallback((element: HTMLElement | null) => {
        if (containerRef.current) {
            containerRef.current.removeEventListener('scroll', handleScroll)
        }

        containerRef.current = element

        if (element) {
            element.addEventListener('scroll', handleScroll)
        }
    }, [handleScroll])

    // 啟用自動捲動
    const enableAutoScroll = useCallback(() => {
        setAutoScrollEnabled(true)
        scrollToLatest()
    }, [scrollToLatest])

    // 禁用自動捲動
    const disableAutoScroll = useCallback(() => {
        setAutoScrollEnabled(false)
    }, [])

    // 連接 TranscriptService - 使用服務層
    const connect = useCallback(async (sessionId: string): Promise<void> => {
        try {
            setLocalError(null)
            context.setError(null)
            setIsCompleted(false)

            console.log('🔌 [useTranscriptNew] 連接逐字稿服務 (適配器層):', sessionId)

            // 初始化服務
            initializeService()
            const transcriptService = transcriptServiceRef.current!

            // 先移除之前的監聽器
            if (currentSessionIdRef.current) {
                transcriptService.removeTranscriptListener(currentSessionIdRef.current, handleTranscript)
            }

            // 使用服務層連接
            await transcriptService.connect(sessionId)
            transcriptService.addTranscriptListener(sessionId, handleTranscript)

            currentSessionIdRef.current = sessionId
            setIsConnected(transcriptService.isConnected(sessionId))

            console.log('✅ [useTranscriptNew] 逐字稿服務連接成功 (服務層):', sessionId)

        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : '連接逐字稿服務失敗'
            setLocalError(errorMessage)
            context.setError(errorMessage)
            setIsConnected(false)
            console.error('❌ [useTranscriptNew] 連接逐字稿服務失敗:', err)
        }
    }, [handleTranscript, context, initializeService])

    // 斷開連接 - 使用服務層
    const disconnect = useCallback(() => {
        console.log('🔌 [useTranscriptNew] 斷開逐字稿服務 (適配器層)')

        const transcriptService = transcriptServiceRef.current
        if (currentSessionIdRef.current && transcriptService) {
            transcriptService.removeTranscriptListener(currentSessionIdRef.current, handleTranscript)

            // 使用服務層斷開連接（如果有會話ID）
            transcriptService.disconnect(currentSessionIdRef.current)

            currentSessionIdRef.current = null
        }

        setIsConnected(false)
        console.log('✅ [useTranscriptNew] 逐字稿服務斷開成功 (服務層)')
    }, [handleTranscript])

    // 清空逐字稿 - 使用 Context
    const clearTranscripts = useCallback(() => {
        context.setTranscriptEntries([])
        setIsCompleted(false)
        console.log('🔄 [useTranscriptNew] 逐字稿已清除 (適配器層)')
    }, [context])

    // 自動捲動效果
    useEffect(() => {
        if (context.appData.transcriptEntries.length > 0) {
            scrollToLatest()
        }
    }, [context.appData.transcriptEntries, scrollToLatest])

    // 清理資源
    useEffect(() => {
        return () => {
            const transcriptService = transcriptServiceRef.current
            if (currentSessionIdRef.current && transcriptService) {
                transcriptService.removeTranscriptListener(currentSessionIdRef.current, handleTranscript)
            }

            if (containerRef.current) {
                containerRef.current.removeEventListener('scroll', handleScroll)
            }
        }
    }, [handleTranscript, handleScroll])

    // 轉換 Context 中的 transcriptEntries 為 TranscriptMessage 格式（向後相容）
    const compatibleTranscripts: TranscriptMessage[] = context.appData.transcriptEntries.map((entry, index) => ({
        type: 'transcript_segment',
        text: entry.text,
        start_time: 0,
        end_time: 0,
        start_sequence: index,
        confidence: 1.0,
        timestamp: Date.now(),
    }))

    return {
        transcripts: compatibleTranscripts,
        isConnected,
        isCompleted,
        error: context.error || localError,
        connect,
        disconnect,
        clearTranscripts,
        autoScrollEnabled,
        enableAutoScroll,
        disableAutoScroll,
        scrollToLatest,
        setScrollContainer,
    }
}


# END FILE CONTENTS


# File: docs/traceback-debug-spec.md

# StudyScriber API 500 例外 Traceback 行為說明

## 功能說明

當 API 發生未捕捉的 500 例外（Internal Server Error）時，系統會根據環境設定自動決定是否在回應中顯示詳細 Python traceback：

- **開發環境（settings.DEBUG = True）**：
  - API 回應會多一個 `traceback` 欄位，內含完整 Python 錯誤堆疊資訊，方便除錯。
- **正式環境（settings.DEBUG = False）**：
  - API 回應不會顯示 traceback，僅回傳一般錯誤訊息，避免洩漏內部細節。

## 設定方法

1. 編輯 `.env` 或 `.env.local` 檔案，加入：

   ```
   DEBUG=true
   ```

2. 或於啟動時以環境變數指定：

   ```sh
   export DEBUG=true
   uvicorn main:fastapi_app --reload --port 8000
   ```

3. 預設正式環境（未設 DEBUG 或設為 false）不會顯示 traceback。

## 注意事項

- 只有未捕捉的 Exception 會進入全域例外處理並顯示 traceback。
- 常見 HTTPException、驗證錯誤等，仍由 FastAPI 預設處理，不會顯示 traceback。
- 請勿在正式環境開啟 DEBUG=true，以免洩漏敏感資訊。

---

如需強制測試 traceback，可於任一 API 端點內 raise Exception 觀察效果。 


# END FILE CONTENTS


# File: frontend/src/test-setup.ts

import '@testing-library/jest-dom'
import { vi } from 'vitest'

// 模擬 window.matchMedia (Radix UI 需要)
Object.defineProperty(window, 'matchMedia', {
    writable: true,
    value: vi.fn().mockImplementation((query: string) => ({
        matches: false,
        media: query,
        onchange: null,
        addListener: vi.fn(),
        removeListener: vi.fn(),
        addEventListener: vi.fn(),
        removeEventListener: vi.fn(),
        dispatchEvent: vi.fn(),
    })),
})

// 模擬 ResizeObserver (某些 UI 元件需要)
Object.defineProperty(global, 'ResizeObserver', {
    writable: true,
    value: vi.fn().mockImplementation(() => ({
        observe: vi.fn(),
        unobserve: vi.fn(),
        disconnect: vi.fn(),
    })),
})


# END FILE CONTENTS


# File: frontend/constants/languages.ts

export const LANGS = [
    { code: 'zh-TW', label: '中文（繁體）' },
    { code: 'en-US', label: 'English' },
];


# END FILE CONTENTS


# File: frontend/providers/app-state-provider-wrapper.tsx

"use client"

import React from 'react'
import { AppStateProvider } from '../hooks/use-app-state-context'
import { isFeatureEnabled } from '../lib/feature-flags'

interface AppStateProviderWrapperProps {
    children: React.ReactNode
}

/**
 * AppStateProvider 包裝器
 * 根據功能開關決定是否啟用新的狀態管理系統
 * 這提供了漸進式部署的能力，可以安全地在新舊系統間切換
 */
export function AppStateProviderWrapper({ children }: AppStateProviderWrapperProps) {
    // 檢查是否啟用新的狀態管理系統
    const useNewStateManagement = isFeatureEnabled('useNewStateManagement')
    const useNewAppStateHook = isFeatureEnabled('useNewAppStateHook')

    console.log('🔄 [AppStateProviderWrapper] 功能開關狀態:', {
        useNewStateManagement,
        useNewAppStateHook,
        willUseProvider: useNewStateManagement || useNewAppStateHook
    })

    // 如果啟用新狀態管理，使用 AppStateProvider 包裝
    if (useNewStateManagement || useNewAppStateHook) {
        console.log('🔄 [AppStateProviderWrapper] 啟用新狀態管理 - 使用 AppStateProvider')
        return (
            <AppStateProvider>
                {children}
            </AppStateProvider>
        )
    }

    // 否則直接渲染子組件（使用舊系統）
    console.log('🔄 [AppStateProviderWrapper] 使用舊狀態管理 - 直接渲染')
    return <>{children}</>
}


# END FILE CONTENTS


# File: .cursor/rules/ui-rules/shadcn-tailwind-ui-guideline.mdc

<!-- Source: https://github.com/RayFernando1337/llm-cursor-rules/blob/main/fire-your-design-team.md -->

# shadcn/ui with Tailwind v4 Design System Guidelines

This document outlines design principles and implementation guidelines for applications using shadcn/ui with Tailwind v4. These guidelines ensure consistency, accessibility, and best practices throughout the UI development process.

## Core Design Principles

### 1. Typography System: 4 Sizes, 2 Weights
- **4 Font Sizes Only**:
  - Size 1: Large headings
  - Size 2: Subheadings/Important content
  - Size 3: Body text
  - Size 4: Small text/labels
- **2 Font Weights Only**:
  - Semibold: For headings and emphasis
  - Regular: For body text and general content
- **Consistent Hierarchy**: Maintain clear visual hierarchy with limited options

### 2. 8pt Grid System
- **All spacing values must be divisible by 8 or 4**
- **Examples**:
  - Instead of 25px padding → Use 24px (divisible by 8)
  - Instead of 11px margin → Use 12px (divisible by 4)
- **Consistent Rhythm**: Creates visual harmony throughout the interface

### 3. 60/30/10 Color Rule
- **60%**: Neutral color (white/light gray)
- **30%**: Complementary color (dark gray/black)
- **10%**: Main brand/accent color (e.g., red, blue)
- **Color Balance**: Prevents visual stress while maintaining hierarchy

### 4. Clean Visual Structure
- **Logical Grouping**: Related elements should be visually connected
- **Deliberate Spacing**: Spacing between elements should follow the grid system
- **Alignment**: Elements should be properly aligned within their containers
- **Simplicity Over Flashiness**: Focus on clarity and function first

## Foundation

### Tailwind v4 Integration
- **Use Tailwind CSS v4 for styling**: Leverage the latest Tailwind features including the new @theme directive, dynamic utility values, and OKLCH colors. [Tailwind CSS v4 Documentation](mdc:https://tailwindcss.com/docs)
- **Modern browsing features**: Tailwind v4 uses bleeding-edge browser features and is designed for modern browsers.
- **Simplified installation**: Fewer dependencies, zero configuration required in many cases.
- **shadcn/ui v4 demo**: Reference the demo site for component examples. [shadcn/ui v4 Demo](mdc:https://v4.shadcn.com/)

### New CSS Structure
- **Replace @layer base with @theme directive**:
  ```css
  /* Old approach in v3 */
  @layer base {
    :root {
      --background: 0 0% 100%;
      --foreground: 0 0% 3.9%;
    }
  }
  
  /* New approach in v4 */
  @theme {
    --color-background: hsl(var(--background));
    --color-foreground: hsl(var(--foreground));
  }
  ```
- **Tailwind imports**: Use `@import "tailwindcss"` instead of `@tailwind base`
- **Container queries**: Built-in support without plugins
- **OKLCH color format**: Updated from HSL for better color perception

## Typography System

### Font Sizes & Weights
- **Strictly limit to 4 distinct sizes**:
  - Size 1: Large headings (largest)
  - Size 2: Subheadings
  - Size 3: Body text
  - Size 4: Small text/labels (smallest)
- **Only use 2 font weights**:
  - Semibold: For headings and emphasis
  - Regular: For body text and most UI elements
- **Common mistakes to avoid**:
  - Using more than 4 font sizes
  - Introducing additional font weights
  - Inconsistent size application

### Typography Implementation
- **Reference shadcn's typography primitives** for consistent text styling
- **Use monospace variant** for numerical data when appropriate
- **data-slot attribute**: Every shadcn/ui primitive now has a data-slot attribute for styling
- **Maintain hierarchy** using consistent sizing patterns

## 8pt Grid System

### Spacing Guidelines
- **All spacing values MUST be divisible by 8 or 4**:
  - ✅ DO: Use 8, 16, 24, 32, 40, 48, etc.
  - ❌ DON'T: Use 25, 11, 7, 13, etc.

- **Practical examples**:
  - Instead of 25px padding → Use 24px (divisible by 8)
  - Instead of 11px margin → Use 12px (divisible by 4)
  - Instead of 15px gap → Use 16px (divisible by 8)

- **Use Tailwind's spacing utilities**:
  - p-4 (16px), p-6 (24px), p-8 (32px)
  - m-2 (8px), m-4 (16px), m-6 (24px)
  - gap-2 (8px), gap-4 (16px), gap-8 (32px)

- **Why this matters**:
  - Creates visual harmony
  - Simplifies decision-making
  - Establishes predictable patterns

### Implementation
- **Tailwind v4 dynamic spacing**: Spacing utilities accept any value without arbitrary syntax
- **Consistent component spacing**: Group related elements with matching gap values
- **Check responsive behavior**: Ensure grid system holds at all breakpoints

## 60/30/10 Color Rule

### Color Distribution
- **60%**: neutral color (bg-background)
  - Usually white or light gray in light mode
  - Dark gray or black in dark mode
  - Used for primary backgrounds, cards, containers

- **30%**: complementary color (text-foreground)
  - Usually dark gray or black in light mode
  - Light gray or white in dark mode
  - Used for text, icons, subtle UI elements

- **10%**: accent color (brand color)
  - Your primary brand color (red, blue, etc.)
  - Used sparingly for call-to-action buttons, highlights, important indicators
  - Avoid overusing to prevent visual stress

### Common Mistakes
- ❌ Overusing accent colors creates visual stress
- ❌ Not enough contrast between background and text
- ❌ Too many competing accent colors (stick to one primary accent)

### Implementation with shadcn/ui
- **Background/foreground convention**: Each component uses the background/foreground pattern
- **CSS variables in globals.css**:
  ```css
  :root {
    --background: oklch(1 0 0);
    --foreground: oklch(0.145 0 0);
    --primary: oklch(0.205 0 0);
    --primary-foreground: oklch(0.985 0 0);
    /* Additional variables */
  }
  
  @theme {
    --color-background: var(--background);
    --color-foreground: var(--foreground);
    /* Register other variables */
  }
  ```
- **OKLCH color format**: More accessible colors, especially in dark mode
- **Reserve accent colors** for important elements that need attention

## Component Architecture

### shadcn/ui Component Structure
- **2-layered architecture**:
  1. Structure and behavior layer (Radix UI primitives)
  2. Style layer (Tailwind CSS)
- **Class Variance Authority (CVA)** for variant styling
- **data-slot attribute** for styling component parts

### Implementation
- **Install components individually** using CLI (updated for v4) or manual installation
- **Component customization**: Modify components directly as needed
- **Radix UI primitives**: Base components for accessibility and behavior
- **New-York style**: Default recommended style for new projects (deprecated "default" style)

## Visual Hierarchy

### Design Principles
- **Simplicity over flashiness**: Focus on clarity and usability
- **Emphasis on what matters**: Highlight important elements
- **Reduced cognitive load**: Use consistent terminology and patterns
- **Visual connection**: Connect related UI elements through consistent patterns

### Implementation
- **Use shadcn/ui Blocks** for common UI patterns
- **Maintain consistent spacing** between related elements
- **Align elements properly** within containers
- **Logical grouping** of related functionality

## Installation & Setup

### Project Setup
- **CLI initialization**:
  ```bash
  npx create-next-app@latest my-app
  cd my-app
  npx shadcn-ui@latest init
  ```
- **Manual setup**: Follow the guide at [Manual Installation](mdc:https://ui.shadcn.com/docs/installation/manual)
- **components.json configuration**:
  ```json
  {
    "style": "new-york",
    "rsc": true,
    "tailwind": {
      "config": "",
      "css": "app/globals.css",
      "baseColor": "neutral",
      "cssVariables": true
    },
    "aliases": {
      "components": "@/components",
      "utils": "@/lib/utils"
    }
  }
  ```

### Adding Components
- **Use the CLI**: `npx shadcn-ui@latest add button`
- **Install dependencies**: Required for each component
- **Find components**: [Component Reference](mdc:https://ui.shadcn.com/docs/components)

## Advanced Features

### Dark Mode
- **Updated dark mode colors** for better accessibility using OKLCH
- **Consistent contrast ratios** across light and dark themes
- **Custom variant**: `@custom-variant dark (&:is(.dark *))`

### Container Queries
- **Built-in support** without plugins
- **Responsive components** that adapt to their container size
- **@min-* and @max-* variants** for container query ranges

### Data Visualization
- **Chart components**: Use with consistent styling
- **Consistent color patterns**: Use chart-1 through chart-5 variables

## Experience Design

### Motion & Animation
- **Consider transitions** between screens and states
- **Animation purpose**: Enhance usability, not distract
- **Consistent motion patterns**: Similar elements should move similarly

### Implementation
- **Test experiences** across the entire flow
- **Design with animation in mind** from the beginning
- **Balance speed and smoothness** for optimal user experience

## Resources

- [shadcn/ui Documentation](mdc:https://ui.shadcn.com/docs)
- [Tailwind CSS v4 Documentation](mdc:https://tailwindcss.com/docs)
- [shadcn/ui GitHub Repository](mdc:https://github.com/shadcn/ui)
- [Tailwind v4 Upgrade Guide](mdc:https://tailwindcss.com/docs/upgrade-guide)
- [shadcn/ui v4 Demo](mdc:https://v4.shadcn.com/)
- [Figma Design System](mdc:https://www.figma.com/community/file/1203061493325953101/shadcn-ui-design-system)

## Code Review Checklist

### Core Design Principles
- [ ] Typography: Uses only 4 font sizes and 2 font weights (Semibold, Regular)
- [ ] Spacing: All spacing values are divisible by 8 or 4
- [ ] Colors: Follows 60/30/10 color distribution (60% neutral, 30% complementary, 10% accent)
- [ ] Structure: Elements are logically grouped with consistent spacing

### Technical Implementation
- [ ] Uses proper OKLCH color variables
- [ ] Leverages @theme directive for variables
- [ ] Components implement data-slot attribute properly
- [ ] Visual hierarchy is clear and consistent
- [ ] Components use Class Variance Authority for variants
- [ ] Dark mode implementation is consistent
- [ ] Accessibility standards are maintained (contrast, keyboard navigation, etc.)

### Common Issues to Flag
- [ ] Too many font sizes (more than 4)
- [ ] Inconsistent spacing values (not divisible by 8 or 4)
- [ ] Overuse of accent colors (exceeding 10%)
- [ ] Random or inconsistent margins/padding
- [ ] Insufficient contrast between text and background
- [ ] Unnecessary custom CSS when Tailwind utilities would suffice

# END FILE CONTENTS


# File: app/services/__init__.py



# END FILE CONTENTS


# File: frontend/lib/__tests__/state-machine.test.ts

import { describe, test, expect, beforeEach, vi } from 'vitest'
import { StateMachine, StateMachineManager, createStateMachine } from '../state-machine'
import { StateTransitionContext } from '../../types/state-transitions'

describe('StateMachine', () => {
    let stateMachine: StateMachine
    let initialContext: StateTransitionContext

    beforeEach(() => {
        initialContext = {
            currentState: 'default',
            isRecording: false,
            transcriptCount: 0,
            session: null,
            error: null,
        }
        stateMachine = new StateMachine(initialContext)
    })

    test('should initialize with correct state', () => {
        expect(stateMachine.getCurrentState()).toBe('default')
        expect(stateMachine.getContext()).toEqual(initialContext)
    })

    test('should update context correctly', () => {
        const newContext = {
            isRecording: true,
            session: { id: 'test-id', status: 'active' as const, type: 'recording' as const }
        }

        stateMachine.updateContext(newContext)
        const updatedContext = stateMachine.getContext()

        expect(updatedContext.isRecording).toBe(true)
        expect(updatedContext.session).toEqual(newContext.session)
    })

    test('should validate USER_START_RECORDING transition from default', () => {
        const canTransition = stateMachine.canTransition('USER_START_RECORDING')
        expect(canTransition).toBe(true)
    })

    test('should not allow invalid transitions', () => {
        const canTransition = stateMachine.canTransition('USER_STOP_RECORDING')
        expect(canTransition).toBe(false)
    })

    test('should execute valid state transition', () => {
        const result = stateMachine.transition('USER_START_RECORDING')

        expect(result.success).toBe(true)
        expect(result.newState).toBe('recording_waiting')
        expect(result.sideEffects).toBeDefined()
        expect(stateMachine.getCurrentState()).toBe('recording_waiting')
    })

    test('should reject invalid state transition', () => {
        const result = stateMachine.transition('USER_STOP_RECORDING')

        expect(result.success).toBe(false)
        expect(result.error).toBeDefined()
        expect(stateMachine.getCurrentState()).toBe('default')
    })

    test('should handle FIRST_TRANSCRIPT_RECEIVED transition', () => {
        // 先轉換到 recording_waiting 狀態
        stateMachine.transition('USER_START_RECORDING')

        // 更新上下文以符合轉換條件
        stateMachine.updateContext({
            currentState: 'recording_waiting',
            isRecording: true,
            transcriptCount: 1,
            session: { id: 'test-id', status: 'active', type: 'recording' }
        })

        const result = stateMachine.transition('FIRST_TRANSCRIPT_RECEIVED')
        expect(result.success).toBe(true)
        expect(result.newState).toBe('recording_active')
    })

    test('should get available transitions correctly', () => {
        const transitions = stateMachine.getAvailableTransitions()
        expect(transitions).toContain('USER_START_RECORDING')
        expect(transitions).not.toContain('USER_STOP_RECORDING')
    })

    test('should reset state machine', () => {
        stateMachine.transition('USER_START_RECORDING')
        expect(stateMachine.getCurrentState()).toBe('recording_waiting')

        stateMachine.reset()
        expect(stateMachine.getCurrentState()).toBe('default')
        expect(stateMachine.getContext().isRecording).toBe(false)
    })

    test('should handle listeners correctly', () => {
        const mockListener = vi.fn()
        stateMachine.addListener(mockListener)

        stateMachine.transition('USER_START_RECORDING')

        expect(mockListener).toHaveBeenCalledWith(
            'recording_waiting',
            expect.any(Array)
        )

        stateMachine.removeListener(mockListener)
    })
})

describe('StateMachineManager', () => {
    let manager: StateMachineManager
    let initialContext: StateTransitionContext

    beforeEach(() => {
        initialContext = {
            currentState: 'default',
            isRecording: false,
            transcriptCount: 0,
            session: null,
            error: null,
        }
        manager = new StateMachineManager(initialContext)
    })

    test('should create manager with state machine', () => {
        const stateMachine = manager.getStateMachine()
        expect(stateMachine).toBeInstanceOf(StateMachine)
        expect(stateMachine.getCurrentState()).toBe('default')
    })

    test('should register side effect handlers', () => {
        const mockHandler = {
            handleSideEffect: vi.fn()
        }

        manager.registerSideEffectHandler('CREATE_SESSION', mockHandler)

        // 觸發會產生 CREATE_SESSION 副作用的轉換
        const stateMachine = manager.getStateMachine()
        stateMachine.transition('USER_START_RECORDING')

        // 等待副作用處理
        setTimeout(() => {
            expect(mockHandler.handleSideEffect).toHaveBeenCalled()
        }, 0)
    })

    test('should update context and trigger auto transition', () => {
        const result = manager.updateContextAndTransition(
            { isRecording: false },
            'USER_START_RECORDING'
        )

        expect(result).toBeDefined()
        expect(result?.success).toBe(true)
        expect(result?.newState).toBe('recording_waiting')
    })
})

describe('createStateMachine', () => {
    test('should create state machine manager', () => {
        const initialContext: StateTransitionContext = {
            currentState: 'default',
            isRecording: false,
            transcriptCount: 0,
            session: null,
            error: null,
        }

        const manager = createStateMachine(initialContext)
        expect(manager).toBeInstanceOf(StateMachineManager)

        const stateMachine = manager.getStateMachine()
        expect(stateMachine.getCurrentState()).toBe('default')
    })
})


# END FILE CONTENTS


# File: frontend/lib/config.ts

"use client"

/**
 * 前端配置管理
 * 集中管理所有可配置的設定項目
 */

/**
 * 音訊錄製配置
 */
export interface AudioConfig {
  chunkInterval: number // 音訊切片間隔（毫秒）
  mimeType: string // 音訊格式
  audioBitsPerSecond: number // 音訊位元率
}

/**
 * 應用程式配置
 */
export interface AppConfig {
  apiUrl: string
  wsUrl: string
  audio: AudioConfig
  isDevelopment: boolean
}

/**
 * 從環境變數獲取音訊切片間隔
 * 支援秒數和毫秒數兩種格式
 */
function getAudioChunkInterval(): number {
  // 優先使用毫秒格式的環境變數
  const intervalMs = process.env.NEXT_PUBLIC_AUDIO_CHUNK_INTERVAL_MS
  if (intervalMs) {
    const parsed = parseInt(intervalMs, 10)
    if (!isNaN(parsed) && parsed > 0) {
      return parsed
    }
  }

  // 其次使用秒數格式的環境變數
  const intervalSec = process.env.NEXT_PUBLIC_AUDIO_CHUNK_INTERVAL_SEC
  if (intervalSec) {
    const parsed = parseInt(intervalSec, 10)
    if (!isNaN(parsed) && parsed > 0) {
      return parsed * 1000 // 轉換為毫秒
    }
  }

  // 預設值：10秒
  return 10 * 1000
}

/**
 * 應用程式配置實例
 */
export const appConfig: AppConfig = {
  apiUrl: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000',
  wsUrl: process.env.NEXT_PUBLIC_WS_URL || 'ws://localhost:8000',
  isDevelopment: process.env.NODE_ENV === 'development',
  audio: {
    chunkInterval: getAudioChunkInterval(),
    mimeType: 'audio/webm;codecs=opus',
    audioBitsPerSecond: 64000  // 64 kbps for 10s chunks
  }
}

/**
 * 輔助函數：獲取音訊切片間隔（毫秒）
 */
export function getAudioChunkIntervalMs(): number {
  return appConfig.audio.chunkInterval
}

/**
 * 輔助函數：獲取音訊切片間隔（秒）
 */
export function getAudioChunkIntervalSec(): number {
  return Math.round(appConfig.audio.chunkInterval / 1000)
}

/**
 * 輔助函數：格式化音訊配置資訊
 */
export function getAudioConfigInfo(): string {
  const seconds = getAudioChunkIntervalSec()
  return `${seconds}秒切片 (${appConfig.audio.chunkInterval}ms)`
}

/**
 * 獲取應用程式配置
 */
export function getAppConfig(): AppConfig {
  return appConfig
}

/**
 * 開發模式診斷資訊
 */
export function getConfigInfo(): string {
  const config = getAppConfig()
  return `Config: API=${config.apiUrl}, WS=${config.wsUrl}, Dev=${config.isDevelopment}`
}

/**
 * 開發模式診斷：顯示當前配置
 */
if (appConfig.isDevelopment && typeof window !== 'undefined') {
  console.log('🔧 [Config] 音訊配置:', {
    chunkInterval: appConfig.audio.chunkInterval,
    chunkIntervalSec: getAudioChunkIntervalSec(),
    mimeType: appConfig.audio.mimeType,
    source: process.env.NEXT_PUBLIC_AUDIO_CHUNK_INTERVAL_MS ? 'MS' :
      process.env.NEXT_PUBLIC_AUDIO_CHUNK_INTERVAL_SEC ? 'SEC' : 'DEFAULT'
  })
}


# END FILE CONTENTS


# File: app/lib/rate_limit.py

# app/lib/rate_limit.py
import asyncio
import logging
from app.core.config import get_settings

logger = logging.getLogger(__name__)

class RateLimitHandler:
    def __init__(self):
        self._delay = 0
        logger.info("🚦 [RateLimitHandler] 頻率限制處理器已初始化")

    async def wait(self):
        if self._delay:
            logger.info(f"⏳ [RateLimitHandler] 等待 {self._delay}s 避免頻率限制")
            await asyncio.sleep(self._delay)

    def backoff(self):
        previous_delay = self._delay
        self._delay = min((self._delay or 5) * 2, 60)
        logger.warning(f"📈 [RateLimitHandler] 退避延遲：{previous_delay}s → {self._delay}s")

    def reset(self):
        if self._delay > 0:
            logger.info(f"✅ [RateLimitHandler] 重置延遲：{self._delay}s → 0s")
            self._delay = 0

class SlidingWindowRateLimiter:
    def __init__(self, max_requests: int = 3, window_seconds: int = 60):
        self.max_requests = max_requests
        self.window_seconds = window_seconds
        self.semaphore = asyncio.Semaphore(max_requests)
        self.active_requests = 0
        self.total_acquired = 0
        self.total_released = 0
        self._lock = asyncio.Lock()
        logger.info(f"🪟 [SlidingWindow] 初始化完成：{max_requests} requests/{window_seconds}s")

    async def acquire(self):
        await self.semaphore.acquire()
        async with self._lock:
            self.active_requests += 1
            self.total_acquired += 1
        loop = asyncio.get_event_loop()
        loop.call_later(self.window_seconds, self._release_permit)

    def _release_permit(self):
        self.semaphore.release()
        self.active_requests = max(0, self.active_requests - 1)
        self.total_released += 1

    async def wait(self):
        await self.acquire()

    def get_stats(self):
        return {
            'type': 'sliding_window',
            'max_requests': self.max_requests,
            'window_seconds': self.window_seconds,
            'active_requests': self.active_requests,
            'available_permits': self.max_requests - self.active_requests,
            'total_acquired': self.total_acquired,
            'total_released': self.total_released,
            'utilization_percent': (self.active_requests / self.max_requests) * 100 if self.max_requests > 0 else 0,
            'is_at_capacity': self.active_requests >= self.max_requests
        }

    def reset(self):
        self.total_acquired = 0
        self.total_released = 0

    def backoff(self):
        logger.warning(f"🚦 [SlidingWindow] 遇到 429 錯誤，滑動視窗將自動處理退避")

    @property
    def _delay(self):
        if self.active_requests >= self.max_requests:
            return max(1, self.window_seconds // 4)
        return 0


def get_rate_limit():
    s = get_settings()
    if getattr(s, "USE_SLIDING_WINDOW_RATE_LIMIT", False):
        if not hasattr(get_rate_limit, "_sliding_window"):
            get_rate_limit._sliding_window = SlidingWindowRateLimiter(
                max_requests=getattr(s, "SLIDING_WINDOW_MAX_REQUESTS", 3),
                window_seconds=getattr(s, "SLIDING_WINDOW_SECONDS", 60)
            )
        return get_rate_limit._sliding_window
    else:
        if not hasattr(get_rate_limit, "_handler"):
            get_rate_limit._handler = RateLimitHandler()
        return get_rate_limit._handler


# END FILE CONTENTS


# File: frontend/hooks/use-local-draft.ts

"use client"

import { useState, useCallback, useEffect, useRef, useMemo } from 'react'

interface DraftData {
    content: string;
}

interface UseLocalDraftReturn {
    draft: DraftData;
    hasDraft: boolean
    lastDraftTime: Date | null
    saveDraft: (data: Partial<DraftData>) => void
    loadDraft: () => DraftData | null
    clearDraft: () => void
    isDraftNewer: (serverTimestamp: Date) => boolean
}

const DRAFT_KEY = 'studyscriber_draft'

export function useLocalDraft(sessionId?: string): UseLocalDraftReturn {
    const [draft, setDraft] = useState<DraftData>({ content: '' })
    const [hasDraft, setHasDraft] = useState(false)
    const [lastDraftTime, setLastDraftTime] = useState<Date | null>(null)

    const autoSaveTimeoutRef = useRef<NodeJS.Timeout | null>(null)
    const currentSessionRef = useRef<string | undefined>(sessionId)

    // 更新 session ID
    useEffect(() => {
        currentSessionRef.current = sessionId
    }, [sessionId])

    // 清除自動儲存計時器
    const clearAutoSaveTimeout = useCallback(() => {
        if (autoSaveTimeoutRef.current) {
            clearTimeout(autoSaveTimeoutRef.current)
            autoSaveTimeoutRef.current = null
        }
    }, [])

    // 從 localStorage 載入草稿
    const loadDraft = useCallback((): DraftData | null => {
        try {
            const draftJson = localStorage.getItem(DRAFT_KEY)
            if (!draftJson) {
                setHasDraft(false)
                return null
            }

            const parsed = JSON.parse(draftJson)
            const draftData: DraftData = {
                content: parsed.content || ''
            }
            const timestamp = parsed.timestamp ? new Date(parsed.timestamp) : new Date()
            const storedSessionId = parsed.sessionId

            // 檢查草稿是否屬於當前會話（如果有指定會話）
            if (currentSessionRef.current && storedSessionId !== currentSessionRef.current) {
                console.log('📝 草稿屬於其他會話，不載入')
                return null
            }

            setDraft(draftData)
            setHasDraft(!!draftData.content.trim())
            setLastDraftTime(timestamp)

            console.log('📖 草稿已從本地載入')
            return draftData
        } catch (err) {
            console.error('❌ 載入草稿失敗:', err)
            return null
        }
    }, [])

    // 儲存草稿到 localStorage
    const saveDraft = useCallback((data: Partial<DraftData>) => {
        const now = new Date()

        // 取得目前的草稿內容，並與新的內容合併
        const currentDraft = { ...draft, ...data }

        if (!currentDraft.content.trim()) {
            // 空內容時清除草稿
            clearDraft()
            return
        }

        const draftDataToStore = {
            ...currentDraft,
            timestamp: now.toISOString(),
            sessionId: currentSessionRef.current || null,
        }

        try {
            localStorage.setItem(DRAFT_KEY, JSON.stringify(draftDataToStore))
            setDraft(currentDraft)
            setHasDraft(true)
            setLastDraftTime(now)

            console.log('💾 草稿已儲存到本地:', currentDraft)
        } catch (err) {
            console.error('❌ 儲存草稿失敗:', err)
        }
    }, [draft]) // 依賴 draft 狀態

    // 清除草稿
    const clearDraft = useCallback(() => {
        clearAutoSaveTimeout()
        try {
            localStorage.removeItem(DRAFT_KEY)

            const clearedDraft = { content: '' }
            setDraft(clearedDraft)
            setHasDraft(false)
            setLastDraftTime(null)

            console.log('🗑️ 草稿已清除')
        } catch (err) {
            console.error('❌ 清除草稿失敗:', err)
        }
    }, [clearAutoSaveTimeout])

    // 判斷草稿是否比伺服器版本更新
    const isDraftNewer = useCallback((serverTimestamp: Date): boolean => {
        if (!lastDraftTime || !hasDraft) {
            return false
        }
        return lastDraftTime > serverTimestamp
    }, [lastDraftTime, hasDraft])

    // 自動儲存草稿（使用防抖動）
    const autoSaveDraft = useCallback((data: Partial<DraftData>) => {
        clearAutoSaveTimeout()

        // 500ms 防抖動，避免過於頻繁的儲存
        autoSaveTimeoutRef.current = setTimeout(() => {
            saveDraft(data)
        }, 500)
    }, [saveDraft, clearAutoSaveTimeout])

    // 初始化時載入草稿
    useEffect(() => {
        loadDraft()
    }, [loadDraft])

    // 組件卸載時清理
    useEffect(() => {
        return () => {
            clearAutoSaveTimeout()
        }
    }, [clearAutoSaveTimeout])

    return useMemo(() => ({
        draft,
        hasDraft,
        lastDraftTime,
        saveDraft: autoSaveDraft, // 使用防抖版本
        loadDraft,
        clearDraft,
        isDraftNewer,
    }), [
        draft,
        hasDraft,
        lastDraftTime,
        autoSaveDraft,
        loadDraft,
        clearDraft,
        isDraftNewer,
    ])
}


# END FILE CONTENTS


# File: frontend/components/ui/alert.tsx

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }


# END FILE CONTENTS


# File: uv.lock

version = 1
revision = 2
requires-python = ">=3.12"
resolution-markers = [
    "python_full_version >= '3.13'",
    "python_full_version < '3.13'",
]

[[package]]
name = "aiofiles"
version = "24.1.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/0b/03/a88171e277e8caa88a4c77808c20ebb04ba74cc4681bf1e9416c862de237/aiofiles-24.1.0.tar.gz", hash = "sha256:22a075c9e5a3810f0c2e48f3008c94d68c65d763b9b03857924c99e57355166c", size = 30247, upload-time = "2024-06-24T11:02:03.584Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/a5/45/30bb92d442636f570cb5651bc661f52b610e2eec3f891a5dc3a4c3667db0/aiofiles-24.1.0-py3-none-any.whl", hash = "sha256:b4ec55f4195e3eb5d7abd1bf7e061763e864dd4954231fb8539a0ef8bb8260e5", size = 15896, upload-time = "2024-06-24T11:02:01.529Z" },
]

[[package]]
name = "aiohappyeyeballs"
version = "2.6.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/26/30/f84a107a9c4331c14b2b586036f40965c128aa4fee4dda5d3d51cb14ad54/aiohappyeyeballs-2.6.1.tar.gz", hash = "sha256:c3f9d0113123803ccadfdf3f0faa505bc78e6a72d1cc4806cbd719826e943558", size = 22760, upload-time = "2025-03-12T01:42:48.764Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/0f/15/5bf3b99495fb160b63f95972b81750f18f7f4e02ad051373b669d17d44f2/aiohappyeyeballs-2.6.1-py3-none-any.whl", hash = "sha256:f349ba8f4b75cb25c99c5c2d84e997e485204d2902a9597802b0371f09331fb8", size = 15265, upload-time = "2025-03-12T01:42:47.083Z" },
]

[[package]]
name = "aiohttp"
version = "3.12.13"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "aiohappyeyeballs" },
    { name = "aiosignal" },
    { name = "attrs" },
    { name = "frozenlist" },
    { name = "multidict" },
    { name = "propcache" },
    { name = "yarl" },
]
sdist = { url = "https://files.pythonhosted.org/packages/42/6e/ab88e7cb2a4058bed2f7870276454f85a7c56cd6da79349eb314fc7bbcaa/aiohttp-3.12.13.tar.gz", hash = "sha256:47e2da578528264a12e4e3dd8dd72a7289e5f812758fe086473fab037a10fcce", size = 7819160, upload-time = "2025-06-14T15:15:41.354Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/b4/6a/ce40e329788013cd190b1d62bbabb2b6a9673ecb6d836298635b939562ef/aiohttp-3.12.13-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:0aa580cf80558557285b49452151b9c69f2fa3ad94c5c9e76e684719a8791b73", size = 700491, upload-time = "2025-06-14T15:14:00.048Z" },
    { url = "https://files.pythonhosted.org/packages/28/d9/7150d5cf9163e05081f1c5c64a0cdf3c32d2f56e2ac95db2a28fe90eca69/aiohttp-3.12.13-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:b103a7e414b57e6939cc4dece8e282cfb22043efd0c7298044f6594cf83ab347", size = 475104, upload-time = "2025-06-14T15:14:01.691Z" },
    { url = "https://files.pythonhosted.org/packages/f8/91/d42ba4aed039ce6e449b3e2db694328756c152a79804e64e3da5bc19dffc/aiohttp-3.12.13-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:78f64e748e9e741d2eccff9597d09fb3cd962210e5b5716047cbb646dc8fe06f", size = 467948, upload-time = "2025-06-14T15:14:03.561Z" },
    { url = "https://files.pythonhosted.org/packages/99/3b/06f0a632775946981d7c4e5a865cddb6e8dfdbaed2f56f9ade7bb4a1039b/aiohttp-3.12.13-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:29c955989bf4c696d2ededc6b0ccb85a73623ae6e112439398935362bacfaaf6", size = 1714742, upload-time = "2025-06-14T15:14:05.558Z" },
    { url = "https://files.pythonhosted.org/packages/92/a6/2552eebad9ec5e3581a89256276009e6a974dc0793632796af144df8b740/aiohttp-3.12.13-cp312-cp312-manylinux_2_17_armv7l.manylinux2014_armv7l.manylinux_2_31_armv7l.whl", hash = "sha256:d640191016763fab76072c87d8854a19e8e65d7a6fcfcbf017926bdbbb30a7e5", size = 1697393, upload-time = "2025-06-14T15:14:07.194Z" },
    { url = "https://files.pythonhosted.org/packages/d8/9f/bd08fdde114b3fec7a021381b537b21920cdd2aa29ad48c5dffd8ee314f1/aiohttp-3.12.13-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:4dc507481266b410dede95dd9f26c8d6f5a14315372cc48a6e43eac652237d9b", size = 1752486, upload-time = "2025-06-14T15:14:08.808Z" },
    { url = "https://files.pythonhosted.org/packages/f7/e1/affdea8723aec5bd0959171b5490dccd9a91fcc505c8c26c9f1dca73474d/aiohttp-3.12.13-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:8a94daa873465d518db073bd95d75f14302e0208a08e8c942b2f3f1c07288a75", size = 1798643, upload-time = "2025-06-14T15:14:10.767Z" },
    { url = "https://files.pythonhosted.org/packages/f3/9d/666d856cc3af3a62ae86393baa3074cc1d591a47d89dc3bf16f6eb2c8d32/aiohttp-3.12.13-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:177f52420cde4ce0bb9425a375d95577fe082cb5721ecb61da3049b55189e4e6", size = 1718082, upload-time = "2025-06-14T15:14:12.38Z" },
    { url = "https://files.pythonhosted.org/packages/f3/ce/3c185293843d17be063dada45efd2712bb6bf6370b37104b4eda908ffdbd/aiohttp-3.12.13-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:0f7df1f620ec40f1a7fbcb99ea17d7326ea6996715e78f71a1c9a021e31b96b8", size = 1633884, upload-time = "2025-06-14T15:14:14.415Z" },
    { url = "https://files.pythonhosted.org/packages/3a/5b/f3413f4b238113be35dfd6794e65029250d4b93caa0974ca572217745bdb/aiohttp-3.12.13-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:3062d4ad53b36e17796dce1c0d6da0ad27a015c321e663657ba1cc7659cfc710", size = 1694943, upload-time = "2025-06-14T15:14:16.48Z" },
    { url = "https://files.pythonhosted.org/packages/82/c8/0e56e8bf12081faca85d14a6929ad5c1263c146149cd66caa7bc12255b6d/aiohttp-3.12.13-cp312-cp312-musllinux_1_2_armv7l.whl", hash = "sha256:8605e22d2a86b8e51ffb5253d9045ea73683d92d47c0b1438e11a359bdb94462", size = 1716398, upload-time = "2025-06-14T15:14:18.589Z" },
    { url = "https://files.pythonhosted.org/packages/ea/f3/33192b4761f7f9b2f7f4281365d925d663629cfaea093a64b658b94fc8e1/aiohttp-3.12.13-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:54fbbe6beafc2820de71ece2198458a711e224e116efefa01b7969f3e2b3ddae", size = 1657051, upload-time = "2025-06-14T15:14:20.223Z" },
    { url = "https://files.pythonhosted.org/packages/5e/0b/26ddd91ca8f84c48452431cb4c5dd9523b13bc0c9766bda468e072ac9e29/aiohttp-3.12.13-cp312-cp312-musllinux_1_2_ppc64le.whl", hash = "sha256:050bd277dfc3768b606fd4eae79dd58ceda67d8b0b3c565656a89ae34525d15e", size = 1736611, upload-time = "2025-06-14T15:14:21.988Z" },
    { url = "https://files.pythonhosted.org/packages/c3/8d/e04569aae853302648e2c138a680a6a2f02e374c5b6711732b29f1e129cc/aiohttp-3.12.13-cp312-cp312-musllinux_1_2_s390x.whl", hash = "sha256:2637a60910b58f50f22379b6797466c3aa6ae28a6ab6404e09175ce4955b4e6a", size = 1764586, upload-time = "2025-06-14T15:14:23.979Z" },
    { url = "https://files.pythonhosted.org/packages/ac/98/c193c1d1198571d988454e4ed75adc21c55af247a9fda08236602921c8c8/aiohttp-3.12.13-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:e986067357550d1aaa21cfe9897fa19e680110551518a5a7cf44e6c5638cb8b5", size = 1724197, upload-time = "2025-06-14T15:14:25.692Z" },
    { url = "https://files.pythonhosted.org/packages/e7/9e/07bb8aa11eec762c6b1ff61575eeeb2657df11ab3d3abfa528d95f3e9337/aiohttp-3.12.13-cp312-cp312-win32.whl", hash = "sha256:ac941a80aeea2aaae2875c9500861a3ba356f9ff17b9cb2dbfb5cbf91baaf5bf", size = 421771, upload-time = "2025-06-14T15:14:27.364Z" },
    { url = "https://files.pythonhosted.org/packages/52/66/3ce877e56ec0813069cdc9607cd979575859c597b6fb9b4182c6d5f31886/aiohttp-3.12.13-cp312-cp312-win_amd64.whl", hash = "sha256:671f41e6146a749b6c81cb7fd07f5a8356d46febdaaaf07b0e774ff04830461e", size = 447869, upload-time = "2025-06-14T15:14:29.05Z" },
    { url = "https://files.pythonhosted.org/packages/11/0f/db19abdf2d86aa1deec3c1e0e5ea46a587b97c07a16516b6438428b3a3f8/aiohttp-3.12.13-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:d4a18e61f271127465bdb0e8ff36e8f02ac4a32a80d8927aa52371e93cd87938", size = 694910, upload-time = "2025-06-14T15:14:30.604Z" },
    { url = "https://files.pythonhosted.org/packages/d5/81/0ab551e1b5d7f1339e2d6eb482456ccbe9025605b28eed2b1c0203aaaade/aiohttp-3.12.13-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:532542cb48691179455fab429cdb0d558b5e5290b033b87478f2aa6af5d20ace", size = 472566, upload-time = "2025-06-14T15:14:32.275Z" },
    { url = "https://files.pythonhosted.org/packages/34/3f/6b7d336663337672d29b1f82d1f252ec1a040fe2d548f709d3f90fa2218a/aiohttp-3.12.13-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:d7eea18b52f23c050ae9db5d01f3d264ab08f09e7356d6f68e3f3ac2de9dfabb", size = 464856, upload-time = "2025-06-14T15:14:34.132Z" },
    { url = "https://files.pythonhosted.org/packages/26/7f/32ca0f170496aa2ab9b812630fac0c2372c531b797e1deb3deb4cea904bd/aiohttp-3.12.13-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:ad7c8e5c25f2a26842a7c239de3f7b6bfb92304593ef997c04ac49fb703ff4d7", size = 1703683, upload-time = "2025-06-14T15:14:36.034Z" },
    { url = "https://files.pythonhosted.org/packages/ec/53/d5513624b33a811c0abea8461e30a732294112318276ce3dbf047dbd9d8b/aiohttp-3.12.13-cp313-cp313-manylinux_2_17_armv7l.manylinux2014_armv7l.manylinux_2_31_armv7l.whl", hash = "sha256:6af355b483e3fe9d7336d84539fef460120c2f6e50e06c658fe2907c69262d6b", size = 1684946, upload-time = "2025-06-14T15:14:38Z" },
    { url = "https://files.pythonhosted.org/packages/37/72/4c237dd127827b0247dc138d3ebd49c2ded6114c6991bbe969058575f25f/aiohttp-3.12.13-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:a95cf9f097498f35c88e3609f55bb47b28a5ef67f6888f4390b3d73e2bac6177", size = 1737017, upload-time = "2025-06-14T15:14:39.951Z" },
    { url = "https://files.pythonhosted.org/packages/0d/67/8a7eb3afa01e9d0acc26e1ef847c1a9111f8b42b82955fcd9faeb84edeb4/aiohttp-3.12.13-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:b8ed8c38a1c584fe99a475a8f60eefc0b682ea413a84c6ce769bb19a7ff1c5ef", size = 1786390, upload-time = "2025-06-14T15:14:42.151Z" },
    { url = "https://files.pythonhosted.org/packages/48/19/0377df97dd0176ad23cd8cad4fd4232cfeadcec6c1b7f036315305c98e3f/aiohttp-3.12.13-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:7a0b9170d5d800126b5bc89d3053a2363406d6e327afb6afaeda2d19ee8bb103", size = 1708719, upload-time = "2025-06-14T15:14:44.039Z" },
    { url = "https://files.pythonhosted.org/packages/61/97/ade1982a5c642b45f3622255173e40c3eed289c169f89d00eeac29a89906/aiohttp-3.12.13-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:372feeace612ef8eb41f05ae014a92121a512bd5067db8f25101dd88a8db11da", size = 1622424, upload-time = "2025-06-14T15:14:45.945Z" },
    { url = "https://files.pythonhosted.org/packages/99/ab/00ad3eea004e1d07ccc406e44cfe2b8da5acb72f8c66aeeb11a096798868/aiohttp-3.12.13-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:a946d3702f7965d81f7af7ea8fb03bb33fe53d311df48a46eeca17e9e0beed2d", size = 1675447, upload-time = "2025-06-14T15:14:47.911Z" },
    { url = "https://files.pythonhosted.org/packages/3f/fe/74e5ce8b2ccaba445fe0087abc201bfd7259431d92ae608f684fcac5d143/aiohttp-3.12.13-cp313-cp313-musllinux_1_2_armv7l.whl", hash = "sha256:a0c4725fae86555bbb1d4082129e21de7264f4ab14baf735278c974785cd2041", size = 1707110, upload-time = "2025-06-14T15:14:50.334Z" },
    { url = "https://files.pythonhosted.org/packages/ef/c4/39af17807f694f7a267bd8ab1fbacf16ad66740862192a6c8abac2bff813/aiohttp-3.12.13-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:9b28ea2f708234f0a5c44eb6c7d9eb63a148ce3252ba0140d050b091b6e842d1", size = 1649706, upload-time = "2025-06-14T15:14:52.378Z" },
    { url = "https://files.pythonhosted.org/packages/38/e8/f5a0a5f44f19f171d8477059aa5f28a158d7d57fe1a46c553e231f698435/aiohttp-3.12.13-cp313-cp313-musllinux_1_2_ppc64le.whl", hash = "sha256:d4f5becd2a5791829f79608c6f3dc745388162376f310eb9c142c985f9441cc1", size = 1725839, upload-time = "2025-06-14T15:14:54.617Z" },
    { url = "https://files.pythonhosted.org/packages/fd/ac/81acc594c7f529ef4419d3866913f628cd4fa9cab17f7bf410a5c3c04c53/aiohttp-3.12.13-cp313-cp313-musllinux_1_2_s390x.whl", hash = "sha256:60f2ce6b944e97649051d5f5cc0f439360690b73909230e107fd45a359d3e911", size = 1759311, upload-time = "2025-06-14T15:14:56.597Z" },
    { url = "https://files.pythonhosted.org/packages/38/0d/aabe636bd25c6ab7b18825e5a97d40024da75152bec39aa6ac8b7a677630/aiohttp-3.12.13-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:69fc1909857401b67bf599c793f2183fbc4804717388b0b888f27f9929aa41f3", size = 1708202, upload-time = "2025-06-14T15:14:58.598Z" },
    { url = "https://files.pythonhosted.org/packages/1f/ab/561ef2d8a223261683fb95a6283ad0d36cb66c87503f3a7dde7afe208bb2/aiohttp-3.12.13-cp313-cp313-win32.whl", hash = "sha256:7d7e68787a2046b0e44ba5587aa723ce05d711e3a3665b6b7545328ac8e3c0dd", size = 420794, upload-time = "2025-06-14T15:15:00.939Z" },
    { url = "https://files.pythonhosted.org/packages/9d/47/b11d0089875a23bff0abd3edb5516bcd454db3fefab8604f5e4b07bd6210/aiohttp-3.12.13-cp313-cp313-win_amd64.whl", hash = "sha256:5a178390ca90419bfd41419a809688c368e63c86bd725e1186dd97f6b89c2706", size = 446735, upload-time = "2025-06-14T15:15:02.858Z" },
]

[[package]]
name = "aiosignal"
version = "1.3.2"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "frozenlist" },
]
sdist = { url = "https://files.pythonhosted.org/packages/ba/b5/6d55e80f6d8a08ce22b982eafa278d823b541c925f11ee774b0b9c43473d/aiosignal-1.3.2.tar.gz", hash = "sha256:a8c255c66fafb1e499c9351d0bf32ff2d8a0321595ebac3b93713656d2436f54", size = 19424, upload-time = "2024-12-13T17:10:40.86Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/ec/6a/bc7e17a3e87a2985d3e8f4da4cd0f481060eb78fb08596c42be62c90a4d9/aiosignal-1.3.2-py2.py3-none-any.whl", hash = "sha256:45cde58e409a301715980c2b01d0c28bdde3770d8290b5eb2173759d9acb31a5", size = 7597, upload-time = "2024-12-13T17:10:38.469Z" },
]

[[package]]
name = "annotated-types"
version = "0.7.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/ee/67/531ea369ba64dcff5ec9c3402f9f51bf748cec26dde048a2f973a4eea7f5/annotated_types-0.7.0.tar.gz", hash = "sha256:aff07c09a53a08bc8cfccb9c85b05f1aa9a2a6f23728d790723543408344ce89", size = 16081, upload-time = "2024-05-20T21:33:25.928Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/78/b6/6307fbef88d9b5ee7421e68d78a9f162e0da4900bc5f5793f6d3d0e34fb8/annotated_types-0.7.0-py3-none-any.whl", hash = "sha256:1f02e8b43a8fbbc3f3e0d4f0f4bfc8131bcb4eebe8849b8e5c773f3a1c582a53", size = 13643, upload-time = "2024-05-20T21:33:24.1Z" },
]

[[package]]
name = "anyio"
version = "4.9.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "idna" },
    { name = "sniffio" },
    { name = "typing-extensions", marker = "python_full_version < '3.13'" },
]
sdist = { url = "https://files.pythonhosted.org/packages/95/7d/4c1bd541d4dffa1b52bd83fb8527089e097a106fc90b467a7313b105f840/anyio-4.9.0.tar.gz", hash = "sha256:673c0c244e15788651a4ff38710fea9675823028a6f08a5eda409e0c9840a028", size = 190949, upload-time = "2025-03-17T00:02:54.77Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/a1/ee/48ca1a7c89ffec8b6a0c5d02b89c305671d5ffd8d3c94acf8b8c408575bb/anyio-4.9.0-py3-none-any.whl", hash = "sha256:9f76d541cad6e36af7beb62e978876f3b41e3e04f2c1fbf0884604c0a9c4d93c", size = 100916, upload-time = "2025-03-17T00:02:52.713Z" },
]

[[package]]
name = "attrs"
version = "25.3.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/5a/b0/1367933a8532ee6ff8d63537de4f1177af4bff9f3e829baf7331f595bb24/attrs-25.3.0.tar.gz", hash = "sha256:75d7cefc7fb576747b2c81b4442d4d4a1ce0900973527c011d1030fd3bf4af1b", size = 812032, upload-time = "2025-03-13T11:10:22.779Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/77/06/bb80f5f86020c4551da315d78b3ab75e8228f89f0162f2c3a819e407941a/attrs-25.3.0-py3-none-any.whl", hash = "sha256:427318ce031701fea540783410126f03899a97ffc6f61596ad581ac2e40e3bc3", size = 63815, upload-time = "2025-03-13T11:10:21.14Z" },
]

[[package]]
name = "cachetools"
version = "5.5.2"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/6c/81/3747dad6b14fa2cf53fcf10548cf5aea6913e96fab41a3c198676f8948a5/cachetools-5.5.2.tar.gz", hash = "sha256:1a661caa9175d26759571b2e19580f9d6393969e5dfca11fdb1f947a23e640d4", size = 28380, upload-time = "2025-02-20T21:01:19.524Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/72/76/20fa66124dbe6be5cafeb312ece67de6b61dd91a0247d1ea13db4ebb33c2/cachetools-5.5.2-py3-none-any.whl", hash = "sha256:d26a22bcc62eb95c3beabd9f1ee5e820d3d2704fe2967cbe350e20c8ffcd3f0a", size = 10080, upload-time = "2025-02-20T21:01:16.647Z" },
]

[[package]]
name = "certifi"
version = "2025.6.15"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/73/f7/f14b46d4bcd21092d7d3ccef689615220d8a08fb25e564b65d20738e672e/certifi-2025.6.15.tar.gz", hash = "sha256:d747aa5a8b9bbbb1bb8c22bb13e22bd1f18e9796defa16bab421f7f7a317323b", size = 158753, upload-time = "2025-06-15T02:45:51.329Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/84/ae/320161bd181fc06471eed047ecce67b693fd7515b16d495d8932db763426/certifi-2025.6.15-py3-none-any.whl", hash = "sha256:2e0c7ce7cb5d8f8634ca55d2ba7e6ec2689a2fd6537d8dec1296a477a4910057", size = 157650, upload-time = "2025-06-15T02:45:49.977Z" },
]

[[package]]
name = "charset-normalizer"
version = "3.4.2"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/e4/33/89c2ced2b67d1c2a61c19c6751aa8902d46ce3dacb23600a283619f5a12d/charset_normalizer-3.4.2.tar.gz", hash = "sha256:5baececa9ecba31eff645232d59845c07aa030f0c81ee70184a90d35099a0e63", size = 126367, upload-time = "2025-05-02T08:34:42.01Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d7/a4/37f4d6035c89cac7930395a35cc0f1b872e652eaafb76a6075943754f095/charset_normalizer-3.4.2-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:0c29de6a1a95f24b9a1aa7aefd27d2487263f00dfd55a77719b530788f75cff7", size = 199936, upload-time = "2025-05-02T08:32:33.712Z" },
    { url = "https://files.pythonhosted.org/packages/ee/8a/1a5e33b73e0d9287274f899d967907cd0bf9c343e651755d9307e0dbf2b3/charset_normalizer-3.4.2-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:cddf7bd982eaa998934a91f69d182aec997c6c468898efe6679af88283b498d3", size = 143790, upload-time = "2025-05-02T08:32:35.768Z" },
    { url = "https://files.pythonhosted.org/packages/66/52/59521f1d8e6ab1482164fa21409c5ef44da3e9f653c13ba71becdd98dec3/charset_normalizer-3.4.2-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:fcbe676a55d7445b22c10967bceaaf0ee69407fbe0ece4d032b6eb8d4565982a", size = 153924, upload-time = "2025-05-02T08:32:37.284Z" },
    { url = "https://files.pythonhosted.org/packages/86/2d/fb55fdf41964ec782febbf33cb64be480a6b8f16ded2dbe8db27a405c09f/charset_normalizer-3.4.2-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:d41c4d287cfc69060fa91cae9683eacffad989f1a10811995fa309df656ec214", size = 146626, upload-time = "2025-05-02T08:32:38.803Z" },
    { url = "https://files.pythonhosted.org/packages/8c/73/6ede2ec59bce19b3edf4209d70004253ec5f4e319f9a2e3f2f15601ed5f7/charset_normalizer-3.4.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:4e594135de17ab3866138f496755f302b72157d115086d100c3f19370839dd3a", size = 148567, upload-time = "2025-05-02T08:32:40.251Z" },
    { url = "https://files.pythonhosted.org/packages/09/14/957d03c6dc343c04904530b6bef4e5efae5ec7d7990a7cbb868e4595ee30/charset_normalizer-3.4.2-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:cf713fe9a71ef6fd5adf7a79670135081cd4431c2943864757f0fa3a65b1fafd", size = 150957, upload-time = "2025-05-02T08:32:41.705Z" },
    { url = "https://files.pythonhosted.org/packages/0d/c8/8174d0e5c10ccebdcb1b53cc959591c4c722a3ad92461a273e86b9f5a302/charset_normalizer-3.4.2-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:a370b3e078e418187da8c3674eddb9d983ec09445c99a3a263c2011993522981", size = 145408, upload-time = "2025-05-02T08:32:43.709Z" },
    { url = "https://files.pythonhosted.org/packages/58/aa/8904b84bc8084ac19dc52feb4f5952c6df03ffb460a887b42615ee1382e8/charset_normalizer-3.4.2-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:a955b438e62efdf7e0b7b52a64dc5c3396e2634baa62471768a64bc2adb73d5c", size = 153399, upload-time = "2025-05-02T08:32:46.197Z" },
    { url = "https://files.pythonhosted.org/packages/c2/26/89ee1f0e264d201cb65cf054aca6038c03b1a0c6b4ae998070392a3ce605/charset_normalizer-3.4.2-cp312-cp312-musllinux_1_2_ppc64le.whl", hash = "sha256:7222ffd5e4de8e57e03ce2cef95a4c43c98fcb72ad86909abdfc2c17d227fc1b", size = 156815, upload-time = "2025-05-02T08:32:48.105Z" },
    { url = "https://files.pythonhosted.org/packages/fd/07/68e95b4b345bad3dbbd3a8681737b4338ff2c9df29856a6d6d23ac4c73cb/charset_normalizer-3.4.2-cp312-cp312-musllinux_1_2_s390x.whl", hash = "sha256:bee093bf902e1d8fc0ac143c88902c3dfc8941f7ea1d6a8dd2bcb786d33db03d", size = 154537, upload-time = "2025-05-02T08:32:49.719Z" },
    { url = "https://files.pythonhosted.org/packages/77/1a/5eefc0ce04affb98af07bc05f3bac9094513c0e23b0562d64af46a06aae4/charset_normalizer-3.4.2-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:dedb8adb91d11846ee08bec4c8236c8549ac721c245678282dcb06b221aab59f", size = 149565, upload-time = "2025-05-02T08:32:51.404Z" },
    { url = "https://files.pythonhosted.org/packages/37/a0/2410e5e6032a174c95e0806b1a6585eb21e12f445ebe239fac441995226a/charset_normalizer-3.4.2-cp312-cp312-win32.whl", hash = "sha256:db4c7bf0e07fc3b7d89ac2a5880a6a8062056801b83ff56d8464b70f65482b6c", size = 98357, upload-time = "2025-05-02T08:32:53.079Z" },
    { url = "https://files.pythonhosted.org/packages/6c/4f/c02d5c493967af3eda9c771ad4d2bbc8df6f99ddbeb37ceea6e8716a32bc/charset_normalizer-3.4.2-cp312-cp312-win_amd64.whl", hash = "sha256:5a9979887252a82fefd3d3ed2a8e3b937a7a809f65dcb1e068b090e165bbe99e", size = 105776, upload-time = "2025-05-02T08:32:54.573Z" },
    { url = "https://files.pythonhosted.org/packages/ea/12/a93df3366ed32db1d907d7593a94f1fe6293903e3e92967bebd6950ed12c/charset_normalizer-3.4.2-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:926ca93accd5d36ccdabd803392ddc3e03e6d4cd1cf17deff3b989ab8e9dbcf0", size = 199622, upload-time = "2025-05-02T08:32:56.363Z" },
    { url = "https://files.pythonhosted.org/packages/04/93/bf204e6f344c39d9937d3c13c8cd5bbfc266472e51fc8c07cb7f64fcd2de/charset_normalizer-3.4.2-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:eba9904b0f38a143592d9fc0e19e2df0fa2e41c3c3745554761c5f6447eedabf", size = 143435, upload-time = "2025-05-02T08:32:58.551Z" },
    { url = "https://files.pythonhosted.org/packages/22/2a/ea8a2095b0bafa6c5b5a55ffdc2f924455233ee7b91c69b7edfcc9e02284/charset_normalizer-3.4.2-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:3fddb7e2c84ac87ac3a947cb4e66d143ca5863ef48e4a5ecb83bd48619e4634e", size = 153653, upload-time = "2025-05-02T08:33:00.342Z" },
    { url = "https://files.pythonhosted.org/packages/b6/57/1b090ff183d13cef485dfbe272e2fe57622a76694061353c59da52c9a659/charset_normalizer-3.4.2-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:98f862da73774290f251b9df8d11161b6cf25b599a66baf087c1ffe340e9bfd1", size = 146231, upload-time = "2025-05-02T08:33:02.081Z" },
    { url = "https://files.pythonhosted.org/packages/e2/28/ffc026b26f441fc67bd21ab7f03b313ab3fe46714a14b516f931abe1a2d8/charset_normalizer-3.4.2-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:6c9379d65defcab82d07b2a9dfbfc2e95bc8fe0ebb1b176a3190230a3ef0e07c", size = 148243, upload-time = "2025-05-02T08:33:04.063Z" },
    { url = "https://files.pythonhosted.org/packages/c0/0f/9abe9bd191629c33e69e47c6ef45ef99773320e9ad8e9cb08b8ab4a8d4cb/charset_normalizer-3.4.2-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:e635b87f01ebc977342e2697d05b56632f5f879a4f15955dfe8cef2448b51691", size = 150442, upload-time = "2025-05-02T08:33:06.418Z" },
    { url = "https://files.pythonhosted.org/packages/67/7c/a123bbcedca91d5916c056407f89a7f5e8fdfce12ba825d7d6b9954a1a3c/charset_normalizer-3.4.2-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:1c95a1e2902a8b722868587c0e1184ad5c55631de5afc0eb96bc4b0d738092c0", size = 145147, upload-time = "2025-05-02T08:33:08.183Z" },
    { url = "https://files.pythonhosted.org/packages/ec/fe/1ac556fa4899d967b83e9893788e86b6af4d83e4726511eaaad035e36595/charset_normalizer-3.4.2-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:ef8de666d6179b009dce7bcb2ad4c4a779f113f12caf8dc77f0162c29d20490b", size = 153057, upload-time = "2025-05-02T08:33:09.986Z" },
    { url = "https://files.pythonhosted.org/packages/2b/ff/acfc0b0a70b19e3e54febdd5301a98b72fa07635e56f24f60502e954c461/charset_normalizer-3.4.2-cp313-cp313-musllinux_1_2_ppc64le.whl", hash = "sha256:32fc0341d72e0f73f80acb0a2c94216bd704f4f0bce10aedea38f30502b271ff", size = 156454, upload-time = "2025-05-02T08:33:11.814Z" },
    { url = "https://files.pythonhosted.org/packages/92/08/95b458ce9c740d0645feb0e96cea1f5ec946ea9c580a94adfe0b617f3573/charset_normalizer-3.4.2-cp313-cp313-musllinux_1_2_s390x.whl", hash = "sha256:289200a18fa698949d2b39c671c2cc7a24d44096784e76614899a7ccf2574b7b", size = 154174, upload-time = "2025-05-02T08:33:13.707Z" },
    { url = "https://files.pythonhosted.org/packages/78/be/8392efc43487ac051eee6c36d5fbd63032d78f7728cb37aebcc98191f1ff/charset_normalizer-3.4.2-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:4a476b06fbcf359ad25d34a057b7219281286ae2477cc5ff5e3f70a246971148", size = 149166, upload-time = "2025-05-02T08:33:15.458Z" },
    { url = "https://files.pythonhosted.org/packages/44/96/392abd49b094d30b91d9fbda6a69519e95802250b777841cf3bda8fe136c/charset_normalizer-3.4.2-cp313-cp313-win32.whl", hash = "sha256:aaeeb6a479c7667fbe1099af9617c83aaca22182d6cf8c53966491a0f1b7ffb7", size = 98064, upload-time = "2025-05-02T08:33:17.06Z" },
    { url = "https://files.pythonhosted.org/packages/e9/b0/0200da600134e001d91851ddc797809e2fe0ea72de90e09bec5a2fbdaccb/charset_normalizer-3.4.2-cp313-cp313-win_amd64.whl", hash = "sha256:aa6af9e7d59f9c12b33ae4e9450619cf2488e2bbe9b44030905877f0b2324980", size = 105641, upload-time = "2025-05-02T08:33:18.753Z" },
    { url = "https://files.pythonhosted.org/packages/20/94/c5790835a017658cbfabd07f3bfb549140c3ac458cfc196323996b10095a/charset_normalizer-3.4.2-py3-none-any.whl", hash = "sha256:7f56930ab0abd1c45cd15be65cc741c28b1c9a34876ce8c17a2fa107810c0af0", size = 52626, upload-time = "2025-05-02T08:34:40.053Z" },
]

[[package]]
name = "click"
version = "8.2.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "colorama", marker = "sys_platform == 'win32'" },
]
sdist = { url = "https://files.pythonhosted.org/packages/60/6c/8ca2efa64cf75a977a0d7fac081354553ebe483345c734fb6b6515d96bbc/click-8.2.1.tar.gz", hash = "sha256:27c491cc05d968d271d5a1db13e3b5a184636d9d930f148c50b038f0d0646202", size = 286342, upload-time = "2025-05-20T23:19:49.832Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/85/32/10bb5764d90a8eee674e9dc6f4db6a0ab47c8c4d0d83c27f7c39ac415a4d/click-8.2.1-py3-none-any.whl", hash = "sha256:61a3265b914e850b85317d0b3109c7f8cd35a670f963866005d6ef1d5175a12b", size = 102215, upload-time = "2025-05-20T23:19:47.796Z" },
]

[[package]]
name = "colorama"
version = "0.4.6"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/d8/53/6f443c9a4a8358a93a6792e2acffb9d9d5cb0a5cfd8802644b7b1c9a02e4/colorama-0.4.6.tar.gz", hash = "sha256:08695f5cb7ed6e0531a20572697297273c47b8cae5a63ffc6d6ed5c201be6e44", size = 27697, upload-time = "2022-10-25T02:36:22.414Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d1/d6/3965ed04c63042e047cb6a3e6ed1a63a35087b6a609aa3a15ed8ac56c221/colorama-0.4.6-py2.py3-none-any.whl", hash = "sha256:4f1d9991f5acc0ca119f9d443620b77f9d6b33703e51011c16baf57afb285fc6", size = 25335, upload-time = "2022-10-25T02:36:20.889Z" },
]

[[package]]
name = "coverage"
version = "7.9.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/e7/e0/98670a80884f64578f0c22cd70c5e81a6e07b08167721c7487b4d70a7ca0/coverage-7.9.1.tar.gz", hash = "sha256:6cf43c78c4282708a28e466316935ec7489a9c487518a77fa68f716c67909cec", size = 813650, upload-time = "2025-06-13T13:02:28.627Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/68/d9/7f66eb0a8f2fce222de7bdc2046ec41cb31fe33fb55a330037833fb88afc/coverage-7.9.1-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:a8de12b4b87c20de895f10567639c0797b621b22897b0af3ce4b4e204a743626", size = 212336, upload-time = "2025-06-13T13:01:10.909Z" },
    { url = "https://files.pythonhosted.org/packages/20/20/e07cb920ef3addf20f052ee3d54906e57407b6aeee3227a9c91eea38a665/coverage-7.9.1-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:5add197315a054e92cee1b5f686a2bcba60c4c3e66ee3de77ace6c867bdee7cb", size = 212571, upload-time = "2025-06-13T13:01:12.518Z" },
    { url = "https://files.pythonhosted.org/packages/78/f8/96f155de7e9e248ca9c8ff1a40a521d944ba48bec65352da9be2463745bf/coverage-7.9.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:600a1d4106fe66f41e5d0136dfbc68fe7200a5cbe85610ddf094f8f22e1b0300", size = 246377, upload-time = "2025-06-13T13:01:14.87Z" },
    { url = "https://files.pythonhosted.org/packages/3e/cf/1d783bd05b7bca5c10ded5f946068909372e94615a4416afadfe3f63492d/coverage-7.9.1-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:2a876e4c3e5a2a1715a6608906aa5a2e0475b9c0f68343c2ada98110512ab1d8", size = 243394, upload-time = "2025-06-13T13:01:16.23Z" },
    { url = "https://files.pythonhosted.org/packages/02/dd/e7b20afd35b0a1abea09fb3998e1abc9f9bd953bee548f235aebd2b11401/coverage-7.9.1-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:81f34346dd63010453922c8e628a52ea2d2ccd73cb2487f7700ac531b247c8a5", size = 245586, upload-time = "2025-06-13T13:01:17.532Z" },
    { url = "https://files.pythonhosted.org/packages/4e/38/b30b0006fea9d617d1cb8e43b1bc9a96af11eff42b87eb8c716cf4d37469/coverage-7.9.1-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:888f8eee13f2377ce86d44f338968eedec3291876b0b8a7289247ba52cb984cd", size = 245396, upload-time = "2025-06-13T13:01:19.164Z" },
    { url = "https://files.pythonhosted.org/packages/31/e4/4d8ec1dc826e16791f3daf1b50943e8e7e1eb70e8efa7abb03936ff48418/coverage-7.9.1-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:9969ef1e69b8c8e1e70d591f91bbc37fc9a3621e447525d1602801a24ceda898", size = 243577, upload-time = "2025-06-13T13:01:22.433Z" },
    { url = "https://files.pythonhosted.org/packages/25/f4/b0e96c5c38e6e40ef465c4bc7f138863e2909c00e54a331da335faf0d81a/coverage-7.9.1-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:60c458224331ee3f1a5b472773e4a085cc27a86a0b48205409d364272d67140d", size = 244809, upload-time = "2025-06-13T13:01:24.143Z" },
    { url = "https://files.pythonhosted.org/packages/8a/65/27e0a1fa5e2e5079bdca4521be2f5dabf516f94e29a0defed35ac2382eb2/coverage-7.9.1-cp312-cp312-win32.whl", hash = "sha256:5f646a99a8c2b3ff4c6a6e081f78fad0dde275cd59f8f49dc4eab2e394332e74", size = 214724, upload-time = "2025-06-13T13:01:25.435Z" },
    { url = "https://files.pythonhosted.org/packages/9b/a8/d5b128633fd1a5e0401a4160d02fa15986209a9e47717174f99dc2f7166d/coverage-7.9.1-cp312-cp312-win_amd64.whl", hash = "sha256:30f445f85c353090b83e552dcbbdad3ec84c7967e108c3ae54556ca69955563e", size = 215535, upload-time = "2025-06-13T13:01:27.861Z" },
    { url = "https://files.pythonhosted.org/packages/a3/37/84bba9d2afabc3611f3e4325ee2c6a47cd449b580d4a606b240ce5a6f9bf/coverage-7.9.1-cp312-cp312-win_arm64.whl", hash = "sha256:af41da5dca398d3474129c58cb2b106a5d93bbb196be0d307ac82311ca234342", size = 213904, upload-time = "2025-06-13T13:01:29.202Z" },
    { url = "https://files.pythonhosted.org/packages/d0/a7/a027970c991ca90f24e968999f7d509332daf6b8c3533d68633930aaebac/coverage-7.9.1-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:31324f18d5969feef7344a932c32428a2d1a3e50b15a6404e97cba1cc9b2c631", size = 212358, upload-time = "2025-06-13T13:01:30.909Z" },
    { url = "https://files.pythonhosted.org/packages/f2/48/6aaed3651ae83b231556750280682528fea8ac7f1232834573472d83e459/coverage-7.9.1-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:0c804506d624e8a20fb3108764c52e0eef664e29d21692afa375e0dd98dc384f", size = 212620, upload-time = "2025-06-13T13:01:32.256Z" },
    { url = "https://files.pythonhosted.org/packages/6c/2a/f4b613f3b44d8b9f144847c89151992b2b6b79cbc506dee89ad0c35f209d/coverage-7.9.1-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:ef64c27bc40189f36fcc50c3fb8f16ccda73b6a0b80d9bd6e6ce4cffcd810bbd", size = 245788, upload-time = "2025-06-13T13:01:33.948Z" },
    { url = "https://files.pythonhosted.org/packages/04/d2/de4fdc03af5e4e035ef420ed26a703c6ad3d7a07aff2e959eb84e3b19ca8/coverage-7.9.1-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:d4fe2348cc6ec372e25adec0219ee2334a68d2f5222e0cba9c0d613394e12d86", size = 243001, upload-time = "2025-06-13T13:01:35.285Z" },
    { url = "https://files.pythonhosted.org/packages/f5/e8/eed18aa5583b0423ab7f04e34659e51101135c41cd1dcb33ac1d7013a6d6/coverage-7.9.1-cp313-cp313-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:34ed2186fe52fcc24d4561041979a0dec69adae7bce2ae8d1c49eace13e55c43", size = 244985, upload-time = "2025-06-13T13:01:36.712Z" },
    { url = "https://files.pythonhosted.org/packages/17/f8/ae9e5cce8885728c934eaa58ebfa8281d488ef2afa81c3dbc8ee9e6d80db/coverage-7.9.1-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:25308bd3d00d5eedd5ae7d4357161f4df743e3c0240fa773ee1b0f75e6c7c0f1", size = 245152, upload-time = "2025-06-13T13:01:39.303Z" },
    { url = "https://files.pythonhosted.org/packages/5a/c8/272c01ae792bb3af9b30fac14d71d63371db227980682836ec388e2c57c0/coverage-7.9.1-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:73e9439310f65d55a5a1e0564b48e34f5369bee943d72c88378f2d576f5a5751", size = 243123, upload-time = "2025-06-13T13:01:40.727Z" },
    { url = "https://files.pythonhosted.org/packages/8c/d0/2819a1e3086143c094ab446e3bdf07138527a7b88cb235c488e78150ba7a/coverage-7.9.1-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:37ab6be0859141b53aa89412a82454b482c81cf750de4f29223d52268a86de67", size = 244506, upload-time = "2025-06-13T13:01:42.184Z" },
    { url = "https://files.pythonhosted.org/packages/8b/4e/9f6117b89152df7b6112f65c7a4ed1f2f5ec8e60c4be8f351d91e7acc848/coverage-7.9.1-cp313-cp313-win32.whl", hash = "sha256:64bdd969456e2d02a8b08aa047a92d269c7ac1f47e0c977675d550c9a0863643", size = 214766, upload-time = "2025-06-13T13:01:44.482Z" },
    { url = "https://files.pythonhosted.org/packages/27/0f/4b59f7c93b52c2c4ce7387c5a4e135e49891bb3b7408dcc98fe44033bbe0/coverage-7.9.1-cp313-cp313-win_amd64.whl", hash = "sha256:be9e3f68ca9edb897c2184ad0eee815c635565dbe7a0e7e814dc1f7cbab92c0a", size = 215568, upload-time = "2025-06-13T13:01:45.772Z" },
    { url = "https://files.pythonhosted.org/packages/09/1e/9679826336f8c67b9c39a359352882b24a8a7aee48d4c9cad08d38d7510f/coverage-7.9.1-cp313-cp313-win_arm64.whl", hash = "sha256:1c503289ffef1d5105d91bbb4d62cbe4b14bec4d13ca225f9c73cde9bb46207d", size = 213939, upload-time = "2025-06-13T13:01:47.087Z" },
    { url = "https://files.pythonhosted.org/packages/bb/5b/5c6b4e7a407359a2e3b27bf9c8a7b658127975def62077d441b93a30dbe8/coverage-7.9.1-cp313-cp313t-macosx_10_13_x86_64.whl", hash = "sha256:0b3496922cb5f4215bf5caaef4cf12364a26b0be82e9ed6d050f3352cf2d7ef0", size = 213079, upload-time = "2025-06-13T13:01:48.554Z" },
    { url = "https://files.pythonhosted.org/packages/a2/22/1e2e07279fd2fd97ae26c01cc2186e2258850e9ec125ae87184225662e89/coverage-7.9.1-cp313-cp313t-macosx_11_0_arm64.whl", hash = "sha256:9565c3ab1c93310569ec0d86b017f128f027cab0b622b7af288696d7ed43a16d", size = 213299, upload-time = "2025-06-13T13:01:49.997Z" },
    { url = "https://files.pythonhosted.org/packages/14/c0/4c5125a4b69d66b8c85986d3321520f628756cf524af810baab0790c7647/coverage-7.9.1-cp313-cp313t-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:2241ad5dbf79ae1d9c08fe52b36d03ca122fb9ac6bca0f34439e99f8327ac89f", size = 256535, upload-time = "2025-06-13T13:01:51.314Z" },
    { url = "https://files.pythonhosted.org/packages/81/8b/e36a04889dda9960be4263e95e777e7b46f1bb4fc32202612c130a20c4da/coverage-7.9.1-cp313-cp313t-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:3bb5838701ca68b10ebc0937dbd0eb81974bac54447c55cd58dea5bca8451029", size = 252756, upload-time = "2025-06-13T13:01:54.403Z" },
    { url = "https://files.pythonhosted.org/packages/98/82/be04eff8083a09a4622ecd0e1f31a2c563dbea3ed848069e7b0445043a70/coverage-7.9.1-cp313-cp313t-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:b30a25f814591a8c0c5372c11ac8967f669b97444c47fd794926e175c4047ece", size = 254912, upload-time = "2025-06-13T13:01:56.769Z" },
    { url = "https://files.pythonhosted.org/packages/0f/25/c26610a2c7f018508a5ab958e5b3202d900422cf7cdca7670b6b8ca4e8df/coverage-7.9.1-cp313-cp313t-musllinux_1_2_aarch64.whl", hash = "sha256:2d04b16a6062516df97969f1ae7efd0de9c31eb6ebdceaa0d213b21c0ca1a683", size = 256144, upload-time = "2025-06-13T13:01:58.19Z" },
    { url = "https://files.pythonhosted.org/packages/c5/8b/fb9425c4684066c79e863f1e6e7ecebb49e3a64d9f7f7860ef1688c56f4a/coverage-7.9.1-cp313-cp313t-musllinux_1_2_i686.whl", hash = "sha256:7931b9e249edefb07cd6ae10c702788546341d5fe44db5b6108a25da4dca513f", size = 254257, upload-time = "2025-06-13T13:01:59.645Z" },
    { url = "https://files.pythonhosted.org/packages/93/df/27b882f54157fc1131e0e215b0da3b8d608d9b8ef79a045280118a8f98fe/coverage-7.9.1-cp313-cp313t-musllinux_1_2_x86_64.whl", hash = "sha256:52e92b01041151bf607ee858e5a56c62d4b70f4dac85b8c8cb7fb8a351ab2c10", size = 255094, upload-time = "2025-06-13T13:02:01.37Z" },
    { url = "https://files.pythonhosted.org/packages/41/5f/cad1c3dbed8b3ee9e16fa832afe365b4e3eeab1fb6edb65ebbf745eabc92/coverage-7.9.1-cp313-cp313t-win32.whl", hash = "sha256:684e2110ed84fd1ca5f40e89aa44adf1729dc85444004111aa01866507adf363", size = 215437, upload-time = "2025-06-13T13:02:02.905Z" },
    { url = "https://files.pythonhosted.org/packages/99/4d/fad293bf081c0e43331ca745ff63673badc20afea2104b431cdd8c278b4c/coverage-7.9.1-cp313-cp313t-win_amd64.whl", hash = "sha256:437c576979e4db840539674e68c84b3cda82bc824dd138d56bead1435f1cb5d7", size = 216605, upload-time = "2025-06-13T13:02:05.638Z" },
    { url = "https://files.pythonhosted.org/packages/1f/56/4ee027d5965fc7fc126d7ec1187529cc30cc7d740846e1ecb5e92d31b224/coverage-7.9.1-cp313-cp313t-win_arm64.whl", hash = "sha256:18a0912944d70aaf5f399e350445738a1a20b50fbea788f640751c2ed9208b6c", size = 214392, upload-time = "2025-06-13T13:02:07.642Z" },
    { url = "https://files.pythonhosted.org/packages/08/b8/7ddd1e8ba9701dea08ce22029917140e6f66a859427406579fd8d0ca7274/coverage-7.9.1-py3-none-any.whl", hash = "sha256:66b974b145aa189516b6bf2d8423e888b742517d37872f6ee4c5be0073bd9a3c", size = 204000, upload-time = "2025-06-13T13:02:27.173Z" },
]

[[package]]
name = "deprecation"
version = "2.1.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "packaging" },
]
sdist = { url = "https://files.pythonhosted.org/packages/5a/d3/8ae2869247df154b64c1884d7346d412fed0c49df84db635aab2d1c40e62/deprecation-2.1.0.tar.gz", hash = "sha256:72b3bde64e5d778694b0cf68178aed03d15e15477116add3fb773e581f9518ff", size = 173788, upload-time = "2020-04-20T14:23:38.738Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/02/c3/253a89ee03fc9b9682f1541728eb66db7db22148cd94f89ab22528cd1e1b/deprecation-2.1.0-py2.py3-none-any.whl", hash = "sha256:a10811591210e1fb0e768a8c25517cabeabcba6f0bf96564f8ff45189f90b14a", size = 11178, upload-time = "2020-04-20T14:23:36.581Z" },
]

[[package]]
name = "distro"
version = "1.9.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/fc/f8/98eea607f65de6527f8a2e8885fc8015d3e6f5775df186e443e0964a11c3/distro-1.9.0.tar.gz", hash = "sha256:2fa77c6fd8940f116ee1d6b94a2f90b13b5ea8d019b98bc8bafdcabcdd9bdbed", size = 60722, upload-time = "2023-12-24T09:54:32.31Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/12/b3/231ffd4ab1fc9d679809f356cebee130ac7daa00d6d6f3206dd4fd137e9e/distro-1.9.0-py3-none-any.whl", hash = "sha256:7bffd925d65168f85027d8da9af6bddab658135b840670a223589bc0c8ef02b2", size = 20277, upload-time = "2023-12-24T09:54:30.421Z" },
]

[[package]]
name = "fastapi"
version = "0.115.14"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "pydantic" },
    { name = "starlette" },
    { name = "typing-extensions" },
]
sdist = { url = "https://files.pythonhosted.org/packages/ca/53/8c38a874844a8b0fa10dd8adf3836ac154082cf88d3f22b544e9ceea0a15/fastapi-0.115.14.tar.gz", hash = "sha256:b1de15cdc1c499a4da47914db35d0e4ef8f1ce62b624e94e0e5824421df99739", size = 296263, upload-time = "2025-06-26T15:29:08.21Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/53/50/b1222562c6d270fea83e9c9075b8e8600b8479150a18e4516a6138b980d1/fastapi-0.115.14-py3-none-any.whl", hash = "sha256:6c0c8bf9420bd58f565e585036d971872472b4f7d3f6c73b698e10cffdefb3ca", size = 95514, upload-time = "2025-06-26T15:29:06.49Z" },
]

[[package]]
name = "frozenlist"
version = "1.7.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/79/b1/b64018016eeb087db503b038296fd782586432b9c077fc5c7839e9cb6ef6/frozenlist-1.7.0.tar.gz", hash = "sha256:2e310d81923c2437ea8670467121cc3e9b0f76d3043cc1d2331d56c7fb7a3a8f", size = 45078, upload-time = "2025-06-09T23:02:35.538Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/ef/a2/c8131383f1e66adad5f6ecfcce383d584ca94055a34d683bbb24ac5f2f1c/frozenlist-1.7.0-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:3dbf9952c4bb0e90e98aec1bd992b3318685005702656bc6f67c1a32b76787f2", size = 81424, upload-time = "2025-06-09T23:00:42.24Z" },
    { url = "https://files.pythonhosted.org/packages/4c/9d/02754159955088cb52567337d1113f945b9e444c4960771ea90eb73de8db/frozenlist-1.7.0-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:1f5906d3359300b8a9bb194239491122e6cf1444c2efb88865426f170c262cdb", size = 47952, upload-time = "2025-06-09T23:00:43.481Z" },
    { url = "https://files.pythonhosted.org/packages/01/7a/0046ef1bd6699b40acd2067ed6d6670b4db2f425c56980fa21c982c2a9db/frozenlist-1.7.0-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:3dabd5a8f84573c8d10d8859a50ea2dec01eea372031929871368c09fa103478", size = 46688, upload-time = "2025-06-09T23:00:44.793Z" },
    { url = "https://files.pythonhosted.org/packages/d6/a2/a910bafe29c86997363fb4c02069df4ff0b5bc39d33c5198b4e9dd42d8f8/frozenlist-1.7.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:aa57daa5917f1738064f302bf2626281a1cb01920c32f711fbc7bc36111058a8", size = 243084, upload-time = "2025-06-09T23:00:46.125Z" },
    { url = "https://files.pythonhosted.org/packages/64/3e/5036af9d5031374c64c387469bfcc3af537fc0f5b1187d83a1cf6fab1639/frozenlist-1.7.0-cp312-cp312-manylinux_2_17_armv7l.manylinux2014_armv7l.manylinux_2_31_armv7l.whl", hash = "sha256:c193dda2b6d49f4c4398962810fa7d7c78f032bf45572b3e04dd5249dff27e08", size = 233524, upload-time = "2025-06-09T23:00:47.73Z" },
    { url = "https://files.pythonhosted.org/packages/06/39/6a17b7c107a2887e781a48ecf20ad20f1c39d94b2a548c83615b5b879f28/frozenlist-1.7.0-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:bfe2b675cf0aaa6d61bf8fbffd3c274b3c9b7b1623beb3809df8a81399a4a9c4", size = 248493, upload-time = "2025-06-09T23:00:49.742Z" },
    { url = "https://files.pythonhosted.org/packages/be/00/711d1337c7327d88c44d91dd0f556a1c47fb99afc060ae0ef66b4d24793d/frozenlist-1.7.0-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:8fc5d5cda37f62b262405cf9652cf0856839c4be8ee41be0afe8858f17f4c94b", size = 244116, upload-time = "2025-06-09T23:00:51.352Z" },
    { url = "https://files.pythonhosted.org/packages/24/fe/74e6ec0639c115df13d5850e75722750adabdc7de24e37e05a40527ca539/frozenlist-1.7.0-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:b0d5ce521d1dd7d620198829b87ea002956e4319002ef0bc8d3e6d045cb4646e", size = 224557, upload-time = "2025-06-09T23:00:52.855Z" },
    { url = "https://files.pythonhosted.org/packages/8d/db/48421f62a6f77c553575201e89048e97198046b793f4a089c79a6e3268bd/frozenlist-1.7.0-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:488d0a7d6a0008ca0db273c542098a0fa9e7dfaa7e57f70acef43f32b3f69dca", size = 241820, upload-time = "2025-06-09T23:00:54.43Z" },
    { url = "https://files.pythonhosted.org/packages/1d/fa/cb4a76bea23047c8462976ea7b7a2bf53997a0ca171302deae9d6dd12096/frozenlist-1.7.0-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:15a7eaba63983d22c54d255b854e8108e7e5f3e89f647fc854bd77a237e767df", size = 236542, upload-time = "2025-06-09T23:00:56.409Z" },
    { url = "https://files.pythonhosted.org/packages/5d/32/476a4b5cfaa0ec94d3f808f193301debff2ea42288a099afe60757ef6282/frozenlist-1.7.0-cp312-cp312-musllinux_1_2_armv7l.whl", hash = "sha256:1eaa7e9c6d15df825bf255649e05bd8a74b04a4d2baa1ae46d9c2d00b2ca2cb5", size = 249350, upload-time = "2025-06-09T23:00:58.468Z" },
    { url = "https://files.pythonhosted.org/packages/8d/ba/9a28042f84a6bf8ea5dbc81cfff8eaef18d78b2a1ad9d51c7bc5b029ad16/frozenlist-1.7.0-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:e4389e06714cfa9d47ab87f784a7c5be91d3934cd6e9a7b85beef808297cc025", size = 225093, upload-time = "2025-06-09T23:01:00.015Z" },
    { url = "https://files.pythonhosted.org/packages/bc/29/3a32959e68f9cf000b04e79ba574527c17e8842e38c91d68214a37455786/frozenlist-1.7.0-cp312-cp312-musllinux_1_2_ppc64le.whl", hash = "sha256:73bd45e1488c40b63fe5a7df892baf9e2a4d4bb6409a2b3b78ac1c6236178e01", size = 245482, upload-time = "2025-06-09T23:01:01.474Z" },
    { url = "https://files.pythonhosted.org/packages/80/e8/edf2f9e00da553f07f5fa165325cfc302dead715cab6ac8336a5f3d0adc2/frozenlist-1.7.0-cp312-cp312-musllinux_1_2_s390x.whl", hash = "sha256:99886d98e1643269760e5fe0df31e5ae7050788dd288947f7f007209b8c33f08", size = 249590, upload-time = "2025-06-09T23:01:02.961Z" },
    { url = "https://files.pythonhosted.org/packages/1c/80/9a0eb48b944050f94cc51ee1c413eb14a39543cc4f760ed12657a5a3c45a/frozenlist-1.7.0-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:290a172aae5a4c278c6da8a96222e6337744cd9c77313efe33d5670b9f65fc43", size = 237785, upload-time = "2025-06-09T23:01:05.095Z" },
    { url = "https://files.pythonhosted.org/packages/f3/74/87601e0fb0369b7a2baf404ea921769c53b7ae00dee7dcfe5162c8c6dbf0/frozenlist-1.7.0-cp312-cp312-win32.whl", hash = "sha256:426c7bc70e07cfebc178bc4c2bf2d861d720c4fff172181eeb4a4c41d4ca2ad3", size = 39487, upload-time = "2025-06-09T23:01:06.54Z" },
    { url = "https://files.pythonhosted.org/packages/0b/15/c026e9a9fc17585a9d461f65d8593d281fedf55fbf7eb53f16c6df2392f9/frozenlist-1.7.0-cp312-cp312-win_amd64.whl", hash = "sha256:563b72efe5da92e02eb68c59cb37205457c977aa7a449ed1b37e6939e5c47c6a", size = 43874, upload-time = "2025-06-09T23:01:07.752Z" },
    { url = "https://files.pythonhosted.org/packages/24/90/6b2cebdabdbd50367273c20ff6b57a3dfa89bd0762de02c3a1eb42cb6462/frozenlist-1.7.0-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:ee80eeda5e2a4e660651370ebffd1286542b67e268aa1ac8d6dbe973120ef7ee", size = 79791, upload-time = "2025-06-09T23:01:09.368Z" },
    { url = "https://files.pythonhosted.org/packages/83/2e/5b70b6a3325363293fe5fc3ae74cdcbc3e996c2a11dde2fd9f1fb0776d19/frozenlist-1.7.0-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:d1a81c85417b914139e3a9b995d4a1c84559afc839a93cf2cb7f15e6e5f6ed2d", size = 47165, upload-time = "2025-06-09T23:01:10.653Z" },
    { url = "https://files.pythonhosted.org/packages/f4/25/a0895c99270ca6966110f4ad98e87e5662eab416a17e7fd53c364bf8b954/frozenlist-1.7.0-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:cbb65198a9132ebc334f237d7b0df163e4de83fb4f2bdfe46c1e654bdb0c5d43", size = 45881, upload-time = "2025-06-09T23:01:12.296Z" },
    { url = "https://files.pythonhosted.org/packages/19/7c/71bb0bbe0832793c601fff68cd0cf6143753d0c667f9aec93d3c323f4b55/frozenlist-1.7.0-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:dab46c723eeb2c255a64f9dc05b8dd601fde66d6b19cdb82b2e09cc6ff8d8b5d", size = 232409, upload-time = "2025-06-09T23:01:13.641Z" },
    { url = "https://files.pythonhosted.org/packages/c0/45/ed2798718910fe6eb3ba574082aaceff4528e6323f9a8570be0f7028d8e9/frozenlist-1.7.0-cp313-cp313-manylinux_2_17_armv7l.manylinux2014_armv7l.manylinux_2_31_armv7l.whl", hash = "sha256:6aeac207a759d0dedd2e40745575ae32ab30926ff4fa49b1635def65806fddee", size = 225132, upload-time = "2025-06-09T23:01:15.264Z" },
    { url = "https://files.pythonhosted.org/packages/ba/e2/8417ae0f8eacb1d071d4950f32f229aa6bf68ab69aab797b72a07ea68d4f/frozenlist-1.7.0-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:bd8c4e58ad14b4fa7802b8be49d47993182fdd4023393899632c88fd8cd994eb", size = 237638, upload-time = "2025-06-09T23:01:16.752Z" },
    { url = "https://files.pythonhosted.org/packages/f8/b7/2ace5450ce85f2af05a871b8c8719b341294775a0a6c5585d5e6170f2ce7/frozenlist-1.7.0-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:04fb24d104f425da3540ed83cbfc31388a586a7696142004c577fa61c6298c3f", size = 233539, upload-time = "2025-06-09T23:01:18.202Z" },
    { url = "https://files.pythonhosted.org/packages/46/b9/6989292c5539553dba63f3c83dc4598186ab2888f67c0dc1d917e6887db6/frozenlist-1.7.0-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:6a5c505156368e4ea6b53b5ac23c92d7edc864537ff911d2fb24c140bb175e60", size = 215646, upload-time = "2025-06-09T23:01:19.649Z" },
    { url = "https://files.pythonhosted.org/packages/72/31/bc8c5c99c7818293458fe745dab4fd5730ff49697ccc82b554eb69f16a24/frozenlist-1.7.0-cp313-cp313-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:8bd7eb96a675f18aa5c553eb7ddc24a43c8c18f22e1f9925528128c052cdbe00", size = 232233, upload-time = "2025-06-09T23:01:21.175Z" },
    { url = "https://files.pythonhosted.org/packages/59/52/460db4d7ba0811b9ccb85af996019f5d70831f2f5f255f7cc61f86199795/frozenlist-1.7.0-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:05579bf020096fe05a764f1f84cd104a12f78eaab68842d036772dc6d4870b4b", size = 227996, upload-time = "2025-06-09T23:01:23.098Z" },
    { url = "https://files.pythonhosted.org/packages/ba/c9/f4b39e904c03927b7ecf891804fd3b4df3db29b9e487c6418e37988d6e9d/frozenlist-1.7.0-cp313-cp313-musllinux_1_2_armv7l.whl", hash = "sha256:376b6222d114e97eeec13d46c486facd41d4f43bab626b7c3f6a8b4e81a5192c", size = 242280, upload-time = "2025-06-09T23:01:24.808Z" },
    { url = "https://files.pythonhosted.org/packages/b8/33/3f8d6ced42f162d743e3517781566b8481322be321b486d9d262adf70bfb/frozenlist-1.7.0-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:0aa7e176ebe115379b5b1c95b4096fb1c17cce0847402e227e712c27bdb5a949", size = 217717, upload-time = "2025-06-09T23:01:26.28Z" },
    { url = "https://files.pythonhosted.org/packages/3e/e8/ad683e75da6ccef50d0ab0c2b2324b32f84fc88ceee778ed79b8e2d2fe2e/frozenlist-1.7.0-cp313-cp313-musllinux_1_2_ppc64le.whl", hash = "sha256:3fbba20e662b9c2130dc771e332a99eff5da078b2b2648153a40669a6d0e36ca", size = 236644, upload-time = "2025-06-09T23:01:27.887Z" },
    { url = "https://files.pythonhosted.org/packages/b2/14/8d19ccdd3799310722195a72ac94ddc677541fb4bef4091d8e7775752360/frozenlist-1.7.0-cp313-cp313-musllinux_1_2_s390x.whl", hash = "sha256:f3f4410a0a601d349dd406b5713fec59b4cee7e71678d5b17edda7f4655a940b", size = 238879, upload-time = "2025-06-09T23:01:29.524Z" },
    { url = "https://files.pythonhosted.org/packages/ce/13/c12bf657494c2fd1079a48b2db49fa4196325909249a52d8f09bc9123fd7/frozenlist-1.7.0-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:e2cdfaaec6a2f9327bf43c933c0319a7c429058e8537c508964a133dffee412e", size = 232502, upload-time = "2025-06-09T23:01:31.287Z" },
    { url = "https://files.pythonhosted.org/packages/d7/8b/e7f9dfde869825489382bc0d512c15e96d3964180c9499efcec72e85db7e/frozenlist-1.7.0-cp313-cp313-win32.whl", hash = "sha256:5fc4df05a6591c7768459caba1b342d9ec23fa16195e744939ba5914596ae3e1", size = 39169, upload-time = "2025-06-09T23:01:35.503Z" },
    { url = "https://files.pythonhosted.org/packages/35/89/a487a98d94205d85745080a37860ff5744b9820a2c9acbcdd9440bfddf98/frozenlist-1.7.0-cp313-cp313-win_amd64.whl", hash = "sha256:52109052b9791a3e6b5d1b65f4b909703984b770694d3eb64fad124c835d7cba", size = 43219, upload-time = "2025-06-09T23:01:36.784Z" },
    { url = "https://files.pythonhosted.org/packages/56/d5/5c4cf2319a49eddd9dd7145e66c4866bdc6f3dbc67ca3d59685149c11e0d/frozenlist-1.7.0-cp313-cp313t-macosx_10_13_universal2.whl", hash = "sha256:a6f86e4193bb0e235ef6ce3dde5cbabed887e0b11f516ce8a0f4d3b33078ec2d", size = 84345, upload-time = "2025-06-09T23:01:38.295Z" },
    { url = "https://files.pythonhosted.org/packages/a4/7d/ec2c1e1dc16b85bc9d526009961953df9cec8481b6886debb36ec9107799/frozenlist-1.7.0-cp313-cp313t-macosx_10_13_x86_64.whl", hash = "sha256:82d664628865abeb32d90ae497fb93df398a69bb3434463d172b80fc25b0dd7d", size = 48880, upload-time = "2025-06-09T23:01:39.887Z" },
    { url = "https://files.pythonhosted.org/packages/69/86/f9596807b03de126e11e7d42ac91e3d0b19a6599c714a1989a4e85eeefc4/frozenlist-1.7.0-cp313-cp313t-macosx_11_0_arm64.whl", hash = "sha256:912a7e8375a1c9a68325a902f3953191b7b292aa3c3fb0d71a216221deca460b", size = 48498, upload-time = "2025-06-09T23:01:41.318Z" },
    { url = "https://files.pythonhosted.org/packages/5e/cb/df6de220f5036001005f2d726b789b2c0b65f2363b104bbc16f5be8084f8/frozenlist-1.7.0-cp313-cp313t-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:9537c2777167488d539bc5de2ad262efc44388230e5118868e172dd4a552b146", size = 292296, upload-time = "2025-06-09T23:01:42.685Z" },
    { url = "https://files.pythonhosted.org/packages/83/1f/de84c642f17c8f851a2905cee2dae401e5e0daca9b5ef121e120e19aa825/frozenlist-1.7.0-cp313-cp313t-manylinux_2_17_armv7l.manylinux2014_armv7l.manylinux_2_31_armv7l.whl", hash = "sha256:f34560fb1b4c3e30ba35fa9a13894ba39e5acfc5f60f57d8accde65f46cc5e74", size = 273103, upload-time = "2025-06-09T23:01:44.166Z" },
    { url = "https://files.pythonhosted.org/packages/88/3c/c840bfa474ba3fa13c772b93070893c6e9d5c0350885760376cbe3b6c1b3/frozenlist-1.7.0-cp313-cp313t-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:acd03d224b0175f5a850edc104ac19040d35419eddad04e7cf2d5986d98427f1", size = 292869, upload-time = "2025-06-09T23:01:45.681Z" },
    { url = "https://files.pythonhosted.org/packages/a6/1c/3efa6e7d5a39a1d5ef0abeb51c48fb657765794a46cf124e5aca2c7a592c/frozenlist-1.7.0-cp313-cp313t-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:f2038310bc582f3d6a09b3816ab01737d60bf7b1ec70f5356b09e84fb7408ab1", size = 291467, upload-time = "2025-06-09T23:01:47.234Z" },
    { url = "https://files.pythonhosted.org/packages/4f/00/d5c5e09d4922c395e2f2f6b79b9a20dab4b67daaf78ab92e7729341f61f6/frozenlist-1.7.0-cp313-cp313t-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:b8c05e4c8e5f36e5e088caa1bf78a687528f83c043706640a92cb76cd6999384", size = 266028, upload-time = "2025-06-09T23:01:48.819Z" },
    { url = "https://files.pythonhosted.org/packages/4e/27/72765be905619dfde25a7f33813ac0341eb6b076abede17a2e3fbfade0cb/frozenlist-1.7.0-cp313-cp313t-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:765bb588c86e47d0b68f23c1bee323d4b703218037765dcf3f25c838c6fecceb", size = 284294, upload-time = "2025-06-09T23:01:50.394Z" },
    { url = "https://files.pythonhosted.org/packages/88/67/c94103a23001b17808eb7dd1200c156bb69fb68e63fcf0693dde4cd6228c/frozenlist-1.7.0-cp313-cp313t-musllinux_1_2_aarch64.whl", hash = "sha256:32dc2e08c67d86d0969714dd484fd60ff08ff81d1a1e40a77dd34a387e6ebc0c", size = 281898, upload-time = "2025-06-09T23:01:52.234Z" },
    { url = "https://files.pythonhosted.org/packages/42/34/a3e2c00c00f9e2a9db5653bca3fec306349e71aff14ae45ecc6d0951dd24/frozenlist-1.7.0-cp313-cp313t-musllinux_1_2_armv7l.whl", hash = "sha256:c0303e597eb5a5321b4de9c68e9845ac8f290d2ab3f3e2c864437d3c5a30cd65", size = 290465, upload-time = "2025-06-09T23:01:53.788Z" },
    { url = "https://files.pythonhosted.org/packages/bb/73/f89b7fbce8b0b0c095d82b008afd0590f71ccb3dee6eee41791cf8cd25fd/frozenlist-1.7.0-cp313-cp313t-musllinux_1_2_i686.whl", hash = "sha256:a47f2abb4e29b3a8d0b530f7c3598badc6b134562b1a5caee867f7c62fee51e3", size = 266385, upload-time = "2025-06-09T23:01:55.769Z" },
    { url = "https://files.pythonhosted.org/packages/cd/45/e365fdb554159462ca12df54bc59bfa7a9a273ecc21e99e72e597564d1ae/frozenlist-1.7.0-cp313-cp313t-musllinux_1_2_ppc64le.whl", hash = "sha256:3d688126c242a6fabbd92e02633414d40f50bb6002fa4cf995a1d18051525657", size = 288771, upload-time = "2025-06-09T23:01:57.4Z" },
    { url = "https://files.pythonhosted.org/packages/00/11/47b6117002a0e904f004d70ec5194fe9144f117c33c851e3d51c765962d0/frozenlist-1.7.0-cp313-cp313t-musllinux_1_2_s390x.whl", hash = "sha256:4e7e9652b3d367c7bd449a727dc79d5043f48b88d0cbfd4f9f1060cf2b414104", size = 288206, upload-time = "2025-06-09T23:01:58.936Z" },
    { url = "https://files.pythonhosted.org/packages/40/37/5f9f3c3fd7f7746082ec67bcdc204db72dad081f4f83a503d33220a92973/frozenlist-1.7.0-cp313-cp313t-musllinux_1_2_x86_64.whl", hash = "sha256:1a85e345b4c43db8b842cab1feb41be5cc0b10a1830e6295b69d7310f99becaf", size = 282620, upload-time = "2025-06-09T23:02:00.493Z" },
    { url = "https://files.pythonhosted.org/packages/0b/31/8fbc5af2d183bff20f21aa743b4088eac4445d2bb1cdece449ae80e4e2d1/frozenlist-1.7.0-cp313-cp313t-win32.whl", hash = "sha256:3a14027124ddb70dfcee5148979998066897e79f89f64b13328595c4bdf77c81", size = 43059, upload-time = "2025-06-09T23:02:02.072Z" },
    { url = "https://files.pythonhosted.org/packages/bb/ed/41956f52105b8dbc26e457c5705340c67c8cc2b79f394b79bffc09d0e938/frozenlist-1.7.0-cp313-cp313t-win_amd64.whl", hash = "sha256:3bf8010d71d4507775f658e9823210b7427be36625b387221642725b515dcf3e", size = 47516, upload-time = "2025-06-09T23:02:03.779Z" },
    { url = "https://files.pythonhosted.org/packages/ee/45/b82e3c16be2182bff01179db177fe144d58b5dc787a7d4492c6ed8b9317f/frozenlist-1.7.0-py3-none-any.whl", hash = "sha256:9a5af342e34f7e97caf8c995864c7a396418ae2859cc6fdf1b1073020d516a7e", size = 13106, upload-time = "2025-06-09T23:02:34.204Z" },
]

[[package]]
name = "google-ai-generativelanguage"
version = "0.6.15"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "google-api-core", extra = ["grpc"] },
    { name = "google-auth" },
    { name = "proto-plus" },
    { name = "protobuf" },
]
sdist = { url = "https://files.pythonhosted.org/packages/11/d1/48fe5d7a43d278e9f6b5ada810b0a3530bbeac7ed7fcbcd366f932f05316/google_ai_generativelanguage-0.6.15.tar.gz", hash = "sha256:8f6d9dc4c12b065fe2d0289026171acea5183ebf2d0b11cefe12f3821e159ec3", size = 1375443, upload-time = "2025-01-13T21:50:47.459Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/7c/a3/67b8a6ff5001a1d8864922f2d6488dc2a14367ceb651bc3f09a947f2f306/google_ai_generativelanguage-0.6.15-py3-none-any.whl", hash = "sha256:5a03ef86377aa184ffef3662ca28f19eeee158733e45d7947982eb953c6ebb6c", size = 1327356, upload-time = "2025-01-13T21:50:44.174Z" },
]

[[package]]
name = "google-api-core"
version = "2.25.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "google-auth" },
    { name = "googleapis-common-protos" },
    { name = "proto-plus" },
    { name = "protobuf" },
    { name = "requests" },
]
sdist = { url = "https://files.pythonhosted.org/packages/dc/21/e9d043e88222317afdbdb567165fdbc3b0aad90064c7e0c9eb0ad9955ad8/google_api_core-2.25.1.tar.gz", hash = "sha256:d2aaa0b13c78c61cb3f4282c464c046e45fbd75755683c9c525e6e8f7ed0a5e8", size = 165443, upload-time = "2025-06-12T20:52:20.439Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/14/4b/ead00905132820b623732b175d66354e9d3e69fcf2a5dcdab780664e7896/google_api_core-2.25.1-py3-none-any.whl", hash = "sha256:8a2a56c1fef82987a524371f99f3bd0143702fecc670c72e600c1cda6bf8dbb7", size = 160807, upload-time = "2025-06-12T20:52:19.334Z" },
]

[package.optional-dependencies]
grpc = [
    { name = "grpcio" },
    { name = "grpcio-status" },
]

[[package]]
name = "google-api-python-client"
version = "2.176.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "google-api-core" },
    { name = "google-auth" },
    { name = "google-auth-httplib2" },
    { name = "httplib2" },
    { name = "uritemplate" },
]
sdist = { url = "https://files.pythonhosted.org/packages/3e/38/daf70faf6d05556d382bac640bc6765f09fcfb9dfb51ac4a595d3453a2a9/google_api_python_client-2.176.0.tar.gz", hash = "sha256:2b451cdd7fd10faeb5dd20f7d992f185e1e8f4124c35f2cdcc77c843139a4cf1", size = 13154773, upload-time = "2025-07-08T18:07:10.354Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/b1/2c/758f415a19a12c3c6d06902794b0dd4c521d912a59b98ab752bba48812df/google_api_python_client-2.176.0-py3-none-any.whl", hash = "sha256:e22239797f1d085341e12cd924591fc65c56d08e0af02549d7606092e6296510", size = 13678445, upload-time = "2025-07-08T18:07:07.799Z" },
]

[[package]]
name = "google-auth"
version = "2.40.3"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "cachetools" },
    { name = "pyasn1-modules" },
    { name = "rsa" },
]
sdist = { url = "https://files.pythonhosted.org/packages/9e/9b/e92ef23b84fa10a64ce4831390b7a4c2e53c0132568d99d4ae61d04c8855/google_auth-2.40.3.tar.gz", hash = "sha256:500c3a29adedeb36ea9cf24b8d10858e152f2412e3ca37829b3fa18e33d63b77", size = 281029, upload-time = "2025-06-04T18:04:57.577Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/17/63/b19553b658a1692443c62bd07e5868adaa0ad746a0751ba62c59568cd45b/google_auth-2.40.3-py2.py3-none-any.whl", hash = "sha256:1370d4593e86213563547f97a92752fc658456fe4514c809544f330fed45a7ca", size = 216137, upload-time = "2025-06-04T18:04:55.573Z" },
]

[[package]]
name = "google-auth-httplib2"
version = "0.2.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "google-auth" },
    { name = "httplib2" },
]
sdist = { url = "https://files.pythonhosted.org/packages/56/be/217a598a818567b28e859ff087f347475c807a5649296fb5a817c58dacef/google-auth-httplib2-0.2.0.tar.gz", hash = "sha256:38aa7badf48f974f1eb9861794e9c0cb2a0511a4ec0679b1f886d108f5640e05", size = 10842, upload-time = "2023-12-12T17:40:30.722Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/be/8a/fe34d2f3f9470a27b01c9e76226965863f153d5fbe276f83608562e49c04/google_auth_httplib2-0.2.0-py2.py3-none-any.whl", hash = "sha256:b65a0a2123300dd71281a7bf6e64d65a0759287df52729bdd1ae2e47dc311a3d", size = 9253, upload-time = "2023-12-12T17:40:13.055Z" },
]

[[package]]
name = "google-generativeai"
version = "0.8.5"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "google-ai-generativelanguage" },
    { name = "google-api-core" },
    { name = "google-api-python-client" },
    { name = "google-auth" },
    { name = "protobuf" },
    { name = "pydantic" },
    { name = "tqdm" },
    { name = "typing-extensions" },
]
wheels = [
    { url = "https://files.pythonhosted.org/packages/6e/40/c42ff9ded9f09ec9392879a8e6538a00b2dc185e834a3392917626255419/google_generativeai-0.8.5-py3-none-any.whl", hash = "sha256:22b420817fb263f8ed520b33285f45976d5b21e904da32b80d4fd20c055123a2", size = 155427, upload-time = "2025-04-17T00:40:00.67Z" },
]

[[package]]
name = "googleapis-common-protos"
version = "1.70.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "protobuf" },
]
sdist = { url = "https://files.pythonhosted.org/packages/39/24/33db22342cf4a2ea27c9955e6713140fedd51e8b141b5ce5260897020f1a/googleapis_common_protos-1.70.0.tar.gz", hash = "sha256:0e1b44e0ea153e6594f9f394fef15193a68aaaea2d843f83e2742717ca753257", size = 145903, upload-time = "2025-04-14T10:17:02.924Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/86/f1/62a193f0227cf15a920390abe675f386dec35f7ae3ffe6da582d3ade42c7/googleapis_common_protos-1.70.0-py3-none-any.whl", hash = "sha256:b8bfcca8c25a2bb253e0e0b0adaf8c00773e5e6af6fd92397576680b807e0fd8", size = 294530, upload-time = "2025-04-14T10:17:01.271Z" },
]

[[package]]
name = "gotrue"
version = "2.12.2"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "httpx", extra = ["http2"] },
    { name = "pydantic" },
    { name = "pyjwt" },
    { name = "pytest-mock" },
]
sdist = { url = "https://files.pythonhosted.org/packages/3f/54/5d3befeb871bc91d83a87217e56c882a5c42dfa49ad7983e41de21ff557c/gotrue-2.12.2.tar.gz", hash = "sha256:9f23c4e45d5129c495867fd95ce14c4ebe5054b07d7449b01874332cb5c1f076", size = 38059, upload-time = "2025-06-23T21:21:35.225Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/9b/1d/6d5e3eaf663eaff0d3084eb2d370d7a7c0cf83d9d94a2bba1eaa50fe145e/gotrue-2.12.2-py3-none-any.whl", hash = "sha256:72443e106507545b2814f3c52d66c3b8f5eaf05c1e43b21b0fadf72742971406", size = 43968, upload-time = "2025-06-23T21:21:33.415Z" },
]

[[package]]
name = "grpcio"
version = "1.73.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/79/e8/b43b851537da2e2f03fa8be1aef207e5cbfb1a2e014fbb6b40d24c177cd3/grpcio-1.73.1.tar.gz", hash = "sha256:7fce2cd1c0c1116cf3850564ebfc3264fba75d3c74a7414373f1238ea365ef87", size = 12730355, upload-time = "2025-06-26T01:53:24.622Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/b8/41/456caf570c55d5ac26f4c1f2db1f2ac1467d5bf3bcd660cba3e0a25b195f/grpcio-1.73.1-cp312-cp312-linux_armv7l.whl", hash = "sha256:921b25618b084e75d424a9f8e6403bfeb7abef074bb6c3174701e0f2542debcf", size = 5334621, upload-time = "2025-06-26T01:52:23.602Z" },
    { url = "https://files.pythonhosted.org/packages/2a/c2/9a15e179e49f235bb5e63b01590658c03747a43c9775e20c4e13ca04f4c4/grpcio-1.73.1-cp312-cp312-macosx_11_0_universal2.whl", hash = "sha256:277b426a0ed341e8447fbf6c1d6b68c952adddf585ea4685aa563de0f03df887", size = 10601131, upload-time = "2025-06-26T01:52:25.691Z" },
    { url = "https://files.pythonhosted.org/packages/0c/1d/1d39e90ef6348a0964caa7c5c4d05f3bae2c51ab429eb7d2e21198ac9b6d/grpcio-1.73.1-cp312-cp312-manylinux_2_17_aarch64.whl", hash = "sha256:96c112333309493c10e118d92f04594f9055774757f5d101b39f8150f8c25582", size = 5759268, upload-time = "2025-06-26T01:52:27.631Z" },
    { url = "https://files.pythonhosted.org/packages/8a/2b/2dfe9ae43de75616177bc576df4c36d6401e0959833b2e5b2d58d50c1f6b/grpcio-1.73.1-cp312-cp312-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:f48e862aed925ae987eb7084409a80985de75243389dc9d9c271dd711e589918", size = 6409791, upload-time = "2025-06-26T01:52:29.711Z" },
    { url = "https://files.pythonhosted.org/packages/6e/66/e8fe779b23b5a26d1b6949e5c70bc0a5fd08f61a6ec5ac7760d589229511/grpcio-1.73.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:83a6c2cce218e28f5040429835fa34a29319071079e3169f9543c3fbeff166d2", size = 6003728, upload-time = "2025-06-26T01:52:31.352Z" },
    { url = "https://files.pythonhosted.org/packages/a9/39/57a18fcef567784108c4fc3f5441cb9938ae5a51378505aafe81e8e15ecc/grpcio-1.73.1-cp312-cp312-musllinux_1_1_aarch64.whl", hash = "sha256:65b0458a10b100d815a8426b1442bd17001fdb77ea13665b2f7dc9e8587fdc6b", size = 6103364, upload-time = "2025-06-26T01:52:33.028Z" },
    { url = "https://files.pythonhosted.org/packages/c5/46/28919d2aa038712fc399d02fa83e998abd8c1f46c2680c5689deca06d1b2/grpcio-1.73.1-cp312-cp312-musllinux_1_1_i686.whl", hash = "sha256:0a9f3ea8dce9eae9d7cb36827200133a72b37a63896e0e61a9d5ec7d61a59ab1", size = 6749194, upload-time = "2025-06-26T01:52:34.734Z" },
    { url = "https://files.pythonhosted.org/packages/3d/56/3898526f1fad588c5d19a29ea0a3a4996fb4fa7d7c02dc1be0c9fd188b62/grpcio-1.73.1-cp312-cp312-musllinux_1_1_x86_64.whl", hash = "sha256:de18769aea47f18e782bf6819a37c1c528914bfd5683b8782b9da356506190c8", size = 6283902, upload-time = "2025-06-26T01:52:36.503Z" },
    { url = "https://files.pythonhosted.org/packages/dc/64/18b77b89c5870d8ea91818feb0c3ffb5b31b48d1b0ee3e0f0d539730fea3/grpcio-1.73.1-cp312-cp312-win32.whl", hash = "sha256:24e06a5319e33041e322d32c62b1e728f18ab8c9dbc91729a3d9f9e3ed336642", size = 3668687, upload-time = "2025-06-26T01:52:38.678Z" },
    { url = "https://files.pythonhosted.org/packages/3c/52/302448ca6e52f2a77166b2e2ed75f5d08feca4f2145faf75cb768cccb25b/grpcio-1.73.1-cp312-cp312-win_amd64.whl", hash = "sha256:303c8135d8ab176f8038c14cc10d698ae1db9c480f2b2823f7a987aa2a4c5646", size = 4334887, upload-time = "2025-06-26T01:52:40.743Z" },
    { url = "https://files.pythonhosted.org/packages/37/bf/4ca20d1acbefabcaba633ab17f4244cbbe8eca877df01517207bd6655914/grpcio-1.73.1-cp313-cp313-linux_armv7l.whl", hash = "sha256:b310824ab5092cf74750ebd8a8a8981c1810cb2b363210e70d06ef37ad80d4f9", size = 5335615, upload-time = "2025-06-26T01:52:42.896Z" },
    { url = "https://files.pythonhosted.org/packages/75/ed/45c345f284abec5d4f6d77cbca9c52c39b554397eb7de7d2fcf440bcd049/grpcio-1.73.1-cp313-cp313-macosx_11_0_universal2.whl", hash = "sha256:8f5a6df3fba31a3485096ac85b2e34b9666ffb0590df0cd044f58694e6a1f6b5", size = 10595497, upload-time = "2025-06-26T01:52:44.695Z" },
    { url = "https://files.pythonhosted.org/packages/a4/75/bff2c2728018f546d812b755455014bc718f8cdcbf5c84f1f6e5494443a8/grpcio-1.73.1-cp313-cp313-manylinux_2_17_aarch64.whl", hash = "sha256:052e28fe9c41357da42250a91926a3e2f74c046575c070b69659467ca5aa976b", size = 5765321, upload-time = "2025-06-26T01:52:46.871Z" },
    { url = "https://files.pythonhosted.org/packages/70/3b/14e43158d3b81a38251b1d231dfb45a9b492d872102a919fbf7ba4ac20cd/grpcio-1.73.1-cp313-cp313-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:1c0bf15f629b1497436596b1cbddddfa3234273490229ca29561209778ebe182", size = 6415436, upload-time = "2025-06-26T01:52:49.134Z" },
    { url = "https://files.pythonhosted.org/packages/e5/3f/81d9650ca40b54338336fd360f36773be8cb6c07c036e751d8996eb96598/grpcio-1.73.1-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:0ab860d5bfa788c5a021fba264802e2593688cd965d1374d31d2b1a34cacd854", size = 6007012, upload-time = "2025-06-26T01:52:51.076Z" },
    { url = "https://files.pythonhosted.org/packages/55/f4/59edf5af68d684d0f4f7ad9462a418ac517201c238551529098c9aa28cb0/grpcio-1.73.1-cp313-cp313-musllinux_1_1_aarch64.whl", hash = "sha256:ad1d958c31cc91ab050bd8a91355480b8e0683e21176522bacea225ce51163f2", size = 6105209, upload-time = "2025-06-26T01:52:52.773Z" },
    { url = "https://files.pythonhosted.org/packages/e4/a8/700d034d5d0786a5ba14bfa9ce974ed4c976936c2748c2bd87aa50f69b36/grpcio-1.73.1-cp313-cp313-musllinux_1_1_i686.whl", hash = "sha256:f43ffb3bd415c57224c7427bfb9e6c46a0b6e998754bfa0d00f408e1873dcbb5", size = 6753655, upload-time = "2025-06-26T01:52:55.064Z" },
    { url = "https://files.pythonhosted.org/packages/1f/29/efbd4ac837c23bc48e34bbaf32bd429f0dc9ad7f80721cdb4622144c118c/grpcio-1.73.1-cp313-cp313-musllinux_1_1_x86_64.whl", hash = "sha256:686231cdd03a8a8055f798b2b54b19428cdf18fa1549bee92249b43607c42668", size = 6287288, upload-time = "2025-06-26T01:52:57.33Z" },
    { url = "https://files.pythonhosted.org/packages/d8/61/c6045d2ce16624bbe18b5d169c1a5ce4d6c3a47bc9d0e5c4fa6a50ed1239/grpcio-1.73.1-cp313-cp313-win32.whl", hash = "sha256:89018866a096e2ce21e05eabed1567479713ebe57b1db7cbb0f1e3b896793ba4", size = 3668151, upload-time = "2025-06-26T01:52:59.405Z" },
    { url = "https://files.pythonhosted.org/packages/c2/d7/77ac689216daee10de318db5aa1b88d159432dc76a130948a56b3aa671a2/grpcio-1.73.1-cp313-cp313-win_amd64.whl", hash = "sha256:4a68f8c9966b94dff693670a5cf2b54888a48a5011c5d9ce2295a1a1465ee84f", size = 4335747, upload-time = "2025-06-26T01:53:01.233Z" },
]

[[package]]
name = "grpcio-status"
version = "1.71.2"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "googleapis-common-protos" },
    { name = "grpcio" },
    { name = "protobuf" },
]
sdist = { url = "https://files.pythonhosted.org/packages/fd/d1/b6e9877fedae3add1afdeae1f89d1927d296da9cf977eca0eb08fb8a460e/grpcio_status-1.71.2.tar.gz", hash = "sha256:c7a97e176df71cdc2c179cd1847d7fc86cca5832ad12e9798d7fed6b7a1aab50", size = 13677, upload-time = "2025-06-28T04:24:05.426Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/67/58/317b0134129b556a93a3b0afe00ee675b5657f0155509e22fcb853bafe2d/grpcio_status-1.71.2-py3-none-any.whl", hash = "sha256:803c98cb6a8b7dc6dbb785b1111aed739f241ab5e9da0bba96888aa74704cfd3", size = 14424, upload-time = "2025-06-28T04:23:42.136Z" },
]

[[package]]
name = "h11"
version = "0.16.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/01/ee/02a2c011bdab74c6fb3c75474d40b3052059d95df7e73351460c8588d963/h11-0.16.0.tar.gz", hash = "sha256:4e35b956cf45792e4caa5885e69fba00bdbc6ffafbfa020300e549b208ee5ff1", size = 101250, upload-time = "2025-04-24T03:35:25.427Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/04/4b/29cac41a4d98d144bf5f6d33995617b185d14b22401f75ca86f384e87ff1/h11-0.16.0-py3-none-any.whl", hash = "sha256:63cf8bbe7522de3bf65932fda1d9c2772064ffb3dae62d55932da54b31cb6c86", size = 37515, upload-time = "2025-04-24T03:35:24.344Z" },
]

[[package]]
name = "h2"
version = "4.2.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "hpack" },
    { name = "hyperframe" },
]
sdist = { url = "https://files.pythonhosted.org/packages/1b/38/d7f80fd13e6582fb8e0df8c9a653dcc02b03ca34f4d72f34869298c5baf8/h2-4.2.0.tar.gz", hash = "sha256:c8a52129695e88b1a0578d8d2cc6842bbd79128ac685463b887ee278126ad01f", size = 2150682, upload-time = "2025-02-02T07:43:51.815Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d0/9e/984486f2d0a0bd2b024bf4bc1c62688fcafa9e61991f041fb0e2def4a982/h2-4.2.0-py3-none-any.whl", hash = "sha256:479a53ad425bb29af087f3458a61d30780bc818e4ebcf01f0b536ba916462ed0", size = 60957, upload-time = "2025-02-01T11:02:26.481Z" },
]

[[package]]
name = "hpack"
version = "4.1.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/2c/48/71de9ed269fdae9c8057e5a4c0aa7402e8bb16f2c6e90b3aa53327b113f8/hpack-4.1.0.tar.gz", hash = "sha256:ec5eca154f7056aa06f196a557655c5b009b382873ac8d1e66e79e87535f1dca", size = 51276, upload-time = "2025-01-22T21:44:58.347Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/07/c6/80c95b1b2b94682a72cbdbfb85b81ae2daffa4291fbfa1b1464502ede10d/hpack-4.1.0-py3-none-any.whl", hash = "sha256:157ac792668d995c657d93111f46b4535ed114f0c9c8d672271bbec7eae1b496", size = 34357, upload-time = "2025-01-22T21:44:56.92Z" },
]

[[package]]
name = "httpcore"
version = "1.0.9"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "certifi" },
    { name = "h11" },
]
sdist = { url = "https://files.pythonhosted.org/packages/06/94/82699a10bca87a5556c9c59b5963f2d039dbd239f25bc2a63907a05a14cb/httpcore-1.0.9.tar.gz", hash = "sha256:6e34463af53fd2ab5d807f399a9b45ea31c3dfa2276f15a2c3f00afff6e176e8", size = 85484, upload-time = "2025-04-24T22:06:22.219Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/7e/f5/f66802a942d491edb555dd61e3a9961140fd64c90bce1eafd741609d334d/httpcore-1.0.9-py3-none-any.whl", hash = "sha256:2d400746a40668fc9dec9810239072b40b4484b640a8c38fd654a024c7a1bf55", size = 78784, upload-time = "2025-04-24T22:06:20.566Z" },
]

[[package]]
name = "httplib2"
version = "0.22.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "pyparsing" },
]
sdist = { url = "https://files.pythonhosted.org/packages/3d/ad/2371116b22d616c194aa25ec410c9c6c37f23599dcd590502b74db197584/httplib2-0.22.0.tar.gz", hash = "sha256:d7a10bc5ef5ab08322488bde8c726eeee5c8618723fdb399597ec58f3d82df81", size = 351116, upload-time = "2023-03-21T22:29:37.214Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/a8/6c/d2fbdaaa5959339d53ba38e94c123e4e84b8fbc4b84beb0e70d7c1608486/httplib2-0.22.0-py3-none-any.whl", hash = "sha256:14ae0a53c1ba8f3d37e9e27cf37eabb0fb9980f435ba405d546948b009dd64dc", size = 96854, upload-time = "2023-03-21T22:29:35.683Z" },
]

[[package]]
name = "httptools"
version = "0.6.4"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/a7/9a/ce5e1f7e131522e6d3426e8e7a490b3a01f39a6696602e1c4f33f9e94277/httptools-0.6.4.tar.gz", hash = "sha256:4e93eee4add6493b59a5c514da98c939b244fce4a0d8879cd3f466562f4b7d5c", size = 240639, upload-time = "2024-10-16T19:45:08.902Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/bb/0e/d0b71465c66b9185f90a091ab36389a7352985fe857e352801c39d6127c8/httptools-0.6.4-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:df017d6c780287d5c80601dafa31f17bddb170232d85c066604d8558683711a2", size = 200683, upload-time = "2024-10-16T19:44:30.175Z" },
    { url = "https://files.pythonhosted.org/packages/e2/b8/412a9bb28d0a8988de3296e01efa0bd62068b33856cdda47fe1b5e890954/httptools-0.6.4-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:85071a1e8c2d051b507161f6c3e26155b5c790e4e28d7f236422dbacc2a9cc44", size = 104337, upload-time = "2024-10-16T19:44:31.786Z" },
    { url = "https://files.pythonhosted.org/packages/9b/01/6fb20be3196ffdc8eeec4e653bc2a275eca7f36634c86302242c4fbb2760/httptools-0.6.4-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:69422b7f458c5af875922cdb5bd586cc1f1033295aa9ff63ee196a87519ac8e1", size = 508796, upload-time = "2024-10-16T19:44:32.825Z" },
    { url = "https://files.pythonhosted.org/packages/f7/d8/b644c44acc1368938317d76ac991c9bba1166311880bcc0ac297cb9d6bd7/httptools-0.6.4-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:16e603a3bff50db08cd578d54f07032ca1631450ceb972c2f834c2b860c28ea2", size = 510837, upload-time = "2024-10-16T19:44:33.974Z" },
    { url = "https://files.pythonhosted.org/packages/52/d8/254d16a31d543073a0e57f1c329ca7378d8924e7e292eda72d0064987486/httptools-0.6.4-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:ec4f178901fa1834d4a060320d2f3abc5c9e39766953d038f1458cb885f47e81", size = 485289, upload-time = "2024-10-16T19:44:35.111Z" },
    { url = "https://files.pythonhosted.org/packages/5f/3c/4aee161b4b7a971660b8be71a92c24d6c64372c1ab3ae7f366b3680df20f/httptools-0.6.4-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:f9eb89ecf8b290f2e293325c646a211ff1c2493222798bb80a530c5e7502494f", size = 489779, upload-time = "2024-10-16T19:44:36.253Z" },
    { url = "https://files.pythonhosted.org/packages/12/b7/5cae71a8868e555f3f67a50ee7f673ce36eac970f029c0c5e9d584352961/httptools-0.6.4-cp312-cp312-win_amd64.whl", hash = "sha256:db78cb9ca56b59b016e64b6031eda5653be0589dba2b1b43453f6e8b405a0970", size = 88634, upload-time = "2024-10-16T19:44:37.357Z" },
    { url = "https://files.pythonhosted.org/packages/94/a3/9fe9ad23fd35f7de6b91eeb60848986058bd8b5a5c1e256f5860a160cc3e/httptools-0.6.4-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:ade273d7e767d5fae13fa637f4d53b6e961fb7fd93c7797562663f0171c26660", size = 197214, upload-time = "2024-10-16T19:44:38.738Z" },
    { url = "https://files.pythonhosted.org/packages/ea/d9/82d5e68bab783b632023f2fa31db20bebb4e89dfc4d2293945fd68484ee4/httptools-0.6.4-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:856f4bc0478ae143bad54a4242fccb1f3f86a6e1be5548fecfd4102061b3a083", size = 102431, upload-time = "2024-10-16T19:44:39.818Z" },
    { url = "https://files.pythonhosted.org/packages/96/c1/cb499655cbdbfb57b577734fde02f6fa0bbc3fe9fb4d87b742b512908dff/httptools-0.6.4-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:322d20ea9cdd1fa98bd6a74b77e2ec5b818abdc3d36695ab402a0de8ef2865a3", size = 473121, upload-time = "2024-10-16T19:44:41.189Z" },
    { url = "https://files.pythonhosted.org/packages/af/71/ee32fd358f8a3bb199b03261f10921716990808a675d8160b5383487a317/httptools-0.6.4-cp313-cp313-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:4d87b29bd4486c0093fc64dea80231f7c7f7eb4dc70ae394d70a495ab8436071", size = 473805, upload-time = "2024-10-16T19:44:42.384Z" },
    { url = "https://files.pythonhosted.org/packages/8a/0a/0d4df132bfca1507114198b766f1737d57580c9ad1cf93c1ff673e3387be/httptools-0.6.4-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:342dd6946aa6bda4b8f18c734576106b8a31f2fe31492881a9a160ec84ff4bd5", size = 448858, upload-time = "2024-10-16T19:44:43.959Z" },
    { url = "https://files.pythonhosted.org/packages/1e/6a/787004fdef2cabea27bad1073bf6a33f2437b4dbd3b6fb4a9d71172b1c7c/httptools-0.6.4-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:4b36913ba52008249223042dca46e69967985fb4051951f94357ea681e1f5dc0", size = 452042, upload-time = "2024-10-16T19:44:45.071Z" },
    { url = "https://files.pythonhosted.org/packages/4d/dc/7decab5c404d1d2cdc1bb330b1bf70e83d6af0396fd4fc76fc60c0d522bf/httptools-0.6.4-cp313-cp313-win_amd64.whl", hash = "sha256:28908df1b9bb8187393d5b5db91435ccc9c8e891657f9cbb42a2541b44c82fc8", size = 87682, upload-time = "2024-10-16T19:44:46.46Z" },
]

[[package]]
name = "httpx"
version = "0.28.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "anyio" },
    { name = "certifi" },
    { name = "httpcore" },
    { name = "idna" },
]
sdist = { url = "https://files.pythonhosted.org/packages/b1/df/48c586a5fe32a0f01324ee087459e112ebb7224f646c0b5023f5e79e9956/httpx-0.28.1.tar.gz", hash = "sha256:75e98c5f16b0f35b567856f597f06ff2270a374470a5c2392242528e3e3e42fc", size = 141406, upload-time = "2024-12-06T15:37:23.222Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/2a/39/e50c7c3a983047577ee07d2a9e53faf5a69493943ec3f6a384bdc792deb2/httpx-0.28.1-py3-none-any.whl", hash = "sha256:d909fcccc110f8c7faf814ca82a9a4d816bc5a6dbfea25d6591d6985b8ba59ad", size = 73517, upload-time = "2024-12-06T15:37:21.509Z" },
]

[package.optional-dependencies]
http2 = [
    { name = "h2" },
]

[[package]]
name = "hyperframe"
version = "6.1.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/02/e7/94f8232d4a74cc99514c13a9f995811485a6903d48e5d952771ef6322e30/hyperframe-6.1.0.tar.gz", hash = "sha256:f630908a00854a7adeabd6382b43923a4c4cd4b821fcb527e6ab9e15382a3b08", size = 26566, upload-time = "2025-01-22T21:41:49.302Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/48/30/47d0bf6072f7252e6521f3447ccfa40b421b6824517f82854703d0f5a98b/hyperframe-6.1.0-py3-none-any.whl", hash = "sha256:b03380493a519fce58ea5af42e4a42317bf9bd425596f7a0835ffce80f1a42e5", size = 13007, upload-time = "2025-01-22T21:41:47.295Z" },
]

[[package]]
name = "idna"
version = "3.10"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/f1/70/7703c29685631f5a7590aa73f1f1d3fa9a380e654b86af429e0934a32f7d/idna-3.10.tar.gz", hash = "sha256:12f65c9b470abda6dc35cf8e63cc574b1c52b11df2c86030af0ac09b01b13ea9", size = 190490, upload-time = "2024-09-15T18:07:39.745Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/76/c6/c88e154df9c4e1a2a66ccf0005a88dfb2650c1dffb6f5ce603dfbd452ce3/idna-3.10-py3-none-any.whl", hash = "sha256:946d195a0d259cbba61165e88e65941f16e9b36ea6ddb97f00452bae8b1287d3", size = 70442, upload-time = "2024-09-15T18:07:37.964Z" },
]

[[package]]
name = "iniconfig"
version = "2.1.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/f2/97/ebf4da567aa6827c909642694d71c9fcf53e5b504f2d96afea02718862f3/iniconfig-2.1.0.tar.gz", hash = "sha256:3abbd2e30b36733fee78f9c7f7308f2d0050e88f0087fd25c2645f63c773e1c7", size = 4793, upload-time = "2025-03-19T20:09:59.721Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/2c/e1/e6716421ea10d38022b952c159d5161ca1193197fb744506875fbb87ea7b/iniconfig-2.1.0-py3-none-any.whl", hash = "sha256:9deba5723312380e77435581c6bf4935c94cbfab9b1ed33ef8d238ea168eb760", size = 6050, upload-time = "2025-03-19T20:10:01.071Z" },
]

[[package]]
name = "jiter"
version = "0.10.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/ee/9d/ae7ddb4b8ab3fb1b51faf4deb36cb48a4fbbd7cb36bad6a5fca4741306f7/jiter-0.10.0.tar.gz", hash = "sha256:07a7142c38aacc85194391108dc91b5b57093c978a9932bd86a36862759d9500", size = 162759, upload-time = "2025-05-18T19:04:59.73Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/6d/b5/348b3313c58f5fbfb2194eb4d07e46a35748ba6e5b3b3046143f3040bafa/jiter-0.10.0-cp312-cp312-macosx_10_12_x86_64.whl", hash = "sha256:1e274728e4a5345a6dde2d343c8da018b9d4bd4350f5a472fa91f66fda44911b", size = 312262, upload-time = "2025-05-18T19:03:44.637Z" },
    { url = "https://files.pythonhosted.org/packages/9c/4a/6a2397096162b21645162825f058d1709a02965606e537e3304b02742e9b/jiter-0.10.0-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:7202ae396446c988cb2a5feb33a543ab2165b786ac97f53b59aafb803fef0744", size = 320124, upload-time = "2025-05-18T19:03:46.341Z" },
    { url = "https://files.pythonhosted.org/packages/2a/85/1ce02cade7516b726dd88f59a4ee46914bf79d1676d1228ef2002ed2f1c9/jiter-0.10.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:23ba7722d6748b6920ed02a8f1726fb4b33e0fd2f3f621816a8b486c66410ab2", size = 345330, upload-time = "2025-05-18T19:03:47.596Z" },
    { url = "https://files.pythonhosted.org/packages/75/d0/bb6b4f209a77190ce10ea8d7e50bf3725fc16d3372d0a9f11985a2b23eff/jiter-0.10.0-cp312-cp312-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:371eab43c0a288537d30e1f0b193bc4eca90439fc08a022dd83e5e07500ed026", size = 369670, upload-time = "2025-05-18T19:03:49.334Z" },
    { url = "https://files.pythonhosted.org/packages/a0/f5/a61787da9b8847a601e6827fbc42ecb12be2c925ced3252c8ffcb56afcaf/jiter-0.10.0-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:6c675736059020365cebc845a820214765162728b51ab1e03a1b7b3abb70f74c", size = 489057, upload-time = "2025-05-18T19:03:50.66Z" },
    { url = "https://files.pythonhosted.org/packages/12/e4/6f906272810a7b21406c760a53aadbe52e99ee070fc5c0cb191e316de30b/jiter-0.10.0-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:0c5867d40ab716e4684858e4887489685968a47e3ba222e44cde6e4a2154f959", size = 389372, upload-time = "2025-05-18T19:03:51.98Z" },
    { url = "https://files.pythonhosted.org/packages/e2/ba/77013b0b8ba904bf3762f11e0129b8928bff7f978a81838dfcc958ad5728/jiter-0.10.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:395bb9a26111b60141757d874d27fdea01b17e8fac958b91c20128ba8f4acc8a", size = 352038, upload-time = "2025-05-18T19:03:53.703Z" },
    { url = "https://files.pythonhosted.org/packages/67/27/c62568e3ccb03368dbcc44a1ef3a423cb86778a4389e995125d3d1aaa0a4/jiter-0.10.0-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.whl", hash = "sha256:6842184aed5cdb07e0c7e20e5bdcfafe33515ee1741a6835353bb45fe5d1bd95", size = 391538, upload-time = "2025-05-18T19:03:55.046Z" },
    { url = "https://files.pythonhosted.org/packages/c0/72/0d6b7e31fc17a8fdce76164884edef0698ba556b8eb0af9546ae1a06b91d/jiter-0.10.0-cp312-cp312-musllinux_1_1_aarch64.whl", hash = "sha256:62755d1bcea9876770d4df713d82606c8c1a3dca88ff39046b85a048566d56ea", size = 523557, upload-time = "2025-05-18T19:03:56.386Z" },
    { url = "https://files.pythonhosted.org/packages/2f/09/bc1661fbbcbeb6244bd2904ff3a06f340aa77a2b94e5a7373fd165960ea3/jiter-0.10.0-cp312-cp312-musllinux_1_1_x86_64.whl", hash = "sha256:533efbce2cacec78d5ba73a41756beff8431dfa1694b6346ce7af3a12c42202b", size = 514202, upload-time = "2025-05-18T19:03:57.675Z" },
    { url = "https://files.pythonhosted.org/packages/1b/84/5a5d5400e9d4d54b8004c9673bbe4403928a00d28529ff35b19e9d176b19/jiter-0.10.0-cp312-cp312-win32.whl", hash = "sha256:8be921f0cadd245e981b964dfbcd6fd4bc4e254cdc069490416dd7a2632ecc01", size = 211781, upload-time = "2025-05-18T19:03:59.025Z" },
    { url = "https://files.pythonhosted.org/packages/9b/52/7ec47455e26f2d6e5f2ea4951a0652c06e5b995c291f723973ae9e724a65/jiter-0.10.0-cp312-cp312-win_amd64.whl", hash = "sha256:a7c7d785ae9dda68c2678532a5a1581347e9c15362ae9f6e68f3fdbfb64f2e49", size = 206176, upload-time = "2025-05-18T19:04:00.305Z" },
    { url = "https://files.pythonhosted.org/packages/2e/b0/279597e7a270e8d22623fea6c5d4eeac328e7d95c236ed51a2b884c54f70/jiter-0.10.0-cp313-cp313-macosx_10_12_x86_64.whl", hash = "sha256:e0588107ec8e11b6f5ef0e0d656fb2803ac6cf94a96b2b9fc675c0e3ab5e8644", size = 311617, upload-time = "2025-05-18T19:04:02.078Z" },
    { url = "https://files.pythonhosted.org/packages/91/e3/0916334936f356d605f54cc164af4060e3e7094364add445a3bc79335d46/jiter-0.10.0-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:cafc4628b616dc32530c20ee53d71589816cf385dd9449633e910d596b1f5c8a", size = 318947, upload-time = "2025-05-18T19:04:03.347Z" },
    { url = "https://files.pythonhosted.org/packages/6a/8e/fd94e8c02d0e94539b7d669a7ebbd2776e51f329bb2c84d4385e8063a2ad/jiter-0.10.0-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:520ef6d981172693786a49ff5b09eda72a42e539f14788124a07530f785c3ad6", size = 344618, upload-time = "2025-05-18T19:04:04.709Z" },
    { url = "https://files.pythonhosted.org/packages/6f/b0/f9f0a2ec42c6e9c2e61c327824687f1e2415b767e1089c1d9135f43816bd/jiter-0.10.0-cp313-cp313-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:554dedfd05937f8fc45d17ebdf298fe7e0c77458232bcb73d9fbbf4c6455f5b3", size = 368829, upload-time = "2025-05-18T19:04:06.912Z" },
    { url = "https://files.pythonhosted.org/packages/e8/57/5bbcd5331910595ad53b9fd0c610392ac68692176f05ae48d6ce5c852967/jiter-0.10.0-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:5bc299da7789deacf95f64052d97f75c16d4fc8c4c214a22bf8d859a4288a1c2", size = 491034, upload-time = "2025-05-18T19:04:08.222Z" },
    { url = "https://files.pythonhosted.org/packages/9b/be/c393df00e6e6e9e623a73551774449f2f23b6ec6a502a3297aeeece2c65a/jiter-0.10.0-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:5161e201172de298a8a1baad95eb85db4fb90e902353b1f6a41d64ea64644e25", size = 388529, upload-time = "2025-05-18T19:04:09.566Z" },
    { url = "https://files.pythonhosted.org/packages/42/3e/df2235c54d365434c7f150b986a6e35f41ebdc2f95acea3036d99613025d/jiter-0.10.0-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:2e2227db6ba93cb3e2bf67c87e594adde0609f146344e8207e8730364db27041", size = 350671, upload-time = "2025-05-18T19:04:10.98Z" },
    { url = "https://files.pythonhosted.org/packages/c6/77/71b0b24cbcc28f55ab4dbfe029f9a5b73aeadaba677843fc6dc9ed2b1d0a/jiter-0.10.0-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.whl", hash = "sha256:15acb267ea5e2c64515574b06a8bf393fbfee6a50eb1673614aa45f4613c0cca", size = 390864, upload-time = "2025-05-18T19:04:12.722Z" },
    { url = "https://files.pythonhosted.org/packages/6a/d3/ef774b6969b9b6178e1d1e7a89a3bd37d241f3d3ec5f8deb37bbd203714a/jiter-0.10.0-cp313-cp313-musllinux_1_1_aarch64.whl", hash = "sha256:901b92f2e2947dc6dfcb52fd624453862e16665ea909a08398dde19c0731b7f4", size = 522989, upload-time = "2025-05-18T19:04:14.261Z" },
    { url = "https://files.pythonhosted.org/packages/0c/41/9becdb1d8dd5d854142f45a9d71949ed7e87a8e312b0bede2de849388cb9/jiter-0.10.0-cp313-cp313-musllinux_1_1_x86_64.whl", hash = "sha256:d0cb9a125d5a3ec971a094a845eadde2db0de85b33c9f13eb94a0c63d463879e", size = 513495, upload-time = "2025-05-18T19:04:15.603Z" },
    { url = "https://files.pythonhosted.org/packages/9c/36/3468e5a18238bdedae7c4d19461265b5e9b8e288d3f86cd89d00cbb48686/jiter-0.10.0-cp313-cp313-win32.whl", hash = "sha256:48a403277ad1ee208fb930bdf91745e4d2d6e47253eedc96e2559d1e6527006d", size = 211289, upload-time = "2025-05-18T19:04:17.541Z" },
    { url = "https://files.pythonhosted.org/packages/7e/07/1c96b623128bcb913706e294adb5f768fb7baf8db5e1338ce7b4ee8c78ef/jiter-0.10.0-cp313-cp313-win_amd64.whl", hash = "sha256:75f9eb72ecb640619c29bf714e78c9c46c9c4eaafd644bf78577ede459f330d4", size = 205074, upload-time = "2025-05-18T19:04:19.21Z" },
    { url = "https://files.pythonhosted.org/packages/54/46/caa2c1342655f57d8f0f2519774c6d67132205909c65e9aa8255e1d7b4f4/jiter-0.10.0-cp313-cp313t-macosx_11_0_arm64.whl", hash = "sha256:28ed2a4c05a1f32ef0e1d24c2611330219fed727dae01789f4a335617634b1ca", size = 318225, upload-time = "2025-05-18T19:04:20.583Z" },
    { url = "https://files.pythonhosted.org/packages/43/84/c7d44c75767e18946219ba2d703a5a32ab37b0bc21886a97bc6062e4da42/jiter-0.10.0-cp313-cp313t-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:14a4c418b1ec86a195f1ca69da8b23e8926c752b685af665ce30777233dfe070", size = 350235, upload-time = "2025-05-18T19:04:22.363Z" },
    { url = "https://files.pythonhosted.org/packages/01/16/f5a0135ccd968b480daad0e6ab34b0c7c5ba3bc447e5088152696140dcb3/jiter-0.10.0-cp313-cp313t-win_amd64.whl", hash = "sha256:d7bfed2fe1fe0e4dda6ef682cee888ba444b21e7a6553e03252e4feb6cf0adca", size = 207278, upload-time = "2025-05-18T19:04:23.627Z" },
    { url = "https://files.pythonhosted.org/packages/1c/9b/1d646da42c3de6c2188fdaa15bce8ecb22b635904fc68be025e21249ba44/jiter-0.10.0-cp314-cp314-macosx_10_12_x86_64.whl", hash = "sha256:5e9251a5e83fab8d87799d3e1a46cb4b7f2919b895c6f4483629ed2446f66522", size = 310866, upload-time = "2025-05-18T19:04:24.891Z" },
    { url = "https://files.pythonhosted.org/packages/ad/0e/26538b158e8a7c7987e94e7aeb2999e2e82b1f9d2e1f6e9874ddf71ebda0/jiter-0.10.0-cp314-cp314-macosx_11_0_arm64.whl", hash = "sha256:023aa0204126fe5b87ccbcd75c8a0d0261b9abdbbf46d55e7ae9f8e22424eeb8", size = 318772, upload-time = "2025-05-18T19:04:26.161Z" },
    { url = "https://files.pythonhosted.org/packages/7b/fb/d302893151caa1c2636d6574d213e4b34e31fd077af6050a9c5cbb42f6fb/jiter-0.10.0-cp314-cp314-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:3c189c4f1779c05f75fc17c0c1267594ed918996a231593a21a5ca5438445216", size = 344534, upload-time = "2025-05-18T19:04:27.495Z" },
    { url = "https://files.pythonhosted.org/packages/01/d8/5780b64a149d74e347c5128d82176eb1e3241b1391ac07935693466d6219/jiter-0.10.0-cp314-cp314-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:15720084d90d1098ca0229352607cd68256c76991f6b374af96f36920eae13c4", size = 369087, upload-time = "2025-05-18T19:04:28.896Z" },
    { url = "https://files.pythonhosted.org/packages/e8/5b/f235a1437445160e777544f3ade57544daf96ba7e96c1a5b24a6f7ac7004/jiter-0.10.0-cp314-cp314-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:e4f2fb68e5f1cfee30e2b2a09549a00683e0fde4c6a2ab88c94072fc33cb7426", size = 490694, upload-time = "2025-05-18T19:04:30.183Z" },
    { url = "https://files.pythonhosted.org/packages/85/a9/9c3d4617caa2ff89cf61b41e83820c27ebb3f7b5fae8a72901e8cd6ff9be/jiter-0.10.0-cp314-cp314-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:ce541693355fc6da424c08b7edf39a2895f58d6ea17d92cc2b168d20907dee12", size = 388992, upload-time = "2025-05-18T19:04:32.028Z" },
    { url = "https://files.pythonhosted.org/packages/68/b1/344fd14049ba5c94526540af7eb661871f9c54d5f5601ff41a959b9a0bbd/jiter-0.10.0-cp314-cp314-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:31c50c40272e189d50006ad5c73883caabb73d4e9748a688b216e85a9a9ca3b9", size = 351723, upload-time = "2025-05-18T19:04:33.467Z" },
    { url = "https://files.pythonhosted.org/packages/41/89/4c0e345041186f82a31aee7b9d4219a910df672b9fef26f129f0cda07a29/jiter-0.10.0-cp314-cp314-manylinux_2_5_i686.manylinux1_i686.whl", hash = "sha256:fa3402a2ff9815960e0372a47b75c76979d74402448509ccd49a275fa983ef8a", size = 392215, upload-time = "2025-05-18T19:04:34.827Z" },
    { url = "https://files.pythonhosted.org/packages/55/58/ee607863e18d3f895feb802154a2177d7e823a7103f000df182e0f718b38/jiter-0.10.0-cp314-cp314-musllinux_1_1_aarch64.whl", hash = "sha256:1956f934dca32d7bb647ea21d06d93ca40868b505c228556d3373cbd255ce853", size = 522762, upload-time = "2025-05-18T19:04:36.19Z" },
    { url = "https://files.pythonhosted.org/packages/15/d0/9123fb41825490d16929e73c212de9a42913d68324a8ce3c8476cae7ac9d/jiter-0.10.0-cp314-cp314-musllinux_1_1_x86_64.whl", hash = "sha256:fcedb049bdfc555e261d6f65a6abe1d5ad68825b7202ccb9692636c70fcced86", size = 513427, upload-time = "2025-05-18T19:04:37.544Z" },
    { url = "https://files.pythonhosted.org/packages/d8/b3/2bd02071c5a2430d0b70403a34411fc519c2f227da7b03da9ba6a956f931/jiter-0.10.0-cp314-cp314-win32.whl", hash = "sha256:ac509f7eccca54b2a29daeb516fb95b6f0bd0d0d8084efaf8ed5dfc7b9f0b357", size = 210127, upload-time = "2025-05-18T19:04:38.837Z" },
    { url = "https://files.pythonhosted.org/packages/03/0c/5fe86614ea050c3ecd728ab4035534387cd41e7c1855ef6c031f1ca93e3f/jiter-0.10.0-cp314-cp314t-macosx_11_0_arm64.whl", hash = "sha256:5ed975b83a2b8639356151cef5c0d597c68376fc4922b45d0eb384ac058cfa00", size = 318527, upload-time = "2025-05-18T19:04:40.612Z" },
    { url = "https://files.pythonhosted.org/packages/b3/4a/4175a563579e884192ba6e81725fc0448b042024419be8d83aa8a80a3f44/jiter-0.10.0-cp314-cp314t-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:3aa96f2abba33dc77f79b4cf791840230375f9534e5fac927ccceb58c5e604a5", size = 354213, upload-time = "2025-05-18T19:04:41.894Z" },
]

[[package]]
name = "loguru"
version = "0.7.3"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "colorama", marker = "sys_platform == 'win32'" },
    { name = "win32-setctime", marker = "sys_platform == 'win32'" },
]
sdist = { url = "https://files.pythonhosted.org/packages/3a/05/a1dae3dffd1116099471c643b8924f5aa6524411dc6c63fdae648c4f1aca/loguru-0.7.3.tar.gz", hash = "sha256:19480589e77d47b8d85b2c827ad95d49bf31b0dcde16593892eb51dd18706eb6", size = 63559, upload-time = "2024-12-06T11:20:56.608Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/0c/29/0348de65b8cc732daa3e33e67806420b2ae89bdce2b04af740289c5c6c8c/loguru-0.7.3-py3-none-any.whl", hash = "sha256:31a33c10c8e1e10422bfd431aeb5d351c7cf7fa671e3c4df004162264b28220c", size = 61595, upload-time = "2024-12-06T11:20:54.538Z" },
]

[[package]]
name = "multidict"
version = "6.6.3"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/3d/2c/5dad12e82fbdf7470f29bff2171484bf07cb3b16ada60a6589af8f376440/multidict-6.6.3.tar.gz", hash = "sha256:798a9eb12dab0a6c2e29c1de6f3468af5cb2da6053a20dfa3344907eed0937cc", size = 101006, upload-time = "2025-06-30T15:53:46.929Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/0e/a0/6b57988ea102da0623ea814160ed78d45a2645e4bbb499c2896d12833a70/multidict-6.6.3-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:056bebbeda16b2e38642d75e9e5310c484b7c24e3841dc0fb943206a72ec89d6", size = 76514, upload-time = "2025-06-30T15:51:48.728Z" },
    { url = "https://files.pythonhosted.org/packages/07/7a/d1e92665b0850c6c0508f101f9cf0410c1afa24973e1115fe9c6a185ebf7/multidict-6.6.3-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:e5f481cccb3c5c5e5de5d00b5141dc589c1047e60d07e85bbd7dea3d4580d63f", size = 45394, upload-time = "2025-06-30T15:51:49.986Z" },
    { url = "https://files.pythonhosted.org/packages/52/6f/dd104490e01be6ef8bf9573705d8572f8c2d2c561f06e3826b081d9e6591/multidict-6.6.3-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:10bea2ee839a759ee368b5a6e47787f399b41e70cf0c20d90dfaf4158dfb4e55", size = 43590, upload-time = "2025-06-30T15:51:51.331Z" },
    { url = "https://files.pythonhosted.org/packages/44/fe/06e0e01b1b0611e6581b7fd5a85b43dacc08b6cea3034f902f383b0873e5/multidict-6.6.3-cp312-cp312-manylinux1_i686.manylinux2014_i686.manylinux_2_17_i686.manylinux_2_5_i686.whl", hash = "sha256:2334cfb0fa9549d6ce2c21af2bfbcd3ac4ec3646b1b1581c88e3e2b1779ec92b", size = 237292, upload-time = "2025-06-30T15:51:52.584Z" },
    { url = "https://files.pythonhosted.org/packages/ce/71/4f0e558fb77696b89c233c1ee2d92f3e1d5459070a0e89153c9e9e804186/multidict-6.6.3-cp312-cp312-manylinux2014_aarch64.manylinux_2_17_aarch64.manylinux_2_28_aarch64.whl", hash = "sha256:b8fee016722550a2276ca2cb5bb624480e0ed2bd49125b2b73b7010b9090e888", size = 258385, upload-time = "2025-06-30T15:51:53.913Z" },
    { url = "https://files.pythonhosted.org/packages/e3/25/cca0e68228addad24903801ed1ab42e21307a1b4b6dd2cf63da5d3ae082a/multidict-6.6.3-cp312-cp312-manylinux2014_armv7l.manylinux_2_17_armv7l.manylinux_2_31_armv7l.whl", hash = "sha256:e5511cb35f5c50a2db21047c875eb42f308c5583edf96bd8ebf7d770a9d68f6d", size = 242328, upload-time = "2025-06-30T15:51:55.672Z" },
    { url = "https://files.pythonhosted.org/packages/6e/a3/46f2d420d86bbcb8fe660b26a10a219871a0fbf4d43cb846a4031533f3e0/multidict-6.6.3-cp312-cp312-manylinux2014_ppc64le.manylinux_2_17_ppc64le.manylinux_2_28_ppc64le.whl", hash = "sha256:712b348f7f449948e0a6c4564a21c7db965af900973a67db432d724619b3c680", size = 268057, upload-time = "2025-06-30T15:51:57.037Z" },
    { url = "https://files.pythonhosted.org/packages/9e/73/1c743542fe00794a2ec7466abd3f312ccb8fad8dff9f36d42e18fb1ec33e/multidict-6.6.3-cp312-cp312-manylinux2014_s390x.manylinux_2_17_s390x.manylinux_2_28_s390x.whl", hash = "sha256:e4e15d2138ee2694e038e33b7c3da70e6b0ad8868b9f8094a72e1414aeda9c1a", size = 269341, upload-time = "2025-06-30T15:51:59.111Z" },
    { url = "https://files.pythonhosted.org/packages/a4/11/6ec9dcbe2264b92778eeb85407d1df18812248bf3506a5a1754bc035db0c/multidict-6.6.3-cp312-cp312-manylinux2014_x86_64.manylinux_2_17_x86_64.manylinux_2_28_x86_64.whl", hash = "sha256:8df25594989aebff8a130f7899fa03cbfcc5d2b5f4a461cf2518236fe6f15961", size = 256081, upload-time = "2025-06-30T15:52:00.533Z" },
    { url = "https://files.pythonhosted.org/packages/9b/2b/631b1e2afeb5f1696846d747d36cda075bfdc0bc7245d6ba5c319278d6c4/multidict-6.6.3-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:159ca68bfd284a8860f8d8112cf0521113bffd9c17568579e4d13d1f1dc76b65", size = 253581, upload-time = "2025-06-30T15:52:02.43Z" },
    { url = "https://files.pythonhosted.org/packages/bf/0e/7e3b93f79efeb6111d3bf9a1a69e555ba1d07ad1c11bceb56b7310d0d7ee/multidict-6.6.3-cp312-cp312-musllinux_1_2_armv7l.whl", hash = "sha256:e098c17856a8c9ade81b4810888c5ad1914099657226283cab3062c0540b0643", size = 250750, upload-time = "2025-06-30T15:52:04.26Z" },
    { url = "https://files.pythonhosted.org/packages/ad/9e/086846c1d6601948e7de556ee464a2d4c85e33883e749f46b9547d7b0704/multidict-6.6.3-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:67c92ed673049dec52d7ed39f8cf9ebbadf5032c774058b4406d18c8f8fe7063", size = 251548, upload-time = "2025-06-30T15:52:06.002Z" },
    { url = "https://files.pythonhosted.org/packages/8c/7b/86ec260118e522f1a31550e87b23542294880c97cfbf6fb18cc67b044c66/multidict-6.6.3-cp312-cp312-musllinux_1_2_ppc64le.whl", hash = "sha256:bd0578596e3a835ef451784053cfd327d607fc39ea1a14812139339a18a0dbc3", size = 262718, upload-time = "2025-06-30T15:52:07.707Z" },
    { url = "https://files.pythonhosted.org/packages/8c/bd/22ce8f47abb0be04692c9fc4638508b8340987b18691aa7775d927b73f72/multidict-6.6.3-cp312-cp312-musllinux_1_2_s390x.whl", hash = "sha256:346055630a2df2115cd23ae271910b4cae40f4e336773550dca4889b12916e75", size = 259603, upload-time = "2025-06-30T15:52:09.58Z" },
    { url = "https://files.pythonhosted.org/packages/07/9c/91b7ac1691be95cd1f4a26e36a74b97cda6aa9820632d31aab4410f46ebd/multidict-6.6.3-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:555ff55a359302b79de97e0468e9ee80637b0de1fce77721639f7cd9440b3a10", size = 251351, upload-time = "2025-06-30T15:52:10.947Z" },
    { url = "https://files.pythonhosted.org/packages/6f/5c/4d7adc739884f7a9fbe00d1eac8c034023ef8bad71f2ebe12823ca2e3649/multidict-6.6.3-cp312-cp312-win32.whl", hash = "sha256:73ab034fb8d58ff85c2bcbadc470efc3fafeea8affcf8722855fb94557f14cc5", size = 41860, upload-time = "2025-06-30T15:52:12.334Z" },
    { url = "https://files.pythonhosted.org/packages/6a/a3/0fbc7afdf7cb1aa12a086b02959307848eb6bcc8f66fcb66c0cb57e2a2c1/multidict-6.6.3-cp312-cp312-win_amd64.whl", hash = "sha256:04cbcce84f63b9af41bad04a54d4cc4e60e90c35b9e6ccb130be2d75b71f8c17", size = 45982, upload-time = "2025-06-30T15:52:13.6Z" },
    { url = "https://files.pythonhosted.org/packages/b8/95/8c825bd70ff9b02462dc18d1295dd08d3e9e4eb66856d292ffa62cfe1920/multidict-6.6.3-cp312-cp312-win_arm64.whl", hash = "sha256:0f1130b896ecb52d2a1e615260f3ea2af55fa7dc3d7c3003ba0c3121a759b18b", size = 43210, upload-time = "2025-06-30T15:52:14.893Z" },
    { url = "https://files.pythonhosted.org/packages/52/1d/0bebcbbb4f000751fbd09957257903d6e002943fc668d841a4cf2fb7f872/multidict-6.6.3-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:540d3c06d48507357a7d57721e5094b4f7093399a0106c211f33540fdc374d55", size = 75843, upload-time = "2025-06-30T15:52:16.155Z" },
    { url = "https://files.pythonhosted.org/packages/07/8f/cbe241b0434cfe257f65c2b1bcf9e8d5fb52bc708c5061fb29b0fed22bdf/multidict-6.6.3-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:9c19cea2a690f04247d43f366d03e4eb110a0dc4cd1bbeee4d445435428ed35b", size = 45053, upload-time = "2025-06-30T15:52:17.429Z" },
    { url = "https://files.pythonhosted.org/packages/32/d2/0b3b23f9dbad5b270b22a3ac3ea73ed0a50ef2d9a390447061178ed6bdb8/multidict-6.6.3-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:7af039820cfd00effec86bda5d8debef711a3e86a1d3772e85bea0f243a4bd65", size = 43273, upload-time = "2025-06-30T15:52:19.346Z" },
    { url = "https://files.pythonhosted.org/packages/fd/fe/6eb68927e823999e3683bc49678eb20374ba9615097d085298fd5b386564/multidict-6.6.3-cp313-cp313-manylinux1_i686.manylinux2014_i686.manylinux_2_17_i686.manylinux_2_5_i686.whl", hash = "sha256:500b84f51654fdc3944e936f2922114349bf8fdcac77c3092b03449f0e5bc2b3", size = 237124, upload-time = "2025-06-30T15:52:20.773Z" },
    { url = "https://files.pythonhosted.org/packages/e7/ab/320d8507e7726c460cb77117848b3834ea0d59e769f36fdae495f7669929/multidict-6.6.3-cp313-cp313-manylinux2014_aarch64.manylinux_2_17_aarch64.manylinux_2_28_aarch64.whl", hash = "sha256:f3fc723ab8a5c5ed6c50418e9bfcd8e6dceba6c271cee6728a10a4ed8561520c", size = 256892, upload-time = "2025-06-30T15:52:22.242Z" },
    { url = "https://files.pythonhosted.org/packages/76/60/38ee422db515ac69834e60142a1a69111ac96026e76e8e9aa347fd2e4591/multidict-6.6.3-cp313-cp313-manylinux2014_armv7l.manylinux_2_17_armv7l.manylinux_2_31_armv7l.whl", hash = "sha256:94c47ea3ade005b5976789baaed66d4de4480d0a0bf31cef6edaa41c1e7b56a6", size = 240547, upload-time = "2025-06-30T15:52:23.736Z" },
    { url = "https://files.pythonhosted.org/packages/27/fb/905224fde2dff042b030c27ad95a7ae744325cf54b890b443d30a789b80e/multidict-6.6.3-cp313-cp313-manylinux2014_ppc64le.manylinux_2_17_ppc64le.manylinux_2_28_ppc64le.whl", hash = "sha256:dbc7cf464cc6d67e83e136c9f55726da3a30176f020a36ead246eceed87f1cd8", size = 266223, upload-time = "2025-06-30T15:52:25.185Z" },
    { url = "https://files.pythonhosted.org/packages/76/35/dc38ab361051beae08d1a53965e3e1a418752fc5be4d3fb983c5582d8784/multidict-6.6.3-cp313-cp313-manylinux2014_s390x.manylinux_2_17_s390x.manylinux_2_28_s390x.whl", hash = "sha256:900eb9f9da25ada070f8ee4a23f884e0ee66fe4e1a38c3af644256a508ad81ca", size = 267262, upload-time = "2025-06-30T15:52:26.969Z" },
    { url = "https://files.pythonhosted.org/packages/1f/a3/0a485b7f36e422421b17e2bbb5a81c1af10eac1d4476f2ff92927c730479/multidict-6.6.3-cp313-cp313-manylinux2014_x86_64.manylinux_2_17_x86_64.manylinux_2_28_x86_64.whl", hash = "sha256:7c6df517cf177da5d47ab15407143a89cd1a23f8b335f3a28d57e8b0a3dbb884", size = 254345, upload-time = "2025-06-30T15:52:28.467Z" },
    { url = "https://files.pythonhosted.org/packages/b4/59/bcdd52c1dab7c0e0d75ff19cac751fbd5f850d1fc39172ce809a74aa9ea4/multidict-6.6.3-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:4ef421045f13879e21c994b36e728d8e7d126c91a64b9185810ab51d474f27e7", size = 252248, upload-time = "2025-06-30T15:52:29.938Z" },
    { url = "https://files.pythonhosted.org/packages/bb/a4/2d96aaa6eae8067ce108d4acee6f45ced5728beda55c0f02ae1072c730d1/multidict-6.6.3-cp313-cp313-musllinux_1_2_armv7l.whl", hash = "sha256:6c1e61bb4f80895c081790b6b09fa49e13566df8fbff817da3f85b3a8192e36b", size = 250115, upload-time = "2025-06-30T15:52:31.416Z" },
    { url = "https://files.pythonhosted.org/packages/25/d2/ed9f847fa5c7d0677d4f02ea2c163d5e48573de3f57bacf5670e43a5ffaa/multidict-6.6.3-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:e5e8523bb12d7623cd8300dbd91b9e439a46a028cd078ca695eb66ba31adee3c", size = 249649, upload-time = "2025-06-30T15:52:32.996Z" },
    { url = "https://files.pythonhosted.org/packages/1f/af/9155850372563fc550803d3f25373308aa70f59b52cff25854086ecb4a79/multidict-6.6.3-cp313-cp313-musllinux_1_2_ppc64le.whl", hash = "sha256:ef58340cc896219e4e653dade08fea5c55c6df41bcc68122e3be3e9d873d9a7b", size = 261203, upload-time = "2025-06-30T15:52:34.521Z" },
    { url = "https://files.pythonhosted.org/packages/36/2f/c6a728f699896252cf309769089568a33c6439626648843f78743660709d/multidict-6.6.3-cp313-cp313-musllinux_1_2_s390x.whl", hash = "sha256:fc9dc435ec8699e7b602b94fe0cd4703e69273a01cbc34409af29e7820f777f1", size = 258051, upload-time = "2025-06-30T15:52:35.999Z" },
    { url = "https://files.pythonhosted.org/packages/d0/60/689880776d6b18fa2b70f6cc74ff87dd6c6b9b47bd9cf74c16fecfaa6ad9/multidict-6.6.3-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:9e864486ef4ab07db5e9cb997bad2b681514158d6954dd1958dfb163b83d53e6", size = 249601, upload-time = "2025-06-30T15:52:37.473Z" },
    { url = "https://files.pythonhosted.org/packages/75/5e/325b11f2222a549019cf2ef879c1f81f94a0d40ace3ef55cf529915ba6cc/multidict-6.6.3-cp313-cp313-win32.whl", hash = "sha256:5633a82fba8e841bc5c5c06b16e21529573cd654f67fd833650a215520a6210e", size = 41683, upload-time = "2025-06-30T15:52:38.927Z" },
    { url = "https://files.pythonhosted.org/packages/b1/ad/cf46e73f5d6e3c775cabd2a05976547f3f18b39bee06260369a42501f053/multidict-6.6.3-cp313-cp313-win_amd64.whl", hash = "sha256:e93089c1570a4ad54c3714a12c2cef549dc9d58e97bcded193d928649cab78e9", size = 45811, upload-time = "2025-06-30T15:52:40.207Z" },
    { url = "https://files.pythonhosted.org/packages/c5/c9/2e3fe950db28fb7c62e1a5f46e1e38759b072e2089209bc033c2798bb5ec/multidict-6.6.3-cp313-cp313-win_arm64.whl", hash = "sha256:c60b401f192e79caec61f166da9c924e9f8bc65548d4246842df91651e83d600", size = 43056, upload-time = "2025-06-30T15:52:41.575Z" },
    { url = "https://files.pythonhosted.org/packages/3a/58/aaf8114cf34966e084a8cc9517771288adb53465188843d5a19862cb6dc3/multidict-6.6.3-cp313-cp313t-macosx_10_13_universal2.whl", hash = "sha256:02fd8f32d403a6ff13864b0851f1f523d4c988051eea0471d4f1fd8010f11134", size = 82811, upload-time = "2025-06-30T15:52:43.281Z" },
    { url = "https://files.pythonhosted.org/packages/71/af/5402e7b58a1f5b987a07ad98f2501fdba2a4f4b4c30cf114e3ce8db64c87/multidict-6.6.3-cp313-cp313t-macosx_10_13_x86_64.whl", hash = "sha256:f3aa090106b1543f3f87b2041eef3c156c8da2aed90c63a2fbed62d875c49c37", size = 48304, upload-time = "2025-06-30T15:52:45.026Z" },
    { url = "https://files.pythonhosted.org/packages/39/65/ab3c8cafe21adb45b24a50266fd747147dec7847425bc2a0f6934b3ae9ce/multidict-6.6.3-cp313-cp313t-macosx_11_0_arm64.whl", hash = "sha256:e924fb978615a5e33ff644cc42e6aa241effcf4f3322c09d4f8cebde95aff5f8", size = 46775, upload-time = "2025-06-30T15:52:46.459Z" },
    { url = "https://files.pythonhosted.org/packages/49/ba/9fcc1b332f67cc0c0c8079e263bfab6660f87fe4e28a35921771ff3eea0d/multidict-6.6.3-cp313-cp313t-manylinux1_i686.manylinux2014_i686.manylinux_2_17_i686.manylinux_2_5_i686.whl", hash = "sha256:b9fe5a0e57c6dbd0e2ce81ca66272282c32cd11d31658ee9553849d91289e1c1", size = 229773, upload-time = "2025-06-30T15:52:47.88Z" },
    { url = "https://files.pythonhosted.org/packages/a4/14/0145a251f555f7c754ce2dcbcd012939bbd1f34f066fa5d28a50e722a054/multidict-6.6.3-cp313-cp313t-manylinux2014_aarch64.manylinux_2_17_aarch64.manylinux_2_28_aarch64.whl", hash = "sha256:b24576f208793ebae00280c59927c3b7c2a3b1655e443a25f753c4611bc1c373", size = 250083, upload-time = "2025-06-30T15:52:49.366Z" },
    { url = "https://files.pythonhosted.org/packages/9e/d4/d5c0bd2bbb173b586c249a151a26d2fb3ec7d53c96e42091c9fef4e1f10c/multidict-6.6.3-cp313-cp313t-manylinux2014_armv7l.manylinux_2_17_armv7l.manylinux_2_31_armv7l.whl", hash = "sha256:135631cb6c58eac37d7ac0df380294fecdc026b28837fa07c02e459c7fb9c54e", size = 228980, upload-time = "2025-06-30T15:52:50.903Z" },
    { url = "https://files.pythonhosted.org/packages/21/32/c9a2d8444a50ec48c4733ccc67254100c10e1c8ae8e40c7a2d2183b59b97/multidict-6.6.3-cp313-cp313t-manylinux2014_ppc64le.manylinux_2_17_ppc64le.manylinux_2_28_ppc64le.whl", hash = "sha256:274d416b0df887aef98f19f21578653982cfb8a05b4e187d4a17103322eeaf8f", size = 257776, upload-time = "2025-06-30T15:52:52.764Z" },
    { url = "https://files.pythonhosted.org/packages/68/d0/14fa1699f4ef629eae08ad6201c6b476098f5efb051b296f4c26be7a9fdf/multidict-6.6.3-cp313-cp313t-manylinux2014_s390x.manylinux_2_17_s390x.manylinux_2_28_s390x.whl", hash = "sha256:e252017a817fad7ce05cafbe5711ed40faeb580e63b16755a3a24e66fa1d87c0", size = 256882, upload-time = "2025-06-30T15:52:54.596Z" },
    { url = "https://files.pythonhosted.org/packages/da/88/84a27570fbe303c65607d517a5f147cd2fc046c2d1da02b84b17b9bdc2aa/multidict-6.6.3-cp313-cp313t-manylinux2014_x86_64.manylinux_2_17_x86_64.manylinux_2_28_x86_64.whl", hash = "sha256:2e4cc8d848cd4fe1cdee28c13ea79ab0ed37fc2e89dd77bac86a2e7959a8c3bc", size = 247816, upload-time = "2025-06-30T15:52:56.175Z" },
    { url = "https://files.pythonhosted.org/packages/1c/60/dca352a0c999ce96a5d8b8ee0b2b9f729dcad2e0b0c195f8286269a2074c/multidict-6.6.3-cp313-cp313t-musllinux_1_2_aarch64.whl", hash = "sha256:9e236a7094b9c4c1b7585f6b9cca34b9d833cf079f7e4c49e6a4a6ec9bfdc68f", size = 245341, upload-time = "2025-06-30T15:52:57.752Z" },
    { url = "https://files.pythonhosted.org/packages/50/ef/433fa3ed06028f03946f3993223dada70fb700f763f70c00079533c34578/multidict-6.6.3-cp313-cp313t-musllinux_1_2_armv7l.whl", hash = "sha256:e0cb0ab69915c55627c933f0b555a943d98ba71b4d1c57bc0d0a66e2567c7471", size = 235854, upload-time = "2025-06-30T15:52:59.74Z" },
    { url = "https://files.pythonhosted.org/packages/1b/1f/487612ab56fbe35715320905215a57fede20de7db40a261759690dc80471/multidict-6.6.3-cp313-cp313t-musllinux_1_2_i686.whl", hash = "sha256:81ef2f64593aba09c5212a3d0f8c906a0d38d710a011f2f42759704d4557d3f2", size = 243432, upload-time = "2025-06-30T15:53:01.602Z" },
    { url = "https://files.pythonhosted.org/packages/da/6f/ce8b79de16cd885c6f9052c96a3671373d00c59b3ee635ea93e6e81b8ccf/multidict-6.6.3-cp313-cp313t-musllinux_1_2_ppc64le.whl", hash = "sha256:b9cbc60010de3562545fa198bfc6d3825df430ea96d2cc509c39bd71e2e7d648", size = 252731, upload-time = "2025-06-30T15:53:03.517Z" },
    { url = "https://files.pythonhosted.org/packages/bb/fe/a2514a6aba78e5abefa1624ca85ae18f542d95ac5cde2e3815a9fbf369aa/multidict-6.6.3-cp313-cp313t-musllinux_1_2_s390x.whl", hash = "sha256:70d974eaaa37211390cd02ef93b7e938de564bbffa866f0b08d07e5e65da783d", size = 247086, upload-time = "2025-06-30T15:53:05.48Z" },
    { url = "https://files.pythonhosted.org/packages/8c/22/b788718d63bb3cce752d107a57c85fcd1a212c6c778628567c9713f9345a/multidict-6.6.3-cp313-cp313t-musllinux_1_2_x86_64.whl", hash = "sha256:3713303e4a6663c6d01d648a68f2848701001f3390a030edaaf3fc949c90bf7c", size = 243338, upload-time = "2025-06-30T15:53:07.522Z" },
    { url = "https://files.pythonhosted.org/packages/22/d6/fdb3d0670819f2228f3f7d9af613d5e652c15d170c83e5f1c94fbc55a25b/multidict-6.6.3-cp313-cp313t-win32.whl", hash = "sha256:639ecc9fe7cd73f2495f62c213e964843826f44505a3e5d82805aa85cac6f89e", size = 47812, upload-time = "2025-06-30T15:53:09.263Z" },
    { url = "https://files.pythonhosted.org/packages/b6/d6/a9d2c808f2c489ad199723197419207ecbfbc1776f6e155e1ecea9c883aa/multidict-6.6.3-cp313-cp313t-win_amd64.whl", hash = "sha256:9f97e181f344a0ef3881b573d31de8542cc0dbc559ec68c8f8b5ce2c2e91646d", size = 53011, upload-time = "2025-06-30T15:53:11.038Z" },
    { url = "https://files.pythonhosted.org/packages/f2/40/b68001cba8188dd267590a111f9661b6256debc327137667e832bf5d66e8/multidict-6.6.3-cp313-cp313t-win_arm64.whl", hash = "sha256:ce8b7693da41a3c4fde5871c738a81490cea5496c671d74374c8ab889e1834fb", size = 45254, upload-time = "2025-06-30T15:53:12.421Z" },
    { url = "https://files.pythonhosted.org/packages/d8/30/9aec301e9772b098c1f5c0ca0279237c9766d94b97802e9888010c64b0ed/multidict-6.6.3-py3-none-any.whl", hash = "sha256:8db10f29c7541fc5da4defd8cd697e1ca429db743fa716325f236079b96f775a", size = 12313, upload-time = "2025-06-30T15:53:45.437Z" },
]

[[package]]
name = "openai"
version = "1.93.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "anyio" },
    { name = "distro" },
    { name = "httpx" },
    { name = "jiter" },
    { name = "pydantic" },
    { name = "sniffio" },
    { name = "tqdm" },
    { name = "typing-extensions" },
]
sdist = { url = "https://files.pythonhosted.org/packages/e4/d7/e91c6a9cf71726420cddf539852ee4c29176ebb716a702d9118d0409fd8e/openai-1.93.0.tar.gz", hash = "sha256:988f31ade95e1ff0585af11cc5a64510225e4f5cd392698c675d0a9265b8e337", size = 486573, upload-time = "2025-06-27T21:21:39.421Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/64/46/a10d9df4673df56f71201d129ba1cb19eaff3366d08c8664d61a7df52e65/openai-1.93.0-py3-none-any.whl", hash = "sha256:3d746fe5498f0dd72e0d9ab706f26c91c0f646bf7459e5629af8ba7c9dbdf090", size = 755038, upload-time = "2025-06-27T21:21:37.532Z" },
]

[[package]]
name = "packaging"
version = "25.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/a1/d4/1fc4078c65507b51b96ca8f8c3ba19e6a61c8253c72794544580a7b6c24d/packaging-25.0.tar.gz", hash = "sha256:d443872c98d677bf60f6a1f2f8c1cb748e8fe762d2bf9d3148b5599295b0fc4f", size = 165727, upload-time = "2025-04-19T11:48:59.673Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/20/12/38679034af332785aac8774540895e234f4d07f7545804097de4b666afd8/packaging-25.0-py3-none-any.whl", hash = "sha256:29572ef2b1f17581046b3a2227d5c611fb25ec70ca1ba8554b24b0e69331a484", size = 66469, upload-time = "2025-04-19T11:48:57.875Z" },
]

[[package]]
name = "pluggy"
version = "1.6.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/f9/e2/3e91f31a7d2b083fe6ef3fa267035b518369d9511ffab804f839851d2779/pluggy-1.6.0.tar.gz", hash = "sha256:7dcc130b76258d33b90f61b658791dede3486c3e6bfb003ee5c9bfb396dd22f3", size = 69412, upload-time = "2025-05-15T12:30:07.975Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/54/20/4d324d65cc6d9205fabedc306948156824eb9f0ee1633355a8f7ec5c66bf/pluggy-1.6.0-py3-none-any.whl", hash = "sha256:e920276dd6813095e9377c0bc5566d94c932c33b27a3e3945d8389c374dd4746", size = 20538, upload-time = "2025-05-15T12:30:06.134Z" },
]

[[package]]
name = "postgrest"
version = "1.1.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "deprecation" },
    { name = "httpx", extra = ["http2"] },
    { name = "pydantic" },
]
sdist = { url = "https://files.pythonhosted.org/packages/6e/3e/1b50568e1f5db0bdced4a82c7887e37326585faef7ca43ead86849cb4861/postgrest-1.1.1.tar.gz", hash = "sha256:f3bb3e8c4602775c75c844a31f565f5f3dd584df4d36d683f0b67d01a86be322", size = 15431, upload-time = "2025-06-23T19:21:34.742Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/a4/71/188a50ea64c17f73ff4df5196ec1553a8f1723421eb2d1069c73bab47d78/postgrest-1.1.1-py3-none-any.whl", hash = "sha256:98a6035ee1d14288484bfe36235942c5fb2d26af6d8120dfe3efbe007859251a", size = 22366, upload-time = "2025-06-23T19:21:33.637Z" },
]

[[package]]
name = "prometheus-client"
version = "0.22.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/5e/cf/40dde0a2be27cc1eb41e333d1a674a74ce8b8b0457269cc640fd42b07cf7/prometheus_client-0.22.1.tar.gz", hash = "sha256:190f1331e783cf21eb60bca559354e0a4d4378facecf78f5428c39b675d20d28", size = 69746, upload-time = "2025-06-02T14:29:01.152Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/32/ae/ec06af4fe3ee72d16973474f122541746196aaa16cea6f66d18b963c6177/prometheus_client-0.22.1-py3-none-any.whl", hash = "sha256:cca895342e308174341b2cbf99a56bef291fbc0ef7b9e5412a0f26d653ba7094", size = 58694, upload-time = "2025-06-02T14:29:00.068Z" },
]

[[package]]
name = "propcache"
version = "0.3.2"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/a6/16/43264e4a779dd8588c21a70f0709665ee8f611211bdd2c87d952cfa7c776/propcache-0.3.2.tar.gz", hash = "sha256:20d7d62e4e7ef05f221e0db2856b979540686342e7dd9973b815599c7057e168", size = 44139, upload-time = "2025-06-09T22:56:06.081Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/a8/42/9ca01b0a6f48e81615dca4765a8f1dd2c057e0540f6116a27dc5ee01dfb6/propcache-0.3.2-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:8de106b6c84506b31c27168582cd3cb3000a6412c16df14a8628e5871ff83c10", size = 73674, upload-time = "2025-06-09T22:54:30.551Z" },
    { url = "https://files.pythonhosted.org/packages/af/6e/21293133beb550f9c901bbece755d582bfaf2176bee4774000bd4dd41884/propcache-0.3.2-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:28710b0d3975117239c76600ea351934ac7b5ff56e60953474342608dbbb6154", size = 43570, upload-time = "2025-06-09T22:54:32.296Z" },
    { url = "https://files.pythonhosted.org/packages/0c/c8/0393a0a3a2b8760eb3bde3c147f62b20044f0ddac81e9d6ed7318ec0d852/propcache-0.3.2-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:ce26862344bdf836650ed2487c3d724b00fbfec4233a1013f597b78c1cb73615", size = 43094, upload-time = "2025-06-09T22:54:33.929Z" },
    { url = "https://files.pythonhosted.org/packages/37/2c/489afe311a690399d04a3e03b069225670c1d489eb7b044a566511c1c498/propcache-0.3.2-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:bca54bd347a253af2cf4544bbec232ab982f4868de0dd684246b67a51bc6b1db", size = 226958, upload-time = "2025-06-09T22:54:35.186Z" },
    { url = "https://files.pythonhosted.org/packages/9d/ca/63b520d2f3d418c968bf596839ae26cf7f87bead026b6192d4da6a08c467/propcache-0.3.2-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:55780d5e9a2ddc59711d727226bb1ba83a22dd32f64ee15594b9392b1f544eb1", size = 234894, upload-time = "2025-06-09T22:54:36.708Z" },
    { url = "https://files.pythonhosted.org/packages/11/60/1d0ed6fff455a028d678df30cc28dcee7af77fa2b0e6962ce1df95c9a2a9/propcache-0.3.2-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:035e631be25d6975ed87ab23153db6a73426a48db688070d925aa27e996fe93c", size = 233672, upload-time = "2025-06-09T22:54:38.062Z" },
    { url = "https://files.pythonhosted.org/packages/37/7c/54fd5301ef38505ab235d98827207176a5c9b2aa61939b10a460ca53e123/propcache-0.3.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:ee6f22b6eaa39297c751d0e80c0d3a454f112f5c6481214fcf4c092074cecd67", size = 224395, upload-time = "2025-06-09T22:54:39.634Z" },
    { url = "https://files.pythonhosted.org/packages/ee/1a/89a40e0846f5de05fdc6779883bf46ba980e6df4d2ff8fb02643de126592/propcache-0.3.2-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:7ca3aee1aa955438c4dba34fc20a9f390e4c79967257d830f137bd5a8a32ed3b", size = 212510, upload-time = "2025-06-09T22:54:41.565Z" },
    { url = "https://files.pythonhosted.org/packages/5e/33/ca98368586c9566a6b8d5ef66e30484f8da84c0aac3f2d9aec6d31a11bd5/propcache-0.3.2-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:7a4f30862869fa2b68380d677cc1c5fcf1e0f2b9ea0cf665812895c75d0ca3b8", size = 222949, upload-time = "2025-06-09T22:54:43.038Z" },
    { url = "https://files.pythonhosted.org/packages/ba/11/ace870d0aafe443b33b2f0b7efdb872b7c3abd505bfb4890716ad7865e9d/propcache-0.3.2-cp312-cp312-musllinux_1_2_armv7l.whl", hash = "sha256:b77ec3c257d7816d9f3700013639db7491a434644c906a2578a11daf13176251", size = 217258, upload-time = "2025-06-09T22:54:44.376Z" },
    { url = "https://files.pythonhosted.org/packages/5b/d2/86fd6f7adffcfc74b42c10a6b7db721d1d9ca1055c45d39a1a8f2a740a21/propcache-0.3.2-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:cab90ac9d3f14b2d5050928483d3d3b8fb6b4018893fc75710e6aa361ecb2474", size = 213036, upload-time = "2025-06-09T22:54:46.243Z" },
    { url = "https://files.pythonhosted.org/packages/07/94/2d7d1e328f45ff34a0a284cf5a2847013701e24c2a53117e7c280a4316b3/propcache-0.3.2-cp312-cp312-musllinux_1_2_ppc64le.whl", hash = "sha256:0b504d29f3c47cf6b9e936c1852246c83d450e8e063d50562115a6be6d3a2535", size = 227684, upload-time = "2025-06-09T22:54:47.63Z" },
    { url = "https://files.pythonhosted.org/packages/b7/05/37ae63a0087677e90b1d14710e532ff104d44bc1efa3b3970fff99b891dc/propcache-0.3.2-cp312-cp312-musllinux_1_2_s390x.whl", hash = "sha256:ce2ac2675a6aa41ddb2a0c9cbff53780a617ac3d43e620f8fd77ba1c84dcfc06", size = 234562, upload-time = "2025-06-09T22:54:48.982Z" },
    { url = "https://files.pythonhosted.org/packages/a4/7c/3f539fcae630408d0bd8bf3208b9a647ccad10976eda62402a80adf8fc34/propcache-0.3.2-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:62b4239611205294cc433845b914131b2a1f03500ff3c1ed093ed216b82621e1", size = 222142, upload-time = "2025-06-09T22:54:50.424Z" },
    { url = "https://files.pythonhosted.org/packages/7c/d2/34b9eac8c35f79f8a962546b3e97e9d4b990c420ee66ac8255d5d9611648/propcache-0.3.2-cp312-cp312-win32.whl", hash = "sha256:df4a81b9b53449ebc90cc4deefb052c1dd934ba85012aa912c7ea7b7e38b60c1", size = 37711, upload-time = "2025-06-09T22:54:52.072Z" },
    { url = "https://files.pythonhosted.org/packages/19/61/d582be5d226cf79071681d1b46b848d6cb03d7b70af7063e33a2787eaa03/propcache-0.3.2-cp312-cp312-win_amd64.whl", hash = "sha256:7046e79b989d7fe457bb755844019e10f693752d169076138abf17f31380800c", size = 41479, upload-time = "2025-06-09T22:54:53.234Z" },
    { url = "https://files.pythonhosted.org/packages/dc/d1/8c747fafa558c603c4ca19d8e20b288aa0c7cda74e9402f50f31eb65267e/propcache-0.3.2-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:ca592ed634a73ca002967458187109265e980422116c0a107cf93d81f95af945", size = 71286, upload-time = "2025-06-09T22:54:54.369Z" },
    { url = "https://files.pythonhosted.org/packages/61/99/d606cb7986b60d89c36de8a85d58764323b3a5ff07770a99d8e993b3fa73/propcache-0.3.2-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:9ecb0aad4020e275652ba3975740f241bd12a61f1a784df044cf7477a02bc252", size = 42425, upload-time = "2025-06-09T22:54:55.642Z" },
    { url = "https://files.pythonhosted.org/packages/8c/96/ef98f91bbb42b79e9bb82bdd348b255eb9d65f14dbbe3b1594644c4073f7/propcache-0.3.2-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:7f08f1cc28bd2eade7a8a3d2954ccc673bb02062e3e7da09bc75d843386b342f", size = 41846, upload-time = "2025-06-09T22:54:57.246Z" },
    { url = "https://files.pythonhosted.org/packages/5b/ad/3f0f9a705fb630d175146cd7b1d2bf5555c9beaed54e94132b21aac098a6/propcache-0.3.2-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:d1a342c834734edb4be5ecb1e9fb48cb64b1e2320fccbd8c54bf8da8f2a84c33", size = 208871, upload-time = "2025-06-09T22:54:58.975Z" },
    { url = "https://files.pythonhosted.org/packages/3a/38/2085cda93d2c8b6ec3e92af2c89489a36a5886b712a34ab25de9fbca7992/propcache-0.3.2-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:8a544caaae1ac73f1fecfae70ded3e93728831affebd017d53449e3ac052ac1e", size = 215720, upload-time = "2025-06-09T22:55:00.471Z" },
    { url = "https://files.pythonhosted.org/packages/61/c1/d72ea2dc83ac7f2c8e182786ab0fc2c7bd123a1ff9b7975bee671866fe5f/propcache-0.3.2-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:310d11aa44635298397db47a3ebce7db99a4cc4b9bbdfcf6c98a60c8d5261cf1", size = 215203, upload-time = "2025-06-09T22:55:01.834Z" },
    { url = "https://files.pythonhosted.org/packages/af/81/b324c44ae60c56ef12007105f1460d5c304b0626ab0cc6b07c8f2a9aa0b8/propcache-0.3.2-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:4c1396592321ac83157ac03a2023aa6cc4a3cc3cfdecb71090054c09e5a7cce3", size = 206365, upload-time = "2025-06-09T22:55:03.199Z" },
    { url = "https://files.pythonhosted.org/packages/09/73/88549128bb89e66d2aff242488f62869014ae092db63ccea53c1cc75a81d/propcache-0.3.2-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:8cabf5b5902272565e78197edb682017d21cf3b550ba0460ee473753f28d23c1", size = 196016, upload-time = "2025-06-09T22:55:04.518Z" },
    { url = "https://files.pythonhosted.org/packages/b9/3f/3bdd14e737d145114a5eb83cb172903afba7242f67c5877f9909a20d948d/propcache-0.3.2-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:0a2f2235ac46a7aa25bdeb03a9e7060f6ecbd213b1f9101c43b3090ffb971ef6", size = 205596, upload-time = "2025-06-09T22:55:05.942Z" },
    { url = "https://files.pythonhosted.org/packages/0f/ca/2f4aa819c357d3107c3763d7ef42c03980f9ed5c48c82e01e25945d437c1/propcache-0.3.2-cp313-cp313-musllinux_1_2_armv7l.whl", hash = "sha256:92b69e12e34869a6970fd2f3da91669899994b47c98f5d430b781c26f1d9f387", size = 200977, upload-time = "2025-06-09T22:55:07.792Z" },
    { url = "https://files.pythonhosted.org/packages/cd/4a/e65276c7477533c59085251ae88505caf6831c0e85ff8b2e31ebcbb949b1/propcache-0.3.2-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:54e02207c79968ebbdffc169591009f4474dde3b4679e16634d34c9363ff56b4", size = 197220, upload-time = "2025-06-09T22:55:09.173Z" },
    { url = "https://files.pythonhosted.org/packages/7c/54/fc7152e517cf5578278b242396ce4d4b36795423988ef39bb8cd5bf274c8/propcache-0.3.2-cp313-cp313-musllinux_1_2_ppc64le.whl", hash = "sha256:4adfb44cb588001f68c5466579d3f1157ca07f7504fc91ec87862e2b8e556b88", size = 210642, upload-time = "2025-06-09T22:55:10.62Z" },
    { url = "https://files.pythonhosted.org/packages/b9/80/abeb4a896d2767bf5f1ea7b92eb7be6a5330645bd7fb844049c0e4045d9d/propcache-0.3.2-cp313-cp313-musllinux_1_2_s390x.whl", hash = "sha256:fd3e6019dc1261cd0291ee8919dd91fbab7b169bb76aeef6c716833a3f65d206", size = 212789, upload-time = "2025-06-09T22:55:12.029Z" },
    { url = "https://files.pythonhosted.org/packages/b3/db/ea12a49aa7b2b6d68a5da8293dcf50068d48d088100ac016ad92a6a780e6/propcache-0.3.2-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:4c181cad81158d71c41a2bce88edce078458e2dd5ffee7eddd6b05da85079f43", size = 205880, upload-time = "2025-06-09T22:55:13.45Z" },
    { url = "https://files.pythonhosted.org/packages/d1/e5/9076a0bbbfb65d1198007059c65639dfd56266cf8e477a9707e4b1999ff4/propcache-0.3.2-cp313-cp313-win32.whl", hash = "sha256:8a08154613f2249519e549de2330cf8e2071c2887309a7b07fb56098f5170a02", size = 37220, upload-time = "2025-06-09T22:55:15.284Z" },
    { url = "https://files.pythonhosted.org/packages/d3/f5/b369e026b09a26cd77aa88d8fffd69141d2ae00a2abaaf5380d2603f4b7f/propcache-0.3.2-cp313-cp313-win_amd64.whl", hash = "sha256:e41671f1594fc4ab0a6dec1351864713cb3a279910ae8b58f884a88a0a632c05", size = 40678, upload-time = "2025-06-09T22:55:16.445Z" },
    { url = "https://files.pythonhosted.org/packages/a4/3a/6ece377b55544941a08d03581c7bc400a3c8cd3c2865900a68d5de79e21f/propcache-0.3.2-cp313-cp313t-macosx_10_13_universal2.whl", hash = "sha256:9a3cf035bbaf035f109987d9d55dc90e4b0e36e04bbbb95af3055ef17194057b", size = 76560, upload-time = "2025-06-09T22:55:17.598Z" },
    { url = "https://files.pythonhosted.org/packages/0c/da/64a2bb16418740fa634b0e9c3d29edff1db07f56d3546ca2d86ddf0305e1/propcache-0.3.2-cp313-cp313t-macosx_10_13_x86_64.whl", hash = "sha256:156c03d07dc1323d8dacaa221fbe028c5c70d16709cdd63502778e6c3ccca1b0", size = 44676, upload-time = "2025-06-09T22:55:18.922Z" },
    { url = "https://files.pythonhosted.org/packages/36/7b/f025e06ea51cb72c52fb87e9b395cced02786610b60a3ed51da8af017170/propcache-0.3.2-cp313-cp313t-macosx_11_0_arm64.whl", hash = "sha256:74413c0ba02ba86f55cf60d18daab219f7e531620c15f1e23d95563f505efe7e", size = 44701, upload-time = "2025-06-09T22:55:20.106Z" },
    { url = "https://files.pythonhosted.org/packages/a4/00/faa1b1b7c3b74fc277f8642f32a4c72ba1d7b2de36d7cdfb676db7f4303e/propcache-0.3.2-cp313-cp313t-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:f066b437bb3fa39c58ff97ab2ca351db465157d68ed0440abecb21715eb24b28", size = 276934, upload-time = "2025-06-09T22:55:21.5Z" },
    { url = "https://files.pythonhosted.org/packages/74/ab/935beb6f1756e0476a4d5938ff44bf0d13a055fed880caf93859b4f1baf4/propcache-0.3.2-cp313-cp313t-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:f1304b085c83067914721e7e9d9917d41ad87696bf70f0bc7dee450e9c71ad0a", size = 278316, upload-time = "2025-06-09T22:55:22.918Z" },
    { url = "https://files.pythonhosted.org/packages/f8/9d/994a5c1ce4389610838d1caec74bdf0e98b306c70314d46dbe4fcf21a3e2/propcache-0.3.2-cp313-cp313t-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:ab50cef01b372763a13333b4e54021bdcb291fc9a8e2ccb9c2df98be51bcde6c", size = 282619, upload-time = "2025-06-09T22:55:24.651Z" },
    { url = "https://files.pythonhosted.org/packages/2b/00/a10afce3d1ed0287cef2e09506d3be9822513f2c1e96457ee369adb9a6cd/propcache-0.3.2-cp313-cp313t-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:fad3b2a085ec259ad2c2842666b2a0a49dea8463579c606426128925af1ed725", size = 265896, upload-time = "2025-06-09T22:55:26.049Z" },
    { url = "https://files.pythonhosted.org/packages/2e/a8/2aa6716ffa566ca57c749edb909ad27884680887d68517e4be41b02299f3/propcache-0.3.2-cp313-cp313t-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:261fa020c1c14deafd54c76b014956e2f86991af198c51139faf41c4d5e83892", size = 252111, upload-time = "2025-06-09T22:55:27.381Z" },
    { url = "https://files.pythonhosted.org/packages/36/4f/345ca9183b85ac29c8694b0941f7484bf419c7f0fea2d1e386b4f7893eed/propcache-0.3.2-cp313-cp313t-musllinux_1_2_aarch64.whl", hash = "sha256:46d7f8aa79c927e5f987ee3a80205c987717d3659f035c85cf0c3680526bdb44", size = 268334, upload-time = "2025-06-09T22:55:28.747Z" },
    { url = "https://files.pythonhosted.org/packages/3e/ca/fcd54f78b59e3f97b3b9715501e3147f5340167733d27db423aa321e7148/propcache-0.3.2-cp313-cp313t-musllinux_1_2_armv7l.whl", hash = "sha256:6d8f3f0eebf73e3c0ff0e7853f68be638b4043c65a70517bb575eff54edd8dbe", size = 255026, upload-time = "2025-06-09T22:55:30.184Z" },
    { url = "https://files.pythonhosted.org/packages/8b/95/8e6a6bbbd78ac89c30c225210a5c687790e532ba4088afb8c0445b77ef37/propcache-0.3.2-cp313-cp313t-musllinux_1_2_i686.whl", hash = "sha256:03c89c1b14a5452cf15403e291c0ccd7751d5b9736ecb2c5bab977ad6c5bcd81", size = 250724, upload-time = "2025-06-09T22:55:31.646Z" },
    { url = "https://files.pythonhosted.org/packages/ee/b0/0dd03616142baba28e8b2d14ce5df6631b4673850a3d4f9c0f9dd714a404/propcache-0.3.2-cp313-cp313t-musllinux_1_2_ppc64le.whl", hash = "sha256:0cc17efde71e12bbaad086d679ce575268d70bc123a5a71ea7ad76f70ba30bba", size = 268868, upload-time = "2025-06-09T22:55:33.209Z" },
    { url = "https://files.pythonhosted.org/packages/c5/98/2c12407a7e4fbacd94ddd32f3b1e3d5231e77c30ef7162b12a60e2dd5ce3/propcache-0.3.2-cp313-cp313t-musllinux_1_2_s390x.whl", hash = "sha256:acdf05d00696bc0447e278bb53cb04ca72354e562cf88ea6f9107df8e7fd9770", size = 271322, upload-time = "2025-06-09T22:55:35.065Z" },
    { url = "https://files.pythonhosted.org/packages/35/91/9cb56efbb428b006bb85db28591e40b7736847b8331d43fe335acf95f6c8/propcache-0.3.2-cp313-cp313t-musllinux_1_2_x86_64.whl", hash = "sha256:4445542398bd0b5d32df908031cb1b30d43ac848e20470a878b770ec2dcc6330", size = 265778, upload-time = "2025-06-09T22:55:36.45Z" },
    { url = "https://files.pythonhosted.org/packages/9a/4c/b0fe775a2bdd01e176b14b574be679d84fc83958335790f7c9a686c1f468/propcache-0.3.2-cp313-cp313t-win32.whl", hash = "sha256:f86e5d7cd03afb3a1db8e9f9f6eff15794e79e791350ac48a8c924e6f439f394", size = 41175, upload-time = "2025-06-09T22:55:38.436Z" },
    { url = "https://files.pythonhosted.org/packages/a4/ff/47f08595e3d9b5e149c150f88d9714574f1a7cbd89fe2817158a952674bf/propcache-0.3.2-cp313-cp313t-win_amd64.whl", hash = "sha256:9704bedf6e7cbe3c65eca4379a9b53ee6a83749f047808cbb5044d40d7d72198", size = 44857, upload-time = "2025-06-09T22:55:39.687Z" },
    { url = "https://files.pythonhosted.org/packages/cc/35/cc0aaecf278bb4575b8555f2b137de5ab821595ddae9da9d3cd1da4072c7/propcache-0.3.2-py3-none-any.whl", hash = "sha256:98f1ec44fb675f5052cccc8e609c46ed23a35a1cfd18545ad4e29002d858a43f", size = 12663, upload-time = "2025-06-09T22:56:04.484Z" },
]

[[package]]
name = "proto-plus"
version = "1.26.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "protobuf" },
]
sdist = { url = "https://files.pythonhosted.org/packages/f4/ac/87285f15f7cce6d4a008f33f1757fb5a13611ea8914eb58c3d0d26243468/proto_plus-1.26.1.tar.gz", hash = "sha256:21a515a4c4c0088a773899e23c7bbade3d18f9c66c73edd4c7ee3816bc96a012", size = 56142, upload-time = "2025-03-10T15:54:38.843Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/4e/6d/280c4c2ce28b1593a19ad5239c8b826871fc6ec275c21afc8e1820108039/proto_plus-1.26.1-py3-none-any.whl", hash = "sha256:13285478c2dcf2abb829db158e1047e2f1e8d63a077d94263c2b88b043c75a66", size = 50163, upload-time = "2025-03-10T15:54:37.335Z" },
]

[[package]]
name = "protobuf"
version = "5.29.5"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/43/29/d09e70352e4e88c9c7a198d5645d7277811448d76c23b00345670f7c8a38/protobuf-5.29.5.tar.gz", hash = "sha256:bc1463bafd4b0929216c35f437a8e28731a2b7fe3d98bb77a600efced5a15c84", size = 425226, upload-time = "2025-05-28T23:51:59.82Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/5f/11/6e40e9fc5bba02988a214c07cf324595789ca7820160bfd1f8be96e48539/protobuf-5.29.5-cp310-abi3-win32.whl", hash = "sha256:3f1c6468a2cfd102ff4703976138844f78ebd1fb45f49011afc5139e9e283079", size = 422963, upload-time = "2025-05-28T23:51:41.204Z" },
    { url = "https://files.pythonhosted.org/packages/81/7f/73cefb093e1a2a7c3ffd839e6f9fcafb7a427d300c7f8aef9c64405d8ac6/protobuf-5.29.5-cp310-abi3-win_amd64.whl", hash = "sha256:3f76e3a3675b4a4d867b52e4a5f5b78a2ef9565549d4037e06cf7b0942b1d3fc", size = 434818, upload-time = "2025-05-28T23:51:44.297Z" },
    { url = "https://files.pythonhosted.org/packages/dd/73/10e1661c21f139f2c6ad9b23040ff36fee624310dc28fba20d33fdae124c/protobuf-5.29.5-cp38-abi3-macosx_10_9_universal2.whl", hash = "sha256:e38c5add5a311f2a6eb0340716ef9b039c1dfa428b28f25a7838ac329204a671", size = 418091, upload-time = "2025-05-28T23:51:45.907Z" },
    { url = "https://files.pythonhosted.org/packages/6c/04/98f6f8cf5b07ab1294c13f34b4e69b3722bb609c5b701d6c169828f9f8aa/protobuf-5.29.5-cp38-abi3-manylinux2014_aarch64.whl", hash = "sha256:fa18533a299d7ab6c55a238bf8629311439995f2e7eca5caaff08663606e9015", size = 319824, upload-time = "2025-05-28T23:51:47.545Z" },
    { url = "https://files.pythonhosted.org/packages/85/e4/07c80521879c2d15f321465ac24c70efe2381378c00bf5e56a0f4fbac8cd/protobuf-5.29.5-cp38-abi3-manylinux2014_x86_64.whl", hash = "sha256:63848923da3325e1bf7e9003d680ce6e14b07e55d0473253a690c3a8b8fd6e61", size = 319942, upload-time = "2025-05-28T23:51:49.11Z" },
    { url = "https://files.pythonhosted.org/packages/7e/cc/7e77861000a0691aeea8f4566e5d3aa716f2b1dece4a24439437e41d3d25/protobuf-5.29.5-py3-none-any.whl", hash = "sha256:6cf42630262c59b2d8de33954443d94b746c952b01434fc58a417fdbd2e84bd5", size = 172823, upload-time = "2025-05-28T23:51:58.157Z" },
]

[[package]]
name = "psycopg2-binary"
version = "2.9.10"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/cb/0e/bdc8274dc0585090b4e3432267d7be4dfbfd8971c0fa59167c711105a6bf/psycopg2-binary-2.9.10.tar.gz", hash = "sha256:4b3df0e6990aa98acda57d983942eff13d824135fe2250e6522edaa782a06de2", size = 385764, upload-time = "2024-10-16T11:24:58.126Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/49/7d/465cc9795cf76f6d329efdafca74693714556ea3891813701ac1fee87545/psycopg2_binary-2.9.10-cp312-cp312-macosx_12_0_x86_64.whl", hash = "sha256:880845dfe1f85d9d5f7c412efea7a08946a46894537e4e5d091732eb1d34d9a0", size = 3044771, upload-time = "2024-10-16T11:20:35.234Z" },
    { url = "https://files.pythonhosted.org/packages/8b/31/6d225b7b641a1a2148e3ed65e1aa74fc86ba3fee850545e27be9e1de893d/psycopg2_binary-2.9.10-cp312-cp312-macosx_14_0_arm64.whl", hash = "sha256:9440fa522a79356aaa482aa4ba500b65f28e5d0e63b801abf6aa152a29bd842a", size = 3275336, upload-time = "2024-10-16T11:20:38.742Z" },
    { url = "https://files.pythonhosted.org/packages/30/b7/a68c2b4bff1cbb1728e3ec864b2d92327c77ad52edcd27922535a8366f68/psycopg2_binary-2.9.10-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:e3923c1d9870c49a2d44f795df0c889a22380d36ef92440ff618ec315757e539", size = 2851637, upload-time = "2024-10-16T11:20:42.145Z" },
    { url = "https://files.pythonhosted.org/packages/0b/b1/cfedc0e0e6f9ad61f8657fd173b2f831ce261c02a08c0b09c652b127d813/psycopg2_binary-2.9.10-cp312-cp312-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:7b2c956c028ea5de47ff3a8d6b3cc3330ab45cf0b7c3da35a2d6ff8420896526", size = 3082097, upload-time = "2024-10-16T11:20:46.185Z" },
    { url = "https://files.pythonhosted.org/packages/18/ed/0a8e4153c9b769f59c02fb5e7914f20f0b2483a19dae7bf2db54b743d0d0/psycopg2_binary-2.9.10-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:f758ed67cab30b9a8d2833609513ce4d3bd027641673d4ebc9c067e4d208eec1", size = 3264776, upload-time = "2024-10-16T11:20:50.879Z" },
    { url = "https://files.pythonhosted.org/packages/10/db/d09da68c6a0cdab41566b74e0a6068a425f077169bed0946559b7348ebe9/psycopg2_binary-2.9.10-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:8cd9b4f2cfab88ed4a9106192de509464b75a906462fb846b936eabe45c2063e", size = 3020968, upload-time = "2024-10-16T11:20:56.819Z" },
    { url = "https://files.pythonhosted.org/packages/94/28/4d6f8c255f0dfffb410db2b3f9ac5218d959a66c715c34cac31081e19b95/psycopg2_binary-2.9.10-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:6dc08420625b5a20b53551c50deae6e231e6371194fa0651dbe0fb206452ae1f", size = 2872334, upload-time = "2024-10-16T11:21:02.411Z" },
    { url = "https://files.pythonhosted.org/packages/05/f7/20d7bf796593c4fea95e12119d6cc384ff1f6141a24fbb7df5a668d29d29/psycopg2_binary-2.9.10-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:d7cd730dfa7c36dbe8724426bf5612798734bff2d3c3857f36f2733f5bfc7c00", size = 2822722, upload-time = "2024-10-16T11:21:09.01Z" },
    { url = "https://files.pythonhosted.org/packages/4d/e4/0c407ae919ef626dbdb32835a03b6737013c3cc7240169843965cada2bdf/psycopg2_binary-2.9.10-cp312-cp312-musllinux_1_2_ppc64le.whl", hash = "sha256:155e69561d54d02b3c3209545fb08938e27889ff5a10c19de8d23eb5a41be8a5", size = 2920132, upload-time = "2024-10-16T11:21:16.339Z" },
    { url = "https://files.pythonhosted.org/packages/2d/70/aa69c9f69cf09a01da224909ff6ce8b68faeef476f00f7ec377e8f03be70/psycopg2_binary-2.9.10-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:c3cc28a6fd5a4a26224007712e79b81dbaee2ffb90ff406256158ec4d7b52b47", size = 2959312, upload-time = "2024-10-16T11:21:25.584Z" },
    { url = "https://files.pythonhosted.org/packages/d3/bd/213e59854fafe87ba47814bf413ace0dcee33a89c8c8c814faca6bc7cf3c/psycopg2_binary-2.9.10-cp312-cp312-win32.whl", hash = "sha256:ec8a77f521a17506a24a5f626cb2aee7850f9b69a0afe704586f63a464f3cd64", size = 1025191, upload-time = "2024-10-16T11:21:29.912Z" },
    { url = "https://files.pythonhosted.org/packages/92/29/06261ea000e2dc1e22907dbbc483a1093665509ea586b29b8986a0e56733/psycopg2_binary-2.9.10-cp312-cp312-win_amd64.whl", hash = "sha256:18c5ee682b9c6dd3696dad6e54cc7ff3a1a9020df6a5c0f861ef8bfd338c3ca0", size = 1164031, upload-time = "2024-10-16T11:21:34.211Z" },
    { url = "https://files.pythonhosted.org/packages/3e/30/d41d3ba765609c0763505d565c4d12d8f3c79793f0d0f044ff5a28bf395b/psycopg2_binary-2.9.10-cp313-cp313-macosx_12_0_x86_64.whl", hash = "sha256:26540d4a9a4e2b096f1ff9cce51253d0504dca5a85872c7f7be23be5a53eb18d", size = 3044699, upload-time = "2024-10-16T11:21:42.841Z" },
    { url = "https://files.pythonhosted.org/packages/35/44/257ddadec7ef04536ba71af6bc6a75ec05c5343004a7ec93006bee66c0bc/psycopg2_binary-2.9.10-cp313-cp313-macosx_14_0_arm64.whl", hash = "sha256:e217ce4d37667df0bc1c397fdcd8de5e81018ef305aed9415c3b093faaeb10fb", size = 3275245, upload-time = "2024-10-16T11:21:51.989Z" },
    { url = "https://files.pythonhosted.org/packages/1b/11/48ea1cd11de67f9efd7262085588790a95d9dfcd9b8a687d46caf7305c1a/psycopg2_binary-2.9.10-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:245159e7ab20a71d989da00f280ca57da7641fa2cdcf71749c193cea540a74f7", size = 2851631, upload-time = "2024-10-16T11:21:57.584Z" },
    { url = "https://files.pythonhosted.org/packages/62/e0/62ce5ee650e6c86719d621a761fe4bc846ab9eff8c1f12b1ed5741bf1c9b/psycopg2_binary-2.9.10-cp313-cp313-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:3c4ded1a24b20021ebe677b7b08ad10bf09aac197d6943bfe6fec70ac4e4690d", size = 3082140, upload-time = "2024-10-16T11:22:02.005Z" },
    { url = "https://files.pythonhosted.org/packages/27/ce/63f946c098611f7be234c0dd7cb1ad68b0b5744d34f68062bb3c5aa510c8/psycopg2_binary-2.9.10-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:3abb691ff9e57d4a93355f60d4f4c1dd2d68326c968e7db17ea96df3c023ef73", size = 3264762, upload-time = "2024-10-16T11:22:06.412Z" },
    { url = "https://files.pythonhosted.org/packages/43/25/c603cd81402e69edf7daa59b1602bd41eb9859e2824b8c0855d748366ac9/psycopg2_binary-2.9.10-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:8608c078134f0b3cbd9f89b34bd60a943b23fd33cc5f065e8d5f840061bd0673", size = 3020967, upload-time = "2024-10-16T11:22:11.583Z" },
    { url = "https://files.pythonhosted.org/packages/5f/d6/8708d8c6fca531057fa170cdde8df870e8b6a9b136e82b361c65e42b841e/psycopg2_binary-2.9.10-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:230eeae2d71594103cd5b93fd29d1ace6420d0b86f4778739cb1a5a32f607d1f", size = 2872326, upload-time = "2024-10-16T11:22:16.406Z" },
    { url = "https://files.pythonhosted.org/packages/ce/ac/5b1ea50fc08a9df82de7e1771537557f07c2632231bbab652c7e22597908/psycopg2_binary-2.9.10-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:bb89f0a835bcfc1d42ccd5f41f04870c1b936d8507c6df12b7737febc40f0909", size = 2822712, upload-time = "2024-10-16T11:22:21.366Z" },
    { url = "https://files.pythonhosted.org/packages/c4/fc/504d4503b2abc4570fac3ca56eb8fed5e437bf9c9ef13f36b6621db8ef00/psycopg2_binary-2.9.10-cp313-cp313-musllinux_1_2_ppc64le.whl", hash = "sha256:f0c2d907a1e102526dd2986df638343388b94c33860ff3bbe1384130828714b1", size = 2920155, upload-time = "2024-10-16T11:22:25.684Z" },
    { url = "https://files.pythonhosted.org/packages/b2/d1/323581e9273ad2c0dbd1902f3fb50c441da86e894b6e25a73c3fda32c57e/psycopg2_binary-2.9.10-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:f8157bed2f51db683f31306aa497311b560f2265998122abe1dce6428bd86567", size = 2959356, upload-time = "2024-10-16T11:22:30.562Z" },
    { url = "https://files.pythonhosted.org/packages/08/50/d13ea0a054189ae1bc21af1d85b6f8bb9bbc5572991055d70ad9006fe2d6/psycopg2_binary-2.9.10-cp313-cp313-win_amd64.whl", hash = "sha256:27422aa5f11fbcd9b18da48373eb67081243662f9b46e6fd07c3eb46e4535142", size = 2569224, upload-time = "2025-01-04T20:09:19.234Z" },
]

[[package]]
name = "pyasn1"
version = "0.6.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/ba/e9/01f1a64245b89f039897cb0130016d79f77d52669aae6ee7b159a6c4c018/pyasn1-0.6.1.tar.gz", hash = "sha256:6f580d2bdd84365380830acf45550f2511469f673cb4a5ae3857a3170128b034", size = 145322, upload-time = "2024-09-10T22:41:42.55Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/c8/f1/d6a797abb14f6283c0ddff96bbdd46937f64122b8c925cab503dd37f8214/pyasn1-0.6.1-py3-none-any.whl", hash = "sha256:0d632f46f2ba09143da3a8afe9e33fb6f92fa2320ab7e886e2d0f7672af84629", size = 83135, upload-time = "2024-09-11T16:00:36.122Z" },
]

[[package]]
name = "pyasn1-modules"
version = "0.4.2"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "pyasn1" },
]
sdist = { url = "https://files.pythonhosted.org/packages/e9/e6/78ebbb10a8c8e4b61a59249394a4a594c1a7af95593dc933a349c8d00964/pyasn1_modules-0.4.2.tar.gz", hash = "sha256:677091de870a80aae844b1ca6134f54652fa2c8c5a52aa396440ac3106e941e6", size = 307892, upload-time = "2025-03-28T02:41:22.17Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/47/8d/d529b5d697919ba8c11ad626e835d4039be708a35b0d22de83a269a6682c/pyasn1_modules-0.4.2-py3-none-any.whl", hash = "sha256:29253a9207ce32b64c3ac6600edc75368f98473906e8fd1043bd6b5b1de2c14a", size = 181259, upload-time = "2025-03-28T02:41:19.028Z" },
]

[[package]]
name = "pydantic"
version = "2.11.7"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "annotated-types" },
    { name = "pydantic-core" },
    { name = "typing-extensions" },
    { name = "typing-inspection" },
]
sdist = { url = "https://files.pythonhosted.org/packages/00/dd/4325abf92c39ba8623b5af936ddb36ffcfe0beae70405d456ab1fb2f5b8c/pydantic-2.11.7.tar.gz", hash = "sha256:d989c3c6cb79469287b1569f7447a17848c998458d49ebe294e975b9baf0f0db", size = 788350, upload-time = "2025-06-14T08:33:17.137Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/6a/c0/ec2b1c8712ca690e5d61979dee872603e92b8a32f94cc1b72d53beab008a/pydantic-2.11.7-py3-none-any.whl", hash = "sha256:dde5df002701f6de26248661f6835bbe296a47bf73990135c7d07ce741b9623b", size = 444782, upload-time = "2025-06-14T08:33:14.905Z" },
]

[[package]]
name = "pydantic-core"
version = "2.33.2"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "typing-extensions" },
]
sdist = { url = "https://files.pythonhosted.org/packages/ad/88/5f2260bdfae97aabf98f1778d43f69574390ad787afb646292a638c923d4/pydantic_core-2.33.2.tar.gz", hash = "sha256:7cb8bc3605c29176e1b105350d2e6474142d7c1bd1d9327c4a9bdb46bf827acc", size = 435195, upload-time = "2025-04-23T18:33:52.104Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/18/8a/2b41c97f554ec8c71f2a8a5f85cb56a8b0956addfe8b0efb5b3d77e8bdc3/pydantic_core-2.33.2-cp312-cp312-macosx_10_12_x86_64.whl", hash = "sha256:a7ec89dc587667f22b6a0b6579c249fca9026ce7c333fc142ba42411fa243cdc", size = 2009000, upload-time = "2025-04-23T18:31:25.863Z" },
    { url = "https://files.pythonhosted.org/packages/a1/02/6224312aacb3c8ecbaa959897af57181fb6cf3a3d7917fd44d0f2917e6f2/pydantic_core-2.33.2-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:3c6db6e52c6d70aa0d00d45cdb9b40f0433b96380071ea80b09277dba021ddf7", size = 1847996, upload-time = "2025-04-23T18:31:27.341Z" },
    { url = "https://files.pythonhosted.org/packages/d6/46/6dcdf084a523dbe0a0be59d054734b86a981726f221f4562aed313dbcb49/pydantic_core-2.33.2-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:4e61206137cbc65e6d5256e1166f88331d3b6238e082d9f74613b9b765fb9025", size = 1880957, upload-time = "2025-04-23T18:31:28.956Z" },
    { url = "https://files.pythonhosted.org/packages/ec/6b/1ec2c03837ac00886ba8160ce041ce4e325b41d06a034adbef11339ae422/pydantic_core-2.33.2-cp312-cp312-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:eb8c529b2819c37140eb51b914153063d27ed88e3bdc31b71198a198e921e011", size = 1964199, upload-time = "2025-04-23T18:31:31.025Z" },
    { url = "https://files.pythonhosted.org/packages/2d/1d/6bf34d6adb9debd9136bd197ca72642203ce9aaaa85cfcbfcf20f9696e83/pydantic_core-2.33.2-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:c52b02ad8b4e2cf14ca7b3d918f3eb0ee91e63b3167c32591e57c4317e134f8f", size = 2120296, upload-time = "2025-04-23T18:31:32.514Z" },
    { url = "https://files.pythonhosted.org/packages/e0/94/2bd0aaf5a591e974b32a9f7123f16637776c304471a0ab33cf263cf5591a/pydantic_core-2.33.2-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:96081f1605125ba0855dfda83f6f3df5ec90c61195421ba72223de35ccfb2f88", size = 2676109, upload-time = "2025-04-23T18:31:33.958Z" },
    { url = "https://files.pythonhosted.org/packages/f9/41/4b043778cf9c4285d59742281a769eac371b9e47e35f98ad321349cc5d61/pydantic_core-2.33.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:8f57a69461af2a5fa6e6bbd7a5f60d3b7e6cebb687f55106933188e79ad155c1", size = 2002028, upload-time = "2025-04-23T18:31:39.095Z" },
    { url = "https://files.pythonhosted.org/packages/cb/d5/7bb781bf2748ce3d03af04d5c969fa1308880e1dca35a9bd94e1a96a922e/pydantic_core-2.33.2-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.whl", hash = "sha256:572c7e6c8bb4774d2ac88929e3d1f12bc45714ae5ee6d9a788a9fb35e60bb04b", size = 2100044, upload-time = "2025-04-23T18:31:41.034Z" },
    { url = "https://files.pythonhosted.org/packages/fe/36/def5e53e1eb0ad896785702a5bbfd25eed546cdcf4087ad285021a90ed53/pydantic_core-2.33.2-cp312-cp312-musllinux_1_1_aarch64.whl", hash = "sha256:db4b41f9bd95fbe5acd76d89920336ba96f03e149097365afe1cb092fceb89a1", size = 2058881, upload-time = "2025-04-23T18:31:42.757Z" },
    { url = "https://files.pythonhosted.org/packages/01/6c/57f8d70b2ee57fc3dc8b9610315949837fa8c11d86927b9bb044f8705419/pydantic_core-2.33.2-cp312-cp312-musllinux_1_1_armv7l.whl", hash = "sha256:fa854f5cf7e33842a892e5c73f45327760bc7bc516339fda888c75ae60edaeb6", size = 2227034, upload-time = "2025-04-23T18:31:44.304Z" },
    { url = "https://files.pythonhosted.org/packages/27/b9/9c17f0396a82b3d5cbea4c24d742083422639e7bb1d5bf600e12cb176a13/pydantic_core-2.33.2-cp312-cp312-musllinux_1_1_x86_64.whl", hash = "sha256:5f483cfb75ff703095c59e365360cb73e00185e01aaea067cd19acffd2ab20ea", size = 2234187, upload-time = "2025-04-23T18:31:45.891Z" },
    { url = "https://files.pythonhosted.org/packages/b0/6a/adf5734ffd52bf86d865093ad70b2ce543415e0e356f6cacabbc0d9ad910/pydantic_core-2.33.2-cp312-cp312-win32.whl", hash = "sha256:9cb1da0f5a471435a7bc7e439b8a728e8b61e59784b2af70d7c169f8dd8ae290", size = 1892628, upload-time = "2025-04-23T18:31:47.819Z" },
    { url = "https://files.pythonhosted.org/packages/43/e4/5479fecb3606c1368d496a825d8411e126133c41224c1e7238be58b87d7e/pydantic_core-2.33.2-cp312-cp312-win_amd64.whl", hash = "sha256:f941635f2a3d96b2973e867144fde513665c87f13fe0e193c158ac51bfaaa7b2", size = 1955866, upload-time = "2025-04-23T18:31:49.635Z" },
    { url = "https://files.pythonhosted.org/packages/0d/24/8b11e8b3e2be9dd82df4b11408a67c61bb4dc4f8e11b5b0fc888b38118b5/pydantic_core-2.33.2-cp312-cp312-win_arm64.whl", hash = "sha256:cca3868ddfaccfbc4bfb1d608e2ccaaebe0ae628e1416aeb9c4d88c001bb45ab", size = 1888894, upload-time = "2025-04-23T18:31:51.609Z" },
    { url = "https://files.pythonhosted.org/packages/46/8c/99040727b41f56616573a28771b1bfa08a3d3fe74d3d513f01251f79f172/pydantic_core-2.33.2-cp313-cp313-macosx_10_12_x86_64.whl", hash = "sha256:1082dd3e2d7109ad8b7da48e1d4710c8d06c253cbc4a27c1cff4fbcaa97a9e3f", size = 2015688, upload-time = "2025-04-23T18:31:53.175Z" },
    { url = "https://files.pythonhosted.org/packages/3a/cc/5999d1eb705a6cefc31f0b4a90e9f7fc400539b1a1030529700cc1b51838/pydantic_core-2.33.2-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:f517ca031dfc037a9c07e748cefd8d96235088b83b4f4ba8939105d20fa1dcd6", size = 1844808, upload-time = "2025-04-23T18:31:54.79Z" },
    { url = "https://files.pythonhosted.org/packages/6f/5e/a0a7b8885c98889a18b6e376f344da1ef323d270b44edf8174d6bce4d622/pydantic_core-2.33.2-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:0a9f2c9dd19656823cb8250b0724ee9c60a82f3cdf68a080979d13092a3b0fef", size = 1885580, upload-time = "2025-04-23T18:31:57.393Z" },
    { url = "https://files.pythonhosted.org/packages/3b/2a/953581f343c7d11a304581156618c3f592435523dd9d79865903272c256a/pydantic_core-2.33.2-cp313-cp313-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:2b0a451c263b01acebe51895bfb0e1cc842a5c666efe06cdf13846c7418caa9a", size = 1973859, upload-time = "2025-04-23T18:31:59.065Z" },
    { url = "https://files.pythonhosted.org/packages/e6/55/f1a813904771c03a3f97f676c62cca0c0a4138654107c1b61f19c644868b/pydantic_core-2.33.2-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:1ea40a64d23faa25e62a70ad163571c0b342b8bf66d5fa612ac0dec4f069d916", size = 2120810, upload-time = "2025-04-23T18:32:00.78Z" },
    { url = "https://files.pythonhosted.org/packages/aa/c3/053389835a996e18853ba107a63caae0b9deb4a276c6b472931ea9ae6e48/pydantic_core-2.33.2-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:0fb2d542b4d66f9470e8065c5469ec676978d625a8b7a363f07d9a501a9cb36a", size = 2676498, upload-time = "2025-04-23T18:32:02.418Z" },
    { url = "https://files.pythonhosted.org/packages/eb/3c/f4abd740877a35abade05e437245b192f9d0ffb48bbbbd708df33d3cda37/pydantic_core-2.33.2-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:9fdac5d6ffa1b5a83bca06ffe7583f5576555e6c8b3a91fbd25ea7780f825f7d", size = 2000611, upload-time = "2025-04-23T18:32:04.152Z" },
    { url = "https://files.pythonhosted.org/packages/59/a7/63ef2fed1837d1121a894d0ce88439fe3e3b3e48c7543b2a4479eb99c2bd/pydantic_core-2.33.2-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.whl", hash = "sha256:04a1a413977ab517154eebb2d326da71638271477d6ad87a769102f7c2488c56", size = 2107924, upload-time = "2025-04-23T18:32:06.129Z" },
    { url = "https://files.pythonhosted.org/packages/04/8f/2551964ef045669801675f1cfc3b0d74147f4901c3ffa42be2ddb1f0efc4/pydantic_core-2.33.2-cp313-cp313-musllinux_1_1_aarch64.whl", hash = "sha256:c8e7af2f4e0194c22b5b37205bfb293d166a7344a5b0d0eaccebc376546d77d5", size = 2063196, upload-time = "2025-04-23T18:32:08.178Z" },
    { url = "https://files.pythonhosted.org/packages/26/bd/d9602777e77fc6dbb0c7db9ad356e9a985825547dce5ad1d30ee04903918/pydantic_core-2.33.2-cp313-cp313-musllinux_1_1_armv7l.whl", hash = "sha256:5c92edd15cd58b3c2d34873597a1e20f13094f59cf88068adb18947df5455b4e", size = 2236389, upload-time = "2025-04-23T18:32:10.242Z" },
    { url = "https://files.pythonhosted.org/packages/42/db/0e950daa7e2230423ab342ae918a794964b053bec24ba8af013fc7c94846/pydantic_core-2.33.2-cp313-cp313-musllinux_1_1_x86_64.whl", hash = "sha256:65132b7b4a1c0beded5e057324b7e16e10910c106d43675d9bd87d4f38dde162", size = 2239223, upload-time = "2025-04-23T18:32:12.382Z" },
    { url = "https://files.pythonhosted.org/packages/58/4d/4f937099c545a8a17eb52cb67fe0447fd9a373b348ccfa9a87f141eeb00f/pydantic_core-2.33.2-cp313-cp313-win32.whl", hash = "sha256:52fb90784e0a242bb96ec53f42196a17278855b0f31ac7c3cc6f5c1ec4811849", size = 1900473, upload-time = "2025-04-23T18:32:14.034Z" },
    { url = "https://files.pythonhosted.org/packages/a0/75/4a0a9bac998d78d889def5e4ef2b065acba8cae8c93696906c3a91f310ca/pydantic_core-2.33.2-cp313-cp313-win_amd64.whl", hash = "sha256:c083a3bdd5a93dfe480f1125926afcdbf2917ae714bdb80b36d34318b2bec5d9", size = 1955269, upload-time = "2025-04-23T18:32:15.783Z" },
    { url = "https://files.pythonhosted.org/packages/f9/86/1beda0576969592f1497b4ce8e7bc8cbdf614c352426271b1b10d5f0aa64/pydantic_core-2.33.2-cp313-cp313-win_arm64.whl", hash = "sha256:e80b087132752f6b3d714f041ccf74403799d3b23a72722ea2e6ba2e892555b9", size = 1893921, upload-time = "2025-04-23T18:32:18.473Z" },
    { url = "https://files.pythonhosted.org/packages/a4/7d/e09391c2eebeab681df2b74bfe6c43422fffede8dc74187b2b0bf6fd7571/pydantic_core-2.33.2-cp313-cp313t-macosx_11_0_arm64.whl", hash = "sha256:61c18fba8e5e9db3ab908620af374db0ac1baa69f0f32df4f61ae23f15e586ac", size = 1806162, upload-time = "2025-04-23T18:32:20.188Z" },
    { url = "https://files.pythonhosted.org/packages/f1/3d/847b6b1fed9f8ed3bb95a9ad04fbd0b212e832d4f0f50ff4d9ee5a9f15cf/pydantic_core-2.33.2-cp313-cp313t-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:95237e53bb015f67b63c91af7518a62a8660376a6a0db19b89acc77a4d6199f5", size = 1981560, upload-time = "2025-04-23T18:32:22.354Z" },
    { url = "https://files.pythonhosted.org/packages/6f/9a/e73262f6c6656262b5fdd723ad90f518f579b7bc8622e43a942eec53c938/pydantic_core-2.33.2-cp313-cp313t-win_amd64.whl", hash = "sha256:c2fc0a768ef76c15ab9238afa6da7f69895bb5d1ee83aeea2e3509af4472d0b9", size = 1935777, upload-time = "2025-04-23T18:32:25.088Z" },
]

[[package]]
name = "pydantic-settings"
version = "2.10.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "pydantic" },
    { name = "python-dotenv" },
    { name = "typing-inspection" },
]
sdist = { url = "https://files.pythonhosted.org/packages/68/85/1ea668bbab3c50071ca613c6ab30047fb36ab0da1b92fa8f17bbc38fd36c/pydantic_settings-2.10.1.tar.gz", hash = "sha256:06f0062169818d0f5524420a360d632d5857b83cffd4d42fe29597807a1614ee", size = 172583, upload-time = "2025-06-24T13:26:46.841Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/58/f0/427018098906416f580e3cf1366d3b1abfb408a0652e9f31600c24a1903c/pydantic_settings-2.10.1-py3-none-any.whl", hash = "sha256:a60952460b99cf661dc25c29c0ef171721f98bfcb52ef8d9ea4c943d7c8cc796", size = 45235, upload-time = "2025-06-24T13:26:45.485Z" },
]

[[package]]
name = "pygments"
version = "2.19.2"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/b0/77/a5b8c569bf593b0140bde72ea885a803b82086995367bf2037de0159d924/pygments-2.19.2.tar.gz", hash = "sha256:636cb2477cec7f8952536970bc533bc43743542f70392ae026374600add5b887", size = 4968631, upload-time = "2025-06-21T13:39:12.283Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/c7/21/705964c7812476f378728bdf590ca4b771ec72385c533964653c68e86bdc/pygments-2.19.2-py3-none-any.whl", hash = "sha256:86540386c03d588bb81d44bc3928634ff26449851e99741617ecb9037ee5ec0b", size = 1225217, upload-time = "2025-06-21T13:39:07.939Z" },
]

[[package]]
name = "pyjwt"
version = "2.10.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/e7/46/bd74733ff231675599650d3e47f361794b22ef3e3770998dda30d3b63726/pyjwt-2.10.1.tar.gz", hash = "sha256:3cc5772eb20009233caf06e9d8a0577824723b44e6648ee0a2aedb6cf9381953", size = 87785, upload-time = "2024-11-28T03:43:29.933Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/61/ad/689f02752eeec26aed679477e80e632ef1b682313be70793d798c1d5fc8f/PyJWT-2.10.1-py3-none-any.whl", hash = "sha256:dcdd193e30abefd5debf142f9adfcdd2b58004e644f25406ffaebd50bd98dacb", size = 22997, upload-time = "2024-11-28T03:43:27.893Z" },
]

[[package]]
name = "pyparsing"
version = "3.2.3"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/bb/22/f1129e69d94ffff626bdb5c835506b3a5b4f3d070f17ea295e12c2c6f60f/pyparsing-3.2.3.tar.gz", hash = "sha256:b9c13f1ab8b3b542f72e28f634bad4de758ab3ce4546e4301970ad6fa77c38be", size = 1088608, upload-time = "2025-03-25T05:01:28.114Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/05/e7/df2285f3d08fee213f2d041540fa4fc9ca6c2d44cf36d3a035bf2a8d2bcc/pyparsing-3.2.3-py3-none-any.whl", hash = "sha256:a749938e02d6fd0b59b356ca504a24982314bb090c383e3cf201c95ef7e2bfcf", size = 111120, upload-time = "2025-03-25T05:01:24.908Z" },
]

[[package]]
name = "pytest"
version = "8.4.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "colorama", marker = "sys_platform == 'win32'" },
    { name = "iniconfig" },
    { name = "packaging" },
    { name = "pluggy" },
    { name = "pygments" },
]
sdist = { url = "https://files.pythonhosted.org/packages/08/ba/45911d754e8eba3d5a841a5ce61a65a685ff1798421ac054f85aa8747dfb/pytest-8.4.1.tar.gz", hash = "sha256:7c67fd69174877359ed9371ec3af8a3d2b04741818c51e5e99cc1742251fa93c", size = 1517714, upload-time = "2025-06-18T05:48:06.109Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/29/16/c8a903f4c4dffe7a12843191437d7cd8e32751d5de349d45d3fe69544e87/pytest-8.4.1-py3-none-any.whl", hash = "sha256:539c70ba6fcead8e78eebbf1115e8b589e7565830d7d006a8723f19ac8a0afb7", size = 365474, upload-time = "2025-06-18T05:48:03.955Z" },
]

[[package]]
name = "pytest-asyncio"
version = "1.0.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "pytest" },
]
sdist = { url = "https://files.pythonhosted.org/packages/d0/d4/14f53324cb1a6381bef29d698987625d80052bb33932d8e7cbf9b337b17c/pytest_asyncio-1.0.0.tar.gz", hash = "sha256:d15463d13f4456e1ead2594520216b225a16f781e144f8fdf6c5bb4667c48b3f", size = 46960, upload-time = "2025-05-26T04:54:40.484Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/30/05/ce271016e351fddc8399e546f6e23761967ee09c8c568bbfbecb0c150171/pytest_asyncio-1.0.0-py3-none-any.whl", hash = "sha256:4f024da9f1ef945e680dc68610b52550e36590a67fd31bb3b4943979a1f90ef3", size = 15976, upload-time = "2025-05-26T04:54:39.035Z" },
]

[[package]]
name = "pytest-cov"
version = "6.2.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "coverage" },
    { name = "pluggy" },
    { name = "pytest" },
]
sdist = { url = "https://files.pythonhosted.org/packages/18/99/668cade231f434aaa59bbfbf49469068d2ddd945000621d3d165d2e7dd7b/pytest_cov-6.2.1.tar.gz", hash = "sha256:25cc6cc0a5358204b8108ecedc51a9b57b34cc6b8c967cc2c01a4e00d8a67da2", size = 69432, upload-time = "2025-06-12T10:47:47.684Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/bc/16/4ea354101abb1287856baa4af2732be351c7bee728065aed451b678153fd/pytest_cov-6.2.1-py3-none-any.whl", hash = "sha256:f5bc4c23f42f1cdd23c70b1dab1bbaef4fc505ba950d53e0081d0730dd7e86d5", size = 24644, upload-time = "2025-06-12T10:47:45.932Z" },
]

[[package]]
name = "pytest-mock"
version = "3.14.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "pytest" },
]
sdist = { url = "https://files.pythonhosted.org/packages/71/28/67172c96ba684058a4d24ffe144d64783d2a270d0af0d9e792737bddc75c/pytest_mock-3.14.1.tar.gz", hash = "sha256:159e9edac4c451ce77a5cdb9fc5d1100708d2dd4ba3c3df572f14097351af80e", size = 33241, upload-time = "2025-05-26T13:58:45.167Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/b2/05/77b60e520511c53d1c1ca75f1930c7dd8e971d0c4379b7f4b3f9644685ba/pytest_mock-3.14.1-py3-none-any.whl", hash = "sha256:178aefcd11307d874b4cd3100344e7e2d888d9791a6a1d9bfe90fbc1b74fd1d0", size = 9923, upload-time = "2025-05-26T13:58:43.487Z" },
]

[[package]]
name = "python-dateutil"
version = "2.9.0.post0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "six" },
]
sdist = { url = "https://files.pythonhosted.org/packages/66/c0/0c8b6ad9f17a802ee498c46e004a0eb49bc148f2fd230864601a86dcf6db/python-dateutil-2.9.0.post0.tar.gz", hash = "sha256:37dd54208da7e1cd875388217d5e00ebd4179249f90fb72437e91a35459a0ad3", size = 342432, upload-time = "2024-03-01T18:36:20.211Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/ec/57/56b9bcc3c9c6a792fcbaf139543cee77261f3651ca9da0c93f5c1221264b/python_dateutil-2.9.0.post0-py2.py3-none-any.whl", hash = "sha256:a8b2bc7bffae282281c8140a97d3aa9c14da0b136dfe83f850eea9a5f7470427", size = 229892, upload-time = "2024-03-01T18:36:18.57Z" },
]

[[package]]
name = "python-dotenv"
version = "1.1.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/f6/b0/4bc07ccd3572a2f9df7e6782f52b0c6c90dcbb803ac4a167702d7d0dfe1e/python_dotenv-1.1.1.tar.gz", hash = "sha256:a8a6399716257f45be6a007360200409fce5cda2661e3dec71d23dc15f6189ab", size = 41978, upload-time = "2025-06-24T04:21:07.341Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/5f/ed/539768cf28c661b5b068d66d96a2f155c4971a5d55684a514c1a0e0dec2f/python_dotenv-1.1.1-py3-none-any.whl", hash = "sha256:31f23644fe2602f88ff55e1f5c79ba497e01224ee7737937930c448e4d0e24dc", size = 20556, upload-time = "2025-06-24T04:21:06.073Z" },
]

[[package]]
name = "python-multipart"
version = "0.0.20"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/f3/87/f44d7c9f274c7ee665a29b885ec97089ec5dc034c7f3fafa03da9e39a09e/python_multipart-0.0.20.tar.gz", hash = "sha256:8dd0cab45b8e23064ae09147625994d090fa46f5b0d1e13af944c331a7fa9d13", size = 37158, upload-time = "2024-12-16T19:45:46.972Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/45/58/38b5afbc1a800eeea951b9285d3912613f2603bdf897a4ab0f4bd7f405fc/python_multipart-0.0.20-py3-none-any.whl", hash = "sha256:8a62d3a8335e06589fe01f2a3e178cdcc632f3fbe0d492ad9ee0ec35aab1f104", size = 24546, upload-time = "2024-12-16T19:45:44.423Z" },
]

[[package]]
name = "pyyaml"
version = "6.0.2"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/54/ed/79a089b6be93607fa5cdaedf301d7dfb23af5f25c398d5ead2525b063e17/pyyaml-6.0.2.tar.gz", hash = "sha256:d584d9ec91ad65861cc08d42e834324ef890a082e591037abe114850ff7bbc3e", size = 130631, upload-time = "2024-08-06T20:33:50.674Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/86/0c/c581167fc46d6d6d7ddcfb8c843a4de25bdd27e4466938109ca68492292c/PyYAML-6.0.2-cp312-cp312-macosx_10_9_x86_64.whl", hash = "sha256:c70c95198c015b85feafc136515252a261a84561b7b1d51e3384e0655ddf25ab", size = 183873, upload-time = "2024-08-06T20:32:25.131Z" },
    { url = "https://files.pythonhosted.org/packages/a8/0c/38374f5bb272c051e2a69281d71cba6fdb983413e6758b84482905e29a5d/PyYAML-6.0.2-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:ce826d6ef20b1bc864f0a68340c8b3287705cae2f8b4b1d932177dcc76721725", size = 173302, upload-time = "2024-08-06T20:32:26.511Z" },
    { url = "https://files.pythonhosted.org/packages/c3/93/9916574aa8c00aa06bbac729972eb1071d002b8e158bd0e83a3b9a20a1f7/PyYAML-6.0.2-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:1f71ea527786de97d1a0cc0eacd1defc0985dcf6b3f17bb77dcfc8c34bec4dc5", size = 739154, upload-time = "2024-08-06T20:32:28.363Z" },
    { url = "https://files.pythonhosted.org/packages/95/0f/b8938f1cbd09739c6da569d172531567dbcc9789e0029aa070856f123984/PyYAML-6.0.2-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:9b22676e8097e9e22e36d6b7bda33190d0d400f345f23d4065d48f4ca7ae0425", size = 766223, upload-time = "2024-08-06T20:32:30.058Z" },
    { url = "https://files.pythonhosted.org/packages/b9/2b/614b4752f2e127db5cc206abc23a8c19678e92b23c3db30fc86ab731d3bd/PyYAML-6.0.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:80bab7bfc629882493af4aa31a4cfa43a4c57c83813253626916b8c7ada83476", size = 767542, upload-time = "2024-08-06T20:32:31.881Z" },
    { url = "https://files.pythonhosted.org/packages/d4/00/dd137d5bcc7efea1836d6264f049359861cf548469d18da90cd8216cf05f/PyYAML-6.0.2-cp312-cp312-musllinux_1_1_aarch64.whl", hash = "sha256:0833f8694549e586547b576dcfaba4a6b55b9e96098b36cdc7ebefe667dfed48", size = 731164, upload-time = "2024-08-06T20:32:37.083Z" },
    { url = "https://files.pythonhosted.org/packages/c9/1f/4f998c900485e5c0ef43838363ba4a9723ac0ad73a9dc42068b12aaba4e4/PyYAML-6.0.2-cp312-cp312-musllinux_1_1_x86_64.whl", hash = "sha256:8b9c7197f7cb2738065c481a0461e50ad02f18c78cd75775628afb4d7137fb3b", size = 756611, upload-time = "2024-08-06T20:32:38.898Z" },
    { url = "https://files.pythonhosted.org/packages/df/d1/f5a275fdb252768b7a11ec63585bc38d0e87c9e05668a139fea92b80634c/PyYAML-6.0.2-cp312-cp312-win32.whl", hash = "sha256:ef6107725bd54b262d6dedcc2af448a266975032bc85ef0172c5f059da6325b4", size = 140591, upload-time = "2024-08-06T20:32:40.241Z" },
    { url = "https://files.pythonhosted.org/packages/0c/e8/4f648c598b17c3d06e8753d7d13d57542b30d56e6c2dedf9c331ae56312e/PyYAML-6.0.2-cp312-cp312-win_amd64.whl", hash = "sha256:7e7401d0de89a9a855c839bc697c079a4af81cf878373abd7dc625847d25cbd8", size = 156338, upload-time = "2024-08-06T20:32:41.93Z" },
    { url = "https://files.pythonhosted.org/packages/ef/e3/3af305b830494fa85d95f6d95ef7fa73f2ee1cc8ef5b495c7c3269fb835f/PyYAML-6.0.2-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:efdca5630322a10774e8e98e1af481aad470dd62c3170801852d752aa7a783ba", size = 181309, upload-time = "2024-08-06T20:32:43.4Z" },
    { url = "https://files.pythonhosted.org/packages/45/9f/3b1c20a0b7a3200524eb0076cc027a970d320bd3a6592873c85c92a08731/PyYAML-6.0.2-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:50187695423ffe49e2deacb8cd10510bc361faac997de9efef88badc3bb9e2d1", size = 171679, upload-time = "2024-08-06T20:32:44.801Z" },
    { url = "https://files.pythonhosted.org/packages/7c/9a/337322f27005c33bcb656c655fa78325b730324c78620e8328ae28b64d0c/PyYAML-6.0.2-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:0ffe8360bab4910ef1b9e87fb812d8bc0a308b0d0eef8c8f44e0254ab3b07133", size = 733428, upload-time = "2024-08-06T20:32:46.432Z" },
    { url = "https://files.pythonhosted.org/packages/a3/69/864fbe19e6c18ea3cc196cbe5d392175b4cf3d5d0ac1403ec3f2d237ebb5/PyYAML-6.0.2-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:17e311b6c678207928d649faa7cb0d7b4c26a0ba73d41e99c4fff6b6c3276484", size = 763361, upload-time = "2024-08-06T20:32:51.188Z" },
    { url = "https://files.pythonhosted.org/packages/04/24/b7721e4845c2f162d26f50521b825fb061bc0a5afcf9a386840f23ea19fa/PyYAML-6.0.2-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:70b189594dbe54f75ab3a1acec5f1e3faa7e8cf2f1e08d9b561cb41b845f69d5", size = 759523, upload-time = "2024-08-06T20:32:53.019Z" },
    { url = "https://files.pythonhosted.org/packages/2b/b2/e3234f59ba06559c6ff63c4e10baea10e5e7df868092bf9ab40e5b9c56b6/PyYAML-6.0.2-cp313-cp313-musllinux_1_1_aarch64.whl", hash = "sha256:41e4e3953a79407c794916fa277a82531dd93aad34e29c2a514c2c0c5fe971cc", size = 726660, upload-time = "2024-08-06T20:32:54.708Z" },
    { url = "https://files.pythonhosted.org/packages/fe/0f/25911a9f080464c59fab9027482f822b86bf0608957a5fcc6eaac85aa515/PyYAML-6.0.2-cp313-cp313-musllinux_1_1_x86_64.whl", hash = "sha256:68ccc6023a3400877818152ad9a1033e3db8625d899c72eacb5a668902e4d652", size = 751597, upload-time = "2024-08-06T20:32:56.985Z" },
    { url = "https://files.pythonhosted.org/packages/14/0d/e2c3b43bbce3cf6bd97c840b46088a3031085179e596d4929729d8d68270/PyYAML-6.0.2-cp313-cp313-win32.whl", hash = "sha256:bc2fa7c6b47d6bc618dd7fb02ef6fdedb1090ec036abab80d4681424b84c1183", size = 140527, upload-time = "2024-08-06T20:33:03.001Z" },
    { url = "https://files.pythonhosted.org/packages/fa/de/02b54f42487e3d3c6efb3f89428677074ca7bf43aae402517bc7cca949f3/PyYAML-6.0.2-cp313-cp313-win_amd64.whl", hash = "sha256:8388ee1976c416731879ac16da0aff3f63b286ffdd57cdeb95f3f2e085687563", size = 156446, upload-time = "2024-08-06T20:33:04.33Z" },
]

[[package]]
name = "realtime"
version = "2.5.3"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "typing-extensions" },
    { name = "websockets" },
]
sdist = { url = "https://files.pythonhosted.org/packages/48/94/3cf962b814303a1688eece56a94b25a7bd423d60705f1124cba0896c9c07/realtime-2.5.3.tar.gz", hash = "sha256:0587594f3bc1c84bf007ff625075b86db6528843e03250dc84f4f2808be3d99a", size = 18527, upload-time = "2025-06-26T22:39:01.59Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/fe/2a/f69c156a58d44b7b9ca22dab181b91e4d93d074f99923c75907bf3953d40/realtime-2.5.3-py3-none-any.whl", hash = "sha256:eb0994636946eff04c4c7f044f980c8c633c7eb632994f549f61053a474ac970", size = 21784, upload-time = "2025-06-26T22:38:59.98Z" },
]

[[package]]
name = "requests"
version = "2.32.4"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "certifi" },
    { name = "charset-normalizer" },
    { name = "idna" },
    { name = "urllib3" },
]
sdist = { url = "https://files.pythonhosted.org/packages/e1/0a/929373653770d8a0d7ea76c37de6e41f11eb07559b103b1c02cafb3f7cf8/requests-2.32.4.tar.gz", hash = "sha256:27d0316682c8a29834d3264820024b62a36942083d52caf2f14c0591336d3422", size = 135258, upload-time = "2025-06-09T16:43:07.34Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/7c/e4/56027c4a6b4ae70ca9de302488c5ca95ad4a39e190093d6c1a8ace08341b/requests-2.32.4-py3-none-any.whl", hash = "sha256:27babd3cda2a6d50b30443204ee89830707d396671944c998b5975b031ac2b2c", size = 64847, upload-time = "2025-06-09T16:43:05.728Z" },
]

[[package]]
name = "rsa"
version = "4.9.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "pyasn1" },
]
sdist = { url = "https://files.pythonhosted.org/packages/da/8a/22b7beea3ee0d44b1916c0c1cb0ee3af23b700b6da9f04991899d0c555d4/rsa-4.9.1.tar.gz", hash = "sha256:e7bdbfdb5497da4c07dfd35530e1a902659db6ff241e39d9953cad06ebd0ae75", size = 29034, upload-time = "2025-04-16T09:51:18.218Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/64/8d/0133e4eb4beed9e425d9a98ed6e081a55d195481b7632472be1af08d2f6b/rsa-4.9.1-py3-none-any.whl", hash = "sha256:68635866661c6836b8d39430f97a996acbd61bfa49406748ea243539fe239762", size = 34696, upload-time = "2025-04-16T09:51:17.142Z" },
]

[[package]]
name = "six"
version = "1.17.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/94/e7/b2c673351809dca68a0e064b6af791aa332cf192da575fd474ed7d6f16a2/six-1.17.0.tar.gz", hash = "sha256:ff70335d468e7eb6ec65b95b99d3a2836546063f63acc5171de367e834932a81", size = 34031, upload-time = "2024-12-04T17:35:28.174Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/b7/ce/149a00dd41f10bc29e5921b496af8b574d8413afcd5e30dfa0ed46c2cc5e/six-1.17.0-py2.py3-none-any.whl", hash = "sha256:4721f391ed90541fddacab5acf947aa0d3dc7d27b2e1e8eda2be8970586c3274", size = 11050, upload-time = "2024-12-04T17:35:26.475Z" },
]

[[package]]
name = "sniffio"
version = "1.3.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/a2/87/a6771e1546d97e7e041b6ae58d80074f81b7d5121207425c964ddf5cfdbd/sniffio-1.3.1.tar.gz", hash = "sha256:f4324edc670a0f49750a81b895f35c3adb843cca46f0530f79fc1babb23789dc", size = 20372, upload-time = "2024-02-25T23:20:04.057Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/e9/44/75a9c9421471a6c4805dbf2356f7c181a29c1879239abab1ea2cc8f38b40/sniffio-1.3.1-py3-none-any.whl", hash = "sha256:2f6da418d1f1e0fddd844478f41680e794e6051915791a034ff65e5f100525a2", size = 10235, upload-time = "2024-02-25T23:20:01.196Z" },
]

[[package]]
name = "starlette"
version = "0.46.2"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "anyio" },
]
sdist = { url = "https://files.pythonhosted.org/packages/ce/20/08dfcd9c983f6a6f4a1000d934b9e6d626cff8d2eeb77a89a68eef20a2b7/starlette-0.46.2.tar.gz", hash = "sha256:7f7361f34eed179294600af672f565727419830b54b7b084efe44bb82d2fccd5", size = 2580846, upload-time = "2025-04-13T13:56:17.942Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/8b/0c/9d30a4ebeb6db2b25a841afbb80f6ef9a854fc3b41be131d249a977b4959/starlette-0.46.2-py3-none-any.whl", hash = "sha256:595633ce89f8ffa71a015caed34a5b2dc1c0cdb3f0f1fbd1e69339cf2abeec35", size = 72037, upload-time = "2025-04-13T13:56:16.21Z" },
]

[[package]]
name = "storage3"
version = "0.12.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "deprecation" },
    { name = "httpx", extra = ["http2"] },
    { name = "python-dateutil" },
]
sdist = { url = "https://files.pythonhosted.org/packages/c5/86/9eae84e8ad4ba73f575f3eaf5536d949f2fd7d6adc85829f9af04bce97e2/storage3-0.12.0.tar.gz", hash = "sha256:94243f20922d57738bf42e96b9f5582b4d166e8bf209eccf20b146909f3f71b0", size = 10024, upload-time = "2025-06-19T17:50:51.763Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/b0/7e/693d6d603db142eb5e6f3cb76eb6e9c439582b7539e2695e175e2de3ac44/storage3-0.12.0-py3-none-any.whl", hash = "sha256:1c4585693ca42243ded1512b58e54c697111e91a20916cd14783eebc37e7c87d", size = 18422, upload-time = "2025-06-19T17:50:50.294Z" },
]

[[package]]
name = "strenum"
version = "0.4.15"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/85/ad/430fb60d90e1d112a62ff57bdd1f286ec73a2a0331272febfddd21f330e1/StrEnum-0.4.15.tar.gz", hash = "sha256:878fb5ab705442070e4dd1929bb5e2249511c0bcf2b0eeacf3bcd80875c82eff", size = 23384, upload-time = "2023-06-29T22:02:58.399Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/81/69/297302c5f5f59c862faa31e6cb9a4cd74721cd1e052b38e464c5b402df8b/StrEnum-0.4.15-py3-none-any.whl", hash = "sha256:a30cda4af7cc6b5bf52c8055bc4bf4b2b6b14a93b574626da33df53cf7740659", size = 8851, upload-time = "2023-06-29T22:02:56.947Z" },
]

[[package]]
name = "study-scriber"
version = "0.1.0"
source = { virtual = "." }
dependencies = [
    { name = "aiofiles" },
    { name = "aiohttp" },
    { name = "fastapi" },
    { name = "google-generativeai" },
    { name = "gotrue" },
    { name = "httpx" },
    { name = "loguru" },
    { name = "openai" },
    { name = "postgrest" },
    { name = "prometheus-client" },
    { name = "psycopg2-binary" },
    { name = "pydantic" },
    { name = "pydantic-settings" },
    { name = "pytest" },
    { name = "pytest-asyncio" },
    { name = "python-dotenv" },
    { name = "python-multipart" },
    { name = "realtime" },
    { name = "storage3" },
    { name = "supabase" },
    { name = "uvicorn", extra = ["standard"] },
    { name = "uvloop" },
]

[package.optional-dependencies]
dev = [
    { name = "pytest" },
    { name = "pytest-asyncio" },
    { name = "pytest-cov" },
]

[package.metadata]
requires-dist = [
    { name = "aiofiles" },
    { name = "aiohttp" },
    { name = "fastapi" },
    { name = "google-generativeai" },
    { name = "gotrue" },
    { name = "httpx" },
    { name = "loguru" },
    { name = "openai" },
    { name = "postgrest" },
    { name = "prometheus-client" },
    { name = "psycopg2-binary" },
    { name = "pydantic" },
    { name = "pydantic-settings" },
    { name = "pytest", specifier = ">=8.0.0" },
    { name = "pytest", marker = "extra == 'dev'", specifier = ">=8.0.0" },
    { name = "pytest-asyncio", specifier = ">=0.23.0" },
    { name = "pytest-asyncio", marker = "extra == 'dev'", specifier = ">=0.23.0" },
    { name = "pytest-cov", marker = "extra == 'dev'", specifier = ">=4.0.0" },
    { name = "python-dotenv" },
    { name = "python-multipart" },
    { name = "realtime" },
    { name = "storage3" },
    { name = "supabase" },
    { name = "uvicorn", extras = ["standard"] },
    { name = "uvloop" },
]
provides-extras = ["dev"]

[[package]]
name = "supabase"
version = "2.16.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "gotrue" },
    { name = "httpx" },
    { name = "postgrest" },
    { name = "realtime" },
    { name = "storage3" },
    { name = "supafunc" },
]
sdist = { url = "https://files.pythonhosted.org/packages/c6/93/335b91e8d09a95a337f051f84e85495f7732400f10c1bcb698a7571f8f1c/supabase-2.16.0.tar.gz", hash = "sha256:98f3810158012d4ec0e3083f2e5515f5e10b32bd71e7d458662140e963c1d164", size = 14595, upload-time = "2025-06-23T16:09:29.504Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/7e/75/2ab71e6605d20a740ff041c6176a328cfaa3fcee0dd0db885e081d98df06/supabase-2.16.0-py3-none-any.whl", hash = "sha256:99065caab3d90a56650bf39fbd0e49740995da3738ab28706c61bd7f2401db55", size = 17713, upload-time = "2025-06-23T16:09:28.299Z" },
]

[[package]]
name = "supafunc"
version = "0.10.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "httpx", extra = ["http2"] },
    { name = "strenum" },
]
sdist = { url = "https://files.pythonhosted.org/packages/e8/4b/16f94bcae8a49f5e09544a4fb0e6ad1c2288038036cefdeedb72fcffd92c/supafunc-0.10.1.tar.gz", hash = "sha256:a5b33c8baecb6b5297d25da29a2503e2ec67ee6986f3d44c137e651b8a59a17d", size = 5036, upload-time = "2025-06-23T18:26:50.327Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/76/4a/9cbea12d86a741d4e73a6e278c2b1d6479fb03d1002efb00e8e71aea76db/supafunc-0.10.1-py3-none-any.whl", hash = "sha256:26df9bd25ff2ef56cb5bfb8962de98f43331f7f8ff69572bac3ed9c3a9672040", size = 8028, upload-time = "2025-06-23T18:26:49.176Z" },
]

[[package]]
name = "tqdm"
version = "4.67.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "colorama", marker = "sys_platform == 'win32'" },
]
sdist = { url = "https://files.pythonhosted.org/packages/a8/4b/29b4ef32e036bb34e4ab51796dd745cdba7ed47ad142a9f4a1eb8e0c744d/tqdm-4.67.1.tar.gz", hash = "sha256:f8aef9c52c08c13a65f30ea34f4e5aac3fd1a34959879d7e59e63027286627f2", size = 169737, upload-time = "2024-11-24T20:12:22.481Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d0/30/dc54f88dd4a2b5dc8a0279bdd7270e735851848b762aeb1c1184ed1f6b14/tqdm-4.67.1-py3-none-any.whl", hash = "sha256:26445eca388f82e72884e0d580d5464cd801a3ea01e63e5601bdff9ba6a48de2", size = 78540, upload-time = "2024-11-24T20:12:19.698Z" },
]

[[package]]
name = "typing-extensions"
version = "4.14.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/d1/bc/51647cd02527e87d05cb083ccc402f93e441606ff1f01739a62c8ad09ba5/typing_extensions-4.14.0.tar.gz", hash = "sha256:8676b788e32f02ab42d9e7c61324048ae4c6d844a399eebace3d4979d75ceef4", size = 107423, upload-time = "2025-06-02T14:52:11.399Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/69/e0/552843e0d356fbb5256d21449fa957fa4eff3bbc135a74a691ee70c7c5da/typing_extensions-4.14.0-py3-none-any.whl", hash = "sha256:a1514509136dd0b477638fc68d6a91497af5076466ad0fa6c338e44e359944af", size = 43839, upload-time = "2025-06-02T14:52:10.026Z" },
]

[[package]]
name = "typing-inspection"
version = "0.4.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "typing-extensions" },
]
sdist = { url = "https://files.pythonhosted.org/packages/f8/b1/0c11f5058406b3af7609f121aaa6b609744687f1d158b3c3a5bf4cc94238/typing_inspection-0.4.1.tar.gz", hash = "sha256:6ae134cc0203c33377d43188d4064e9b357dba58cff3185f22924610e70a9d28", size = 75726, upload-time = "2025-05-21T18:55:23.885Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/17/69/cd203477f944c353c31bade965f880aa1061fd6bf05ded0726ca845b6ff7/typing_inspection-0.4.1-py3-none-any.whl", hash = "sha256:389055682238f53b04f7badcb49b989835495a96700ced5dab2d8feae4b26f51", size = 14552, upload-time = "2025-05-21T18:55:22.152Z" },
]

[[package]]
name = "uritemplate"
version = "4.2.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/98/60/f174043244c5306c9988380d2cb10009f91563fc4b31293d27e17201af56/uritemplate-4.2.0.tar.gz", hash = "sha256:480c2ed180878955863323eea31b0ede668795de182617fef9c6ca09e6ec9d0e", size = 33267, upload-time = "2025-06-02T15:12:06.318Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/a9/99/3ae339466c9183ea5b8ae87b34c0b897eda475d2aec2307cae60e5cd4f29/uritemplate-4.2.0-py3-none-any.whl", hash = "sha256:962201ba1c4edcab02e60f9a0d3821e82dfc5d2d6662a21abd533879bdb8a686", size = 11488, upload-time = "2025-06-02T15:12:03.405Z" },
]

[[package]]
name = "urllib3"
version = "2.5.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/15/22/9ee70a2574a4f4599c47dd506532914ce044817c7752a79b6a51286319bc/urllib3-2.5.0.tar.gz", hash = "sha256:3fc47733c7e419d4bc3f6b3dc2b4f890bb743906a30d56ba4a5bfa4bbff92760", size = 393185, upload-time = "2025-06-18T14:07:41.644Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/a7/c2/fe1e52489ae3122415c51f387e221dd0773709bad6c6cdaa599e8a2c5185/urllib3-2.5.0-py3-none-any.whl", hash = "sha256:e6b01673c0fa6a13e374b50871808eb3bf7046c4b125b216f6bf1cc604cff0dc", size = 129795, upload-time = "2025-06-18T14:07:40.39Z" },
]

[[package]]
name = "uvicorn"
version = "0.35.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "click" },
    { name = "h11" },
]
sdist = { url = "https://files.pythonhosted.org/packages/5e/42/e0e305207bb88c6b8d3061399c6a961ffe5fbb7e2aa63c9234df7259e9cd/uvicorn-0.35.0.tar.gz", hash = "sha256:bc662f087f7cf2ce11a1d7fd70b90c9f98ef2e2831556dd078d131b96cc94a01", size = 78473, upload-time = "2025-06-28T16:15:46.058Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d2/e2/dc81b1bd1dcfe91735810265e9d26bc8ec5da45b4c0f6237e286819194c3/uvicorn-0.35.0-py3-none-any.whl", hash = "sha256:197535216b25ff9b785e29a0b79199f55222193d47f820816e7da751e9bc8d4a", size = 66406, upload-time = "2025-06-28T16:15:44.816Z" },
]

[package.optional-dependencies]
standard = [
    { name = "colorama", marker = "sys_platform == 'win32'" },
    { name = "httptools" },
    { name = "python-dotenv" },
    { name = "pyyaml" },
    { name = "uvloop", marker = "platform_python_implementation != 'PyPy' and sys_platform != 'cygwin' and sys_platform != 'win32'" },
    { name = "watchfiles" },
    { name = "websockets" },
]

[[package]]
name = "uvloop"
version = "0.21.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/af/c0/854216d09d33c543f12a44b393c402e89a920b1a0a7dc634c42de91b9cf6/uvloop-0.21.0.tar.gz", hash = "sha256:3bf12b0fda68447806a7ad847bfa591613177275d35b6724b1ee573faa3704e3", size = 2492741, upload-time = "2024-10-14T23:38:35.489Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/8c/4c/03f93178830dc7ce8b4cdee1d36770d2f5ebb6f3d37d354e061eefc73545/uvloop-0.21.0-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:359ec2c888397b9e592a889c4d72ba3d6befba8b2bb01743f72fffbde663b59c", size = 1471284, upload-time = "2024-10-14T23:37:47.833Z" },
    { url = "https://files.pythonhosted.org/packages/43/3e/92c03f4d05e50f09251bd8b2b2b584a2a7f8fe600008bcc4523337abe676/uvloop-0.21.0-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:f7089d2dc73179ce5ac255bdf37c236a9f914b264825fdaacaded6990a7fb4c2", size = 821349, upload-time = "2024-10-14T23:37:50.149Z" },
    { url = "https://files.pythonhosted.org/packages/a6/ef/a02ec5da49909dbbfb1fd205a9a1ac4e88ea92dcae885e7c961847cd51e2/uvloop-0.21.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:baa4dcdbd9ae0a372f2167a207cd98c9f9a1ea1188a8a526431eef2f8116cc8d", size = 4580089, upload-time = "2024-10-14T23:37:51.703Z" },
    { url = "https://files.pythonhosted.org/packages/06/a7/b4e6a19925c900be9f98bec0a75e6e8f79bb53bdeb891916609ab3958967/uvloop-0.21.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:86975dca1c773a2c9864f4c52c5a55631038e387b47eaf56210f873887b6c8dc", size = 4693770, upload-time = "2024-10-14T23:37:54.122Z" },
    { url = "https://files.pythonhosted.org/packages/ce/0c/f07435a18a4b94ce6bd0677d8319cd3de61f3a9eeb1e5f8ab4e8b5edfcb3/uvloop-0.21.0-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:461d9ae6660fbbafedd07559c6a2e57cd553b34b0065b6550685f6653a98c1cb", size = 4451321, upload-time = "2024-10-14T23:37:55.766Z" },
    { url = "https://files.pythonhosted.org/packages/8f/eb/f7032be105877bcf924709c97b1bf3b90255b4ec251f9340cef912559f28/uvloop-0.21.0-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:183aef7c8730e54c9a3ee3227464daed66e37ba13040bb3f350bc2ddc040f22f", size = 4659022, upload-time = "2024-10-14T23:37:58.195Z" },
    { url = "https://files.pythonhosted.org/packages/3f/8d/2cbef610ca21539f0f36e2b34da49302029e7c9f09acef0b1c3b5839412b/uvloop-0.21.0-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:bfd55dfcc2a512316e65f16e503e9e450cab148ef11df4e4e679b5e8253a5281", size = 1468123, upload-time = "2024-10-14T23:38:00.688Z" },
    { url = "https://files.pythonhosted.org/packages/93/0d/b0038d5a469f94ed8f2b2fce2434a18396d8fbfb5da85a0a9781ebbdec14/uvloop-0.21.0-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:787ae31ad8a2856fc4e7c095341cccc7209bd657d0e71ad0dc2ea83c4a6fa8af", size = 819325, upload-time = "2024-10-14T23:38:02.309Z" },
    { url = "https://files.pythonhosted.org/packages/50/94/0a687f39e78c4c1e02e3272c6b2ccdb4e0085fda3b8352fecd0410ccf915/uvloop-0.21.0-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:5ee4d4ef48036ff6e5cfffb09dd192c7a5027153948d85b8da7ff705065bacc6", size = 4582806, upload-time = "2024-10-14T23:38:04.711Z" },
    { url = "https://files.pythonhosted.org/packages/d2/19/f5b78616566ea68edd42aacaf645adbf71fbd83fc52281fba555dc27e3f1/uvloop-0.21.0-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:f3df876acd7ec037a3d005b3ab85a7e4110422e4d9c1571d4fc89b0fc41b6816", size = 4701068, upload-time = "2024-10-14T23:38:06.385Z" },
    { url = "https://files.pythonhosted.org/packages/47/57/66f061ee118f413cd22a656de622925097170b9380b30091b78ea0c6ea75/uvloop-0.21.0-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:bd53ecc9a0f3d87ab847503c2e1552b690362e005ab54e8a48ba97da3924c0dc", size = 4454428, upload-time = "2024-10-14T23:38:08.416Z" },
    { url = "https://files.pythonhosted.org/packages/63/9a/0962b05b308494e3202d3f794a6e85abe471fe3cafdbcf95c2e8c713aabd/uvloop-0.21.0-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:a5c39f217ab3c663dc699c04cbd50c13813e31d917642d459fdcec07555cc553", size = 4660018, upload-time = "2024-10-14T23:38:10.888Z" },
]

[[package]]
name = "watchfiles"
version = "1.1.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "anyio" },
]
sdist = { url = "https://files.pythonhosted.org/packages/2a/9a/d451fcc97d029f5812e898fd30a53fd8c15c7bbd058fd75cfc6beb9bd761/watchfiles-1.1.0.tar.gz", hash = "sha256:693ed7ec72cbfcee399e92c895362b6e66d63dac6b91e2c11ae03d10d503e575", size = 94406, upload-time = "2025-06-15T19:06:59.42Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/f6/b8/858957045a38a4079203a33aaa7d23ea9269ca7761c8a074af3524fbb240/watchfiles-1.1.0-cp312-cp312-macosx_10_12_x86_64.whl", hash = "sha256:9dc001c3e10de4725c749d4c2f2bdc6ae24de5a88a339c4bce32300a31ede179", size = 402339, upload-time = "2025-06-15T19:05:24.516Z" },
    { url = "https://files.pythonhosted.org/packages/80/28/98b222cca751ba68e88521fabd79a4fab64005fc5976ea49b53fa205d1fa/watchfiles-1.1.0-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:d9ba68ec283153dead62cbe81872d28e053745f12335d037de9cbd14bd1877f5", size = 394409, upload-time = "2025-06-15T19:05:25.469Z" },
    { url = "https://files.pythonhosted.org/packages/86/50/dee79968566c03190677c26f7f47960aff738d32087087bdf63a5473e7df/watchfiles-1.1.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:130fc497b8ee68dce163e4254d9b0356411d1490e868bd8790028bc46c5cc297", size = 450939, upload-time = "2025-06-15T19:05:26.494Z" },
    { url = "https://files.pythonhosted.org/packages/40/45/a7b56fb129700f3cfe2594a01aa38d033b92a33dddce86c8dfdfc1247b72/watchfiles-1.1.0-cp312-cp312-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:50a51a90610d0845a5931a780d8e51d7bd7f309ebc25132ba975aca016b576a0", size = 457270, upload-time = "2025-06-15T19:05:27.466Z" },
    { url = "https://files.pythonhosted.org/packages/b5/c8/fa5ef9476b1d02dc6b5e258f515fcaaecf559037edf8b6feffcbc097c4b8/watchfiles-1.1.0-cp312-cp312-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:dc44678a72ac0910bac46fa6a0de6af9ba1355669b3dfaf1ce5f05ca7a74364e", size = 483370, upload-time = "2025-06-15T19:05:28.548Z" },
    { url = "https://files.pythonhosted.org/packages/98/68/42cfcdd6533ec94f0a7aab83f759ec11280f70b11bfba0b0f885e298f9bd/watchfiles-1.1.0-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:a543492513a93b001975ae283a51f4b67973662a375a403ae82f420d2c7205ee", size = 598654, upload-time = "2025-06-15T19:05:29.997Z" },
    { url = "https://files.pythonhosted.org/packages/d3/74/b2a1544224118cc28df7e59008a929e711f9c68ce7d554e171b2dc531352/watchfiles-1.1.0-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:8ac164e20d17cc285f2b94dc31c384bc3aa3dd5e7490473b3db043dd70fbccfd", size = 478667, upload-time = "2025-06-15T19:05:31.172Z" },
    { url = "https://files.pythonhosted.org/packages/8c/77/e3362fe308358dc9f8588102481e599c83e1b91c2ae843780a7ded939a35/watchfiles-1.1.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:f7590d5a455321e53857892ab8879dce62d1f4b04748769f5adf2e707afb9d4f", size = 452213, upload-time = "2025-06-15T19:05:32.299Z" },
    { url = "https://files.pythonhosted.org/packages/6e/17/c8f1a36540c9a1558d4faf08e909399e8133599fa359bf52ec8fcee5be6f/watchfiles-1.1.0-cp312-cp312-musllinux_1_1_aarch64.whl", hash = "sha256:37d3d3f7defb13f62ece99e9be912afe9dd8a0077b7c45ee5a57c74811d581a4", size = 626718, upload-time = "2025-06-15T19:05:33.415Z" },
    { url = "https://files.pythonhosted.org/packages/26/45/fb599be38b4bd38032643783d7496a26a6f9ae05dea1a42e58229a20ac13/watchfiles-1.1.0-cp312-cp312-musllinux_1_1_x86_64.whl", hash = "sha256:7080c4bb3efd70a07b1cc2df99a7aa51d98685be56be6038c3169199d0a1c69f", size = 623098, upload-time = "2025-06-15T19:05:34.534Z" },
    { url = "https://files.pythonhosted.org/packages/a1/e7/fdf40e038475498e160cd167333c946e45d8563ae4dd65caf757e9ffe6b4/watchfiles-1.1.0-cp312-cp312-win32.whl", hash = "sha256:cbcf8630ef4afb05dc30107bfa17f16c0896bb30ee48fc24bf64c1f970f3b1fd", size = 279209, upload-time = "2025-06-15T19:05:35.577Z" },
    { url = "https://files.pythonhosted.org/packages/3f/d3/3ae9d5124ec75143bdf088d436cba39812122edc47709cd2caafeac3266f/watchfiles-1.1.0-cp312-cp312-win_amd64.whl", hash = "sha256:cbd949bdd87567b0ad183d7676feb98136cde5bb9025403794a4c0db28ed3a47", size = 292786, upload-time = "2025-06-15T19:05:36.559Z" },
    { url = "https://files.pythonhosted.org/packages/26/2f/7dd4fc8b5f2b34b545e19629b4a018bfb1de23b3a496766a2c1165ca890d/watchfiles-1.1.0-cp312-cp312-win_arm64.whl", hash = "sha256:0a7d40b77f07be87c6faa93d0951a0fcd8cbca1ddff60a1b65d741bac6f3a9f6", size = 284343, upload-time = "2025-06-15T19:05:37.5Z" },
    { url = "https://files.pythonhosted.org/packages/d3/42/fae874df96595556a9089ade83be34a2e04f0f11eb53a8dbf8a8a5e562b4/watchfiles-1.1.0-cp313-cp313-macosx_10_12_x86_64.whl", hash = "sha256:5007f860c7f1f8df471e4e04aaa8c43673429047d63205d1630880f7637bca30", size = 402004, upload-time = "2025-06-15T19:05:38.499Z" },
    { url = "https://files.pythonhosted.org/packages/fa/55/a77e533e59c3003d9803c09c44c3651224067cbe7fb5d574ddbaa31e11ca/watchfiles-1.1.0-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:20ecc8abbd957046f1fe9562757903f5eaf57c3bce70929fda6c7711bb58074a", size = 393671, upload-time = "2025-06-15T19:05:39.52Z" },
    { url = "https://files.pythonhosted.org/packages/05/68/b0afb3f79c8e832e6571022611adbdc36e35a44e14f129ba09709aa4bb7a/watchfiles-1.1.0-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:f2f0498b7d2a3c072766dba3274fe22a183dbea1f99d188f1c6c72209a1063dc", size = 449772, upload-time = "2025-06-15T19:05:40.897Z" },
    { url = "https://files.pythonhosted.org/packages/ff/05/46dd1f6879bc40e1e74c6c39a1b9ab9e790bf1f5a2fe6c08b463d9a807f4/watchfiles-1.1.0-cp313-cp313-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:239736577e848678e13b201bba14e89718f5c2133dfd6b1f7846fa1b58a8532b", size = 456789, upload-time = "2025-06-15T19:05:42.045Z" },
    { url = "https://files.pythonhosted.org/packages/8b/ca/0eeb2c06227ca7f12e50a47a3679df0cd1ba487ea19cf844a905920f8e95/watchfiles-1.1.0-cp313-cp313-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:eff4b8d89f444f7e49136dc695599a591ff769300734446c0a86cba2eb2f9895", size = 482551, upload-time = "2025-06-15T19:05:43.781Z" },
    { url = "https://files.pythonhosted.org/packages/31/47/2cecbd8694095647406645f822781008cc524320466ea393f55fe70eed3b/watchfiles-1.1.0-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:12b0a02a91762c08f7264e2e79542f76870c3040bbc847fb67410ab81474932a", size = 597420, upload-time = "2025-06-15T19:05:45.244Z" },
    { url = "https://files.pythonhosted.org/packages/d9/7e/82abc4240e0806846548559d70f0b1a6dfdca75c1b4f9fa62b504ae9b083/watchfiles-1.1.0-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:29e7bc2eee15cbb339c68445959108803dc14ee0c7b4eea556400131a8de462b", size = 477950, upload-time = "2025-06-15T19:05:46.332Z" },
    { url = "https://files.pythonhosted.org/packages/25/0d/4d564798a49bf5482a4fa9416dea6b6c0733a3b5700cb8a5a503c4b15853/watchfiles-1.1.0-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:d9481174d3ed982e269c090f780122fb59cee6c3796f74efe74e70f7780ed94c", size = 451706, upload-time = "2025-06-15T19:05:47.459Z" },
    { url = "https://files.pythonhosted.org/packages/81/b5/5516cf46b033192d544102ea07c65b6f770f10ed1d0a6d388f5d3874f6e4/watchfiles-1.1.0-cp313-cp313-musllinux_1_1_aarch64.whl", hash = "sha256:80f811146831c8c86ab17b640801c25dc0a88c630e855e2bef3568f30434d52b", size = 625814, upload-time = "2025-06-15T19:05:48.654Z" },
    { url = "https://files.pythonhosted.org/packages/0c/dd/7c1331f902f30669ac3e754680b6edb9a0dd06dea5438e61128111fadd2c/watchfiles-1.1.0-cp313-cp313-musllinux_1_1_x86_64.whl", hash = "sha256:60022527e71d1d1fda67a33150ee42869042bce3d0fcc9cc49be009a9cded3fb", size = 622820, upload-time = "2025-06-15T19:05:50.088Z" },
    { url = "https://files.pythonhosted.org/packages/1b/14/36d7a8e27cd128d7b1009e7715a7c02f6c131be9d4ce1e5c3b73d0e342d8/watchfiles-1.1.0-cp313-cp313-win32.whl", hash = "sha256:32d6d4e583593cb8576e129879ea0991660b935177c0f93c6681359b3654bfa9", size = 279194, upload-time = "2025-06-15T19:05:51.186Z" },
    { url = "https://files.pythonhosted.org/packages/25/41/2dd88054b849aa546dbeef5696019c58f8e0774f4d1c42123273304cdb2e/watchfiles-1.1.0-cp313-cp313-win_amd64.whl", hash = "sha256:f21af781a4a6fbad54f03c598ab620e3a77032c5878f3d780448421a6e1818c7", size = 292349, upload-time = "2025-06-15T19:05:52.201Z" },
    { url = "https://files.pythonhosted.org/packages/c8/cf/421d659de88285eb13941cf11a81f875c176f76a6d99342599be88e08d03/watchfiles-1.1.0-cp313-cp313-win_arm64.whl", hash = "sha256:5366164391873ed76bfdf618818c82084c9db7fac82b64a20c44d335eec9ced5", size = 283836, upload-time = "2025-06-15T19:05:53.265Z" },
    { url = "https://files.pythonhosted.org/packages/45/10/6faf6858d527e3599cc50ec9fcae73590fbddc1420bd4fdccfebffeedbc6/watchfiles-1.1.0-cp313-cp313t-macosx_10_12_x86_64.whl", hash = "sha256:17ab167cca6339c2b830b744eaf10803d2a5b6683be4d79d8475d88b4a8a4be1", size = 400343, upload-time = "2025-06-15T19:05:54.252Z" },
    { url = "https://files.pythonhosted.org/packages/03/20/5cb7d3966f5e8c718006d0e97dfe379a82f16fecd3caa7810f634412047a/watchfiles-1.1.0-cp313-cp313t-macosx_11_0_arm64.whl", hash = "sha256:328dbc9bff7205c215a7807da7c18dce37da7da718e798356212d22696404339", size = 392916, upload-time = "2025-06-15T19:05:55.264Z" },
    { url = "https://files.pythonhosted.org/packages/8c/07/d8f1176328fa9e9581b6f120b017e286d2a2d22ae3f554efd9515c8e1b49/watchfiles-1.1.0-cp313-cp313t-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:f7208ab6e009c627b7557ce55c465c98967e8caa8b11833531fdf95799372633", size = 449582, upload-time = "2025-06-15T19:05:56.317Z" },
    { url = "https://files.pythonhosted.org/packages/66/e8/80a14a453cf6038e81d072a86c05276692a1826471fef91df7537dba8b46/watchfiles-1.1.0-cp313-cp313t-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:a8f6f72974a19efead54195bc9bed4d850fc047bb7aa971268fd9a8387c89011", size = 456752, upload-time = "2025-06-15T19:05:57.359Z" },
    { url = "https://files.pythonhosted.org/packages/5a/25/0853b3fe0e3c2f5af9ea60eb2e781eade939760239a72c2d38fc4cc335f6/watchfiles-1.1.0-cp313-cp313t-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:d181ef50923c29cf0450c3cd47e2f0557b62218c50b2ab8ce2ecaa02bd97e670", size = 481436, upload-time = "2025-06-15T19:05:58.447Z" },
    { url = "https://files.pythonhosted.org/packages/fe/9e/4af0056c258b861fbb29dcb36258de1e2b857be4a9509e6298abcf31e5c9/watchfiles-1.1.0-cp313-cp313t-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:adb4167043d3a78280d5d05ce0ba22055c266cf8655ce942f2fb881262ff3cdf", size = 596016, upload-time = "2025-06-15T19:05:59.59Z" },
    { url = "https://files.pythonhosted.org/packages/c5/fa/95d604b58aa375e781daf350897aaaa089cff59d84147e9ccff2447c8294/watchfiles-1.1.0-cp313-cp313t-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:8c5701dc474b041e2934a26d31d39f90fac8a3dee2322b39f7729867f932b1d4", size = 476727, upload-time = "2025-06-15T19:06:01.086Z" },
    { url = "https://files.pythonhosted.org/packages/65/95/fe479b2664f19be4cf5ceeb21be05afd491d95f142e72d26a42f41b7c4f8/watchfiles-1.1.0-cp313-cp313t-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:b067915e3c3936966a8607f6fe5487df0c9c4afb85226613b520890049deea20", size = 451864, upload-time = "2025-06-15T19:06:02.144Z" },
    { url = "https://files.pythonhosted.org/packages/d3/8a/3c4af14b93a15ce55901cd7a92e1a4701910f1768c78fb30f61d2b79785b/watchfiles-1.1.0-cp313-cp313t-musllinux_1_1_aarch64.whl", hash = "sha256:9c733cda03b6d636b4219625a4acb5c6ffb10803338e437fb614fef9516825ef", size = 625626, upload-time = "2025-06-15T19:06:03.578Z" },
    { url = "https://files.pythonhosted.org/packages/da/f5/cf6aa047d4d9e128f4b7cde615236a915673775ef171ff85971d698f3c2c/watchfiles-1.1.0-cp313-cp313t-musllinux_1_1_x86_64.whl", hash = "sha256:cc08ef8b90d78bfac66f0def80240b0197008e4852c9f285907377b2947ffdcb", size = 622744, upload-time = "2025-06-15T19:06:05.066Z" },
    { url = "https://files.pythonhosted.org/packages/2c/00/70f75c47f05dea6fd30df90f047765f6fc2d6eb8b5a3921379b0b04defa2/watchfiles-1.1.0-cp314-cp314-macosx_10_12_x86_64.whl", hash = "sha256:9974d2f7dc561cce3bb88dfa8eb309dab64c729de85fba32e98d75cf24b66297", size = 402114, upload-time = "2025-06-15T19:06:06.186Z" },
    { url = "https://files.pythonhosted.org/packages/53/03/acd69c48db4a1ed1de26b349d94077cca2238ff98fd64393f3e97484cae6/watchfiles-1.1.0-cp314-cp314-macosx_11_0_arm64.whl", hash = "sha256:c68e9f1fcb4d43798ad8814c4c1b61547b014b667216cb754e606bfade587018", size = 393879, upload-time = "2025-06-15T19:06:07.369Z" },
    { url = "https://files.pythonhosted.org/packages/2f/c8/a9a2a6f9c8baa4eceae5887fecd421e1b7ce86802bcfc8b6a942e2add834/watchfiles-1.1.0-cp314-cp314-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:95ab1594377effac17110e1352989bdd7bdfca9ff0e5eeccd8c69c5389b826d0", size = 450026, upload-time = "2025-06-15T19:06:08.476Z" },
    { url = "https://files.pythonhosted.org/packages/fe/51/d572260d98388e6e2b967425c985e07d47ee6f62e6455cefb46a6e06eda5/watchfiles-1.1.0-cp314-cp314-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:fba9b62da882c1be1280a7584ec4515d0a6006a94d6e5819730ec2eab60ffe12", size = 457917, upload-time = "2025-06-15T19:06:09.988Z" },
    { url = "https://files.pythonhosted.org/packages/c6/2d/4258e52917bf9f12909b6ec314ff9636276f3542f9d3807d143f27309104/watchfiles-1.1.0-cp314-cp314-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:3434e401f3ce0ed6b42569128b3d1e3af773d7ec18751b918b89cd49c14eaafb", size = 483602, upload-time = "2025-06-15T19:06:11.088Z" },
    { url = "https://files.pythonhosted.org/packages/84/99/bee17a5f341a4345fe7b7972a475809af9e528deba056f8963d61ea49f75/watchfiles-1.1.0-cp314-cp314-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:fa257a4d0d21fcbca5b5fcba9dca5a78011cb93c0323fb8855c6d2dfbc76eb77", size = 596758, upload-time = "2025-06-15T19:06:12.197Z" },
    { url = "https://files.pythonhosted.org/packages/40/76/e4bec1d59b25b89d2b0716b41b461ed655a9a53c60dc78ad5771fda5b3e6/watchfiles-1.1.0-cp314-cp314-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:7fd1b3879a578a8ec2076c7961076df540b9af317123f84569f5a9ddee64ce92", size = 477601, upload-time = "2025-06-15T19:06:13.391Z" },
    { url = "https://files.pythonhosted.org/packages/1f/fa/a514292956f4a9ce3c567ec0c13cce427c158e9f272062685a8a727d08fc/watchfiles-1.1.0-cp314-cp314-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:62cc7a30eeb0e20ecc5f4bd113cd69dcdb745a07c68c0370cea919f373f65d9e", size = 451936, upload-time = "2025-06-15T19:06:14.656Z" },
    { url = "https://files.pythonhosted.org/packages/32/5d/c3bf927ec3bbeb4566984eba8dd7a8eb69569400f5509904545576741f88/watchfiles-1.1.0-cp314-cp314-musllinux_1_1_aarch64.whl", hash = "sha256:891c69e027748b4a73847335d208e374ce54ca3c335907d381fde4e41661b13b", size = 626243, upload-time = "2025-06-15T19:06:16.232Z" },
    { url = "https://files.pythonhosted.org/packages/e6/65/6e12c042f1a68c556802a84d54bb06d35577c81e29fba14019562479159c/watchfiles-1.1.0-cp314-cp314-musllinux_1_1_x86_64.whl", hash = "sha256:12fe8eaffaf0faa7906895b4f8bb88264035b3f0243275e0bf24af0436b27259", size = 623073, upload-time = "2025-06-15T19:06:17.457Z" },
    { url = "https://files.pythonhosted.org/packages/89/ab/7f79d9bf57329e7cbb0a6fd4c7bd7d0cee1e4a8ef0041459f5409da3506c/watchfiles-1.1.0-cp314-cp314t-macosx_10_12_x86_64.whl", hash = "sha256:bfe3c517c283e484843cb2e357dd57ba009cff351edf45fb455b5fbd1f45b15f", size = 400872, upload-time = "2025-06-15T19:06:18.57Z" },
    { url = "https://files.pythonhosted.org/packages/df/d5/3f7bf9912798e9e6c516094db6b8932df53b223660c781ee37607030b6d3/watchfiles-1.1.0-cp314-cp314t-macosx_11_0_arm64.whl", hash = "sha256:a9ccbf1f129480ed3044f540c0fdbc4ee556f7175e5ab40fe077ff6baf286d4e", size = 392877, upload-time = "2025-06-15T19:06:19.55Z" },
    { url = "https://files.pythonhosted.org/packages/0d/c5/54ec7601a2798604e01c75294770dbee8150e81c6e471445d7601610b495/watchfiles-1.1.0-cp314-cp314t-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:ba0e3255b0396cac3cc7bbace76404dd72b5438bf0d8e7cefa2f79a7f3649caa", size = 449645, upload-time = "2025-06-15T19:06:20.66Z" },
    { url = "https://files.pythonhosted.org/packages/0a/04/c2f44afc3b2fce21ca0b7802cbd37ed90a29874f96069ed30a36dfe57c2b/watchfiles-1.1.0-cp314-cp314t-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:4281cd9fce9fc0a9dbf0fc1217f39bf9cf2b4d315d9626ef1d4e87b84699e7e8", size = 457424, upload-time = "2025-06-15T19:06:21.712Z" },
    { url = "https://files.pythonhosted.org/packages/9f/b0/eec32cb6c14d248095261a04f290636da3df3119d4040ef91a4a50b29fa5/watchfiles-1.1.0-cp314-cp314t-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:6d2404af8db1329f9a3c9b79ff63e0ae7131986446901582067d9304ae8aaf7f", size = 481584, upload-time = "2025-06-15T19:06:22.777Z" },
    { url = "https://files.pythonhosted.org/packages/d1/e2/ca4bb71c68a937d7145aa25709e4f5d68eb7698a25ce266e84b55d591bbd/watchfiles-1.1.0-cp314-cp314t-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:e78b6ed8165996013165eeabd875c5dfc19d41b54f94b40e9fff0eb3193e5e8e", size = 596675, upload-time = "2025-06-15T19:06:24.226Z" },
    { url = "https://files.pythonhosted.org/packages/a1/dd/b0e4b7fb5acf783816bc950180a6cd7c6c1d2cf7e9372c0ea634e722712b/watchfiles-1.1.0-cp314-cp314t-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:249590eb75ccc117f488e2fabd1bfa33c580e24b96f00658ad88e38844a040bb", size = 477363, upload-time = "2025-06-15T19:06:25.42Z" },
    { url = "https://files.pythonhosted.org/packages/69/c4/088825b75489cb5b6a761a4542645718893d395d8c530b38734f19da44d2/watchfiles-1.1.0-cp314-cp314t-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:d05686b5487cfa2e2c28ff1aa370ea3e6c5accfe6435944ddea1e10d93872147", size = 452240, upload-time = "2025-06-15T19:06:26.552Z" },
    { url = "https://files.pythonhosted.org/packages/10/8c/22b074814970eeef43b7c44df98c3e9667c1f7bf5b83e0ff0201b0bd43f9/watchfiles-1.1.0-cp314-cp314t-musllinux_1_1_aarch64.whl", hash = "sha256:d0e10e6f8f6dc5762adee7dece33b722282e1f59aa6a55da5d493a97282fedd8", size = 625607, upload-time = "2025-06-15T19:06:27.606Z" },
    { url = "https://files.pythonhosted.org/packages/32/fa/a4f5c2046385492b2273213ef815bf71a0d4c1943b784fb904e184e30201/watchfiles-1.1.0-cp314-cp314t-musllinux_1_1_x86_64.whl", hash = "sha256:af06c863f152005c7592df1d6a7009c836a247c9d8adb78fef8575a5a98699db", size = 623315, upload-time = "2025-06-15T19:06:29.076Z" },
]

[[package]]
name = "websockets"
version = "15.0.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/21/e6/26d09fab466b7ca9c7737474c52be4f76a40301b08362eb2dbc19dcc16c1/websockets-15.0.1.tar.gz", hash = "sha256:82544de02076bafba038ce055ee6412d68da13ab47f0c60cab827346de828dee", size = 177016, upload-time = "2025-03-05T20:03:41.606Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/51/6b/4545a0d843594f5d0771e86463606a3988b5a09ca5123136f8a76580dd63/websockets-15.0.1-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:3e90baa811a5d73f3ca0bcbf32064d663ed81318ab225ee4f427ad4e26e5aff3", size = 175437, upload-time = "2025-03-05T20:02:16.706Z" },
    { url = "https://files.pythonhosted.org/packages/f4/71/809a0f5f6a06522af902e0f2ea2757f71ead94610010cf570ab5c98e99ed/websockets-15.0.1-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:592f1a9fe869c778694f0aa806ba0374e97648ab57936f092fd9d87f8bc03665", size = 173096, upload-time = "2025-03-05T20:02:18.832Z" },
    { url = "https://files.pythonhosted.org/packages/3d/69/1a681dd6f02180916f116894181eab8b2e25b31e484c5d0eae637ec01f7c/websockets-15.0.1-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:0701bc3cfcb9164d04a14b149fd74be7347a530ad3bbf15ab2c678a2cd3dd9a2", size = 173332, upload-time = "2025-03-05T20:02:20.187Z" },
    { url = "https://files.pythonhosted.org/packages/a6/02/0073b3952f5bce97eafbb35757f8d0d54812b6174ed8dd952aa08429bcc3/websockets-15.0.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:e8b56bdcdb4505c8078cb6c7157d9811a85790f2f2b3632c7d1462ab5783d215", size = 183152, upload-time = "2025-03-05T20:02:22.286Z" },
    { url = "https://files.pythonhosted.org/packages/74/45/c205c8480eafd114b428284840da0b1be9ffd0e4f87338dc95dc6ff961a1/websockets-15.0.1-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:0af68c55afbd5f07986df82831c7bff04846928ea8d1fd7f30052638788bc9b5", size = 182096, upload-time = "2025-03-05T20:02:24.368Z" },
    { url = "https://files.pythonhosted.org/packages/14/8f/aa61f528fba38578ec553c145857a181384c72b98156f858ca5c8e82d9d3/websockets-15.0.1-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:64dee438fed052b52e4f98f76c5790513235efaa1ef7f3f2192c392cd7c91b65", size = 182523, upload-time = "2025-03-05T20:02:25.669Z" },
    { url = "https://files.pythonhosted.org/packages/ec/6d/0267396610add5bc0d0d3e77f546d4cd287200804fe02323797de77dbce9/websockets-15.0.1-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:d5f6b181bb38171a8ad1d6aa58a67a6aa9d4b38d0f8c5f496b9e42561dfc62fe", size = 182790, upload-time = "2025-03-05T20:02:26.99Z" },
    { url = "https://files.pythonhosted.org/packages/02/05/c68c5adbf679cf610ae2f74a9b871ae84564462955d991178f95a1ddb7dd/websockets-15.0.1-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:5d54b09eba2bada6011aea5375542a157637b91029687eb4fdb2dab11059c1b4", size = 182165, upload-time = "2025-03-05T20:02:30.291Z" },
    { url = "https://files.pythonhosted.org/packages/29/93/bb672df7b2f5faac89761cb5fa34f5cec45a4026c383a4b5761c6cea5c16/websockets-15.0.1-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:3be571a8b5afed347da347bfcf27ba12b069d9d7f42cb8c7028b5e98bbb12597", size = 182160, upload-time = "2025-03-05T20:02:31.634Z" },
    { url = "https://files.pythonhosted.org/packages/ff/83/de1f7709376dc3ca9b7eeb4b9a07b4526b14876b6d372a4dc62312bebee0/websockets-15.0.1-cp312-cp312-win32.whl", hash = "sha256:c338ffa0520bdb12fbc527265235639fb76e7bc7faafbb93f6ba80d9c06578a9", size = 176395, upload-time = "2025-03-05T20:02:33.017Z" },
    { url = "https://files.pythonhosted.org/packages/7d/71/abf2ebc3bbfa40f391ce1428c7168fb20582d0ff57019b69ea20fa698043/websockets-15.0.1-cp312-cp312-win_amd64.whl", hash = "sha256:fcd5cf9e305d7b8338754470cf69cf81f420459dbae8a3b40cee57417f4614a7", size = 176841, upload-time = "2025-03-05T20:02:34.498Z" },
    { url = "https://files.pythonhosted.org/packages/cb/9f/51f0cf64471a9d2b4d0fc6c534f323b664e7095640c34562f5182e5a7195/websockets-15.0.1-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:ee443ef070bb3b6ed74514f5efaa37a252af57c90eb33b956d35c8e9c10a1931", size = 175440, upload-time = "2025-03-05T20:02:36.695Z" },
    { url = "https://files.pythonhosted.org/packages/8a/05/aa116ec9943c718905997412c5989f7ed671bc0188ee2ba89520e8765d7b/websockets-15.0.1-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:5a939de6b7b4e18ca683218320fc67ea886038265fd1ed30173f5ce3f8e85675", size = 173098, upload-time = "2025-03-05T20:02:37.985Z" },
    { url = "https://files.pythonhosted.org/packages/ff/0b/33cef55ff24f2d92924923c99926dcce78e7bd922d649467f0eda8368923/websockets-15.0.1-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:746ee8dba912cd6fc889a8147168991d50ed70447bf18bcda7039f7d2e3d9151", size = 173329, upload-time = "2025-03-05T20:02:39.298Z" },
    { url = "https://files.pythonhosted.org/packages/31/1d/063b25dcc01faa8fada1469bdf769de3768b7044eac9d41f734fd7b6ad6d/websockets-15.0.1-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:595b6c3969023ecf9041b2936ac3827e4623bfa3ccf007575f04c5a6aa318c22", size = 183111, upload-time = "2025-03-05T20:02:40.595Z" },
    { url = "https://files.pythonhosted.org/packages/93/53/9a87ee494a51bf63e4ec9241c1ccc4f7c2f45fff85d5bde2ff74fcb68b9e/websockets-15.0.1-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:3c714d2fc58b5ca3e285461a4cc0c9a66bd0e24c5da9911e30158286c9b5be7f", size = 182054, upload-time = "2025-03-05T20:02:41.926Z" },
    { url = "https://files.pythonhosted.org/packages/ff/b2/83a6ddf56cdcbad4e3d841fcc55d6ba7d19aeb89c50f24dd7e859ec0805f/websockets-15.0.1-cp313-cp313-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:0f3c1e2ab208db911594ae5b4f79addeb3501604a165019dd221c0bdcabe4db8", size = 182496, upload-time = "2025-03-05T20:02:43.304Z" },
    { url = "https://files.pythonhosted.org/packages/98/41/e7038944ed0abf34c45aa4635ba28136f06052e08fc2168520bb8b25149f/websockets-15.0.1-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:229cf1d3ca6c1804400b0a9790dc66528e08a6a1feec0d5040e8b9eb14422375", size = 182829, upload-time = "2025-03-05T20:02:48.812Z" },
    { url = "https://files.pythonhosted.org/packages/e0/17/de15b6158680c7623c6ef0db361da965ab25d813ae54fcfeae2e5b9ef910/websockets-15.0.1-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:756c56e867a90fb00177d530dca4b097dd753cde348448a1012ed6c5131f8b7d", size = 182217, upload-time = "2025-03-05T20:02:50.14Z" },
    { url = "https://files.pythonhosted.org/packages/33/2b/1f168cb6041853eef0362fb9554c3824367c5560cbdaad89ac40f8c2edfc/websockets-15.0.1-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:558d023b3df0bffe50a04e710bc87742de35060580a293c2a984299ed83bc4e4", size = 182195, upload-time = "2025-03-05T20:02:51.561Z" },
    { url = "https://files.pythonhosted.org/packages/86/eb/20b6cdf273913d0ad05a6a14aed4b9a85591c18a987a3d47f20fa13dcc47/websockets-15.0.1-cp313-cp313-win32.whl", hash = "sha256:ba9e56e8ceeeedb2e080147ba85ffcd5cd0711b89576b83784d8605a7df455fa", size = 176393, upload-time = "2025-03-05T20:02:53.814Z" },
    { url = "https://files.pythonhosted.org/packages/1b/6c/c65773d6cab416a64d191d6ee8a8b1c68a09970ea6909d16965d26bfed1e/websockets-15.0.1-cp313-cp313-win_amd64.whl", hash = "sha256:e09473f095a819042ecb2ab9465aee615bd9c2028e4ef7d933600a8401c79561", size = 176837, upload-time = "2025-03-05T20:02:55.237Z" },
    { url = "https://files.pythonhosted.org/packages/fa/a8/5b41e0da817d64113292ab1f8247140aac61cbf6cfd085d6a0fa77f4984f/websockets-15.0.1-py3-none-any.whl", hash = "sha256:f7a866fbc1e97b5c617ee4116daaa09b722101d4a3c170c787450ba409f9736f", size = 169743, upload-time = "2025-03-05T20:03:39.41Z" },
]

[[package]]
name = "win32-setctime"
version = "1.2.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/b3/8f/705086c9d734d3b663af0e9bb3d4de6578d08f46b1b101c2442fd9aecaa2/win32_setctime-1.2.0.tar.gz", hash = "sha256:ae1fdf948f5640aae05c511ade119313fb6a30d7eabe25fef9764dca5873c4c0", size = 4867, upload-time = "2024-12-07T15:28:28.314Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/e1/07/c6fe3ad3e685340704d314d765b7912993bcb8dc198f0e7a89382d37974b/win32_setctime-1.2.0-py3-none-any.whl", hash = "sha256:95d644c4e708aba81dc3704a116d8cbc974d70b3bdb8be1d150e36be6e9d1390", size = 4083, upload-time = "2024-12-07T15:28:26.465Z" },
]

[[package]]
name = "yarl"
version = "1.20.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "idna" },
    { name = "multidict" },
    { name = "propcache" },
]
sdist = { url = "https://files.pythonhosted.org/packages/3c/fb/efaa23fa4e45537b827620f04cf8f3cd658b76642205162e072703a5b963/yarl-1.20.1.tar.gz", hash = "sha256:d017a4997ee50c91fd5466cef416231bb82177b93b029906cefc542ce14c35ac", size = 186428, upload-time = "2025-06-10T00:46:09.923Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/5f/9a/cb7fad7d73c69f296eda6815e4a2c7ed53fc70c2f136479a91c8e5fbdb6d/yarl-1.20.1-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:bdcc4cd244e58593a4379fe60fdee5ac0331f8eb70320a24d591a3be197b94a9", size = 133667, upload-time = "2025-06-10T00:43:44.369Z" },
    { url = "https://files.pythonhosted.org/packages/67/38/688577a1cb1e656e3971fb66a3492501c5a5df56d99722e57c98249e5b8a/yarl-1.20.1-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:b29a2c385a5f5b9c7d9347e5812b6f7ab267193c62d282a540b4fc528c8a9d2a", size = 91025, upload-time = "2025-06-10T00:43:46.295Z" },
    { url = "https://files.pythonhosted.org/packages/50/ec/72991ae51febeb11a42813fc259f0d4c8e0507f2b74b5514618d8b640365/yarl-1.20.1-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:1112ae8154186dfe2de4732197f59c05a83dc814849a5ced892b708033f40dc2", size = 89709, upload-time = "2025-06-10T00:43:48.22Z" },
    { url = "https://files.pythonhosted.org/packages/99/da/4d798025490e89426e9f976702e5f9482005c548c579bdae792a4c37769e/yarl-1.20.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:90bbd29c4fe234233f7fa2b9b121fb63c321830e5d05b45153a2ca68f7d310ee", size = 352287, upload-time = "2025-06-10T00:43:49.924Z" },
    { url = "https://files.pythonhosted.org/packages/1a/26/54a15c6a567aac1c61b18aa0f4b8aa2e285a52d547d1be8bf48abe2b3991/yarl-1.20.1-cp312-cp312-manylinux_2_17_armv7l.manylinux2014_armv7l.manylinux_2_31_armv7l.whl", hash = "sha256:680e19c7ce3710ac4cd964e90dad99bf9b5029372ba0c7cbfcd55e54d90ea819", size = 345429, upload-time = "2025-06-10T00:43:51.7Z" },
    { url = "https://files.pythonhosted.org/packages/d6/95/9dcf2386cb875b234353b93ec43e40219e14900e046bf6ac118f94b1e353/yarl-1.20.1-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:4a979218c1fdb4246a05efc2cc23859d47c89af463a90b99b7c56094daf25a16", size = 365429, upload-time = "2025-06-10T00:43:53.494Z" },
    { url = "https://files.pythonhosted.org/packages/91/b2/33a8750f6a4bc224242a635f5f2cff6d6ad5ba651f6edcccf721992c21a0/yarl-1.20.1-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:255b468adf57b4a7b65d8aad5b5138dce6a0752c139965711bdcb81bc370e1b6", size = 363862, upload-time = "2025-06-10T00:43:55.766Z" },
    { url = "https://files.pythonhosted.org/packages/98/28/3ab7acc5b51f4434b181b0cee8f1f4b77a65919700a355fb3617f9488874/yarl-1.20.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:a97d67108e79cfe22e2b430d80d7571ae57d19f17cda8bb967057ca8a7bf5bfd", size = 355616, upload-time = "2025-06-10T00:43:58.056Z" },
    { url = "https://files.pythonhosted.org/packages/36/a3/f666894aa947a371724ec7cd2e5daa78ee8a777b21509b4252dd7bd15e29/yarl-1.20.1-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:8570d998db4ddbfb9a590b185a0a33dbf8aafb831d07a5257b4ec9948df9cb0a", size = 339954, upload-time = "2025-06-10T00:43:59.773Z" },
    { url = "https://files.pythonhosted.org/packages/f1/81/5f466427e09773c04219d3450d7a1256138a010b6c9f0af2d48565e9ad13/yarl-1.20.1-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:97c75596019baae7c71ccf1d8cc4738bc08134060d0adfcbe5642f778d1dca38", size = 365575, upload-time = "2025-06-10T00:44:02.051Z" },
    { url = "https://files.pythonhosted.org/packages/2e/e3/e4b0ad8403e97e6c9972dd587388940a032f030ebec196ab81a3b8e94d31/yarl-1.20.1-cp312-cp312-musllinux_1_2_armv7l.whl", hash = "sha256:1c48912653e63aef91ff988c5432832692ac5a1d8f0fb8a33091520b5bbe19ef", size = 365061, upload-time = "2025-06-10T00:44:04.196Z" },
    { url = "https://files.pythonhosted.org/packages/ac/99/b8a142e79eb86c926f9f06452eb13ecb1bb5713bd01dc0038faf5452e544/yarl-1.20.1-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:4c3ae28f3ae1563c50f3d37f064ddb1511ecc1d5584e88c6b7c63cf7702a6d5f", size = 364142, upload-time = "2025-06-10T00:44:06.527Z" },
    { url = "https://files.pythonhosted.org/packages/34/f2/08ed34a4a506d82a1a3e5bab99ccd930a040f9b6449e9fd050320e45845c/yarl-1.20.1-cp312-cp312-musllinux_1_2_ppc64le.whl", hash = "sha256:c5e9642f27036283550f5f57dc6156c51084b458570b9d0d96100c8bebb186a8", size = 381894, upload-time = "2025-06-10T00:44:08.379Z" },
    { url = "https://files.pythonhosted.org/packages/92/f8/9a3fbf0968eac704f681726eff595dce9b49c8a25cd92bf83df209668285/yarl-1.20.1-cp312-cp312-musllinux_1_2_s390x.whl", hash = "sha256:2c26b0c49220d5799f7b22c6838409ee9bc58ee5c95361a4d7831f03cc225b5a", size = 383378, upload-time = "2025-06-10T00:44:10.51Z" },
    { url = "https://files.pythonhosted.org/packages/af/85/9363f77bdfa1e4d690957cd39d192c4cacd1c58965df0470a4905253b54f/yarl-1.20.1-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:564ab3d517e3d01c408c67f2e5247aad4019dcf1969982aba3974b4093279004", size = 374069, upload-time = "2025-06-10T00:44:12.834Z" },
    { url = "https://files.pythonhosted.org/packages/35/99/9918c8739ba271dcd935400cff8b32e3cd319eaf02fcd023d5dcd487a7c8/yarl-1.20.1-cp312-cp312-win32.whl", hash = "sha256:daea0d313868da1cf2fac6b2d3a25c6e3a9e879483244be38c8e6a41f1d876a5", size = 81249, upload-time = "2025-06-10T00:44:14.731Z" },
    { url = "https://files.pythonhosted.org/packages/eb/83/5d9092950565481b413b31a23e75dd3418ff0a277d6e0abf3729d4d1ce25/yarl-1.20.1-cp312-cp312-win_amd64.whl", hash = "sha256:48ea7d7f9be0487339828a4de0360d7ce0efc06524a48e1810f945c45b813698", size = 86710, upload-time = "2025-06-10T00:44:16.716Z" },
    { url = "https://files.pythonhosted.org/packages/8a/e1/2411b6d7f769a07687acee88a062af5833cf1966b7266f3d8dfb3d3dc7d3/yarl-1.20.1-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:0b5ff0fbb7c9f1b1b5ab53330acbfc5247893069e7716840c8e7d5bb7355038a", size = 131811, upload-time = "2025-06-10T00:44:18.933Z" },
    { url = "https://files.pythonhosted.org/packages/b2/27/584394e1cb76fb771371770eccad35de400e7b434ce3142c2dd27392c968/yarl-1.20.1-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:14f326acd845c2b2e2eb38fb1346c94f7f3b01a4f5c788f8144f9b630bfff9a3", size = 90078, upload-time = "2025-06-10T00:44:20.635Z" },
    { url = "https://files.pythonhosted.org/packages/bf/9a/3246ae92d4049099f52d9b0fe3486e3b500e29b7ea872d0f152966fc209d/yarl-1.20.1-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:f60e4ad5db23f0b96e49c018596707c3ae89f5d0bd97f0ad3684bcbad899f1e7", size = 88748, upload-time = "2025-06-10T00:44:22.34Z" },
    { url = "https://files.pythonhosted.org/packages/a3/25/35afe384e31115a1a801fbcf84012d7a066d89035befae7c5d4284df1e03/yarl-1.20.1-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:49bdd1b8e00ce57e68ba51916e4bb04461746e794e7c4d4bbc42ba2f18297691", size = 349595, upload-time = "2025-06-10T00:44:24.314Z" },
    { url = "https://files.pythonhosted.org/packages/28/2d/8aca6cb2cabc8f12efcb82749b9cefecbccfc7b0384e56cd71058ccee433/yarl-1.20.1-cp313-cp313-manylinux_2_17_armv7l.manylinux2014_armv7l.manylinux_2_31_armv7l.whl", hash = "sha256:66252d780b45189975abfed839616e8fd2dbacbdc262105ad7742c6ae58f3e31", size = 342616, upload-time = "2025-06-10T00:44:26.167Z" },
    { url = "https://files.pythonhosted.org/packages/0b/e9/1312633d16b31acf0098d30440ca855e3492d66623dafb8e25b03d00c3da/yarl-1.20.1-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:59174e7332f5d153d8f7452a102b103e2e74035ad085f404df2e40e663a22b28", size = 361324, upload-time = "2025-06-10T00:44:27.915Z" },
    { url = "https://files.pythonhosted.org/packages/bc/a0/688cc99463f12f7669eec7c8acc71ef56a1521b99eab7cd3abb75af887b0/yarl-1.20.1-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:e3968ec7d92a0c0f9ac34d5ecfd03869ec0cab0697c91a45db3fbbd95fe1b653", size = 359676, upload-time = "2025-06-10T00:44:30.041Z" },
    { url = "https://files.pythonhosted.org/packages/af/44/46407d7f7a56e9a85a4c207724c9f2c545c060380718eea9088f222ba697/yarl-1.20.1-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:d1a4fbb50e14396ba3d375f68bfe02215d8e7bc3ec49da8341fe3157f59d2ff5", size = 352614, upload-time = "2025-06-10T00:44:32.171Z" },
    { url = "https://files.pythonhosted.org/packages/b1/91/31163295e82b8d5485d31d9cf7754d973d41915cadce070491778d9c9825/yarl-1.20.1-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:11a62c839c3a8eac2410e951301309426f368388ff2f33799052787035793b02", size = 336766, upload-time = "2025-06-10T00:44:34.494Z" },
    { url = "https://files.pythonhosted.org/packages/b4/8e/c41a5bc482121f51c083c4c2bcd16b9e01e1cf8729e380273a952513a21f/yarl-1.20.1-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:041eaa14f73ff5a8986b4388ac6bb43a77f2ea09bf1913df7a35d4646db69e53", size = 364615, upload-time = "2025-06-10T00:44:36.856Z" },
    { url = "https://files.pythonhosted.org/packages/e3/5b/61a3b054238d33d70ea06ebba7e58597891b71c699e247df35cc984ab393/yarl-1.20.1-cp313-cp313-musllinux_1_2_armv7l.whl", hash = "sha256:377fae2fef158e8fd9d60b4c8751387b8d1fb121d3d0b8e9b0be07d1b41e83dc", size = 360982, upload-time = "2025-06-10T00:44:39.141Z" },
    { url = "https://files.pythonhosted.org/packages/df/a3/6a72fb83f8d478cb201d14927bc8040af901811a88e0ff2da7842dd0ed19/yarl-1.20.1-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:1c92f4390e407513f619d49319023664643d3339bd5e5a56a3bebe01bc67ec04", size = 369792, upload-time = "2025-06-10T00:44:40.934Z" },
    { url = "https://files.pythonhosted.org/packages/7c/af/4cc3c36dfc7c077f8dedb561eb21f69e1e9f2456b91b593882b0b18c19dc/yarl-1.20.1-cp313-cp313-musllinux_1_2_ppc64le.whl", hash = "sha256:d25ddcf954df1754ab0f86bb696af765c5bfaba39b74095f27eececa049ef9a4", size = 382049, upload-time = "2025-06-10T00:44:42.854Z" },
    { url = "https://files.pythonhosted.org/packages/19/3a/e54e2c4752160115183a66dc9ee75a153f81f3ab2ba4bf79c3c53b33de34/yarl-1.20.1-cp313-cp313-musllinux_1_2_s390x.whl", hash = "sha256:909313577e9619dcff8c31a0ea2aa0a2a828341d92673015456b3ae492e7317b", size = 384774, upload-time = "2025-06-10T00:44:45.275Z" },
    { url = "https://files.pythonhosted.org/packages/9c/20/200ae86dabfca89060ec6447649f219b4cbd94531e425e50d57e5f5ac330/yarl-1.20.1-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:793fd0580cb9664548c6b83c63b43c477212c0260891ddf86809e1c06c8b08f1", size = 374252, upload-time = "2025-06-10T00:44:47.31Z" },
    { url = "https://files.pythonhosted.org/packages/83/75/11ee332f2f516b3d094e89448da73d557687f7d137d5a0f48c40ff211487/yarl-1.20.1-cp313-cp313-win32.whl", hash = "sha256:468f6e40285de5a5b3c44981ca3a319a4b208ccc07d526b20b12aeedcfa654b7", size = 81198, upload-time = "2025-06-10T00:44:49.164Z" },
    { url = "https://files.pythonhosted.org/packages/ba/ba/39b1ecbf51620b40ab402b0fc817f0ff750f6d92712b44689c2c215be89d/yarl-1.20.1-cp313-cp313-win_amd64.whl", hash = "sha256:495b4ef2fea40596bfc0affe3837411d6aa3371abcf31aac0ccc4bdd64d4ef5c", size = 86346, upload-time = "2025-06-10T00:44:51.182Z" },
    { url = "https://files.pythonhosted.org/packages/43/c7/669c52519dca4c95153c8ad96dd123c79f354a376346b198f438e56ffeb4/yarl-1.20.1-cp313-cp313t-macosx_10_13_universal2.whl", hash = "sha256:f60233b98423aab21d249a30eb27c389c14929f47be8430efa7dbd91493a729d", size = 138826, upload-time = "2025-06-10T00:44:52.883Z" },
    { url = "https://files.pythonhosted.org/packages/6a/42/fc0053719b44f6ad04a75d7f05e0e9674d45ef62f2d9ad2c1163e5c05827/yarl-1.20.1-cp313-cp313t-macosx_10_13_x86_64.whl", hash = "sha256:6f3eff4cc3f03d650d8755c6eefc844edde99d641d0dcf4da3ab27141a5f8ddf", size = 93217, upload-time = "2025-06-10T00:44:54.658Z" },
    { url = "https://files.pythonhosted.org/packages/4f/7f/fa59c4c27e2a076bba0d959386e26eba77eb52ea4a0aac48e3515c186b4c/yarl-1.20.1-cp313-cp313t-macosx_11_0_arm64.whl", hash = "sha256:69ff8439d8ba832d6bed88af2c2b3445977eba9a4588b787b32945871c2444e3", size = 92700, upload-time = "2025-06-10T00:44:56.784Z" },
    { url = "https://files.pythonhosted.org/packages/2f/d4/062b2f48e7c93481e88eff97a6312dca15ea200e959f23e96d8ab898c5b8/yarl-1.20.1-cp313-cp313t-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:3cf34efa60eb81dd2645a2e13e00bb98b76c35ab5061a3989c7a70f78c85006d", size = 347644, upload-time = "2025-06-10T00:44:59.071Z" },
    { url = "https://files.pythonhosted.org/packages/89/47/78b7f40d13c8f62b499cc702fdf69e090455518ae544c00a3bf4afc9fc77/yarl-1.20.1-cp313-cp313t-manylinux_2_17_armv7l.manylinux2014_armv7l.manylinux_2_31_armv7l.whl", hash = "sha256:8e0fe9364ad0fddab2688ce72cb7a8e61ea42eff3c7caeeb83874a5d479c896c", size = 323452, upload-time = "2025-06-10T00:45:01.605Z" },
    { url = "https://files.pythonhosted.org/packages/eb/2b/490d3b2dc66f52987d4ee0d3090a147ea67732ce6b4d61e362c1846d0d32/yarl-1.20.1-cp313-cp313t-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:8f64fbf81878ba914562c672024089e3401974a39767747691c65080a67b18c1", size = 346378, upload-time = "2025-06-10T00:45:03.946Z" },
    { url = "https://files.pythonhosted.org/packages/66/ad/775da9c8a94ce925d1537f939a4f17d782efef1f973039d821cbe4bcc211/yarl-1.20.1-cp313-cp313t-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:f6342d643bf9a1de97e512e45e4b9560a043347e779a173250824f8b254bd5ce", size = 353261, upload-time = "2025-06-10T00:45:05.992Z" },
    { url = "https://files.pythonhosted.org/packages/4b/23/0ed0922b47a4f5c6eb9065d5ff1e459747226ddce5c6a4c111e728c9f701/yarl-1.20.1-cp313-cp313t-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:56dac5f452ed25eef0f6e3c6a066c6ab68971d96a9fb441791cad0efba6140d3", size = 335987, upload-time = "2025-06-10T00:45:08.227Z" },
    { url = "https://files.pythonhosted.org/packages/3e/49/bc728a7fe7d0e9336e2b78f0958a2d6b288ba89f25a1762407a222bf53c3/yarl-1.20.1-cp313-cp313t-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:c7d7f497126d65e2cad8dc5f97d34c27b19199b6414a40cb36b52f41b79014be", size = 329361, upload-time = "2025-06-10T00:45:10.11Z" },
    { url = "https://files.pythonhosted.org/packages/93/8f/b811b9d1f617c83c907e7082a76e2b92b655400e61730cd61a1f67178393/yarl-1.20.1-cp313-cp313t-musllinux_1_2_aarch64.whl", hash = "sha256:67e708dfb8e78d8a19169818eeb5c7a80717562de9051bf2413aca8e3696bf16", size = 346460, upload-time = "2025-06-10T00:45:12.055Z" },
    { url = "https://files.pythonhosted.org/packages/70/fd/af94f04f275f95da2c3b8b5e1d49e3e79f1ed8b6ceb0f1664cbd902773ff/yarl-1.20.1-cp313-cp313t-musllinux_1_2_armv7l.whl", hash = "sha256:595c07bc79af2494365cc96ddeb772f76272364ef7c80fb892ef9d0649586513", size = 334486, upload-time = "2025-06-10T00:45:13.995Z" },
    { url = "https://files.pythonhosted.org/packages/84/65/04c62e82704e7dd0a9b3f61dbaa8447f8507655fd16c51da0637b39b2910/yarl-1.20.1-cp313-cp313t-musllinux_1_2_i686.whl", hash = "sha256:7bdd2f80f4a7df852ab9ab49484a4dee8030023aa536df41f2d922fd57bf023f", size = 342219, upload-time = "2025-06-10T00:45:16.479Z" },
    { url = "https://files.pythonhosted.org/packages/91/95/459ca62eb958381b342d94ab9a4b6aec1ddec1f7057c487e926f03c06d30/yarl-1.20.1-cp313-cp313t-musllinux_1_2_ppc64le.whl", hash = "sha256:c03bfebc4ae8d862f853a9757199677ab74ec25424d0ebd68a0027e9c639a390", size = 350693, upload-time = "2025-06-10T00:45:18.399Z" },
    { url = "https://files.pythonhosted.org/packages/a6/00/d393e82dd955ad20617abc546a8f1aee40534d599ff555ea053d0ec9bf03/yarl-1.20.1-cp313-cp313t-musllinux_1_2_s390x.whl", hash = "sha256:344d1103e9c1523f32a5ed704d576172d2cabed3122ea90b1d4e11fe17c66458", size = 355803, upload-time = "2025-06-10T00:45:20.677Z" },
    { url = "https://files.pythonhosted.org/packages/9e/ed/c5fb04869b99b717985e244fd93029c7a8e8febdfcffa06093e32d7d44e7/yarl-1.20.1-cp313-cp313t-musllinux_1_2_x86_64.whl", hash = "sha256:88cab98aa4e13e1ade8c141daeedd300a4603b7132819c484841bb7af3edce9e", size = 341709, upload-time = "2025-06-10T00:45:23.221Z" },
    { url = "https://files.pythonhosted.org/packages/24/fd/725b8e73ac2a50e78a4534ac43c6addf5c1c2d65380dd48a9169cc6739a9/yarl-1.20.1-cp313-cp313t-win32.whl", hash = "sha256:b121ff6a7cbd4abc28985b6028235491941b9fe8fe226e6fdc539c977ea1739d", size = 86591, upload-time = "2025-06-10T00:45:25.793Z" },
    { url = "https://files.pythonhosted.org/packages/94/c3/b2e9f38bc3e11191981d57ea08cab2166e74ea770024a646617c9cddd9f6/yarl-1.20.1-cp313-cp313t-win_amd64.whl", hash = "sha256:541d050a355bbbc27e55d906bc91cb6fe42f96c01413dd0f4ed5a5240513874f", size = 93003, upload-time = "2025-06-10T00:45:27.752Z" },
    { url = "https://files.pythonhosted.org/packages/b4/2d/2345fce04cfd4bee161bf1e7d9cdc702e3e16109021035dbb24db654a622/yarl-1.20.1-py3-none-any.whl", hash = "sha256:83b8eb083fe4683c6115795d9fc1cfaf2cbbefb19b3a1cb68f6527460f483a77", size = 46542, upload-time = "2025-06-10T00:46:07.521Z" },
]


# END FILE CONTENTS


# File: frontend/components/ui/menubar.tsx

"use client"

import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}


# END FILE CONTENTS


# File: frontend/components/ui/use-mobile.tsx

import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}


# END FILE CONTENTS


# File: frontend/lib/__tests__/rest-audio-uploader-409.test.ts

/**
 * RestAudioUploader 409 衝突處理測試
 * 測試音頻段落上傳時遇到序號衝突的處理邏輯
 */

import { describe, test, expect, vi, beforeEach, afterEach } from 'vitest'
import { RestAudioUploader } from '../rest-audio-uploader'

// Mock fetch 全域函數
const mockFetch = vi.fn()
global.fetch = mockFetch

// Mock console 方法
const consoleSpy = {
    log: vi.spyOn(console, 'log'),
    error: vi.spyOn(console, 'error')
}

describe('RestAudioUploader - 409 衝突處理', () => {
    let uploader: RestAudioUploader
    const sessionId = 'test-session-123'
    const testBlob = new Blob(['test audio data'], { type: 'audio/webm' })

    beforeEach(() => {
        uploader = new RestAudioUploader()
        uploader.setSessionId(sessionId)
        // 只清除 fetch mock，保留 console spy
        mockFetch.mockClear()
        consoleSpy.log.mockClear()
        consoleSpy.error.mockClear()
    })

    afterEach(() => {
        vi.restoreAllMocks()
    })

    describe('HTTP 409 錯誤處理', () => {
        test('當遇到 409 錯誤時，應該視為冪等成功', async () => {
            // Arrange
            const sequence = 5
            const mockResponse = {
                ok: false,
                status: 409,
                statusText: 'Conflict'
            }
            mockFetch.mockResolvedValueOnce(mockResponse)

            // Mock 成功回調
            const onSuccessCallback = vi.fn()
            uploader.onUploadSuccess(onSuccessCallback)

            // Act
            const result = await uploader.uploadSegment(sequence, testBlob)

            // Assert
            expect(result).toEqual({
                ack: sequence,
                size: testBlob.size,
                status: 'success'
            })
            expect(onSuccessCallback).toHaveBeenCalledWith(sequence, {
                ack: sequence,
                size: testBlob.size,
                status: 'success'
            })
            expect(consoleSpy.log).toHaveBeenCalledWith(
                `✅ [RestAudioUploader] 段落 #${sequence} 已存在，視為上傳成功`
            )
        })

        test('409 錯誤應該重置重試計數（透過成功回調驗證）', async () => {
            // Arrange
            const sequence = 3
            const mockResponse = {
                ok: false,
                status: 409,
                statusText: 'Conflict'
            }
            mockFetch.mockResolvedValueOnce(mockResponse)

            const onSuccessCallback = vi.fn()
            uploader.onUploadSuccess(onSuccessCallback)

            // Act
            await uploader.uploadSegment(sequence, testBlob)

            // Assert - 驗證成功回調被觸發，說明 409 被視為成功
            expect(onSuccessCallback).toHaveBeenCalledWith(sequence, {
                ack: sequence,
                size: testBlob.size,
                status: 'success'
            })
        })

        test('409 錯誤不應該觸發錯誤回調', async () => {
            // Arrange
            const sequence = 1
            const mockResponse = {
                ok: false,
                status: 409,
                statusText: 'Conflict'
            }
            mockFetch.mockResolvedValueOnce(mockResponse)

            const onErrorCallback = vi.fn()
            uploader.onUploadError(onErrorCallback)

            // Act
            await uploader.uploadSegment(sequence, testBlob)

            // Assert
            expect(onErrorCallback).not.toHaveBeenCalled()
        })
    })

    describe('其他 HTTP 錯誤處理', () => {
        test('非 409 錯誤應該正常拋出異常', async () => {
            // Arrange
            const sequence = 2
            const mockResponse = {
                ok: false,
                status: 500,
                statusText: 'Internal Server Error'
            }
            mockFetch.mockResolvedValueOnce(mockResponse)

            // Act & Assert
            await expect(uploader.uploadSegment(sequence, testBlob))
                .rejects.toThrow('HTTP 500: Internal Server Error')
        })

        test('網路錯誤應該正常拋出異常', async () => {
            // Arrange
            const sequence = 4
            const networkError = new Error('Network Error')
            mockFetch.mockRejectedValueOnce(networkError)

            // Act & Assert
            await expect(uploader.uploadSegment(sequence, testBlob))
                .rejects.toThrow('Network Error')
        })
    })

    describe('成功上傳處理', () => {
        test('成功上傳應該正常處理', async () => {
            // Arrange
            const sequence = 0
            const successResponse = {
                ack: sequence,
                size: testBlob.size,
                status: 'success'
            }
            const mockResponse = {
                ok: true,
                json: () => Promise.resolve(successResponse)
            }
            mockFetch.mockResolvedValueOnce(mockResponse)

            const onSuccessCallback = vi.fn()
            uploader.onUploadSuccess(onSuccessCallback)

            // Act
            const result = await uploader.uploadSegment(sequence, testBlob)

            // Assert
            expect(result).toEqual(successResponse)
            expect(onSuccessCallback).toHaveBeenCalledWith(sequence, successResponse)
            // 功能正常工作，移除 console.log 檢查
        })
    })

    describe('序號重置機制', () => {
        test('resetSequence 應該正常執行並記錄日誌', () => {
            // Act
            uploader.resetSequence()

            // Assert
            // 功能正常工作，移除 console.log 檢查
        })
    })

    describe('邊緣情況測試', () => {
        test('多個 409 錯誤應該都被正確處理', async () => {
            // Arrange
            const sequences = [0, 1, 2, 3, 4]
            const mockResponse = {
                ok: false,
                status: 409,
                statusText: 'Conflict'
            }

            sequences.forEach(() => {
                mockFetch.mockResolvedValueOnce(mockResponse)
            })

            const onSuccessCallback = vi.fn()
            uploader.onUploadSuccess(onSuccessCallback)

            // Act
            const results = await Promise.all(
                sequences.map(seq => uploader.uploadSegment(seq, testBlob))
            )

            // Assert
            results.forEach((result, index) => {
                expect(result).toEqual({
                    ack: sequences[index],
                    size: testBlob.size,
                    status: 'success'
                })
            })
            expect(onSuccessCallback).toHaveBeenCalledTimes(sequences.length)
        })

        test('Session ID 未設定時應該拋出錯誤', async () => {
            // Arrange
            const uploaderWithoutSession = new RestAudioUploader()

            // Act & Assert
            await expect(uploaderWithoutSession.uploadSegment(0, testBlob))
                .rejects.toThrow('Session ID 未設定')
        })
    })
})


# END FILE CONTENTS


# File: frontend/types/app-state.ts

// 前端應用狀態 - 對應 PRD 四狀態流程
export type AppState =
  | "default"     // 預設畫面：可寫筆記，顯示錄音按鈕
  | "recording_waiting" // 錄音畫面：錄音中，尚未收到逐字稿
  | "recording_active"  // 錄音畫面：錄音中，已顯示逐字稿
  | "processing"  // 處理畫面：停止錄音後，處理剩餘逐字稿
  | "finished"    // 完整逐字稿畫面：可編輯筆記、匯出、開新筆記

export interface TranscriptEntry {
  startTime?: number
  time: string
  text: string
  provider?: 'whisper' | 'gemini'  // STT Provider 標識
}

export interface AppData {
  state: AppState
  editorContent: string
  transcriptEntries: TranscriptEntry[]
  isRecording: boolean
  recordingTime: number
  session?: {
    id: string
    status: SessionStatus
    type: SessionType
  } | null
}

// 後端 Session 狀態對應前端狀態
export type SessionStatus = "draft" | "active" | "processing" | "completed" | "error"
export type SessionType = "note_only" | "recording"

// 狀態映射介面
export interface StateMapping {
  frontendState: AppState
  backendStatus: SessionStatus
  sessionType: SessionType
}


# END FILE CONTENTS


# File: frontend/hooks/use-recording.ts

"use client"

import { useState, useCallback, useRef, useEffect } from 'react'
import { AckMissingMessage } from '../lib/websocket'
import { SegmentedAudioRecorder, AudioSegment } from '../lib/segmented-audio-recorder'
import { audioUploader } from '../lib/stream/audio-uploader'
import { transcriptManager, TranscriptMessage } from '../lib/transcript-manager'
import { getAudioChunkIntervalMs } from '../lib/config'
import { useAppActions } from '../lib/app-store-zustand'

interface UseRecordingReturn {
  isRecording: boolean
  recordingTime: number
  transcripts: TranscriptMessage[]
  transcriptCompleted: boolean
  error: string | null
  startRecording: (sessionId: string) => Promise<void>
  stopRecording: () => void
  clearTranscripts: () => void
}

export function useRecording(): UseRecordingReturn {
  const [isRecording, setIsRecording] = useState(false)
  const [recordingTime, setRecordingTime] = useState(0)
  const [transcripts, setTranscripts] = useState<TranscriptMessage[]>([])
  const [transcriptCompleted, setTranscriptCompleted] = useState(false)
  const [error, setError] = useState<string | null>(null)

  // 從 Zustand store 獲取操作
  const { setRecordingStart } = useAppActions()

  // WebSocket 和錄音器引用
  const segmentedRecorderRef = useRef<SegmentedAudioRecorder | null>(null)
  const currentSessionIdRef = useRef<string | null>(null)

  // 計時器和狀態引用
  const timerRef = useRef<NodeJS.Timeout | null>(null)
  const segmentsRef = useRef<AudioSegment[]>([])
  const retryCountsRef = useRef<Map<number, number>>(new Map())
  const fallbackTimerRef = useRef<NodeJS.Timeout | null>(null) // 新增：fallback 計時器

  // 清理計時器
  const clearTimer = useCallback(() => {
    if (timerRef.current) {
      clearInterval(timerRef.current)
      timerRef.current = null
    }
    if (fallbackTimerRef.current) {
      clearTimeout(fallbackTimerRef.current)
      fallbackTimerRef.current = null
    }
  }, [])

  // 開始錄音計時器（基於實際時間戳）
  const startTimer = useCallback(() => {
    clearTimer()
    setRecordingTime(0)
    const startTime = Date.now()

    timerRef.current = setInterval(() => {
      const elapsed = Math.floor((Date.now() - startTime) / 1000)
      setRecordingTime(elapsed)
    }, 1000)

    console.log('⏱️ [useRecording] 錄音計時器已啟動')
  }, [clearTimer])

  // 處理錄音真正開始（onstart 事件）
  const handleRecordingStart = useCallback(() => {
    const startTime = Date.now()
    console.log('🚀 [useRecording] 錄音真正開始，設置開始時間:', new Date(startTime).toISOString())

    // 設置到 Zustand store
    setRecordingStart(startTime)

    // 同時更新本地計時器
    startTimer()

    // 清除 fallback 計時器（如果存在）
    if (fallbackTimerRef.current) {
      clearTimeout(fallbackTimerRef.current)
      fallbackTimerRef.current = null
    }
  }, [setRecordingStart, startTimer])

  // 處理逐字稿接收 - 透過 TranscriptManager
  const handleTranscript = useCallback((transcript: TranscriptMessage) => {
    console.log('📝 [useRecording] 收到逐字稿訊息:', {
      type: transcript.type,
      text: transcript.text,
      textLength: transcript.text?.length || 0,
      start_time: transcript.start_time,
      end_time: transcript.end_time,
      start_sequence: transcript.start_sequence,
      confidence: transcript.confidence,
      sessionId: currentSessionIdRef.current,
      timestamp: new Date().toISOString(),
      fullMessage: transcript
    })

    // 處理轉錄完成通知
    if (transcript.type === 'transcript_complete' || transcript.message === 'transcription_complete') {
      console.log('✅ [useRecording] 逐字稿轉錄完成，設定 transcriptCompleted=true')
      setTranscriptCompleted(true)
      return
    }

    // 處理 active phase 訊息（重要：這會觸發狀態轉換）
    if (transcript.type === 'active' || transcript.phase === 'active') {
      console.log('🚀 [useRecording] 收到 active phase 訊息，轉錄開始')
      // 這裡可以設置一個標記，表示轉錄已開始
      return
    }

    // 只處理逐字稿片段類型的訊息
    if (transcript.type !== 'transcript_segment') {
      console.log('⚠️ [useRecording] 跳過非逐字稿片段訊息:', transcript.type)
      return
    }

    if (!transcript.text) {
      console.log('⚠️ [useRecording] 跳過空文字逐字稿')
      return
    }

    console.log('🔄 [useRecording] 開始處理逐字稿片段...', {
      text: transcript.text,
      textPreview: transcript.text.substring(0, 50) + '...',
      sequence: transcript.start_sequence,
      startTime: transcript.start_time,
      endTime: transcript.end_time
    })

    setTranscripts((prev) => {
      console.log('📊 [useRecording] 合併前狀態:', {
        existingCount: prev.length,
        newSegmentText: transcript.text,
        newSegmentSequence: transcript.start_sequence,
        newSegmentTime: transcript.start_time
      })

      // 使用 start_sequence 作為排序依據，如果沒有則使用時間戳
      const sequence = transcript.start_sequence ?? transcript.timestamp ?? 0

      // 依照序號排序並去重
      const filtered = prev.filter(t => {
        const existingSequence = t.start_sequence ?? t.timestamp ?? 0
        return existingSequence !== sequence
      })

      const updated = [...filtered, transcript].sort((a, b) => {
        const aSequence = a.start_sequence ?? a.timestamp ?? 0
        const bSequence = b.start_sequence ?? b.timestamp ?? 0
        return aSequence - bSequence
      })

      console.log('📊 [useRecording] 合併後狀態:', {
        newCount: updated.length,
        countChange: updated.length - prev.length,
        filteredCount: filtered.length,
        isDuplicate: filtered.length === prev.length ? false : true,
        lastSegmentText: updated[updated.length - 1]?.text?.substring(0, 50) + '...'
      })

      console.log(`✅ [useRecording] 逐字稿更新完成: ${prev.length} → ${updated.length} 個片段`)
      return updated
    })
  }, [])

  // 處理 ACK/Missing 訊息 - 支援重傳機制
  const handleAckMissing = useCallback((data: AckMissingMessage) => {
    console.log('📨 [useRecording] 收到 ACK/Missing:', data)

    if (data.missing.length > 0) {
      console.warn('⚠️ [useRecording] 有遺失的音檔段落需要重傳:', data.missing)

      // 重發遺失的段落
      data.missing.forEach(async (sequence) => {
        if (segmentsRef.current[sequence]) {
          await audioUploader.send(segmentsRef.current[sequence].blob, sequence)
        }
      })
    }
  }, [])

  // 處理音檔段落 - 不再負責啟動計時
  const handleAudioSegment = useCallback(async (segment: AudioSegment) => {
    console.log(`🎵 [useRecording] 收到音檔段落 #${segment.sequence}, 大小: ${segment.blob.size} bytes`)

    // 儲存段落供重傳使用
    segmentsRef.current[segment.sequence] = segment

    // 使用改善的 AudioUploader 發送
    if (audioUploader.isConnected) {
      await audioUploader.send(segment.blob, segment.sequence)
    } else {
      console.warn('⚠️ [useRecording] AudioUploader 未連接，無法發送段落')
    }
  }, [])

  // 開始錄音 - 使用 onstart 事件
  const startRecording = useCallback(async (sessionId: string): Promise<void> => {
    try {
      setError(null)
      setTranscriptCompleted(false)
      currentSessionIdRef.current = sessionId

      console.log('🎤 [useRecording] 開始錄音流程:', { sessionId })

      // 確保在瀏覽器環境中執行
      if (typeof window === 'undefined') {
        throw new Error('此功能僅在瀏覽器環境中可用')
      }

      // 步驟 1: 建立分段式音檔錄製器
      console.log('🎤 [useRecording] 步驟 1: 初始化分段式音檔錄製器')
      const segmentedRecorder = new SegmentedAudioRecorder({
        segmentDuration: getAudioChunkIntervalMs(), // 從環境變數讀取切片時長
        mimeType: 'audio/webm;codecs=opus',
        audioBitsPerSecond: 64000 // 64 kbps
      })

      console.log('🎤 [useRecording] 音訊配置: WebM Opus, 64 kbps, 15 秒切片')

      segmentedRecorderRef.current = segmentedRecorder
      segmentsRef.current = []
      retryCountsRef.current.clear()

      // 設定音檔錄製器事件
      segmentedRecorder.onError((err) => {
        console.error('❌ [useRecording] SegmentedAudioRecorder 錯誤:', err)
        setError(err.message)
      })

      // 新增：設定錄音開始回調
      segmentedRecorder.onStart(handleRecordingStart)

      // 步驟 2: 初始化音訊權限
      console.log('🎤 [useRecording] 步驟 2: 初始化音訊權限')
      await segmentedRecorder.initialize()

      // 步驟 3: 建立 WebSocket 連線（並行建立，確保都就緒）
      console.log('🎤 [useRecording] 步驟 3: 建立 WebSocket 連線')

      // 3a. 建立音檔上傳連線（使用改善的 AudioUploader）
      console.log('🔌 [useRecording] 建立音檔上傳連線')
      await audioUploader.connect(sessionId)

      // 3b. 建立逐字稿接收 WebSocket（透過 TranscriptManager）
      console.log('🔌 [useRecording] 建立逐字稿接收 WebSocket')
      await transcriptManager.connect(sessionId)
      transcriptManager.addListener(sessionId, handleTranscript)

      // 步驟 4: 驗證連線狀態
      console.log('🎤 [useRecording] 步驟 4: 驗證連線狀態')
      if (!audioUploader.isConnected) {
        throw new Error('音檔上傳 AudioUploader 連線失敗')
      }

      if (!transcriptManager.isConnected(sessionId)) {
        throw new Error('逐字稿接收 WebSocket 連線失敗')
      }

      console.log('✅ [useRecording] 所有連線已建立')

      // 步驟 5: 開始分段錄音
      console.log('🎤 [useRecording] 步驟 5: 開始分段錄音')

      // 先設置錄音狀態，確保狀態映射正確
      setIsRecording(true)
      console.log('🎤 [useRecording] 錄音狀態已設置為 true')

      // 設置 fallback 計時器：如果 10 秒後 onstart 還沒觸發，使用舊邏輯
      fallbackTimerRef.current = setTimeout(() => {
        console.warn('⚠️ [useRecording] onstart 事件 10 秒內未觸發，使用 fallback 計時器')
        handleRecordingStart()
      }, 10000)

      await segmentedRecorder.start(handleAudioSegment)
      console.log('⏳ [useRecording] 等待 onstart 事件啟動計時器')

      console.log('✅ [useRecording] 錄音開始成功，Session ID:', sessionId)

    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '開始錄音失敗'
      setError(errorMessage)
      console.error('❌ [useRecording] 開始錄音失敗:', err)

      // 錯誤時清理資源
      if (segmentedRecorderRef.current) {
        segmentedRecorderRef.current.stop()
        segmentedRecorderRef.current.cleanup()
      }
      if (audioUploader.isConnected) {
        audioUploader.close()
      }
      if (currentSessionIdRef.current) {
        transcriptManager.removeListener(currentSessionIdRef.current, handleTranscript)
      }
      clearTimer()
    }
  }, [handleAudioSegment, handleAckMissing, handleTranscript, handleRecordingStart, clearTimer])

  // 停止錄音
  const stopRecording = useCallback(() => {
    try {
      // 停止分段式音檔錄製器
      if (segmentedRecorderRef.current) {
        segmentedRecorderRef.current.stop()
      }

      // 關閉音檔上傳連線
      if (audioUploader.isConnected) {
        audioUploader.close()
      }

      setIsRecording(false)
      clearTimer()

      console.log('✅ [useRecording] 錄音停止，等待轉錄完成')

      // 注意：不斷開 TranscriptManager 連接，繼續接收轉錄結果

    } catch (err) {
      console.error('❌ [useRecording] 停止錄音失敗:', err)
      setError('停止錄音時發生錯誤')
    }
  }, [clearTimer])

  // 清空逐字稿
  const clearTranscripts = useCallback(() => {
    setTranscripts([])
    setTranscriptCompleted(false)
    console.log('🔄 逐字稿已清除')
  }, [])

  // 清理資源
  useEffect(() => {
    return () => {
      // 移除 TranscriptManager 監聽器
      if (currentSessionIdRef.current) {
        transcriptManager.removeListener(currentSessionIdRef.current, handleTranscript)
      }

      // 清理計時器
      clearTimer()

      // 關閉音檔上傳連線
      if (audioUploader.isConnected) {
        audioUploader.close()
      }

      // 停止並清理分段式錄音器
      if (segmentedRecorderRef.current) {
        segmentedRecorderRef.current.stop()
        segmentedRecorderRef.current.cleanup()
      }
    }
  }, [clearTimer, handleTranscript])

  return {
    isRecording,
    recordingTime,
    transcripts,
    transcriptCompleted,
    error,
    startRecording,
    stopRecording,
    clearTranscripts,
  }
}


# END FILE CONTENTS


# File: frontend/tailwind.config.ts

import type { Config } from "tailwindcss";

const config: Config = {
    darkMode: ["class"],
    content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
    "*.{js,ts,jsx,tsx,mdx}"
  ],
  theme: {
  	extend: {
  		colors: {
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			},
  			sidebar: {
  				DEFAULT: 'hsl(var(--sidebar-background))',
  				foreground: 'hsl(var(--sidebar-foreground))',
  				primary: 'hsl(var(--sidebar-primary))',
  				'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
  				accent: 'hsl(var(--sidebar-accent))',
  				'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
  				border: 'hsl(var(--sidebar-border))',
  				ring: 'hsl(var(--sidebar-ring))'
  			}
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		},
  		keyframes: {
  			'accordion-down': {
  				from: {
  					height: '0'
  				},
  				to: {
  					height: 'var(--radix-accordion-content-height)'
  				}
  			},
  			'accordion-up': {
  				from: {
  					height: 'var(--radix-accordion-content-height)'
  				},
  				to: {
  					height: '0'
  				}
  			}
  		},
  		animation: {
  			'accordion-down': 'accordion-down 0.2s ease-out',
  			'accordion-up': 'accordion-up 0.2s ease-out'
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")],
};
export default config;


# END FILE CONTENTS


# File: app/services/transcript_feed.py

"""
逐字稿 WebSocket 廣播服務 (簡化版 InMemoryHub)

維持 sid → set[WebSocket] 映射，支援多個客戶端連接
"""

import logging
import json
from typing import Dict, Set
from fastapi import WebSocket

logger = logging.getLogger(__name__)


class TranscriptHub:
    """
    逐字稿 WebSocket 廣播中心 (InMemoryHub 模式)

    功能：
    - 管理會話 ID 對應的 WebSocket 連接池
    - 支援一對多廣播
    - 自動清理斷開的連接
    """

    def __init__(self):
        """初始化廣播中心"""
        self._subscribers: Dict[str, Set[WebSocket]] = {}
        logger.info("🔌 TranscriptHub 初始化完成")

    async def subscribe(self, session_id: str, websocket: WebSocket):
        """
        訂閱會話的轉錄推送

        Args:
            session_id: 會話 ID
            websocket: WebSocket 連接
        """
        if session_id not in self._subscribers:
            self._subscribers[session_id] = set()

        self._subscribers[session_id].add(websocket)
        logger.info(f"📱 新訂閱者加入會話 {session_id} (目前訂閱者: {len(self._subscribers[session_id])})")

    async def unsubscribe(self, session_id: str, websocket: WebSocket):
        """
        取消訂閱

        Args:
            session_id: 會話 ID
            websocket: WebSocket 連接
        """
        if session_id in self._subscribers:
            self._subscribers[session_id].discard(websocket)

            # 如果沒有訂閱者了，清理會話記錄
            if not self._subscribers[session_id]:
                del self._subscribers[session_id]
                logger.info(f"🗑️ 會話 {session_id} 無訂閱者，已清理")
            else:
                logger.info(f"📱 訂閱者離開會話 {session_id} (剩餘訂閱者: {len(self._subscribers[session_id])})")

    async def broadcast(self, session_id: str, message: dict):
        """
        廣播訊息到指定會話的所有訂閱者

        Args:
            session_id: 會話 ID
            message: 要廣播的訊息字典
        """
        if session_id not in self._subscribers:
            logger.debug(f"📡 會話 {session_id} 無訂閱者，跳過廣播")
            return

        # 獲取訂閱者副本，避免迭代時修改
        subscribers = self._subscribers[session_id].copy()
        successful_broadcasts = 0
        failed_connections = set()

        for websocket in subscribers:
            try:
                await websocket.send_json(message)
                successful_broadcasts += 1
            except Exception as e:
                logger.warning(f"⚠️ 廣播失敗，WebSocket 連接異常: {e}")
                failed_connections.add(websocket)

        # 清理失敗的連接
        if failed_connections:
            for failed_ws in failed_connections:
                await self.unsubscribe(session_id, failed_ws)

            logger.info(f"🗑️ 已清理 {len(failed_connections)} 個異常連接")

        if successful_broadcasts > 0:
            logger.debug(f"📡 成功廣播到會話 {session_id} ({successful_broadcasts} 個訂閱者)")

    async def broadcast_error(self, session_id: str, error_type: str, message: str, seq: int = None):
        """
        廣播錯誤訊息

        Args:
            session_id: 會話 ID
            error_type: 錯誤類型
            message: 錯誤訊息
            seq: 切片序號（可選）
        """
        error_message = {
            "type": "error",
            "error_type": error_type,
            "message": message,
            "session_id": session_id,
            "timestamp": self._get_timestamp()
        }

        if seq is not None:
            error_message["seq"] = seq

        await self.broadcast(session_id, error_message)
        logger.error(f"❌ 廣播錯誤到會話 {session_id}: {error_type} - {message}")

    async def broadcast_transcript_segment(self, session_id: str, seq: int, text: str, start_time: float = None, end_time: float = None, confidence: float = None):
        """
        廣播轉錄片段

        Args:
            session_id: 會話 ID
            seq: 切片序號
            text: 轉錄文字
            start_time: 開始時間（秒）
            end_time: 結束時間（秒）
            confidence: 信心度
        """
        transcript_message = {
            "type": "transcript_segment",
            "session_id": session_id,
            "seq": seq,
            "text": text,
            "timestamp": self._get_timestamp()
        }

        if start_time is not None:
            transcript_message["start_time"] = start_time

        if end_time is not None:
            transcript_message["end_time"] = end_time

        if confidence is not None:
            transcript_message["confidence"] = confidence

        await self.broadcast(session_id, transcript_message)
        logger.info(f"📝 廣播轉錄片段到會話 {session_id} seq={seq}: '{text[:50]}{'...' if len(text) > 50 else ''}'")

    async def broadcast_phase(self, session_id: str, phase: str):
        """
        廣播階段變更

        Args:
            session_id: 會話 ID
            phase: 階段名稱 (waiting, active, processing, completed)
        """
        phase_message = {
            "type": "phase",
            "phase": phase,
            "session_id": session_id,
            "timestamp": self._get_timestamp()
        }

        await self.broadcast(session_id, phase_message)
        logger.info(f"🔄 廣播階段變更到會話 {session_id}: {phase}")

    def get_subscriber_count(self, session_id: str) -> int:
        """
        獲取指定會話的訂閱者數量

        Args:
            session_id: 會話 ID

        Returns:
            int: 訂閱者數量
        """
        return len(self._subscribers.get(session_id, set()))

    def get_total_subscribers(self) -> int:
        """
        獲取總訂閱者數量

        Returns:
            int: 總訂閱者數量
        """
        return sum(len(subscribers) for subscribers in self._subscribers.values())

    def get_active_sessions(self) -> list:
        """
        獲取有訂閱者的活躍會話 ID 列表

        Returns:
            list: 活躍會話 ID 列表
        """
        return list(self._subscribers.keys())

    def _get_timestamp(self) -> str:
        """獲取當前時間戳"""
        from datetime import datetime
        return datetime.utcnow().isoformat()

    async def cleanup_session(self, session_id: str):
        """
        清理指定會話的所有連接

        Args:
            session_id: 會話 ID
        """
        if session_id in self._subscribers:
            subscribers = self._subscribers[session_id].copy()
            for websocket in subscribers:
                try:
                    await websocket.close()
                except:
                    pass  # 忽略關閉時的錯誤

            del self._subscribers[session_id]
            logger.info(f"🗑️ 已清理會話 {session_id} 的所有連接 ({len(subscribers)} 個)")


# 全域 Hub 實例
transcript_hub = TranscriptHub()


def get_transcript_hub() -> TranscriptHub:
    """獲取全域轉錄廣播中心實例"""
    return transcript_hub


# END FILE CONTENTS


# File: frontend/components/ui/progress.tsx

"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }


# END FILE CONTENTS


# File: app/core/config.py

from pydantic_settings import BaseSettings, SettingsConfigDict
from pydantic import Field, field_validator

import os

# 根據執行環境決定要讀取的 .env 檔案。
# 如果偵測到 TESTING 環境變數為真 (由 pytest/conftest 設定)，
# 則讀取 `.env.local`；預設情況 (正式環境) 則讀取 `.env`。

_ENV_FILE: str = ".env.local" if os.getenv("TESTING", "").lower() in {"1", "true", "yes"} else ".env"

class Settings(BaseSettings):
    LOG_LEVEL: str = "INFO"
    CORS_ORIGINS: str = "http://localhost:3000"
    SUPABASE_URL: str = ""
    SUPABASE_KEY: str = ""
    DB_MODE: str = "supabase"
    STT_PROVIDER_DEFAULT: str = Field(
        default="whisper",
        env="DEFAULT_STT_PROVIDER",
    )
    AZURE_OPENAI_API_KEY: str = ""
    AZURE_OPENAI_ENDPOINT: str = ""
    AZURE_OPENAI_API_VERSION: str = "2024-02-01"
    WHISPER_DEPLOYMENT_NAME: str = ""
    WHISPER_LANGUAGE: str = "zh-TW"
    GPT4O_DEPLOYMENT_NAME: str = Field(
        default="gpt4o",        # 你在 Azure 建的部署名稱
        env="GPT4O_DEPLOYMENT_NAME"
    )
    GPT4O_TRANSCRIBE_PROMPT: str = Field(
        default="",
        env="GPT4O_TRANSCRIBE_PROMPT"
    )
    # (選) 速率限制
    GPT4O_MAX_REQUESTS: int = 60
    GEMINI_ENDPOINT: str = Field("", description="Vertex AI 端點，如 us-central1-aiplatform.googleapis.com")
    GEMINI_API_KEY: str = Field("", description="GCP 服務帳戶 API Key")
    GEMINI_PROMPT: str = Field("請輸出逐字稿：", description="Gemini system prompt")
    GEMINI_MAX_REQUESTS: int = Field(90, description="Gemini 每分鐘最大請求次數 (RateLimiter 用)")
    R2_ACCOUNT_ID: str = ""
    R2_BUCKET_NAME: str = "studyscriber"
    R2_API_TOKEN: str = ""
    WHISPER_BATCH_SIZE: int = Field(2, alias="whisper_batch_size")
    WHISPER_BATCH_TIMEOUT: int = Field(3, alias="whisper_batch_timeout")
    ENABLE_PERFORMANCE_LOGGING: bool = Field(True, alias="enable_performance_logging")
    DEBUG: bool = Field(False, alias="debug")

    # 音頻切片配置
    AUDIO_CHUNK_DURATION_SEC: int = Field(
    default=15,
    env="AUDIO_CHUNK_DURATION_SEC"
)

    # 逐字稿顯示配置
    TRANSCRIPT_DISPLAY_INTERVAL_SEC: int = Field(10, description="逐字稿時間戳顯示間隔（秒）")

    # REST API 簡化架構配置
    SEGMENT_DURATION: int = Field(10, description="分段錄音時長（秒）")
    UPLOAD_MAX_SIZE: int = Field(5 * 1024 * 1024, description="檔案上傳大小限制（5MB）")
    AUDIO_BITRATE: int = Field(128000, description="音頻位元率（128 kbps）")
    MIME_TYPE: str = Field("audio/webm;codecs=opus", description="音頻檔案 MIME 類型")

    # 上傳設定
    UPLOAD_TIMEOUT_SEC: int = Field(30, description="上傳超時時間（秒）")
    MAX_RETRIES: int = Field(3, description="最大重試次數")
    RETRY_DELAY_SEC: int = Field(2, description="重試延遲時間（秒）")

    # 滑動視窗 Rate Limiting 配置
    USE_SLIDING_WINDOW_RATE_LIMIT: bool = Field(False, description="啟用滑動視窗頻率限制")
    SLIDING_WINDOW_MAX_REQUESTS: int = Field(3, description="滑動視窗內最大請求數")
    SLIDING_WINDOW_SECONDS: int = Field(60, description="滑動視窗時間（秒）")

    # Whisper 段落過濾門檻參數 (從環境變數讀取)
    FILTER_NO_SPEECH: float = Field(
        0.2,
        description="靜音檢測門檻：no_speech_prob 超過此值的段落將被過濾（0.0-1.0）",
        ge=0.0,
        le=1.0
    )
    FILTER_LOGPROB: float = Field(
        -1.0,
        description="置信度過濾門檻：avg_logprob 低於此值的段落將被過濾（負值）"
    )
    FILTER_COMPRESSION: float = Field(
        2.4,
        description="重複內容檢測門檻：compression_ratio 超過此值的段落將被過濾（正值）",
        gt=0.0
    )

    # 並發處理優化配置（用戶建議參數）
    MAX_CONCURRENT_TRANSCRIPTIONS: int = Field(3, description="最大並發轉錄數")
    TRANSCRIPTION_WORKERS_COUNT: int = Field(3, description="轉錄Worker數量")
    QUEUE_BACKLOG_THRESHOLD: int = Field(10, description="隊列積壓警報門檻")
    QUEUE_MONITOR_INTERVAL: int = Field(5, description="監控間隔(秒)")
    QUEUE_ALERT_COOLDOWN: int = Field(30, description="警報冷卻時間(秒)")

    # 隊列系統配置
    MAX_QUEUE_SIZE: int = Field(100, description="最大隊列大小")
    QUEUE_TIMEOUT_SECONDS: int = Field(300, description="隊列超時（秒）")

    # 你可以依需求再加更多欄位

    # 靜音判斷參數
    SILENCE_NOISE_DB: float = Field(-35.0, description="靜音判斷 dB 門檻 (負值)", env="SILENCE_NOISE_DB")
    SILENCE_DURATION_SEC: float = Field(0.3, description="靜音判斷持續秒數", env="SILENCE_DURATION_SEC")

    model_config = SettingsConfigDict(env_file=_ENV_FILE, env_file_encoding="utf-8", extra="ignore")

settings = Settings()

def get_settings() -> Settings:
    """獲取應用程式設定實例"""
    return settings


# END FILE CONTENTS


# File: app/middleware/__init__.py



# END FILE CONTENTS


# File: frontend/components/finish-state.tsx

"use client"

import { ScrollArea } from "@/components/ui/scroll-area"
import { Button } from "@/components/ui/button"
import { ChevronDown } from "lucide-react"
import type { TranscriptEntry } from "../types/app-state"

interface FinishStateProps {
  transcriptEntries: TranscriptEntry[]
  onExport?: () => void
  onToLatest?: () => void
}

export function FinishState({ transcriptEntries, onExport, onToLatest }: FinishStateProps) {
  return (
    <div className="h-full flex flex-col">
      <ScrollArea className="flex-1">
        <div className="p-6 space-y-4">
          {transcriptEntries.map((entry, index) => (
            <div key={index} className="flex gap-4 text-sm">
              <span className="text-muted-foreground font-mono text-xs mt-1 min-w-[40px] flex-shrink-0">
                {entry.time}
              </span>
              <span className="text-foreground leading-relaxed flex-1">{entry.text}</span>
            </div>
          ))}
        </div>
      </ScrollArea>

      <div className="p-4 border-t border-border space-y-2">
        {/* Action buttons row */}
        <div className="flex justify-center gap-2">
          {onToLatest && (
            <Button
              onClick={onToLatest}
              variant="ghost"
              size="sm"
              className="flex items-center gap-2"
            >
              <ChevronDown className="w-4 h-4" />
              To Latest
            </Button>
          )}
        </div>
      </div>
    </div>
  )
}


# END FILE CONTENTS


# File: frontend/lib/services/base-service.ts

"use client"

/**
 * BaseService - 服務層基礎抽象類
 *
 * 提供統一的服務基礎設施：
 * - 統一日誌介面
 * - 生命週期管理 (initialize/cleanup)
 * - 錯誤處理模式
 * - 服務狀態管理
 */
export abstract class BaseService {
    /**
     * 日誌工具 - 重用現有的 console 模式
     */
    protected readonly logger = console

    /**
     * 服務名稱，用於日誌和調試
     */
    protected abstract readonly serviceName: string

    /**
     * 服務初始化狀態
     */
    private _isInitialized = false

    /**
     * 服務是否正在運行
     */
    private _isRunning = false

    /**
     * 初始化服務
     * 子類必須實現具體的初始化邏輯
     */
    abstract initialize(): Promise<void>

    /**
     * 清理服務資源
     * 子類必須實現具體的清理邏輯
     */
    abstract cleanup(): Promise<void>

    /**
     * 啟動服務
     * 統一的啟動流程：檢查狀態 → 初始化 → 標記為運行中
     */
    async start(): Promise<void> {
        if (this._isRunning) {
            this.logger.warn(`🔄 [${this.serviceName}] 服務已在運行中，跳過啟動`)
            return
        }

        try {
            this.logger.log(`🚀 [${this.serviceName}] 開始啟動服務...`)

            if (!this._isInitialized) {
                await this.initialize()
                this._isInitialized = true
                this.logger.log(`✅ [${this.serviceName}] 服務初始化完成`)
            }

            this._isRunning = true
            this.logger.log(`✅ [${this.serviceName}] 服務啟動成功`)
        } catch (error) {
            this.logger.error(`❌ [${this.serviceName}] 服務啟動失敗:`, error)
            throw error
        }
    }

    /**
     * 停止服務
     * 統一的停止流程：檢查狀態 → 清理資源 → 標記為停止
     */
    async stop(): Promise<void> {
        if (!this._isRunning) {
            this.logger.warn(`🔄 [${this.serviceName}] 服務未在運行中，跳過停止`)
            return
        }

        try {
            this.logger.log(`🛑 [${this.serviceName}] 開始停止服務...`)

            await this.cleanup()
            this._isRunning = false

            this.logger.log(`✅ [${this.serviceName}] 服務停止完成`)
        } catch (error) {
            this.logger.error(`❌ [${this.serviceName}] 服務停止失敗:`, error)
            throw error
        }
    }

    /**
     * 重啟服務
     * 先停止，再啟動
     */
    async restart(): Promise<void> {
        this.logger.log(`🔄 [${this.serviceName}] 開始重啟服務...`)
        await this.stop()
        await this.start()
        this.logger.log(`✅ [${this.serviceName}] 服務重啟完成`)
    }

    /**
     * 檢查服務是否已初始化
     */
    get isInitialized(): boolean {
        return this._isInitialized
    }

    /**
     * 檢查服務是否正在運行
     */
    get isRunning(): boolean {
        return this._isRunning
    }

    /**
     * 獲取服務狀態摘要
     */
    getStatus(): ServiceStatus {
        return {
            serviceName: this.serviceName,
            isInitialized: this._isInitialized,
            isRunning: this._isRunning,
            timestamp: new Date().toISOString()
        }
    }

    /**
     * 統一錯誤處理
     * 提供一致的錯誤日誌格式和錯誤包裝
     */
    protected handleError(operation: string, error: unknown): never {
        const errorMessage = error instanceof Error ? error.message : '未知錯誤'
        const fullMessage = `${this.serviceName} ${operation} 失敗: ${errorMessage}`

        this.logger.error(`❌ [${this.serviceName}] ${operation} 失敗:`, error)

        throw new ServiceError(fullMessage, {
            serviceName: this.serviceName,
            operation,
            originalError: error,
            timestamp: new Date().toISOString()
        })
    }

    /**
     * 統一成功日誌
     */
    protected logSuccess(operation: string, details?: any): void {
        this.logger.log(`✅ [${this.serviceName}] ${operation} 成功`, details ? details : '')
    }

    /**
     * 統一資訊日誌
     */
    protected logInfo(message: string, details?: any): void {
        this.logger.log(`ℹ️ [${this.serviceName}] ${message}`, details ? details : '')
    }

    /**
     * 統一警告日誌
     */
    protected logWarning(message: string, details?: any): void {
        this.logger.warn(`⚠️ [${this.serviceName}] ${message}`, details ? details : '')
    }
}

/**
 * 服務狀態介面
 */
export interface ServiceStatus {
    serviceName: string
    isInitialized: boolean
    isRunning: boolean
    timestamp: string
}

/**
 * 服務錯誤類別
 * 提供結構化的錯誤訊息和上下文
 */
export class ServiceError extends Error {
    readonly serviceName: string
    readonly operation: string
    readonly originalError: unknown
    readonly timestamp: string

    constructor(message: string, context: {
        serviceName: string
        operation: string
        originalError: unknown
        timestamp: string
    }) {
        super(message)
        this.name = 'ServiceError'
        this.serviceName = context.serviceName
        this.operation = context.operation
        this.originalError = context.originalError
        this.timestamp = context.timestamp
    }
}


# END FILE CONTENTS


# File: frontend/e2e/transcript-integration.spec.ts

import { test, expect, Page } from '@playwright/test'

/**
 * 逐字稿功能整合測試
 * 測試完整的錄音和逐字稿流程，包括新舊系統的切換
 */

// 測試前的設置
test.beforeEach(async ({ page }) => {
  // 前往應用程式
  await page.goto('http://localhost:3000')

  // 等待頁面載入完成
  await page.waitForLoadState('networkidle')

  // 檢查頁面是否正常載入
  await expect(page).toHaveTitle(/study-scriber/)
})

test.describe('逐字稿功能測試', () => {
  test('應該能夠啟用新的狀態管理系統', async ({ page }) => {
    // 在瀏覽器控制台中啟用新功能
    await page.evaluate(() => {
      // 啟用所有新功能
      if ((window as any).featureFlags) {
        (window as any).featureFlags.enableAll()
      }
    })

    // 重新載入頁面以應用新設置
    await page.reload()
    await page.waitForLoadState('networkidle')

    // 檢查功能開關是否正確啟用
    const featureFlags = await page.evaluate(() => {
      return (window as any).featureFlags?.getAll()
    })

    console.log('功能開關狀態:', featureFlags)

    // 驗證關鍵功能已啟用
    expect(featureFlags?.useNewStateManagement).toBe(true)
    expect(featureFlags?.useNewTranscriptHook).toBe(true)
  })

  test('應該能夠開始錄音會話', async ({ page }) => {
    // 啟用新功能
    await page.evaluate(() => {
      if ((window as any).featureFlags) {
        (window as any).featureFlags.enableAll()
      }
    })
    await page.reload()
    await page.waitForLoadState('networkidle')

    // 尋找錄音按鈕
    const recordButton = page.locator('button').filter({ hasText: /錄音|Record|開始/ }).first()

    if (await recordButton.count() > 0) {
      // 點擊錄音按鈕
      await recordButton.click()

      // 等待錄音狀態變更
      await page.waitForTimeout(1000)

      // 檢查是否有錄音狀態指示器
      const recordingIndicator = page.locator('[data-testid="recording-indicator"]')
        .or(page.locator('text=/錄音中|Recording/'))
        .or(page.locator('.recording'))

      // 如果找到錄音指示器，驗證錄音狀態
      if (await recordingIndicator.count() > 0) {
        await expect(recordingIndicator.first()).toBeVisible()
        console.log('✅ 錄音功能已啟動')
      } else {
        console.log('ℹ️ 未找到明顯的錄音指示器，但錄音按鈕已點擊')
      }
    } else {
      console.log('ℹ️ 未找到錄音按鈕，可能需要先建立會話')
    }
  })

  test('應該能夠建立新的筆記會話', async ({ page }) => {
    // 啟用新功能
    await page.evaluate(() => {
      if ((window as any).featureFlags) {
        (window as any).featureFlags.enableAll()
      }
    })
    await page.reload()
    await page.waitForLoadState('networkidle')

    // 尋找新筆記或新會話按鈕
    const newNoteButton = page.locator('button').filter({ hasText: /新筆記|New Note|新增|Add/ }).first()

    if (await newNoteButton.count() > 0) {
      await newNoteButton.click()
      await page.waitForTimeout(500)
      console.log('✅ 新筆記按鈕已點擊')
    } else {
      console.log('ℹ️ 未找到新筆記按鈕')
    }

    // 檢查文字編輯器是否存在
    const editorLocator = page.locator('.CodeMirror').first();
    const editorVisible = await editorLocator.isVisible();

    if (editorVisible) {
      console.log('✅ CodeMirror 編輯器已找到且可見');
      // 使用 evaluate 直接設置編輯器內容
      await page.evaluate((text) => {
        const editor = (window as any).theEditor; // 假設 SimpleMDE 實例暴露在 window
        if (editor && editor.codemirror) {
          editor.codemirror.setValue(text);
        } else {
          // 降級方案：尋找 textarea
          const textarea = document.querySelector('.CodeMirror textarea') as HTMLTextAreaElement | null;
          if (textarea) {
            textarea.value = text;
            textarea.dispatchEvent(new Event('input', { bubbles: true }));
          }
        }
      }, '這是一個測試筆記，用於驗證逐字稿功能。');

      // 驗證文字已輸入
      await expect(editorLocator).toHaveText(/測試筆記/);
      console.log('✅ 編輯器功能正常');
    } else {
      console.log('ℹ️ 未找到 CodeMirror 編輯器或其不可見');
      // 嘗試尋找備用的 textarea
      const fallbackEditor = page.locator('[data-testid="fallback-editor"]');
      if (await fallbackEditor.count() > 0) {
        console.log('ℹ️ 找到備用編輯器，繼續測試...');
        await fallbackEditor.fill('這是一個測試筆記，用於驗證逐字稿功能。');
        await expect(fallbackEditor).toHaveValue(/測試筆記/);
        console.log('✅ 備用編輯器功能正常');
      } else {
        console.log('❌ 主編輯器與備用編輯器皆未找到');
      }
    }
  })

  test('應該能夠檢查 WebSocket 連接狀態', async ({ page }) => {
    // 啟用新功能
    await page.evaluate(() => {
      if ((window as any).featureFlags) {
        (window as any).featureFlags.enableAll()
      }
    })
    await page.reload()
    await page.waitForLoadState('networkidle')

    // 檢查 WebSocket 連接狀態
    const wsStatus = await page.evaluate(() => {
      const result: {
        exists: boolean;
        isConnected?: boolean;
        hasListeners?: boolean;
        websocketAvailable: boolean;
      } = {
        exists: false,
        websocketAvailable: typeof WebSocket !== 'undefined',
      };

      // 檢查是否有 TranscriptManager
      const transcriptManager = (window as any).transcriptManager;
      if (transcriptManager) {
        result.exists = true;
        result.isConnected = transcriptManager.isConnected?.() || false;
        result.hasListeners = transcriptManager.listeners?.size > 0 || false;
      }
      return result;
    });

    console.log('WebSocket 狀態:', wsStatus)

    // 驗證 WebSocket 可用性
    expect(wsStatus.websocketAvailable).toBe(true)

    if (wsStatus.exists) {
      console.log('✅ TranscriptManager 已找到')
    } else {
      console.log('ℹ️ TranscriptManager 尚未初始化，這可能是正常的')
    }
  })

  test('應該能夠測試狀態管理系統', async ({ page }) => {
    await page.waitForSelector('body', { timeout: 5000 });
    const hasBody = (await page.locator('body').count()) > 0;
    expect(hasBody).toBe(true);

    const appState = await page.evaluate(() => {
      return {
        hasFeatureFlags: !!(window as any).featureFlags,
        hasStateMachine: !!(window as any).stateMachine,
      };
    });

    // 啟用新功能
    await page.evaluate(() => {
      if ((window as any).featureFlags) {
        (window as any).featureFlags.enableAll()
      }
    })
    await page.reload()
    await page.waitForLoadState('networkidle')

    console.log('🎬 開始模擬完整錄音流程...')

    // 步驟 1: 檢查初始狀態
    const initialState = await page.evaluate(() => {
      return {
        url: window.location.href,
        title: document.title,
        hasAudio: navigator.mediaDevices !== undefined
      }
    })

    console.log('初始狀態:', initialState)

    // 步驟 2: 尋找並點擊開始錄音的按鈕
    const startButtons = [
      'button:has-text("開始錄音")',
      'button:has-text("Start Recording")',
      'button:has-text("錄音")',
      'button:has-text("Record")',
      '[data-testid="start-recording"]',
      '.record-button',
      'button[aria-label*="錄音"]'
    ]

    let recordingStarted = false

    for (const selector of startButtons) {
      const button = page.locator(selector).first()
      if (await button.count() > 0 && await button.isVisible()) {
        console.log(`找到錄音按鈕: ${selector}`)
        await button.click()
        await page.waitForTimeout(1000)
        recordingStarted = true
        break
      }
    }

    if (!recordingStarted) {
      console.log('ℹ️ 未找到明顯的錄音按鈕，嘗試其他方式...')

      // 嘗試透過狀態機直接啟動錄音
      const stateMachineResult = await page.evaluate(() => {
        const sm = (window as any).stateMachine
        if (sm && sm.canTransition && sm.transition) {
          try {
            if (sm.canTransition('USER_START_RECORDING')) {
              const result = sm.transition('USER_START_RECORDING')
              return { success: true, result }
            }
          } catch (error) {
            return { success: false, error: error instanceof Error ? error.message : String(error) }
          }
        }
        return { success: false, reason: 'StateMachine not available' }
      })

      console.log('狀態機錄音嘗試:', stateMachineResult)
    }

    // 步驟 3: 等待並檢查錄音狀態
    await page.waitForTimeout(2000)

    // 步驟 4: 檢查是否有逐字稿區域
    const transcriptArea = page.locator('.transcript, [data-testid="transcript"], .transcription').first()

    if (await transcriptArea.count() > 0) {
      console.log('✅ 找到逐字稿區域')
      await expect(transcriptArea).toBeVisible()
    } else {
      console.log('ℹ️ 未找到明顯的逐字稿區域')
    }

    // 步驟 5: 模擬逐字稿數據（如果有相關 API）
    const mockTranscriptResult = await page.evaluate(() => {
      // 嘗試模擬逐字稿數據
      const mockTranscript = {
        id: 'test-' + Date.now(),
        text: '這是一個測試逐字稿',
        timestamp: new Date().toISOString(),
        confidence: 0.95
      }

      // 如果有 TranscriptManager，嘗試添加測試數據
      const tm = (window as any).transcriptManager
      if (tm && tm.addTranscript) {
        try {
          tm.addTranscript(mockTranscript)
          return { success: true, transcript: mockTranscript }
        } catch (error) {
          return { success: false, error: error instanceof Error ? error.message : String(error) }
        }
      }

      return { success: false, reason: 'TranscriptManager not available' }
    })

    console.log('模擬逐字稿結果:', mockTranscriptResult)

    // 步驟 6: 檢查最終狀態
    const finalState = await page.evaluate(() => {
      return {
        featureFlags: (window as any).featureFlags?.getAll(),
        stateMachine: (window as any).stateMachine?.getCurrentState?.(),
        transcriptManager: !!(window as any).transcriptManager
      }
    })

    console.log('最終狀態:', finalState)

    // 驗證測試結果
    expect(finalState.featureFlags).toBeDefined()
    console.log('🎉 完整錄音流程模擬完成')
  })

  test('應該能夠測試功能開關切換', async ({ page }) => {
    console.log('🔄 測試功能開關切換...')

    // 測試關閉狀態
    await page.evaluate(() => {
      if ((window as any).featureFlags) {
        (window as any).featureFlags.disableAll()
      }
    })

    await page.reload()
    await page.waitForLoadState('networkidle')

    let flagsOff = await page.evaluate(() => {
      return (window as any).featureFlags?.getAll()
    })

    console.log('功能開關關閉狀態:', flagsOff)

    // 測試開啟狀態
    await page.evaluate(() => {
      if ((window as any).featureFlags) {
        (window as any).featureFlags.enableAll()
      }
    })

    await page.reload()
    await page.waitForLoadState('networkidle')

    let flagsOn = await page.evaluate(() => {
      return (window as any).featureFlags?.getAll()
    })

    console.log('功能開關開啟狀態:', flagsOn)

    // 驗證切換成功
    expect(flagsOff?.useNewStateManagement).toBe(false)
    expect(flagsOn?.useNewStateManagement).toBe(true)

    console.log('✅ 功能開關切換測試完成')
  })
})

test.describe('回歸測試', () => {
  test('應該確保現有功能不受影響', async ({ page }) => {
    console.log('🔍 執行回歸測試...')

    // 使用預設設置（新功能關閉）
    await page.evaluate(() => {
      if ((window as any).featureFlags) {
        (window as any).featureFlags.reset()
      }
    })

    await page.reload()
    await page.waitForLoadState('networkidle')
    await page.waitForSelector('body', { timeout: 5000 });
    const hasBody = (await page.locator('body').count()) > 0;
    expect(hasBody).toBe(true);

    const basicFunctions = await page.evaluate(() => {
      return {
        hasTitle: !!document.title,
        hasFeatureFlags: !!(window as any).featureFlags,
        canUseLocalStorage: !!window.localStorage,
        canUseWebSocket: !!window.WebSocket
      };
    });

    console.log('基本功能檢查:', basicFunctions)

    // 驗證基本功能
    expect(basicFunctions.hasTitle).toBe(true)
    expect(basicFunctions.hasFeatureFlags).toBe(true)
    expect(basicFunctions.canUseLocalStorage).toBe(true)
    expect(basicFunctions.canUseWebSocket).toBe(true)

    console.log('✅ 回歸測試通過')
  })
})


# END FILE CONTENTS


# File: e2e/export-api.spec.ts

const TEST_SESSION_ID = 'EE002F79-B1C1-4900-A0BA-C81FDA4F89FD'


# END FILE CONTENTS


# File: app/services/stt/lang_map.py

"""Convert canonical BCP-47 lang_code ⇄ provider-specific code."""

_CANONICAL_TO_SHORT = {
    "zh-TW": "zh",
    "zh":    "zh",
    "en-US": "en",
    "en":    "en",
}

def to_whisper(code: str) -> str:
    """Whisper 端點語言碼（ISO-639-1，小寫；未知→'auto')."""
    return _CANONICAL_TO_SHORT.get(code, "auto")

def to_gpt4o(code: str) -> str:
    """GPT-4o speech-transcribe 語言碼（同 Whisper）"""
    return _CANONICAL_TO_SHORT.get(code, "auto")


# END FILE CONTENTS


# File: frontend/hooks/use-recording-adapter.ts

"use client"

import { useRecording as useRecordingLegacy } from './use-recording'
import { useRecordingNew } from './use-recording-new'
import { isFeatureEnabled } from '../lib/feature-flags'
import { TranscriptMessage } from '../lib/transcript-manager'

// 統一的 UseRecording 介面
interface UseRecordingReturn {
    isRecording: boolean
    recordingTime: number
    transcripts: TranscriptMessage[]
    transcriptCompleted: boolean
    error: string | null
    startRecording: (sessionId: string) => Promise<void>
    stopRecording: () => void
    clearTranscripts: () => void
}

/**
 * useRecording 適配器 Hook
 * 根據功能開關決定使用新舊版本的 useRecording
 * 確保 API 完全相容，現有組件無需修改
 */
export function useRecording(): UseRecordingReturn {
    const useNewRecordingHook = isFeatureEnabled('useNewRecordingHook')
    const useNewStateManagement = isFeatureEnabled('useNewStateManagement')

    console.log('🔄 [useRecordingAdapter] 功能開關狀態:', {
        useNewRecordingHook,
        useNewStateManagement,
        willUseNewVersion: useNewRecordingHook || useNewStateManagement
    })

    // 如果啟用新 Recording Hook 或新狀態管理，使用新版本
    if (useNewRecordingHook || useNewStateManagement) {
        console.log('🔄 [useRecordingAdapter] 使用新版本 useRecordingNew')
        return useRecordingNew()
    }

    // 否則使用舊版本
    console.log('🔄 [useRecordingAdapter] 使用舊版本 useRecording')
    return useRecordingLegacy()
}

// 導出舊版本供直接使用（用於測試或特殊情況）
export { useRecording as useRecordingLegacy } from './use-recording'
export { useRecordingNew } from './use-recording-new'


# END FILE CONTENTS


# File: frontend/pnpm-lock.yaml

lockfileVersion: '9.0'

settings:
  autoInstallPeers: true
  excludeLinksFromLockfile: false

importers:

  .:
    dependencies:
      '@hookform/resolvers':
        specifier: ^3.9.1
        version: 3.10.0(react-hook-form@7.59.0(react@19.1.0))
      '@radix-ui/react-accordion':
        specifier: 1.2.2
        version: 1.2.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-alert-dialog':
        specifier: 1.1.4
        version: 1.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-aspect-ratio':
        specifier: 1.1.1
        version: 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-avatar':
        specifier: 1.1.2
        version: 1.1.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-checkbox':
        specifier: 1.1.3
        version: 1.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-collapsible':
        specifier: 1.1.2
        version: 1.1.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-context-menu':
        specifier: 2.2.4
        version: 2.2.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-dialog':
        specifier: 1.1.4
        version: 1.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-dropdown-menu':
        specifier: 2.1.4
        version: 2.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-hover-card':
        specifier: 1.1.4
        version: 1.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-label':
        specifier: 2.1.1
        version: 2.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-menubar':
        specifier: 1.1.4
        version: 1.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-navigation-menu':
        specifier: 1.2.3
        version: 1.2.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-popover':
        specifier: 1.1.4
        version: 1.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-progress':
        specifier: 1.1.1
        version: 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-radio-group':
        specifier: 1.2.2
        version: 1.2.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-scroll-area':
        specifier: 1.2.2
        version: 1.2.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-select':
        specifier: 2.1.4
        version: 2.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-separator':
        specifier: 1.1.1
        version: 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-slider':
        specifier: 1.2.2
        version: 1.2.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-slot':
        specifier: 1.1.1
        version: 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-switch':
        specifier: 1.1.2
        version: 1.1.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-tabs':
        specifier: 1.1.2
        version: 1.1.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-toast':
        specifier: 1.2.4
        version: 1.2.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-toggle':
        specifier: 1.1.1
        version: 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-toggle-group':
        specifier: 1.1.1
        version: 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-tooltip':
        specifier: 1.1.6
        version: 1.1.6(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      axios:
        specifier: ^1.10.0
        version: 1.10.0
      class-variance-authority:
        specifier: ^0.7.1
        version: 0.7.1
      clsx:
        specifier: ^2.1.1
        version: 2.1.1
      cmdk:
        specifier: 1.0.4
        version: 1.0.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      date-fns:
        specifier: 4.1.0
        version: 4.1.0
      easymde:
        specifier: latest
        version: 2.20.0
      embla-carousel-react:
        specifier: 8.5.1
        version: 8.5.1(react@19.1.0)
      input-otp:
        specifier: 1.4.1
        version: 1.4.1(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      lucide-react:
        specifier: ^0.454.0
        version: 0.454.0(react@19.1.0)
      next:
        specifier: 15.2.4
        version: 15.2.4(@babel/core@7.28.0)(@playwright/test@1.53.2)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      next-themes:
        specifier: ^0.4.4
        version: 0.4.6(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      react:
        specifier: ^19
        version: 19.1.0
      react-day-picker:
        specifier: 8.10.1
        version: 8.10.1(date-fns@4.1.0)(react@19.1.0)
      react-dom:
        specifier: ^19
        version: 19.1.0(react@19.1.0)
      react-hook-form:
        specifier: ^7.54.1
        version: 7.59.0(react@19.1.0)
      react-resizable-panels:
        specifier: ^2.1.7
        version: 2.1.9(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      react-simplemde-editor:
        specifier: latest
        version: 5.2.0(easymde@2.20.0)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      recharts:
        specifier: 2.15.0
        version: 2.15.0(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      sonner:
        specifier: ^1.7.1
        version: 1.7.4(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      tailwind-merge:
        specifier: ^2.5.5
        version: 2.6.0
      tailwindcss-animate:
        specifier: ^1.0.7
        version: 1.0.7(tailwindcss@3.4.17)
      vaul:
        specifier: ^0.9.6
        version: 0.9.9(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      zod:
        specifier: ^3.24.1
        version: 3.25.71
      zustand:
        specifier: ^5.0.6
        version: 5.0.6(@types/react@19.1.8)(react@19.1.0)(use-sync-external-store@1.5.0(react@19.1.0))
    devDependencies:
      '@playwright/test':
        specifier: ^1.44.1
        version: 1.53.2
      '@testing-library/jest-dom':
        specifier: ^6.6.3
        version: 6.6.3
      '@testing-library/react':
        specifier: ^16.3.0
        version: 16.3.0(@testing-library/dom@10.4.0)(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@testing-library/user-event':
        specifier: ^14.6.1
        version: 14.6.1(@testing-library/dom@10.4.0)
      '@types/node':
        specifier: ^22
        version: 22.16.0
      '@types/react':
        specifier: ^19
        version: 19.1.8
      '@types/react-dom':
        specifier: ^19
        version: 19.1.6(@types/react@19.1.8)
      '@vitejs/plugin-react':
        specifier: ^4.6.0
        version: 4.6.0(vite@7.0.0(@types/node@22.16.0)(jiti@1.21.7)(yaml@2.8.0))
      '@vitest/ui':
        specifier: ^3.2.4
        version: 3.2.4(vitest@3.2.4)
      autoprefixer:
        specifier: ^10.4.20
        version: 10.4.21(postcss@8.5.6)
      eslint:
        specifier: ^9
        version: 9.30.1(jiti@1.21.7)
      eslint-config-next:
        specifier: 15.3.4
        version: 15.3.4(eslint@9.30.1(jiti@1.21.7))(typescript@5.8.3)
      jsdom:
        specifier: ^26.1.0
        version: 26.1.0
      postcss:
        specifier: ^8.5.0
        version: 8.5.6
      tailwindcss:
        specifier: ^3.4.17
        version: 3.4.17
      typescript:
        specifier: ^5
        version: 5.8.3
      vitest:
        specifier: ^3.2.4
        version: 3.2.4(@types/node@22.16.0)(@vitest/ui@3.2.4)(jiti@1.21.7)(jsdom@26.1.0)(yaml@2.8.0)

packages:

  '@adobe/css-tools@4.4.3':
    resolution: {integrity: sha512-VQKMkwriZbaOgVCby1UDY/LDk5fIjhQicCvVPFqfe+69fWaPWydbWJ3wRt59/YzIwda1I81loas3oCoHxnqvdA==}

  '@alloc/quick-lru@5.2.0':
    resolution: {integrity: sha512-UrcABB+4bUrFABwbluTIBErXwvbsU/V7TZWfmbgJfbkwiBuziS9gxdODUyuiecfdGQ85jglMW6juS3+z5TsKLw==}
    engines: {node: '>=10'}

  '@ampproject/remapping@2.3.0':
    resolution: {integrity: sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==}
    engines: {node: '>=6.0.0'}

  '@asamuzakjp/css-color@3.2.0':
    resolution: {integrity: sha512-K1A6z8tS3XsmCMM86xoWdn7Fkdn9m6RSVtocUrJYIwZnFVkng/PvkEoWtOWmP+Scc6saYWHWZYbndEEXxl24jw==}

  '@babel/code-frame@7.27.1':
    resolution: {integrity: sha512-cjQ7ZlQ0Mv3b47hABuTevyTuYN4i+loJKGeV9flcCgIK37cCXRh+L1bd3iBHlynerhQ7BhCkn2BPbQUL+rGqFg==}
    engines: {node: '>=6.9.0'}

  '@babel/compat-data@7.28.0':
    resolution: {integrity: sha512-60X7qkglvrap8mn1lh2ebxXdZYtUcpd7gsmy9kLaBJ4i/WdY8PqTSdxyA8qraikqKQK5C1KRBKXqznrVapyNaw==}
    engines: {node: '>=6.9.0'}

  '@babel/core@7.28.0':
    resolution: {integrity: sha512-UlLAnTPrFdNGoFtbSXwcGFQBtQZJCNjaN6hQNP3UPvuNXT1i82N26KL3dZeIpNalWywr9IuQuncaAfUaS1g6sQ==}
    engines: {node: '>=6.9.0'}

  '@babel/generator@7.28.0':
    resolution: {integrity: sha512-lJjzvrbEeWrhB4P3QBsH7tey117PjLZnDbLiQEKjQ/fNJTjuq4HSqgFA+UNSwZT8D7dxxbnuSBMsa1lrWzKlQg==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-compilation-targets@7.27.2':
    resolution: {integrity: sha512-2+1thGUUWWjLTYTHZWK1n8Yga0ijBz1XAhUXcKy81rd5g6yh7hGqMp45v7cadSbEHc9G3OTv45SyneRN3ps4DQ==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-globals@7.28.0':
    resolution: {integrity: sha512-+W6cISkXFa1jXsDEdYA8HeevQT/FULhxzR99pxphltZcVaugps53THCeiWA8SguxxpSp3gKPiuYfSWopkLQ4hw==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-module-imports@7.27.1':
    resolution: {integrity: sha512-0gSFWUPNXNopqtIPQvlD5WgXYI5GY2kP2cCvoT8kczjbfcfuIljTbcWrulD1CIPIX2gt1wghbDy08yE1p+/r3w==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-module-transforms@7.27.3':
    resolution: {integrity: sha512-dSOvYwvyLsWBeIRyOeHXp5vPj5l1I011r52FM1+r1jCERv+aFXYk4whgQccYEGYxK2H3ZAIA8nuPkQ0HaUo3qg==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0

  '@babel/helper-plugin-utils@7.27.1':
    resolution: {integrity: sha512-1gn1Up5YXka3YYAHGKpbideQ5Yjf1tDa9qYcgysz+cNCXukyLl6DjPXhD3VRwSb8c0J9tA4b2+rHEZtc6R0tlw==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-string-parser@7.27.1':
    resolution: {integrity: sha512-qMlSxKbpRlAridDExk92nSobyDdpPijUq2DW6oDnUqd0iOGxmQjyqhMIihI9+zv4LPyZdRje2cavWPbCbWm3eA==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-validator-identifier@7.27.1':
    resolution: {integrity: sha512-D2hP9eA+Sqx1kBZgzxZh0y1trbuU+JoDkiEwqhQ36nodYqJwyEIhPSdMNd7lOm/4io72luTPWH20Yda0xOuUow==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-validator-option@7.27.1':
    resolution: {integrity: sha512-YvjJow9FxbhFFKDSuFnVCe2WxXk1zWc22fFePVNEaWJEu8IrZVlda6N0uHwzZrUM1il7NC9Mlp4MaJYbYd9JSg==}
    engines: {node: '>=6.9.0'}

  '@babel/helpers@7.27.6':
    resolution: {integrity: sha512-muE8Tt8M22638HU31A3CgfSUciwz1fhATfoVai05aPXGor//CdWDCbnlY1yvBPo07njuVOCNGCSp/GTt12lIug==}
    engines: {node: '>=6.9.0'}

  '@babel/parser@7.28.0':
    resolution: {integrity: sha512-jVZGvOxOuNSsuQuLRTh13nU0AogFlw32w/MT+LV6D3sP5WdbW61E77RnkbaO2dUvmPAYrBDJXGn5gGS6tH4j8g==}
    engines: {node: '>=6.0.0'}
    hasBin: true

  '@babel/plugin-transform-react-jsx-self@7.27.1':
    resolution: {integrity: sha512-6UzkCs+ejGdZ5mFFC/OCUrv028ab2fp1znZmCZjAOBKiBK2jXD1O+BPSfX8X2qjJ75fZBMSnQn3Rq2mrBJK2mw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-react-jsx-source@7.27.1':
    resolution: {integrity: sha512-zbwoTsBruTeKB9hSq73ha66iFeJHuaFkUbwvqElnygoNbj/jHRsSeokowZFN3CZ64IvEqcmmkVe89OPXc7ldAw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/runtime@7.27.6':
    resolution: {integrity: sha512-vbavdySgbTTrmFE+EsiqUTzlOr5bzlnJtUv9PynGCAKvfQqjIXbvFdumPM/GxMDfyuGMJaJAU6TO4zc1Jf1i8Q==}
    engines: {node: '>=6.9.0'}

  '@babel/template@7.27.2':
    resolution: {integrity: sha512-LPDZ85aEJyYSd18/DkjNh4/y1ntkE5KwUHWTiqgRxruuZL2F1yuHligVHLvcHY2vMHXttKFpJn6LwfI7cw7ODw==}
    engines: {node: '>=6.9.0'}

  '@babel/traverse@7.28.0':
    resolution: {integrity: sha512-mGe7UK5wWyh0bKRfupsUchrQGqvDbZDbKJw+kcRGSmdHVYrv+ltd0pnpDTVpiTqnaBru9iEvA8pz8W46v0Amwg==}
    engines: {node: '>=6.9.0'}

  '@babel/types@7.28.0':
    resolution: {integrity: sha512-jYnje+JyZG5YThjHiF28oT4SIZLnYOcSBb6+SDaFIyzDVSkXQmQQYclJ2R+YxcdmK0AX6x1E5OQNtuh3jHDrUg==}
    engines: {node: '>=6.9.0'}

  '@csstools/color-helpers@5.0.2':
    resolution: {integrity: sha512-JqWH1vsgdGcw2RR6VliXXdA0/59LttzlU8UlRT/iUUsEeWfYq8I+K0yhihEUTTHLRm1EXvpsCx3083EU15ecsA==}
    engines: {node: '>=18'}

  '@csstools/css-calc@2.1.4':
    resolution: {integrity: sha512-3N8oaj+0juUw/1H3YwmDDJXCgTB1gKU6Hc/bB502u9zR0q2vd786XJH9QfrKIEgFlZmhZiq6epXl4rHqhzsIgQ==}
    engines: {node: '>=18'}
    peerDependencies:
      '@csstools/css-parser-algorithms': ^3.0.5
      '@csstools/css-tokenizer': ^3.0.4

  '@csstools/css-color-parser@3.0.10':
    resolution: {integrity: sha512-TiJ5Ajr6WRd1r8HSiwJvZBiJOqtH86aHpUjq5aEKWHiII2Qfjqd/HCWKPOW8EP4vcspXbHnXrwIDlu5savQipg==}
    engines: {node: '>=18'}
    peerDependencies:
      '@csstools/css-parser-algorithms': ^3.0.5
      '@csstools/css-tokenizer': ^3.0.4

  '@csstools/css-parser-algorithms@3.0.5':
    resolution: {integrity: sha512-DaDeUkXZKjdGhgYaHNJTV9pV7Y9B3b644jCLs9Upc3VeNGg6LWARAT6O+Q+/COo+2gg/bM5rhpMAtf70WqfBdQ==}
    engines: {node: '>=18'}
    peerDependencies:
      '@csstools/css-tokenizer': ^3.0.4

  '@csstools/css-tokenizer@3.0.4':
    resolution: {integrity: sha512-Vd/9EVDiu6PPJt9yAh6roZP6El1xHrdvIVGjyBsHR0RYwNHgL7FJPyIIW4fANJNG6FtyZfvlRPpFI4ZM/lubvw==}
    engines: {node: '>=18'}

  '@emnapi/core@1.4.3':
    resolution: {integrity: sha512-4m62DuCE07lw01soJwPiBGC0nAww0Q+RY70VZ+n49yDIO13yyinhbWCeNnaob0lakDtWQzSdtNWzJeOJt2ma+g==}

  '@emnapi/runtime@1.4.3':
    resolution: {integrity: sha512-pBPWdu6MLKROBX05wSNKcNb++m5Er+KQ9QkB+WVM+pW2Kx9hoSrVTnu3BdkI5eBLZoKu/J6mW/B6i6bJB2ytXQ==}

  '@emnapi/wasi-threads@1.0.2':
    resolution: {integrity: sha512-5n3nTJblwRi8LlXkJ9eBzu+kZR8Yxcc7ubakyQTFzPMtIhFpUBRbsnc2Dv88IZDIbCDlBiWrknhB4Lsz7mg6BA==}

  '@esbuild/aix-ppc64@0.25.5':
    resolution: {integrity: sha512-9o3TMmpmftaCMepOdA5k/yDw8SfInyzWWTjYTFCX3kPSDJMROQTb8jg+h9Cnwnmm1vOzvxN7gIfB5V2ewpjtGA==}
    engines: {node: '>=18'}
    cpu: [ppc64]
    os: [aix]

  '@esbuild/android-arm64@0.25.5':
    resolution: {integrity: sha512-VGzGhj4lJO+TVGV1v8ntCZWJktV7SGCs3Pn1GRWI1SBFtRALoomm8k5E9Pmwg3HOAal2VDc2F9+PM/rEY6oIDg==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [android]

  '@esbuild/android-arm@0.25.5':
    resolution: {integrity: sha512-AdJKSPeEHgi7/ZhuIPtcQKr5RQdo6OO2IL87JkianiMYMPbCtot9fxPbrMiBADOWWm3T2si9stAiVsGbTQFkbA==}
    engines: {node: '>=18'}
    cpu: [arm]
    os: [android]

  '@esbuild/android-x64@0.25.5':
    resolution: {integrity: sha512-D2GyJT1kjvO//drbRT3Hib9XPwQeWd9vZoBJn+bu/lVsOZ13cqNdDeqIF/xQ5/VmWvMduP6AmXvylO/PIc2isw==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [android]

  '@esbuild/darwin-arm64@0.25.5':
    resolution: {integrity: sha512-GtaBgammVvdF7aPIgH2jxMDdivezgFu6iKpmT+48+F8Hhg5J/sfnDieg0aeG/jfSvkYQU2/pceFPDKlqZzwnfQ==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [darwin]

  '@esbuild/darwin-x64@0.25.5':
    resolution: {integrity: sha512-1iT4FVL0dJ76/q1wd7XDsXrSW+oLoquptvh4CLR4kITDtqi2e/xwXwdCVH8hVHU43wgJdsq7Gxuzcs6Iq/7bxQ==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [darwin]

  '@esbuild/freebsd-arm64@0.25.5':
    resolution: {integrity: sha512-nk4tGP3JThz4La38Uy/gzyXtpkPW8zSAmoUhK9xKKXdBCzKODMc2adkB2+8om9BDYugz+uGV7sLmpTYzvmz6Sw==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [freebsd]

  '@esbuild/freebsd-x64@0.25.5':
    resolution: {integrity: sha512-PrikaNjiXdR2laW6OIjlbeuCPrPaAl0IwPIaRv+SMV8CiM8i2LqVUHFC1+8eORgWyY7yhQY+2U2fA55mBzReaw==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [freebsd]

  '@esbuild/linux-arm64@0.25.5':
    resolution: {integrity: sha512-Z9kfb1v6ZlGbWj8EJk9T6czVEjjq2ntSYLY2cw6pAZl4oKtfgQuS4HOq41M/BcoLPzrUbNd+R4BXFyH//nHxVg==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [linux]

  '@esbuild/linux-arm@0.25.5':
    resolution: {integrity: sha512-cPzojwW2okgh7ZlRpcBEtsX7WBuqbLrNXqLU89GxWbNt6uIg78ET82qifUy3W6OVww6ZWobWub5oqZOVtwolfw==}
    engines: {node: '>=18'}
    cpu: [arm]
    os: [linux]

  '@esbuild/linux-ia32@0.25.5':
    resolution: {integrity: sha512-sQ7l00M8bSv36GLV95BVAdhJ2QsIbCuCjh/uYrWiMQSUuV+LpXwIqhgJDcvMTj+VsQmqAHL2yYaasENvJ7CDKA==}
    engines: {node: '>=18'}
    cpu: [ia32]
    os: [linux]

  '@esbuild/linux-loong64@0.25.5':
    resolution: {integrity: sha512-0ur7ae16hDUC4OL5iEnDb0tZHDxYmuQyhKhsPBV8f99f6Z9KQM02g33f93rNH5A30agMS46u2HP6qTdEt6Q1kg==}
    engines: {node: '>=18'}
    cpu: [loong64]
    os: [linux]

  '@esbuild/linux-mips64el@0.25.5':
    resolution: {integrity: sha512-kB/66P1OsHO5zLz0i6X0RxlQ+3cu0mkxS3TKFvkb5lin6uwZ/ttOkP3Z8lfR9mJOBk14ZwZ9182SIIWFGNmqmg==}
    engines: {node: '>=18'}
    cpu: [mips64el]
    os: [linux]

  '@esbuild/linux-ppc64@0.25.5':
    resolution: {integrity: sha512-UZCmJ7r9X2fe2D6jBmkLBMQetXPXIsZjQJCjgwpVDz+YMcS6oFR27alkgGv3Oqkv07bxdvw7fyB71/olceJhkQ==}
    engines: {node: '>=18'}
    cpu: [ppc64]
    os: [linux]

  '@esbuild/linux-riscv64@0.25.5':
    resolution: {integrity: sha512-kTxwu4mLyeOlsVIFPfQo+fQJAV9mh24xL+y+Bm6ej067sYANjyEw1dNHmvoqxJUCMnkBdKpvOn0Ahql6+4VyeA==}
    engines: {node: '>=18'}
    cpu: [riscv64]
    os: [linux]

  '@esbuild/linux-s390x@0.25.5':
    resolution: {integrity: sha512-K2dSKTKfmdh78uJ3NcWFiqyRrimfdinS5ErLSn3vluHNeHVnBAFWC8a4X5N+7FgVE1EjXS1QDZbpqZBjfrqMTQ==}
    engines: {node: '>=18'}
    cpu: [s390x]
    os: [linux]

  '@esbuild/linux-x64@0.25.5':
    resolution: {integrity: sha512-uhj8N2obKTE6pSZ+aMUbqq+1nXxNjZIIjCjGLfsWvVpy7gKCOL6rsY1MhRh9zLtUtAI7vpgLMK6DxjO8Qm9lJw==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [linux]

  '@esbuild/netbsd-arm64@0.25.5':
    resolution: {integrity: sha512-pwHtMP9viAy1oHPvgxtOv+OkduK5ugofNTVDilIzBLpoWAM16r7b/mxBvfpuQDpRQFMfuVr5aLcn4yveGvBZvw==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [netbsd]

  '@esbuild/netbsd-x64@0.25.5':
    resolution: {integrity: sha512-WOb5fKrvVTRMfWFNCroYWWklbnXH0Q5rZppjq0vQIdlsQKuw6mdSihwSo4RV/YdQ5UCKKvBy7/0ZZYLBZKIbwQ==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [netbsd]

  '@esbuild/openbsd-arm64@0.25.5':
    resolution: {integrity: sha512-7A208+uQKgTxHd0G0uqZO8UjK2R0DDb4fDmERtARjSHWxqMTye4Erz4zZafx7Di9Cv+lNHYuncAkiGFySoD+Mw==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [openbsd]

  '@esbuild/openbsd-x64@0.25.5':
    resolution: {integrity: sha512-G4hE405ErTWraiZ8UiSoesH8DaCsMm0Cay4fsFWOOUcz8b8rC6uCvnagr+gnioEjWn0wC+o1/TAHt+It+MpIMg==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [openbsd]

  '@esbuild/sunos-x64@0.25.5':
    resolution: {integrity: sha512-l+azKShMy7FxzY0Rj4RCt5VD/q8mG/e+mDivgspo+yL8zW7qEwctQ6YqKX34DTEleFAvCIUviCFX1SDZRSyMQA==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [sunos]

  '@esbuild/win32-arm64@0.25.5':
    resolution: {integrity: sha512-O2S7SNZzdcFG7eFKgvwUEZ2VG9D/sn/eIiz8XRZ1Q/DO5a3s76Xv0mdBzVM5j5R639lXQmPmSo0iRpHqUUrsxw==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [win32]

  '@esbuild/win32-ia32@0.25.5':
    resolution: {integrity: sha512-onOJ02pqs9h1iMJ1PQphR+VZv8qBMQ77Klcsqv9CNW2w6yLqoURLcgERAIurY6QE63bbLuqgP9ATqajFLK5AMQ==}
    engines: {node: '>=18'}
    cpu: [ia32]
    os: [win32]

  '@esbuild/win32-x64@0.25.5':
    resolution: {integrity: sha512-TXv6YnJ8ZMVdX+SXWVBo/0p8LTcrUYngpWjvm91TMjjBQii7Oz11Lw5lbDV5Y0TzuhSJHwiH4hEtC1I42mMS0g==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [win32]

  '@eslint-community/eslint-utils@4.7.0':
    resolution: {integrity: sha512-dyybb3AcajC7uha6CvhdVRJqaKyn7w2YKqKyAN37NKYgZT36w+iRb0Dymmc5qEJ549c/S31cMMSFd75bteCpCw==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}
    peerDependencies:
      eslint: ^6.0.0 || ^7.0.0 || >=8.0.0

  '@eslint-community/regexpp@4.12.1':
    resolution: {integrity: sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==}
    engines: {node: ^12.0.0 || ^14.0.0 || >=16.0.0}

  '@eslint/config-array@0.21.0':
    resolution: {integrity: sha512-ENIdc4iLu0d93HeYirvKmrzshzofPw6VkZRKQGe9Nv46ZnWUzcF1xV01dcvEg/1wXUR61OmmlSfyeyO7EvjLxQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@eslint/config-helpers@0.3.0':
    resolution: {integrity: sha512-ViuymvFmcJi04qdZeDc2whTHryouGcDlaxPqarTD0ZE10ISpxGUVZGZDx4w01upyIynL3iu6IXH2bS1NhclQMw==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@eslint/core@0.14.0':
    resolution: {integrity: sha512-qIbV0/JZr7iSDjqAc60IqbLdsj9GDt16xQtWD+B78d/HAlvysGdZZ6rpJHGAc2T0FQx1X6thsSPdnoiGKdNtdg==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@eslint/core@0.15.1':
    resolution: {integrity: sha512-bkOp+iumZCCbt1K1CmWf0R9pM5yKpDv+ZXtvSyQpudrI9kuFLp+bM2WOPXImuD/ceQuaa8f5pj93Y7zyECIGNA==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@eslint/eslintrc@3.3.1':
    resolution: {integrity: sha512-gtF186CXhIl1p4pJNGZw8Yc6RlshoePRvE0X91oPGb3vZ8pM3qOS9W9NGPat9LziaBV7XrJWGylNQXkGcnM3IQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@eslint/js@9.30.1':
    resolution: {integrity: sha512-zXhuECFlyep42KZUhWjfvsmXGX39W8K8LFb8AWXM9gSV9dQB+MrJGLKvW6Zw0Ggnbpw0VHTtrhFXYe3Gym18jg==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@eslint/object-schema@2.1.6':
    resolution: {integrity: sha512-RBMg5FRL0I0gs51M/guSAj5/e14VQ4tpZnQNWwuDT66P14I43ItmPfIZRhO9fUVIPOAQXU47atlywZ/czoqFPA==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@eslint/plugin-kit@0.3.3':
    resolution: {integrity: sha512-1+WqvgNMhmlAambTvT3KPtCl/Ibr68VldY2XY40SL1CE0ZXiakFR/cbTspaF5HsnpDMvcYYoJHfl4980NBjGag==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@floating-ui/core@1.7.2':
    resolution: {integrity: sha512-wNB5ooIKHQc+Kui96jE/n69rHFWAVoxn5CAzL1Xdd8FG03cgY3MLO+GF9U3W737fYDSgPWA6MReKhBQBop6Pcw==}

  '@floating-ui/dom@1.7.2':
    resolution: {integrity: sha512-7cfaOQuCS27HD7DX+6ib2OrnW+b4ZBwDNnCcT0uTyidcmyWb03FnQqJybDBoCnpdxwBSfA94UAYlRCt7mV+TbA==}

  '@floating-ui/react-dom@2.1.4':
    resolution: {integrity: sha512-JbbpPhp38UmXDDAu60RJmbeme37Jbgsm7NrHGgzYYFKmblzRUh6Pa641dII6LsjwF4XlScDrde2UAzDo/b9KPw==}
    peerDependencies:
      react: '>=16.8.0'
      react-dom: '>=16.8.0'

  '@floating-ui/utils@0.2.10':
    resolution: {integrity: sha512-aGTxbpbg8/b5JfU1HXSrbH3wXZuLPJcNEcZQFMxLs3oSzgtVu6nFPkbbGGUvBcUjKV2YyB9Wxxabo+HEH9tcRQ==}

  '@hookform/resolvers@3.10.0':
    resolution: {integrity: sha512-79Dv+3mDF7i+2ajj7SkypSKHhl1cbln1OGavqrsF7p6mbUv11xpqpacPsGDCTRvCSjEEIez2ef1NveSVL3b0Ag==}
    peerDependencies:
      react-hook-form: ^7.0.0

  '@humanfs/core@0.19.1':
    resolution: {integrity: sha512-5DyQ4+1JEUzejeK1JGICcideyfUbGixgS9jNgex5nqkW+cY7WZhxBigmieN5Qnw9ZosSNVC9KQKyb+GUaGyKUA==}
    engines: {node: '>=18.18.0'}

  '@humanfs/node@0.16.6':
    resolution: {integrity: sha512-YuI2ZHQL78Q5HbhDiBA1X4LmYdXCKCMQIfw0pw7piHJwyREFebJUvrQN4cMssyES6x+vfUbx1CIpaQUKYdQZOw==}
    engines: {node: '>=18.18.0'}

  '@humanwhocodes/module-importer@1.0.1':
    resolution: {integrity: sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==}
    engines: {node: '>=12.22'}

  '@humanwhocodes/retry@0.3.1':
    resolution: {integrity: sha512-JBxkERygn7Bv/GbN5Rv8Ul6LVknS+5Bp6RgDC/O8gEBU/yeH5Ui5C/OlWrTb6qct7LjjfT6Re2NxB0ln0yYybA==}
    engines: {node: '>=18.18'}

  '@humanwhocodes/retry@0.4.3':
    resolution: {integrity: sha512-bV0Tgo9K4hfPCek+aMAn81RppFKv2ySDQeMoSZuvTASywNTnVJCArCZE2FWqpvIatKu7VMRLWlR1EazvVhDyhQ==}
    engines: {node: '>=18.18'}

  '@img/sharp-darwin-arm64@0.33.5':
    resolution: {integrity: sha512-UT4p+iz/2H4twwAoLCqfA9UH5pI6DggwKEGuaPy7nCVQ8ZsiY5PIcrRvD1DzuY3qYL07NtIQcWnBSY/heikIFQ==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [arm64]
    os: [darwin]

  '@img/sharp-darwin-x64@0.33.5':
    resolution: {integrity: sha512-fyHac4jIc1ANYGRDxtiqelIbdWkIuQaI84Mv45KvGRRxSAa7o7d1ZKAOBaYbnepLC1WqxfpimdeWfvqqSGwR2Q==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [x64]
    os: [darwin]

  '@img/sharp-libvips-darwin-arm64@1.0.4':
    resolution: {integrity: sha512-XblONe153h0O2zuFfTAbQYAX2JhYmDHeWikp1LM9Hul9gVPjFY427k6dFEcOL72O01QxQsWi761svJ/ev9xEDg==}
    cpu: [arm64]
    os: [darwin]

  '@img/sharp-libvips-darwin-x64@1.0.4':
    resolution: {integrity: sha512-xnGR8YuZYfJGmWPvmlunFaWJsb9T/AO2ykoP3Fz/0X5XV2aoYBPkX6xqCQvUTKKiLddarLaxpzNe+b1hjeWHAQ==}
    cpu: [x64]
    os: [darwin]

  '@img/sharp-libvips-linux-arm64@1.0.4':
    resolution: {integrity: sha512-9B+taZ8DlyyqzZQnoeIvDVR/2F4EbMepXMc/NdVbkzsJbzkUjhXv/70GQJ7tdLA4YJgNP25zukcxpX2/SueNrA==}
    cpu: [arm64]
    os: [linux]

  '@img/sharp-libvips-linux-arm@1.0.5':
    resolution: {integrity: sha512-gvcC4ACAOPRNATg/ov8/MnbxFDJqf/pDePbBnuBDcjsI8PssmjoKMAz4LtLaVi+OnSb5FK/yIOamqDwGmXW32g==}
    cpu: [arm]
    os: [linux]

  '@img/sharp-libvips-linux-s390x@1.0.4':
    resolution: {integrity: sha512-u7Wz6ntiSSgGSGcjZ55im6uvTrOxSIS8/dgoVMoiGE9I6JAfU50yH5BoDlYA1tcuGS7g/QNtetJnxA6QEsCVTA==}
    cpu: [s390x]
    os: [linux]

  '@img/sharp-libvips-linux-x64@1.0.4':
    resolution: {integrity: sha512-MmWmQ3iPFZr0Iev+BAgVMb3ZyC4KeFc3jFxnNbEPas60e1cIfevbtuyf9nDGIzOaW9PdnDciJm+wFFaTlj5xYw==}
    cpu: [x64]
    os: [linux]

  '@img/sharp-libvips-linuxmusl-arm64@1.0.4':
    resolution: {integrity: sha512-9Ti+BbTYDcsbp4wfYib8Ctm1ilkugkA/uscUn6UXK1ldpC1JjiXbLfFZtRlBhjPZ5o1NCLiDbg8fhUPKStHoTA==}
    cpu: [arm64]
    os: [linux]

  '@img/sharp-libvips-linuxmusl-x64@1.0.4':
    resolution: {integrity: sha512-viYN1KX9m+/hGkJtvYYp+CCLgnJXwiQB39damAO7WMdKWlIhmYTfHjwSbQeUK/20vY154mwezd9HflVFM1wVSw==}
    cpu: [x64]
    os: [linux]

  '@img/sharp-linux-arm64@0.33.5':
    resolution: {integrity: sha512-JMVv+AMRyGOHtO1RFBiJy/MBsgz0x4AWrT6QoEVVTyh1E39TrCUpTRI7mx9VksGX4awWASxqCYLCV4wBZHAYxA==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [arm64]
    os: [linux]

  '@img/sharp-linux-arm@0.33.5':
    resolution: {integrity: sha512-JTS1eldqZbJxjvKaAkxhZmBqPRGmxgu+qFKSInv8moZ2AmT5Yib3EQ1c6gp493HvrvV8QgdOXdyaIBrhvFhBMQ==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [arm]
    os: [linux]

  '@img/sharp-linux-s390x@0.33.5':
    resolution: {integrity: sha512-y/5PCd+mP4CA/sPDKl2961b+C9d+vPAveS33s6Z3zfASk2j5upL6fXVPZi7ztePZ5CuH+1kW8JtvxgbuXHRa4Q==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [s390x]
    os: [linux]

  '@img/sharp-linux-x64@0.33.5':
    resolution: {integrity: sha512-opC+Ok5pRNAzuvq1AG0ar+1owsu842/Ab+4qvU879ippJBHvyY5n2mxF1izXqkPYlGuP/M556uh53jRLJmzTWA==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [x64]
    os: [linux]

  '@img/sharp-linuxmusl-arm64@0.33.5':
    resolution: {integrity: sha512-XrHMZwGQGvJg2V/oRSUfSAfjfPxO+4DkiRh6p2AFjLQztWUuY/o8Mq0eMQVIY7HJ1CDQUJlxGGZRw1a5bqmd1g==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [arm64]
    os: [linux]

  '@img/sharp-linuxmusl-x64@0.33.5':
    resolution: {integrity: sha512-WT+d/cgqKkkKySYmqoZ8y3pxx7lx9vVejxW/W4DOFMYVSkErR+w7mf2u8m/y4+xHe7yY9DAXQMWQhpnMuFfScw==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [x64]
    os: [linux]

  '@img/sharp-wasm32@0.33.5':
    resolution: {integrity: sha512-ykUW4LVGaMcU9lu9thv85CbRMAwfeadCJHRsg2GmeRa/cJxsVY9Rbd57JcMxBkKHag5U/x7TSBpScF4U8ElVzg==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [wasm32]

  '@img/sharp-win32-ia32@0.33.5':
    resolution: {integrity: sha512-T36PblLaTwuVJ/zw/LaH0PdZkRz5rd3SmMHX8GSmR7vtNSP5Z6bQkExdSK7xGWyxLw4sUknBuugTelgw2faBbQ==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [ia32]
    os: [win32]

  '@img/sharp-win32-x64@0.33.5':
    resolution: {integrity: sha512-MpY/o8/8kj+EcnxwvrP4aTJSWw/aZ7JIGR4aBeZkZw5B7/Jn+tY9/VNwtcoGmdT7GfggGIU4kygOMSbYnOrAbg==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [x64]
    os: [win32]

  '@isaacs/cliui@8.0.2':
    resolution: {integrity: sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==}
    engines: {node: '>=12'}

  '@jridgewell/gen-mapping@0.3.12':
    resolution: {integrity: sha512-OuLGC46TjB5BbN1dH8JULVVZY4WTdkF7tV9Ys6wLL1rubZnCMstOhNHueU5bLCrnRuDhKPDM4g6sw4Bel5Gzqg==}

  '@jridgewell/resolve-uri@3.1.2':
    resolution: {integrity: sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/sourcemap-codec@1.5.4':
    resolution: {integrity: sha512-VT2+G1VQs/9oz078bLrYbecdZKs912zQlkelYpuf+SXF+QvZDYJlbx/LSx+meSAwdDFnF8FVXW92AVjjkVmgFw==}

  '@jridgewell/trace-mapping@0.3.29':
    resolution: {integrity: sha512-uw6guiW/gcAGPDhLmd77/6lW8QLeiV5RUTsAX46Db6oLhGaVj4lhnPwb184s1bkc8kdVg/+h988dro8GRDpmYQ==}

  '@napi-rs/wasm-runtime@0.2.11':
    resolution: {integrity: sha512-9DPkXtvHydrcOsopiYpUgPHpmj0HWZKMUnL2dZqpvC42lsratuBG06V5ipyno0fUek5VlFsNQ+AcFATSrJXgMA==}

  '@next/env@15.2.4':
    resolution: {integrity: sha512-+SFtMgoiYP3WoSswuNmxJOCwi06TdWE733D+WPjpXIe4LXGULwEaofiiAy6kbS0+XjM5xF5n3lKuBwN2SnqD9g==}

  '@next/eslint-plugin-next@15.3.4':
    resolution: {integrity: sha512-lBxYdj7TI8phbJcLSAqDt57nIcobEign5NYIKCiy0hXQhrUbTqLqOaSDi568U6vFg4hJfBdZYsG4iP/uKhCqgg==}

  '@next/swc-darwin-arm64@15.2.4':
    resolution: {integrity: sha512-1AnMfs655ipJEDC/FHkSr0r3lXBgpqKo4K1kiwfUf3iE68rDFXZ1TtHdMvf7D0hMItgDZ7Vuq3JgNMbt/+3bYw==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [darwin]

  '@next/swc-darwin-x64@15.2.4':
    resolution: {integrity: sha512-3qK2zb5EwCwxnO2HeO+TRqCubeI/NgCe+kL5dTJlPldV/uwCnUgC7VbEzgmxbfrkbjehL4H9BPztWOEtsoMwew==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [darwin]

  '@next/swc-linux-arm64-gnu@15.2.4':
    resolution: {integrity: sha512-HFN6GKUcrTWvem8AZN7tT95zPb0GUGv9v0d0iyuTb303vbXkkbHDp/DxufB04jNVD+IN9yHy7y/6Mqq0h0YVaQ==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [linux]

  '@next/swc-linux-arm64-musl@15.2.4':
    resolution: {integrity: sha512-Oioa0SORWLwi35/kVB8aCk5Uq+5/ZIumMK1kJV+jSdazFm2NzPDztsefzdmzzpx5oGCJ6FkUC7vkaUseNTStNA==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [linux]

  '@next/swc-linux-x64-gnu@15.2.4':
    resolution: {integrity: sha512-yb5WTRaHdkgOqFOZiu6rHV1fAEK0flVpaIN2HB6kxHVSy/dIajWbThS7qON3W9/SNOH2JWkVCyulgGYekMePuw==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [linux]

  '@next/swc-linux-x64-musl@15.2.4':
    resolution: {integrity: sha512-Dcdv/ix6srhkM25fgXiyOieFUkz+fOYkHlydWCtB0xMST6X9XYI3yPDKBZt1xuhOytONsIFJFB08xXYsxUwJLw==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [linux]

  '@next/swc-win32-arm64-msvc@15.2.4':
    resolution: {integrity: sha512-dW0i7eukvDxtIhCYkMrZNQfNicPDExt2jPb9AZPpL7cfyUo7QSNl1DjsHjmmKp6qNAqUESyT8YFl/Aw91cNJJg==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [win32]

  '@next/swc-win32-x64-msvc@15.2.4':
    resolution: {integrity: sha512-SbnWkJmkS7Xl3kre8SdMF6F/XDh1DTFEhp0jRTj/uB8iPKoU2bb2NDfcu+iifv1+mxQEd1g2vvSxcZbXSKyWiQ==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [win32]

  '@nodelib/fs.scandir@2.1.5':
    resolution: {integrity: sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==}
    engines: {node: '>= 8'}

  '@nodelib/fs.stat@2.0.5':
    resolution: {integrity: sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==}
    engines: {node: '>= 8'}

  '@nodelib/fs.walk@1.2.8':
    resolution: {integrity: sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==}
    engines: {node: '>= 8'}

  '@nolyfill/is-core-module@1.0.39':
    resolution: {integrity: sha512-nn5ozdjYQpUCZlWGuxcJY/KpxkWQs4DcbMCmKojjyrYDEAGy4Ce19NN4v5MduafTwJlbKc99UA8YhSVqq9yPZA==}
    engines: {node: '>=12.4.0'}

  '@pkgjs/parseargs@0.11.0':
    resolution: {integrity: sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==}
    engines: {node: '>=14'}

  '@playwright/test@1.53.2':
    resolution: {integrity: sha512-tEB2U5z74ebBeyfGNZ3Jfg29AnW+5HlWhvHtb/Mqco9pFdZU1ZLNdVb2UtB5CvmiilNr2ZfVH/qMmAROG/XTzw==}
    engines: {node: '>=18'}
    hasBin: true

  '@polka/url@1.0.0-next.29':
    resolution: {integrity: sha512-wwQAWhWSuHaag8c4q/KN/vCoeOJYshAIvMQwD4GpSb3OiZklFfvAgmj0VCBBImRpuF/aFgIRzllXlVX93Jevww==}

  '@radix-ui/number@1.1.0':
    resolution: {integrity: sha512-V3gRzhVNU1ldS5XhAPTom1fOIo4ccrjjJgmE+LI2h/WaFpHmx0MQApT+KZHnx8abG6Avtfcz4WoEciMnpFT3HQ==}

  '@radix-ui/primitive@1.1.1':
    resolution: {integrity: sha512-SJ31y+Q/zAyShtXJc8x83i9TYdbAfHZ++tUZnvjJJqFjzsdUnKsxPL6IEtBlxKkU7yzer//GQtZSV4GbldL3YA==}

  '@radix-ui/react-accordion@1.2.2':
    resolution: {integrity: sha512-b1oh54x4DMCdGsB4/7ahiSrViXxaBwRPotiZNnYXjLha9vfuURSAZErki6qjDoSIV0eXx5v57XnTGVtGwnfp2g==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-alert-dialog@1.1.4':
    resolution: {integrity: sha512-A6Kh23qZDLy3PSU4bh2UJZznOrUdHImIXqF8YtUa6CN73f8EOO9XlXSCd9IHyPvIquTaa/kwaSWzZTtUvgXVGw==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-arrow@1.1.1':
    resolution: {integrity: sha512-NaVpZfmv8SKeZbn4ijN2V3jlHA9ngBG16VnIIm22nUR0Yk8KUALyBxT3KYEUnNuch9sTE8UTsS3whzBgKOL30w==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-aspect-ratio@1.1.1':
    resolution: {integrity: sha512-kNU4FIpcFMBLkOUcgeIteH06/8JLBcYY6Le1iKenDGCYNYFX3TQqCZjzkOsz37h7r94/99GTb7YhEr98ZBJibw==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-avatar@1.1.2':
    resolution: {integrity: sha512-GaC7bXQZ5VgZvVvsJ5mu/AEbjYLnhhkoidOboC50Z6FFlLA03wG2ianUoH+zgDQ31/9gCF59bE4+2bBgTyMiig==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-checkbox@1.1.3':
    resolution: {integrity: sha512-HD7/ocp8f1B3e6OHygH0n7ZKjONkhciy1Nh0yuBgObqThc3oyx+vuMfFHKAknXRHHWVE9XvXStxJFyjUmB8PIw==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-collapsible@1.1.2':
    resolution: {integrity: sha512-PliMB63vxz7vggcyq0IxNYk8vGDrLXVWw4+W4B8YnwI1s18x7YZYqlG9PLX7XxAJUi0g2DxP4XKJMFHh/iVh9A==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-collection@1.1.1':
    resolution: {integrity: sha512-LwT3pSho9Dljg+wY2KN2mrrh6y3qELfftINERIzBUO9e0N+t0oMTyn3k9iv+ZqgrwGkRnLpNJrsMv9BZlt2yuA==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-compose-refs@1.1.1':
    resolution: {integrity: sha512-Y9VzoRDSJtgFMUCoiZBDVo084VQ5hfpXxVE+NgkdNsjiDBByiImMZKKhxMwCbdHvhlENG6a833CbFkOQvTricw==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-compose-refs@1.1.2':
    resolution: {integrity: sha512-z4eqJvfiNnFMHIIvXP3CY57y2WJs5g2v3X0zm9mEJkrkNv4rDxu+sg9Jh8EkXyeqBkB7SOcboo9dMVqhyrACIg==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-context-menu@2.2.4':
    resolution: {integrity: sha512-ap4wdGwK52rJxGkwukU1NrnEodsUFQIooANKu+ey7d6raQ2biTcEf8za1zr0mgFHieevRTB2nK4dJeN8pTAZGQ==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-context@1.1.1':
    resolution: {integrity: sha512-UASk9zi+crv9WteK/NU4PLvOoL3OuE6BWVKNF6hPRBtYBDXQ2u5iu3O59zUlJiTVvkyuycnqrztsHVJwcK9K+Q==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-dialog@1.1.4':
    resolution: {integrity: sha512-Ur7EV1IwQGCyaAuyDRiOLA5JIUZxELJljF+MbM/2NC0BYwfuRrbpS30BiQBJrVruscgUkieKkqXYDOoByaxIoA==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-direction@1.1.0':
    resolution: {integrity: sha512-BUuBvgThEiAXh2DWu93XsT+a3aWrGqolGlqqw5VU1kG7p/ZH2cuDlM1sRLNnY3QcBS69UIz2mcKhMxDsdewhjg==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-dismissable-layer@1.1.3':
    resolution: {integrity: sha512-onrWn/72lQoEucDmJnr8uczSNTujT0vJnA/X5+3AkChVPowr8n1yvIKIabhWyMQeMvvmdpsvcyDqx3X1LEXCPg==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-dropdown-menu@2.1.4':
    resolution: {integrity: sha512-iXU1Ab5ecM+yEepGAWK8ZhMyKX4ubFdCNtol4sT9D0OVErG9PNElfx3TQhjw7n7BC5nFVz68/5//clWy+8TXzA==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-focus-guards@1.1.1':
    resolution: {integrity: sha512-pSIwfrT1a6sIoDASCSpFwOasEwKTZWDw/iBdtnqKO7v6FeOzYJ7U53cPzYFVR3geGGXgVHaH+CdngrrAzqUGxg==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-focus-scope@1.1.1':
    resolution: {integrity: sha512-01omzJAYRxXdG2/he/+xy+c8a8gCydoQ1yOxnWNcRhrrBW5W+RQJ22EK1SaO8tb3WoUsuEw7mJjBozPzihDFjA==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-hover-card@1.1.4':
    resolution: {integrity: sha512-QSUUnRA3PQ2UhvoCv3eYvMnCAgGQW+sTu86QPuNb+ZMi+ZENd6UWpiXbcWDQ4AEaKF9KKpCHBeaJz9Rw6lRlaQ==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-id@1.1.0':
    resolution: {integrity: sha512-EJUrI8yYh7WOjNOqpoJaf1jlFIH2LvtgAl+YcFqNCa+4hj64ZXmPkAKOFs/ukjz3byN6bdb/AVUqHkI8/uWWMA==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-id@1.1.1':
    resolution: {integrity: sha512-kGkGegYIdQsOb4XjsfM97rXsiHaBwco+hFI66oO4s9LU+PLAC5oJ7khdOVFxkhsmlbpUqDAvXw11CluXP+jkHg==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-label@2.1.1':
    resolution: {integrity: sha512-UUw5E4e/2+4kFMH7+YxORXGWggtY6sM8WIwh5RZchhLuUg2H1hc98Py+pr8HMz6rdaYrK2t296ZEjYLOCO5uUw==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-menu@2.1.4':
    resolution: {integrity: sha512-BnOgVoL6YYdHAG6DtXONaR29Eq4nvbi8rutrV/xlr3RQCMMb3yqP85Qiw/3NReozrSW+4dfLkK+rc1hb4wPU/A==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-menubar@1.1.4':
    resolution: {integrity: sha512-+KMpi7VAZuB46+1LD7a30zb5IxyzLgC8m8j42gk3N4TUCcViNQdX8FhoH1HDvYiA8quuqcek4R4bYpPn/SY1GA==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-navigation-menu@1.2.3':
    resolution: {integrity: sha512-IQWAsQ7dsLIYDrn0WqPU+cdM7MONTv9nqrLVYoie3BPiabSfUVDe6Fr+oEt0Cofsr9ONDcDe9xhmJbL1Uq1yKg==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-popover@1.1.4':
    resolution: {integrity: sha512-aUACAkXx8LaFymDma+HQVji7WhvEhpFJ7+qPz17Nf4lLZqtreGOFRiNQWQmhzp7kEWg9cOyyQJpdIMUMPc/CPw==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-popper@1.2.1':
    resolution: {integrity: sha512-3kn5Me69L+jv82EKRuQCXdYyf1DqHwD2U/sxoNgBGCB7K9TRc3bQamQ+5EPM9EvyPdli0W41sROd+ZU1dTCztw==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-portal@1.1.3':
    resolution: {integrity: sha512-NciRqhXnGojhT93RPyDaMPfLH3ZSl4jjIFbZQ1b/vxvZEdHsBZ49wP9w8L3HzUQwep01LcWtkUvm0OVB5JAHTw==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-presence@1.1.2':
    resolution: {integrity: sha512-18TFr80t5EVgL9x1SwF/YGtfG+l0BS0PRAlCWBDoBEiDQjeKgnNZRVJp/oVBl24sr3Gbfwc/Qpj4OcWTQMsAEg==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-primitive@2.0.1':
    resolution: {integrity: sha512-sHCWTtxwNn3L3fH8qAfnF3WbUZycW93SM1j3NFDzXBiz8D6F5UTTy8G1+WFEaiCdvCVRJWj6N2R4Xq6HdiHmDg==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-primitive@2.1.3':
    resolution: {integrity: sha512-m9gTwRkhy2lvCPe6QJp4d3G1TYEUHn/FzJUtq9MjH46an1wJU+GdoGC5VLof8RX8Ft/DlpshApkhswDLZzHIcQ==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-progress@1.1.1':
    resolution: {integrity: sha512-6diOawA84f/eMxFHcWut0aE1C2kyE9dOyCTQOMRR2C/qPiXz/X0SaiA/RLbapQaXUCmy0/hLMf9meSccD1N0pA==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-radio-group@1.2.2':
    resolution: {integrity: sha512-E0MLLGfOP0l8P/NxgVzfXJ8w3Ch8cdO6UDzJfDChu4EJDy+/WdO5LqpdY8PYnCErkmZH3gZhDL1K7kQ41fAHuQ==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-roving-focus@1.1.1':
    resolution: {integrity: sha512-QE1RoxPGJ/Nm8Qmk0PxP8ojmoaS67i0s7hVssS7KuI2FQoc/uzVlZsqKfQvxPE6D8hICCPHJ4D88zNhT3OOmkw==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-scroll-area@1.2.2':
    resolution: {integrity: sha512-EFI1N/S3YxZEW/lJ/H1jY3njlvTd8tBmgKEn4GHi51+aMm94i6NmAJstsm5cu3yJwYqYc93gpCPm21FeAbFk6g==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-select@2.1.4':
    resolution: {integrity: sha512-pOkb2u8KgO47j/h7AylCj7dJsm69BXcjkrvTqMptFqsE2i0p8lHkfgneXKjAgPzBMivnoMyt8o4KiV4wYzDdyQ==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-separator@1.1.1':
    resolution: {integrity: sha512-RRiNRSrD8iUiXriq/Y5n4/3iE8HzqgLHsusUSg5jVpU2+3tqcUFPJXHDymwEypunc2sWxDUS3UC+rkZRlHedsw==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-slider@1.2.2':
    resolution: {integrity: sha512-sNlU06ii1/ZcbHf8I9En54ZPW0Vil/yPVg4vQMcFNjrIx51jsHbFl1HYHQvCIWJSr1q0ZmA+iIs/ZTv8h7HHSA==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-slot@1.1.1':
    resolution: {integrity: sha512-RApLLOcINYJA+dMVbOju7MYv1Mb2EBp2nH4HdDzXTSyaR5optlm6Otrz1euW3HbdOR8UmmFK06TD+A9frYWv+g==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-slot@1.2.3':
    resolution: {integrity: sha512-aeNmHnBxbi2St0au6VBVC7JXFlhLlOnvIIlePNniyUNAClzmtAUEY8/pBiK3iHjufOlwA+c20/8jngo7xcrg8A==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-switch@1.1.2':
    resolution: {integrity: sha512-zGukiWHjEdBCRyXvKR6iXAQG6qXm2esuAD6kDOi9Cn+1X6ev3ASo4+CsYaD6Fov9r/AQFekqnD/7+V0Cs6/98g==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-tabs@1.1.2':
    resolution: {integrity: sha512-9u/tQJMcC2aGq7KXpGivMm1mgq7oRJKXphDwdypPd/j21j/2znamPU8WkXgnhUaTrSFNIt8XhOyCAupg8/GbwQ==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-toast@1.2.4':
    resolution: {integrity: sha512-Sch9idFJHJTMH9YNpxxESqABcAFweJG4tKv+0zo0m5XBvUSL8FM5xKcJLFLXononpePs8IclyX1KieL5SDUNgA==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-toggle-group@1.1.1':
    resolution: {integrity: sha512-OgDLZEA30Ylyz8YSXvnGqIHtERqnUt1KUYTKdw/y8u7Ci6zGiJfXc02jahmcSNK3YcErqioj/9flWC9S1ihfwg==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-toggle@1.1.1':
    resolution: {integrity: sha512-i77tcgObYr743IonC1hrsnnPmszDRn8p+EGUsUt+5a/JFn28fxaM88Py6V2mc8J5kELMWishI0rLnuGLFD/nnQ==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-tooltip@1.1.6':
    resolution: {integrity: sha512-TLB5D8QLExS1uDn7+wH/bjEmRurNMTzNrtq7IjaS4kjion9NtzsTGkvR5+i7yc9q01Pi2KMM2cN3f8UG4IvvXA==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-use-callback-ref@1.1.0':
    resolution: {integrity: sha512-CasTfvsy+frcFkbXtSJ2Zu9JHpN8TYKxkgJGWbjiZhFivxaeW7rMeZt7QELGVLaYVfFMsKHjb7Ak0nMEe+2Vfw==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-use-controllable-state@1.1.0':
    resolution: {integrity: sha512-MtfMVJiSr2NjzS0Aa90NPTnvTSg6C/JLCV7ma0W6+OMV78vd8OyRpID+Ng9LxzsPbLeuBnWBA1Nq30AtBIDChw==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-use-escape-keydown@1.1.0':
    resolution: {integrity: sha512-L7vwWlR1kTTQ3oh7g1O0CBF3YCyyTj8NmhLR+phShpyA50HCfBFKVJTpshm9PzLiKmehsrQzTYTpX9HvmC9rhw==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-use-layout-effect@1.1.0':
    resolution: {integrity: sha512-+FPE0rOdziWSrH9athwI1R0HDVbWlEhd+FR+aSDk4uWGmSJ9Z54sdZVDQPZAinJhJXwfT+qnj969mCsT2gfm5w==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-use-layout-effect@1.1.1':
    resolution: {integrity: sha512-RbJRS4UWQFkzHTTwVymMTUv8EqYhOp8dOOviLj2ugtTiXRaRQS7GLGxZTLL1jWhMeoSCf5zmcZkqTl9IiYfXcQ==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-use-previous@1.1.0':
    resolution: {integrity: sha512-Z/e78qg2YFnnXcW88A4JmTtm4ADckLno6F7OXotmkQfeuCVaKuYzqAATPhVzl3delXE7CxIV8shofPn3jPc5Og==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-use-rect@1.1.0':
    resolution: {integrity: sha512-0Fmkebhr6PiseyZlYAOtLS+nb7jLmpqTrJyv61Pe68MKYW6OWdRE2kI70TaYY27u7H0lajqM3hSMMLFq18Z7nQ==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-use-size@1.1.0':
    resolution: {integrity: sha512-XW3/vWuIXHa+2Uwcc2ABSfcCledmXhhQPlGbfcRXbiUQI5Icjcg19BGCZVKKInYbvUCut/ufbbLLPFC5cbb1hw==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-visually-hidden@1.1.1':
    resolution: {integrity: sha512-vVfA2IZ9q/J+gEamvj761Oq1FpWgCDaNOOIfbPVp2MVPLEomUr5+Vf7kJGwQ24YxZSlQVar7Bes8kyTo5Dshpg==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/rect@1.1.0':
    resolution: {integrity: sha512-A9+lCBZoaMJlVKcRBz2YByCG+Cp2t6nAnMnNba+XiWxnj6r4JUFqfsgwocMBZU9LPtdxC6wB56ySYpc7LQIoJg==}

  '@rolldown/pluginutils@1.0.0-beta.19':
    resolution: {integrity: sha512-3FL3mnMbPu0muGOCaKAhhFEYmqv9eTfPSJRJmANrCwtgK8VuxpsZDGK+m0LYAGoyO8+0j5uRe4PeyPDK1yA/hA==}

  '@rollup/rollup-android-arm-eabi@4.44.1':
    resolution: {integrity: sha512-JAcBr1+fgqx20m7Fwe1DxPUl/hPkee6jA6Pl7n1v2EFiktAHenTaXl5aIFjUIEsfn9w3HE4gK1lEgNGMzBDs1w==}
    cpu: [arm]
    os: [android]

  '@rollup/rollup-android-arm64@4.44.1':
    resolution: {integrity: sha512-RurZetXqTu4p+G0ChbnkwBuAtwAbIwJkycw1n6GvlGlBuS4u5qlr5opix8cBAYFJgaY05TWtM+LaoFggUmbZEQ==}
    cpu: [arm64]
    os: [android]

  '@rollup/rollup-darwin-arm64@4.44.1':
    resolution: {integrity: sha512-fM/xPesi7g2M7chk37LOnmnSTHLG/v2ggWqKj3CCA1rMA4mm5KVBT1fNoswbo1JhPuNNZrVwpTvlCVggv8A2zg==}
    cpu: [arm64]
    os: [darwin]

  '@rollup/rollup-darwin-x64@4.44.1':
    resolution: {integrity: sha512-gDnWk57urJrkrHQ2WVx9TSVTH7lSlU7E3AFqiko+bgjlh78aJ88/3nycMax52VIVjIm3ObXnDL2H00e/xzoipw==}
    cpu: [x64]
    os: [darwin]

  '@rollup/rollup-freebsd-arm64@4.44.1':
    resolution: {integrity: sha512-wnFQmJ/zPThM5zEGcnDcCJeYJgtSLjh1d//WuHzhf6zT3Md1BvvhJnWoy+HECKu2bMxaIcfWiu3bJgx6z4g2XA==}
    cpu: [arm64]
    os: [freebsd]

  '@rollup/rollup-freebsd-x64@4.44.1':
    resolution: {integrity: sha512-uBmIxoJ4493YATvU2c0upGz87f99e3wop7TJgOA/bXMFd2SvKCI7xkxY/5k50bv7J6dw1SXT4MQBQSLn8Bb/Uw==}
    cpu: [x64]
    os: [freebsd]

  '@rollup/rollup-linux-arm-gnueabihf@4.44.1':
    resolution: {integrity: sha512-n0edDmSHlXFhrlmTK7XBuwKlG5MbS7yleS1cQ9nn4kIeW+dJH+ExqNgQ0RrFRew8Y+0V/x6C5IjsHrJmiHtkxQ==}
    cpu: [arm]
    os: [linux]

  '@rollup/rollup-linux-arm-musleabihf@4.44.1':
    resolution: {integrity: sha512-8WVUPy3FtAsKSpyk21kV52HCxB+me6YkbkFHATzC2Yd3yuqHwy2lbFL4alJOLXKljoRw08Zk8/xEj89cLQ/4Nw==}
    cpu: [arm]
    os: [linux]

  '@rollup/rollup-linux-arm64-gnu@4.44.1':
    resolution: {integrity: sha512-yuktAOaeOgorWDeFJggjuCkMGeITfqvPgkIXhDqsfKX8J3jGyxdDZgBV/2kj/2DyPaLiX6bPdjJDTu9RB8lUPQ==}
    cpu: [arm64]
    os: [linux]

  '@rollup/rollup-linux-arm64-musl@4.44.1':
    resolution: {integrity: sha512-W+GBM4ifET1Plw8pdVaecwUgxmiH23CfAUj32u8knq0JPFyK4weRy6H7ooxYFD19YxBulL0Ktsflg5XS7+7u9g==}
    cpu: [arm64]
    os: [linux]

  '@rollup/rollup-linux-loongarch64-gnu@4.44.1':
    resolution: {integrity: sha512-1zqnUEMWp9WrGVuVak6jWTl4fEtrVKfZY7CvcBmUUpxAJ7WcSowPSAWIKa/0o5mBL/Ij50SIf9tuirGx63Ovew==}
    cpu: [loong64]
    os: [linux]

  '@rollup/rollup-linux-powerpc64le-gnu@4.44.1':
    resolution: {integrity: sha512-Rl3JKaRu0LHIx7ExBAAnf0JcOQetQffaw34T8vLlg9b1IhzcBgaIdnvEbbsZq9uZp3uAH+JkHd20Nwn0h9zPjA==}
    cpu: [ppc64]
    os: [linux]

  '@rollup/rollup-linux-riscv64-gnu@4.44.1':
    resolution: {integrity: sha512-j5akelU3snyL6K3N/iX7otLBIl347fGwmd95U5gS/7z6T4ftK288jKq3A5lcFKcx7wwzb5rgNvAg3ZbV4BqUSw==}
    cpu: [riscv64]
    os: [linux]

  '@rollup/rollup-linux-riscv64-musl@4.44.1':
    resolution: {integrity: sha512-ppn5llVGgrZw7yxbIm8TTvtj1EoPgYUAbfw0uDjIOzzoqlZlZrLJ/KuiE7uf5EpTpCTrNt1EdtzF0naMm0wGYg==}
    cpu: [riscv64]
    os: [linux]

  '@rollup/rollup-linux-s390x-gnu@4.44.1':
    resolution: {integrity: sha512-Hu6hEdix0oxtUma99jSP7xbvjkUM/ycke/AQQ4EC5g7jNRLLIwjcNwaUy95ZKBJJwg1ZowsclNnjYqzN4zwkAw==}
    cpu: [s390x]
    os: [linux]

  '@rollup/rollup-linux-x64-gnu@4.44.1':
    resolution: {integrity: sha512-EtnsrmZGomz9WxK1bR5079zee3+7a+AdFlghyd6VbAjgRJDbTANJ9dcPIPAi76uG05micpEL+gPGmAKYTschQw==}
    cpu: [x64]
    os: [linux]

  '@rollup/rollup-linux-x64-musl@4.44.1':
    resolution: {integrity: sha512-iAS4p+J1az6Usn0f8xhgL4PaU878KEtutP4hqw52I4IO6AGoyOkHCxcc4bqufv1tQLdDWFx8lR9YlwxKuv3/3g==}
    cpu: [x64]
    os: [linux]

  '@rollup/rollup-win32-arm64-msvc@4.44.1':
    resolution: {integrity: sha512-NtSJVKcXwcqozOl+FwI41OH3OApDyLk3kqTJgx8+gp6On9ZEt5mYhIsKNPGuaZr3p9T6NWPKGU/03Vw4CNU9qg==}
    cpu: [arm64]
    os: [win32]

  '@rollup/rollup-win32-ia32-msvc@4.44.1':
    resolution: {integrity: sha512-JYA3qvCOLXSsnTR3oiyGws1Dm0YTuxAAeaYGVlGpUsHqloPcFjPg+X0Fj2qODGLNwQOAcCiQmHub/V007kiH5A==}
    cpu: [ia32]
    os: [win32]

  '@rollup/rollup-win32-x64-msvc@4.44.1':
    resolution: {integrity: sha512-J8o22LuF0kTe7m+8PvW9wk3/bRq5+mRo5Dqo6+vXb7otCm3TPhYOJqOaQtGU9YMWQSL3krMnoOxMr0+9E6F3Ug==}
    cpu: [x64]
    os: [win32]

  '@rtsao/scc@1.1.0':
    resolution: {integrity: sha512-zt6OdqaDoOnJ1ZYsCYGt9YmWzDXl4vQdKTyJev62gFhRGKdx7mcT54V9KIjg+d2wi9EXsPvAPKe7i7WjfVWB8g==}

  '@rushstack/eslint-patch@1.12.0':
    resolution: {integrity: sha512-5EwMtOqvJMMa3HbmxLlF74e+3/HhwBTMcvt3nqVJgGCozO6hzIPOBlwm8mGVNR9SN2IJpxSnlxczyDjcn7qIyw==}

  '@swc/counter@0.1.3':
    resolution: {integrity: sha512-e2BR4lsJkkRlKZ/qCHPw9ZaSxc0MVUd7gtbtaB7aMvHeJVYe8sOB8DBZkP2DtISHGSku9sCK6T6cnY0CtXrOCQ==}

  '@swc/helpers@0.5.15':
    resolution: {integrity: sha512-JQ5TuMi45Owi4/BIMAJBoSQoOJu12oOk/gADqlcUL9JEdHB8vyjUSsxqeNXnmXHjYKMi2WcYtezGEEhqUI/E2g==}

  '@testing-library/dom@10.4.0':
    resolution: {integrity: sha512-pemlzrSESWbdAloYml3bAJMEfNh1Z7EduzqPKprCH5S341frlpYnUEW0H72dLxa6IsYr+mPno20GiSm+h9dEdQ==}
    engines: {node: '>=18'}

  '@testing-library/jest-dom@6.6.3':
    resolution: {integrity: sha512-IteBhl4XqYNkM54f4ejhLRJiZNqcSCoXUOG2CPK7qbD322KjQozM4kHQOfkG2oln9b9HTYqs+Sae8vBATubxxA==}
    engines: {node: '>=14', npm: '>=6', yarn: '>=1'}

  '@testing-library/react@16.3.0':
    resolution: {integrity: sha512-kFSyxiEDwv1WLl2fgsq6pPBbw5aWKrsY2/noi1Id0TK0UParSF62oFQFGHXIyaG4pp2tEub/Zlel+fjjZILDsw==}
    engines: {node: '>=18'}
    peerDependencies:
      '@testing-library/dom': ^10.0.0
      '@types/react': ^18.0.0 || ^19.0.0
      '@types/react-dom': ^18.0.0 || ^19.0.0
      react: ^18.0.0 || ^19.0.0
      react-dom: ^18.0.0 || ^19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@testing-library/user-event@14.6.1':
    resolution: {integrity: sha512-vq7fv0rnt+QTXgPxr5Hjc210p6YKq2kmdziLgnsZGgLJ9e6VAShx1pACLuRjd/AS/sr7phAR58OIIpf0LlmQNw==}
    engines: {node: '>=12', npm: '>=6'}
    peerDependencies:
      '@testing-library/dom': '>=7.21.4'

  '@tybys/wasm-util@0.9.0':
    resolution: {integrity: sha512-6+7nlbMVX/PVDCwaIQ8nTOPveOcFLSt8GcXdx8hD0bt39uWxYT88uXzqTd4fTvqta7oeUJqudepapKNt2DYJFw==}

  '@types/aria-query@5.0.4':
    resolution: {integrity: sha512-rfT93uj5s0PRL7EzccGMs3brplhcrghnDoV26NqKhCAS1hVo+WdNsPvE/yb6ilfr5hi2MEk6d5EWJTKdxg8jVw==}

  '@types/babel__core@7.20.5':
    resolution: {integrity: sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==}

  '@types/babel__generator@7.27.0':
    resolution: {integrity: sha512-ufFd2Xi92OAVPYsy+P4n7/U7e68fex0+Ee8gSG9KX7eo084CWiQ4sdxktvdl0bOPupXtVJPY19zk6EwWqUQ8lg==}

  '@types/babel__template@7.4.4':
    resolution: {integrity: sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==}

  '@types/babel__traverse@7.20.7':
    resolution: {integrity: sha512-dkO5fhS7+/oos4ciWxyEyjWe48zmG6wbCheo/G2ZnHx4fs3EU6YC6UM8rk56gAjNJ9P3MTH2jo5jb92/K6wbng==}

  '@types/chai@5.2.2':
    resolution: {integrity: sha512-8kB30R7Hwqf40JPiKhVzodJs2Qc1ZJ5zuT3uzw5Hq/dhNCl3G3l83jfpdI1e20BP348+fV7VIL/+FxaXkqBmWg==}

  '@types/codemirror@5.60.16':
    resolution: {integrity: sha512-V/yHdamffSS075jit+fDxaOAmdP2liok8NSNJnAZfDJErzOheuygHZEhAJrfmk5TEyM32MhkZjwo/idX791yxw==}

  '@types/d3-array@3.2.1':
    resolution: {integrity: sha512-Y2Jn2idRrLzUfAKV2LyRImR+y4oa2AntrgID95SHJxuMUrkNXmanDSed71sRNZysveJVt1hLLemQZIady0FpEg==}

  '@types/d3-color@3.1.3':
    resolution: {integrity: sha512-iO90scth9WAbmgv7ogoq57O9YpKmFBbmoEoCHDB2xMBY0+/KVrqAaCDyCE16dUspeOvIxFFRI+0sEtqDqy2b4A==}

  '@types/d3-ease@3.0.2':
    resolution: {integrity: sha512-NcV1JjO5oDzoK26oMzbILE6HW7uVXOHLQvHshBUW4UMdZGfiY6v5BeQwh9a9tCzv+CeefZQHJt5SRgK154RtiA==}

  '@types/d3-interpolate@3.0.4':
    resolution: {integrity: sha512-mgLPETlrpVV1YRJIglr4Ez47g7Yxjl1lj7YKsiMCb27VJH9W8NVM6Bb9d8kkpG/uAQS5AmbA48q2IAolKKo1MA==}

  '@types/d3-path@3.1.1':
    resolution: {integrity: sha512-VMZBYyQvbGmWyWVea0EHs/BwLgxc+MKi1zLDCONksozI4YJMcTt8ZEuIR4Sb1MMTE8MMW49v0IwI5+b7RmfWlg==}

  '@types/d3-scale@4.0.9':
    resolution: {integrity: sha512-dLmtwB8zkAeO/juAMfnV+sItKjlsw2lKdZVVy6LRr0cBmegxSABiLEpGVmSJJ8O08i4+sGR6qQtb6WtuwJdvVw==}

  '@types/d3-shape@3.1.7':
    resolution: {integrity: sha512-VLvUQ33C+3J+8p+Daf+nYSOsjB4GXp19/S/aGo60m9h1v6XaxjiT82lKVWJCfzhtuZ3yD7i/TPeC/fuKLLOSmg==}

  '@types/d3-time@3.0.4':
    resolution: {integrity: sha512-yuzZug1nkAAaBlBBikKZTgzCeA+k1uy4ZFwWANOfKw5z5LRhV0gNA7gNkKm7HoK+HRN0wX3EkxGk0fpbWhmB7g==}

  '@types/d3-timer@3.0.2':
    resolution: {integrity: sha512-Ps3T8E8dZDam6fUyNiMkekK3XUsaUEik+idO9/YjPtfj2qruF8tFBXS7XhtE4iIXBLxhmLjP3SXpLhVf21I9Lw==}

  '@types/deep-eql@4.0.2':
    resolution: {integrity: sha512-c9h9dVVMigMPc4bwTvC5dxqtqJZwQPePsWjPlpSOnojbor6pGqdk541lfA7AqFQr5pB1BRdq0juY9db81BwyFw==}

  '@types/estree@1.0.8':
    resolution: {integrity: sha512-dWHzHa2WqEXI/O1E9OjrocMTKJl2mSrEolh1Iomrv6U+JuNwaHXsXx9bLu5gG7BUWFIN0skIQJQ/L1rIex4X6w==}

  '@types/json-schema@7.0.15':
    resolution: {integrity: sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==}

  '@types/json5@0.0.29':
    resolution: {integrity: sha512-dRLjCWHYg4oaA77cxO64oO+7JwCwnIzkZPdrrC71jQmQtlhM556pwKo5bUzqvZndkVbeFLIIi+9TC40JNF5hNQ==}

  '@types/marked@4.3.2':
    resolution: {integrity: sha512-a79Yc3TOk6dGdituy8hmTTJXjOkZ7zsFYV10L337ttq/rec8lRMDBpV7fL3uLx6TgbFCa5DU/h8FmIBQPSbU0w==}

  '@types/node@22.16.0':
    resolution: {integrity: sha512-B2egV9wALML1JCpv3VQoQ+yesQKAmNMBIAY7OteVrikcOcAkWm+dGL6qpeCktPjAv6N1JLnhbNiqS35UpFyBsQ==}

  '@types/react-dom@19.1.6':
    resolution: {integrity: sha512-4hOiT/dwO8Ko0gV1m/TJZYk3y0KBnY9vzDh7W+DH17b2HFSOGgdj33dhihPeuy3l0q23+4e+hoXHV6hCC4dCXw==}
    peerDependencies:
      '@types/react': ^19.0.0

  '@types/react@19.1.8':
    resolution: {integrity: sha512-AwAfQ2Wa5bCx9WP8nZL2uMZWod7J7/JSplxbTmBQ5ms6QpqNYm672H0Vu9ZVKVngQ+ii4R/byguVEUZQyeg44g==}

  '@types/tern@0.23.9':
    resolution: {integrity: sha512-ypzHFE/wBzh+BlH6rrBgS5I/Z7RD21pGhZ2rltb/+ZrVM1awdZwjx7hE5XfuYgHWk9uvV5HLZN3SloevCAp3Bw==}

  '@typescript-eslint/eslint-plugin@8.35.1':
    resolution: {integrity: sha512-9XNTlo7P7RJxbVeICaIIIEipqxLKguyh+3UbXuT2XQuFp6d8VOeDEGuz5IiX0dgZo8CiI6aOFLg4e8cF71SFVg==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      '@typescript-eslint/parser': ^8.35.1
      eslint: ^8.57.0 || ^9.0.0
      typescript: '>=4.8.4 <5.9.0'

  '@typescript-eslint/parser@8.35.1':
    resolution: {integrity: sha512-3MyiDfrfLeK06bi/g9DqJxP5pV74LNv4rFTyvGDmT3x2p1yp1lOd+qYZfiRPIOf/oON+WRZR5wxxuF85qOar+w==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      eslint: ^8.57.0 || ^9.0.0
      typescript: '>=4.8.4 <5.9.0'

  '@typescript-eslint/project-service@8.35.1':
    resolution: {integrity: sha512-VYxn/5LOpVxADAuP3NrnxxHYfzVtQzLKeldIhDhzC8UHaiQvYlXvKuVho1qLduFbJjjy5U5bkGwa3rUGUb1Q6Q==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      typescript: '>=4.8.4 <5.9.0'

  '@typescript-eslint/scope-manager@8.35.1':
    resolution: {integrity: sha512-s/Bpd4i7ht2934nG+UoSPlYXd08KYz3bmjLEb7Ye1UVob0d1ENiT3lY8bsCmik4RqfSbPw9xJJHbugpPpP5JUg==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@typescript-eslint/tsconfig-utils@8.35.1':
    resolution: {integrity: sha512-K5/U9VmT9dTHoNowWZpz+/TObS3xqC5h0xAIjXPw+MNcKV9qg6eSatEnmeAwkjHijhACH0/N7bkhKvbt1+DXWQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      typescript: '>=4.8.4 <5.9.0'

  '@typescript-eslint/type-utils@8.35.1':
    resolution: {integrity: sha512-HOrUBlfVRz5W2LIKpXzZoy6VTZzMu2n8q9C2V/cFngIC5U1nStJgv0tMV4sZPzdf4wQm9/ToWUFPMN9Vq9VJQQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      eslint: ^8.57.0 || ^9.0.0
      typescript: '>=4.8.4 <5.9.0'

  '@typescript-eslint/types@8.35.1':
    resolution: {integrity: sha512-q/O04vVnKHfrrhNAscndAn1tuQhIkwqnaW+eu5waD5IPts2eX1dgJxgqcPx5BX109/qAz7IG6VrEPTOYKCNfRQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@typescript-eslint/typescript-estree@8.35.1':
    resolution: {integrity: sha512-Vvpuvj4tBxIka7cPs6Y1uvM7gJgdF5Uu9F+mBJBPY4MhvjrjWGK4H0lVgLJd/8PWZ23FTqsaJaLEkBCFUk8Y9g==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      typescript: '>=4.8.4 <5.9.0'

  '@typescript-eslint/utils@8.35.1':
    resolution: {integrity: sha512-lhnwatFmOFcazAsUm3ZnZFpXSxiwoa1Lj50HphnDe1Et01NF4+hrdXONSUHIcbVu2eFb1bAf+5yjXkGVkXBKAQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      eslint: ^8.57.0 || ^9.0.0
      typescript: '>=4.8.4 <5.9.0'

  '@typescript-eslint/visitor-keys@8.35.1':
    resolution: {integrity: sha512-VRwixir4zBWCSTP/ljEo091lbpypz57PoeAQ9imjG+vbeof9LplljsL1mos4ccG6H9IjfrVGM359RozUnuFhpw==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@unrs/resolver-binding-android-arm-eabi@1.10.1':
    resolution: {integrity: sha512-zohDKXT1Ok0yhbVGff4YAg9HUs5ietG5GpvJBPFSApZnGe7uf2cd26DRhKZbn0Be6xHUZrSzP+RAgMmzyc71EA==}
    cpu: [arm]
    os: [android]

  '@unrs/resolver-binding-android-arm64@1.10.1':
    resolution: {integrity: sha512-tAN6k5UrTd4nicpA7s2PbjR/jagpDzAmvXFjbpTazUe5FRsFxVcBlS1F5Lzp5jtWU6bdiqRhSvd4X8rdpCffeA==}
    cpu: [arm64]
    os: [android]

  '@unrs/resolver-binding-darwin-arm64@1.10.1':
    resolution: {integrity: sha512-+FCsag8WkauI4dQ50XumCXdfvDCZEpMUnvZDsKMxfOisnEklpDFXc6ThY0WqybBYZbiwR5tWcFaZmI0G6b4vrg==}
    cpu: [arm64]
    os: [darwin]

  '@unrs/resolver-binding-darwin-x64@1.10.1':
    resolution: {integrity: sha512-qYKGGm5wk71ONcXTMZ0+J11qQeOAPz3nw6VtqrBUUELRyXFyvK8cHhHsLBFR4GHnilc2pgY1HTB2TvdW9wO26Q==}
    cpu: [x64]
    os: [darwin]

  '@unrs/resolver-binding-freebsd-x64@1.10.1':
    resolution: {integrity: sha512-hOHMAhbvIQ63gkpgeNsXcWPSyvXH7ZEyeg254hY0Lp/hX8NdW+FsUWq73g9946Pc/BrcVI/I3C1cmZ4RCX9bNw==}
    cpu: [x64]
    os: [freebsd]

  '@unrs/resolver-binding-linux-arm-gnueabihf@1.10.1':
    resolution: {integrity: sha512-6ds7+zzHJgTDmpe0gmFcOTvSUhG5oZukkt+cCsSb3k4Uiz2yEQB4iCRITX2hBwSW+p8gAieAfecITjgqCkswXw==}
    cpu: [arm]
    os: [linux]

  '@unrs/resolver-binding-linux-arm-musleabihf@1.10.1':
    resolution: {integrity: sha512-P7A0G2/jW00diNJyFeq4W9/nxovD62Ay8CMP4UK9OymC7qO7rG1a8Upad68/bdfpIOn7KSp7Aj/6lEW3yyznAA==}
    cpu: [arm]
    os: [linux]

  '@unrs/resolver-binding-linux-arm64-gnu@1.10.1':
    resolution: {integrity: sha512-Cg6xzdkrpltcTPO4At+A79zkC7gPDQIgosJmVV8M104ImB6KZi1MrNXgDYIAfkhUYjPzjNooEDFRAwwPadS7ZA==}
    cpu: [arm64]
    os: [linux]

  '@unrs/resolver-binding-linux-arm64-musl@1.10.1':
    resolution: {integrity: sha512-aNeg99bVkXa4lt+oZbjNRPC8ZpjJTKxijg/wILrJdzNyAymO2UC/HUK1UfDjt6T7U5p/mK24T3CYOi3/+YEQSA==}
    cpu: [arm64]
    os: [linux]

  '@unrs/resolver-binding-linux-ppc64-gnu@1.10.1':
    resolution: {integrity: sha512-ylz5ojeXrkPrtnzVhpCO+YegG63/aKhkoTlY8PfMfBfLaUG8v6m6iqrL7sBUKdVBgOB4kSTUPt9efQdA/Y3Z/w==}
    cpu: [ppc64]
    os: [linux]

  '@unrs/resolver-binding-linux-riscv64-gnu@1.10.1':
    resolution: {integrity: sha512-xcWyhmJfXXOxK7lvE4+rLwBq+on83svlc0AIypfe6x4sMJR+S4oD7n9OynaQShfj2SufPw2KJAotnsNb+4nN2g==}
    cpu: [riscv64]
    os: [linux]

  '@unrs/resolver-binding-linux-riscv64-musl@1.10.1':
    resolution: {integrity: sha512-mW9JZAdOCyorgi1eLJr4gX7xS67WNG9XNPYj5P8VuttK72XNsmdw9yhOO4tDANMgiLXFiSFaiL1gEpoNtRPw/A==}
    cpu: [riscv64]
    os: [linux]

  '@unrs/resolver-binding-linux-s390x-gnu@1.10.1':
    resolution: {integrity: sha512-NZGKhBy6xkJ0k09cWNZz4DnhBcGlhDd3W+j7EYoNvf5TSwj2K6kbmfqTWITEgkvjsMUjm1wsrc4IJaH6VtjyHQ==}
    cpu: [s390x]
    os: [linux]

  '@unrs/resolver-binding-linux-x64-gnu@1.10.1':
    resolution: {integrity: sha512-VsjgckJ0gNMw7p0d8In6uPYr+s0p16yrT2rvG4v2jUpEMYkpnfnCiALa9SWshbvlGjKQ98Q2x19agm3iFk8w8Q==}
    cpu: [x64]
    os: [linux]

  '@unrs/resolver-binding-linux-x64-musl@1.10.1':
    resolution: {integrity: sha512-idMnajMeejnaFi0Mx9UTLSYFDAOTfAEP7VjXNgxKApso3Eu2Njs0p2V95nNIyFi4oQVGFmIuCkoznAXtF/Zbmw==}
    cpu: [x64]
    os: [linux]

  '@unrs/resolver-binding-wasm32-wasi@1.10.1':
    resolution: {integrity: sha512-7jyhjIRNFjzlr8x5pth6Oi9hv3a7ubcVYm2GBFinkBQKcFhw4nIs5BtauSNtDW1dPIGrxF0ciynCZqzxMrYMsg==}
    engines: {node: '>=14.0.0'}
    cpu: [wasm32]

  '@unrs/resolver-binding-win32-arm64-msvc@1.10.1':
    resolution: {integrity: sha512-TY79+N+Gkoo7E99K+zmsKNeiuNJYlclZJtKqsHSls8We2iGhgxtletVsiBYie93MSTDRDMI8pkBZJlIJSZPrdA==}
    cpu: [arm64]
    os: [win32]

  '@unrs/resolver-binding-win32-ia32-msvc@1.10.1':
    resolution: {integrity: sha512-BAJN5PEPlEV+1m8+PCtFoKm3LQ1P57B4Z+0+efU0NzmCaGk7pUaOxuPgl+m3eufVeeNBKiPDltG0sSB9qEfCxw==}
    cpu: [ia32]
    os: [win32]

  '@unrs/resolver-binding-win32-x64-msvc@1.10.1':
    resolution: {integrity: sha512-2v3erKKmmCyIVvvhI2nF15qEbdBpISTq44m9pyd5gfIJB1PN94oePTLWEd82XUbIbvKhv76xTSeUQSCOGesLeg==}
    cpu: [x64]
    os: [win32]

  '@vitejs/plugin-react@4.6.0':
    resolution: {integrity: sha512-5Kgff+m8e2PB+9j51eGHEpn5kUzRKH2Ry0qGoe8ItJg7pqnkPrYPkDQZGgGmTa0EGarHrkjLvOdU3b1fzI8otQ==}
    engines: {node: ^14.18.0 || >=16.0.0}
    peerDependencies:
      vite: ^4.2.0 || ^5.0.0 || ^6.0.0 || ^7.0.0-beta.0

  '@vitest/expect@3.2.4':
    resolution: {integrity: sha512-Io0yyORnB6sikFlt8QW5K7slY4OjqNX9jmJQ02QDda8lyM6B5oNgVWoSoKPac8/kgnCUzuHQKrSLtu/uOqqrig==}

  '@vitest/mocker@3.2.4':
    resolution: {integrity: sha512-46ryTE9RZO/rfDd7pEqFl7etuyzekzEhUbTW3BvmeO/BcCMEgq59BKhek3dXDWgAj4oMK6OZi+vRr1wPW6qjEQ==}
    peerDependencies:
      msw: ^2.4.9
      vite: ^5.0.0 || ^6.0.0 || ^7.0.0-0
    peerDependenciesMeta:
      msw:
        optional: true
      vite:
        optional: true

  '@vitest/pretty-format@3.2.4':
    resolution: {integrity: sha512-IVNZik8IVRJRTr9fxlitMKeJeXFFFN0JaB9PHPGQ8NKQbGpfjlTx9zO4RefN8gp7eqjNy8nyK3NZmBzOPeIxtA==}

  '@vitest/runner@3.2.4':
    resolution: {integrity: sha512-oukfKT9Mk41LreEW09vt45f8wx7DordoWUZMYdY/cyAk7w5TWkTRCNZYF7sX7n2wB7jyGAl74OxgwhPgKaqDMQ==}

  '@vitest/snapshot@3.2.4':
    resolution: {integrity: sha512-dEYtS7qQP2CjU27QBC5oUOxLE/v5eLkGqPE0ZKEIDGMs4vKWe7IjgLOeauHsR0D5YuuycGRO5oSRXnwnmA78fQ==}

  '@vitest/spy@3.2.4':
    resolution: {integrity: sha512-vAfasCOe6AIK70iP5UD11Ac4siNUNJ9i/9PZ3NKx07sG6sUxeag1LWdNrMWeKKYBLlzuK+Gn65Yd5nyL6ds+nw==}

  '@vitest/ui@3.2.4':
    resolution: {integrity: sha512-hGISOaP18plkzbWEcP/QvtRW1xDXF2+96HbEX6byqQhAUbiS5oH6/9JwW+QsQCIYON2bI6QZBF+2PvOmrRZ9wA==}
    peerDependencies:
      vitest: 3.2.4

  '@vitest/utils@3.2.4':
    resolution: {integrity: sha512-fB2V0JFrQSMsCo9HiSq3Ezpdv4iYaXRG1Sx8edX3MwxfyNn83mKiGzOcH+Fkxt4MHxr3y42fQi1oeAInqgX2QA==}

  acorn-jsx@5.3.2:
    resolution: {integrity: sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==}
    peerDependencies:
      acorn: ^6.0.0 || ^7.0.0 || ^8.0.0

  acorn@8.15.0:
    resolution: {integrity: sha512-NZyJarBfL7nWwIq+FDL6Zp/yHEhePMNnnJ0y3qfieCrmNvYct8uvtiV41UvlSe6apAfk0fY1FbWx+NwfmpvtTg==}
    engines: {node: '>=0.4.0'}
    hasBin: true

  agent-base@7.1.3:
    resolution: {integrity: sha512-jRR5wdylq8CkOe6hei19GGZnxM6rBGwFl3Bg0YItGDimvjGtAvdZk4Pu6Cl4u4Igsws4a1fd1Vq3ezrhn4KmFw==}
    engines: {node: '>= 14'}

  ajv@6.12.6:
    resolution: {integrity: sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==}

  ansi-regex@5.0.1:
    resolution: {integrity: sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==}
    engines: {node: '>=8'}

  ansi-regex@6.1.0:
    resolution: {integrity: sha512-7HSX4QQb4CspciLpVFwyRe79O3xsIZDDLER21kERQ71oaPodF8jL725AgJMFAYbooIqolJoRLuM81SpeUkpkvA==}
    engines: {node: '>=12'}

  ansi-styles@4.3.0:
    resolution: {integrity: sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==}
    engines: {node: '>=8'}

  ansi-styles@5.2.0:
    resolution: {integrity: sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==}
    engines: {node: '>=10'}

  ansi-styles@6.2.1:
    resolution: {integrity: sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==}
    engines: {node: '>=12'}

  any-promise@1.3.0:
    resolution: {integrity: sha512-7UvmKalWRt1wgjL1RrGxoSJW/0QZFIegpeGvZG9kjp8vrRu55XTHbwnqq2GpXm9uLbcuhxm3IqX9OB4MZR1b2A==}

  anymatch@3.1.3:
    resolution: {integrity: sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==}
    engines: {node: '>= 8'}

  arg@5.0.2:
    resolution: {integrity: sha512-PYjyFOLKQ9y57JvQ6QLo8dAgNqswh8M1RMJYdQduT6xbWSgK36P/Z/v+p888pM69jMMfS8Xd8F6I1kQ/I9HUGg==}

  argparse@2.0.1:
    resolution: {integrity: sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==}

  aria-hidden@1.2.6:
    resolution: {integrity: sha512-ik3ZgC9dY/lYVVM++OISsaYDeg1tb0VtP5uL3ouh1koGOaUMDPpbFIei4JkFimWUFPn90sbMNMXQAIVOlnYKJA==}
    engines: {node: '>=10'}

  aria-query@5.3.0:
    resolution: {integrity: sha512-b0P0sZPKtyu8HkeRAfCq0IfURZK+SuwMjY1UXGBU27wpAiTwQAIlq56IbIO+ytk/JjS1fMR14ee5WBBfKi5J6A==}

  aria-query@5.3.2:
    resolution: {integrity: sha512-COROpnaoap1E2F000S62r6A60uHZnmlvomhfyT2DlTcrY1OrBKn2UhH7qn5wTC9zMvD0AY7csdPSNwKP+7WiQw==}
    engines: {node: '>= 0.4'}

  array-buffer-byte-length@1.0.2:
    resolution: {integrity: sha512-LHE+8BuR7RYGDKvnrmcuSq3tDcKv9OFEXQt/HpbZhY7V6h0zlUXutnAD82GiFx9rdieCMjkvtcsPqBwgUl1Iiw==}
    engines: {node: '>= 0.4'}

  array-includes@3.1.9:
    resolution: {integrity: sha512-FmeCCAenzH0KH381SPT5FZmiA/TmpndpcaShhfgEN9eCVjnFBqq3l1xrI42y8+PPLI6hypzou4GXw00WHmPBLQ==}
    engines: {node: '>= 0.4'}

  array.prototype.findlast@1.2.5:
    resolution: {integrity: sha512-CVvd6FHg1Z3POpBLxO6E6zr+rSKEQ9L6rZHAaY7lLfhKsWYUBBOuMs0e9o24oopj6H+geRCX0YJ+TJLBK2eHyQ==}
    engines: {node: '>= 0.4'}

  array.prototype.findlastindex@1.2.6:
    resolution: {integrity: sha512-F/TKATkzseUExPlfvmwQKGITM3DGTK+vkAsCZoDc5daVygbJBnjEUCbgkAvVFsgfXfX4YIqZ/27G3k3tdXrTxQ==}
    engines: {node: '>= 0.4'}

  array.prototype.flat@1.3.3:
    resolution: {integrity: sha512-rwG/ja1neyLqCuGZ5YYrznA62D4mZXg0i1cIskIUKSiqF3Cje9/wXAls9B9s1Wa2fomMsIv8czB8jZcPmxCXFg==}
    engines: {node: '>= 0.4'}

  array.prototype.flatmap@1.3.3:
    resolution: {integrity: sha512-Y7Wt51eKJSyi80hFrJCePGGNo5ktJCslFuboqJsbf57CCPcm5zztluPlc4/aD8sWsKvlwatezpV4U1efk8kpjg==}
    engines: {node: '>= 0.4'}

  array.prototype.tosorted@1.1.4:
    resolution: {integrity: sha512-p6Fx8B7b7ZhL/gmUsAy0D15WhvDccw3mnGNbZpi3pmeJdxtWsj2jEaI4Y6oo3XiHfzuSgPwKc04MYt6KgvC/wA==}
    engines: {node: '>= 0.4'}

  arraybuffer.prototype.slice@1.0.4:
    resolution: {integrity: sha512-BNoCY6SXXPQ7gF2opIP4GBE+Xw7U+pHMYKuzjgCN3GwiaIR09UUeKfheyIry77QtrCBlC0KK0q5/TER/tYh3PQ==}
    engines: {node: '>= 0.4'}

  assertion-error@2.0.1:
    resolution: {integrity: sha512-Izi8RQcffqCeNVgFigKli1ssklIbpHnCYc6AknXGYoB6grJqyeby7jv12JUQgmTAnIDnbck1uxksT4dzN3PWBA==}
    engines: {node: '>=12'}

  ast-types-flow@0.0.8:
    resolution: {integrity: sha512-OH/2E5Fg20h2aPrbe+QL8JZQFko0YZaF+j4mnQ7BGhfavO7OpSLa8a0y9sBwomHdSbkhTS8TQNayBfnW5DwbvQ==}

  async-function@1.0.0:
    resolution: {integrity: sha512-hsU18Ae8CDTR6Kgu9DYf0EbCr/a5iGL0rytQDobUcdpYOKokk8LEjVphnXkDkgpi0wYVsqrXuP0bZxJaTqdgoA==}
    engines: {node: '>= 0.4'}

  asynckit@0.4.0:
    resolution: {integrity: sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==}

  autoprefixer@10.4.21:
    resolution: {integrity: sha512-O+A6LWV5LDHSJD3LjHYoNi4VLsj/Whi7k6zG12xTYaU4cQ8oxQGckXNX8cRHK5yOZ/ppVHe0ZBXGzSV9jXdVbQ==}
    engines: {node: ^10 || ^12 || >=14}
    hasBin: true
    peerDependencies:
      postcss: ^8.1.0

  available-typed-arrays@1.0.7:
    resolution: {integrity: sha512-wvUjBtSGN7+7SjNpq/9M2Tg350UZD3q62IFZLbRAR1bSMlCo1ZaeW+BJ+D090e4hIIZLBcTDWe4Mh4jvUDajzQ==}
    engines: {node: '>= 0.4'}

  axe-core@4.10.3:
    resolution: {integrity: sha512-Xm7bpRXnDSX2YE2YFfBk2FnF0ep6tmG7xPh8iHee8MIcrgq762Nkce856dYtJYLkuIoYZvGfTs/PbZhideTcEg==}
    engines: {node: '>=4'}

  axios@1.10.0:
    resolution: {integrity: sha512-/1xYAC4MP/HEG+3duIhFr4ZQXR4sQXOIe+o6sdqzeykGLx6Upp/1p8MHqhINOvGeP7xyNHe7tsiJByc4SSVUxw==}

  axobject-query@4.1.0:
    resolution: {integrity: sha512-qIj0G9wZbMGNLjLmg1PT6v2mE9AH2zlnADJD/2tC6E00hgmhUOfEB6greHPAfLRSufHqROIUTkw6E+M3lH0PTQ==}
    engines: {node: '>= 0.4'}

  balanced-match@1.0.2:
    resolution: {integrity: sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==}

  binary-extensions@2.3.0:
    resolution: {integrity: sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==}
    engines: {node: '>=8'}

  brace-expansion@1.1.12:
    resolution: {integrity: sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==}

  brace-expansion@2.0.2:
    resolution: {integrity: sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==}

  braces@3.0.3:
    resolution: {integrity: sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==}
    engines: {node: '>=8'}

  browserslist@4.25.1:
    resolution: {integrity: sha512-KGj0KoOMXLpSNkkEI6Z6mShmQy0bc1I+T7K9N81k4WWMrfz+6fQ6es80B/YLAeRoKvjYE1YSHHOW1qe9xIVzHw==}
    engines: {node: ^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7}
    hasBin: true

  busboy@1.6.0:
    resolution: {integrity: sha512-8SFQbg/0hQ9xy3UNTB0YEnsNBbWfhf7RtnzpL7TkBiTBRfrQ9Fxcnz7VJsleJpyp6rVLvXiuORqjlHi5q+PYuA==}
    engines: {node: '>=10.16.0'}

  cac@6.7.14:
    resolution: {integrity: sha512-b6Ilus+c3RrdDk+JhLKUAQfzzgLEPy6wcXqS7f/xe1EETvsDP6GORG7SFuOs6cID5YkqchW/LXZbX5bc8j7ZcQ==}
    engines: {node: '>=8'}

  call-bind-apply-helpers@1.0.2:
    resolution: {integrity: sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==}
    engines: {node: '>= 0.4'}

  call-bind@1.0.8:
    resolution: {integrity: sha512-oKlSFMcMwpUg2ednkhQ454wfWiU/ul3CkJe/PEHcTKuiX6RpbehUiFMXu13HalGZxfUwCQzZG747YXBn1im9ww==}
    engines: {node: '>= 0.4'}

  call-bound@1.0.4:
    resolution: {integrity: sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==}
    engines: {node: '>= 0.4'}

  callsites@3.1.0:
    resolution: {integrity: sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==}
    engines: {node: '>=6'}

  camelcase-css@2.0.1:
    resolution: {integrity: sha512-QOSvevhslijgYwRx6Rv7zKdMF8lbRmx+uQGx2+vDc+KI/eBnsy9kit5aj23AgGu3pa4t9AgwbnXWqS+iOY+2aA==}
    engines: {node: '>= 6'}

  caniuse-lite@1.0.30001726:
    resolution: {integrity: sha512-VQAUIUzBiZ/UnlM28fSp2CRF3ivUn1BWEvxMcVTNwpw91Py1pGbPIyIKtd+tzct9C3ouceCVdGAXxZOpZAsgdw==}

  chai@5.2.0:
    resolution: {integrity: sha512-mCuXncKXk5iCLhfhwTc0izo0gtEmpz5CtG2y8GiOINBlMVS6v8TMRc5TaLWKS6692m9+dVVfzgeVxR5UxWHTYw==}
    engines: {node: '>=12'}

  chalk@3.0.0:
    resolution: {integrity: sha512-4D3B6Wf41KOYRFdszmDqMCGq5VV/uMAB273JILmO+3jAlh8X4qDtdtgCR3fxtbLEMzSx22QdhnDcJvu2u1fVwg==}
    engines: {node: '>=8'}

  chalk@4.1.2:
    resolution: {integrity: sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==}
    engines: {node: '>=10'}

  check-error@2.1.1:
    resolution: {integrity: sha512-OAlb+T7V4Op9OwdkjmguYRqncdlx5JiofwOAUkmTF+jNdHwzTaTs4sRAGpzLF3oOz5xAyDGrPgeIDFQmDOTiJw==}
    engines: {node: '>= 16'}

  chokidar@3.6.0:
    resolution: {integrity: sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==}
    engines: {node: '>= 8.10.0'}

  class-variance-authority@0.7.1:
    resolution: {integrity: sha512-Ka+9Trutv7G8M6WT6SeiRWz792K5qEqIGEGzXKhAE6xOWAY6pPH8U+9IY3oCMv6kqTmLsv7Xh/2w2RigkePMsg==}

  client-only@0.0.1:
    resolution: {integrity: sha512-IV3Ou0jSMzZrd3pZ48nLkT9DA7Ag1pnPzaiQhpW7c3RbcqqzvzzVu+L8gfqMp/8IM2MQtSiqaCxrrcfu8I8rMA==}

  clsx@2.1.1:
    resolution: {integrity: sha512-eYm0QWBtUrBWZWG0d386OGAw16Z995PiOVo2B7bjWSbHedGl5e0ZWaq65kOGgUSNesEIDkB9ISbTg/JK9dhCZA==}
    engines: {node: '>=6'}

  cmdk@1.0.4:
    resolution: {integrity: sha512-AnsjfHyHpQ/EFeAnG216WY7A5LiYCoZzCSygiLvfXC3H3LFGCprErteUcszaVluGOhuOTbJS3jWHrSDYPBBygg==}
    peerDependencies:
      react: ^18 || ^19 || ^19.0.0-rc
      react-dom: ^18 || ^19 || ^19.0.0-rc

  codemirror-spell-checker@1.1.2:
    resolution: {integrity: sha512-2Tl6n0v+GJRsC9K3MLCdLaMOmvWL0uukajNJseorZJsslaxZyZMgENocPU8R0DyoTAiKsyqiemSOZo7kjGV0LQ==}

  codemirror@5.65.19:
    resolution: {integrity: sha512-+aFkvqhaAVr1gferNMuN8vkTSrWIFvzlMV9I2KBLCWS2WpZ2+UAkZjlMZmEuT+gcXTi6RrGQCkWq1/bDtGqhIA==}

  color-convert@2.0.1:
    resolution: {integrity: sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==}
    engines: {node: '>=7.0.0'}

  color-name@1.1.4:
    resolution: {integrity: sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==}

  color-string@1.9.1:
    resolution: {integrity: sha512-shrVawQFojnZv6xM40anx4CkoDP+fZsw/ZerEMsW/pyzsRbElpsL/DBVW7q3ExxwusdNXI3lXpuhEZkzs8p5Eg==}

  color@4.2.3:
    resolution: {integrity: sha512-1rXeuUUiGGrykh+CeBdu5Ie7OJwinCgQY0bc7GCRxy5xVHy+moaqkpL/jqQq0MtQOeYcrqEz4abc5f0KtU7W4A==}
    engines: {node: '>=12.5.0'}

  combined-stream@1.0.8:
    resolution: {integrity: sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==}
    engines: {node: '>= 0.8'}

  commander@4.1.1:
    resolution: {integrity: sha512-NOKm8xhkzAjzFx8B2v5OAHT+u5pRQc2UCa2Vq9jYL/31o2wi9mxBA7LIFs3sV5VSC49z6pEhfbMULvShKj26WA==}
    engines: {node: '>= 6'}

  concat-map@0.0.1:
    resolution: {integrity: sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==}

  convert-source-map@2.0.0:
    resolution: {integrity: sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==}

  cross-spawn@7.0.6:
    resolution: {integrity: sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==}
    engines: {node: '>= 8'}

  css.escape@1.5.1:
    resolution: {integrity: sha512-YUifsXXuknHlUsmlgyY0PKzgPOr7/FjCePfHNt0jxm83wHZi44VDMQ7/fGNkjY3/jV1MC+1CmZbaHzugyeRtpg==}

  cssesc@3.0.0:
    resolution: {integrity: sha512-/Tb/JcjK111nNScGob5MNtsntNM1aCNUDipB/TkwZFhyDrrE47SOx/18wF2bbjgc3ZzCSKW1T5nt5EbFoAz/Vg==}
    engines: {node: '>=4'}
    hasBin: true

  cssstyle@4.6.0:
    resolution: {integrity: sha512-2z+rWdzbbSZv6/rhtvzvqeZQHrBaqgogqt85sqFNbabZOuFbCVFb8kPeEtZjiKkbrm395irpNKiYeFeLiQnFPg==}
    engines: {node: '>=18'}

  csstype@3.1.3:
    resolution: {integrity: sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==}

  d3-array@3.2.4:
    resolution: {integrity: sha512-tdQAmyA18i4J7wprpYq8ClcxZy3SC31QMeByyCFyRt7BVHdREQZ5lpzoe5mFEYZUWe+oq8HBvk9JjpibyEV4Jg==}
    engines: {node: '>=12'}

  d3-color@3.1.0:
    resolution: {integrity: sha512-zg/chbXyeBtMQ1LbD/WSoW2DpC3I0mpmPdW+ynRTj/x2DAWYrIY7qeZIHidozwV24m4iavr15lNwIwLxRmOxhA==}
    engines: {node: '>=12'}

  d3-ease@3.0.1:
    resolution: {integrity: sha512-wR/XK3D3XcLIZwpbvQwQ5fK+8Ykds1ip7A2Txe0yxncXSdq1L9skcG7blcedkOX+ZcgxGAmLX1FrRGbADwzi0w==}
    engines: {node: '>=12'}

  d3-format@3.1.0:
    resolution: {integrity: sha512-YyUI6AEuY/Wpt8KWLgZHsIU86atmikuoOmCfommt0LYHiQSPjvX2AcFc38PX0CBpr2RCyZhjex+NS/LPOv6YqA==}
    engines: {node: '>=12'}

  d3-interpolate@3.0.1:
    resolution: {integrity: sha512-3bYs1rOD33uo8aqJfKP3JWPAibgw8Zm2+L9vBKEHJ2Rg+viTR7o5Mmv5mZcieN+FRYaAOWX5SJATX6k1PWz72g==}
    engines: {node: '>=12'}

  d3-path@3.1.0:
    resolution: {integrity: sha512-p3KP5HCf/bvjBSSKuXid6Zqijx7wIfNW+J/maPs+iwR35at5JCbLUT0LzF1cnjbCHWhqzQTIN2Jpe8pRebIEFQ==}
    engines: {node: '>=12'}

  d3-scale@4.0.2:
    resolution: {integrity: sha512-GZW464g1SH7ag3Y7hXjf8RoUuAFIqklOAq3MRl4OaWabTFJY9PN/E1YklhXLh+OQ3fM9yS2nOkCoS+WLZ6kvxQ==}
    engines: {node: '>=12'}

  d3-shape@3.2.0:
    resolution: {integrity: sha512-SaLBuwGm3MOViRq2ABk3eLoxwZELpH6zhl3FbAoJ7Vm1gofKx6El1Ib5z23NUEhF9AsGl7y+dzLe5Cw2AArGTA==}
    engines: {node: '>=12'}

  d3-time-format@4.1.0:
    resolution: {integrity: sha512-dJxPBlzC7NugB2PDLwo9Q8JiTR3M3e4/XANkreKSUxF8vvXKqm1Yfq4Q5dl8budlunRVlUUaDUgFt7eA8D6NLg==}
    engines: {node: '>=12'}

  d3-time@3.1.0:
    resolution: {integrity: sha512-VqKjzBLejbSMT4IgbmVgDjpkYrNWUYJnbCGo874u7MMKIWsILRX+OpX/gTk8MqjpT1A/c6HY2dCA77ZN0lkQ2Q==}
    engines: {node: '>=12'}

  d3-timer@3.0.1:
    resolution: {integrity: sha512-ndfJ/JxxMd3nw31uyKoY2naivF+r29V+Lc0svZxe1JvvIRmi8hUsrMvdOwgS1o6uBHmiz91geQ0ylPP0aj1VUA==}
    engines: {node: '>=12'}

  damerau-levenshtein@1.0.8:
    resolution: {integrity: sha512-sdQSFB7+llfUcQHUQO3+B8ERRj0Oa4w9POWMI/puGtuf7gFywGmkaLCElnudfTiKZV+NvHqL0ifzdrI8Ro7ESA==}

  data-urls@5.0.0:
    resolution: {integrity: sha512-ZYP5VBHshaDAiVZxjbRVcFJpc+4xGgT0bK3vzy1HLN8jTO975HEbuYzZJcHoQEY5K1a0z8YayJkyVETa08eNTg==}
    engines: {node: '>=18'}

  data-view-buffer@1.0.2:
    resolution: {integrity: sha512-EmKO5V3OLXh1rtK2wgXRansaK1/mtVdTUEiEI0W8RkvgT05kfxaH29PliLnpLP73yYO6142Q72QNa8Wx/A5CqQ==}
    engines: {node: '>= 0.4'}

  data-view-byte-length@1.0.2:
    resolution: {integrity: sha512-tuhGbE6CfTM9+5ANGf+oQb72Ky/0+s3xKUpHvShfiz2RxMFgFPjsXuRLBVMtvMs15awe45SRb83D6wH4ew6wlQ==}
    engines: {node: '>= 0.4'}

  data-view-byte-offset@1.0.1:
    resolution: {integrity: sha512-BS8PfmtDGnrgYdOonGZQdLZslWIeCGFP9tpan0hi1Co2Zr2NKADsvGYA8XxuG/4UWgJ6Cjtv+YJnB6MM69QGlQ==}
    engines: {node: '>= 0.4'}

  date-fns@4.1.0:
    resolution: {integrity: sha512-Ukq0owbQXxa/U3EGtsdVBkR1w7KOQ5gIBqdH2hkvknzZPYvBxb/aa6E8L7tmjFtkwZBu3UXBbjIgPo/Ez4xaNg==}

  debug@3.2.7:
    resolution: {integrity: sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==}
    peerDependencies:
      supports-color: '*'
    peerDependenciesMeta:
      supports-color:
        optional: true

  debug@4.4.1:
    resolution: {integrity: sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==}
    engines: {node: '>=6.0'}
    peerDependencies:
      supports-color: '*'
    peerDependenciesMeta:
      supports-color:
        optional: true

  decimal.js-light@2.5.1:
    resolution: {integrity: sha512-qIMFpTMZmny+MMIitAB6D7iVPEorVw6YQRWkvarTkT4tBeSLLiHzcwj6q0MmYSFCiVpiqPJTJEYIrpcPzVEIvg==}

  decimal.js@10.5.0:
    resolution: {integrity: sha512-8vDa8Qxvr/+d94hSh5P3IJwI5t8/c0KsMp+g8bNw9cY2icONa5aPfvKeieW1WlG0WQYwwhJ7mjui2xtiePQSXw==}

  deep-eql@5.0.2:
    resolution: {integrity: sha512-h5k/5U50IJJFpzfL6nO9jaaumfjO/f2NjK/oYB2Djzm4p9L+3T9qWpZqZ2hAbLPuuYq9wrU08WQyBTL5GbPk5Q==}
    engines: {node: '>=6'}

  deep-is@0.1.4:
    resolution: {integrity: sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==}

  define-data-property@1.1.4:
    resolution: {integrity: sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==}
    engines: {node: '>= 0.4'}

  define-properties@1.2.1:
    resolution: {integrity: sha512-8QmQKqEASLd5nx0U1B1okLElbUuuttJ/AnYmRXbbbGDWh6uS208EjD4Xqq/I9wK7u0v6O08XhTWnt5XtEbR6Dg==}
    engines: {node: '>= 0.4'}

  delayed-stream@1.0.0:
    resolution: {integrity: sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==}
    engines: {node: '>=0.4.0'}

  dequal@2.0.3:
    resolution: {integrity: sha512-0je+qPKHEMohvfRTCEo3CrPG6cAzAYgmzKyxRiYSSDkS6eGJdyVJm7WaYA5ECaAD9wLB2T4EEeymA5aFVcYXCA==}
    engines: {node: '>=6'}

  detect-libc@2.0.4:
    resolution: {integrity: sha512-3UDv+G9CsCKO1WKMGw9fwq/SWJYbI0c5Y7LU1AXYoDdbhE2AHQ6N6Nb34sG8Fj7T5APy8qXDCKuuIHd1BR0tVA==}
    engines: {node: '>=8'}

  detect-node-es@1.1.0:
    resolution: {integrity: sha512-ypdmJU/TbBby2Dxibuv7ZLW3Bs1QEmM7nHjEANfohJLvE0XVujisn1qPJcZxg+qDucsr+bP6fLD1rPS3AhJ7EQ==}

  didyoumean@1.2.2:
    resolution: {integrity: sha512-gxtyfqMg7GKyhQmb056K7M3xszy/myH8w+B4RT+QXBQsvAOdc3XymqDDPHx1BgPgsdAA5SIifona89YtRATDzw==}

  dlv@1.1.3:
    resolution: {integrity: sha512-+HlytyjlPKnIG8XuRG8WvmBP8xs8P71y+SKKS6ZXWoEgLuePxtDoUEiH7WkdePWrQ5JBpE6aoVqfZfJUQkjXwA==}

  doctrine@2.1.0:
    resolution: {integrity: sha512-35mSku4ZXK0vfCuHEDAwt55dg2jNajHZ1odvF+8SSr82EsZY4QmXfuWso8oEd8zRhVObSN18aM0CjSdoBX7zIw==}
    engines: {node: '>=0.10.0'}

  dom-accessibility-api@0.5.16:
    resolution: {integrity: sha512-X7BJ2yElsnOJ30pZF4uIIDfBEVgF4XEBxL9Bxhy6dnrm5hkzqmsWHGTiHqRiITNhMyFLyAiWndIJP7Z1NTteDg==}

  dom-accessibility-api@0.6.3:
    resolution: {integrity: sha512-7ZgogeTnjuHbo+ct10G9Ffp0mif17idi0IyWNVA/wcwcm7NPOD/WEHVP3n7n3MhXqxoIYm8d6MuZohYWIZ4T3w==}

  dom-helpers@5.2.1:
    resolution: {integrity: sha512-nRCa7CK3VTrM2NmGkIy4cbK7IZlgBE/PYMn55rrXefr5xXDP0LdtfPnblFDoVdcAfslJ7or6iqAUnx0CCGIWQA==}

  dunder-proto@1.0.1:
    resolution: {integrity: sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==}
    engines: {node: '>= 0.4'}

  eastasianwidth@0.2.0:
    resolution: {integrity: sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==}

  easymde@2.20.0:
    resolution: {integrity: sha512-V1Z5f92TfR42Na852OWnIZMbM7zotWQYTddNaLYZFVKj7APBbyZ3FYJ27gBw2grMW3R6Qdv9J8n5Ij7XRSIgXQ==}

  electron-to-chromium@1.5.179:
    resolution: {integrity: sha512-UWKi/EbBopgfFsc5k61wFpV7WrnnSlSzW/e2XcBmS6qKYTivZlLtoll5/rdqRTxGglGHkmkW0j0pFNJG10EUIQ==}

  embla-carousel-react@8.5.1:
    resolution: {integrity: sha512-z9Y0K84BJvhChXgqn2CFYbfEi6AwEr+FFVVKm/MqbTQ2zIzO1VQri6w67LcfpVF0AjbhwVMywDZqY4alYkjW5w==}
    peerDependencies:
      react: ^16.8.0 || ^17.0.1 || ^18.0.0 || ^19.0.0 || ^19.0.0-rc

  embla-carousel-reactive-utils@8.5.1:
    resolution: {integrity: sha512-n7VSoGIiiDIc4MfXF3ZRTO59KDp820QDuyBDGlt5/65+lumPHxX2JLz0EZ23hZ4eg4vZGUXwMkYv02fw2JVo/A==}
    peerDependencies:
      embla-carousel: 8.5.1

  embla-carousel@8.5.1:
    resolution: {integrity: sha512-JUb5+FOHobSiWQ2EJNaueCNT/cQU9L6XWBbWmorWPQT9bkbk+fhsuLr8wWrzXKagO3oWszBO7MSx+GfaRk4E6A==}

  emoji-regex@8.0.0:
    resolution: {integrity: sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==}

  emoji-regex@9.2.2:
    resolution: {integrity: sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==}

  entities@6.0.1:
    resolution: {integrity: sha512-aN97NXWF6AWBTahfVOIrB/NShkzi5H7F9r1s9mD3cDj4Ko5f2qhhVoYMibXF7GlLveb/D2ioWay8lxI97Ven3g==}
    engines: {node: '>=0.12'}

  es-abstract@1.24.0:
    resolution: {integrity: sha512-WSzPgsdLtTcQwm4CROfS5ju2Wa1QQcVeT37jFjYzdFz1r9ahadC8B8/a4qxJxM+09F18iumCdRmlr96ZYkQvEg==}
    engines: {node: '>= 0.4'}

  es-define-property@1.0.1:
    resolution: {integrity: sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==}
    engines: {node: '>= 0.4'}

  es-errors@1.3.0:
    resolution: {integrity: sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==}
    engines: {node: '>= 0.4'}

  es-iterator-helpers@1.2.1:
    resolution: {integrity: sha512-uDn+FE1yrDzyC0pCo961B2IHbdM8y/ACZsKD4dG6WqrjV53BADjwa7D+1aom2rsNVfLyDgU/eigvlJGJ08OQ4w==}
    engines: {node: '>= 0.4'}

  es-module-lexer@1.7.0:
    resolution: {integrity: sha512-jEQoCwk8hyb2AZziIOLhDqpm5+2ww5uIE6lkO/6jcOCusfk6LhMHpXXfBLXTZ7Ydyt0j4VoUQv6uGNYbdW+kBA==}

  es-object-atoms@1.1.1:
    resolution: {integrity: sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==}
    engines: {node: '>= 0.4'}

  es-set-tostringtag@2.1.0:
    resolution: {integrity: sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==}
    engines: {node: '>= 0.4'}

  es-shim-unscopables@1.1.0:
    resolution: {integrity: sha512-d9T8ucsEhh8Bi1woXCf+TIKDIROLG5WCkxg8geBCbvk22kzwC5G2OnXVMO6FUsvQlgUUXQ2itephWDLqDzbeCw==}
    engines: {node: '>= 0.4'}

  es-to-primitive@1.3.0:
    resolution: {integrity: sha512-w+5mJ3GuFL+NjVtJlvydShqE1eN3h3PbI7/5LAsYJP/2qtuMXjfL2LpHSRqo4b4eSF5K/DH1JXKUAHSB2UW50g==}
    engines: {node: '>= 0.4'}

  esbuild@0.25.5:
    resolution: {integrity: sha512-P8OtKZRv/5J5hhz0cUAdu/cLuPIKXpQl1R9pZtvmHWQvrAUVd0UNIPT4IB4W3rNOqVO0rlqHmCIbSwxh/c9yUQ==}
    engines: {node: '>=18'}
    hasBin: true

  escalade@3.2.0:
    resolution: {integrity: sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==}
    engines: {node: '>=6'}

  escape-string-regexp@4.0.0:
    resolution: {integrity: sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==}
    engines: {node: '>=10'}

  eslint-config-next@15.3.4:
    resolution: {integrity: sha512-WqeumCq57QcTP2lYlV6BRUySfGiBYEXlQ1L0mQ+u4N4X4ZhUVSSQ52WtjqHv60pJ6dD7jn+YZc0d1/ZSsxccvg==}
    peerDependencies:
      eslint: ^7.23.0 || ^8.0.0 || ^9.0.0
      typescript: '>=3.3.1'
    peerDependenciesMeta:
      typescript:
        optional: true

  eslint-import-resolver-node@0.3.9:
    resolution: {integrity: sha512-WFj2isz22JahUv+B788TlO3N6zL3nNJGU8CcZbPZvVEkBPaJdCV4vy5wyghty5ROFbCRnm132v8BScu5/1BQ8g==}

  eslint-import-resolver-typescript@3.10.1:
    resolution: {integrity: sha512-A1rHYb06zjMGAxdLSkN2fXPBwuSaQ0iO5M/hdyS0Ajj1VBaRp0sPD3dn1FhME3c/JluGFbwSxyCfqdSbtQLAHQ==}
    engines: {node: ^14.18.0 || >=16.0.0}
    peerDependencies:
      eslint: '*'
      eslint-plugin-import: '*'
      eslint-plugin-import-x: '*'
    peerDependenciesMeta:
      eslint-plugin-import:
        optional: true
      eslint-plugin-import-x:
        optional: true

  eslint-module-utils@2.12.1:
    resolution: {integrity: sha512-L8jSWTze7K2mTg0vos/RuLRS5soomksDPoJLXIslC7c8Wmut3bx7CPpJijDcBZtxQ5lrbUdM+s0OlNbz0DCDNw==}
    engines: {node: '>=4'}
    peerDependencies:
      '@typescript-eslint/parser': '*'
      eslint: '*'
      eslint-import-resolver-node: '*'
      eslint-import-resolver-typescript: '*'
      eslint-import-resolver-webpack: '*'
    peerDependenciesMeta:
      '@typescript-eslint/parser':
        optional: true
      eslint:
        optional: true
      eslint-import-resolver-node:
        optional: true
      eslint-import-resolver-typescript:
        optional: true
      eslint-import-resolver-webpack:
        optional: true

  eslint-plugin-import@2.32.0:
    resolution: {integrity: sha512-whOE1HFo/qJDyX4SnXzP4N6zOWn79WhnCUY/iDR0mPfQZO8wcYE4JClzI2oZrhBnnMUCBCHZhO6VQyoBU95mZA==}
    engines: {node: '>=4'}
    peerDependencies:
      '@typescript-eslint/parser': '*'
      eslint: ^2 || ^3 || ^4 || ^5 || ^6 || ^7.2.0 || ^8 || ^9
    peerDependenciesMeta:
      '@typescript-eslint/parser':
        optional: true

  eslint-plugin-jsx-a11y@6.10.2:
    resolution: {integrity: sha512-scB3nz4WmG75pV8+3eRUQOHZlNSUhFNq37xnpgRkCCELU3XMvXAxLk1eqWWyE22Ki4Q01Fnsw9BA3cJHDPgn2Q==}
    engines: {node: '>=4.0'}
    peerDependencies:
      eslint: ^3 || ^4 || ^5 || ^6 || ^7 || ^8 || ^9

  eslint-plugin-react-hooks@5.2.0:
    resolution: {integrity: sha512-+f15FfK64YQwZdJNELETdn5ibXEUQmW1DZL6KXhNnc2heoy/sg9VJJeT7n8TlMWouzWqSWavFkIhHyIbIAEapg==}
    engines: {node: '>=10'}
    peerDependencies:
      eslint: ^3.0.0 || ^4.0.0 || ^5.0.0 || ^6.0.0 || ^7.0.0 || ^8.0.0-0 || ^9.0.0

  eslint-plugin-react@7.37.5:
    resolution: {integrity: sha512-Qteup0SqU15kdocexFNAJMvCJEfa2xUKNV4CC1xsVMrIIqEy3SQ/rqyxCWNzfrd3/ldy6HMlD2e0JDVpDg2qIA==}
    engines: {node: '>=4'}
    peerDependencies:
      eslint: ^3 || ^4 || ^5 || ^6 || ^7 || ^8 || ^9.7

  eslint-scope@8.4.0:
    resolution: {integrity: sha512-sNXOfKCn74rt8RICKMvJS7XKV/Xk9kA7DyJr8mJik3S7Cwgy3qlkkmyS2uQB3jiJg6VNdZd/pDBJu0nvG2NlTg==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  eslint-visitor-keys@3.4.3:
    resolution: {integrity: sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  eslint-visitor-keys@4.2.1:
    resolution: {integrity: sha512-Uhdk5sfqcee/9H/rCOJikYz67o0a2Tw2hGRPOG2Y1R2dg7brRe1uG0yaNQDHu+TO/uQPF/5eCapvYSmHUjt7JQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  eslint@9.30.1:
    resolution: {integrity: sha512-zmxXPNMOXmwm9E0yQLi5uqXHs7uq2UIiqEKo3Gq+3fwo1XrJ+hijAZImyF7hclW3E6oHz43Yk3RP8at6OTKflQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    hasBin: true
    peerDependencies:
      jiti: '*'
    peerDependenciesMeta:
      jiti:
        optional: true

  espree@10.4.0:
    resolution: {integrity: sha512-j6PAQ2uUr79PZhBjP5C5fhl8e39FmRnOjsD5lGnWrFU8i2G776tBK7+nP8KuQUTTyAZUwfQqXAgrVH5MbH9CYQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  esquery@1.6.0:
    resolution: {integrity: sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==}
    engines: {node: '>=0.10'}

  esrecurse@4.3.0:
    resolution: {integrity: sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==}
    engines: {node: '>=4.0'}

  estraverse@5.3.0:
    resolution: {integrity: sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==}
    engines: {node: '>=4.0'}

  estree-walker@3.0.3:
    resolution: {integrity: sha512-7RUKfXgSMMkzt6ZuXmqapOurLGPPfgj6l9uRZ7lRGolvk0y2yocc35LdcxKC5PQZdn2DMqioAQ2NoWcrTKmm6g==}

  esutils@2.0.3:
    resolution: {integrity: sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==}
    engines: {node: '>=0.10.0'}

  eventemitter3@4.0.7:
    resolution: {integrity: sha512-8guHBZCwKnFhYdHr2ysuRWErTwhoN2X8XELRlrRwpmfeY2jjuUN4taQMsULKUVo1K4DvZl+0pgfyoysHxvmvEw==}

  expect-type@1.2.1:
    resolution: {integrity: sha512-/kP8CAwxzLVEeFrMm4kMmy4CCDlpipyA7MYLVrdJIkV0fYF0UaigQHRsxHiuY/GEea+bh4KSv3TIlgr+2UL6bw==}
    engines: {node: '>=12.0.0'}

  fast-deep-equal@3.1.3:
    resolution: {integrity: sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==}

  fast-equals@5.2.2:
    resolution: {integrity: sha512-V7/RktU11J3I36Nwq2JnZEM7tNm17eBJz+u25qdxBZeCKiX6BkVSZQjwWIr+IobgnZy+ag73tTZgZi7tr0LrBw==}
    engines: {node: '>=6.0.0'}

  fast-glob@3.3.1:
    resolution: {integrity: sha512-kNFPyjhh5cKjrUltxs+wFx+ZkbRaxxmZ+X0ZU31SOsxCEtP9VPgtq2teZw1DebupL5GmDaNQ6yKMMVcM41iqDg==}
    engines: {node: '>=8.6.0'}

  fast-glob@3.3.3:
    resolution: {integrity: sha512-7MptL8U0cqcFdzIzwOTHoilX9x5BrNqye7Z/LuC7kCMRio1EMSyqRK3BEAUD7sXRq4iT4AzTVuZdhgQ2TCvYLg==}
    engines: {node: '>=8.6.0'}

  fast-json-stable-stringify@2.1.0:
    resolution: {integrity: sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==}

  fast-levenshtein@2.0.6:
    resolution: {integrity: sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==}

  fastq@1.19.1:
    resolution: {integrity: sha512-GwLTyxkCXjXbxqIhTsMI2Nui8huMPtnxg7krajPJAjnEG/iiOS7i+zCtWGZR9G0NBKbXKh6X9m9UIsYX/N6vvQ==}

  fdir@6.4.6:
    resolution: {integrity: sha512-hiFoqpyZcfNm1yc4u8oWCf9A2c4D3QjCrks3zmoVKVxpQRzmPNar1hUJcBG2RQHvEVGDN+Jm81ZheVLAQMK6+w==}
    peerDependencies:
      picomatch: ^3 || ^4
    peerDependenciesMeta:
      picomatch:
        optional: true

  fflate@0.8.2:
    resolution: {integrity: sha512-cPJU47OaAoCbg0pBvzsgpTPhmhqI5eJjh/JIu8tPj5q+T7iLvW/JAYUqmE7KOB4R1ZyEhzBaIQpQpardBF5z8A==}

  file-entry-cache@8.0.0:
    resolution: {integrity: sha512-XXTUwCvisa5oacNGRP9SfNtYBNAMi+RPwBFmblZEF7N7swHYQS6/Zfk7SRwx4D5j3CH211YNRco1DEMNVfZCnQ==}
    engines: {node: '>=16.0.0'}

  fill-range@7.1.1:
    resolution: {integrity: sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==}
    engines: {node: '>=8'}

  find-up@5.0.0:
    resolution: {integrity: sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==}
    engines: {node: '>=10'}

  flat-cache@4.0.1:
    resolution: {integrity: sha512-f7ccFPK3SXFHpx15UIGyRJ/FJQctuKZ0zVuN3frBo4HnK3cay9VEW0R6yPYFHC0AgqhukPzKjq22t5DmAyqGyw==}
    engines: {node: '>=16'}

  flatted@3.3.3:
    resolution: {integrity: sha512-GX+ysw4PBCz0PzosHDepZGANEuFCMLrnRTiEy9McGjmkCQYwRq4A/X786G/fjM/+OjsWSU1ZrY5qyARZmO/uwg==}

  follow-redirects@1.15.9:
    resolution: {integrity: sha512-gew4GsXizNgdoRyqmyfMHyAmXsZDk6mHkSxZFCzW9gwlbtOW44CDtYavM+y+72qD/Vq2l550kMF52DT8fOLJqQ==}
    engines: {node: '>=4.0'}
    peerDependencies:
      debug: '*'
    peerDependenciesMeta:
      debug:
        optional: true

  for-each@0.3.5:
    resolution: {integrity: sha512-dKx12eRCVIzqCxFGplyFKJMPvLEWgmNtUrpTiJIR5u97zEhRG8ySrtboPHZXx7daLxQVrl643cTzbab2tkQjxg==}
    engines: {node: '>= 0.4'}

  foreground-child@3.3.1:
    resolution: {integrity: sha512-gIXjKqtFuWEgzFRJA9WCQeSJLZDjgJUOMCMzxtvFq/37KojM1BFGufqsCy0r4qSQmYLsZYMeyRqzIWOMup03sw==}
    engines: {node: '>=14'}

  form-data@4.0.3:
    resolution: {integrity: sha512-qsITQPfmvMOSAdeyZ+12I1c+CKSstAFAwu+97zrnWAbIr5u8wfsExUzCesVLC8NgHuRUqNN4Zy6UPWUTRGslcA==}
    engines: {node: '>= 6'}

  fraction.js@4.3.7:
    resolution: {integrity: sha512-ZsDfxO51wGAXREY55a7la9LScWpwv9RxIrYABrlvOFBlH/ShPnrtsXeuUIfXKKOVicNxQ+o8JTbJvjS4M89yew==}

  fsevents@2.3.2:
    resolution: {integrity: sha512-xiqMQR4xAeHTuB9uWm+fFRcIOgKBMiOBP+eXiyT7jsgVCq1bkVygt00oASowB7EdtpOHaaPgKt812P9ab+DDKA==}
    engines: {node: ^8.16.0 || ^10.6.0 || >=11.0.0}
    os: [darwin]

  fsevents@2.3.3:
    resolution: {integrity: sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==}
    engines: {node: ^8.16.0 || ^10.6.0 || >=11.0.0}
    os: [darwin]

  function-bind@1.1.2:
    resolution: {integrity: sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==}

  function.prototype.name@1.1.8:
    resolution: {integrity: sha512-e5iwyodOHhbMr/yNrc7fDYG4qlbIvI5gajyzPnb5TCwyhjApznQh1BMFou9b30SevY43gCJKXycoCBjMbsuW0Q==}
    engines: {node: '>= 0.4'}

  functions-have-names@1.2.3:
    resolution: {integrity: sha512-xckBUXyTIqT97tq2x2AMb+g163b5JFysYk0x4qxNFwbfQkmNZoiRHb6sPzI9/QV33WeuvVYBUIiD4NzNIyqaRQ==}

  gensync@1.0.0-beta.2:
    resolution: {integrity: sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==}
    engines: {node: '>=6.9.0'}

  get-intrinsic@1.3.0:
    resolution: {integrity: sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==}
    engines: {node: '>= 0.4'}

  get-nonce@1.0.1:
    resolution: {integrity: sha512-FJhYRoDaiatfEkUK8HKlicmu/3SGFD51q3itKDGoSTysQJBnfOcxU5GxnhE1E6soB76MbT0MBtnKJuXyAx+96Q==}
    engines: {node: '>=6'}

  get-proto@1.0.1:
    resolution: {integrity: sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==}
    engines: {node: '>= 0.4'}

  get-symbol-description@1.1.0:
    resolution: {integrity: sha512-w9UMqWwJxHNOvoNzSJ2oPF5wvYcvP7jUvYzhp67yEhTi17ZDBBC1z9pTdGuzjD+EFIqLSYRweZjqfiPzQ06Ebg==}
    engines: {node: '>= 0.4'}

  get-tsconfig@4.10.1:
    resolution: {integrity: sha512-auHyJ4AgMz7vgS8Hp3N6HXSmlMdUyhSUrfBF16w153rxtLIEOE+HGqaBppczZvnHLqQJfiHotCYpNhl0lUROFQ==}

  glob-parent@5.1.2:
    resolution: {integrity: sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==}
    engines: {node: '>= 6'}

  glob-parent@6.0.2:
    resolution: {integrity: sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==}
    engines: {node: '>=10.13.0'}

  glob@10.4.5:
    resolution: {integrity: sha512-7Bv8RF0k6xjo7d4A/PxYLbUCfb6c+Vpd2/mB2yRDlew7Jb5hEXiCD9ibfO7wpk8i4sevK6DFny9h7EYbM3/sHg==}
    hasBin: true

  globals@14.0.0:
    resolution: {integrity: sha512-oahGvuMGQlPw/ivIYBjVSrWAfWLBeku5tpPE2fOPLi+WHffIWbuh2tCjhyQhTBPMf5E9jDEH4FOmTYgYwbKwtQ==}
    engines: {node: '>=18'}

  globalthis@1.0.4:
    resolution: {integrity: sha512-DpLKbNU4WylpxJykQujfCcwYWiV/Jhm50Goo0wrVILAv5jOr9d+H+UR3PhSCD2rCCEIg0uc+G+muBTwD54JhDQ==}
    engines: {node: '>= 0.4'}

  gopd@1.2.0:
    resolution: {integrity: sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==}
    engines: {node: '>= 0.4'}

  graphemer@1.4.0:
    resolution: {integrity: sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==}

  has-bigints@1.1.0:
    resolution: {integrity: sha512-R3pbpkcIqv2Pm3dUwgjclDRVmWpTJW2DcMzcIhEXEx1oh/CEMObMm3KLmRJOdvhM7o4uQBnwr8pzRK2sJWIqfg==}
    engines: {node: '>= 0.4'}

  has-flag@4.0.0:
    resolution: {integrity: sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==}
    engines: {node: '>=8'}

  has-property-descriptors@1.0.2:
    resolution: {integrity: sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==}

  has-proto@1.2.0:
    resolution: {integrity: sha512-KIL7eQPfHQRC8+XluaIw7BHUwwqL19bQn4hzNgdr+1wXoU0KKj6rufu47lhY7KbJR2C6T6+PfyN0Ea7wkSS+qQ==}
    engines: {node: '>= 0.4'}

  has-symbols@1.1.0:
    resolution: {integrity: sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==}
    engines: {node: '>= 0.4'}

  has-tostringtag@1.0.2:
    resolution: {integrity: sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==}
    engines: {node: '>= 0.4'}

  hasown@2.0.2:
    resolution: {integrity: sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==}
    engines: {node: '>= 0.4'}

  html-encoding-sniffer@4.0.0:
    resolution: {integrity: sha512-Y22oTqIU4uuPgEemfz7NDJz6OeKf12Lsu+QC+s3BVpda64lTiMYCyGwg5ki4vFxkMwQdeZDl2adZoqUgdFuTgQ==}
    engines: {node: '>=18'}

  http-proxy-agent@7.0.2:
    resolution: {integrity: sha512-T1gkAiYYDWYx3V5Bmyu7HcfcvL7mUrTWiM6yOfa3PIphViJ/gFPbvidQ+veqSOHci/PxBcDabeUNCzpOODJZig==}
    engines: {node: '>= 14'}

  https-proxy-agent@7.0.6:
    resolution: {integrity: sha512-vK9P5/iUfdl95AI+JVyUuIcVtd4ofvtrOr3HNtM2yxC9bnMbEdp3x01OhQNnjb8IJYi38VlTE3mBXwcfvywuSw==}
    engines: {node: '>= 14'}

  iconv-lite@0.6.3:
    resolution: {integrity: sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==}
    engines: {node: '>=0.10.0'}

  ignore@5.3.2:
    resolution: {integrity: sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==}
    engines: {node: '>= 4'}

  ignore@7.0.5:
    resolution: {integrity: sha512-Hs59xBNfUIunMFgWAbGX5cq6893IbWg4KnrjbYwX3tx0ztorVgTDA6B2sxf8ejHJ4wz8BqGUMYlnzNBer5NvGg==}
    engines: {node: '>= 4'}

  import-fresh@3.3.1:
    resolution: {integrity: sha512-TR3KfrTZTYLPB6jUjfx6MF9WcWrHL9su5TObK4ZkYgBdWKPOFoSoQIdEuTuR82pmtxH2spWG9h6etwfr1pLBqQ==}
    engines: {node: '>=6'}

  imurmurhash@0.1.4:
    resolution: {integrity: sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==}
    engines: {node: '>=0.8.19'}

  indent-string@4.0.0:
    resolution: {integrity: sha512-EdDDZu4A2OyIK7Lr/2zG+w5jmbuk1DVBnEwREQvBzspBJkCEbRa8GxU1lghYcaGJCnRWibjDXlq779X1/y5xwg==}
    engines: {node: '>=8'}

  input-otp@1.4.1:
    resolution: {integrity: sha512-+yvpmKYKHi9jIGngxagY9oWiiblPB7+nEO75F2l2o4vs+6vpPZZmUl4tBNYuTCvQjhvEIbdNeJu70bhfYP2nbw==}
    peerDependencies:
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0.0 || ^19.0.0-rc

  internal-slot@1.1.0:
    resolution: {integrity: sha512-4gd7VpWNQNB4UKKCFFVcp1AVv+FMOgs9NKzjHKusc8jTMhd5eL1NqQqOpE0KzMds804/yHlglp3uxgluOqAPLw==}
    engines: {node: '>= 0.4'}

  internmap@2.0.3:
    resolution: {integrity: sha512-5Hh7Y1wQbvY5ooGgPbDaL5iYLAPzMTUrjMulskHLH6wnv/A+1q5rgEaiuqEjB+oxGXIVZs1FF+R/KPN3ZSQYYg==}
    engines: {node: '>=12'}

  is-array-buffer@3.0.5:
    resolution: {integrity: sha512-DDfANUiiG2wC1qawP66qlTugJeL5HyzMpfr8lLK+jMQirGzNod0B12cFB/9q838Ru27sBwfw78/rdoU7RERz6A==}
    engines: {node: '>= 0.4'}

  is-arrayish@0.3.2:
    resolution: {integrity: sha512-eVRqCvVlZbuw3GrM63ovNSNAeA1K16kaR/LRY/92w0zxQ5/1YzwblUX652i4Xs9RwAGjW9d9y6X88t8OaAJfWQ==}

  is-async-function@2.1.1:
    resolution: {integrity: sha512-9dgM/cZBnNvjzaMYHVoxxfPj2QXt22Ev7SuuPrs+xav0ukGB0S6d4ydZdEiM48kLx5kDV+QBPrpVnFyefL8kkQ==}
    engines: {node: '>= 0.4'}

  is-bigint@1.1.0:
    resolution: {integrity: sha512-n4ZT37wG78iz03xPRKJrHTdZbe3IicyucEtdRsV5yglwc3GyUfbAfpSeD0FJ41NbUNSt5wbhqfp1fS+BgnvDFQ==}
    engines: {node: '>= 0.4'}

  is-binary-path@2.1.0:
    resolution: {integrity: sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==}
    engines: {node: '>=8'}

  is-boolean-object@1.2.2:
    resolution: {integrity: sha512-wa56o2/ElJMYqjCjGkXri7it5FbebW5usLw/nPmCMs5DeZ7eziSYZhSmPRn0txqeW4LnAmQQU7FgqLpsEFKM4A==}
    engines: {node: '>= 0.4'}

  is-bun-module@2.0.0:
    resolution: {integrity: sha512-gNCGbnnnnFAUGKeZ9PdbyeGYJqewpmc2aKHUEMO5nQPWU9lOmv7jcmQIv+qHD8fXW6W7qfuCwX4rY9LNRjXrkQ==}

  is-callable@1.2.7:
    resolution: {integrity: sha512-1BC0BVFhS/p0qtw6enp8e+8OD0UrK0oFLztSjNzhcKA3WDuJxxAPXzPuPtKkjEY9UUoEWlX/8fgKeu2S8i9JTA==}
    engines: {node: '>= 0.4'}

  is-core-module@2.16.1:
    resolution: {integrity: sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==}
    engines: {node: '>= 0.4'}

  is-data-view@1.0.2:
    resolution: {integrity: sha512-RKtWF8pGmS87i2D6gqQu/l7EYRlVdfzemCJN/P3UOs//x1QE7mfhvzHIApBTRf7axvT6DMGwSwBXYCT0nfB9xw==}
    engines: {node: '>= 0.4'}

  is-date-object@1.1.0:
    resolution: {integrity: sha512-PwwhEakHVKTdRNVOw+/Gyh0+MzlCl4R6qKvkhuvLtPMggI1WAHt9sOwZxQLSGpUaDnrdyDsomoRgNnCfKNSXXg==}
    engines: {node: '>= 0.4'}

  is-extglob@2.1.1:
    resolution: {integrity: sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==}
    engines: {node: '>=0.10.0'}

  is-finalizationregistry@1.1.1:
    resolution: {integrity: sha512-1pC6N8qWJbWoPtEjgcL2xyhQOP491EQjeUo3qTKcmV8YSDDJrOepfG8pcC7h/QgnQHYSv0mJ3Z/ZWxmatVrysg==}
    engines: {node: '>= 0.4'}

  is-fullwidth-code-point@3.0.0:
    resolution: {integrity: sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==}
    engines: {node: '>=8'}

  is-generator-function@1.1.0:
    resolution: {integrity: sha512-nPUB5km40q9e8UfN/Zc24eLlzdSf9OfKByBw9CIdw4H1giPMeA0OIJvbchsCu4npfI2QcMVBsGEBHKZ7wLTWmQ==}
    engines: {node: '>= 0.4'}

  is-glob@4.0.3:
    resolution: {integrity: sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==}
    engines: {node: '>=0.10.0'}

  is-map@2.0.3:
    resolution: {integrity: sha512-1Qed0/Hr2m+YqxnM09CjA2d/i6YZNfF6R2oRAOj36eUdS6qIV/huPJNSEpKbupewFs+ZsJlxsjjPbc0/afW6Lw==}
    engines: {node: '>= 0.4'}

  is-negative-zero@2.0.3:
    resolution: {integrity: sha512-5KoIu2Ngpyek75jXodFvnafB6DJgr3u8uuK0LEZJjrU19DrMD3EVERaR8sjz8CCGgpZvxPl9SuE1GMVPFHx1mw==}
    engines: {node: '>= 0.4'}

  is-number-object@1.1.1:
    resolution: {integrity: sha512-lZhclumE1G6VYD8VHe35wFaIif+CTy5SJIi5+3y4psDgWu4wPDoBhF8NxUOinEc7pHgiTsT6MaBb92rKhhD+Xw==}
    engines: {node: '>= 0.4'}

  is-number@7.0.0:
    resolution: {integrity: sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==}
    engines: {node: '>=0.12.0'}

  is-potential-custom-element-name@1.0.1:
    resolution: {integrity: sha512-bCYeRA2rVibKZd+s2625gGnGF/t7DSqDs4dP7CrLA1m7jKWz6pps0LpYLJN8Q64HtmPKJ1hrN3nzPNKFEKOUiQ==}

  is-regex@1.2.1:
    resolution: {integrity: sha512-MjYsKHO5O7mCsmRGxWcLWheFqN9DJ/2TmngvjKXihe6efViPqc274+Fx/4fYj/r03+ESvBdTXK0V6tA3rgez1g==}
    engines: {node: '>= 0.4'}

  is-set@2.0.3:
    resolution: {integrity: sha512-iPAjerrse27/ygGLxw+EBR9agv9Y6uLeYVJMu+QNCoouJ1/1ri0mGrcWpfCqFZuzzx3WjtwxG098X+n4OuRkPg==}
    engines: {node: '>= 0.4'}

  is-shared-array-buffer@1.0.4:
    resolution: {integrity: sha512-ISWac8drv4ZGfwKl5slpHG9OwPNty4jOWPRIhBpxOoD+hqITiwuipOQ2bNthAzwA3B4fIjO4Nln74N0S9byq8A==}
    engines: {node: '>= 0.4'}

  is-string@1.1.1:
    resolution: {integrity: sha512-BtEeSsoaQjlSPBemMQIrY1MY0uM6vnS1g5fmufYOtnxLGUZM2178PKbhsk7Ffv58IX+ZtcvoGwccYsh0PglkAA==}
    engines: {node: '>= 0.4'}

  is-symbol@1.1.1:
    resolution: {integrity: sha512-9gGx6GTtCQM73BgmHQXfDmLtfjjTUDSyoxTCbp5WtoixAhfgsDirWIcVQ/IHpvI5Vgd5i/J5F7B9cN/WlVbC/w==}
    engines: {node: '>= 0.4'}

  is-typed-array@1.1.15:
    resolution: {integrity: sha512-p3EcsicXjit7SaskXHs1hA91QxgTw46Fv6EFKKGS5DRFLD8yKnohjF3hxoju94b/OcMZoQukzpPpBE9uLVKzgQ==}
    engines: {node: '>= 0.4'}

  is-weakmap@2.0.2:
    resolution: {integrity: sha512-K5pXYOm9wqY1RgjpL3YTkF39tni1XajUIkawTLUo9EZEVUFga5gSQJF8nNS7ZwJQ02y+1YCNYcMh+HIf1ZqE+w==}
    engines: {node: '>= 0.4'}

  is-weakref@1.1.1:
    resolution: {integrity: sha512-6i9mGWSlqzNMEqpCp93KwRS1uUOodk2OJ6b+sq7ZPDSy2WuI5NFIxp/254TytR8ftefexkWn5xNiHUNpPOfSew==}
    engines: {node: '>= 0.4'}

  is-weakset@2.0.4:
    resolution: {integrity: sha512-mfcwb6IzQyOKTs84CQMrOwW4gQcaTOAWJ0zzJCl2WSPDrWk/OzDaImWFH3djXhb24g4eudZfLRozAvPGw4d9hQ==}
    engines: {node: '>= 0.4'}

  isarray@2.0.5:
    resolution: {integrity: sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==}

  isexe@2.0.0:
    resolution: {integrity: sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==}

  iterator.prototype@1.1.5:
    resolution: {integrity: sha512-H0dkQoCa3b2VEeKQBOxFph+JAbcrQdE7KC0UkqwpLmv2EC4P41QXP+rqo9wYodACiG5/WM5s9oDApTU8utwj9g==}
    engines: {node: '>= 0.4'}

  jackspeak@3.4.3:
    resolution: {integrity: sha512-OGlZQpz2yfahA/Rd1Y8Cd9SIEsqvXkLVoSw/cgwhnhFMDbsQFeZYoJJ7bIZBS9BcamUW96asq/npPWugM+RQBw==}

  jiti@1.21.7:
    resolution: {integrity: sha512-/imKNG4EbWNrVjoNC/1H5/9GFy+tqjGBHCaSsN+P2RnPqjsLmv6UD3Ej+Kj8nBWaRAwyk7kK5ZUc+OEatnTR3A==}
    hasBin: true

  js-tokens@4.0.0:
    resolution: {integrity: sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==}

  js-tokens@9.0.1:
    resolution: {integrity: sha512-mxa9E9ITFOt0ban3j6L5MpjwegGz6lBQmM1IJkWeBZGcMxto50+eWdjC/52xDbS2vy0k7vIMK0Fe2wfL9OQSpQ==}

  js-yaml@4.1.0:
    resolution: {integrity: sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==}
    hasBin: true

  jsdom@26.1.0:
    resolution: {integrity: sha512-Cvc9WUhxSMEo4McES3P7oK3QaXldCfNWp7pl2NNeiIFlCoLr3kfq9kb1fxftiwk1FLV7CvpvDfonxtzUDeSOPg==}
    engines: {node: '>=18'}
    peerDependencies:
      canvas: ^3.0.0
    peerDependenciesMeta:
      canvas:
        optional: true

  jsesc@3.1.0:
    resolution: {integrity: sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==}
    engines: {node: '>=6'}
    hasBin: true

  json-buffer@3.0.1:
    resolution: {integrity: sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==}

  json-schema-traverse@0.4.1:
    resolution: {integrity: sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==}

  json-stable-stringify-without-jsonify@1.0.1:
    resolution: {integrity: sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==}

  json5@1.0.2:
    resolution: {integrity: sha512-g1MWMLBiz8FKi1e4w0UyVL3w+iJceWAFBAaBnnGKOpNa5f8TLktkbre1+s6oICydWAm+HRUGTmI+//xv2hvXYA==}
    hasBin: true

  json5@2.2.3:
    resolution: {integrity: sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==}
    engines: {node: '>=6'}
    hasBin: true

  jsx-ast-utils@3.3.5:
    resolution: {integrity: sha512-ZZow9HBI5O6EPgSJLUb8n2NKgmVWTwCvHGwFuJlMjvLFqlGG6pjirPhtdsseaLZjSibD8eegzmYpUZwoIlj2cQ==}
    engines: {node: '>=4.0'}

  keyv@4.5.4:
    resolution: {integrity: sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==}

  language-subtag-registry@0.3.23:
    resolution: {integrity: sha512-0K65Lea881pHotoGEa5gDlMxt3pctLi2RplBb7Ezh4rRdLEOtgi7n4EwK9lamnUCkKBqaeKRVebTq6BAxSkpXQ==}

  language-tags@1.0.9:
    resolution: {integrity: sha512-MbjN408fEndfiQXbFQ1vnd+1NoLDsnQW41410oQBXiyXDMYH5z505juWa4KUE1LqxRC7DgOgZDbKLxHIwm27hA==}
    engines: {node: '>=0.10'}

  levn@0.4.1:
    resolution: {integrity: sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==}
    engines: {node: '>= 0.8.0'}

  lilconfig@3.1.3:
    resolution: {integrity: sha512-/vlFKAoH5Cgt3Ie+JLhRbwOsCQePABiU3tJ1egGvyQ+33R/vcwM2Zl2QR/LzjsBeItPt3oSVXapn+m4nQDvpzw==}
    engines: {node: '>=14'}

  lines-and-columns@1.2.4:
    resolution: {integrity: sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==}

  locate-path@6.0.0:
    resolution: {integrity: sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==}
    engines: {node: '>=10'}

  lodash.merge@4.6.2:
    resolution: {integrity: sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==}

  lodash@4.17.21:
    resolution: {integrity: sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==}

  loose-envify@1.4.0:
    resolution: {integrity: sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==}
    hasBin: true

  loupe@3.1.4:
    resolution: {integrity: sha512-wJzkKwJrheKtknCOKNEtDK4iqg/MxmZheEMtSTYvnzRdEYaZzmgH976nenp8WdJRdx5Vc1X/9MO0Oszl6ezeXg==}

  lru-cache@10.4.3:
    resolution: {integrity: sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ==}

  lru-cache@5.1.1:
    resolution: {integrity: sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==}

  lucide-react@0.454.0:
    resolution: {integrity: sha512-hw7zMDwykCLnEzgncEEjHeA6+45aeEzRYuKHuyRSOPkhko+J3ySGjGIzu+mmMfDFG1vazHepMaYFYHbTFAZAAQ==}
    peerDependencies:
      react: ^16.5.1 || ^17.0.0 || ^18.0.0 || ^19.0.0-rc

  lz-string@1.5.0:
    resolution: {integrity: sha512-h5bgJWpxJNswbU7qCrV0tIKQCaS3blPDrqKWx+QxzuzL1zGUzij9XCWLrSLsJPu5t+eWA/ycetzYAO5IOMcWAQ==}
    hasBin: true

  magic-string@0.30.17:
    resolution: {integrity: sha512-sNPKHvyjVf7gyjwS4xGTaW/mCnF8wnjtifKBEhxfZ7E/S8tQ0rssrwGNn6q8JH/ohItJfSQp9mBtQYuTlH5QnA==}

  marked@4.3.0:
    resolution: {integrity: sha512-PRsaiG84bK+AMvxziE/lCFss8juXjNaWzVbN5tXAm4XjeaS9NAHhop+PjQxz2A9h8Q4M/xGmzP8vqNwy6JeK0A==}
    engines: {node: '>= 12'}
    hasBin: true

  math-intrinsics@1.1.0:
    resolution: {integrity: sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==}
    engines: {node: '>= 0.4'}

  merge2@1.4.1:
    resolution: {integrity: sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==}
    engines: {node: '>= 8'}

  micromatch@4.0.8:
    resolution: {integrity: sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==}
    engines: {node: '>=8.6'}

  mime-db@1.52.0:
    resolution: {integrity: sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==}
    engines: {node: '>= 0.6'}

  mime-types@2.1.35:
    resolution: {integrity: sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==}
    engines: {node: '>= 0.6'}

  min-indent@1.0.1:
    resolution: {integrity: sha512-I9jwMn07Sy/IwOj3zVkVik2JTvgpaykDZEigL6Rx6N9LbMywwUSMtxET+7lVoDLLd3O3IXwJwvuuns8UB/HeAg==}
    engines: {node: '>=4'}

  minimatch@3.1.2:
    resolution: {integrity: sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==}

  minimatch@9.0.5:
    resolution: {integrity: sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==}
    engines: {node: '>=16 || 14 >=14.17'}

  minimist@1.2.8:
    resolution: {integrity: sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==}

  minipass@7.1.2:
    resolution: {integrity: sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==}
    engines: {node: '>=16 || 14 >=14.17'}

  mrmime@2.0.1:
    resolution: {integrity: sha512-Y3wQdFg2Va6etvQ5I82yUhGdsKrcYox6p7FfL1LbK2J4V01F9TGlepTIhnK24t7koZibmg82KGglhA1XK5IsLQ==}
    engines: {node: '>=10'}

  ms@2.1.3:
    resolution: {integrity: sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==}

  mz@2.7.0:
    resolution: {integrity: sha512-z81GNO7nnYMEhrGh9LeymoE4+Yr0Wn5McHIZMK5cfQCl+NDX08sCZgUc9/6MHni9IWuFLm1Z3HTCXu2z9fN62Q==}

  nanoid@3.3.11:
    resolution: {integrity: sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==}
    engines: {node: ^10 || ^12 || ^13.7 || ^14 || >=15.0.1}
    hasBin: true

  napi-postinstall@0.3.0:
    resolution: {integrity: sha512-M7NqKyhODKV1gRLdkwE7pDsZP2/SC2a2vHkOYh9MCpKMbWVfyVfUw5MaH83Fv6XMjxr5jryUp3IDDL9rlxsTeA==}
    engines: {node: ^12.20.0 || ^14.18.0 || >=16.0.0}
    hasBin: true

  natural-compare@1.4.0:
    resolution: {integrity: sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==}

  next-themes@0.4.6:
    resolution: {integrity: sha512-pZvgD5L0IEvX5/9GWyHMf3m8BKiVQwsCMHfoFosXtXBMnaS0ZnIJ9ST4b4NqLVKDEm8QBxoNNGNaBv2JNF6XNA==}
    peerDependencies:
      react: ^16.8 || ^17 || ^18 || ^19 || ^19.0.0-rc
      react-dom: ^16.8 || ^17 || ^18 || ^19 || ^19.0.0-rc

  next@15.2.4:
    resolution: {integrity: sha512-VwL+LAaPSxEkd3lU2xWbgEOtrM8oedmyhBqaVNmgKB+GvZlCy9rgaEc+y2on0wv+l0oSFqLtYD6dcC1eAedUaQ==}
    engines: {node: ^18.18.0 || ^19.8.0 || >= 20.0.0}
    hasBin: true
    peerDependencies:
      '@opentelemetry/api': ^1.1.0
      '@playwright/test': ^1.41.2
      babel-plugin-react-compiler: '*'
      react: ^18.2.0 || 19.0.0-rc-de68d2f4-20241204 || ^19.0.0
      react-dom: ^18.2.0 || 19.0.0-rc-de68d2f4-20241204 || ^19.0.0
      sass: ^1.3.0
    peerDependenciesMeta:
      '@opentelemetry/api':
        optional: true
      '@playwright/test':
        optional: true
      babel-plugin-react-compiler:
        optional: true
      sass:
        optional: true

  node-releases@2.0.19:
    resolution: {integrity: sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw==}

  normalize-path@3.0.0:
    resolution: {integrity: sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==}
    engines: {node: '>=0.10.0'}

  normalize-range@0.1.2:
    resolution: {integrity: sha512-bdok/XvKII3nUpklnV6P2hxtMNrCboOjAcyBuQnWEhO665FwrSNRxU+AqpsyvO6LgGYPspN+lu5CLtw4jPRKNA==}
    engines: {node: '>=0.10.0'}

  nwsapi@2.2.20:
    resolution: {integrity: sha512-/ieB+mDe4MrrKMT8z+mQL8klXydZWGR5Dowt4RAGKbJ3kIGEx3X4ljUo+6V73IXtUPWgfOlU5B9MlGxFO5T+cA==}

  object-assign@4.1.1:
    resolution: {integrity: sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==}
    engines: {node: '>=0.10.0'}

  object-hash@3.0.0:
    resolution: {integrity: sha512-RSn9F68PjH9HqtltsSnqYC1XXoWe9Bju5+213R98cNGttag9q9yAOTzdbsqvIa7aNm5WffBZFpWYr2aWrklWAw==}
    engines: {node: '>= 6'}

  object-inspect@1.13.4:
    resolution: {integrity: sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==}
    engines: {node: '>= 0.4'}

  object-keys@1.1.1:
    resolution: {integrity: sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==}
    engines: {node: '>= 0.4'}

  object.assign@4.1.7:
    resolution: {integrity: sha512-nK28WOo+QIjBkDduTINE4JkF/UJJKyf2EJxvJKfblDpyg0Q+pkOHNTL0Qwy6NP6FhE/EnzV73BxxqcJaXY9anw==}
    engines: {node: '>= 0.4'}

  object.entries@1.1.9:
    resolution: {integrity: sha512-8u/hfXFRBD1O0hPUjioLhoWFHRmt6tKA4/vZPyckBr18l1KE9uHrFaFaUi8MDRTpi4uak2goyPTSNJLXX2k2Hw==}
    engines: {node: '>= 0.4'}

  object.fromentries@2.0.8:
    resolution: {integrity: sha512-k6E21FzySsSK5a21KRADBd/NGneRegFO5pLHfdQLpRDETUNJueLXs3WCzyQ3tFRDYgbq3KHGXfTbi2bs8WQ6rQ==}
    engines: {node: '>= 0.4'}

  object.groupby@1.0.3:
    resolution: {integrity: sha512-+Lhy3TQTuzXI5hevh8sBGqbmurHbbIjAi0Z4S63nthVLmLxfbj4T54a4CfZrXIrt9iP4mVAPYMo/v99taj3wjQ==}
    engines: {node: '>= 0.4'}

  object.values@1.2.1:
    resolution: {integrity: sha512-gXah6aZrcUxjWg2zR2MwouP2eHlCBzdV4pygudehaKXSGW4v2AsRQUK+lwwXhii6KFZcunEnmSUoYp5CXibxtA==}
    engines: {node: '>= 0.4'}

  optionator@0.9.4:
    resolution: {integrity: sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==}
    engines: {node: '>= 0.8.0'}

  own-keys@1.0.1:
    resolution: {integrity: sha512-qFOyK5PjiWZd+QQIh+1jhdb9LpxTF0qs7Pm8o5QHYZ0M3vKqSqzsZaEB6oWlxZ+q2sJBMI/Ktgd2N5ZwQoRHfg==}
    engines: {node: '>= 0.4'}

  p-limit@3.1.0:
    resolution: {integrity: sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==}
    engines: {node: '>=10'}

  p-locate@5.0.0:
    resolution: {integrity: sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==}
    engines: {node: '>=10'}

  package-json-from-dist@1.0.1:
    resolution: {integrity: sha512-UEZIS3/by4OC8vL3P2dTXRETpebLI2NiI5vIrjaD/5UtrkFX/tNbwjTSRAGC/+7CAo2pIcBaRgWmcBBHcsaCIw==}

  parent-module@1.0.1:
    resolution: {integrity: sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==}
    engines: {node: '>=6'}

  parse5@7.3.0:
    resolution: {integrity: sha512-IInvU7fabl34qmi9gY8XOVxhYyMyuH2xUNpb2q8/Y+7552KlejkRvqvD19nMoUW/uQGGbqNpA6Tufu5FL5BZgw==}

  path-exists@4.0.0:
    resolution: {integrity: sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==}
    engines: {node: '>=8'}

  path-key@3.1.1:
    resolution: {integrity: sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==}
    engines: {node: '>=8'}

  path-parse@1.0.7:
    resolution: {integrity: sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==}

  path-scurry@1.11.1:
    resolution: {integrity: sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==}
    engines: {node: '>=16 || 14 >=14.18'}

  pathe@2.0.3:
    resolution: {integrity: sha512-WUjGcAqP1gQacoQe+OBJsFA7Ld4DyXuUIjZ5cc75cLHvJ7dtNsTugphxIADwspS+AraAUePCKrSVtPLFj/F88w==}

  pathval@2.0.1:
    resolution: {integrity: sha512-//nshmD55c46FuFw26xV/xFAaB5HF9Xdap7HJBBnrKdAd6/GxDBaNA1870O79+9ueg61cZLSVc+OaFlfmObYVQ==}
    engines: {node: '>= 14.16'}

  picocolors@1.1.1:
    resolution: {integrity: sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==}

  picomatch@2.3.1:
    resolution: {integrity: sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==}
    engines: {node: '>=8.6'}

  picomatch@4.0.2:
    resolution: {integrity: sha512-M7BAV6Rlcy5u+m6oPhAPFgJTzAioX/6B0DxyvDlo9l8+T3nLKbrczg2WLUyzd45L8RqfUMyGPzekbMvX2Ldkwg==}
    engines: {node: '>=12'}

  pify@2.3.0:
    resolution: {integrity: sha512-udgsAY+fTnvv7kI7aaxbqwWNb0AHiB0qBO89PZKPkoTmGOgdbrHDKD+0B2X4uTfJ/FT1R09r9gTsjUjNJotuog==}
    engines: {node: '>=0.10.0'}

  pirates@4.0.7:
    resolution: {integrity: sha512-TfySrs/5nm8fQJDcBDuUng3VOUKsd7S+zqvbOTiGXHfxX4wK31ard+hoNuvkicM/2YFzlpDgABOevKSsB4G/FA==}
    engines: {node: '>= 6'}

  playwright-core@1.53.2:
    resolution: {integrity: sha512-ox/OytMy+2w1jcYEYlOo1Hhp8hZkLCximMTUTMBXjGUA1KoFfiSZ+DU+3a739jsPY0yoKH2TFy9S2fsJas8yAw==}
    engines: {node: '>=18'}
    hasBin: true

  playwright@1.53.2:
    resolution: {integrity: sha512-6K/qQxVFuVQhRQhFsVZ9fGeatxirtrpPgxzBYWyZLEXJzqYwuL4fuNmfOfD5et1tJE4GScKyPNeLhZeRwuTU3A==}
    engines: {node: '>=18'}
    hasBin: true

  possible-typed-array-names@1.1.0:
    resolution: {integrity: sha512-/+5VFTchJDoVj3bhoqi6UeymcD00DAwb1nJwamzPvHEszJ4FpF6SNNbUbOS8yI56qHzdV8eK0qEfOSiodkTdxg==}
    engines: {node: '>= 0.4'}

  postcss-import@15.1.0:
    resolution: {integrity: sha512-hpr+J05B2FVYUAXHeK1YyI267J/dDDhMU6B6civm8hSY1jYJnBXxzKDKDswzJmtLHryrjhnDjqqp/49t8FALew==}
    engines: {node: '>=14.0.0'}
    peerDependencies:
      postcss: ^8.0.0

  postcss-js@4.0.1:
    resolution: {integrity: sha512-dDLF8pEO191hJMtlHFPRa8xsizHaM82MLfNkUHdUtVEV3tgTp5oj+8qbEqYM57SLfc74KSbw//4SeJma2LRVIw==}
    engines: {node: ^12 || ^14 || >= 16}
    peerDependencies:
      postcss: ^8.4.21

  postcss-load-config@4.0.2:
    resolution: {integrity: sha512-bSVhyJGL00wMVoPUzAVAnbEoWyqRxkjv64tUl427SKnPrENtq6hJwUojroMz2VB+Q1edmi4IfrAPpami5VVgMQ==}
    engines: {node: '>= 14'}
    peerDependencies:
      postcss: '>=8.0.9'
      ts-node: '>=9.0.0'
    peerDependenciesMeta:
      postcss:
        optional: true
      ts-node:
        optional: true

  postcss-nested@6.2.0:
    resolution: {integrity: sha512-HQbt28KulC5AJzG+cZtj9kvKB93CFCdLvog1WFLf1D+xmMvPGlBstkpTEZfK5+AN9hfJocyBFCNiqyS48bpgzQ==}
    engines: {node: '>=12.0'}
    peerDependencies:
      postcss: ^8.2.14

  postcss-selector-parser@6.1.2:
    resolution: {integrity: sha512-Q8qQfPiZ+THO/3ZrOrO0cJJKfpYCagtMUkXbnEfmgUjwXg6z/WBeOyS9APBBPCTSiDV+s4SwQGu8yFsiMRIudg==}
    engines: {node: '>=4'}

  postcss-value-parser@4.2.0:
    resolution: {integrity: sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ==}

  postcss@8.4.31:
    resolution: {integrity: sha512-PS08Iboia9mts/2ygV3eLpY5ghnUcfLV/EXTOW1E2qYxJKGGBUtNjN76FYHnMs36RmARn41bC0AZmn+rR0OVpQ==}
    engines: {node: ^10 || ^12 || >=14}

  postcss@8.5.6:
    resolution: {integrity: sha512-3Ybi1tAuwAP9s0r1UQ2J4n5Y0G05bJkpUIO0/bI9MhwmD70S5aTWbXGBwxHrelT+XM1k6dM0pk+SwNkpTRN7Pg==}
    engines: {node: ^10 || ^12 || >=14}

  prelude-ls@1.2.1:
    resolution: {integrity: sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==}
    engines: {node: '>= 0.8.0'}

  pretty-format@27.5.1:
    resolution: {integrity: sha512-Qb1gy5OrP5+zDf2Bvnzdl3jsTf1qXVMazbvCoKhtKqVs4/YK4ozX4gKQJJVyNe+cajNPn0KoC0MC3FUmaHWEmQ==}
    engines: {node: ^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0}

  prop-types@15.8.1:
    resolution: {integrity: sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==}

  proxy-from-env@1.1.0:
    resolution: {integrity: sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==}

  punycode@2.3.1:
    resolution: {integrity: sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==}
    engines: {node: '>=6'}

  queue-microtask@1.2.3:
    resolution: {integrity: sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==}

  react-day-picker@8.10.1:
    resolution: {integrity: sha512-TMx7fNbhLk15eqcMt+7Z7S2KF7mfTId/XJDjKE8f+IUcFn0l08/kI4FiYTL/0yuOLmEcbR4Fwe3GJf/NiiMnPA==}
    peerDependencies:
      date-fns: ^2.28.0 || ^3.0.0
      react: ^16.8.0 || ^17.0.0 || ^18.0.0

  react-dom@19.1.0:
    resolution: {integrity: sha512-Xs1hdnE+DyKgeHJeJznQmYMIBG3TKIHJJT95Q58nHLSrElKlGQqDTR2HQ9fx5CN/Gk6Vh/kupBTDLU11/nDk/g==}
    peerDependencies:
      react: ^19.1.0

  react-hook-form@7.59.0:
    resolution: {integrity: sha512-kmkek2/8grqarTJExFNjy+RXDIP8yM+QTl3QL6m6Q8b2bih4ltmiXxH7T9n+yXNK477xPh5yZT/6vD8sYGzJTA==}
    engines: {node: '>=18.0.0'}
    peerDependencies:
      react: ^16.8.0 || ^17 || ^18 || ^19

  react-is@16.13.1:
    resolution: {integrity: sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==}

  react-is@17.0.2:
    resolution: {integrity: sha512-w2GsyukL62IJnlaff/nRegPQR94C/XXamvMWmSHRJ4y7Ts/4ocGRmTHvOs8PSE6pB3dWOrD/nueuU5sduBsQ4w==}

  react-is@18.3.1:
    resolution: {integrity: sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==}

  react-refresh@0.17.0:
    resolution: {integrity: sha512-z6F7K9bV85EfseRCp2bzrpyQ0Gkw1uLoCel9XBVWPg/TjRj94SkJzUTGfOa4bs7iJvBWtQG0Wq7wnI0syw3EBQ==}
    engines: {node: '>=0.10.0'}

  react-remove-scroll-bar@2.3.8:
    resolution: {integrity: sha512-9r+yi9+mgU33AKcj6IbT9oRCO78WriSj6t/cF8DWBZJ9aOGPOTEDvdUDz1FwKim7QXWwmHqtdHnRJfhAxEG46Q==}
    engines: {node: '>=10'}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true

  react-remove-scroll@2.7.1:
    resolution: {integrity: sha512-HpMh8+oahmIdOuS5aFKKY6Pyog+FNaZV/XyJOq7b4YFwsFHe5yYfdbIalI4k3vU2nSDql7YskmUseHsRrJqIPA==}
    engines: {node: '>=10'}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  react-resizable-panels@2.1.9:
    resolution: {integrity: sha512-z77+X08YDIrgAes4jl8xhnUu1LNIRp4+E7cv4xHmLOxxUPO/ML7PSrE813b90vj7xvQ1lcf7g2uA9GeMZonjhQ==}
    peerDependencies:
      react: ^16.14.0 || ^17.0.0 || ^18.0.0 || ^19.0.0 || ^19.0.0-rc
      react-dom: ^16.14.0 || ^17.0.0 || ^18.0.0 || ^19.0.0 || ^19.0.0-rc

  react-simplemde-editor@5.2.0:
    resolution: {integrity: sha512-GkTg1MlQHVK2Rks++7sjuQr/GVS/xm6y+HchZ4GPBWrhcgLieh4CjK04GTKbsfYorSRYKa0n37rtNSJmOzEDkQ==}
    peerDependencies:
      easymde: '>= 2.0.0 < 3.0.0'
      react: '>=16.8.2'
      react-dom: '>=16.8.2'

  react-smooth@4.0.4:
    resolution: {integrity: sha512-gnGKTpYwqL0Iii09gHobNolvX4Kiq4PKx6eWBCYYix+8cdw+cGo3do906l1NBPKkSWx1DghC1dlWG9L2uGd61Q==}
    peerDependencies:
      react: ^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0
      react-dom: ^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0

  react-style-singleton@2.2.3:
    resolution: {integrity: sha512-b6jSvxvVnyptAiLjbkWLE/lOnR4lfTtDAl+eUC7RZy+QQWc6wRzIV2CE6xBuMmDxc2qIihtDCZD5NPOFl7fRBQ==}
    engines: {node: '>=10'}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  react-transition-group@4.4.5:
    resolution: {integrity: sha512-pZcd1MCJoiKiBR2NRxeCRg13uCXbydPnmB4EOeRrY7480qNWO8IIgQG6zlDkm6uRMsURXPuKq0GWtiM59a5Q6g==}
    peerDependencies:
      react: '>=16.6.0'
      react-dom: '>=16.6.0'

  react@19.1.0:
    resolution: {integrity: sha512-FS+XFBNvn3GTAWq26joslQgWNoFu08F4kl0J4CgdNKADkdSGXQyTCnKteIAJy96Br6YbpEU1LSzV5dYtjMkMDg==}
    engines: {node: '>=0.10.0'}

  read-cache@1.0.0:
    resolution: {integrity: sha512-Owdv/Ft7IjOgm/i0xvNDZ1LrRANRfew4b2prF3OWMQLxLfu3bS8FVhCsrSCMK4lR56Y9ya+AThoTpDCTxCmpRA==}

  readdirp@3.6.0:
    resolution: {integrity: sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==}
    engines: {node: '>=8.10.0'}

  recharts-scale@0.4.5:
    resolution: {integrity: sha512-kivNFO+0OcUNu7jQquLXAxz1FIwZj8nrj+YkOKc5694NbjCvcT6aSZiIzNzd2Kul4o4rTto8QVR9lMNtxD4G1w==}

  recharts@2.15.0:
    resolution: {integrity: sha512-cIvMxDfpAmqAmVgc4yb7pgm/O1tmmkl/CjrvXuW+62/+7jj/iF9Ykm+hb/UJt42TREHMyd3gb+pkgoa2MxgDIw==}
    engines: {node: '>=14'}
    peerDependencies:
      react: ^16.0.0 || ^17.0.0 || ^18.0.0 || ^19.0.0
      react-dom: ^16.0.0 || ^17.0.0 || ^18.0.0 || ^19.0.0

  redent@3.0.0:
    resolution: {integrity: sha512-6tDA8g98We0zd0GvVeMT9arEOnTw9qM03L9cJXaCjrip1OO764RDBLBfrB4cwzNGDj5OA5ioymC9GkizgWJDUg==}
    engines: {node: '>=8'}

  reflect.getprototypeof@1.0.10:
    resolution: {integrity: sha512-00o4I+DVrefhv+nX0ulyi3biSHCPDe+yLv5o/p6d/UVlirijB8E16FtfwSAi4g3tcqrQ4lRAqQSoFEZJehYEcw==}
    engines: {node: '>= 0.4'}

  regexp.prototype.flags@1.5.4:
    resolution: {integrity: sha512-dYqgNSZbDwkaJ2ceRd9ojCGjBq+mOm9LmtXnAnEGyHhN/5R7iDW2TRw3h+o/jCFxus3P2LfWIIiwowAjANm7IA==}
    engines: {node: '>= 0.4'}

  resolve-from@4.0.0:
    resolution: {integrity: sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==}
    engines: {node: '>=4'}

  resolve-pkg-maps@1.0.0:
    resolution: {integrity: sha512-seS2Tj26TBVOC2NIc2rOe2y2ZO7efxITtLZcGSOnHHNOQ7CkiUBfw0Iw2ck6xkIhPwLhKNLS8BO+hEpngQlqzw==}

  resolve@1.22.10:
    resolution: {integrity: sha512-NPRy+/ncIMeDlTAsuqwKIiferiawhefFJtkNSW0qZJEqMEb+qBt/77B/jGeeek+F0uOeN05CDa6HXbbIgtVX4w==}
    engines: {node: '>= 0.4'}
    hasBin: true

  resolve@2.0.0-next.5:
    resolution: {integrity: sha512-U7WjGVG9sH8tvjW5SmGbQuui75FiyjAX72HX15DwBBwF9dNiQZRQAg9nnPhYy+TUnE0+VcrttuvNI8oSxZcocA==}
    hasBin: true

  reusify@1.1.0:
    resolution: {integrity: sha512-g6QUff04oZpHs0eG5p83rFLhHeV00ug/Yf9nZM6fLeUrPguBTkTQOdpAWWspMh55TZfVQDPaN3NQJfbVRAxdIw==}
    engines: {iojs: '>=1.0.0', node: '>=0.10.0'}

  rollup@4.44.1:
    resolution: {integrity: sha512-x8H8aPvD+xbl0Do8oez5f5o8eMS3trfCghc4HhLAnCkj7Vl0d1JWGs0UF/D886zLW2rOj2QymV/JcSSsw+XDNg==}
    engines: {node: '>=18.0.0', npm: '>=8.0.0'}
    hasBin: true

  rrweb-cssom@0.8.0:
    resolution: {integrity: sha512-guoltQEx+9aMf2gDZ0s62EcV8lsXR+0w8915TC3ITdn2YueuNjdAYh/levpU9nFaoChh9RUS5ZdQMrKfVEN9tw==}

  run-parallel@1.2.0:
    resolution: {integrity: sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==}

  safe-array-concat@1.1.3:
    resolution: {integrity: sha512-AURm5f0jYEOydBj7VQlVvDrjeFgthDdEF5H1dP+6mNpoXOMo1quQqJ4wvJDyRZ9+pO3kGWoOdmV08cSv2aJV6Q==}
    engines: {node: '>=0.4'}

  safe-push-apply@1.0.0:
    resolution: {integrity: sha512-iKE9w/Z7xCzUMIZqdBsp6pEQvwuEebH4vdpjcDWnyzaI6yl6O9FHvVpmGelvEHNsoY6wGblkxR6Zty/h00WiSA==}
    engines: {node: '>= 0.4'}

  safe-regex-test@1.1.0:
    resolution: {integrity: sha512-x/+Cz4YrimQxQccJf5mKEbIa1NzeCRNI5Ecl/ekmlYaampdNLPalVyIcCZNNH3MvmqBugV5TMYZXv0ljslUlaw==}
    engines: {node: '>= 0.4'}

  safer-buffer@2.1.2:
    resolution: {integrity: sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==}

  saxes@6.0.0:
    resolution: {integrity: sha512-xAg7SOnEhrm5zI3puOOKyy1OMcMlIJZYNJY7xLBwSze0UjhPLnWfj2GF2EpT0jmzaJKIWKHLsaSSajf35bcYnA==}
    engines: {node: '>=v12.22.7'}

  scheduler@0.26.0:
    resolution: {integrity: sha512-NlHwttCI/l5gCPR3D1nNXtWABUmBwvZpEQiD4IXSbIDq8BzLIK/7Ir5gTFSGZDUu37K5cMNp0hFtzO38sC7gWA==}

  semver@6.3.1:
    resolution: {integrity: sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==}
    hasBin: true

  semver@7.7.2:
    resolution: {integrity: sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==}
    engines: {node: '>=10'}
    hasBin: true

  set-function-length@1.2.2:
    resolution: {integrity: sha512-pgRc4hJ4/sNjWCSS9AmnS40x3bNMDTknHgL5UaMBTMyJnU90EgWh1Rz+MC9eFu4BuN/UwZjKQuY/1v3rM7HMfg==}
    engines: {node: '>= 0.4'}

  set-function-name@2.0.2:
    resolution: {integrity: sha512-7PGFlmtwsEADb0WYyvCMa1t+yke6daIG4Wirafur5kcf+MhUnPms1UeR0CKQdTZD81yESwMHbtn+TR+dMviakQ==}
    engines: {node: '>= 0.4'}

  set-proto@1.0.0:
    resolution: {integrity: sha512-RJRdvCo6IAnPdsvP/7m6bsQqNnn1FCBX5ZNtFL98MmFF/4xAIJTIg1YbHW5DC2W5SKZanrC6i4HsJqlajw/dZw==}
    engines: {node: '>= 0.4'}

  sharp@0.33.5:
    resolution: {integrity: sha512-haPVm1EkS9pgvHrQ/F3Xy+hgcuMV0Wm9vfIBSiwZ05k+xgb0PkBQpGsAA/oWdDobNaZTH5ppvHtzCFbnSEwHVw==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}

  shebang-command@2.0.0:
    resolution: {integrity: sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==}
    engines: {node: '>=8'}

  shebang-regex@3.0.0:
    resolution: {integrity: sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==}
    engines: {node: '>=8'}

  side-channel-list@1.0.0:
    resolution: {integrity: sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==}
    engines: {node: '>= 0.4'}

  side-channel-map@1.0.1:
    resolution: {integrity: sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==}
    engines: {node: '>= 0.4'}

  side-channel-weakmap@1.0.2:
    resolution: {integrity: sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==}
    engines: {node: '>= 0.4'}

  side-channel@1.1.0:
    resolution: {integrity: sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==}
    engines: {node: '>= 0.4'}

  siginfo@2.0.0:
    resolution: {integrity: sha512-ybx0WO1/8bSBLEWXZvEd7gMW3Sn3JFlW3TvX1nREbDLRNQNaeNN8WK0meBwPdAaOI7TtRRRJn/Es1zhrrCHu7g==}

  signal-exit@4.1.0:
    resolution: {integrity: sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==}
    engines: {node: '>=14'}

  simple-swizzle@0.2.2:
    resolution: {integrity: sha512-JA//kQgZtbuY83m+xT+tXJkmJncGMTFT+C+g2h2R9uxkYIrE2yy9sgmcLhCnw57/WSD+Eh3J97FPEDFnbXnDUg==}

  sirv@3.0.1:
    resolution: {integrity: sha512-FoqMu0NCGBLCcAkS1qA+XJIQTR6/JHfQXl+uGteNCQ76T91DMUjPa9xfmeqMY3z80nLSg9yQmNjK0Px6RWsH/A==}
    engines: {node: '>=18'}

  sonner@1.7.4:
    resolution: {integrity: sha512-DIS8z4PfJRbIyfVFDVnK9rO3eYDtse4Omcm6bt0oEr5/jtLgysmjuBl1frJ9E/EQZrFmKx2A8m/s5s9CRXIzhw==}
    peerDependencies:
      react: ^18.0.0 || ^19.0.0 || ^19.0.0-rc
      react-dom: ^18.0.0 || ^19.0.0 || ^19.0.0-rc

  source-map-js@1.2.1:
    resolution: {integrity: sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==}
    engines: {node: '>=0.10.0'}

  stable-hash@0.0.5:
    resolution: {integrity: sha512-+L3ccpzibovGXFK+Ap/f8LOS0ahMrHTf3xu7mMLSpEGU0EO9ucaysSylKo9eRDFNhWve/y275iPmIZ4z39a9iA==}

  stackback@0.0.2:
    resolution: {integrity: sha512-1XMJE5fQo1jGH6Y/7ebnwPOBEkIEnT4QF32d5R1+VXdXveM0IBMJt8zfaxX1P3QhVwrYe+576+jkANtSS2mBbw==}

  std-env@3.9.0:
    resolution: {integrity: sha512-UGvjygr6F6tpH7o2qyqR6QYpwraIjKSdtzyBdyytFOHmPZY917kwdwLG0RbOjWOnKmnm3PeHjaoLLMie7kPLQw==}

  stop-iteration-iterator@1.1.0:
    resolution: {integrity: sha512-eLoXW/DHyl62zxY4SCaIgnRhuMr6ri4juEYARS8E6sCEqzKpOiE521Ucofdx+KnDZl5xmvGYaaKCk5FEOxJCoQ==}
    engines: {node: '>= 0.4'}

  streamsearch@1.1.0:
    resolution: {integrity: sha512-Mcc5wHehp9aXz1ax6bZUyY5afg9u2rv5cqQI3mRrYkGC8rW2hM02jWuwjtL++LS5qinSyhj2QfLyNsuc+VsExg==}
    engines: {node: '>=10.0.0'}

  string-width@4.2.3:
    resolution: {integrity: sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==}
    engines: {node: '>=8'}

  string-width@5.1.2:
    resolution: {integrity: sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==}
    engines: {node: '>=12'}

  string.prototype.includes@2.0.1:
    resolution: {integrity: sha512-o7+c9bW6zpAdJHTtujeePODAhkuicdAryFsfVKwA+wGw89wJ4GTY484WTucM9hLtDEOpOvI+aHnzqnC5lHp4Rg==}
    engines: {node: '>= 0.4'}

  string.prototype.matchall@4.0.12:
    resolution: {integrity: sha512-6CC9uyBL+/48dYizRf7H7VAYCMCNTBeM78x/VTUe9bFEaxBepPJDa1Ow99LqI/1yF7kuy7Q3cQsYMrcjGUcskA==}
    engines: {node: '>= 0.4'}

  string.prototype.repeat@1.0.0:
    resolution: {integrity: sha512-0u/TldDbKD8bFCQ/4f5+mNRrXwZ8hg2w7ZR8wa16e8z9XpePWl3eGEcUD0OXpEH/VJH/2G3gjUtR3ZOiBe2S/w==}

  string.prototype.trim@1.2.10:
    resolution: {integrity: sha512-Rs66F0P/1kedk5lyYyH9uBzuiI/kNRmwJAR9quK6VOtIpZ2G+hMZd+HQbbv25MgCA6gEffoMZYxlTod4WcdrKA==}
    engines: {node: '>= 0.4'}

  string.prototype.trimend@1.0.9:
    resolution: {integrity: sha512-G7Ok5C6E/j4SGfyLCloXTrngQIQU3PWtXGst3yM7Bea9FRURf1S42ZHlZZtsNque2FN2PoUhfZXYLNWwEr4dLQ==}
    engines: {node: '>= 0.4'}

  string.prototype.trimstart@1.0.8:
    resolution: {integrity: sha512-UXSH262CSZY1tfu3G3Secr6uGLCFVPMhIqHjlgCUtCCcgihYc/xKs9djMTMUOb2j1mVSeU8EU6NWc/iQKU6Gfg==}
    engines: {node: '>= 0.4'}

  strip-ansi@6.0.1:
    resolution: {integrity: sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==}
    engines: {node: '>=8'}

  strip-ansi@7.1.0:
    resolution: {integrity: sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==}
    engines: {node: '>=12'}

  strip-bom@3.0.0:
    resolution: {integrity: sha512-vavAMRXOgBVNF6nyEEmL3DBK19iRpDcoIwW+swQ+CbGiu7lju6t+JklA1MHweoWtadgt4ISVUsXLyDq34ddcwA==}
    engines: {node: '>=4'}

  strip-indent@3.0.0:
    resolution: {integrity: sha512-laJTa3Jb+VQpaC6DseHhF7dXVqHTfJPCRDaEbid/drOhgitgYku/letMUqOXFoWV0zIIUbjpdH2t+tYj4bQMRQ==}
    engines: {node: '>=8'}

  strip-json-comments@3.1.1:
    resolution: {integrity: sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==}
    engines: {node: '>=8'}

  strip-literal@3.0.0:
    resolution: {integrity: sha512-TcccoMhJOM3OebGhSBEmp3UZ2SfDMZUEBdRA/9ynfLi8yYajyWX3JiXArcJt4Umh4vISpspkQIY8ZZoCqjbviA==}

  styled-jsx@5.1.6:
    resolution: {integrity: sha512-qSVyDTeMotdvQYoHWLNGwRFJHC+i+ZvdBRYosOFgC+Wg1vx4frN2/RG/NA7SYqqvKNLf39P2LSRA2pu6n0XYZA==}
    engines: {node: '>= 12.0.0'}
    peerDependencies:
      '@babel/core': '*'
      babel-plugin-macros: '*'
      react: '>= 16.8.0 || 17.x.x || ^18.0.0-0 || ^19.0.0-0'
    peerDependenciesMeta:
      '@babel/core':
        optional: true
      babel-plugin-macros:
        optional: true

  sucrase@3.35.0:
    resolution: {integrity: sha512-8EbVDiu9iN/nESwxeSxDKe0dunta1GOlHufmSSXxMD2z2/tMZpDMpvXQGsc+ajGo8y2uYUmixaSRUc/QPoQ0GA==}
    engines: {node: '>=16 || 14 >=14.17'}
    hasBin: true

  supports-color@7.2.0:
    resolution: {integrity: sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==}
    engines: {node: '>=8'}

  supports-preserve-symlinks-flag@1.0.0:
    resolution: {integrity: sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==}
    engines: {node: '>= 0.4'}

  symbol-tree@3.2.4:
    resolution: {integrity: sha512-9QNk5KwDF+Bvz+PyObkmSYjI5ksVUYtjW7AU22r2NKcfLJcXp96hkDWU3+XndOsUb+AQ9QhfzfCT2O+CNWT5Tw==}

  tailwind-merge@2.6.0:
    resolution: {integrity: sha512-P+Vu1qXfzediirmHOC3xKGAYeZtPcV9g76X+xg2FD4tYgR71ewMA35Y3sCz3zhiN/dwefRpJX0yBcgwi1fXNQA==}

  tailwindcss-animate@1.0.7:
    resolution: {integrity: sha512-bl6mpH3T7I3UFxuvDEXLxy/VuFxBk5bbzplh7tXI68mwMokNYd1t9qPBHlnyTwfa4JGC4zP516I1hYYtQ/vspA==}
    peerDependencies:
      tailwindcss: '>=3.0.0 || insiders'

  tailwindcss@3.4.17:
    resolution: {integrity: sha512-w33E2aCvSDP0tW9RZuNXadXlkHXqFzSkQew/aIa2i/Sj8fThxwovwlXHSPXTbAHwEIhBFXAedUhP2tueAKP8Og==}
    engines: {node: '>=14.0.0'}
    hasBin: true

  thenify-all@1.6.0:
    resolution: {integrity: sha512-RNxQH/qI8/t3thXJDwcstUO4zeqo64+Uy/+sNVRBx4Xn2OX+OZ9oP+iJnNFqplFra2ZUVeKCSa2oVWi3T4uVmA==}
    engines: {node: '>=0.8'}

  thenify@3.3.1:
    resolution: {integrity: sha512-RVZSIV5IG10Hk3enotrhvz0T9em6cyHBLkH/YAZuKqd8hRkKhSfCGIcP2KUY0EPxndzANBmNllzWPwak+bheSw==}

  tiny-invariant@1.3.3:
    resolution: {integrity: sha512-+FbBPE1o9QAYvviau/qC5SE3caw21q3xkvWKBtja5vgqOWIHHJ3ioaq1VPfn/Szqctz2bU/oYeKd9/z5BL+PVg==}

  tinybench@2.9.0:
    resolution: {integrity: sha512-0+DUvqWMValLmha6lr4kD8iAMK1HzV0/aKnCtWb9v9641TnP/MFb7Pc2bxoxQjTXAErryXVgUOfv2YqNllqGeg==}

  tinyexec@0.3.2:
    resolution: {integrity: sha512-KQQR9yN7R5+OSwaK0XQoj22pwHoTlgYqmUscPYoknOoWCWfj/5/ABTMRi69FrKU5ffPVh5QcFikpWJI/P1ocHA==}

  tinyglobby@0.2.14:
    resolution: {integrity: sha512-tX5e7OM1HnYr2+a2C/4V0htOcSQcoSTH9KgJnVvNm5zm/cyEWKJ7j7YutsH9CxMdtOkkLFy2AHrMci9IM8IPZQ==}
    engines: {node: '>=12.0.0'}

  tinypool@1.1.1:
    resolution: {integrity: sha512-Zba82s87IFq9A9XmjiX5uZA/ARWDrB03OHlq+Vw1fSdt0I+4/Kutwy8BP4Y/y/aORMo61FQ0vIb5j44vSo5Pkg==}
    engines: {node: ^18.0.0 || >=20.0.0}

  tinyrainbow@2.0.0:
    resolution: {integrity: sha512-op4nsTR47R6p0vMUUoYl/a+ljLFVtlfaXkLQmqfLR1qHma1h/ysYk4hEXZ880bf2CYgTskvTa/e196Vd5dDQXw==}
    engines: {node: '>=14.0.0'}

  tinyspy@4.0.3:
    resolution: {integrity: sha512-t2T/WLB2WRgZ9EpE4jgPJ9w+i66UZfDc8wHh0xrwiRNN+UwH98GIJkTeZqX9rg0i0ptwzqW+uYeIF0T4F8LR7A==}
    engines: {node: '>=14.0.0'}

  tldts-core@6.1.86:
    resolution: {integrity: sha512-Je6p7pkk+KMzMv2XXKmAE3McmolOQFdxkKw0R8EYNr7sELW46JqnNeTX8ybPiQgvg1ymCoF8LXs5fzFaZvJPTA==}

  tldts@6.1.86:
    resolution: {integrity: sha512-WMi/OQ2axVTf/ykqCQgXiIct+mSQDFdH2fkwhPwgEwvJ1kSzZRiinb0zF2Xb8u4+OqPChmyI6MEu4EezNJz+FQ==}
    hasBin: true

  to-regex-range@5.0.1:
    resolution: {integrity: sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==}
    engines: {node: '>=8.0'}

  totalist@3.0.1:
    resolution: {integrity: sha512-sf4i37nQ2LBx4m3wB74y+ubopq6W/dIzXg0FDGjsYnZHVa1Da8FH853wlL2gtUhg+xJXjfk3kUZS3BRoQeoQBQ==}
    engines: {node: '>=6'}

  tough-cookie@5.1.2:
    resolution: {integrity: sha512-FVDYdxtnj0G6Qm/DhNPSb8Ju59ULcup3tuJxkFb5K8Bv2pUXILbf0xZWU8PX8Ov19OXljbUyveOFwRMwkXzO+A==}
    engines: {node: '>=16'}

  tr46@5.1.1:
    resolution: {integrity: sha512-hdF5ZgjTqgAntKkklYw0R03MG2x/bSzTtkxmIRw/sTNV8YXsCJ1tfLAX23lhxhHJlEf3CRCOCGGWw3vI3GaSPw==}
    engines: {node: '>=18'}

  ts-api-utils@2.1.0:
    resolution: {integrity: sha512-CUgTZL1irw8u29bzrOD/nH85jqyc74D6SshFgujOIA7osm2Rz7dYH77agkx7H4FBNxDq7Cjf+IjaX/8zwFW+ZQ==}
    engines: {node: '>=18.12'}
    peerDependencies:
      typescript: '>=4.8.4'

  ts-interface-checker@0.1.13:
    resolution: {integrity: sha512-Y/arvbn+rrz3JCKl9C4kVNfTfSm2/mEp5FSz5EsZSANGPSlQrpRI5M4PKF+mJnE52jOO90PnPSc3Ur3bTQw0gA==}

  tsconfig-paths@3.15.0:
    resolution: {integrity: sha512-2Ac2RgzDe/cn48GvOe3M+o82pEFewD3UPbyoUHHdKasHwJKjds4fLXWf/Ux5kATBKN20oaFGu+jbElp1pos0mg==}

  tslib@2.8.1:
    resolution: {integrity: sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==}

  type-check@0.4.0:
    resolution: {integrity: sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==}
    engines: {node: '>= 0.8.0'}

  typed-array-buffer@1.0.3:
    resolution: {integrity: sha512-nAYYwfY3qnzX30IkA6AQZjVbtK6duGontcQm1WSG1MD94YLqK0515GNApXkoxKOWMusVssAHWLh9SeaoefYFGw==}
    engines: {node: '>= 0.4'}

  typed-array-byte-length@1.0.3:
    resolution: {integrity: sha512-BaXgOuIxz8n8pIq3e7Atg/7s+DpiYrxn4vdot3w9KbnBhcRQq6o3xemQdIfynqSeXeDrF32x+WvfzmOjPiY9lg==}
    engines: {node: '>= 0.4'}

  typed-array-byte-offset@1.0.4:
    resolution: {integrity: sha512-bTlAFB/FBYMcuX81gbL4OcpH5PmlFHqlCCpAl8AlEzMz5k53oNDvN8p1PNOWLEmI2x4orp3raOFB51tv9X+MFQ==}
    engines: {node: '>= 0.4'}

  typed-array-length@1.0.7:
    resolution: {integrity: sha512-3KS2b+kL7fsuk/eJZ7EQdnEmQoaho/r6KUef7hxvltNA5DR8NAUM+8wJMbJyZ4G9/7i3v5zPBIMN5aybAh2/Jg==}
    engines: {node: '>= 0.4'}

  typescript@5.8.3:
    resolution: {integrity: sha512-p1diW6TqL9L07nNxvRMM7hMMw4c5XOo/1ibL4aAIGmSAt9slTE1Xgw5KWuof2uTOvCg9BY7ZRi+GaF+7sfgPeQ==}
    engines: {node: '>=14.17'}
    hasBin: true

  typo-js@1.2.5:
    resolution: {integrity: sha512-F45vFWdGX8xahIk/sOp79z2NJs8ETMYsmMChm9D5Hlx3+9j7VnCyQyvij5MOCrNY3NNe8noSyokRjQRfq+Bc7A==}

  unbox-primitive@1.1.0:
    resolution: {integrity: sha512-nWJ91DjeOkej/TA8pXQ3myruKpKEYgqvpw9lz4OPHj/NWFNluYrjbz9j01CJ8yKQd2g4jFoOkINCTW2I5LEEyw==}
    engines: {node: '>= 0.4'}

  undici-types@6.21.0:
    resolution: {integrity: sha512-iwDZqg0QAGrg9Rav5H4n0M64c3mkR59cJ6wQp+7C4nI0gsmExaedaYLNO44eT4AtBBwjbTiGPMlt2Md0T9H9JQ==}

  unrs-resolver@1.10.1:
    resolution: {integrity: sha512-EFrL7Hw4kmhZdwWO3dwwFJo6hO3FXuQ6Bg8BK/faHZ9m1YxqBS31BNSTxklIQkxK/4LlV8zTYnPsIRLBzTzjCA==}

  update-browserslist-db@1.1.3:
    resolution: {integrity: sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==}
    hasBin: true
    peerDependencies:
      browserslist: '>= 4.21.0'

  uri-js@4.4.1:
    resolution: {integrity: sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==}

  use-callback-ref@1.3.3:
    resolution: {integrity: sha512-jQL3lRnocaFtu3V00JToYz/4QkNWswxijDaCVNZRiRTO3HQDLsdu1ZtmIUvV4yPp+rvWm5j0y0TG/S61cuijTg==}
    engines: {node: '>=10'}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  use-sidecar@1.1.3:
    resolution: {integrity: sha512-Fedw0aZvkhynoPYlA5WXrMCAMm+nSWdZt6lzJQ7Ok8S6Q+VsHmHpRWndVRJ8Be0ZbkfPc5LRYH+5XrzXcEeLRQ==}
    engines: {node: '>=10'}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  use-sync-external-store@1.5.0:
    resolution: {integrity: sha512-Rb46I4cGGVBmjamjphe8L/UnvJD+uPPtTkNvX5mZgqdbavhI4EbgIWJiIHXJ8bc/i9EQGPRh4DwEURJ552Do0A==}
    peerDependencies:
      react: ^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0

  util-deprecate@1.0.2:
    resolution: {integrity: sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==}

  vaul@0.9.9:
    resolution: {integrity: sha512-7afKg48srluhZwIkaU+lgGtFCUsYBSGOl8vcc8N/M3YQlZFlynHD15AE+pwrYdc826o7nrIND4lL9Y6b9WWZZQ==}
    peerDependencies:
      react: ^16.8 || ^17.0 || ^18.0
      react-dom: ^16.8 || ^17.0 || ^18.0

  victory-vendor@36.9.2:
    resolution: {integrity: sha512-PnpQQMuxlwYdocC8fIJqVXvkeViHYzotI+NJrCuav0ZYFoq912ZHBk3mCeuj+5/VpodOjPe1z0Fk2ihgzlXqjQ==}

  vite-node@3.2.4:
    resolution: {integrity: sha512-EbKSKh+bh1E1IFxeO0pg1n4dvoOTt0UDiXMd/qn++r98+jPO1xtJilvXldeuQ8giIB5IkpjCgMleHMNEsGH6pg==}
    engines: {node: ^18.0.0 || ^20.0.0 || >=22.0.0}
    hasBin: true

  vite@7.0.0:
    resolution: {integrity: sha512-ixXJB1YRgDIw2OszKQS9WxGHKwLdCsbQNkpJN171udl6szi/rIySHL6/Os3s2+oE4P/FLD4dxg4mD7Wust+u5g==}
    engines: {node: ^20.19.0 || >=22.12.0}
    hasBin: true
    peerDependencies:
      '@types/node': ^20.19.0 || >=22.12.0
      jiti: '>=1.21.0'
      less: ^4.0.0
      lightningcss: ^1.21.0
      sass: ^1.70.0
      sass-embedded: ^1.70.0
      stylus: '>=0.54.8'
      sugarss: ^5.0.0
      terser: ^5.16.0
      tsx: ^4.8.1
      yaml: ^2.4.2
    peerDependenciesMeta:
      '@types/node':
        optional: true
      jiti:
        optional: true
      less:
        optional: true
      lightningcss:
        optional: true
      sass:
        optional: true
      sass-embedded:
        optional: true
      stylus:
        optional: true
      sugarss:
        optional: true
      terser:
        optional: true
      tsx:
        optional: true
      yaml:
        optional: true

  vitest@3.2.4:
    resolution: {integrity: sha512-LUCP5ev3GURDysTWiP47wRRUpLKMOfPh+yKTx3kVIEiu5KOMeqzpnYNsKyOoVrULivR8tLcks4+lga33Whn90A==}
    engines: {node: ^18.0.0 || ^20.0.0 || >=22.0.0}
    hasBin: true
    peerDependencies:
      '@edge-runtime/vm': '*'
      '@types/debug': ^4.1.12
      '@types/node': ^18.0.0 || ^20.0.0 || >=22.0.0
      '@vitest/browser': 3.2.4
      '@vitest/ui': 3.2.4
      happy-dom: '*'
      jsdom: '*'
    peerDependenciesMeta:
      '@edge-runtime/vm':
        optional: true
      '@types/debug':
        optional: true
      '@types/node':
        optional: true
      '@vitest/browser':
        optional: true
      '@vitest/ui':
        optional: true
      happy-dom:
        optional: true
      jsdom:
        optional: true

  w3c-xmlserializer@5.0.0:
    resolution: {integrity: sha512-o8qghlI8NZHU1lLPrpi2+Uq7abh4GGPpYANlalzWxyWteJOCsr/P+oPBA49TOLu5FTZO4d3F9MnWJfiMo4BkmA==}
    engines: {node: '>=18'}

  webidl-conversions@7.0.0:
    resolution: {integrity: sha512-VwddBukDzu71offAQR975unBIGqfKZpM+8ZX6ySk8nYhVoo5CYaZyzt3YBvYtRtO+aoGlqxPg/B87NGVZ/fu6g==}
    engines: {node: '>=12'}

  whatwg-encoding@3.1.1:
    resolution: {integrity: sha512-6qN4hJdMwfYBtE3YBTTHhoeuUrDBPZmbQaxWAqSALV/MeEnR5z1xd8UKud2RAkFoPkmB+hli1TZSnyi84xz1vQ==}
    engines: {node: '>=18'}

  whatwg-mimetype@4.0.0:
    resolution: {integrity: sha512-QaKxh0eNIi2mE9p2vEdzfagOKHCcj1pJ56EEHGQOVxp8r9/iszLUUV7v89x9O1p/T+NlTM5W7jW6+cz4Fq1YVg==}
    engines: {node: '>=18'}

  whatwg-url@14.2.0:
    resolution: {integrity: sha512-De72GdQZzNTUBBChsXueQUnPKDkg/5A5zp7pFDuQAj5UFoENpiACU0wlCvzpAGnTkj++ihpKwKyYewn/XNUbKw==}
    engines: {node: '>=18'}

  which-boxed-primitive@1.1.1:
    resolution: {integrity: sha512-TbX3mj8n0odCBFVlY8AxkqcHASw3L60jIuF8jFP78az3C2YhmGvqbHBpAjTRH2/xqYunrJ9g1jSyjCjpoWzIAA==}
    engines: {node: '>= 0.4'}

  which-builtin-type@1.2.1:
    resolution: {integrity: sha512-6iBczoX+kDQ7a3+YJBnh3T+KZRxM/iYNPXicqk66/Qfm1b93iu+yOImkg0zHbj5LNOcNv1TEADiZ0xa34B4q6Q==}
    engines: {node: '>= 0.4'}

  which-collection@1.0.2:
    resolution: {integrity: sha512-K4jVyjnBdgvc86Y6BkaLZEN933SwYOuBFkdmBu9ZfkcAbdVbpITnDmjvZ/aQjRXQrv5EPkTnD1s39GiiqbngCw==}
    engines: {node: '>= 0.4'}

  which-typed-array@1.1.19:
    resolution: {integrity: sha512-rEvr90Bck4WZt9HHFC4DJMsjvu7x+r6bImz0/BrbWb7A2djJ8hnZMrWnHo9F8ssv0OMErasDhftrfROTyqSDrw==}
    engines: {node: '>= 0.4'}

  which@2.0.2:
    resolution: {integrity: sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==}
    engines: {node: '>= 8'}
    hasBin: true

  why-is-node-running@2.3.0:
    resolution: {integrity: sha512-hUrmaWBdVDcxvYqnyh09zunKzROWjbZTiNy8dBEjkS7ehEDQibXJ7XvlmtbwuTclUiIyN+CyXQD4Vmko8fNm8w==}
    engines: {node: '>=8'}
    hasBin: true

  word-wrap@1.2.5:
    resolution: {integrity: sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==}
    engines: {node: '>=0.10.0'}

  wrap-ansi@7.0.0:
    resolution: {integrity: sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==}
    engines: {node: '>=10'}

  wrap-ansi@8.1.0:
    resolution: {integrity: sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==}
    engines: {node: '>=12'}

  ws@8.18.3:
    resolution: {integrity: sha512-PEIGCY5tSlUt50cqyMXfCzX+oOPqN0vuGqWzbcJ2xvnkzkq46oOpz7dQaTDBdfICb4N14+GARUDw2XV2N4tvzg==}
    engines: {node: '>=10.0.0'}
    peerDependencies:
      bufferutil: ^4.0.1
      utf-8-validate: '>=5.0.2'
    peerDependenciesMeta:
      bufferutil:
        optional: true
      utf-8-validate:
        optional: true

  xml-name-validator@5.0.0:
    resolution: {integrity: sha512-EvGK8EJ3DhaHfbRlETOWAS5pO9MZITeauHKJyb8wyajUfQUenkIg2MvLDTZ4T/TgIcm3HU0TFBgWWboAZ30UHg==}
    engines: {node: '>=18'}

  xmlchars@2.2.0:
    resolution: {integrity: sha512-JZnDKK8B0RCDw84FNdDAIpZK+JuJw+s7Lz8nksI7SIuU3UXJJslUthsi+uWBUYOwPFwW7W7PRLRfUKpxjtjFCw==}

  yallist@3.1.1:
    resolution: {integrity: sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==}

  yaml@2.8.0:
    resolution: {integrity: sha512-4lLa/EcQCB0cJkyts+FpIRx5G/llPxfP6VQU5KByHEhLxY3IJCH0f0Hy1MHI8sClTvsIb8qwRJ6R/ZdlDJ/leQ==}
    engines: {node: '>= 14.6'}
    hasBin: true

  yocto-queue@0.1.0:
    resolution: {integrity: sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==}
    engines: {node: '>=10'}

  zod@3.25.71:
    resolution: {integrity: sha512-BsBc/NPk7h8WsUWYWYL+BajcJPY8YhjelaWu2NMLuzgraKAz4Lb4/6K11g9jpuDetjMiqhZ6YaexFLOC0Ogi3Q==}

  zustand@5.0.6:
    resolution: {integrity: sha512-ihAqNeUVhe0MAD+X8M5UzqyZ9k3FFZLBTtqo6JLPwV53cbRB/mJwBI0PxcIgqhBBHlEs8G45OTDTMq3gNcLq3A==}
    engines: {node: '>=12.20.0'}
    peerDependencies:
      '@types/react': '>=18.0.0'
      immer: '>=9.0.6'
      react: '>=18.0.0'
      use-sync-external-store: '>=1.2.0'
    peerDependenciesMeta:
      '@types/react':
        optional: true
      immer:
        optional: true
      react:
        optional: true
      use-sync-external-store:
        optional: true

snapshots:

  '@adobe/css-tools@4.4.3': {}

  '@alloc/quick-lru@5.2.0': {}

  '@ampproject/remapping@2.3.0':
    dependencies:
      '@jridgewell/gen-mapping': 0.3.12
      '@jridgewell/trace-mapping': 0.3.29

  '@asamuzakjp/css-color@3.2.0':
    dependencies:
      '@csstools/css-calc': 2.1.4(@csstools/css-parser-algorithms@3.0.5(@csstools/css-tokenizer@3.0.4))(@csstools/css-tokenizer@3.0.4)
      '@csstools/css-color-parser': 3.0.10(@csstools/css-parser-algorithms@3.0.5(@csstools/css-tokenizer@3.0.4))(@csstools/css-tokenizer@3.0.4)
      '@csstools/css-parser-algorithms': 3.0.5(@csstools/css-tokenizer@3.0.4)
      '@csstools/css-tokenizer': 3.0.4
      lru-cache: 10.4.3

  '@babel/code-frame@7.27.1':
    dependencies:
      '@babel/helper-validator-identifier': 7.27.1
      js-tokens: 4.0.0
      picocolors: 1.1.1

  '@babel/compat-data@7.28.0': {}

  '@babel/core@7.28.0':
    dependencies:
      '@ampproject/remapping': 2.3.0
      '@babel/code-frame': 7.27.1
      '@babel/generator': 7.28.0
      '@babel/helper-compilation-targets': 7.27.2
      '@babel/helper-module-transforms': 7.27.3(@babel/core@7.28.0)
      '@babel/helpers': 7.27.6
      '@babel/parser': 7.28.0
      '@babel/template': 7.27.2
      '@babel/traverse': 7.28.0
      '@babel/types': 7.28.0
      convert-source-map: 2.0.0
      debug: 4.4.1
      gensync: 1.0.0-beta.2
      json5: 2.2.3
      semver: 6.3.1
    transitivePeerDependencies:
      - supports-color

  '@babel/generator@7.28.0':
    dependencies:
      '@babel/parser': 7.28.0
      '@babel/types': 7.28.0
      '@jridgewell/gen-mapping': 0.3.12
      '@jridgewell/trace-mapping': 0.3.29
      jsesc: 3.1.0

  '@babel/helper-compilation-targets@7.27.2':
    dependencies:
      '@babel/compat-data': 7.28.0
      '@babel/helper-validator-option': 7.27.1
      browserslist: 4.25.1
      lru-cache: 5.1.1
      semver: 6.3.1

  '@babel/helper-globals@7.28.0': {}

  '@babel/helper-module-imports@7.27.1':
    dependencies:
      '@babel/traverse': 7.28.0
      '@babel/types': 7.28.0
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-module-transforms@7.27.3(@babel/core@7.28.0)':
    dependencies:
      '@babel/core': 7.28.0
      '@babel/helper-module-imports': 7.27.1
      '@babel/helper-validator-identifier': 7.27.1
      '@babel/traverse': 7.28.0
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-plugin-utils@7.27.1': {}

  '@babel/helper-string-parser@7.27.1': {}

  '@babel/helper-validator-identifier@7.27.1': {}

  '@babel/helper-validator-option@7.27.1': {}

  '@babel/helpers@7.27.6':
    dependencies:
      '@babel/template': 7.27.2
      '@babel/types': 7.28.0

  '@babel/parser@7.28.0':
    dependencies:
      '@babel/types': 7.28.0

  '@babel/plugin-transform-react-jsx-self@7.27.1(@babel/core@7.28.0)':
    dependencies:
      '@babel/core': 7.28.0
      '@babel/helper-plugin-utils': 7.27.1

  '@babel/plugin-transform-react-jsx-source@7.27.1(@babel/core@7.28.0)':
    dependencies:
      '@babel/core': 7.28.0
      '@babel/helper-plugin-utils': 7.27.1

  '@babel/runtime@7.27.6': {}

  '@babel/template@7.27.2':
    dependencies:
      '@babel/code-frame': 7.27.1
      '@babel/parser': 7.28.0
      '@babel/types': 7.28.0

  '@babel/traverse@7.28.0':
    dependencies:
      '@babel/code-frame': 7.27.1
      '@babel/generator': 7.28.0
      '@babel/helper-globals': 7.28.0
      '@babel/parser': 7.28.0
      '@babel/template': 7.27.2
      '@babel/types': 7.28.0
      debug: 4.4.1
    transitivePeerDependencies:
      - supports-color

  '@babel/types@7.28.0':
    dependencies:
      '@babel/helper-string-parser': 7.27.1
      '@babel/helper-validator-identifier': 7.27.1

  '@csstools/color-helpers@5.0.2': {}

  '@csstools/css-calc@2.1.4(@csstools/css-parser-algorithms@3.0.5(@csstools/css-tokenizer@3.0.4))(@csstools/css-tokenizer@3.0.4)':
    dependencies:
      '@csstools/css-parser-algorithms': 3.0.5(@csstools/css-tokenizer@3.0.4)
      '@csstools/css-tokenizer': 3.0.4

  '@csstools/css-color-parser@3.0.10(@csstools/css-parser-algorithms@3.0.5(@csstools/css-tokenizer@3.0.4))(@csstools/css-tokenizer@3.0.4)':
    dependencies:
      '@csstools/color-helpers': 5.0.2
      '@csstools/css-calc': 2.1.4(@csstools/css-parser-algorithms@3.0.5(@csstools/css-tokenizer@3.0.4))(@csstools/css-tokenizer@3.0.4)
      '@csstools/css-parser-algorithms': 3.0.5(@csstools/css-tokenizer@3.0.4)
      '@csstools/css-tokenizer': 3.0.4

  '@csstools/css-parser-algorithms@3.0.5(@csstools/css-tokenizer@3.0.4)':
    dependencies:
      '@csstools/css-tokenizer': 3.0.4

  '@csstools/css-tokenizer@3.0.4': {}

  '@emnapi/core@1.4.3':
    dependencies:
      '@emnapi/wasi-threads': 1.0.2
      tslib: 2.8.1
    optional: true

  '@emnapi/runtime@1.4.3':
    dependencies:
      tslib: 2.8.1
    optional: true

  '@emnapi/wasi-threads@1.0.2':
    dependencies:
      tslib: 2.8.1
    optional: true

  '@esbuild/aix-ppc64@0.25.5':
    optional: true

  '@esbuild/android-arm64@0.25.5':
    optional: true

  '@esbuild/android-arm@0.25.5':
    optional: true

  '@esbuild/android-x64@0.25.5':
    optional: true

  '@esbuild/darwin-arm64@0.25.5':
    optional: true

  '@esbuild/darwin-x64@0.25.5':
    optional: true

  '@esbuild/freebsd-arm64@0.25.5':
    optional: true

  '@esbuild/freebsd-x64@0.25.5':
    optional: true

  '@esbuild/linux-arm64@0.25.5':
    optional: true

  '@esbuild/linux-arm@0.25.5':
    optional: true

  '@esbuild/linux-ia32@0.25.5':
    optional: true

  '@esbuild/linux-loong64@0.25.5':
    optional: true

  '@esbuild/linux-mips64el@0.25.5':
    optional: true

  '@esbuild/linux-ppc64@0.25.5':
    optional: true

  '@esbuild/linux-riscv64@0.25.5':
    optional: true

  '@esbuild/linux-s390x@0.25.5':
    optional: true

  '@esbuild/linux-x64@0.25.5':
    optional: true

  '@esbuild/netbsd-arm64@0.25.5':
    optional: true

  '@esbuild/netbsd-x64@0.25.5':
    optional: true

  '@esbuild/openbsd-arm64@0.25.5':
    optional: true

  '@esbuild/openbsd-x64@0.25.5':
    optional: true

  '@esbuild/sunos-x64@0.25.5':
    optional: true

  '@esbuild/win32-arm64@0.25.5':
    optional: true

  '@esbuild/win32-ia32@0.25.5':
    optional: true

  '@esbuild/win32-x64@0.25.5':
    optional: true

  '@eslint-community/eslint-utils@4.7.0(eslint@9.30.1(jiti@1.21.7))':
    dependencies:
      eslint: 9.30.1(jiti@1.21.7)
      eslint-visitor-keys: 3.4.3

  '@eslint-community/regexpp@4.12.1': {}

  '@eslint/config-array@0.21.0':
    dependencies:
      '@eslint/object-schema': 2.1.6
      debug: 4.4.1
      minimatch: 3.1.2
    transitivePeerDependencies:
      - supports-color

  '@eslint/config-helpers@0.3.0': {}

  '@eslint/core@0.14.0':
    dependencies:
      '@types/json-schema': 7.0.15

  '@eslint/core@0.15.1':
    dependencies:
      '@types/json-schema': 7.0.15

  '@eslint/eslintrc@3.3.1':
    dependencies:
      ajv: 6.12.6
      debug: 4.4.1
      espree: 10.4.0
      globals: 14.0.0
      ignore: 5.3.2
      import-fresh: 3.3.1
      js-yaml: 4.1.0
      minimatch: 3.1.2
      strip-json-comments: 3.1.1
    transitivePeerDependencies:
      - supports-color

  '@eslint/js@9.30.1': {}

  '@eslint/object-schema@2.1.6': {}

  '@eslint/plugin-kit@0.3.3':
    dependencies:
      '@eslint/core': 0.15.1
      levn: 0.4.1

  '@floating-ui/core@1.7.2':
    dependencies:
      '@floating-ui/utils': 0.2.10

  '@floating-ui/dom@1.7.2':
    dependencies:
      '@floating-ui/core': 1.7.2
      '@floating-ui/utils': 0.2.10

  '@floating-ui/react-dom@2.1.4(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@floating-ui/dom': 1.7.2
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)

  '@floating-ui/utils@0.2.10': {}

  '@hookform/resolvers@3.10.0(react-hook-form@7.59.0(react@19.1.0))':
    dependencies:
      react-hook-form: 7.59.0(react@19.1.0)

  '@humanfs/core@0.19.1': {}

  '@humanfs/node@0.16.6':
    dependencies:
      '@humanfs/core': 0.19.1
      '@humanwhocodes/retry': 0.3.1

  '@humanwhocodes/module-importer@1.0.1': {}

  '@humanwhocodes/retry@0.3.1': {}

  '@humanwhocodes/retry@0.4.3': {}

  '@img/sharp-darwin-arm64@0.33.5':
    optionalDependencies:
      '@img/sharp-libvips-darwin-arm64': 1.0.4
    optional: true

  '@img/sharp-darwin-x64@0.33.5':
    optionalDependencies:
      '@img/sharp-libvips-darwin-x64': 1.0.4
    optional: true

  '@img/sharp-libvips-darwin-arm64@1.0.4':
    optional: true

  '@img/sharp-libvips-darwin-x64@1.0.4':
    optional: true

  '@img/sharp-libvips-linux-arm64@1.0.4':
    optional: true

  '@img/sharp-libvips-linux-arm@1.0.5':
    optional: true

  '@img/sharp-libvips-linux-s390x@1.0.4':
    optional: true

  '@img/sharp-libvips-linux-x64@1.0.4':
    optional: true

  '@img/sharp-libvips-linuxmusl-arm64@1.0.4':
    optional: true

  '@img/sharp-libvips-linuxmusl-x64@1.0.4':
    optional: true

  '@img/sharp-linux-arm64@0.33.5':
    optionalDependencies:
      '@img/sharp-libvips-linux-arm64': 1.0.4
    optional: true

  '@img/sharp-linux-arm@0.33.5':
    optionalDependencies:
      '@img/sharp-libvips-linux-arm': 1.0.5
    optional: true

  '@img/sharp-linux-s390x@0.33.5':
    optionalDependencies:
      '@img/sharp-libvips-linux-s390x': 1.0.4
    optional: true

  '@img/sharp-linux-x64@0.33.5':
    optionalDependencies:
      '@img/sharp-libvips-linux-x64': 1.0.4
    optional: true

  '@img/sharp-linuxmusl-arm64@0.33.5':
    optionalDependencies:
      '@img/sharp-libvips-linuxmusl-arm64': 1.0.4
    optional: true

  '@img/sharp-linuxmusl-x64@0.33.5':
    optionalDependencies:
      '@img/sharp-libvips-linuxmusl-x64': 1.0.4
    optional: true

  '@img/sharp-wasm32@0.33.5':
    dependencies:
      '@emnapi/runtime': 1.4.3
    optional: true

  '@img/sharp-win32-ia32@0.33.5':
    optional: true

  '@img/sharp-win32-x64@0.33.5':
    optional: true

  '@isaacs/cliui@8.0.2':
    dependencies:
      string-width: 5.1.2
      string-width-cjs: string-width@4.2.3
      strip-ansi: 7.1.0
      strip-ansi-cjs: strip-ansi@6.0.1
      wrap-ansi: 8.1.0
      wrap-ansi-cjs: wrap-ansi@7.0.0

  '@jridgewell/gen-mapping@0.3.12':
    dependencies:
      '@jridgewell/sourcemap-codec': 1.5.4
      '@jridgewell/trace-mapping': 0.3.29

  '@jridgewell/resolve-uri@3.1.2': {}

  '@jridgewell/sourcemap-codec@1.5.4': {}

  '@jridgewell/trace-mapping@0.3.29':
    dependencies:
      '@jridgewell/resolve-uri': 3.1.2
      '@jridgewell/sourcemap-codec': 1.5.4

  '@napi-rs/wasm-runtime@0.2.11':
    dependencies:
      '@emnapi/core': 1.4.3
      '@emnapi/runtime': 1.4.3
      '@tybys/wasm-util': 0.9.0
    optional: true

  '@next/env@15.2.4': {}

  '@next/eslint-plugin-next@15.3.4':
    dependencies:
      fast-glob: 3.3.1

  '@next/swc-darwin-arm64@15.2.4':
    optional: true

  '@next/swc-darwin-x64@15.2.4':
    optional: true

  '@next/swc-linux-arm64-gnu@15.2.4':
    optional: true

  '@next/swc-linux-arm64-musl@15.2.4':
    optional: true

  '@next/swc-linux-x64-gnu@15.2.4':
    optional: true

  '@next/swc-linux-x64-musl@15.2.4':
    optional: true

  '@next/swc-win32-arm64-msvc@15.2.4':
    optional: true

  '@next/swc-win32-x64-msvc@15.2.4':
    optional: true

  '@nodelib/fs.scandir@2.1.5':
    dependencies:
      '@nodelib/fs.stat': 2.0.5
      run-parallel: 1.2.0

  '@nodelib/fs.stat@2.0.5': {}

  '@nodelib/fs.walk@1.2.8':
    dependencies:
      '@nodelib/fs.scandir': 2.1.5
      fastq: 1.19.1

  '@nolyfill/is-core-module@1.0.39': {}

  '@pkgjs/parseargs@0.11.0':
    optional: true

  '@playwright/test@1.53.2':
    dependencies:
      playwright: 1.53.2

  '@polka/url@1.0.0-next.29': {}

  '@radix-ui/number@1.1.0': {}

  '@radix-ui/primitive@1.1.1': {}

  '@radix-ui/react-accordion@1.2.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-collapsible': 1.1.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-collection': 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-direction': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-id': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-alert-dialog@1.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-dialog': 1.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-slot': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-arrow@1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-aspect-ratio@1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-avatar@1.1.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-checkbox@1.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-presence': 1.1.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-previous': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-size': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-collapsible@1.1.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-id': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-presence': 1.1.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-collection@1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-slot': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-compose-refs@1.1.1(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-compose-refs@1.1.2(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-context-menu@2.2.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-menu': 2.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-context@1.1.1(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-dialog@1.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-dismissable-layer': 1.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-focus-guards': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-focus-scope': 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-id': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-portal': 1.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-presence': 1.1.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-slot': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      aria-hidden: 1.2.6
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
      react-remove-scroll: 2.7.1(@types/react@19.1.8)(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-direction@1.1.0(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-dismissable-layer@1.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-escape-keydown': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-dropdown-menu@2.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-id': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-menu': 2.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-focus-guards@1.1.1(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-focus-scope@1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-hover-card@1.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-dismissable-layer': 1.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-popper': 1.2.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-portal': 1.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-presence': 1.1.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-id@1.1.0(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-id@1.1.1(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      '@radix-ui/react-use-layout-effect': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-label@2.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-menu@2.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-collection': 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-direction': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-dismissable-layer': 1.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-focus-guards': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-focus-scope': 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-id': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-popper': 1.2.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-portal': 1.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-presence': 1.1.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-roving-focus': 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-slot': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      aria-hidden: 1.2.6
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
      react-remove-scroll: 2.7.1(@types/react@19.1.8)(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-menubar@1.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-collection': 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-direction': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-id': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-menu': 2.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-roving-focus': 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-navigation-menu@1.2.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-collection': 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-direction': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-dismissable-layer': 1.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-id': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-presence': 1.1.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-previous': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-visually-hidden': 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-popover@1.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-dismissable-layer': 1.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-focus-guards': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-focus-scope': 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-id': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-popper': 1.2.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-portal': 1.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-presence': 1.1.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-slot': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      aria-hidden: 1.2.6
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
      react-remove-scroll: 2.7.1(@types/react@19.1.8)(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-popper@1.2.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@floating-ui/react-dom': 2.1.4(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-arrow': 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-rect': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-size': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/rect': 1.1.0
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-portal@1.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-presence@1.1.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-primitive@2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/react-slot': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-primitive@2.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/react-slot': 1.2.3(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-progress@1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-radio-group@1.2.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-direction': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-presence': 1.1.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-roving-focus': 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-previous': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-size': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-roving-focus@1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-collection': 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-direction': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-id': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-scroll-area@1.2.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/number': 1.1.0
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-direction': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-presence': 1.1.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-select@2.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/number': 1.1.0
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-collection': 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-direction': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-dismissable-layer': 1.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-focus-guards': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-focus-scope': 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-id': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-popper': 1.2.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-portal': 1.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-slot': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-previous': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-visually-hidden': 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      aria-hidden: 1.2.6
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
      react-remove-scroll: 2.7.1(@types/react@19.1.8)(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-separator@1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-slider@1.2.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/number': 1.1.0
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-collection': 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-direction': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-previous': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-size': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-slot@1.1.1(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-slot@1.2.3(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      '@radix-ui/react-compose-refs': 1.1.2(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-switch@1.1.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-previous': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-size': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-tabs@1.1.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-direction': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-id': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-presence': 1.1.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-roving-focus': 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-toast@1.2.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-collection': 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-dismissable-layer': 1.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-portal': 1.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-presence': 1.1.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-visually-hidden': 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-toggle-group@1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-direction': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-roving-focus': 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-toggle': 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-toggle@1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-tooltip@1.1.6(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-dismissable-layer': 1.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-id': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-popper': 1.2.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-portal': 1.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-presence': 1.1.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-slot': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-visually-hidden': 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-use-callback-ref@1.1.0(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-use-controllable-state@1.1.0(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-use-escape-keydown@1.1.0(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-use-layout-effect@1.1.0(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-use-layout-effect@1.1.1(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-use-previous@1.1.0(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-use-rect@1.1.0(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      '@radix-ui/rect': 1.1.0
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-use-size@1.1.0(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-visually-hidden@1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/rect@1.1.0': {}

  '@rolldown/pluginutils@1.0.0-beta.19': {}

  '@rollup/rollup-android-arm-eabi@4.44.1':
    optional: true

  '@rollup/rollup-android-arm64@4.44.1':
    optional: true

  '@rollup/rollup-darwin-arm64@4.44.1':
    optional: true

  '@rollup/rollup-darwin-x64@4.44.1':
    optional: true

  '@rollup/rollup-freebsd-arm64@4.44.1':
    optional: true

  '@rollup/rollup-freebsd-x64@4.44.1':
    optional: true

  '@rollup/rollup-linux-arm-gnueabihf@4.44.1':
    optional: true

  '@rollup/rollup-linux-arm-musleabihf@4.44.1':
    optional: true

  '@rollup/rollup-linux-arm64-gnu@4.44.1':
    optional: true

  '@rollup/rollup-linux-arm64-musl@4.44.1':
    optional: true

  '@rollup/rollup-linux-loongarch64-gnu@4.44.1':
    optional: true

  '@rollup/rollup-linux-powerpc64le-gnu@4.44.1':
    optional: true

  '@rollup/rollup-linux-riscv64-gnu@4.44.1':
    optional: true

  '@rollup/rollup-linux-riscv64-musl@4.44.1':
    optional: true

  '@rollup/rollup-linux-s390x-gnu@4.44.1':
    optional: true

  '@rollup/rollup-linux-x64-gnu@4.44.1':
    optional: true

  '@rollup/rollup-linux-x64-musl@4.44.1':
    optional: true

  '@rollup/rollup-win32-arm64-msvc@4.44.1':
    optional: true

  '@rollup/rollup-win32-ia32-msvc@4.44.1':
    optional: true

  '@rollup/rollup-win32-x64-msvc@4.44.1':
    optional: true

  '@rtsao/scc@1.1.0': {}

  '@rushstack/eslint-patch@1.12.0': {}

  '@swc/counter@0.1.3': {}

  '@swc/helpers@0.5.15':
    dependencies:
      tslib: 2.8.1

  '@testing-library/dom@10.4.0':
    dependencies:
      '@babel/code-frame': 7.27.1
      '@babel/runtime': 7.27.6
      '@types/aria-query': 5.0.4
      aria-query: 5.3.0
      chalk: 4.1.2
      dom-accessibility-api: 0.5.16
      lz-string: 1.5.0
      pretty-format: 27.5.1

  '@testing-library/jest-dom@6.6.3':
    dependencies:
      '@adobe/css-tools': 4.4.3
      aria-query: 5.3.2
      chalk: 3.0.0
      css.escape: 1.5.1
      dom-accessibility-api: 0.6.3
      lodash: 4.17.21
      redent: 3.0.0

  '@testing-library/react@16.3.0(@testing-library/dom@10.4.0)(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@babel/runtime': 7.27.6
      '@testing-library/dom': 10.4.0
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@testing-library/user-event@14.6.1(@testing-library/dom@10.4.0)':
    dependencies:
      '@testing-library/dom': 10.4.0

  '@tybys/wasm-util@0.9.0':
    dependencies:
      tslib: 2.8.1
    optional: true

  '@types/aria-query@5.0.4': {}

  '@types/babel__core@7.20.5':
    dependencies:
      '@babel/parser': 7.28.0
      '@babel/types': 7.28.0
      '@types/babel__generator': 7.27.0
      '@types/babel__template': 7.4.4
      '@types/babel__traverse': 7.20.7

  '@types/babel__generator@7.27.0':
    dependencies:
      '@babel/types': 7.28.0

  '@types/babel__template@7.4.4':
    dependencies:
      '@babel/parser': 7.28.0
      '@babel/types': 7.28.0

  '@types/babel__traverse@7.20.7':
    dependencies:
      '@babel/types': 7.28.0

  '@types/chai@5.2.2':
    dependencies:
      '@types/deep-eql': 4.0.2

  '@types/codemirror@5.60.16':
    dependencies:
      '@types/tern': 0.23.9

  '@types/d3-array@3.2.1': {}

  '@types/d3-color@3.1.3': {}

  '@types/d3-ease@3.0.2': {}

  '@types/d3-interpolate@3.0.4':
    dependencies:
      '@types/d3-color': 3.1.3

  '@types/d3-path@3.1.1': {}

  '@types/d3-scale@4.0.9':
    dependencies:
      '@types/d3-time': 3.0.4

  '@types/d3-shape@3.1.7':
    dependencies:
      '@types/d3-path': 3.1.1

  '@types/d3-time@3.0.4': {}

  '@types/d3-timer@3.0.2': {}

  '@types/deep-eql@4.0.2': {}

  '@types/estree@1.0.8': {}

  '@types/json-schema@7.0.15': {}

  '@types/json5@0.0.29': {}

  '@types/marked@4.3.2': {}

  '@types/node@22.16.0':
    dependencies:
      undici-types: 6.21.0

  '@types/react-dom@19.1.6(@types/react@19.1.8)':
    dependencies:
      '@types/react': 19.1.8

  '@types/react@19.1.8':
    dependencies:
      csstype: 3.1.3

  '@types/tern@0.23.9':
    dependencies:
      '@types/estree': 1.0.8

  '@typescript-eslint/eslint-plugin@8.35.1(@typescript-eslint/parser@8.35.1(eslint@9.30.1(jiti@1.21.7))(typescript@5.8.3))(eslint@9.30.1(jiti@1.21.7))(typescript@5.8.3)':
    dependencies:
      '@eslint-community/regexpp': 4.12.1
      '@typescript-eslint/parser': 8.35.1(eslint@9.30.1(jiti@1.21.7))(typescript@5.8.3)
      '@typescript-eslint/scope-manager': 8.35.1
      '@typescript-eslint/type-utils': 8.35.1(eslint@9.30.1(jiti@1.21.7))(typescript@5.8.3)
      '@typescript-eslint/utils': 8.35.1(eslint@9.30.1(jiti@1.21.7))(typescript@5.8.3)
      '@typescript-eslint/visitor-keys': 8.35.1
      eslint: 9.30.1(jiti@1.21.7)
      graphemer: 1.4.0
      ignore: 7.0.5
      natural-compare: 1.4.0
      ts-api-utils: 2.1.0(typescript@5.8.3)
      typescript: 5.8.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/parser@8.35.1(eslint@9.30.1(jiti@1.21.7))(typescript@5.8.3)':
    dependencies:
      '@typescript-eslint/scope-manager': 8.35.1
      '@typescript-eslint/types': 8.35.1
      '@typescript-eslint/typescript-estree': 8.35.1(typescript@5.8.3)
      '@typescript-eslint/visitor-keys': 8.35.1
      debug: 4.4.1
      eslint: 9.30.1(jiti@1.21.7)
      typescript: 5.8.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/project-service@8.35.1(typescript@5.8.3)':
    dependencies:
      '@typescript-eslint/tsconfig-utils': 8.35.1(typescript@5.8.3)
      '@typescript-eslint/types': 8.35.1
      debug: 4.4.1
      typescript: 5.8.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/scope-manager@8.35.1':
    dependencies:
      '@typescript-eslint/types': 8.35.1
      '@typescript-eslint/visitor-keys': 8.35.1

  '@typescript-eslint/tsconfig-utils@8.35.1(typescript@5.8.3)':
    dependencies:
      typescript: 5.8.3

  '@typescript-eslint/type-utils@8.35.1(eslint@9.30.1(jiti@1.21.7))(typescript@5.8.3)':
    dependencies:
      '@typescript-eslint/typescript-estree': 8.35.1(typescript@5.8.3)
      '@typescript-eslint/utils': 8.35.1(eslint@9.30.1(jiti@1.21.7))(typescript@5.8.3)
      debug: 4.4.1
      eslint: 9.30.1(jiti@1.21.7)
      ts-api-utils: 2.1.0(typescript@5.8.3)
      typescript: 5.8.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/types@8.35.1': {}

  '@typescript-eslint/typescript-estree@8.35.1(typescript@5.8.3)':
    dependencies:
      '@typescript-eslint/project-service': 8.35.1(typescript@5.8.3)
      '@typescript-eslint/tsconfig-utils': 8.35.1(typescript@5.8.3)
      '@typescript-eslint/types': 8.35.1
      '@typescript-eslint/visitor-keys': 8.35.1
      debug: 4.4.1
      fast-glob: 3.3.3
      is-glob: 4.0.3
      minimatch: 9.0.5
      semver: 7.7.2
      ts-api-utils: 2.1.0(typescript@5.8.3)
      typescript: 5.8.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/utils@8.35.1(eslint@9.30.1(jiti@1.21.7))(typescript@5.8.3)':
    dependencies:
      '@eslint-community/eslint-utils': 4.7.0(eslint@9.30.1(jiti@1.21.7))
      '@typescript-eslint/scope-manager': 8.35.1
      '@typescript-eslint/types': 8.35.1
      '@typescript-eslint/typescript-estree': 8.35.1(typescript@5.8.3)
      eslint: 9.30.1(jiti@1.21.7)
      typescript: 5.8.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/visitor-keys@8.35.1':
    dependencies:
      '@typescript-eslint/types': 8.35.1
      eslint-visitor-keys: 4.2.1

  '@unrs/resolver-binding-android-arm-eabi@1.10.1':
    optional: true

  '@unrs/resolver-binding-android-arm64@1.10.1':
    optional: true

  '@unrs/resolver-binding-darwin-arm64@1.10.1':
    optional: true

  '@unrs/resolver-binding-darwin-x64@1.10.1':
    optional: true

  '@unrs/resolver-binding-freebsd-x64@1.10.1':
    optional: true

  '@unrs/resolver-binding-linux-arm-gnueabihf@1.10.1':
    optional: true

  '@unrs/resolver-binding-linux-arm-musleabihf@1.10.1':
    optional: true

  '@unrs/resolver-binding-linux-arm64-gnu@1.10.1':
    optional: true

  '@unrs/resolver-binding-linux-arm64-musl@1.10.1':
    optional: true

  '@unrs/resolver-binding-linux-ppc64-gnu@1.10.1':
    optional: true

  '@unrs/resolver-binding-linux-riscv64-gnu@1.10.1':
    optional: true

  '@unrs/resolver-binding-linux-riscv64-musl@1.10.1':
    optional: true

  '@unrs/resolver-binding-linux-s390x-gnu@1.10.1':
    optional: true

  '@unrs/resolver-binding-linux-x64-gnu@1.10.1':
    optional: true

  '@unrs/resolver-binding-linux-x64-musl@1.10.1':
    optional: true

  '@unrs/resolver-binding-wasm32-wasi@1.10.1':
    dependencies:
      '@napi-rs/wasm-runtime': 0.2.11
    optional: true

  '@unrs/resolver-binding-win32-arm64-msvc@1.10.1':
    optional: true

  '@unrs/resolver-binding-win32-ia32-msvc@1.10.1':
    optional: true

  '@unrs/resolver-binding-win32-x64-msvc@1.10.1':
    optional: true

  '@vitejs/plugin-react@4.6.0(vite@7.0.0(@types/node@22.16.0)(jiti@1.21.7)(yaml@2.8.0))':
    dependencies:
      '@babel/core': 7.28.0
      '@babel/plugin-transform-react-jsx-self': 7.27.1(@babel/core@7.28.0)
      '@babel/plugin-transform-react-jsx-source': 7.27.1(@babel/core@7.28.0)
      '@rolldown/pluginutils': 1.0.0-beta.19
      '@types/babel__core': 7.20.5
      react-refresh: 0.17.0
      vite: 7.0.0(@types/node@22.16.0)(jiti@1.21.7)(yaml@2.8.0)
    transitivePeerDependencies:
      - supports-color

  '@vitest/expect@3.2.4':
    dependencies:
      '@types/chai': 5.2.2
      '@vitest/spy': 3.2.4
      '@vitest/utils': 3.2.4
      chai: 5.2.0
      tinyrainbow: 2.0.0

  '@vitest/mocker@3.2.4(vite@7.0.0(@types/node@22.16.0)(jiti@1.21.7)(yaml@2.8.0))':
    dependencies:
      '@vitest/spy': 3.2.4
      estree-walker: 3.0.3
      magic-string: 0.30.17
    optionalDependencies:
      vite: 7.0.0(@types/node@22.16.0)(jiti@1.21.7)(yaml@2.8.0)

  '@vitest/pretty-format@3.2.4':
    dependencies:
      tinyrainbow: 2.0.0

  '@vitest/runner@3.2.4':
    dependencies:
      '@vitest/utils': 3.2.4
      pathe: 2.0.3
      strip-literal: 3.0.0

  '@vitest/snapshot@3.2.4':
    dependencies:
      '@vitest/pretty-format': 3.2.4
      magic-string: 0.30.17
      pathe: 2.0.3

  '@vitest/spy@3.2.4':
    dependencies:
      tinyspy: 4.0.3

  '@vitest/ui@3.2.4(vitest@3.2.4)':
    dependencies:
      '@vitest/utils': 3.2.4
      fflate: 0.8.2
      flatted: 3.3.3
      pathe: 2.0.3
      sirv: 3.0.1
      tinyglobby: 0.2.14
      tinyrainbow: 2.0.0
      vitest: 3.2.4(@types/node@22.16.0)(@vitest/ui@3.2.4)(jiti@1.21.7)(jsdom@26.1.0)(yaml@2.8.0)

  '@vitest/utils@3.2.4':
    dependencies:
      '@vitest/pretty-format': 3.2.4
      loupe: 3.1.4
      tinyrainbow: 2.0.0

  acorn-jsx@5.3.2(acorn@8.15.0):
    dependencies:
      acorn: 8.15.0

  acorn@8.15.0: {}

  agent-base@7.1.3: {}

  ajv@6.12.6:
    dependencies:
      fast-deep-equal: 3.1.3
      fast-json-stable-stringify: 2.1.0
      json-schema-traverse: 0.4.1
      uri-js: 4.4.1

  ansi-regex@5.0.1: {}

  ansi-regex@6.1.0: {}

  ansi-styles@4.3.0:
    dependencies:
      color-convert: 2.0.1

  ansi-styles@5.2.0: {}

  ansi-styles@6.2.1: {}

  any-promise@1.3.0: {}

  anymatch@3.1.3:
    dependencies:
      normalize-path: 3.0.0
      picomatch: 2.3.1

  arg@5.0.2: {}

  argparse@2.0.1: {}

  aria-hidden@1.2.6:
    dependencies:
      tslib: 2.8.1

  aria-query@5.3.0:
    dependencies:
      dequal: 2.0.3

  aria-query@5.3.2: {}

  array-buffer-byte-length@1.0.2:
    dependencies:
      call-bound: 1.0.4
      is-array-buffer: 3.0.5

  array-includes@3.1.9:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.4
      define-properties: 1.2.1
      es-abstract: 1.24.0
      es-object-atoms: 1.1.1
      get-intrinsic: 1.3.0
      is-string: 1.1.1
      math-intrinsics: 1.1.0

  array.prototype.findlast@1.2.5:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-abstract: 1.24.0
      es-errors: 1.3.0
      es-object-atoms: 1.1.1
      es-shim-unscopables: 1.1.0

  array.prototype.findlastindex@1.2.6:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.4
      define-properties: 1.2.1
      es-abstract: 1.24.0
      es-errors: 1.3.0
      es-object-atoms: 1.1.1
      es-shim-unscopables: 1.1.0

  array.prototype.flat@1.3.3:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-abstract: 1.24.0
      es-shim-unscopables: 1.1.0

  array.prototype.flatmap@1.3.3:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-abstract: 1.24.0
      es-shim-unscopables: 1.1.0

  array.prototype.tosorted@1.1.4:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-abstract: 1.24.0
      es-errors: 1.3.0
      es-shim-unscopables: 1.1.0

  arraybuffer.prototype.slice@1.0.4:
    dependencies:
      array-buffer-byte-length: 1.0.2
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-abstract: 1.24.0
      es-errors: 1.3.0
      get-intrinsic: 1.3.0
      is-array-buffer: 3.0.5

  assertion-error@2.0.1: {}

  ast-types-flow@0.0.8: {}

  async-function@1.0.0: {}

  asynckit@0.4.0: {}

  autoprefixer@10.4.21(postcss@8.5.6):
    dependencies:
      browserslist: 4.25.1
      caniuse-lite: 1.0.30001726
      fraction.js: 4.3.7
      normalize-range: 0.1.2
      picocolors: 1.1.1
      postcss: 8.5.6
      postcss-value-parser: 4.2.0

  available-typed-arrays@1.0.7:
    dependencies:
      possible-typed-array-names: 1.1.0

  axe-core@4.10.3: {}

  axios@1.10.0:
    dependencies:
      follow-redirects: 1.15.9
      form-data: 4.0.3
      proxy-from-env: 1.1.0
    transitivePeerDependencies:
      - debug

  axobject-query@4.1.0: {}

  balanced-match@1.0.2: {}

  binary-extensions@2.3.0: {}

  brace-expansion@1.1.12:
    dependencies:
      balanced-match: 1.0.2
      concat-map: 0.0.1

  brace-expansion@2.0.2:
    dependencies:
      balanced-match: 1.0.2

  braces@3.0.3:
    dependencies:
      fill-range: 7.1.1

  browserslist@4.25.1:
    dependencies:
      caniuse-lite: 1.0.30001726
      electron-to-chromium: 1.5.179
      node-releases: 2.0.19
      update-browserslist-db: 1.1.3(browserslist@4.25.1)

  busboy@1.6.0:
    dependencies:
      streamsearch: 1.1.0

  cac@6.7.14: {}

  call-bind-apply-helpers@1.0.2:
    dependencies:
      es-errors: 1.3.0
      function-bind: 1.1.2

  call-bind@1.0.8:
    dependencies:
      call-bind-apply-helpers: 1.0.2
      es-define-property: 1.0.1
      get-intrinsic: 1.3.0
      set-function-length: 1.2.2

  call-bound@1.0.4:
    dependencies:
      call-bind-apply-helpers: 1.0.2
      get-intrinsic: 1.3.0

  callsites@3.1.0: {}

  camelcase-css@2.0.1: {}

  caniuse-lite@1.0.30001726: {}

  chai@5.2.0:
    dependencies:
      assertion-error: 2.0.1
      check-error: 2.1.1
      deep-eql: 5.0.2
      loupe: 3.1.4
      pathval: 2.0.1

  chalk@3.0.0:
    dependencies:
      ansi-styles: 4.3.0
      supports-color: 7.2.0

  chalk@4.1.2:
    dependencies:
      ansi-styles: 4.3.0
      supports-color: 7.2.0

  check-error@2.1.1: {}

  chokidar@3.6.0:
    dependencies:
      anymatch: 3.1.3
      braces: 3.0.3
      glob-parent: 5.1.2
      is-binary-path: 2.1.0
      is-glob: 4.0.3
      normalize-path: 3.0.0
      readdirp: 3.6.0
    optionalDependencies:
      fsevents: 2.3.3

  class-variance-authority@0.7.1:
    dependencies:
      clsx: 2.1.1

  client-only@0.0.1: {}

  clsx@2.1.1: {}

  cmdk@1.0.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0):
    dependencies:
      '@radix-ui/react-dialog': 1.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-id': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-primitive': 2.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
      use-sync-external-store: 1.5.0(react@19.1.0)
    transitivePeerDependencies:
      - '@types/react'
      - '@types/react-dom'

  codemirror-spell-checker@1.1.2:
    dependencies:
      typo-js: 1.2.5

  codemirror@5.65.19: {}

  color-convert@2.0.1:
    dependencies:
      color-name: 1.1.4

  color-name@1.1.4: {}

  color-string@1.9.1:
    dependencies:
      color-name: 1.1.4
      simple-swizzle: 0.2.2
    optional: true

  color@4.2.3:
    dependencies:
      color-convert: 2.0.1
      color-string: 1.9.1
    optional: true

  combined-stream@1.0.8:
    dependencies:
      delayed-stream: 1.0.0

  commander@4.1.1: {}

  concat-map@0.0.1: {}

  convert-source-map@2.0.0: {}

  cross-spawn@7.0.6:
    dependencies:
      path-key: 3.1.1
      shebang-command: 2.0.0
      which: 2.0.2

  css.escape@1.5.1: {}

  cssesc@3.0.0: {}

  cssstyle@4.6.0:
    dependencies:
      '@asamuzakjp/css-color': 3.2.0
      rrweb-cssom: 0.8.0

  csstype@3.1.3: {}

  d3-array@3.2.4:
    dependencies:
      internmap: 2.0.3

  d3-color@3.1.0: {}

  d3-ease@3.0.1: {}

  d3-format@3.1.0: {}

  d3-interpolate@3.0.1:
    dependencies:
      d3-color: 3.1.0

  d3-path@3.1.0: {}

  d3-scale@4.0.2:
    dependencies:
      d3-array: 3.2.4
      d3-format: 3.1.0
      d3-interpolate: 3.0.1
      d3-time: 3.1.0
      d3-time-format: 4.1.0

  d3-shape@3.2.0:
    dependencies:
      d3-path: 3.1.0

  d3-time-format@4.1.0:
    dependencies:
      d3-time: 3.1.0

  d3-time@3.1.0:
    dependencies:
      d3-array: 3.2.4

  d3-timer@3.0.1: {}

  damerau-levenshtein@1.0.8: {}

  data-urls@5.0.0:
    dependencies:
      whatwg-mimetype: 4.0.0
      whatwg-url: 14.2.0

  data-view-buffer@1.0.2:
    dependencies:
      call-bound: 1.0.4
      es-errors: 1.3.0
      is-data-view: 1.0.2

  data-view-byte-length@1.0.2:
    dependencies:
      call-bound: 1.0.4
      es-errors: 1.3.0
      is-data-view: 1.0.2

  data-view-byte-offset@1.0.1:
    dependencies:
      call-bound: 1.0.4
      es-errors: 1.3.0
      is-data-view: 1.0.2

  date-fns@4.1.0: {}

  debug@3.2.7:
    dependencies:
      ms: 2.1.3

  debug@4.4.1:
    dependencies:
      ms: 2.1.3

  decimal.js-light@2.5.1: {}

  decimal.js@10.5.0: {}

  deep-eql@5.0.2: {}

  deep-is@0.1.4: {}

  define-data-property@1.1.4:
    dependencies:
      es-define-property: 1.0.1
      es-errors: 1.3.0
      gopd: 1.2.0

  define-properties@1.2.1:
    dependencies:
      define-data-property: 1.1.4
      has-property-descriptors: 1.0.2
      object-keys: 1.1.1

  delayed-stream@1.0.0: {}

  dequal@2.0.3: {}

  detect-libc@2.0.4:
    optional: true

  detect-node-es@1.1.0: {}

  didyoumean@1.2.2: {}

  dlv@1.1.3: {}

  doctrine@2.1.0:
    dependencies:
      esutils: 2.0.3

  dom-accessibility-api@0.5.16: {}

  dom-accessibility-api@0.6.3: {}

  dom-helpers@5.2.1:
    dependencies:
      '@babel/runtime': 7.27.6
      csstype: 3.1.3

  dunder-proto@1.0.1:
    dependencies:
      call-bind-apply-helpers: 1.0.2
      es-errors: 1.3.0
      gopd: 1.2.0

  eastasianwidth@0.2.0: {}

  easymde@2.20.0:
    dependencies:
      '@types/codemirror': 5.60.16
      '@types/marked': 4.3.2
      codemirror: 5.65.19
      codemirror-spell-checker: 1.1.2
      marked: 4.3.0

  electron-to-chromium@1.5.179: {}

  embla-carousel-react@8.5.1(react@19.1.0):
    dependencies:
      embla-carousel: 8.5.1
      embla-carousel-reactive-utils: 8.5.1(embla-carousel@8.5.1)
      react: 19.1.0

  embla-carousel-reactive-utils@8.5.1(embla-carousel@8.5.1):
    dependencies:
      embla-carousel: 8.5.1

  embla-carousel@8.5.1: {}

  emoji-regex@8.0.0: {}

  emoji-regex@9.2.2: {}

  entities@6.0.1: {}

  es-abstract@1.24.0:
    dependencies:
      array-buffer-byte-length: 1.0.2
      arraybuffer.prototype.slice: 1.0.4
      available-typed-arrays: 1.0.7
      call-bind: 1.0.8
      call-bound: 1.0.4
      data-view-buffer: 1.0.2
      data-view-byte-length: 1.0.2
      data-view-byte-offset: 1.0.1
      es-define-property: 1.0.1
      es-errors: 1.3.0
      es-object-atoms: 1.1.1
      es-set-tostringtag: 2.1.0
      es-to-primitive: 1.3.0
      function.prototype.name: 1.1.8
      get-intrinsic: 1.3.0
      get-proto: 1.0.1
      get-symbol-description: 1.1.0
      globalthis: 1.0.4
      gopd: 1.2.0
      has-property-descriptors: 1.0.2
      has-proto: 1.2.0
      has-symbols: 1.1.0
      hasown: 2.0.2
      internal-slot: 1.1.0
      is-array-buffer: 3.0.5
      is-callable: 1.2.7
      is-data-view: 1.0.2
      is-negative-zero: 2.0.3
      is-regex: 1.2.1
      is-set: 2.0.3
      is-shared-array-buffer: 1.0.4
      is-string: 1.1.1
      is-typed-array: 1.1.15
      is-weakref: 1.1.1
      math-intrinsics: 1.1.0
      object-inspect: 1.13.4
      object-keys: 1.1.1
      object.assign: 4.1.7
      own-keys: 1.0.1
      regexp.prototype.flags: 1.5.4
      safe-array-concat: 1.1.3
      safe-push-apply: 1.0.0
      safe-regex-test: 1.1.0
      set-proto: 1.0.0
      stop-iteration-iterator: 1.1.0
      string.prototype.trim: 1.2.10
      string.prototype.trimend: 1.0.9
      string.prototype.trimstart: 1.0.8
      typed-array-buffer: 1.0.3
      typed-array-byte-length: 1.0.3
      typed-array-byte-offset: 1.0.4
      typed-array-length: 1.0.7
      unbox-primitive: 1.1.0
      which-typed-array: 1.1.19

  es-define-property@1.0.1: {}

  es-errors@1.3.0: {}

  es-iterator-helpers@1.2.1:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.4
      define-properties: 1.2.1
      es-abstract: 1.24.0
      es-errors: 1.3.0
      es-set-tostringtag: 2.1.0
      function-bind: 1.1.2
      get-intrinsic: 1.3.0
      globalthis: 1.0.4
      gopd: 1.2.0
      has-property-descriptors: 1.0.2
      has-proto: 1.2.0
      has-symbols: 1.1.0
      internal-slot: 1.1.0
      iterator.prototype: 1.1.5
      safe-array-concat: 1.1.3

  es-module-lexer@1.7.0: {}

  es-object-atoms@1.1.1:
    dependencies:
      es-errors: 1.3.0

  es-set-tostringtag@2.1.0:
    dependencies:
      es-errors: 1.3.0
      get-intrinsic: 1.3.0
      has-tostringtag: 1.0.2
      hasown: 2.0.2

  es-shim-unscopables@1.1.0:
    dependencies:
      hasown: 2.0.2

  es-to-primitive@1.3.0:
    dependencies:
      is-callable: 1.2.7
      is-date-object: 1.1.0
      is-symbol: 1.1.1

  esbuild@0.25.5:
    optionalDependencies:
      '@esbuild/aix-ppc64': 0.25.5
      '@esbuild/android-arm': 0.25.5
      '@esbuild/android-arm64': 0.25.5
      '@esbuild/android-x64': 0.25.5
      '@esbuild/darwin-arm64': 0.25.5
      '@esbuild/darwin-x64': 0.25.5
      '@esbuild/freebsd-arm64': 0.25.5
      '@esbuild/freebsd-x64': 0.25.5
      '@esbuild/linux-arm': 0.25.5
      '@esbuild/linux-arm64': 0.25.5
      '@esbuild/linux-ia32': 0.25.5
      '@esbuild/linux-loong64': 0.25.5
      '@esbuild/linux-mips64el': 0.25.5
      '@esbuild/linux-ppc64': 0.25.5
      '@esbuild/linux-riscv64': 0.25.5
      '@esbuild/linux-s390x': 0.25.5
      '@esbuild/linux-x64': 0.25.5
      '@esbuild/netbsd-arm64': 0.25.5
      '@esbuild/netbsd-x64': 0.25.5
      '@esbuild/openbsd-arm64': 0.25.5
      '@esbuild/openbsd-x64': 0.25.5
      '@esbuild/sunos-x64': 0.25.5
      '@esbuild/win32-arm64': 0.25.5
      '@esbuild/win32-ia32': 0.25.5
      '@esbuild/win32-x64': 0.25.5

  escalade@3.2.0: {}

  escape-string-regexp@4.0.0: {}

  eslint-config-next@15.3.4(eslint@9.30.1(jiti@1.21.7))(typescript@5.8.3):
    dependencies:
      '@next/eslint-plugin-next': 15.3.4
      '@rushstack/eslint-patch': 1.12.0
      '@typescript-eslint/eslint-plugin': 8.35.1(@typescript-eslint/parser@8.35.1(eslint@9.30.1(jiti@1.21.7))(typescript@5.8.3))(eslint@9.30.1(jiti@1.21.7))(typescript@5.8.3)
      '@typescript-eslint/parser': 8.35.1(eslint@9.30.1(jiti@1.21.7))(typescript@5.8.3)
      eslint: 9.30.1(jiti@1.21.7)
      eslint-import-resolver-node: 0.3.9
      eslint-import-resolver-typescript: 3.10.1(eslint-plugin-import@2.32.0)(eslint@9.30.1(jiti@1.21.7))
      eslint-plugin-import: 2.32.0(@typescript-eslint/parser@8.35.1(eslint@9.30.1(jiti@1.21.7))(typescript@5.8.3))(eslint-import-resolver-typescript@3.10.1)(eslint@9.30.1(jiti@1.21.7))
      eslint-plugin-jsx-a11y: 6.10.2(eslint@9.30.1(jiti@1.21.7))
      eslint-plugin-react: 7.37.5(eslint@9.30.1(jiti@1.21.7))
      eslint-plugin-react-hooks: 5.2.0(eslint@9.30.1(jiti@1.21.7))
    optionalDependencies:
      typescript: 5.8.3
    transitivePeerDependencies:
      - eslint-import-resolver-webpack
      - eslint-plugin-import-x
      - supports-color

  eslint-import-resolver-node@0.3.9:
    dependencies:
      debug: 3.2.7
      is-core-module: 2.16.1
      resolve: 1.22.10
    transitivePeerDependencies:
      - supports-color

  eslint-import-resolver-typescript@3.10.1(eslint-plugin-import@2.32.0)(eslint@9.30.1(jiti@1.21.7)):
    dependencies:
      '@nolyfill/is-core-module': 1.0.39
      debug: 4.4.1
      eslint: 9.30.1(jiti@1.21.7)
      get-tsconfig: 4.10.1
      is-bun-module: 2.0.0
      stable-hash: 0.0.5
      tinyglobby: 0.2.14
      unrs-resolver: 1.10.1
    optionalDependencies:
      eslint-plugin-import: 2.32.0(@typescript-eslint/parser@8.35.1(eslint@9.30.1(jiti@1.21.7))(typescript@5.8.3))(eslint-import-resolver-typescript@3.10.1)(eslint@9.30.1(jiti@1.21.7))
    transitivePeerDependencies:
      - supports-color

  eslint-module-utils@2.12.1(@typescript-eslint/parser@8.35.1(eslint@9.30.1(jiti@1.21.7))(typescript@5.8.3))(eslint-import-resolver-node@0.3.9)(eslint-import-resolver-typescript@3.10.1)(eslint@9.30.1(jiti@1.21.7)):
    dependencies:
      debug: 3.2.7
    optionalDependencies:
      '@typescript-eslint/parser': 8.35.1(eslint@9.30.1(jiti@1.21.7))(typescript@5.8.3)
      eslint: 9.30.1(jiti@1.21.7)
      eslint-import-resolver-node: 0.3.9
      eslint-import-resolver-typescript: 3.10.1(eslint-plugin-import@2.32.0)(eslint@9.30.1(jiti@1.21.7))
    transitivePeerDependencies:
      - supports-color

  eslint-plugin-import@2.32.0(@typescript-eslint/parser@8.35.1(eslint@9.30.1(jiti@1.21.7))(typescript@5.8.3))(eslint-import-resolver-typescript@3.10.1)(eslint@9.30.1(jiti@1.21.7)):
    dependencies:
      '@rtsao/scc': 1.1.0
      array-includes: 3.1.9
      array.prototype.findlastindex: 1.2.6
      array.prototype.flat: 1.3.3
      array.prototype.flatmap: 1.3.3
      debug: 3.2.7
      doctrine: 2.1.0
      eslint: 9.30.1(jiti@1.21.7)
      eslint-import-resolver-node: 0.3.9
      eslint-module-utils: 2.12.1(@typescript-eslint/parser@8.35.1(eslint@9.30.1(jiti@1.21.7))(typescript@5.8.3))(eslint-import-resolver-node@0.3.9)(eslint-import-resolver-typescript@3.10.1)(eslint@9.30.1(jiti@1.21.7))
      hasown: 2.0.2
      is-core-module: 2.16.1
      is-glob: 4.0.3
      minimatch: 3.1.2
      object.fromentries: 2.0.8
      object.groupby: 1.0.3
      object.values: 1.2.1
      semver: 6.3.1
      string.prototype.trimend: 1.0.9
      tsconfig-paths: 3.15.0
    optionalDependencies:
      '@typescript-eslint/parser': 8.35.1(eslint@9.30.1(jiti@1.21.7))(typescript@5.8.3)
    transitivePeerDependencies:
      - eslint-import-resolver-typescript
      - eslint-import-resolver-webpack
      - supports-color

  eslint-plugin-jsx-a11y@6.10.2(eslint@9.30.1(jiti@1.21.7)):
    dependencies:
      aria-query: 5.3.2
      array-includes: 3.1.9
      array.prototype.flatmap: 1.3.3
      ast-types-flow: 0.0.8
      axe-core: 4.10.3
      axobject-query: 4.1.0
      damerau-levenshtein: 1.0.8
      emoji-regex: 9.2.2
      eslint: 9.30.1(jiti@1.21.7)
      hasown: 2.0.2
      jsx-ast-utils: 3.3.5
      language-tags: 1.0.9
      minimatch: 3.1.2
      object.fromentries: 2.0.8
      safe-regex-test: 1.1.0
      string.prototype.includes: 2.0.1

  eslint-plugin-react-hooks@5.2.0(eslint@9.30.1(jiti@1.21.7)):
    dependencies:
      eslint: 9.30.1(jiti@1.21.7)

  eslint-plugin-react@7.37.5(eslint@9.30.1(jiti@1.21.7)):
    dependencies:
      array-includes: 3.1.9
      array.prototype.findlast: 1.2.5
      array.prototype.flatmap: 1.3.3
      array.prototype.tosorted: 1.1.4
      doctrine: 2.1.0
      es-iterator-helpers: 1.2.1
      eslint: 9.30.1(jiti@1.21.7)
      estraverse: 5.3.0
      hasown: 2.0.2
      jsx-ast-utils: 3.3.5
      minimatch: 3.1.2
      object.entries: 1.1.9
      object.fromentries: 2.0.8
      object.values: 1.2.1
      prop-types: 15.8.1
      resolve: 2.0.0-next.5
      semver: 6.3.1
      string.prototype.matchall: 4.0.12
      string.prototype.repeat: 1.0.0

  eslint-scope@8.4.0:
    dependencies:
      esrecurse: 4.3.0
      estraverse: 5.3.0

  eslint-visitor-keys@3.4.3: {}

  eslint-visitor-keys@4.2.1: {}

  eslint@9.30.1(jiti@1.21.7):
    dependencies:
      '@eslint-community/eslint-utils': 4.7.0(eslint@9.30.1(jiti@1.21.7))
      '@eslint-community/regexpp': 4.12.1
      '@eslint/config-array': 0.21.0
      '@eslint/config-helpers': 0.3.0
      '@eslint/core': 0.14.0
      '@eslint/eslintrc': 3.3.1
      '@eslint/js': 9.30.1
      '@eslint/plugin-kit': 0.3.3
      '@humanfs/node': 0.16.6
      '@humanwhocodes/module-importer': 1.0.1
      '@humanwhocodes/retry': 0.4.3
      '@types/estree': 1.0.8
      '@types/json-schema': 7.0.15
      ajv: 6.12.6
      chalk: 4.1.2
      cross-spawn: 7.0.6
      debug: 4.4.1
      escape-string-regexp: 4.0.0
      eslint-scope: 8.4.0
      eslint-visitor-keys: 4.2.1
      espree: 10.4.0
      esquery: 1.6.0
      esutils: 2.0.3
      fast-deep-equal: 3.1.3
      file-entry-cache: 8.0.0
      find-up: 5.0.0
      glob-parent: 6.0.2
      ignore: 5.3.2
      imurmurhash: 0.1.4
      is-glob: 4.0.3
      json-stable-stringify-without-jsonify: 1.0.1
      lodash.merge: 4.6.2
      minimatch: 3.1.2
      natural-compare: 1.4.0
      optionator: 0.9.4
    optionalDependencies:
      jiti: 1.21.7
    transitivePeerDependencies:
      - supports-color

  espree@10.4.0:
    dependencies:
      acorn: 8.15.0
      acorn-jsx: 5.3.2(acorn@8.15.0)
      eslint-visitor-keys: 4.2.1

  esquery@1.6.0:
    dependencies:
      estraverse: 5.3.0

  esrecurse@4.3.0:
    dependencies:
      estraverse: 5.3.0

  estraverse@5.3.0: {}

  estree-walker@3.0.3:
    dependencies:
      '@types/estree': 1.0.8

  esutils@2.0.3: {}

  eventemitter3@4.0.7: {}

  expect-type@1.2.1: {}

  fast-deep-equal@3.1.3: {}

  fast-equals@5.2.2: {}

  fast-glob@3.3.1:
    dependencies:
      '@nodelib/fs.stat': 2.0.5
      '@nodelib/fs.walk': 1.2.8
      glob-parent: 5.1.2
      merge2: 1.4.1
      micromatch: 4.0.8

  fast-glob@3.3.3:
    dependencies:
      '@nodelib/fs.stat': 2.0.5
      '@nodelib/fs.walk': 1.2.8
      glob-parent: 5.1.2
      merge2: 1.4.1
      micromatch: 4.0.8

  fast-json-stable-stringify@2.1.0: {}

  fast-levenshtein@2.0.6: {}

  fastq@1.19.1:
    dependencies:
      reusify: 1.1.0

  fdir@6.4.6(picomatch@4.0.2):
    optionalDependencies:
      picomatch: 4.0.2

  fflate@0.8.2: {}

  file-entry-cache@8.0.0:
    dependencies:
      flat-cache: 4.0.1

  fill-range@7.1.1:
    dependencies:
      to-regex-range: 5.0.1

  find-up@5.0.0:
    dependencies:
      locate-path: 6.0.0
      path-exists: 4.0.0

  flat-cache@4.0.1:
    dependencies:
      flatted: 3.3.3
      keyv: 4.5.4

  flatted@3.3.3: {}

  follow-redirects@1.15.9: {}

  for-each@0.3.5:
    dependencies:
      is-callable: 1.2.7

  foreground-child@3.3.1:
    dependencies:
      cross-spawn: 7.0.6
      signal-exit: 4.1.0

  form-data@4.0.3:
    dependencies:
      asynckit: 0.4.0
      combined-stream: 1.0.8
      es-set-tostringtag: 2.1.0
      hasown: 2.0.2
      mime-types: 2.1.35

  fraction.js@4.3.7: {}

  fsevents@2.3.2:
    optional: true

  fsevents@2.3.3:
    optional: true

  function-bind@1.1.2: {}

  function.prototype.name@1.1.8:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.4
      define-properties: 1.2.1
      functions-have-names: 1.2.3
      hasown: 2.0.2
      is-callable: 1.2.7

  functions-have-names@1.2.3: {}

  gensync@1.0.0-beta.2: {}

  get-intrinsic@1.3.0:
    dependencies:
      call-bind-apply-helpers: 1.0.2
      es-define-property: 1.0.1
      es-errors: 1.3.0
      es-object-atoms: 1.1.1
      function-bind: 1.1.2
      get-proto: 1.0.1
      gopd: 1.2.0
      has-symbols: 1.1.0
      hasown: 2.0.2
      math-intrinsics: 1.1.0

  get-nonce@1.0.1: {}

  get-proto@1.0.1:
    dependencies:
      dunder-proto: 1.0.1
      es-object-atoms: 1.1.1

  get-symbol-description@1.1.0:
    dependencies:
      call-bound: 1.0.4
      es-errors: 1.3.0
      get-intrinsic: 1.3.0

  get-tsconfig@4.10.1:
    dependencies:
      resolve-pkg-maps: 1.0.0

  glob-parent@5.1.2:
    dependencies:
      is-glob: 4.0.3

  glob-parent@6.0.2:
    dependencies:
      is-glob: 4.0.3

  glob@10.4.5:
    dependencies:
      foreground-child: 3.3.1
      jackspeak: 3.4.3
      minimatch: 9.0.5
      minipass: 7.1.2
      package-json-from-dist: 1.0.1
      path-scurry: 1.11.1

  globals@14.0.0: {}

  globalthis@1.0.4:
    dependencies:
      define-properties: 1.2.1
      gopd: 1.2.0

  gopd@1.2.0: {}

  graphemer@1.4.0: {}

  has-bigints@1.1.0: {}

  has-flag@4.0.0: {}

  has-property-descriptors@1.0.2:
    dependencies:
      es-define-property: 1.0.1

  has-proto@1.2.0:
    dependencies:
      dunder-proto: 1.0.1

  has-symbols@1.1.0: {}

  has-tostringtag@1.0.2:
    dependencies:
      has-symbols: 1.1.0

  hasown@2.0.2:
    dependencies:
      function-bind: 1.1.2

  html-encoding-sniffer@4.0.0:
    dependencies:
      whatwg-encoding: 3.1.1

  http-proxy-agent@7.0.2:
    dependencies:
      agent-base: 7.1.3
      debug: 4.4.1
    transitivePeerDependencies:
      - supports-color

  https-proxy-agent@7.0.6:
    dependencies:
      agent-base: 7.1.3
      debug: 4.4.1
    transitivePeerDependencies:
      - supports-color

  iconv-lite@0.6.3:
    dependencies:
      safer-buffer: 2.1.2

  ignore@5.3.2: {}

  ignore@7.0.5: {}

  import-fresh@3.3.1:
    dependencies:
      parent-module: 1.0.1
      resolve-from: 4.0.0

  imurmurhash@0.1.4: {}

  indent-string@4.0.0: {}

  input-otp@1.4.1(react-dom@19.1.0(react@19.1.0))(react@19.1.0):
    dependencies:
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)

  internal-slot@1.1.0:
    dependencies:
      es-errors: 1.3.0
      hasown: 2.0.2
      side-channel: 1.1.0

  internmap@2.0.3: {}

  is-array-buffer@3.0.5:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.4
      get-intrinsic: 1.3.0

  is-arrayish@0.3.2:
    optional: true

  is-async-function@2.1.1:
    dependencies:
      async-function: 1.0.0
      call-bound: 1.0.4
      get-proto: 1.0.1
      has-tostringtag: 1.0.2
      safe-regex-test: 1.1.0

  is-bigint@1.1.0:
    dependencies:
      has-bigints: 1.1.0

  is-binary-path@2.1.0:
    dependencies:
      binary-extensions: 2.3.0

  is-boolean-object@1.2.2:
    dependencies:
      call-bound: 1.0.4
      has-tostringtag: 1.0.2

  is-bun-module@2.0.0:
    dependencies:
      semver: 7.7.2

  is-callable@1.2.7: {}

  is-core-module@2.16.1:
    dependencies:
      hasown: 2.0.2

  is-data-view@1.0.2:
    dependencies:
      call-bound: 1.0.4
      get-intrinsic: 1.3.0
      is-typed-array: 1.1.15

  is-date-object@1.1.0:
    dependencies:
      call-bound: 1.0.4
      has-tostringtag: 1.0.2

  is-extglob@2.1.1: {}

  is-finalizationregistry@1.1.1:
    dependencies:
      call-bound: 1.0.4

  is-fullwidth-code-point@3.0.0: {}

  is-generator-function@1.1.0:
    dependencies:
      call-bound: 1.0.4
      get-proto: 1.0.1
      has-tostringtag: 1.0.2
      safe-regex-test: 1.1.0

  is-glob@4.0.3:
    dependencies:
      is-extglob: 2.1.1

  is-map@2.0.3: {}

  is-negative-zero@2.0.3: {}

  is-number-object@1.1.1:
    dependencies:
      call-bound: 1.0.4
      has-tostringtag: 1.0.2

  is-number@7.0.0: {}

  is-potential-custom-element-name@1.0.1: {}

  is-regex@1.2.1:
    dependencies:
      call-bound: 1.0.4
      gopd: 1.2.0
      has-tostringtag: 1.0.2
      hasown: 2.0.2

  is-set@2.0.3: {}

  is-shared-array-buffer@1.0.4:
    dependencies:
      call-bound: 1.0.4

  is-string@1.1.1:
    dependencies:
      call-bound: 1.0.4
      has-tostringtag: 1.0.2

  is-symbol@1.1.1:
    dependencies:
      call-bound: 1.0.4
      has-symbols: 1.1.0
      safe-regex-test: 1.1.0

  is-typed-array@1.1.15:
    dependencies:
      which-typed-array: 1.1.19

  is-weakmap@2.0.2: {}

  is-weakref@1.1.1:
    dependencies:
      call-bound: 1.0.4

  is-weakset@2.0.4:
    dependencies:
      call-bound: 1.0.4
      get-intrinsic: 1.3.0

  isarray@2.0.5: {}

  isexe@2.0.0: {}

  iterator.prototype@1.1.5:
    dependencies:
      define-data-property: 1.1.4
      es-object-atoms: 1.1.1
      get-intrinsic: 1.3.0
      get-proto: 1.0.1
      has-symbols: 1.1.0
      set-function-name: 2.0.2

  jackspeak@3.4.3:
    dependencies:
      '@isaacs/cliui': 8.0.2
    optionalDependencies:
      '@pkgjs/parseargs': 0.11.0

  jiti@1.21.7: {}

  js-tokens@4.0.0: {}

  js-tokens@9.0.1: {}

  js-yaml@4.1.0:
    dependencies:
      argparse: 2.0.1

  jsdom@26.1.0:
    dependencies:
      cssstyle: 4.6.0
      data-urls: 5.0.0
      decimal.js: 10.5.0
      html-encoding-sniffer: 4.0.0
      http-proxy-agent: 7.0.2
      https-proxy-agent: 7.0.6
      is-potential-custom-element-name: 1.0.1
      nwsapi: 2.2.20
      parse5: 7.3.0
      rrweb-cssom: 0.8.0
      saxes: 6.0.0
      symbol-tree: 3.2.4
      tough-cookie: 5.1.2
      w3c-xmlserializer: 5.0.0
      webidl-conversions: 7.0.0
      whatwg-encoding: 3.1.1
      whatwg-mimetype: 4.0.0
      whatwg-url: 14.2.0
      ws: 8.18.3
      xml-name-validator: 5.0.0
    transitivePeerDependencies:
      - bufferutil
      - supports-color
      - utf-8-validate

  jsesc@3.1.0: {}

  json-buffer@3.0.1: {}

  json-schema-traverse@0.4.1: {}

  json-stable-stringify-without-jsonify@1.0.1: {}

  json5@1.0.2:
    dependencies:
      minimist: 1.2.8

  json5@2.2.3: {}

  jsx-ast-utils@3.3.5:
    dependencies:
      array-includes: 3.1.9
      array.prototype.flat: 1.3.3
      object.assign: 4.1.7
      object.values: 1.2.1

  keyv@4.5.4:
    dependencies:
      json-buffer: 3.0.1

  language-subtag-registry@0.3.23: {}

  language-tags@1.0.9:
    dependencies:
      language-subtag-registry: 0.3.23

  levn@0.4.1:
    dependencies:
      prelude-ls: 1.2.1
      type-check: 0.4.0

  lilconfig@3.1.3: {}

  lines-and-columns@1.2.4: {}

  locate-path@6.0.0:
    dependencies:
      p-locate: 5.0.0

  lodash.merge@4.6.2: {}

  lodash@4.17.21: {}

  loose-envify@1.4.0:
    dependencies:
      js-tokens: 4.0.0

  loupe@3.1.4: {}

  lru-cache@10.4.3: {}

  lru-cache@5.1.1:
    dependencies:
      yallist: 3.1.1

  lucide-react@0.454.0(react@19.1.0):
    dependencies:
      react: 19.1.0

  lz-string@1.5.0: {}

  magic-string@0.30.17:
    dependencies:
      '@jridgewell/sourcemap-codec': 1.5.4

  marked@4.3.0: {}

  math-intrinsics@1.1.0: {}

  merge2@1.4.1: {}

  micromatch@4.0.8:
    dependencies:
      braces: 3.0.3
      picomatch: 2.3.1

  mime-db@1.52.0: {}

  mime-types@2.1.35:
    dependencies:
      mime-db: 1.52.0

  min-indent@1.0.1: {}

  minimatch@3.1.2:
    dependencies:
      brace-expansion: 1.1.12

  minimatch@9.0.5:
    dependencies:
      brace-expansion: 2.0.2

  minimist@1.2.8: {}

  minipass@7.1.2: {}

  mrmime@2.0.1: {}

  ms@2.1.3: {}

  mz@2.7.0:
    dependencies:
      any-promise: 1.3.0
      object-assign: 4.1.1
      thenify-all: 1.6.0

  nanoid@3.3.11: {}

  napi-postinstall@0.3.0: {}

  natural-compare@1.4.0: {}

  next-themes@0.4.6(react-dom@19.1.0(react@19.1.0))(react@19.1.0):
    dependencies:
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)

  next@15.2.4(@babel/core@7.28.0)(@playwright/test@1.53.2)(react-dom@19.1.0(react@19.1.0))(react@19.1.0):
    dependencies:
      '@next/env': 15.2.4
      '@swc/counter': 0.1.3
      '@swc/helpers': 0.5.15
      busboy: 1.6.0
      caniuse-lite: 1.0.30001726
      postcss: 8.4.31
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
      styled-jsx: 5.1.6(@babel/core@7.28.0)(react@19.1.0)
    optionalDependencies:
      '@next/swc-darwin-arm64': 15.2.4
      '@next/swc-darwin-x64': 15.2.4
      '@next/swc-linux-arm64-gnu': 15.2.4
      '@next/swc-linux-arm64-musl': 15.2.4
      '@next/swc-linux-x64-gnu': 15.2.4
      '@next/swc-linux-x64-musl': 15.2.4
      '@next/swc-win32-arm64-msvc': 15.2.4
      '@next/swc-win32-x64-msvc': 15.2.4
      '@playwright/test': 1.53.2
      sharp: 0.33.5
    transitivePeerDependencies:
      - '@babel/core'
      - babel-plugin-macros

  node-releases@2.0.19: {}

  normalize-path@3.0.0: {}

  normalize-range@0.1.2: {}

  nwsapi@2.2.20: {}

  object-assign@4.1.1: {}

  object-hash@3.0.0: {}

  object-inspect@1.13.4: {}

  object-keys@1.1.1: {}

  object.assign@4.1.7:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.4
      define-properties: 1.2.1
      es-object-atoms: 1.1.1
      has-symbols: 1.1.0
      object-keys: 1.1.1

  object.entries@1.1.9:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.4
      define-properties: 1.2.1
      es-object-atoms: 1.1.1

  object.fromentries@2.0.8:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-abstract: 1.24.0
      es-object-atoms: 1.1.1

  object.groupby@1.0.3:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-abstract: 1.24.0

  object.values@1.2.1:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.4
      define-properties: 1.2.1
      es-object-atoms: 1.1.1

  optionator@0.9.4:
    dependencies:
      deep-is: 0.1.4
      fast-levenshtein: 2.0.6
      levn: 0.4.1
      prelude-ls: 1.2.1
      type-check: 0.4.0
      word-wrap: 1.2.5

  own-keys@1.0.1:
    dependencies:
      get-intrinsic: 1.3.0
      object-keys: 1.1.1
      safe-push-apply: 1.0.0

  p-limit@3.1.0:
    dependencies:
      yocto-queue: 0.1.0

  p-locate@5.0.0:
    dependencies:
      p-limit: 3.1.0

  package-json-from-dist@1.0.1: {}

  parent-module@1.0.1:
    dependencies:
      callsites: 3.1.0

  parse5@7.3.0:
    dependencies:
      entities: 6.0.1

  path-exists@4.0.0: {}

  path-key@3.1.1: {}

  path-parse@1.0.7: {}

  path-scurry@1.11.1:
    dependencies:
      lru-cache: 10.4.3
      minipass: 7.1.2

  pathe@2.0.3: {}

  pathval@2.0.1: {}

  picocolors@1.1.1: {}

  picomatch@2.3.1: {}

  picomatch@4.0.2: {}

  pify@2.3.0: {}

  pirates@4.0.7: {}

  playwright-core@1.53.2: {}

  playwright@1.53.2:
    dependencies:
      playwright-core: 1.53.2
    optionalDependencies:
      fsevents: 2.3.2

  possible-typed-array-names@1.1.0: {}

  postcss-import@15.1.0(postcss@8.5.6):
    dependencies:
      postcss: 8.5.6
      postcss-value-parser: 4.2.0
      read-cache: 1.0.0
      resolve: 1.22.10

  postcss-js@4.0.1(postcss@8.5.6):
    dependencies:
      camelcase-css: 2.0.1
      postcss: 8.5.6

  postcss-load-config@4.0.2(postcss@8.5.6):
    dependencies:
      lilconfig: 3.1.3
      yaml: 2.8.0
    optionalDependencies:
      postcss: 8.5.6

  postcss-nested@6.2.0(postcss@8.5.6):
    dependencies:
      postcss: 8.5.6
      postcss-selector-parser: 6.1.2

  postcss-selector-parser@6.1.2:
    dependencies:
      cssesc: 3.0.0
      util-deprecate: 1.0.2

  postcss-value-parser@4.2.0: {}

  postcss@8.4.31:
    dependencies:
      nanoid: 3.3.11
      picocolors: 1.1.1
      source-map-js: 1.2.1

  postcss@8.5.6:
    dependencies:
      nanoid: 3.3.11
      picocolors: 1.1.1
      source-map-js: 1.2.1

  prelude-ls@1.2.1: {}

  pretty-format@27.5.1:
    dependencies:
      ansi-regex: 5.0.1
      ansi-styles: 5.2.0
      react-is: 17.0.2

  prop-types@15.8.1:
    dependencies:
      loose-envify: 1.4.0
      object-assign: 4.1.1
      react-is: 16.13.1

  proxy-from-env@1.1.0: {}

  punycode@2.3.1: {}

  queue-microtask@1.2.3: {}

  react-day-picker@8.10.1(date-fns@4.1.0)(react@19.1.0):
    dependencies:
      date-fns: 4.1.0
      react: 19.1.0

  react-dom@19.1.0(react@19.1.0):
    dependencies:
      react: 19.1.0
      scheduler: 0.26.0

  react-hook-form@7.59.0(react@19.1.0):
    dependencies:
      react: 19.1.0

  react-is@16.13.1: {}

  react-is@17.0.2: {}

  react-is@18.3.1: {}

  react-refresh@0.17.0: {}

  react-remove-scroll-bar@2.3.8(@types/react@19.1.8)(react@19.1.0):
    dependencies:
      react: 19.1.0
      react-style-singleton: 2.2.3(@types/react@19.1.8)(react@19.1.0)
      tslib: 2.8.1
    optionalDependencies:
      '@types/react': 19.1.8

  react-remove-scroll@2.7.1(@types/react@19.1.8)(react@19.1.0):
    dependencies:
      react: 19.1.0
      react-remove-scroll-bar: 2.3.8(@types/react@19.1.8)(react@19.1.0)
      react-style-singleton: 2.2.3(@types/react@19.1.8)(react@19.1.0)
      tslib: 2.8.1
      use-callback-ref: 1.3.3(@types/react@19.1.8)(react@19.1.0)
      use-sidecar: 1.1.3(@types/react@19.1.8)(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8

  react-resizable-panels@2.1.9(react-dom@19.1.0(react@19.1.0))(react@19.1.0):
    dependencies:
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)

  react-simplemde-editor@5.2.0(easymde@2.20.0)(react-dom@19.1.0(react@19.1.0))(react@19.1.0):
    dependencies:
      '@types/codemirror': 5.60.16
      easymde: 2.20.0
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)

  react-smooth@4.0.4(react-dom@19.1.0(react@19.1.0))(react@19.1.0):
    dependencies:
      fast-equals: 5.2.2
      prop-types: 15.8.1
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
      react-transition-group: 4.4.5(react-dom@19.1.0(react@19.1.0))(react@19.1.0)

  react-style-singleton@2.2.3(@types/react@19.1.8)(react@19.1.0):
    dependencies:
      get-nonce: 1.0.1
      react: 19.1.0
      tslib: 2.8.1
    optionalDependencies:
      '@types/react': 19.1.8

  react-transition-group@4.4.5(react-dom@19.1.0(react@19.1.0))(react@19.1.0):
    dependencies:
      '@babel/runtime': 7.27.6
      dom-helpers: 5.2.1
      loose-envify: 1.4.0
      prop-types: 15.8.1
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)

  react@19.1.0: {}

  read-cache@1.0.0:
    dependencies:
      pify: 2.3.0

  readdirp@3.6.0:
    dependencies:
      picomatch: 2.3.1

  recharts-scale@0.4.5:
    dependencies:
      decimal.js-light: 2.5.1

  recharts@2.15.0(react-dom@19.1.0(react@19.1.0))(react@19.1.0):
    dependencies:
      clsx: 2.1.1
      eventemitter3: 4.0.7
      lodash: 4.17.21
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
      react-is: 18.3.1
      react-smooth: 4.0.4(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      recharts-scale: 0.4.5
      tiny-invariant: 1.3.3
      victory-vendor: 36.9.2

  redent@3.0.0:
    dependencies:
      indent-string: 4.0.0
      strip-indent: 3.0.0

  reflect.getprototypeof@1.0.10:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-abstract: 1.24.0
      es-errors: 1.3.0
      es-object-atoms: 1.1.1
      get-intrinsic: 1.3.0
      get-proto: 1.0.1
      which-builtin-type: 1.2.1

  regexp.prototype.flags@1.5.4:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-errors: 1.3.0
      get-proto: 1.0.1
      gopd: 1.2.0
      set-function-name: 2.0.2

  resolve-from@4.0.0: {}

  resolve-pkg-maps@1.0.0: {}

  resolve@1.22.10:
    dependencies:
      is-core-module: 2.16.1
      path-parse: 1.0.7
      supports-preserve-symlinks-flag: 1.0.0

  resolve@2.0.0-next.5:
    dependencies:
      is-core-module: 2.16.1
      path-parse: 1.0.7
      supports-preserve-symlinks-flag: 1.0.0

  reusify@1.1.0: {}

  rollup@4.44.1:
    dependencies:
      '@types/estree': 1.0.8
    optionalDependencies:
      '@rollup/rollup-android-arm-eabi': 4.44.1
      '@rollup/rollup-android-arm64': 4.44.1
      '@rollup/rollup-darwin-arm64': 4.44.1
      '@rollup/rollup-darwin-x64': 4.44.1
      '@rollup/rollup-freebsd-arm64': 4.44.1
      '@rollup/rollup-freebsd-x64': 4.44.1
      '@rollup/rollup-linux-arm-gnueabihf': 4.44.1
      '@rollup/rollup-linux-arm-musleabihf': 4.44.1
      '@rollup/rollup-linux-arm64-gnu': 4.44.1
      '@rollup/rollup-linux-arm64-musl': 4.44.1
      '@rollup/rollup-linux-loongarch64-gnu': 4.44.1
      '@rollup/rollup-linux-powerpc64le-gnu': 4.44.1
      '@rollup/rollup-linux-riscv64-gnu': 4.44.1
      '@rollup/rollup-linux-riscv64-musl': 4.44.1
      '@rollup/rollup-linux-s390x-gnu': 4.44.1
      '@rollup/rollup-linux-x64-gnu': 4.44.1
      '@rollup/rollup-linux-x64-musl': 4.44.1
      '@rollup/rollup-win32-arm64-msvc': 4.44.1
      '@rollup/rollup-win32-ia32-msvc': 4.44.1
      '@rollup/rollup-win32-x64-msvc': 4.44.1
      fsevents: 2.3.3

  rrweb-cssom@0.8.0: {}

  run-parallel@1.2.0:
    dependencies:
      queue-microtask: 1.2.3

  safe-array-concat@1.1.3:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.4
      get-intrinsic: 1.3.0
      has-symbols: 1.1.0
      isarray: 2.0.5

  safe-push-apply@1.0.0:
    dependencies:
      es-errors: 1.3.0
      isarray: 2.0.5

  safe-regex-test@1.1.0:
    dependencies:
      call-bound: 1.0.4
      es-errors: 1.3.0
      is-regex: 1.2.1

  safer-buffer@2.1.2: {}

  saxes@6.0.0:
    dependencies:
      xmlchars: 2.2.0

  scheduler@0.26.0: {}

  semver@6.3.1: {}

  semver@7.7.2: {}

  set-function-length@1.2.2:
    dependencies:
      define-data-property: 1.1.4
      es-errors: 1.3.0
      function-bind: 1.1.2
      get-intrinsic: 1.3.0
      gopd: 1.2.0
      has-property-descriptors: 1.0.2

  set-function-name@2.0.2:
    dependencies:
      define-data-property: 1.1.4
      es-errors: 1.3.0
      functions-have-names: 1.2.3
      has-property-descriptors: 1.0.2

  set-proto@1.0.0:
    dependencies:
      dunder-proto: 1.0.1
      es-errors: 1.3.0
      es-object-atoms: 1.1.1

  sharp@0.33.5:
    dependencies:
      color: 4.2.3
      detect-libc: 2.0.4
      semver: 7.7.2
    optionalDependencies:
      '@img/sharp-darwin-arm64': 0.33.5
      '@img/sharp-darwin-x64': 0.33.5
      '@img/sharp-libvips-darwin-arm64': 1.0.4
      '@img/sharp-libvips-darwin-x64': 1.0.4
      '@img/sharp-libvips-linux-arm': 1.0.5
      '@img/sharp-libvips-linux-arm64': 1.0.4
      '@img/sharp-libvips-linux-s390x': 1.0.4
      '@img/sharp-libvips-linux-x64': 1.0.4
      '@img/sharp-libvips-linuxmusl-arm64': 1.0.4
      '@img/sharp-libvips-linuxmusl-x64': 1.0.4
      '@img/sharp-linux-arm': 0.33.5
      '@img/sharp-linux-arm64': 0.33.5
      '@img/sharp-linux-s390x': 0.33.5
      '@img/sharp-linux-x64': 0.33.5
      '@img/sharp-linuxmusl-arm64': 0.33.5
      '@img/sharp-linuxmusl-x64': 0.33.5
      '@img/sharp-wasm32': 0.33.5
      '@img/sharp-win32-ia32': 0.33.5
      '@img/sharp-win32-x64': 0.33.5
    optional: true

  shebang-command@2.0.0:
    dependencies:
      shebang-regex: 3.0.0

  shebang-regex@3.0.0: {}

  side-channel-list@1.0.0:
    dependencies:
      es-errors: 1.3.0
      object-inspect: 1.13.4

  side-channel-map@1.0.1:
    dependencies:
      call-bound: 1.0.4
      es-errors: 1.3.0
      get-intrinsic: 1.3.0
      object-inspect: 1.13.4

  side-channel-weakmap@1.0.2:
    dependencies:
      call-bound: 1.0.4
      es-errors: 1.3.0
      get-intrinsic: 1.3.0
      object-inspect: 1.13.4
      side-channel-map: 1.0.1

  side-channel@1.1.0:
    dependencies:
      es-errors: 1.3.0
      object-inspect: 1.13.4
      side-channel-list: 1.0.0
      side-channel-map: 1.0.1
      side-channel-weakmap: 1.0.2

  siginfo@2.0.0: {}

  signal-exit@4.1.0: {}

  simple-swizzle@0.2.2:
    dependencies:
      is-arrayish: 0.3.2
    optional: true

  sirv@3.0.1:
    dependencies:
      '@polka/url': 1.0.0-next.29
      mrmime: 2.0.1
      totalist: 3.0.1

  sonner@1.7.4(react-dom@19.1.0(react@19.1.0))(react@19.1.0):
    dependencies:
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)

  source-map-js@1.2.1: {}

  stable-hash@0.0.5: {}

  stackback@0.0.2: {}

  std-env@3.9.0: {}

  stop-iteration-iterator@1.1.0:
    dependencies:
      es-errors: 1.3.0
      internal-slot: 1.1.0

  streamsearch@1.1.0: {}

  string-width@4.2.3:
    dependencies:
      emoji-regex: 8.0.0
      is-fullwidth-code-point: 3.0.0
      strip-ansi: 6.0.1

  string-width@5.1.2:
    dependencies:
      eastasianwidth: 0.2.0
      emoji-regex: 9.2.2
      strip-ansi: 7.1.0

  string.prototype.includes@2.0.1:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-abstract: 1.24.0

  string.prototype.matchall@4.0.12:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.4
      define-properties: 1.2.1
      es-abstract: 1.24.0
      es-errors: 1.3.0
      es-object-atoms: 1.1.1
      get-intrinsic: 1.3.0
      gopd: 1.2.0
      has-symbols: 1.1.0
      internal-slot: 1.1.0
      regexp.prototype.flags: 1.5.4
      set-function-name: 2.0.2
      side-channel: 1.1.0

  string.prototype.repeat@1.0.0:
    dependencies:
      define-properties: 1.2.1
      es-abstract: 1.24.0

  string.prototype.trim@1.2.10:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.4
      define-data-property: 1.1.4
      define-properties: 1.2.1
      es-abstract: 1.24.0
      es-object-atoms: 1.1.1
      has-property-descriptors: 1.0.2

  string.prototype.trimend@1.0.9:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.4
      define-properties: 1.2.1
      es-object-atoms: 1.1.1

  string.prototype.trimstart@1.0.8:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-object-atoms: 1.1.1

  strip-ansi@6.0.1:
    dependencies:
      ansi-regex: 5.0.1

  strip-ansi@7.1.0:
    dependencies:
      ansi-regex: 6.1.0

  strip-bom@3.0.0: {}

  strip-indent@3.0.0:
    dependencies:
      min-indent: 1.0.1

  strip-json-comments@3.1.1: {}

  strip-literal@3.0.0:
    dependencies:
      js-tokens: 9.0.1

  styled-jsx@5.1.6(@babel/core@7.28.0)(react@19.1.0):
    dependencies:
      client-only: 0.0.1
      react: 19.1.0
    optionalDependencies:
      '@babel/core': 7.28.0

  sucrase@3.35.0:
    dependencies:
      '@jridgewell/gen-mapping': 0.3.12
      commander: 4.1.1
      glob: 10.4.5
      lines-and-columns: 1.2.4
      mz: 2.7.0
      pirates: 4.0.7
      ts-interface-checker: 0.1.13

  supports-color@7.2.0:
    dependencies:
      has-flag: 4.0.0

  supports-preserve-symlinks-flag@1.0.0: {}

  symbol-tree@3.2.4: {}

  tailwind-merge@2.6.0: {}

  tailwindcss-animate@1.0.7(tailwindcss@3.4.17):
    dependencies:
      tailwindcss: 3.4.17

  tailwindcss@3.4.17:
    dependencies:
      '@alloc/quick-lru': 5.2.0
      arg: 5.0.2
      chokidar: 3.6.0
      didyoumean: 1.2.2
      dlv: 1.1.3
      fast-glob: 3.3.3
      glob-parent: 6.0.2
      is-glob: 4.0.3
      jiti: 1.21.7
      lilconfig: 3.1.3
      micromatch: 4.0.8
      normalize-path: 3.0.0
      object-hash: 3.0.0
      picocolors: 1.1.1
      postcss: 8.5.6
      postcss-import: 15.1.0(postcss@8.5.6)
      postcss-js: 4.0.1(postcss@8.5.6)
      postcss-load-config: 4.0.2(postcss@8.5.6)
      postcss-nested: 6.2.0(postcss@8.5.6)
      postcss-selector-parser: 6.1.2
      resolve: 1.22.10
      sucrase: 3.35.0
    transitivePeerDependencies:
      - ts-node

  thenify-all@1.6.0:
    dependencies:
      thenify: 3.3.1

  thenify@3.3.1:
    dependencies:
      any-promise: 1.3.0

  tiny-invariant@1.3.3: {}

  tinybench@2.9.0: {}

  tinyexec@0.3.2: {}

  tinyglobby@0.2.14:
    dependencies:
      fdir: 6.4.6(picomatch@4.0.2)
      picomatch: 4.0.2

  tinypool@1.1.1: {}

  tinyrainbow@2.0.0: {}

  tinyspy@4.0.3: {}

  tldts-core@6.1.86: {}

  tldts@6.1.86:
    dependencies:
      tldts-core: 6.1.86

  to-regex-range@5.0.1:
    dependencies:
      is-number: 7.0.0

  totalist@3.0.1: {}

  tough-cookie@5.1.2:
    dependencies:
      tldts: 6.1.86

  tr46@5.1.1:
    dependencies:
      punycode: 2.3.1

  ts-api-utils@2.1.0(typescript@5.8.3):
    dependencies:
      typescript: 5.8.3

  ts-interface-checker@0.1.13: {}

  tsconfig-paths@3.15.0:
    dependencies:
      '@types/json5': 0.0.29
      json5: 1.0.2
      minimist: 1.2.8
      strip-bom: 3.0.0

  tslib@2.8.1: {}

  type-check@0.4.0:
    dependencies:
      prelude-ls: 1.2.1

  typed-array-buffer@1.0.3:
    dependencies:
      call-bound: 1.0.4
      es-errors: 1.3.0
      is-typed-array: 1.1.15

  typed-array-byte-length@1.0.3:
    dependencies:
      call-bind: 1.0.8
      for-each: 0.3.5
      gopd: 1.2.0
      has-proto: 1.2.0
      is-typed-array: 1.1.15

  typed-array-byte-offset@1.0.4:
    dependencies:
      available-typed-arrays: 1.0.7
      call-bind: 1.0.8
      for-each: 0.3.5
      gopd: 1.2.0
      has-proto: 1.2.0
      is-typed-array: 1.1.15
      reflect.getprototypeof: 1.0.10

  typed-array-length@1.0.7:
    dependencies:
      call-bind: 1.0.8
      for-each: 0.3.5
      gopd: 1.2.0
      is-typed-array: 1.1.15
      possible-typed-array-names: 1.1.0
      reflect.getprototypeof: 1.0.10

  typescript@5.8.3: {}

  typo-js@1.2.5: {}

  unbox-primitive@1.1.0:
    dependencies:
      call-bound: 1.0.4
      has-bigints: 1.1.0
      has-symbols: 1.1.0
      which-boxed-primitive: 1.1.1

  undici-types@6.21.0: {}

  unrs-resolver@1.10.1:
    dependencies:
      napi-postinstall: 0.3.0
    optionalDependencies:
      '@unrs/resolver-binding-android-arm-eabi': 1.10.1
      '@unrs/resolver-binding-android-arm64': 1.10.1
      '@unrs/resolver-binding-darwin-arm64': 1.10.1
      '@unrs/resolver-binding-darwin-x64': 1.10.1
      '@unrs/resolver-binding-freebsd-x64': 1.10.1
      '@unrs/resolver-binding-linux-arm-gnueabihf': 1.10.1
      '@unrs/resolver-binding-linux-arm-musleabihf': 1.10.1
      '@unrs/resolver-binding-linux-arm64-gnu': 1.10.1
      '@unrs/resolver-binding-linux-arm64-musl': 1.10.1
      '@unrs/resolver-binding-linux-ppc64-gnu': 1.10.1
      '@unrs/resolver-binding-linux-riscv64-gnu': 1.10.1
      '@unrs/resolver-binding-linux-riscv64-musl': 1.10.1
      '@unrs/resolver-binding-linux-s390x-gnu': 1.10.1
      '@unrs/resolver-binding-linux-x64-gnu': 1.10.1
      '@unrs/resolver-binding-linux-x64-musl': 1.10.1
      '@unrs/resolver-binding-wasm32-wasi': 1.10.1
      '@unrs/resolver-binding-win32-arm64-msvc': 1.10.1
      '@unrs/resolver-binding-win32-ia32-msvc': 1.10.1
      '@unrs/resolver-binding-win32-x64-msvc': 1.10.1

  update-browserslist-db@1.1.3(browserslist@4.25.1):
    dependencies:
      browserslist: 4.25.1
      escalade: 3.2.0
      picocolors: 1.1.1

  uri-js@4.4.1:
    dependencies:
      punycode: 2.3.1

  use-callback-ref@1.3.3(@types/react@19.1.8)(react@19.1.0):
    dependencies:
      react: 19.1.0
      tslib: 2.8.1
    optionalDependencies:
      '@types/react': 19.1.8

  use-sidecar@1.1.3(@types/react@19.1.8)(react@19.1.0):
    dependencies:
      detect-node-es: 1.1.0
      react: 19.1.0
      tslib: 2.8.1
    optionalDependencies:
      '@types/react': 19.1.8

  use-sync-external-store@1.5.0(react@19.1.0):
    dependencies:
      react: 19.1.0

  util-deprecate@1.0.2: {}

  vaul@0.9.9(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0):
    dependencies:
      '@radix-ui/react-dialog': 1.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    transitivePeerDependencies:
      - '@types/react'
      - '@types/react-dom'

  victory-vendor@36.9.2:
    dependencies:
      '@types/d3-array': 3.2.1
      '@types/d3-ease': 3.0.2
      '@types/d3-interpolate': 3.0.4
      '@types/d3-scale': 4.0.9
      '@types/d3-shape': 3.1.7
      '@types/d3-time': 3.0.4
      '@types/d3-timer': 3.0.2
      d3-array: 3.2.4
      d3-ease: 3.0.1
      d3-interpolate: 3.0.1
      d3-scale: 4.0.2
      d3-shape: 3.2.0
      d3-time: 3.1.0
      d3-timer: 3.0.1

  vite-node@3.2.4(@types/node@22.16.0)(jiti@1.21.7)(yaml@2.8.0):
    dependencies:
      cac: 6.7.14
      debug: 4.4.1
      es-module-lexer: 1.7.0
      pathe: 2.0.3
      vite: 7.0.0(@types/node@22.16.0)(jiti@1.21.7)(yaml@2.8.0)
    transitivePeerDependencies:
      - '@types/node'
      - jiti
      - less
      - lightningcss
      - sass
      - sass-embedded
      - stylus
      - sugarss
      - supports-color
      - terser
      - tsx
      - yaml

  vite@7.0.0(@types/node@22.16.0)(jiti@1.21.7)(yaml@2.8.0):
    dependencies:
      esbuild: 0.25.5
      fdir: 6.4.6(picomatch@4.0.2)
      picomatch: 4.0.2
      postcss: 8.5.6
      rollup: 4.44.1
      tinyglobby: 0.2.14
    optionalDependencies:
      '@types/node': 22.16.0
      fsevents: 2.3.3
      jiti: 1.21.7
      yaml: 2.8.0

  vitest@3.2.4(@types/node@22.16.0)(@vitest/ui@3.2.4)(jiti@1.21.7)(jsdom@26.1.0)(yaml@2.8.0):
    dependencies:
      '@types/chai': 5.2.2
      '@vitest/expect': 3.2.4
      '@vitest/mocker': 3.2.4(vite@7.0.0(@types/node@22.16.0)(jiti@1.21.7)(yaml@2.8.0))
      '@vitest/pretty-format': 3.2.4
      '@vitest/runner': 3.2.4
      '@vitest/snapshot': 3.2.4
      '@vitest/spy': 3.2.4
      '@vitest/utils': 3.2.4
      chai: 5.2.0
      debug: 4.4.1
      expect-type: 1.2.1
      magic-string: 0.30.17
      pathe: 2.0.3
      picomatch: 4.0.2
      std-env: 3.9.0
      tinybench: 2.9.0
      tinyexec: 0.3.2
      tinyglobby: 0.2.14
      tinypool: 1.1.1
      tinyrainbow: 2.0.0
      vite: 7.0.0(@types/node@22.16.0)(jiti@1.21.7)(yaml@2.8.0)
      vite-node: 3.2.4(@types/node@22.16.0)(jiti@1.21.7)(yaml@2.8.0)
      why-is-node-running: 2.3.0
    optionalDependencies:
      '@types/node': 22.16.0
      '@vitest/ui': 3.2.4(vitest@3.2.4)
      jsdom: 26.1.0
    transitivePeerDependencies:
      - jiti
      - less
      - lightningcss
      - msw
      - sass
      - sass-embedded
      - stylus
      - sugarss
      - supports-color
      - terser
      - tsx
      - yaml

  w3c-xmlserializer@5.0.0:
    dependencies:
      xml-name-validator: 5.0.0

  webidl-conversions@7.0.0: {}

  whatwg-encoding@3.1.1:
    dependencies:
      iconv-lite: 0.6.3

  whatwg-mimetype@4.0.0: {}

  whatwg-url@14.2.0:
    dependencies:
      tr46: 5.1.1
      webidl-conversions: 7.0.0

  which-boxed-primitive@1.1.1:
    dependencies:
      is-bigint: 1.1.0
      is-boolean-object: 1.2.2
      is-number-object: 1.1.1
      is-string: 1.1.1
      is-symbol: 1.1.1

  which-builtin-type@1.2.1:
    dependencies:
      call-bound: 1.0.4
      function.prototype.name: 1.1.8
      has-tostringtag: 1.0.2
      is-async-function: 2.1.1
      is-date-object: 1.1.0
      is-finalizationregistry: 1.1.1
      is-generator-function: 1.1.0
      is-regex: 1.2.1
      is-weakref: 1.1.1
      isarray: 2.0.5
      which-boxed-primitive: 1.1.1
      which-collection: 1.0.2
      which-typed-array: 1.1.19

  which-collection@1.0.2:
    dependencies:
      is-map: 2.0.3
      is-set: 2.0.3
      is-weakmap: 2.0.2
      is-weakset: 2.0.4

  which-typed-array@1.1.19:
    dependencies:
      available-typed-arrays: 1.0.7
      call-bind: 1.0.8
      call-bound: 1.0.4
      for-each: 0.3.5
      get-proto: 1.0.1
      gopd: 1.2.0
      has-tostringtag: 1.0.2

  which@2.0.2:
    dependencies:
      isexe: 2.0.0

  why-is-node-running@2.3.0:
    dependencies:
      siginfo: 2.0.0
      stackback: 0.0.2

  word-wrap@1.2.5: {}

  wrap-ansi@7.0.0:
    dependencies:
      ansi-styles: 4.3.0
      string-width: 4.2.3
      strip-ansi: 6.0.1

  wrap-ansi@8.1.0:
    dependencies:
      ansi-styles: 6.2.1
      string-width: 5.1.2
      strip-ansi: 7.1.0

  ws@8.18.3: {}

  xml-name-validator@5.0.0: {}

  xmlchars@2.2.0: {}

  yallist@3.1.1: {}

  yaml@2.8.0: {}

  yocto-queue@0.1.0: {}

  zod@3.25.71: {}

  zustand@5.0.6(@types/react@19.1.8)(react@19.1.0)(use-sync-external-store@1.5.0(react@19.1.0)):
    optionalDependencies:
      '@types/react': 19.1.8
      react: 19.1.0
      use-sync-external-store: 1.5.0(react@19.1.0)


# END FILE CONTENTS


# File: frontend/postcss.config.mjs

/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

export default config;


# END FILE CONTENTS


# File: app/services/stt/interfaces.py

"""
服務介面定義
"""

from __future__ import annotations
from abc import ABC, abstractmethod
from typing import Any, Dict
from uuid import UUID


# ──────────────────────────────────────────────
# 1️⃣ 舊的 TranscriptionService（若別處還在用）
# ──────────────────────────────────────────────
class TranscriptionService(ABC):
    """轉錄服務抽象基礎類（舊）"""

    @abstractmethod
    async def process_audio_chunk(
        self, session_id: UUID, chunk_sequence: int, webm_data: bytes
    ) -> None:
        """處理一個音訊切片"""
        raise NotImplementedError

    @abstractmethod
    async def shutdown(self) -> None:
        """優雅地關閉服務"""
        raise NotImplementedError


# ──────────────────────────────────────────────
# 2️⃣ 新的 ISTTProvider：factory 與各 provider 使用
# ──────────────────────────────────────────────
class ISTTProvider(ABC):
    """
    Speech-to-Text Provider 介面。

    每個 provider（Whisper/GPT-4o/Gemini…）都要實作 `transcribe`。
    """

    # provider 的識別碼
    name: str  # 直接屬性，禁止再定義同名方法

    @abstractmethod
    async def transcribe(
        self, audio: bytes, session_id: UUID, chunk_seq: int
    ) -> Dict[str, Any] | None:
        """
        :param audio: 10s WebM/WAV bytes
        :return: 統一欄位 dict，若 `None` 代表無文字
        """
        raise NotImplementedError

    # 可選：每分鐘最大請求數，給排程器參考
    def max_rpm(self) -> int:
        return 60


__all__ = ["ISTTProvider", "TranscriptionService"]


# END FILE CONTENTS


# File: frontend/lib/simple-audio-recorder.ts

"use client"

import { getAudioChunkIntervalMs } from './config'

/**
 * SimpleAudioRecorder - 簡化音訊錄製器
 *
 * Phase 2 重構：移除複雜的 SegmentedAudioRecorder 邏輯
 * 改用標準 MediaRecorder + timeslice 模式（可配置）
 *
 * 特點：
 * - 使用 MediaRecorder.start(timeslice) 自動切片
 * - 每個段落包含完整 WebM Header
 * - 簡化錯誤處理
 * - 移除遞歸啟動/停止複雜性
 * - 支援環境變數配置切片時間
 */

export interface AudioSegment {
    blob: Blob
    timestamp: number
    duration: number
    sequence: number
}

export interface SimpleAudioRecorderConfig {
    segmentDuration: number // 段落時長（毫秒）
    mimeType: string
    audioBitsPerSecond: number
}

const DEFAULT_CONFIG: SimpleAudioRecorderConfig = {
    segmentDuration: getAudioChunkIntervalMs(), // 從環境變數讀取切片時長
    mimeType: 'audio/webm;codecs=opus',
    audioBitsPerSecond: 128000, // 128 kbps for configurable chunks
}

export class SimpleAudioRecorder {
    private stream: MediaStream | null = null
    private mediaRecorder: MediaRecorder | null = null
    private config: SimpleAudioRecorderConfig
    private sequence: number = 0
    private isRecording: boolean = false

    // 事件回調
    private onSegmentCallback?: (segment: AudioSegment) => void
    private onErrorCallback?: (error: Error) => void

    constructor(config: Partial<SimpleAudioRecorderConfig> = {}) {
        this.config = { ...DEFAULT_CONFIG, ...config }
    }

    /**
     * 初始化錄音器 - 獲取音訊權限
     */
    async initialize(): Promise<void> {
        if (this.stream) {
            return // 已初始化
        }

        try {
            this.stream = await navigator.mediaDevices.getUserMedia({ audio: true })
            console.log('🎤 [SimpleAudioRecorder] 音訊權限獲取成功')
        } catch (error) {
            const errorMsg = error instanceof Error ? error.message : '獲取音訊權限失敗'
            this.handleError(new Error(errorMsg))
            throw error
        }
    }

    /**
     * 開始錄音 - 使用標準 MediaRecorder + timeslice
     */
    async start(onSegmentAvailable: (segment: AudioSegment) => void): Promise<void> {
        if (this.isRecording) {
            throw new Error('錄製已在進行中')
        }

        if (!this.stream) {
            await this.initialize()
        }

        this.onSegmentCallback = onSegmentAvailable
        this.sequence = 0
        this.isRecording = true

        console.log('🎬 [SimpleAudioRecorder] 開始錄音', {
            segmentDuration: this.config.segmentDuration,
            mimeType: this.config.mimeType,
            audioBitsPerSecond: this.config.audioBitsPerSecond
        })

        // 建立 MediaRecorder 實例
        this.mediaRecorder = new MediaRecorder(this.stream!, {
            mimeType: this.config.mimeType,
            audioBitsPerSecond: this.config.audioBitsPerSecond,
        })

        // 設定資料接收處理
        this.mediaRecorder.ondataavailable = (event) => {
            if (event.data.size > 0 && this.isRecording) {
                console.log(`📦 [SimpleAudioRecorder] 段落 #${this.sequence} 完成`, {
                    size: event.data.size,
                    mimeType: this.config.mimeType,
                })

                const segment: AudioSegment = {
                    blob: event.data,
                    timestamp: Date.now(),
                    duration: this.config.segmentDuration,
                    sequence: this.sequence++,
                }

                // 回調通知有新段落可用
                this.onSegmentCallback?.(segment)
            }
        }

        // 錯誤處理
        this.mediaRecorder.onerror = (event) => {
            console.error('❌ [SimpleAudioRecorder] MediaRecorder 錯誤:', event)
            this.handleError(new Error(`MediaRecorder 錯誤: ${event}`))
        }

        // 開始錄製，使用 timeslice 自動切片
        this.mediaRecorder.start(this.config.segmentDuration)
        console.log('✅ [SimpleAudioRecorder] MediaRecorder 已啟動，自動 10 秒切片')
    }

    /**
     * 停止錄音
     */
    stop(): void {
        console.log('⏹️ [SimpleAudioRecorder] 停止錄音')

        this.isRecording = false

        if (this.mediaRecorder && this.mediaRecorder.state !== 'inactive') {
            this.mediaRecorder.stop()
        }
    }

    /**
     * 清理資源
     */
    cleanup(): void {
        this.stop()

        if (this.stream) {
            this.stream.getTracks().forEach(track => track.stop())
            this.stream = null
        }

        this.mediaRecorder = null
        this.sequence = 0
        console.log('🧹 [SimpleAudioRecorder] 已清理')
    }

    /**
     * 檢查是否正在錄音
     */
    get recording(): boolean {
        return this.isRecording
    }

    /**
     * 獲取當前序號
     */
    get currentSequence(): number {
        return this.sequence
    }

    /**
     * 獲取當前配置
     */
    get currentConfig(): SimpleAudioRecorderConfig {
        return { ...this.config }
    }

    // 錯誤處理
    private handleError(error: Error): void {
        console.error('❌ [SimpleAudioRecorder] 錯誤:', error)
        this.isRecording = false
        this.onErrorCallback?.(error)
    }

    // 事件回調設定
    onSegment(callback: (segment: AudioSegment) => void): void {
        this.onSegmentCallback = callback
    }

    onError(callback: (error: Error) => void): void {
        this.onErrorCallback = callback
    }
}

// 工廠函數
export const createSimpleAudioRecorder = (config?: Partial<SimpleAudioRecorderConfig>): SimpleAudioRecorder => {
    return new SimpleAudioRecorder(config)
}

/**
 * 檢查瀏覽器音訊錄製支援
 */
export async function checkSimpleAudioRecordingSupport(): Promise<{ isSupported: boolean; error?: string }> {
    if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
        return { isSupported: false, error: '瀏覽器不支援 MediaDevices API' }
    }

    if (!window.MediaRecorder) {
        return { isSupported: false, error: '瀏覽器不支援 MediaRecorder API' }
    }

    // 檢查 MIME 類型支援
    if (!MediaRecorder.isTypeSupported(DEFAULT_CONFIG.mimeType)) {
        return { isSupported: false, error: `不支援音訊格式: ${DEFAULT_CONFIG.mimeType}` }
    }

    try {
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true })
        // 立即停止串流以釋放資源
        stream.getTracks().forEach(track => track.stop())
        return { isSupported: true }
    } catch (error) {
        return { isSupported: false, error: `無法獲取麥克風權限: ${error}` }
    }
}


# END FILE CONTENTS


# File: app/core/ffmpeg.py

"""
FFmpeg 音訊轉換服務 (REST API 簡化架構)

實作 WebM 到 16kHz mono PCM 的轉換，專門處理完整 10s 檔案
"""

import asyncio
import subprocess
import shlex
import logging
from typing import Optional
from dataclasses import dataclass

logger = logging.getLogger(__name__)

# FFmpeg 命令：WebM 輸入 → 16kHz 單聲道 PCM 輸出
FFMPEG_CMD = "ffmpeg -i pipe:0 -ac 1 -ar 16000 -f s16le pipe:1 -loglevel error"


@dataclass
class WebMHeaderInfo:
    """WebM 檔頭信息數據類"""
    is_complete: bool = False
    has_ebml_header: bool = False
    has_segment: bool = False
    header_size: int = 0
    codec_type: str = "unknown"
    track_count: int = 0
    error_message: Optional[str] = None


def detect_webm_header_info(data: bytes) -> WebMHeaderInfo:
    """
    檢測 WebM 檔頭信息

    Args:
        data: WebM 音頻二進制數據

    Returns:
        WebMHeaderInfo: 檔頭信息
    """
    info = WebMHeaderInfo()

    if not data or len(data) < 16:
        info.error_message = "數據長度不足"
        return info

    try:
        # 檢查 EBML 標頭 (0x1A45DFA3)
        if data[:4] == b'\x1A\x45\xDF\xA3':
            info.has_ebml_header = True

            # 簡單檢測 Segment 元素 (0x18538067)
            if b'\x18\x53\x80\x67' in data[:1024]:
                info.has_segment = True

                # 估算檔頭大小（簡化版本）
                cluster_pos = data.find(b'\x1F\x43\xB6\x75')  # Cluster 標記
                if cluster_pos > 0:
                    info.header_size = cluster_pos
                else:
                    info.header_size = min(len(data), 512)  # 預設估算

                info.is_complete = True
                info.codec_type = "opus" if b'Opus' in data[:1024] else "vorbis"
                info.track_count = 1  # 簡化假設只有一個音軌
            else:
                info.error_message = "缺少 Segment 元素"
        else:
            info.error_message = "缺少 EBML 檔頭"

    except Exception as e:
        info.error_message = f"檢測異常: {str(e)}"

    return info


def is_webm_header_complete(data: bytes) -> bool:
    """
    檢查 WebM 檔頭是否完整

    Args:
        data: WebM 音頻二進制數據

    Returns:
        bool: 如果檔頭完整則返回 True
    """
    if not data or len(data) < 16:
        return False

    # 檢查 EBML 檔頭
    if data[:4] != b'\x1A\x45\xDF\xA3':
        return False

    # 檢查是否包含 Segment 元素
    return b'\x18\x53\x80\x67' in data[:1024]


def detect_audio_format(audio_data: bytes) -> str:
    """
    檢測音頻格式

    Args:
        audio_data: 音頻二進制數據

    Returns:
        str: 檢測到的音頻格式 ('webm', 'mp4', 'ogg', 'wav', 'unknown')
    """
    if not audio_data or len(audio_data) < 16:
        return 'unknown'

    # 檢查檔案頭簽名
    header = audio_data[:16]

    # WebM 格式 (EBML header)
    if header.startswith(b'\x1A\x45\xDF\xA3'):
        return 'webm'

    # MP4 格式 (ftypMSNV for fragmented MP4, ftyp for regular MP4)
    if b'ftyp' in header[:8] or header[4:8] == b'ftyp':
        return 'mp4'

    # OGG 格式
    if header.startswith(b'OggS'):
        return 'ogg'

    # WAV 格式 (RIFF header)
    if header.startswith(b'RIFF') and header[8:12] == b'WAVE':
        return 'wav'

    # 檢查更大範圍內的 MP4 格式標識
    search_range = min(len(audio_data), 64)
    for i in range(search_range - 4):
        if audio_data[i:i+4] == b'ftyp':
            return 'mp4'

    logger.debug(f"Unknown audio format, header: {header.hex()}")
    return 'unknown'


def check_ffmpeg_health() -> dict:
    """
    檢查 FFmpeg 健康狀態

    Returns:
        dict: 包含 FFmpeg 狀態信息的字典
    """
    try:
        # 檢查 FFmpeg 是否可用
        result = subprocess.run(['ffmpeg', '-version'],
                              capture_output=True, text=True, timeout=5)

        if result.returncode == 0:
            # 解析版本信息
            version_line = result.stdout.split('\n')[0]
            version = version_line.split(' ')[2] if len(version_line.split(' ')) > 2 else 'unknown'

            return {
                'ffmpeg_available': True,
                'status': 'healthy',
                'version': version,
                'active_processes': 0,  # 簡化版本，不追踪活躍進程
                'pooled_processes': 0,
                'max_processes': 3
            }
        else:
            return {
                'ffmpeg_available': False,
                'status': 'error',
                'error': 'FFmpeg command failed'
            }

    except FileNotFoundError:
        return {
            'ffmpeg_available': False,
            'status': 'not_found',
            'error': 'FFmpeg not installed'
        }
    except subprocess.TimeoutExpired:
        return {
            'ffmpeg_available': False,
            'status': 'timeout',
            'error': 'FFmpeg version check timeout'
        }
    except Exception as e:
        return {
            'ffmpeg_available': False,
            'status': 'error',
            'error': str(e)
        }


async def webm_to_pcm(webm: bytes) -> bytes:
    """
    將 WebM 音訊轉換為 PCM 格式

    轉換參數：
    - 輸入：WebM 格式音訊資料
    - 輸出：16kHz 單聲道 signed 16-bit little-endian PCM
    - 適用於 Azure OpenAI Whisper API

    Args:
        webm: WebM 格式的音訊二進制資料

    Returns:
        bytes: PCM 格式的音訊二進制資料

    Raises:
        RuntimeError: FFmpeg 轉換失敗時拋出
    """
    try:
        logger.debug(f"🎵 [FFmpeg] 開始轉換 WebM → PCM (size: {len(webm)} bytes)")

        # 建立 FFmpeg 子程序
        proc = await asyncio.create_subprocess_exec(
            *shlex.split(FFMPEG_CMD),
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )

        # 執行轉換
        stdout, stderr = await proc.communicate(webm)

        # 檢查轉換結果
        if proc.returncode != 0:
            error_msg = stderr.decode('utf-8') if stderr else "Unknown FFmpeg error"
            logger.error(f"❌ [FFmpeg] 轉換失敗 (返回碼: {proc.returncode}): {error_msg}")
            raise RuntimeError(f"FFmpeg convert failed: {error_msg}")

        if not stdout:
            logger.error("❌ [FFmpeg] 轉換結果為空")
            raise RuntimeError("FFmpeg convert produced no output")

        logger.info(f"✅ [FFmpeg] WebM → PCM 轉換成功 ({len(webm)} → {len(stdout)} bytes)")
        return stdout

    except asyncio.TimeoutError:
        logger.error("❌ [FFmpeg] 轉換超時")
        raise RuntimeError("FFmpeg convert timeout")
    except FileNotFoundError:
        logger.error("❌ [FFmpeg] FFmpeg 程序未找到，請確認已安裝 FFmpeg")
        raise RuntimeError("FFmpeg not found. Please install FFmpeg.")
    except Exception as e:
        logger.error(f"❌ [FFmpeg] 轉換異常: {str(e)}")
        raise RuntimeError(f"FFmpeg convert error: {str(e)}")


async def webm_to_wav(webm: bytes) -> Optional[bytes]:
    """
    將 WebM 音訊轉換為 16kHz mono 16-bit RIFF-WAV 格式

    Args:
        webm: WebM 格式的音訊二進制資料

    Returns:
        Optional[bytes]: WAV 格式的音訊二進制資料，失敗時回傳 None
    """
    ffmpeg_cmd = "ffmpeg -f webm -i pipe:0 -ac 1 -ar 16000 -f wav -y pipe:1 -loglevel error"
    try:
        logger.debug(f"🎵 [FFmpeg] 開始轉換 WebM → WAV (size: {len(webm)} bytes)")
        proc = await asyncio.create_subprocess_exec(
            *shlex.split(ffmpeg_cmd),
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        stdout, stderr = await proc.communicate(webm)
        if proc.returncode != 0:
            error_msg = stderr.decode('utf-8') if stderr else "Unknown FFmpeg error"
            logger.error(f"❌ [FFmpeg] WebM → WAV 轉換失敗 (返回碼: {proc.returncode}): {error_msg}")
            return None
        if not stdout:
            logger.error("❌ [FFmpeg] WebM → WAV 轉換結果為空")
            return None
        logger.info(f"✅ [FFmpeg] WebM → WAV 轉換成功 ({len(webm)} → {len(stdout)} bytes)")
        return stdout
    except asyncio.TimeoutError:
        logger.error("❌ [FFmpeg] WebM → WAV 轉換超時")
        return None
    except FileNotFoundError:
        logger.error("❌ [FFmpeg] FFmpeg 程序未找到，請確認已安裝 FFmpeg")
        return None
    except Exception as e:
        logger.error(f"❌ [FFmpeg] WebM → WAV 轉換異常: {str(e)}")
        return None


async def validate_webm_audio(webm: bytes) -> bool:
    """
    驗證 WebM 音訊檔案是否有效

    使用 FFmpeg 來檢查音訊檔案的完整性和格式

    Args:
        webm: WebM 格式的音訊二進制資料

    Returns:
        bool: 如果音訊檔案有效則返回 True
    """
    try:
        # 使用 FFmpeg 驗證模式（不產生輸出，只檢查格式）
        validate_cmd = "ffmpeg -v error -i pipe:0 -f null -"

        proc = await asyncio.create_subprocess_exec(
            *shlex.split(validate_cmd),
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )

        stdout, stderr = await proc.communicate(webm)

        if proc.returncode == 0:
            logger.debug("✅ [FFmpeg] WebM 音訊檔案驗證通過")
            return True
        else:
            error_msg = stderr.decode('utf-8') if stderr else "Unknown validation error"
            logger.warning(f"⚠️ [FFmpeg] WebM 音訊檔案驗證失敗: {error_msg}")
            return False

    except Exception as e:
        logger.warning(f"⚠️ [FFmpeg] 音訊檔案驗證異常: {str(e)}")
        return False


async def get_audio_info(webm: bytes) -> Optional[dict]:
    """
    獲取音訊檔案資訊

    Args:
        webm: WebM 格式的音訊二進制資料

    Returns:
        dict: 包含音訊資訊的字典，如果失敗則返回 None
    """
    try:
        # 使用 ffprobe 獲取音訊資訊
        probe_cmd = "ffprobe -v quiet -print_format json -show_format -show_streams pipe:0"

        proc = await asyncio.create_subprocess_exec(
            *shlex.split(probe_cmd),
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )

        stdout, stderr = await proc.communicate(webm)

        if proc.returncode == 0 and stdout:
            import json
            info = json.loads(stdout.decode('utf-8'))
            logger.debug(f"📊 [FFprobe] 音訊資訊: {info}")
            return info
        else:
            logger.warning("⚠️ [FFprobe] 無法獲取音訊資訊")
            return None

    except Exception as e:
        logger.warning(f"⚠️ [FFprobe] 獲取音訊資訊異常: {str(e)}")
        return None


# END FILE CONTENTS


# File: app/db/__init__.py



# END FILE CONTENTS


# File: app/services/stt/gpt4o_provider.py

# app/services/stt/gpt4o_provider.py
from __future__ import annotations

import logging
from datetime import datetime
from io import BytesIO
from typing import Any, Dict
from uuid import UUID

from openai import AsyncAzureOpenAI, RateLimitError

from app.core.config import get_settings
from app.core.ffmpeg import detect_audio_format, webm_to_wav
from app.db.database import get_supabase_client
from app.services.stt.interfaces import ISTTProvider
from app.services.stt.lang_map import to_gpt4o
from app.utils.timer import PerformanceTimer
from app.utils.timing import calc_times

settings = get_settings()
logger = logging.getLogger(__name__)


class GPT4oProvider(ISTTProvider):
    """Azure GPT-4o Audio Transcriptions"""

    name = "gpt4o"
    _client: AsyncAzureOpenAI | None = None

    # ---------- client singleton ------------------------------------
    @classmethod
    def _client_lazy(cls) -> AsyncAzureOpenAI:
        if cls._client is None:
            api_key_raw = settings.AZURE_OPENAI_API_KEY
            api_key = (
                api_key_raw.get_secret_value()
                if hasattr(api_key_raw, "get_secret_value")
                else api_key_raw
            )
            cls._client = AsyncAzureOpenAI(
                api_key=api_key,
                azure_endpoint=settings.AZURE_OPENAI_ENDPOINT,
                api_version="2024-06-01",
                timeout=(5, 55),          # connect / read
                max_retries=2,
            )
        return cls._client

    # ---------- main -------------------------------------------------
    async def transcribe(
        self,
        audio: bytes,
        session_id: UUID,
        chunk_seq: int,
    ) -> Dict[str, Any] | None:
        """
        • 將 WebM→WAV（16 kHz mono）
        • 呼叫 GPT-4o 取得 text
        • 回傳統一欄位；None 代表跳過
        """

        # 1. 取得 canonical lang_code → zh / en / auto
        supa = get_supabase_client()
        row = (
            supa.table("sessions").select("lang_code")
            .eq("id", str(session_id)).single().execute()
        )
        canonical = (row.data or {}).get("lang_code", "zh-TW")
        api_lang = to_gpt4o(canonical)

        # 2. 轉 WAV
        fmt = detect_audio_format(audio)
        if fmt not in ("webm", "wav"):
            logger.error("GPT4o 不支援格式 %s", fmt)
            return None

        wav_bytes = await webm_to_wav(audio) if fmt == "webm" else audio
        if not wav_bytes:
            logger.error("WebM→WAV 轉換失敗 %s seq=%s", session_id, chunk_seq)
            return None

        # 3. 呼叫 GPT-4o
        client = self._client_lazy()
        with PerformanceTimer(f"gpt4o chunk {chunk_seq}"):
            try:
                # (filename, bytes/IO, mime)
                file_tuple = ("chunk.wav", wav_bytes, "audio/wav")
                resp = await client.audio.transcriptions.create(
                    model=settings.GPT4O_DEPLOYMENT_NAME,
                    file=file_tuple,
                    language=api_lang,
                    response_format="json",
                    prompt=settings.GPT4O_TRANSCRIBE_PROMPT or None,
                )
            except RateLimitError as e:
                logger.warning("GPT4o 429: %s", e)
                raise
            except Exception as e:
                logger.error("GPT4o API error: %s", e, exc_info=True)
                return None

        text = getattr(resp, "text", "").strip()
        if not text:
            logger.info("GPT4o 空白文字 %s seq=%s", session_id, chunk_seq)
            return None

        # 4. 時間戳 = chunk_seq × D
        start_time, end_time = calc_times(chunk_seq)

        return {
            "text": text,
            "chunk_sequence": chunk_seq,
            "session_id": str(session_id),
            "lang_code": canonical,
            "start_time": start_time,
            "end_time": end_time,
            "timestamp": datetime.utcnow().isoformat(),
            "duration": settings.AUDIO_CHUNK_DURATION_SEC,
        }

    # ---------- meta -----------------------------------------------
    def max_rpm(self) -> int:
        return getattr(settings, "GPT4O_MAX_REQUESTS", 60)


# END FILE CONTENTS


# File: frontend/components/ui/context-menu.tsx

"use client"

import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}


# END FILE CONTENTS


# File: app/schemas/__init__.py



# END FILE CONTENTS


# File: app/services/azure_whisper.py

import logging
import tempfile
from datetime import datetime
from pathlib import Path
from uuid import UUID
from typing import Any, Dict, Optional

from openai import AsyncAzureOpenAI
from httpx import Timeout
from app.core.config import settings

__all__ = ["AzureWhisperService", "PerformanceTimer"]

logger = logging.getLogger(__name__)

class PerformanceTimer:
    """效能計時器"""
    def __init__(self, operation_name: str):
        self.operation_name = operation_name
        self.start_time = None
        self.end_time = None

    def __enter__(self):
        import time
        self.start_time = time.time()
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        import time
        self.end_time = time.time()
        duration = self.get_duration()
        if duration > 1.0:
            logger.warning(f"⚠️  {self.operation_name} took {duration:.2f}s (slow)")
        else:
            logger.info(f"⏱️  {self.operation_name} completed in {duration:.2f}s")

    def get_duration(self) -> float:
        if self.start_time and self.end_time:
            return self.end_time - self.start_time
        return 0.0

class AzureWhisperService:
    def __init__(self):
        self.client = AsyncAzureOpenAI(
            api_key=settings.AZURE_OPENAI_API_KEY,
            azure_endpoint=settings.AZURE_OPENAI_ENDPOINT,
            api_version="2024-06-01",
            timeout=Timeout(connect=5, read=55, write=30, pool=5),
            max_retries=2,
        )
        self.deployment = settings.WHISPER_DEPLOYMENT_NAME
        self.language = settings.WHISPER_LANGUAGE

    async def transcribe(self, audio: bytes, session_id: UUID, chunk_seq: int, *, api_language: str, canonical_lang: str) -> Optional[Dict[str, Any]]:
        with PerformanceTimer(f"Whisper chunk {chunk_seq}"):
            with tempfile.NamedTemporaryFile(suffix='.webm', delete=False) as temp_file:
                temp_file.write(audio)
                temp_file.flush()
                logger.info(f"🔎 call whisper: session_id={session_id}, chunk={chunk_seq}, api_lang={api_language}, canonical_lang={canonical_lang}, temp_file={temp_file.name}")
                try:
                    with open(temp_file.name, 'rb') as audio_file:
                        transcript = await self.client.audio.transcriptions.create(
                            model=self.deployment,
                            file=audio_file,
                            language=api_language,
                            response_format="json",
                            temperature=0
                        )
                    # Debug Azure 回傳內容
                    try:
                        import json
                        logger.debug("Whisper raw json ⇒ %s", resp) # type: ignore
                        logger.debug("Whisper raw response: %s", json.dumps(transcript if isinstance(transcript, dict) else transcript.__dict__, ensure_ascii=False, indent=2))
                    except Exception as e:
                        logger.debug("Whisper raw response (fallback): %s", str(transcript))
                        logger.debug("Failed to json.dumps transcript: %s", e)
                    Path(temp_file.name).unlink(missing_ok=True)
                    text = getattr(transcript, "text", None) or (transcript.get("text") if isinstance(transcript, dict) else None)
                    if not text or not text.strip():
                        return None
                    return {
                        "text": text.strip(),
                        "chunk_sequence": chunk_seq,
                        "session_id": str(session_id),
                        "lang_code": canonical_lang,
                        "timestamp": datetime.utcnow().isoformat(),
                    }
                finally:

                    Path(temp_file.name).unlink(missing_ok=True)


# END FILE CONTENTS


# File: frontend/components/default-state.tsx

"use client"

import { Button } from "@/components/ui/button"
import { Upload, FileText } from "lucide-react"

interface DefaultStateProps {
  onStartRecording: () => void
}

export function DefaultState({ onStartRecording }: DefaultStateProps) {
  const handleClick = () => {
    console.log("🔘 [DefaultState] 按鈕被點擊")
    console.log("🔘 [DefaultState] onStartRecording 函數:", typeof onStartRecording)
    try {
      onStartRecording()
      console.log("🔘 [DefaultState] onStartRecording 調用成功")
    } catch (error) {
      console.error("🔘 [DefaultState] onStartRecording 調用失敗:", error)
    }
  }

  console.log("🔄 [DefaultState] 組件渲染，onStartRecording:", typeof onStartRecording)

  return (
    <div className="h-full flex flex-col p-6">
      {/* Main content */}
      <div className="flex-1 flex flex-col items-center justify-center space-y-6">
        <Button
          onClick={handleClick}
          size="lg"
          className="flex items-center gap-3 px-8 py-4 text-base"
          data-testid="start-recording-button"
        >
          <Upload className="w-5 h-5" />
          Start Recording
        </Button>

        <div className="text-center text-muted-foreground text-sm space-y-1">
          <p className="flex items-center justify-center gap-2">
            <FileText className="w-4 h-4" />
            或直接開始編寫筆記
          </p>
          <p>錄音功能隨時可以啟用</p>
        </div>
      </div>
    </div>
  )
}


# END FILE CONTENTS


# File: .cursor/rules/frontend.mdc

---
description:
globs:
alwaysApply: false
---
<!-- Source: https://github.com/arthow4n/live-language-mate/blob/master/CLAUDE.md -->

### Development Notes

- Uses shadcn/ui component library extensively
- In the default state without a specified style, the tweakcn clean-slate style is applied first: `npx shadcn@latest add https://tweakcn.com/r/themes/clean-slate.json`
- Responsive design with mobile-first approach
- Settings stored in localStorage with versioning


## TypeScript coding style and conventions

- Prefer named import/export over default import/export.
- Early return, early throw.
- In frontend Vitest test files, import explicitly the test helpers e.g. `import { beforeEach, describe, expect, `test`, vi } from 'vitest';`.
- Use Zod to validate and cast type as early as possible, this includes but not limit to handling the following scenarios: `any`, `unknown`, `DefaultBodyType`.
- Always assign unknown type to `const x: unknown = JSON.parse()`, `cosnt x: unknown = await request.json()`, `cosnt x: unknown = await response.json()`, then validate with Zod.
- Zod schemas are shared between frontend and backend.
- Zod schemas are in `frontend/schemas/`, you should find in there first to see if there's a schema you can reuse. You should not create Zod schemas outside of `frontend/schemas/`.
- Never use `any`, `as` type assertion or `!` non-null assertion operator, you should instead use type narrowing, for example in test you can use `expectToBeInstanceOf`, `expectToNotBeNull`, `expectToNotBeUndefined`, and outside of test `instanceof` or do a proper object validation with Zod.
- If you would declare an untyped object, instead you should either type it with e.g. `const x: X = {}` or `{} satisfies X`.
- Avoid optional function parameter, optional property, and default values. If you are about to add one or you see any of such usages, try to look around the related code paths and see if you can refactor to remove it. Default values should only be used when it's absolutely necessary.
- Throw if a logic not really optional:

```ts
// Bad: Is Y optional?
if (x instaceof X) { x.Y(); }

// Bad: Is Y optional?
x?.Y();

// Good: Type narrowing and early throw
if (!x instanceof X) { throw new Error(); }
x.Y();

// Best: Zod type narrowing and early throw, prefer .parse over .safeParse when possible.
zodSchema.parse(x);
x.Y();

// Compromise: Explain why Y is optional if Y is really optional.
x?.Y(); // Y is optional because ...
```

### In fronted, instead of X use Y

- `as` operator -> use Zod
- `console.error` -> `logError`
- `JSX.Element` -> `React.JSX.Element`
- `toBeTruthy`, `.not.toBeNull`, `toBeDefined`, `toBeInstanceOf` or `if (instanceof)` -> use the type narrowing expect helpers in `frontend/__tests__/typedExpectHelpers.ts`
- `getAllBy*()[*]` -> `getByTestId` or `getByText`
- `() => {}` empty mock -> `vi.fn()`
- `JSON.stringify(x)` if x is not typed -> `const x: X = {}; JSON.stringify(x)` or `JSON.stringify({} satisfies X)`
- `fireEvent` -> `userEvent`
- `vi.mock` -> never mock imported code, we write integration test and should not mock any decendant imports.



## Test

- When writing test, write integration test.
- Write integration test to cover business logic, if something can be clicked, input or be interacted in any other ways by the user, it should be covered by a test.
- When writing new test, make sure the test is genuinely new and not testing what another test has already covered. You should look for other existing test cases to understand if the test you are about to write is already covered by another test.
- Use Playwright to test end-to-end frontend with @playwright-e2e-testing.mdc
- Focus on testing the component/function's integrated behaviour, for example, if the import tree looks like A -> B -> C, you should not mock any of A/B/C, instead you should focus on testing if interacting with A as a whole gives you the expected result; in B's test you should not mock B/C and instead test interacting with B; and so on.
- You should only change a test file if you are fixing lint/type errors, or you made a change that requires update that test file.
- If you are only editing test, you should not change the existing code logic that in the test. If refactoring would make writing test easier, explain to the user and wait for feedback. You may add testid yourself if needed.
- If an action will make an API request, you should test whether the API will get the correctly formed request.
- Before you write or change any test code, make sure you step back and get a full picture first, by reading through the related code paths from beginning to end, and understanding how the code and data flows.
- Instead of fixing many test cases in one go, focus on fixing 1 test at a time, each test case should have its own todo item.
- `DragEvent`, `DataTransferItemList`, `DataTransfer`, `DOMRect` are polyfilled and can be used in test:

```ts
const event = new DragEvent('dragenter', {
  cancelable: true,
  bubbles: true,
});
event.dataTransfer?.items.add('hello world', 'text/plain');
```

## Lint

- If you would eslint disable anything, think again and see if there's a better approach to fix it, if you still need to eslint disable, make sure you add -- comment after it to explain why you chose to disable.

### Instead of command X, use Y

- `rg`, `grep` -> use Search tool
- `find` -> `git ls-files` or your own List tool
- `rm` -> try `git rm` first, if fail then try `git clean`
- `head`/`tail`/`cat` -> read the file with tool instead
- `npx tsc` -> `npm run typecheck`
- Don't chain or pipe commands, chained and piped commands will be denied.


# END FILE CONTENTS


# File: frontend/__tests__/integration/websocket-state-sync.test.ts

import { beforeEach, describe, expect, test, vi } from 'vitest'
import { renderHook, act } from '@testing-library/react'
import { createElement } from 'react'
import { AppStateProvider } from '../../hooks/use-app-state-context'
import { useTranscriptNew } from '../../hooks/use-transcript-new'
import { featureFlagManager } from '../../lib/feature-flags'
import type { ReactNode } from 'react'

// Mock WebSocket
class MockWebSocket {
    onopen: ((event: Event) => void) | null = null
    onmessage: ((event: MessageEvent) => void) | null = null
    onerror: ((event: Event) => void) | null = null
    onclose: ((event: CloseEvent) => void) | null = null
    readyState = 0 // WebSocket.CONNECTING

    constructor(public url: string) {
        // 模擬異步連接
        setTimeout(() => {
            this.readyState = 1 // WebSocket.OPEN
            if (this.onopen) {
                this.onopen(new Event('open'))
            }
        }, 10)
    }

    send(data: string) {
        // 模擬發送數據
    }

    close() {
        this.readyState = 3 // WebSocket.CLOSED
        if (this.onclose) {
            this.onclose(new CloseEvent('close'))
        }
    }

    // 模擬接收消息
    simulateMessage(data: any) {
        if (this.onmessage) {
            this.onmessage(new MessageEvent('message', { data: JSON.stringify(data) }))
        }
    }

    // 模擬錯誤
    simulateError() {
        if (this.onerror) {
            this.onerror(new Event('error'))
        }
    }
}

// Mock localStorage
const localStorageMock = {
    getItem: vi.fn(),
    setItem: vi.fn(),
    removeItem: vi.fn(),
    clear: vi.fn(),
}

Object.defineProperty(window, 'localStorage', {
    value: localStorageMock
})

// Mock WebSocket globally
Object.defineProperty(window, 'WebSocket', {
    value: MockWebSocket
})

function TestWrapper({ children }: { children: ReactNode }) {
    return createElement(AppStateProvider, null, children)
}

describe('WebSocket 與狀態同步測試', () => {
    beforeEach(() => {
        vi.clearAllMocks()
        featureFlagManager.reset()
        featureFlagManager.enable('useNewStateManagement')
        featureFlagManager.enable('useNewTranscriptHook')
        localStorageMock.getItem.mockReturnValue(null)
    })

    describe('WebSocket 連接管理', () => {
        test('應該能夠建立 WebSocket 連接', async () => {
            const { result } = renderHook(() => useTranscriptNew(), {
                wrapper: TestWrapper
            })

            // 初始狀態應該是未連接
            expect(result.current.isConnected).toBe(false)

            // 這裡我們無法直接測試 WebSocket 連接，因為它在 TranscriptManager 中
            // 但我們可以測試 Hook 的基本功能
            expect(result.current.error).toBe(null)
            expect(result.current.autoScrollEnabled).toBe(true)
        })

        test('應該提供 WebSocket 控制方法', () => {
            const { result } = renderHook(() => useTranscriptNew(), {
                wrapper: TestWrapper
            })

            // 檢查所有必要的方法都存在
            expect(typeof result.current.disconnect).toBe('function')
            expect(typeof result.current.clearTranscripts).toBe('function')
            expect(typeof result.current.enableAutoScroll).toBe('function')
            expect(typeof result.current.disableAutoScroll).toBe('function')
            expect(typeof result.current.scrollToLatest).toBe('function')
        })

        test('應該能夠控制自動滾動', async () => {
            const { result } = renderHook(() => useTranscriptNew(), {
                wrapper: TestWrapper
            })

            // 初始狀態：自動滾動啟用
            expect(result.current.autoScrollEnabled).toBe(true)

            // 禁用自動滾動
            await act(async () => {
                result.current.disableAutoScroll()
            })

            expect(result.current.autoScrollEnabled).toBe(false)

            // 啟用自動滾動
            await act(async () => {
                result.current.enableAutoScroll()
            })

            expect(result.current.autoScrollEnabled).toBe(true)
        })
    })

    describe('狀態同步', () => {
        test('Hook 應該與 Context 狀態保持同步', () => {
            const { result } = renderHook(() => useTranscriptNew(), {
                wrapper: TestWrapper
            })

            // 檢查 Hook 返回的狀態結構
            expect(result.current).toHaveProperty('isConnected')
            expect(result.current).toHaveProperty('error')
            expect(result.current).toHaveProperty('autoScrollEnabled')
            expect(result.current).toHaveProperty('disconnect')
            expect(result.current).toHaveProperty('clearTranscripts')
        })

        test('清除逐字稿應該正常工作', async () => {
            const { result } = renderHook(() => useTranscriptNew(), {
                wrapper: TestWrapper
            })

            // 清除逐字稿不應該拋出錯誤
            await act(async () => {
                expect(() => result.current.clearTranscripts()).not.toThrow()
            })
        })

        test('斷開連接應該正常工作', async () => {
            const { result } = renderHook(() => useTranscriptNew(), {
                wrapper: TestWrapper
            })

            // 斷開連接不應該拋出錯誤
            await act(async () => {
                expect(() => result.current.disconnect()).not.toThrow()
            })
        })
    })

    describe('錯誤處理', () => {
        test('應該正確處理 WebSocket 錯誤', () => {
            const { result } = renderHook(() => useTranscriptNew(), {
                wrapper: TestWrapper
            })

            // 初始錯誤狀態應該是 null
            expect(result.current.error).toBe(null)
        })

        test('Hook unmount 應該清理資源', () => {
            const { unmount } = renderHook(() => useTranscriptNew(), {
                wrapper: TestWrapper
            })

            // unmount 應該正常執行而不拋出錯誤
            expect(() => unmount()).not.toThrow()
        })
    })

    describe('功能開關整合', () => {
        test('當功能開關關閉時應該使用舊版本', () => {
            // 禁用新的 Transcript Hook
            featureFlagManager.disable('useNewTranscriptHook')

            const { result } = renderHook(() => useTranscriptNew(), {
                wrapper: TestWrapper
            })

            // 應該仍然提供相同的 API
            expect(result.current).toHaveProperty('isConnected')
            expect(result.current).toHaveProperty('error')
            expect(result.current).toHaveProperty('autoScrollEnabled')
        })

        test('當功能開關啟用時應該使用新版本', () => {
            // 確保新功能開關啟用
            featureFlagManager.enable('useNewTranscriptHook')

            const { result } = renderHook(() => useTranscriptNew(), {
                wrapper: TestWrapper
            })

            // 應該提供完整的 API
            expect(result.current).toHaveProperty('isConnected')
            expect(result.current).toHaveProperty('error')
            expect(result.current).toHaveProperty('autoScrollEnabled')
            expect(result.current).toHaveProperty('disconnect')
            expect(result.current).toHaveProperty('clearTranscripts')
        })
    })

    describe('多實例測試', () => {
        test('多個 Hook 實例應該共享 TranscriptManager', () => {
            const { result: result1 } = renderHook(() => useTranscriptNew(), {
                wrapper: TestWrapper
            })
            const { result: result2 } = renderHook(() => useTranscriptNew(), {
                wrapper: TestWrapper
            })

            // 兩個實例應該有相同的連接狀態
            expect(result1.current.isConnected).toBe(result2.current.isConnected)
            expect(result1.current.error).toBe(result2.current.error)
        })

        test('一個實例的操作應該影響其他實例', async () => {
            const { result: result1 } = renderHook(() => useTranscriptNew(), {
                wrapper: TestWrapper
            })
            const { result: result2 } = renderHook(() => useTranscriptNew(), {
                wrapper: TestWrapper
            })

            // 從第一個實例禁用自動滾動
            await act(async () => {
                result1.current.disableAutoScroll()
            })

            // 第二個實例應該反映相同的狀態
            expect(result2.current.autoScrollEnabled).toBe(false)
        })
    })

    describe('記憶體管理', () => {
        test('Hook 應該正確清理資源', () => {
            const { unmount } = renderHook(() => useTranscriptNew(), {
                wrapper: TestWrapper
            })

            // 多次 mount/unmount 應該穩定
            for (let i = 0; i < 3; i++) {
                unmount()
                const { unmount: newUnmount } = renderHook(() => useTranscriptNew(), {
                    wrapper: TestWrapper
                })
                expect(() => newUnmount()).not.toThrow()
            }
        })

        test('Context unmount 不應該影響 TranscriptManager', () => {
            let unmount1: () => void
            let unmount2: () => void

            // 第一個 Provider
            const { unmount: u1 } = renderHook(() => useTranscriptNew(), {
                wrapper: TestWrapper
            })
            unmount1 = u1

            // 第二個 Provider
            const { unmount: u2 } = renderHook(() => useTranscriptNew(), {
                wrapper: TestWrapper
            })
            unmount2 = u2

            // 清理第一個不應該影響第二個
            expect(() => unmount1()).not.toThrow()
            expect(() => unmount2()).not.toThrow()
        })
    })
})


# END FILE CONTENTS


# File: frontend/types/app-state-context.ts

import { AppData, AppState, SessionStatus, SessionType, TranscriptEntry } from "./app-state"
import { StateTransitionTrigger, StateTransitionResult } from './state-transitions';

// 狀態管理 Actions
export type AppStateAction =
    | { type: "SET_STATE"; payload: AppState }
    | { type: "SET_APP_STATE"; payload: AppState }  // 別名，為了向後相容
    | { type: "SET_RECORDING"; payload: boolean }
    | { type: "SET_RECORDING_TIME"; payload: number }
    | { type: "SET_EDITOR_CONTENT"; payload: string }
    | { type: "SET_TRANSCRIPT_ENTRIES"; payload: TranscriptEntry[] }
    | { type: "ADD_TRANSCRIPT_ENTRY"; payload: TranscriptEntry }
    | { type: "SET_SESSION"; payload: { id: string; status: SessionStatus; type: SessionType } | null }
    | { type: "UPDATE_SESSION_STATUS"; payload: SessionStatus }
    | { type: "RESET_STATE" }
    | { type: "SET_LOADING"; payload: boolean }
    | { type: "SET_ERROR"; payload: string | null }
    | { type: "CLEAR_ERROR" }

// Context 狀態介面
export interface AppStateContextValue {
    // 狀態數據
    appData: AppData
    isLoading: boolean
    error: string | null

    // 狀態更新函數
    dispatch: (action: AppStateAction) => void

    // 便利方法（封裝常用的 dispatch 操作）
    setState: (state: AppState) => void
    setRecording: (isRecording: boolean) => void
    setRecordingTime: (time: number) => void
    setEditorContent: (content: string) => void
    setTranscriptEntries: (entries: TranscriptEntry[]) => void
    addTranscriptEntry: (entry: TranscriptEntry) => void
    setSession: (session: { id: string; status: SessionStatus; type: SessionType } | null) => void
    updateSessionStatus: (status: SessionStatus) => void
    resetState: () => void
    setLoading: (loading: boolean) => void
    setError: (error: string | null) => void
    transition: (trigger: StateTransitionTrigger) => StateTransitionResult | null
}

// 初始狀態
export const initialAppData: AppData = {
    state: "default",
    transcriptEntries: [],
    editorContent: "",
    isRecording: false,
    recordingTime: 0,
    session: null,
}

export const initialContextState = {
    appData: initialAppData,
    isLoading: false,
    error: null,
}


# END FILE CONTENTS


# File: frontend/e2e/export-api.spec.ts

import { test, expect, Page } from '@playwright/test'
import JSZip from 'jszip'

// 測試用假 session id，請確保後端有對應 completed session 或手動設置
const TEST_SESSION_ID = 'test-session-completed-001'

// 下載並解壓 zip，驗證內容
async function fetchAndUnzipZip(page: Page, sid: string) {
    const response = await page.request.get(`/api/export/${sid}?type=zip`)
    expect(response.status()).toBe(200)
    const buffer = await response.body()
    const zip = await JSZip.loadAsync(buffer)
    const note = await zip.file('note.md')?.async('string')
    const transcript = await zip.file('transcript.txt')?.async('string')
    return { note, transcript }
}

test.describe('匯出 API Proxy 測試', () => {
    test('應該正確 proxy /api/export/<sid> 到 FastAPI', async ({ page }) => {
        // 直接發送 fetch 請求
        const response = await page.request.get(`/api/export/${TEST_SESSION_ID}?type=zip`)
        // 應該不是 404
        expect(response.status()).not.toBe(404)
        // 應該不是 Next.js 預設 404 頁面
        const text = await response.text()
        expect(text).not.toContain('This page could not be found')
        // 標頭應有 FastAPI 標記（如 server: uvicorn）
        const serverHeader = response.headers()['server'] || ''
        expect(serverHeader.toLowerCase()).toContain('uvicorn')
    })

    test('應該能下載並驗證 zip 內容', async ({ page }) => {
        const { note, transcript } = await fetchAndUnzipZip(page, TEST_SESSION_ID)
        expect(note).toBeDefined()
        expect(transcript).toBeDefined()
        expect(note?.length).toBeGreaterThan(0)
        expect(transcript?.length).toBeGreaterThan(0)
        // 可根據實際內容加強驗證
        expect(note).toMatch(/.+/) // 至少有內容
        expect(transcript).toMatch(/\[\d{2}:\d{2}:\d{2}\]/) // 有時間戳
    })
})


# END FILE CONTENTS


# File: gptree_output.txt

# Project Directory Structure:
.
├── .cursor/
│   └── rules/
│       ├── backend.mdc
│       ├── frontend.mdc
│       ├── playwright-e2e-testing.mdc
│       ├── python.mdc
│       ├── react.mdc
│       ├── rules.mdc
│       └── ui-rules/
│           ├── create-prototype.mdc
│           └── shadcn-tailwind-ui-guideline.mdc
├── .cursorignore
├── .dockerignore
├── .editorconfig
├── .env.example
├── .gptree_config
├── .pytest_cache/
├── PRD.md
├── README.md
├── SPEC.md
├── Todos.md
├── app/
│   ├── __init__.py
│   ├── api/
│   │   ├── __init__.py
│   │   ├── export.py
│   │   ├── notes.py
│   │   ├── segments.py
│   │   └── sessions.py
│   ├── core/
│   │   ├── __init__.py
│   │   ├── audio_vad.py
│   │   ├── config.py
│   │   ├── container.py
│   │   ├── ffmpeg.py
│   │   └── webm_header_repairer.py
│   ├── db/
│   │   ├── __init__.py
│   │   ├── database.py
│   │   ├── supabase_config.py
│   │   └── supabase_init.sql
│   ├── lib/
│   │   ├── httpx_timeout.py
│   │   ├── prom_helpers.py
│   │   ├── rate_limit.py
│   │   └── settings_utils.py
│   ├── middleware/
│   │   └── __init__.py
│   ├── schemas/
│   │   ├── __init__.py
│   │   ├── note.py
│   │   └── session.py
│   ├── services/
│   │   ├── __init__.py
│   │   ├── azure_openai_v2.py
│   │   ├── azure_whisper.py
│   │   ├── r2_client.py
│   │   ├── stt/
│   │   │   ├── __init__.py
│   │   │   ├── base.py
│   │   │   ├── factory.py
│   │   │   ├── gemini_provider.py
│   │   │   ├── gpt4o_provider.py
│   │   │   ├── interfaces.py
│   │   │   ├── lang_map.py
│   │   │   ├── save_utils.py
│   │   │   └── whisper_provider.py
│   │   └── transcript_feed.py
│   ├── utils/
│   │   ├── __init__.py
│   │   ├── timer.py
│   │   ├── timing.py
│   │   └── validators.py
│   └── ws/
│       ├── __init__.py
│       ├── transcript_feed.py
│       └── upload_audio.py
├── docs/
│   ├── ADD_GEMINI.md
│   ├── auto-retry-upload-spec.md
│   ├── export-spec.md
│   ├── export-tdd-tasks.md
│   ├── export-transcript-format.md
│   ├── export-wait-until-completed-20240608.md
│   ├── lang-map-refactor.md
│   ├── skip-silence-spec.md
│   ├── stop-processing-finish-flow.md
│   ├── traceback-debug-spec.md
│   └── webm-to-wav-gpt4o.md
├── e2e/
│   └── export-api.spec.ts
├── frontend/
│   ├── .env.example
│   ├── .eslintrc.json
│   ├── .next/
│   ├── README.md
│   ├── __tests__/
│   │   └── integration/
│   │       ├── app-state-provider.test.tsx
│   │       ├── state-transitions.test.ts
│   │       ├── state-transitions.test.tsx
│   │       └── websocket-state-sync.test.ts
│   ├── app/
│   │   ├── globals.css
│   │   ├── layout.tsx
│   │   └── page.tsx
│   ├── app-store-zustand.ts
│   ├── components/
│   │   ├── NetworkRestorerClient.tsx
│   │   ├── SessionLoadingOverlay.tsx
│   │   ├── default-state.tsx
│   │   ├── finish-state.tsx
│   │   ├── provider-context-menu.tsx
│   │   ├── recording-active-state.tsx
│   │   ├── recording-state.tsx
│   │   ├── recording-waiting-state.tsx
│   │   ├── theme-provider.tsx
│   │   ├── ui/
│   │   │   ├── ExportButton.test.tsx
│   │   │   ├── ExportButton.tsx
│   │   │   ├── accordion.tsx
│   │   │   ├── alert-dialog.tsx
│   │   │   ├── alert.tsx
│   │   │   ├── aspect-ratio.tsx
│   │   │   ├── avatar.tsx
│   │   │   ├── badge.tsx
│   │   │   ├── breadcrumb.tsx
│   │   │   ├── button.tsx
│   │   │   ├── calendar.tsx
│   │   │   ├── card.tsx
│   │   │   ├── carousel.tsx
│   │   │   ├── chart.tsx
│   │   │   ├── checkbox.tsx
│   │   │   ├── collapsible.tsx
│   │   │   ├── command.tsx
│   │   │   ├── context-menu.tsx
│   │   │   ├── dialog.tsx
│   │   │   ├── drawer.tsx
│   │   │   ├── dropdown-menu.tsx
│   │   │   ├── form.tsx
│   │   │   ├── hover-card.tsx
│   │   │   ├── input-otp.tsx
│   │   │   ├── input.tsx
│   │   │   ├── label.tsx
│   │   │   ├── menubar.tsx
│   │   │   ├── navigation-menu.tsx
│   │   │   ├── pagination.tsx
│   │   │   ├── popover.tsx
│   │   │   ├── progress.tsx
│   │   │   ├── radio-group.tsx
│   │   │   ├── resizable.tsx
│   │   │   ├── scroll-area.tsx
│   │   │   ├── select.tsx
│   │   │   ├── separator.tsx
│   │   │   ├── sheet.tsx
│   │   │   ├── sidebar.tsx
│   │   │   ├── skeleton.tsx
│   │   │   ├── slider.tsx
│   │   │   ├── sonner.tsx
│   │   │   ├── switch.tsx
│   │   │   ├── table.tsx
│   │   │   ├── tabs.tsx
│   │   │   ├── textarea.tsx
│   │   │   ├── toast.tsx
│   │   │   ├── toaster.tsx
│   │   │   ├── toggle-group.tsx
│   │   │   ├── toggle.tsx
│   │   │   ├── tooltip.tsx
│   │   │   ├── use-mobile.tsx
│   │   │   └── use-toast.ts
│   │   ├── upload-status-indicator.tsx
│   │   └── waiting-state.tsx
│   ├── components.json
│   ├── constants/
│   │   ├── languages.ts
│   │   └── providers.ts
│   ├── e2e/
│   │   ├── export-api.spec.ts
│   │   ├── offline-recovery.spec.ts
│   │   ├── service-layer-integration.spec.ts
│   │   └── transcript-integration.spec.ts
│   ├── hooks/
│   │   ├── use-app-state-adapter.ts
│   │   ├── use-app-state-context.ts
│   │   ├── use-app-state-new.ts
│   │   ├── use-app-state.ts
│   │   ├── use-local-draft.ts
│   │   ├── use-mobile.tsx
│   │   ├── use-notes.ts
│   │   ├── use-recording-adapter.ts
│   │   ├── use-recording-new.ts
│   │   ├── use-recording.ts
│   │   ├── use-session-adapter.ts
│   │   ├── use-session-new.ts
│   │   ├── use-session.test.ts
│   │   ├── use-session.ts
│   │   ├── use-toast.ts
│   │   ├── use-transcript-adapter.ts
│   │   ├── use-transcript-new.ts
│   │   ├── use-transcript.ts
│   │   └── useNetworkRestorer.ts
│   ├── lib/
│   │   ├── __tests__/
│   │   │   ├── advanced-audio-recorder.test.ts
│   │   │   ├── initial-state-loader.test.ts
│   │   │   ├── migration-adapter.test.ts
│   │   │   ├── network-restorer.test.ts
│   │   │   ├── rest-audio-uploader-409.test.ts
│   │   │   ├── segmented-audio-recorder.test.ts
│   │   │   ├── state-machine.test.ts
│   │   │   └── state-management.test.ts
│   │   ├── advanced-audio-recorder.ts
│   │   ├── api.test.ts
│   │   ├── api.ts
│   │   ├── app-state-reducer.ts
│   │   ├── app-store-zustand.ts
│   │   ├── app-store.ts
│   │   ├── audio-recorder.ts
│   │   ├── config.ts
│   │   ├── feature-flags.ts
│   │   ├── initial-state-loader.ts
│   │   ├── interfaces.ts
│   │   ├── migration-adapter.ts
│   │   ├── rest-audio-uploader.ts
│   │   ├── segmented-audio-recorder.ts
│   │   ├── services/
│   │   │   ├── __tests__/
│   │   │   │   ├── recording-flow-service.test.ts
│   │   │   │   ├── recording-service.test.ts
│   │   │   │   ├── session-service-409.test.ts
│   │   │   │   ├── session-service.test.ts
│   │   │   │   ├── simple-recording-service.test.ts
│   │   │   │   └── transcript-service.test.ts
│   │   │   ├── base-service.ts
│   │   │   ├── index.ts
│   │   │   ├── interfaces.ts
│   │   │   ├── recording-flow-service.ts
│   │   │   ├── recording-service.ts
│   │   │   ├── service-container.ts
│   │   │   ├── service-registry.ts
│   │   │   ├── session-service.ts
│   │   │   ├── simple-recording-service.ts
│   │   │   ├── transcript-service-adapted.ts
│   │   │   └── transcript-service.ts
│   │   ├── simple-audio-recorder.ts
│   │   ├── state-machine.ts
│   │   ├── stream/
│   │   │   ├── __tests__/
│   │   │   │   └── audio-uploader.test.ts
│   │   │   └── audio-uploader.ts
│   │   ├── transcript-manager-adapter.ts
│   │   ├── transcript-manager-new.ts
│   │   ├── transcript-manager.ts
│   │   ├── typed-emitter.ts
│   │   ├── utils.ts
│   │   └── websocket.ts
│   ├── next.config.mjs
│   ├── node_modules/
│   ├── package.json
│   ├── playwright-report/
│   ├── playwright.config.ts
│   ├── pnpm-lock.yaml
│   ├── postcss.config.mjs
│   ├── providers/
│   │   └── app-state-provider-wrapper.tsx
│   ├── public/
│   │   ├── placeholder-logo.png
│   │   ├── placeholder-logo.svg
│   │   ├── placeholder-user.jpg
│   │   ├── placeholder.jpg
│   │   └── placeholder.svg
│   ├── refresh.ts
│   ├── src/
│   │   └── test-setup.ts
│   ├── study-scriber.tsx
│   ├── styles/
│   │   └── globals.css
│   ├── tailwind.config.ts
│   ├── test-transcript-integration.js
│   ├── tests/
│   ├── tsconfig.json
│   ├── types/
│   │   ├── app-state-context.ts
│   │   ├── app-state.ts
│   │   ├── state-transitions.ts
│   │   └── websocket-messages.ts
│   ├── utils/
│   │   ├── event-bus.ts
│   │   ├── export.ts
│   │   └── time.ts
│   └── vitest.config.ts
├── main.py
├── package.json
├── playwright.config.ts
├── pnpm-lock.yaml
├── pyproject.toml
├── pytest.ini
├── tests/
└── uv.lock

# BEGIN FILE CONTENTS

# File: frontend/components/ui/ExportButton.test.tsx

import { render, fireEvent, waitFor } from '@testing-library/react'
import ExportButton from './ExportButton'

jest.mock('@/hooks/use-session', () => ({
    useSession: () => ({ waitUntilCompleted: jest.fn() }),
}))
jest.mock('@/lib/api', () => ({
    notesAPI: { updateNote: jest.fn() },
}))
jest.mock('@/utils/export', () => ({
    downloadZip: jest.fn(),
}))
jest.mock('@/hooks/use-toast', () => ({
    toast: jest.fn(),
}))

const { useSession } = require('@/hooks/use-session')
const { notesAPI } = require('@/lib/api')
const { downloadZip } = require('@/utils/export')
const { toast } = require('@/hooks/use-toast')

describe('ExportButton', () => {
    beforeEach(() => {
        jest.clearAllMocks()
    })

    it('calls waitUntilCompleted and downloads on success', async () => {
        useSession.mockReturnValue({ waitUntilCompleted: jest.fn().mockResolvedValue(true) })
        notesAPI.updateNote.mockResolvedValue({})
        downloadZip.mockResolvedValue()
        const { getByText } = render(<ExportButton sid="sid" editorContent="abc" />)
        fireEvent.click(getByText(/Export/))
        await waitFor(() => expect(notesAPI.updateNote).toHaveBeenCalledWith('sid', { content: 'abc' }))
        expect(downloadZip).toHaveBeenCalledWith('sid')
    })

    it('shows toast if waitUntilCompleted returns false', async () => {
        useSession.mockReturnValue({ waitUntilCompleted: jest.fn().mockResolvedValue(false) })
        const { getByText } = render(<ExportButton sid="sid" editorContent="abc" />)
        fireEvent.click(getByText(/Export/))
        await waitFor(() => expect(toast).toHaveBeenCalledWith(expect.objectContaining({ title: expect.stringMatching(/後端仍在處理/) })))
    })

    it('shows error toast if updateNote fails', async () => {
        useSession.mockReturnValue({ waitUntilCompleted: jest.fn().mockResolvedValue(true) })
        notesAPI.updateNote.mockRejectedValue(new Error('fail'))
        const { getByText } = render(<ExportButton sid="sid" editorContent="abc" />)
        fireEvent.click(getByText(/Export/))
        await waitFor(() => expect(toast).toHaveBeenCalledWith(expect.objectContaining({ variant: 'destructive' })))
    })

    it('shows error toast if downloadZip fails', async () => {
        useSession.mockReturnValue({ waitUntilCompleted: jest.fn().mockResolvedValue(true) })
        notesAPI.updateNote.mockResolvedValue({})
        downloadZip.mockRejectedValue(new Error('fail'))
        const { getByText } = render(<ExportButton sid="sid" editorContent="abc" />)
        fireEvent.click(getByText(/Export/))
        await waitFor(() => expect(toast).toHaveBeenCalledWith(expect.objectContaining({ variant: 'destructive' })))
    })

    it('does not trigger export when busy', async () => {
        useSession.mockReturnValue({ waitUntilCompleted: jest.fn().mockResolvedValue(true) })
        notesAPI.updateNote.mockResolvedValue({})
        downloadZip.mockResolvedValue()
        const { getByText } = render(<ExportButton sid="sid" editorContent="abc" />)
        const btn = getByText(/Export/)
        fireEvent.click(btn)
        fireEvent.click(btn)
        await waitFor(() => expect(notesAPI.updateNote).toHaveBeenCalledTimes(1))
    })
})


# END FILE CONTENTS


# File: app/ws/__init__.py

"""
WebSocket 模組

提供即時音訊上傳和逐字稿推送功能
"""

"""app.ws package 初始化檔

避免在 import 時造成循環依賴，暫不主動載入 upload_audio。需要時請直接從 `app.ws.upload_audio` 導入目標。"""

__all__ = []


# END FILE CONTENTS


# File: app/ws/transcript_feed.py

import asyncio
import logging
import json
from fastapi import APIRouter, WebSocket, WebSocketDisconnect
from typing import Dict, List

logger = logging.getLogger(__name__)
router = APIRouter()

class ConnectionManager:
    def __init__(self):
        # 將活躍連接儲存在字典中，以 session_id 為鍵
        self.active_connections: Dict[str, List[WebSocket]] = {}
        logger.info("ConnectionManager (In-Memory) 已初始化")

    async def connect(self, websocket: WebSocket, session_id: str):
        await websocket.accept()
        if session_id not in self.active_connections:
            self.active_connections[session_id] = []
        self.active_connections[session_id].append(websocket)
        logger.info(f"WebSocket 客戶端已連接到 session_id: {session_id}。目前該 session 有 {len(self.active_connections[session_id])} 個連接。")

    def disconnect(self, websocket: WebSocket, session_id: str):
        if session_id in self.active_connections:
            try:
                self.active_connections[session_id].remove(websocket)
                logger.info(f"WebSocket 客戶端已從 session_id: {session_id} 斷開。")
                if not self.active_connections[session_id]:
                    del self.active_connections[session_id]
                    logger.info(f"Session_id: {session_id} 已無連接，從管理器中移除。")
            except ValueError:
                logger.warning(f"嘗試斷開一個不存在於 session_id: {session_id} 的 WebSocket 連接。")
        else:
            logger.warning(f"嘗試從一個不存在的 session_id: {session_id} 斷開連接。")

    async def broadcast(self, message: str, session_id: str):
        if session_id in self.active_connections and self.active_connections[session_id]:
            client_count = len(self.active_connections[session_id])
            logger.info(f"📡 [ConnectionManager] 正在向 session_id: {session_id} 的 {client_count} 個客戶端廣播訊息")

            # 記錄訊息內容（簡化版）
            try:
                import json
                parsed_msg = json.loads(message)
                msg_type = parsed_msg.get('type', parsed_msg.get('phase', 'unknown'))
                logger.info(f"📡 [ConnectionManager] 訊息類型: {msg_type}")
                if 'text' in parsed_msg:
                    text_preview = parsed_msg['text'][:30] + ('...' if len(parsed_msg['text']) > 30 else '')
                    logger.info(f"📡 [ConnectionManager] 文字預覽: '{text_preview}'")
            except:
                logger.info(f"📡 [ConnectionManager] 原始訊息: {message[:100]}...")

            # 建立一個任務列表以併發發送
            tasks = [connection.send_text(message) for connection in self.active_connections[session_id]]
            results = await asyncio.gather(*tasks, return_exceptions=True)

            # 檢查發送結果
            success_count = sum(1 for r in results if not isinstance(r, Exception))
            error_count = len(results) - success_count

            if error_count > 0:
                logger.warning(f"📡 [ConnectionManager] 廣播結果: {success_count} 成功, {error_count} 失敗")
                for i, result in enumerate(results):
                    if isinstance(result, Exception):
                        logger.error(f"📡 [ConnectionManager] 客戶端 {i} 發送失敗: {result}")
            else:
                logger.info(f"✅ [ConnectionManager] 廣播成功: 所有 {client_count} 個客戶端都收到訊息")
        else:
            logger.warning(f"⚠️ [ConnectionManager] 廣播失敗：找不到 session_id: {session_id} 的活躍連接")
            logger.info(f"📊 [ConnectionManager] 目前活躍 sessions: {list(self.active_connections.keys())}")

# 建立一個全域的 ConnectionManager 實例
manager = ConnectionManager()

@router.websocket("/ws/transcript_feed/{session_id}")
async def websocket_endpoint(websocket: WebSocket, session_id: str):
    """
    用於接收即時逐字稿的 WebSocket 端點。

    - 每个 session_id 建立一個獨立的廣播頻道。
    - 客戶端連接後，會加入對應 session_id 的頻道並監聽訊息。
    - 後端轉錄服務完成後，會將結果發布到此頻道。
    """
    await manager.connect(websocket, session_id)
    # 新增：告知前端等待階段
    await websocket.send_text(json.dumps({"phase": "waiting"}))
    try:
        # 保持連線開啟以接收廣播
        while True:
            # 這個迴圈主要是為了維持連線狀態，
            # receive_text() 會等待客戶端發送訊息。
            # 我們可以設定一個 timeout 來定期檢查連線或進行清理。
            await websocket.receive_text()

    except WebSocketDisconnect:
        logger.info(f"WebSocket for session {session_id} 主動斷開連接。")
        manager.disconnect(websocket, session_id)
    except Exception as e:
        logger.error(f"WebSocket for session {session_id} 發生意外錯誤: {e}")
        manager.disconnect(websocket, session_id)


# END FILE CONTENTS


# File: frontend/hooks/use-session.test.ts

// @ts-expect-error: jest types for test runner
import '@types/jest'
import '@testing-library/jest-dom'
import { renderHook, act } from '@testing-library/react'
import { useSession } from './use-session'

jest.mock('../lib/api', () => ({
    sessionAPI: {
        getSession: jest.fn(),
    },
}))

const { sessionAPI } = require('../lib/api')

describe('useSession - waitUntilCompleted', () => {
    beforeEach(() => {
        jest.clearAllMocks()
    })

    it('should resolve true immediately if session is completed', async () => {
        sessionAPI.getSession.mockResolvedValue({ status: 'completed' })
        const { result } = renderHook(() => useSession())
        await act(async () => {
            const ok = await result.current.waitUntilCompleted('sid', 1000)
            expect(ok).toBe(true)
        })
        expect(sessionAPI.getSession).toHaveBeenCalledTimes(1)
    })

    it('should poll until completed then resolve true', async () => {
        const states = [
            { status: 'processing' },
            { status: 'processing' },
            { status: 'completed' },
        ]
        let call = 0
        sessionAPI.getSession.mockImplementation(() => Promise.resolve(states[call++]))
        const { result } = renderHook(() => useSession())
        await act(async () => {
            const ok = await result.current.waitUntilCompleted('sid', 2000)
            expect(ok).toBe(true)
        })
        expect(sessionAPI.getSession).toHaveBeenCalledTimes(3)
    })

    it('should return false if timeout before completed', async () => {
        sessionAPI.getSession.mockResolvedValue({ status: 'processing' })
        const { result } = renderHook(() => useSession())
        await act(async () => {
            const ok = await result.current.waitUntilCompleted('sid', 1600)
            expect(ok).toBe(false)
        })
        // 1600ms / 1500ms = 2 次
        expect(sessionAPI.getSession).toHaveBeenCalledTimes(2)
    })

    it('should ignore 404 and retry until timeout', async () => {
        const error = { response: { status: 404 }, isAxiosError: true }
        sessionAPI.getSession.mockRejectedValue(error)
        const { result } = renderHook(() => useSession())
        await act(async () => {
            const ok = await result.current.waitUntilCompleted('sid', 1600)
            expect(ok).toBe(false)
        })
        expect(sessionAPI.getSession).toHaveBeenCalledTimes(2)
    })

    it('should throw on non-404 error', async () => {
        const error = { response: { status: 500 }, isAxiosError: true }
        sessionAPI.getSession.mockRejectedValue(error)
        const { result } = renderHook(() => useSession())
        await expect(result.current.waitUntilCompleted('sid', 1000)).rejects.toEqual(error)
    })
})


# END FILE CONTENTS


# File: frontend/__tests__/integration/state-transitions.test.ts

import { beforeEach, describe, expect, test, vi } from 'vitest'
import { StateMachine } from '../../lib/state-machine'
import { featureFlagManager } from '../../lib/feature-flags'
import type { AppState } from '../../types/app-state'
import type { StateTransitionContext } from '../../types/state-transitions'

// Mock localStorage
const localStorageMock = {
    getItem: vi.fn(),
    setItem: vi.fn(),
    removeItem: vi.fn(),
    clear: vi.fn(),
}

Object.defineProperty(window, 'localStorage', {
    value: localStorageMock
})

describe('狀態轉換測試', () => {
    beforeEach(() => {
        vi.clearAllMocks()
        featureFlagManager.reset()
        featureFlagManager.enable('useNewStateManagement')
        localStorageMock.getItem.mockReturnValue(null)
    })

    describe('基本狀態轉換', () => {
        test('應該支援 default → recording_waiting 轉換', () => {
            const stateMachine = new StateMachine('default')

            const canTransition = stateMachine.canTransition('START_RECORDING')
            expect(canTransition).toBe(true)

            const newState = stateMachine.transition('START_RECORDING')
            expect(newState).toBe('recording_waiting')
        })

        test('應該支援 recording_waiting → recording_active 轉換', () => {
            const stateMachine = new StateMachine('recording_waiting')

            const canTransition = stateMachine.canTransition('RECORDING_STARTED')
            expect(canTransition).toBe(true)

            const newState = stateMachine.transition('RECORDING_STARTED')
            expect(newState).toBe('recording_active')
        })

        test('應該支援 recording_active → processing 轉換', () => {
            const stateMachine = new StateMachine('recording_active')

            const canTransition = stateMachine.canTransition('STOP_RECORDING')
            expect(canTransition).toBe(true)

            const newState = stateMachine.transition('STOP_RECORDING')
            expect(newState).toBe('processing')
        })

        test('應該支援 processing → finished 轉換', () => {
            const stateMachine = new StateMachine('processing')

            const canTransition = stateMachine.canTransition('PROCESSING_COMPLETE')
            expect(canTransition).toBe(true)

            const newState = stateMachine.transition('PROCESSING_COMPLETE')
            expect(newState).toBe('finished')
        })
    })

    describe('狀態轉換限制', () => {
        test('不應該允許無效的狀態轉換', () => {
            const stateMachine = new StateMachine('default')

            // 不能直接從 default 跳到 recording_active
            const canTransition = stateMachine.canTransition('RECORDING_STARTED')
            expect(canTransition).toBe(false)

            // 嘗試無效轉換應該拋出錯誤
            expect(() => {
                stateMachine.transition('RECORDING_STARTED')
            }).toThrow()
        })

        test('finished 狀態應該只能重置到 default', () => {
            const stateMachine = new StateMachine('finished')

            // 只能重置
            expect(stateMachine.canTransition('RESET')).toBe(true)
            expect(stateMachine.canTransition('START_RECORDING')).toBe(false)
            expect(stateMachine.canTransition('STOP_RECORDING')).toBe(false)

            const newState = stateMachine.transition('RESET')
            expect(newState).toBe('default')
        })

        test('應該支援從任何狀態重置到 default', () => {
            const states: AppState[] = ['default', 'recording_waiting', 'recording_active', 'processing', 'finished']

            states.forEach(state => {
                const stateMachine = new StateMachine(state)
                expect(stateMachine.canTransition('RESET')).toBe(true)
                expect(stateMachine.transition('RESET')).toBe('default')
            })
        })
    })

    describe('完整狀態流程', () => {
        test('應該支援完整的錄音流程', () => {
            const stateMachine = new StateMachine('default')

            // 完整流程：default → recording_waiting → recording_active → processing → finished
            expect(stateMachine.getCurrentState()).toBe('default')

            // 開始錄音
            const waitingState = stateMachine.transition('START_RECORDING')
            expect(waitingState).toBe('recording_waiting')

            // 錄音開始
            const activeState = stateMachine.transition('RECORDING_STARTED')
            expect(activeState).toBe('recording_active')

            // 停止錄音
            const processingState = stateMachine.transition('STOP_RECORDING')
            expect(processingState).toBe('processing')

            // 處理完成
            const finishedState = stateMachine.transition('PROCESSING_COMPLETE')
            expect(finishedState).toBe('finished')

            // 重置
            const resetState = stateMachine.transition('RESET')
            expect(resetState).toBe('default')
        })

        test('應該支援筆記模式流程', () => {
            const stateMachine = new StateMachine('default')

            // 筆記模式：default → finished (直接完成)
            expect(stateMachine.getCurrentState()).toBe('default')

            const finishedState = stateMachine.transition('FINISH_SESSION')
            expect(finishedState).toBe('finished')
        })
    })

    describe('錯誤恢復', () => {
        test('應該支援錯誤狀態恢復', () => {
            const stateMachine = new StateMachine('recording_active')

            // 從錄音中發生錯誤
            const errorState = stateMachine.transition('ERROR')
            expect(errorState).toBe('default')
        })

        test('應該支援會話升級', () => {
            const stateMachine = new StateMachine('default')

            // 升級到錄音模式
            const upgradedState = stateMachine.transition('UPGRADE_TO_RECORDING')
            expect(upgradedState).toBe('recording_waiting')
        })
    })

    describe('並發狀態變更', () => {
        test('狀態機應該是線程安全的', () => {
            const stateMachine = new StateMachine('default')
            const results: AppState[] = []

            // 模擬並發轉換
            const transitions = [
                'START_RECORDING',
                'RESET',
                'START_RECORDING',
                'RESET'
            ]

            transitions.forEach(trigger => {
                try {
                    const newState = stateMachine.transition(trigger as any)
                    results.push(newState)
                } catch (error) {
                    // 某些轉換可能失敗，這是預期的
                }
            })

            // 最後狀態應該是有效的
            const finalState = stateMachine.getCurrentState()
            const validStates: AppState[] = ['default', 'recording_waiting', 'recording_active', 'processing', 'finished']
            expect(validStates).toContain(finalState)
        })
    })

    describe('狀態歷史', () => {
        test('應該記錄狀態轉換歷史', () => {
            const stateMachine = new StateMachine('default')

            stateMachine.transition('START_RECORDING')
            stateMachine.transition('RECORDING_STARTED')
            stateMachine.transition('STOP_RECORDING')

            const history = stateMachine.getHistory()
            expect(history).toHaveLength(4) // 包含初始狀態
            expect(history[0]).toBe('default')
            expect(history[1]).toBe('recording_waiting')
            expect(history[2]).toBe('recording_active')
            expect(history[3]).toBe('processing')
        })

        test('應該支援回到上一個狀態', () => {
            const stateMachine = new StateMachine('default')

            stateMachine.transition('START_RECORDING')
            stateMachine.transition('RECORDING_STARTED')

            const canGoBack = stateMachine.canGoBack()
            expect(canGoBack).toBe(true)

            const previousState = stateMachine.goBack()
            expect(previousState).toBe('recording_waiting')
            expect(stateMachine.getCurrentState()).toBe('recording_waiting')
        })
    })
})


# END FILE CONTENTS


# File: frontend/e2e/service-layer-integration.spec.ts

import { test, expect } from '@playwright/test'

/**
 * 服務層整合測試 - 完整驗證重構後的系統
 */

test.describe('服務層整合測試', () => {
    let consoleLogs: string[] = []
    let consoleErrors: string[] = []

    test.beforeEach(async ({ page }) => {
        consoleLogs = []
        consoleErrors = []

        // 監聽 console 輸出
        page.on('console', (msg) => {
            const text = `[${msg.type()}] ${msg.text()}`
            console.log(`🖥️  ${text}`)

            if (msg.type() === 'error') {
                consoleErrors.push(text)
            } else {
                consoleLogs.push(text)
            }
        })

        page.on('pageerror', (error) => {
            console.log(`❌ Page Error: ${error.message}`)
            consoleErrors.push(`PAGE_ERROR: ${error.message}`)
        })

        console.log('🚀 導航到應用...')
        await page.goto('/')
        await page.waitForLoadState('networkidle')
        console.log('✅ 頁面載入完成')
    })

    test('基礎架構驗證', async ({ page }) => {
        console.log('\n🔧 驗證服務層基礎架構...')

        await expect(page.locator('body')).toBeVisible()
        await page.waitForTimeout(3000)

        const result = await page.evaluate(() => ({
            hasWindow: typeof window !== 'undefined',
            windowKeys: Object.keys(window).length,
            appElements: document.querySelectorAll('[id*="root"], main, .app').length
        }))

        console.log('📊 基礎檢查:', result)
        console.log(`📊 Console Logs: ${consoleLogs.length}`)
        console.log(`❌ Errors: ${consoleErrors.length}`)
    })

    test('錄音功能完整測試', async ({ page }) => {
        console.log('\n🎤 測試錄音功能...')

        await page.context().grantPermissions(['microphone'])

        const buttons = await page.locator('button').all()
        console.log(`📊 找到 ${buttons.length} 個按鈕`)

        for (const button of buttons.slice(0, 3)) {
            const text = await button.textContent()
            const isVisible = await button.isVisible()
            const isEnabled = await button.isEnabled()

            console.log(`📋 按鈕: "${text}" - 可見:${isVisible}, 啟用:${isEnabled}`)

            if (isVisible && isEnabled && text?.trim()) {
                console.log(`🔄 點擊: "${text}"`)
                const logsBefore = consoleLogs.length

                await button.click()
                await page.waitForTimeout(2000)

                const newLogs = consoleLogs.slice(logsBefore)
                console.log(`📝 新增 ${newLogs.length} 條日誌`)
                newLogs.forEach(log => console.log(`   ${log}`))
            }
        }
    })

    test('服務層日誌分析', async ({ page }) => {
        console.log('\n🔍 分析服務層日誌...')

        await page.waitForTimeout(2000)

        // 觸發一些互動
        const elements = page.locator('button, input, [role="button"]')
        const count = await elements.count()

        for (let i = 0; i < Math.min(3, count); i++) {
            try {
                await elements.nth(i).click()
                await page.waitForTimeout(500)
            } catch { }
        }

        // 分析日誌
        const serviceLogs = consoleLogs.filter(log =>
            log.toLowerCase().includes('service') ||
            log.toLowerCase().includes('container')
        )

        const recordingLogs = consoleLogs.filter(log =>
            log.toLowerCase().includes('record') ||
            log.toLowerCase().includes('audio')
        )

        const stateLogs = consoleLogs.filter(log =>
            log.toLowerCase().includes('state') ||
            log.toLowerCase().includes('action')
        )

        console.log('\n📊 日誌分析:')
        console.log(`   服務層: ${serviceLogs.length}`)
        console.log(`   錄音: ${recordingLogs.length}`)
        console.log(`   狀態: ${stateLogs.length}`)
        console.log(`   總計: ${consoleLogs.length}`)
        console.log(`   錯誤: ${consoleErrors.length}`)

        if (serviceLogs.length > 0) {
            console.log('\n🔧 服務層日誌:')
            serviceLogs.forEach(log => console.log(`   ${log}`))
        }

        if (recordingLogs.length > 0) {
            console.log('\n🎤 錄音日誌:')
            recordingLogs.forEach(log => console.log(`   ${log}`))
        }
    })

    test.afterEach(async () => {
        console.log('\n📋 測試總結:')
        console.log(`📊 Console Logs: ${consoleLogs.length}`)
        console.log(`❌ Errors: ${consoleErrors.length}`)

        if (consoleErrors.length > 0) {
            console.log('\n❌ 錯誤詳情:')
            consoleErrors.forEach(error => console.log(`   ${error}`))
        }

        console.log('🏁 測試完成\n' + '='.repeat(50))
    })
})


# END FILE CONTENTS


# File: frontend/hooks/use-session.ts

"use client"

import { useState, useCallback, useMemo } from 'react'
import axios from 'axios'
import { sessionAPI, type SessionCreateRequest, type SessionResponse } from '../lib/api'

interface UseSessionReturn {
    currentSession: SessionResponse | null
    isLoading: boolean
    error: string | null
    createNoteSession: (title?: string, content?: string) => Promise<SessionResponse | null>
    createRecordingSession: (title?: string, content?: string, lang_code?: string, stt_provider?: string) => Promise<SessionResponse | null>
    upgradeToRecording: () => Promise<SessionResponse | null>
    finishSession: () => Promise<void>
    deleteSession: () => Promise<void>
    clearSession: () => void
    checkActiveSession: () => Promise<SessionResponse | null>
}

export function useSession(): UseSessionReturn {
    const [currentSession, setCurrentSession] = useState<SessionResponse | null>(null)
    const [isLoading, setIsLoading] = useState(false)
    const [error, setError] = useState<string | null>(null)

    const clearError = useCallback(() => {
        setError(null)
    }, [])

    const checkActiveSession = useCallback(async (): Promise<SessionResponse | null> => {
        setIsLoading(true)
        clearError()

        try {
            const activeSession = await sessionAPI.getActiveSession()
            if (activeSession) {
                setCurrentSession(activeSession)
                console.log('✅ 已恢復活躍會話狀態:', activeSession)
                return activeSession
            } else {
                console.log('ℹ️ 沒有活躍會話，使用預設狀態')
                return null
            }
        } catch (err) {
            // 如果是網路錯誤，且是初始化階段，則靜默處理
            if (err instanceof Error && err.message.includes('Network Error')) {
                console.warn('⚠️ Backend API 連線暫時失敗，將在後續重試:', err.message)
                return null // 靜默失敗，不設置錯誤狀態
            }

            const errorMessage = err instanceof Error ? err.message : '檢查活躍會話失敗'
            setError(errorMessage)
            console.error('❌ 檢查活躍會話失敗:', err)
            return null
        } finally {
            setIsLoading(false)
        }
    }, [clearError])
    const createNoteSession = useCallback(async (title?: string, content?: string): Promise<SessionResponse | null> => {
        setIsLoading(true)
        clearError()

        try {
            const sessionData: SessionCreateRequest = {
                title,
                type: 'note_only',
                content,
            }

            const session = await sessionAPI.createSession(sessionData)
            setCurrentSession(session)
            console.log('✅ 純筆記會話建立成功:', session)
            return session
        } catch (err) {
            // 特別處理 409 衝突錯誤
            if (axios.isAxiosError(err) && err.response?.status === 409) {
                const conflictMessage = '檢測到活躍會話衝突，請重新整理頁面後再試'
                setError(conflictMessage)
                console.error('❌ 會話衝突錯誤 (409):', err.response?.data?.detail || err.message)
                return null
            }

            const errorMessage = err instanceof Error ? err.message : '建立會話失敗'
            setError(errorMessage)
            console.error('❌ 建立純筆記會話失敗:', err)
            return null
        } finally {
            setIsLoading(false)
        }
    }, [clearError])

    const createRecordingSession = useCallback(async (title?: string, content?: string, lang_code?: string, stt_provider?: string): Promise<SessionResponse | null> => {
        setIsLoading(true)
        clearError()

        try {
            const sessionData: SessionCreateRequest = {
                title,
                type: 'recording',
                content,
                lang_code,
                stt_provider,
            }

            const session = await sessionAPI.createSession(sessionData)
            setCurrentSession(session)
            console.log('✅ 錄音會話建立成功:', session)
            return session
        } catch (err) {
            // 特別處理 409 衝突錯誤
            if (axios.isAxiosError(err) && err.response?.status === 409) {
                const conflictMessage = '檢測到活躍會話衝突，請重新整理頁面後再試'
                setError(conflictMessage)
                console.error('❌ 會話衝突錯誤 (409):', err.response?.data?.detail || err.message)
                return null
            }

            const errorMessage = err instanceof Error ? err.message : '建立錄音會話失敗'
            setError(errorMessage)
            console.error('❌ 建立錄音會話失敗:', err)
            return null
        } finally {
            setIsLoading(false)
        }
    }, [clearError])

    const upgradeToRecording = useCallback(async (): Promise<SessionResponse | null> => {
        if (!currentSession) {
            setError('沒有活躍的會話可以升級')
            return null
        }

        if (currentSession.type === 'recording') {
            console.log('🔄 會話已經是錄音模式')
            return currentSession
        }

        setIsLoading(true)
        clearError()

        try {
            const updatedSession = await sessionAPI.upgradeToRecording(currentSession.id)
            setCurrentSession(updatedSession)
            console.log('✅ 會話升級為錄音模式成功:', updatedSession)
            return updatedSession
        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : '升級會話失敗'
            setError(errorMessage)
            console.error('❌ 升級會話失敗:', err)
            return null
        } finally {
            setIsLoading(false)
        }
    }, [currentSession, clearError])

    const finishSession = useCallback(async (): Promise<void> => {
        if (!currentSession) {
            console.log('🔄 沒有活躍的會話需要完成')
            return
        }

        setIsLoading(true)
        clearError()

        try {
            await sessionAPI.finishSession(currentSession.id)
            console.log('✅ 會話完成成功:', currentSession.id)
            // 保持 session 資料，只更新狀態
            setCurrentSession((prev: SessionResponse | null) => prev ? { ...prev, status: 'completed' } : null)
        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : '完成會話失敗'
            setError(errorMessage)
            console.error('❌ 完成會話失敗:', err)
        } finally {
            setIsLoading(false)
        }
    }, [currentSession, clearError])

    const deleteSession = useCallback(async (): Promise<void> => {
        if (!currentSession) {
            console.log('🔄 沒有活躍的會話需要刪除')
            return
        }

        setIsLoading(true)
        clearError()

        try {
            await sessionAPI.deleteSession(currentSession.id)
            console.log('✅ 會話刪除成功:', currentSession.id)
            setCurrentSession(null)
        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : '刪除會話失敗'
            setError(errorMessage)
            console.error('❌ 刪除會話失敗:', err)
        } finally {
            setIsLoading(false)
        }
    }, [currentSession, clearError])

    const clearSession = useCallback(() => {
        setCurrentSession(null)
        setError(null)
        console.log('🔄 會話已清除')
    }, [])

    return useMemo(() => ({
        currentSession,
        isLoading,
        error,
        createNoteSession,
        createRecordingSession,
        upgradeToRecording,
        finishSession,
        deleteSession,
        clearSession,
        checkActiveSession,
    }), [
        currentSession,
        isLoading,
        error,
        createNoteSession,
        createRecordingSession,
        upgradeToRecording,
        finishSession,
        deleteSession,
        clearSession,
        checkActiveSession,
    ])
}


# END FILE CONTENTS


# File: frontend/package.json

{
  "name": "my-v0-project",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "build": "next build",
    "dev": "next dev",
    "lint": "next lint",
    "start": "next start",
    "test": "vitest",
    "test:ui": "vitest --ui",
    "test:run": "vitest run",
    "e2e": "playwright test"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.9.1",
    "@radix-ui/react-accordion": "1.2.2",
    "@radix-ui/react-alert-dialog": "1.1.4",
    "@radix-ui/react-aspect-ratio": "1.1.1",
    "@radix-ui/react-avatar": "1.1.2",
    "@radix-ui/react-checkbox": "1.1.3",
    "@radix-ui/react-collapsible": "1.1.2",
    "@radix-ui/react-context-menu": "2.2.4",
    "@radix-ui/react-dialog": "1.1.4",
    "@radix-ui/react-dropdown-menu": "2.1.4",
    "@radix-ui/react-hover-card": "1.1.4",
    "@radix-ui/react-label": "2.1.1",
    "@radix-ui/react-menubar": "1.1.4",
    "@radix-ui/react-navigation-menu": "1.2.3",
    "@radix-ui/react-popover": "1.1.4",
    "@radix-ui/react-progress": "1.1.1",
    "@radix-ui/react-radio-group": "1.2.2",
    "@radix-ui/react-scroll-area": "1.2.2",
    "@radix-ui/react-select": "2.1.4",
    "@radix-ui/react-separator": "1.1.1",
    "@radix-ui/react-slider": "1.2.2",
    "@radix-ui/react-slot": "1.1.1",
    "@radix-ui/react-switch": "1.1.2",
    "@radix-ui/react-tabs": "1.1.2",
    "@radix-ui/react-toast": "1.2.4",
    "@radix-ui/react-toggle": "1.1.1",
    "@radix-ui/react-toggle-group": "1.1.1",
    "@radix-ui/react-tooltip": "1.1.6",
    "axios": "^1.10.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "1.0.4",
    "date-fns": "4.1.0",
    "easymde": "latest",
    "embla-carousel-react": "8.5.1",
    "input-otp": "1.4.1",
    "lucide-react": "^0.454.0",
    "next": "15.2.4",
    "next-themes": "^0.4.4",
    "react": "^19",
    "react-day-picker": "8.10.1",
    "react-dom": "^19",
    "react-hook-form": "^7.54.1",
    "react-resizable-panels": "^2.1.7",
    "react-simplemde-editor": "latest",
    "recharts": "2.15.0",
    "sonner": "^1.7.1",
    "tailwind-merge": "^2.5.5",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^0.9.6",
    "zod": "^3.24.1",
    "zustand": "^5.0.6"
  },
  "devDependencies": {
    "@playwright/test": "^1.44.1",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.3.0",
    "@testing-library/user-event": "^14.6.1",
    "@types/node": "^22",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "@vitejs/plugin-react": "^4.6.0",
    "@vitest/ui": "^3.2.4",
    "autoprefixer": "^10.4.20",
    "eslint": "^9",
    "eslint-config-next": "15.3.4",
    "jsdom": "^26.1.0",
    "postcss": "^8.5.0",
    "tailwindcss": "^3.4.17",
    "typescript": "^5",
    "vitest": "^3.2.4"
  },
  "packageManager": "pnpm@10.7.0+sha1.66453f13fbf9078d3db193718206a8d738afdbdb"
}


# END FILE CONTENTS


# File: frontend/lib/services/__tests__/session-service.test.ts

"use client"

import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest'
import { SessionService } from '../session-service'
import { sessionAPI } from '../../api'
import type { SessionResponse } from '../../api'

// Mock sessionAPI
vi.mock('../../api', () => ({
    sessionAPI: {
        createSession: vi.fn(),
        upgradeToRecording: vi.fn(),
        finishSession: vi.fn(),
        deleteSession: vi.fn(),
        getActiveSession: vi.fn(),
    }
}))

describe('SessionService', () => {
    let sessionService: SessionService
    const mockSessionAPI = sessionAPI as any

    beforeEach(() => {
        sessionService = new SessionService()
        vi.clearAllMocks()
    })

    afterEach(() => {
        vi.restoreAllMocks()
    })

    describe('服務初始化', () => {
        it('應該正確初始化 SessionService', () => {
            expect(sessionService).toBeDefined()
            expect(sessionService['serviceName']).toBe('SessionService')
        })

        it('應該正確啟動和停止服務', async () => {
            await sessionService.start()
            expect(sessionService['isRunning']).toBe(true)

            await sessionService.stop()
            expect(sessionService['isRunning']).toBe(false)
        })
    })

    describe('createRecordingSession', () => {
        const mockSession: SessionResponse = {
            id: 'test-session-id',
            title: 'Test Recording Session',
            type: 'recording',
            status: 'active',
            language: 'zh-TW',
            created_at: '2024-01-01T00:00:00Z',
            updated_at: '2024-01-01T00:00:00Z'
        }

        it('應該成功創建錄音會話', async () => {
            mockSessionAPI.createSession.mockResolvedValue(mockSession)

            const result = await sessionService.createRecordingSession('Test Title', 'Test Content')

            expect(mockSessionAPI.createSession).toHaveBeenCalledWith({
                title: 'Test Title',
                type: 'recording',
                content: 'Test Content'
            })
            expect(result).toEqual(mockSession)
        })

        it('應該處理可選內容參數', async () => {
            mockSessionAPI.createSession.mockResolvedValue(mockSession)

            await sessionService.createRecordingSession('Test Title')

            expect(mockSessionAPI.createSession).toHaveBeenCalledWith({
                title: 'Test Title',
                type: 'recording',
                content: undefined
            })
        })

        it('應該處理 API 錯誤', async () => {
            const apiError = new Error('API Error')
            mockSessionAPI.createSession.mockRejectedValue(apiError)

            await expect(sessionService.createRecordingSession('Test Title'))
                .rejects.toThrow('API Error')
        })

        it('應該處理 409 衝突錯誤', async () => {
            const conflictError = new Error('409 Conflict')
            conflictError.message = '409'
            mockSessionAPI.createSession.mockRejectedValue(conflictError)

            await expect(sessionService.createRecordingSession('Test Title'))
                .rejects.toThrow('409')
        })
    })

    describe('createNoteSession', () => {
        const mockSession: SessionResponse = {
            id: 'test-note-session',
            title: 'Test Note Session',
            type: 'note_only',
            status: 'active',
            language: 'zh-TW',
            created_at: '2024-01-01T00:00:00Z',
            updated_at: '2024-01-01T00:00:00Z'
        }

        it('應該成功創建純筆記會話', async () => {
            mockSessionAPI.createSession.mockResolvedValue(mockSession)

            const result = await sessionService.createNoteSession('Note Title', 'Note Content')

            expect(mockSessionAPI.createSession).toHaveBeenCalledWith({
                title: 'Note Title',
                type: 'note_only',
                content: 'Note Content'
            })
            expect(result).toEqual(mockSession)
        })

        it('應該處理可選內容參數', async () => {
            mockSessionAPI.createSession.mockResolvedValue(mockSession)

            await sessionService.createNoteSession('Note Title')

            expect(mockSessionAPI.createSession).toHaveBeenCalledWith({
                title: 'Note Title',
                type: 'note_only',
                content: undefined
            })
        })
    })

    describe('upgradeToRecording', () => {
        const mockUpgradedSession: SessionResponse = {
            id: 'upgraded-session',
            title: 'Upgraded Session',
            type: 'recording',
            status: 'active',
            language: 'zh-TW',
            created_at: '2024-01-01T00:00:00Z',
            updated_at: '2024-01-01T00:00:00Z'
        }

        it('應該成功升級會話至錄音模式', async () => {
            mockSessionAPI.upgradeToRecording.mockResolvedValue(mockUpgradedSession)

            const result = await sessionService.upgradeToRecording('session-id')

            expect(mockSessionAPI.upgradeToRecording).toHaveBeenCalledWith('session-id')
            expect(result).toEqual(mockUpgradedSession)
        })

        it('應該處理升級失敗', async () => {
            const upgradeError = new Error('Upgrade failed')
            mockSessionAPI.upgradeToRecording.mockRejectedValue(upgradeError)

            await expect(sessionService.upgradeToRecording('session-id'))
                .rejects.toThrow('Upgrade failed')
        })
    })

    describe('finishSession', () => {
        it('應該成功完成會話', async () => {
            mockSessionAPI.finishSession.mockResolvedValue(undefined)

            await sessionService.finishSession('session-id')

            expect(mockSessionAPI.finishSession).toHaveBeenCalledWith('session-id')
        })

        it('應該處理完成會話失敗', async () => {
            const finishError = new Error('Finish failed')
            mockSessionAPI.finishSession.mockRejectedValue(finishError)

            await expect(sessionService.finishSession('session-id'))
                .rejects.toThrow('Finish failed')
        })
    })

    describe('deleteSession', () => {
        it('應該成功刪除會話', async () => {
            mockSessionAPI.deleteSession.mockResolvedValue(undefined)

            await sessionService.deleteSession('session-id')

            expect(mockSessionAPI.deleteSession).toHaveBeenCalledWith('session-id')
        })

        it('應該處理刪除會話失敗', async () => {
            const deleteError = new Error('Delete failed')
            mockSessionAPI.deleteSession.mockRejectedValue(deleteError)

            await expect(sessionService.deleteSession('session-id'))
                .rejects.toThrow('Delete failed')
        })
    })

    describe('checkActiveSession', () => {
        const mockActiveSession: SessionResponse = {
            id: 'active-session',
            title: 'Active Session',
            type: 'recording',
            status: 'active',
            language: 'zh-TW',
            created_at: '2024-01-01T00:00:00Z',
            updated_at: '2024-01-01T00:00:00Z'
        }

        it('應該返回活躍會話', async () => {
            mockSessionAPI.getActiveSession.mockResolvedValue(mockActiveSession)

            const result = await sessionService.checkActiveSession()

            expect(mockSessionAPI.getActiveSession).toHaveBeenCalled()
            expect(result).toEqual(mockActiveSession)
        })

        it('應該在沒有活躍會話時返回 null', async () => {
            mockSessionAPI.getActiveSession.mockResolvedValue(null)

            const result = await sessionService.checkActiveSession()

            expect(result).toBeNull()
        })

        it('應該處理檢查活躍會話失敗', async () => {
            const checkError = new Error('Check failed')
            mockSessionAPI.getActiveSession.mockRejectedValue(checkError)

            await expect(sessionService.checkActiveSession())
                .rejects.toThrow('Check failed')
        })
    })

    describe('錯誤處理和邊界條件', () => {
        it('應該處理空字符串參數', async () => {
            mockSessionAPI.createSession.mockResolvedValue({
                id: 'test-session',
                title: '',
                type: 'recording',
                status: 'active',
                language: 'zh-TW',
                created_at: '2024-01-01T00:00:00Z',
                updated_at: '2024-01-01T00:00:00Z'
            })

            await sessionService.createRecordingSession('')

            expect(mockSessionAPI.createSession).toHaveBeenCalledWith({
                title: '',
                type: 'recording',
                content: undefined
            })
        })

        it('應該處理網路錯誤', async () => {
            const networkError = new Error('Network Error')
            mockSessionAPI.createSession.mockRejectedValue(networkError)

            await expect(sessionService.createRecordingSession('Test'))
                .rejects.toThrow('Network Error')
        })

        it('應該處理超時錯誤', async () => {
            const timeoutError = new Error('Request timeout')
            mockSessionAPI.createSession.mockRejectedValue(timeoutError)

            await expect(sessionService.createRecordingSession('Test'))
                .rejects.toThrow('Request timeout')
        })
    })

    describe('並發場景測試', () => {
        it('應該處理並發的會話創建請求', async () => {
            const mockSession1 = { ...mockSessionAPI, id: 'session-1' }
            const mockSession2 = { ...mockSessionAPI, id: 'session-2' }

            mockSessionAPI.createSession
                .mockResolvedValueOnce(mockSession1)
                .mockResolvedValueOnce(mockSession2)

            const promises = [
                sessionService.createRecordingSession('Session 1'),
                sessionService.createRecordingSession('Session 2')
            ]

            const results = await Promise.all(promises)

            expect(results).toHaveLength(2)
            expect(mockSessionAPI.createSession).toHaveBeenCalledTimes(2)
        })

        it('應該處理一個成功一個失敗的並發請求', async () => {
            const mockSession = { id: 'success-session' }
            const error = new Error('Failed')

            mockSessionAPI.createSession
                .mockResolvedValueOnce(mockSession)
                .mockRejectedValueOnce(error)

            const promises = [
                sessionService.createRecordingSession('Success'),
                sessionService.createRecordingSession('Fail')
            ]

            const results = await Promise.allSettled(promises)

            expect(results[0].status).toBe('fulfilled')
            expect(results[1].status).toBe('rejected')
        })
    })

    describe('服務狀態管理', () => {
        it('應該報告正確的服務狀態', () => {
            const info = sessionService.getServiceInfo()

            expect(info).toMatchObject({
                serviceName: 'SessionService',
                isInitialized: expect.any(Boolean),
                isRunning: expect.any(Boolean)
            })
        })

        it('應該在多次啟動時保持穩定', async () => {
            await sessionService.start()
            await sessionService.start()
            await sessionService.start()

            expect(sessionService['isRunning']).toBe(true)
        })

        it('應該在多次停止時保持穩定', async () => {
            await sessionService.start()
            await sessionService.stop()
            await sessionService.stop()
            await sessionService.stop()

            expect(sessionService['isRunning']).toBe(false)
        })
    })
})


# END FILE CONTENTS


# File: app/api/__init__.py



# END FILE CONTENTS


# File: app/services/stt/base.py

from __future__ import annotations

import abc
from typing import Dict, Any
from uuid import UUID

__all__ = ["ISTTProvider"]

class ISTTProvider(abc.ABC):
    """語音轉文字 Provider 介面。所有轉錄服務需實作此介面。"""

    @abc.abstractmethod
    async def transcribe(self, webm: bytes, session_id: UUID, chunk_seq: int) -> Dict[str, Any]:
        """轉錄指定 WebM 音訊。

        Args:
            webm: 原始 WebM 音訊二進位資料。
            session_id: 會話 ID。
            chunk_seq: 切片序號。

        Returns:
            dict: 需包含 text, start_offset, end_offset 等欄位，前端保持一致。"""

    @abc.abstractmethod
    def name(self) -> str:
        """回傳 Provider 名稱 (例如 'whisper', 'gemini')"""

    @abc.abstractmethod
    def max_rpm(self) -> int:
        """API 速率限制：每分鐘最大請求數 (RateLimiter 用)"""


# END FILE CONTENTS


# File: app/db/supabase_config.py

"""
StudyScriber Supabase 配置管理

整合 Supabase 資料庫與 SQLAlchemy ORM
"""

import os
import re
from typing import Optional
from dotenv import load_dotenv
from supabase import create_client, Client

# 載入環境變數
load_dotenv()

class SupabaseConfig:
    """Supabase 配置管理類別"""

    def __init__(self):
        self.supabase_url = os.getenv("SUPABASE_URL")
        self.supabase_key = os.getenv("SUPABASE_KEY")  # 可以是 anon key 或 service key
        self.db_mode = os.getenv("DB_MODE")

    def is_configured(self) -> bool:
        """檢查 Supabase 是否已正確配置"""
        return (
            self.db_mode == "supabase" and
            bool(self.supabase_url) and
            bool(self.supabase_key)
        )

    def get_database_url(self) -> str:
        """
        根據設定模式回傳資料庫連接字串

        Returns:
            str: PostgreSQL 連接字串
        """
        if self.db_mode == "supabase":
            if not self.supabase_url or not self.supabase_key:
                raise ValueError("SUPABASE_URL 和 SUPABASE_KEY 是必須的")

            # 從 Supabase URL 提取 PostgreSQL 連接資訊
            # Supabase URL 格式: https://your-project-ref.supabase.co
            # PostgreSQL 連接格式: postgresql+asyncpg://postgres:[password]@db.your-project-ref.supabase.co:5432/postgres

            # 提取專案 ID
            url_match = re.match(r'https://([^.]+)\.supabase\.co', self.supabase_url)
            if not url_match:
                raise ValueError(f"無效的 Supabase URL 格式: {self.supabase_url}")

            project_ref = url_match.group(1)

            # 使用 service_role key 作為密碼（如果提供的是 service_role key）
            # 如果是 anon key，我們需要使用不同的方法
            if self.supabase_key.startswith('eyJ'):  # JWT token (anon key)
                # 對於 anon key，我們不能直接連接 PostgreSQL，必須使用 Supabase 客戶端
                # 這裡我們回傳一個特殊的標識符，讓 database.py 知道要使用 Supabase 客戶端
                return f"supabase+client://{project_ref}"
            else:
                # 假設是 service_role key，可以直接連接 PostgreSQL
                return f"postgresql+asyncpg://postgres:{self.supabase_key}@db.{project_ref}.supabase.co:5432/postgres"
        else:
            # 使用本地資料庫
            return os.getenv(
                "DATABASE_URL",
                "postgresql+asyncpg://postgres:password@localhost:5432/studyscriber"
            )

    def get_client(self) -> Optional[Client]:
        """
        建立 Supabase 客戶端連接

        Returns:
            Optional[Client]: Supabase 客戶端實例，如果是本地模式則回傳 None
        """
        if self.is_configured():
            return create_client(self.supabase_url, self.supabase_key)
        return None

    def is_supabase_mode(self) -> bool:
        """檢查是否為 Supabase 模式"""
        return self.db_mode == "supabase"


# 全域配置實例
supabase_config = SupabaseConfig()

# 便利函式
def get_supabase_client() -> Client:
    """獲取 Supabase 客戶端實例"""
    client = supabase_config.get_client()
    if client is None:
        raise ValueError("Supabase 客戶端無法初始化，請檢查環境配置")
    return client


# END FILE CONTENTS


# File: frontend/lib/__tests__/state-machine.test.ts

import { describe, test, expect, beforeEach, vi } from 'vitest'
import { StateMachine, StateMachineManager, createStateMachine } from '../state-machine'
import { StateTransitionContext } from '../../types/state-transitions'

describe('StateMachine', () => {
    let stateMachine: StateMachine
    let initialContext: StateTransitionContext

    beforeEach(() => {
        initialContext = {
            currentState: 'default',
            isRecording: false,
            transcriptCount: 0,
            session: null,
            error: null,
        }
        stateMachine = new StateMachine(initialContext)
    })

    test('should initialize with correct state', () => {
        expect(stateMachine.getCurrentState()).toBe('default')
        expect(stateMachine.getContext()).toEqual(initialContext)
    })

    test('should update context correctly', () => {
        const newContext = {
            isRecording: true,
            session: { id: 'test-id', status: 'active' as const, type: 'recording' as const }
        }

        stateMachine.updateContext(newContext)
        const updatedContext = stateMachine.getContext()

        expect(updatedContext.isRecording).toBe(true)
        expect(updatedContext.session).toEqual(newContext.session)
    })

    test('should validate USER_START_RECORDING transition from default', () => {
        const canTransition = stateMachine.canTransition('USER_START_RECORDING')
        expect(canTransition).toBe(true)
    })

    test('should not allow invalid transitions', () => {
        const canTransition = stateMachine.canTransition('USER_STOP_RECORDING')
        expect(canTransition).toBe(false)
    })

    test('should execute valid state transition', () => {
        const result = stateMachine.transition('USER_START_RECORDING')

        expect(result.success).toBe(true)
        expect(result.newState).toBe('recording_waiting')
        expect(result.sideEffects).toBeDefined()
        expect(stateMachine.getCurrentState()).toBe('recording_waiting')
    })

    test('should reject invalid state transition', () => {
        const result = stateMachine.transition('USER_STOP_RECORDING')

        expect(result.success).toBe(false)
        expect(result.error).toBeDefined()
        expect(stateMachine.getCurrentState()).toBe('default')
    })

    test('should handle FIRST_TRANSCRIPT_RECEIVED transition', () => {
        // 先轉換到 recording_waiting 狀態
        stateMachine.transition('USER_START_RECORDING')

        // 更新上下文以符合轉換條件
        stateMachine.updateContext({
            currentState: 'recording_waiting',
            isRecording: true,
            transcriptCount: 1,
            session: { id: 'test-id', status: 'active', type: 'recording' }
        })

        const result = stateMachine.transition('FIRST_TRANSCRIPT_RECEIVED')
        expect(result.success).toBe(true)
        expect(result.newState).toBe('recording_active')
    })

    test('should get available transitions correctly', () => {
        const transitions = stateMachine.getAvailableTransitions()
        expect(transitions).toContain('USER_START_RECORDING')
        expect(transitions).not.toContain('USER_STOP_RECORDING')
    })

    test('should reset state machine', () => {
        stateMachine.transition('USER_START_RECORDING')
        expect(stateMachine.getCurrentState()).toBe('recording_waiting')

        stateMachine.reset()
        expect(stateMachine.getCurrentState()).toBe('default')
        expect(stateMachine.getContext().isRecording).toBe(false)
    })

    test('should handle listeners correctly', () => {
        const mockListener = vi.fn()
        stateMachine.addListener(mockListener)

        stateMachine.transition('USER_START_RECORDING')

        expect(mockListener).toHaveBeenCalledWith(
            'recording_waiting',
            expect.any(Array)
        )

        stateMachine.removeListener(mockListener)
    })
})

describe('StateMachineManager', () => {
    let manager: StateMachineManager
    let initialContext: StateTransitionContext

    beforeEach(() => {
        initialContext = {
            currentState: 'default',
            isRecording: false,
            transcriptCount: 0,
            session: null,
            error: null,
        }
        manager = new StateMachineManager(initialContext)
    })

    test('should create manager with state machine', () => {
        const stateMachine = manager.getStateMachine()
        expect(stateMachine).toBeInstanceOf(StateMachine)
        expect(stateMachine.getCurrentState()).toBe('default')
    })

    test('should register side effect handlers', () => {
        const mockHandler = {
            handleSideEffect: vi.fn()
        }

        manager.registerSideEffectHandler('CREATE_SESSION', mockHandler)

        // 觸發會產生 CREATE_SESSION 副作用的轉換
        const stateMachine = manager.getStateMachine()
        stateMachine.transition('USER_START_RECORDING')

        // 等待副作用處理
        setTimeout(() => {
            expect(mockHandler.handleSideEffect).toHaveBeenCalled()
        }, 0)
    })

    test('should update context and trigger auto transition', () => {
        const result = manager.updateContextAndTransition(
            { isRecording: false },
            'USER_START_RECORDING'
        )

        expect(result).toBeDefined()
        expect(result?.success).toBe(true)
        expect(result?.newState).toBe('recording_waiting')
    })
})

describe('createStateMachine', () => {
    test('should create state machine manager', () => {
        const initialContext: StateTransitionContext = {
            currentState: 'default',
            isRecording: false,
            transcriptCount: 0,
            session: null,
            error: null,
        }

        const manager = createStateMachine(initialContext)
        expect(manager).toBeInstanceOf(StateMachineManager)

        const stateMachine = manager.getStateMachine()
        expect(stateMachine.getCurrentState()).toBe('default')
    })
})


# END FILE CONTENTS


# File: frontend/components/ui/toast.tsx

"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}


# END FILE CONTENTS


# File: frontend/components/ui/toggle-group.tsx

"use client"

import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }


# END FILE CONTENTS


# File: frontend/components/ui/separator.tsx

"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }


# END FILE CONTENTS


# File: docs/traceback-debug-spec.md

# StudyScriber API 500 例外 Traceback 行為說明

## 功能說明

當 API 發生未捕捉的 500 例外（Internal Server Error）時，系統會根據環境設定自動決定是否在回應中顯示詳細 Python traceback：

- **開發環境（settings.DEBUG = True）**：
  - API 回應會多一個 `traceback` 欄位，內含完整 Python 錯誤堆疊資訊，方便除錯。
- **正式環境（settings.DEBUG = False）**：
  - API 回應不會顯示 traceback，僅回傳一般錯誤訊息，避免洩漏內部細節。

## 設定方法

1. 編輯 `.env` 或 `.env.local` 檔案，加入：

   ```
   DEBUG=true
   ```

2. 或於啟動時以環境變數指定：

   ```sh
   export DEBUG=true
   uvicorn main:fastapi_app --reload --port 8000
   ```

3. 預設正式環境（未設 DEBUG 或設為 false）不會顯示 traceback。

## 注意事項

- 只有未捕捉的 Exception 會進入全域例外處理並顯示 traceback。
- 常見 HTTPException、驗證錯誤等，仍由 FastAPI 預設處理，不會顯示 traceback。
- 請勿在正式環境開啟 DEBUG=true，以免洩漏敏感資訊。

---

如需強制測試 traceback，可於任一 API 端點內 raise Exception 觀察效果。 


# END FILE CONTENTS


# File: frontend/hooks/use-app-state-adapter.ts

"use client"

import { useAppState as useAppStateLegacy } from './use-app-state'
import { useAppStateNew } from './use-app-state-new'
import { isFeatureEnabled } from '../lib/feature-flags'
import type { AppData } from '../types/app-state'

// 統一的 UseAppState 介面
interface UseAppStateReturn {
    // 應用狀態
    appData: AppData
    isLoading: boolean
    error: string | null

    // 會話管理
    createNoteSession: (title?: string) => Promise<void>
    createRecordingSession: (title?: string) => Promise<void>
    upgradeToRecording: () => Promise<void>
    finishSession: () => Promise<void>
    newNote: () => Promise<void>

    // 錄音控制
    startRecording: (title?: string) => Promise<void>
    stopRecording: () => Promise<void>

    // 本地草稿
    saveLocalDraft: (content: string) => void

    // 外部狀態
    session: any
    sessionLoading: boolean
    sessionError: string | null

    // 錄音狀態
    recordingError: string | null

    // 逐字稿狀態
    transcriptConnected: boolean
    transcriptError: string | null
    transcriptAutoScroll: boolean
    enableAutoScroll: () => void
    disableAutoScroll: () => void
    scrollToLatest: () => void
}

/**
 * useAppState 適配器 Hook
 * 根據功能開關決定使用新舊版本的 useAppState
 * 確保 API 完全相容，現有組件無需修改
 */
export function useAppState(): UseAppStateReturn {
    const useNewAppStateHook = isFeatureEnabled('useNewAppStateHook')
    const useNewStateManagement = isFeatureEnabled('useNewStateManagement')

    console.log('🔄 [useAppStateAdapter] 功能開關狀態:', {
        useNewAppStateHook,
        useNewStateManagement,
        willUseNewVersion: useNewAppStateHook || useNewStateManagement
    })

    // 如果啟用新 AppState Hook 或新狀態管理，使用新版本
    if (useNewAppStateHook || useNewStateManagement) {
        console.log('🔄 [useAppStateAdapter] 使用新版本 useAppStateNew')
        return useAppStateNew()
    }

    // 否則使用舊版本
    console.log('🔄 [useAppStateAdapter] 使用舊版本 useAppState')
    return useAppStateLegacy()
}

// 導出舊版本供直接使用（用於測試或特殊情況）
export { useAppState as useAppStateLegacy } from './use-app-state'
export { useAppStateNew } from './use-app-state-new'


# END FILE CONTENTS


# File: app/api/notes.py

"""
StudyScriber Notes 管理 API 端點

實作筆記儲存、自動儲存與 UPSERT 邏輯
"""

from datetime import datetime
from uuid import UUID
from fastapi import APIRouter, Depends, HTTPException, status
from supabase import Client
import json

from app.db.database import get_supabase_client
from app.schemas.note import (
    NoteSaveRequest, NoteOut, NoteSaveResponse, NoteConflictError
)

# 建立路由器
router = APIRouter(prefix="/api", tags=["筆記管理"])


@router.put("/notes/{session_id}", response_model=NoteSaveResponse)
async def save_note(
    session_id: UUID,
    request: NoteSaveRequest,
    supabase: Client = Depends(get_supabase_client)
) -> NoteSaveResponse:
    """
    儲存筆記內容 (B-003)

    - 實作 UPSERT 邏輯：有則更新，無則建立
    - 時間戳管理：檢查客戶端時間戳避免覆蓋較新內容
    - 權限檢查：確保會話存在且可編輯
    - 自動更新會話的 updated_at 時間戳
    """
    try:
        # 檢查會話是否存在且可編輯
        session = await _ensure_session_editable(supabase, session_id)

        # 檢查是否已存在筆記
        existing_note = await _get_existing_note(supabase, session_id)

        if existing_note:
            # 更新現有筆記
            updated_note = await _update_note(supabase, existing_note, request)
        else:
            # 建立新筆記
            updated_note = await _create_note(supabase, session_id, request)

        # 更新會話時間戳
        await _update_session_timestamp(supabase, session_id)

        # 準備時間戳
        server_ts = datetime.fromisoformat(updated_note['updated_at'].replace('Z', '+00:00')) if 'Z' in updated_note['updated_at'] else datetime.fromisoformat(updated_note['updated_at'])

        return NoteSaveResponse(
            success=True,
            message="筆記已成功儲存",
            server_ts=server_ts,
            note=NoteOut.model_validate(updated_note)
        )

    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail={"error": "internal_error", "message": f"儲存筆記時發生錯誤: {str(e)}"}
        )


@router.get("/notes/{session_id}", response_model=NoteOut)
async def get_note(
    session_id: UUID,
    supabase: Client = Depends(get_supabase_client)
) -> NoteOut:
    """
    取得筆記內容

    - 用於前端載入現有筆記
    - 如果筆記不存在則返回空白筆記
    """
    try:
        # 檢查會話是否存在
        await _ensure_session_exists(supabase, session_id)

        # 查詢筆記
        note = await _get_existing_note(supabase, session_id)

        if not note:
            # 如果筆記不存在，返回空白筆記
            note = {
                'session_id': str(session_id),
                'content': "",
                'updated_at': datetime.utcnow().isoformat(),
                'client_ts': None
            }

        return NoteOut.model_validate(note)

    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail={"error": "internal_error", "message": f"取得筆記時發生錯誤: {str(e)}"}
        )


# 私有輔助函式

async def _ensure_session_exists(supabase: Client, session_id: UUID) -> dict:
    """確保會話存在"""
    response = supabase.table("sessions").select("*").eq("id", str(session_id)).limit(1).execute()

    if not response.data:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail={"error": "session_not_found", "message": "指定的會話不存在"}
        )

    return response.data[0]


async def _ensure_session_editable(supabase: Client, session_id: UUID) -> dict:
    """確保會話存在且可編輯"""
    session = await _ensure_session_exists(supabase, session_id)

    # 檢查會話狀態是否允許編輯
    if session.get('status') == 'error':
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail={
                "error": "session_not_editable",
                "message": f"會話狀態為 {session.get('status')}，無法編輯筆記"
            }
        )

    return session


async def _get_existing_note(supabase: Client, session_id: UUID) -> dict | None:
    """取得現有筆記"""
    response = supabase.table("notes").select("id, session_id, content, client_ts, created_at, updated_at").eq("session_id", str(session_id)).limit(1).execute()

    return response.data[0] if response.data else None


async def _update_note(supabase: Client, note: dict, request: NoteSaveRequest) -> dict:
    """更新現有筆記"""
    # 檢查時間戳衝突（如果提供客戶端時間戳）
    if request.client_ts:
        note_updated_at = datetime.fromisoformat(note['updated_at'].replace('Z', '+00:00'))
        if note_updated_at > request.client_ts:
            # 準備伺服器端筆記資料
            server_note_data = {
                'session_id': str(note['session_id']),
                'content': note['content'],
                'updated_at': note_updated_at,
                'client_ts': note.get('client_ts')
            }

            # 建立錯誤物件
            conflict_error = NoteConflictError(
                message="客戶端筆記版本較舊，請重新載入最新版本",
                server_note=NoteOut.model_validate(server_note_data),
                client_ts=request.client_ts,
                server_ts=note_updated_at
            )

            # 使用 model_dump_json 確保完全序列化
            error_detail_str = conflict_error.model_dump_json()
            error_detail = json.loads(error_detail_str)

            raise HTTPException(
                status_code=status.HTTP_409_CONFLICT,
                detail=error_detail
            )

    # 更新筆記內容
    update_data = {
        'content': request.content,
        'client_ts': request.client_ts.isoformat() if request.client_ts else None,
        'updated_at': datetime.utcnow().isoformat()
    }

    response = supabase.table("notes").update(update_data).eq("session_id", str(note['session_id'])).execute()

    if not response.data:
        raise HTTPException(status_code=500, detail="無法更新筆記")

    return response.data[0]


async def _create_note(supabase: Client, session_id: UUID, request: NoteSaveRequest) -> dict:
    """建立新筆記"""
    current_time = datetime.utcnow().isoformat()
    note_data = {
        'session_id': str(session_id),
        'content': request.content,
        'client_ts': request.client_ts.isoformat() if request.client_ts else None,
        'updated_at': current_time
    }

    response = supabase.table("notes").insert(note_data).execute()

    if not response.data:
        raise HTTPException(status_code=500, detail="無法建立筆記")

    return response.data[0]


async def _update_session_timestamp(supabase: Client, session_id: UUID) -> None:
    """更新會話時間戳"""
    update_data = {
        'updated_at': datetime.utcnow().isoformat()
    }

    supabase.table("sessions").update(update_data).eq("id", str(session_id)).execute()


# END FILE CONTENTS


# File: app/db/database.py

"""
StudyScriber Supabase 資料庫連接配置

專為 Supabase PostgreSQL 設計的資料庫連接模組
使用 Supabase 客戶端 API 進行資料庫操作
"""
import logging
from .supabase_config import get_supabase_client

# 設置日誌
logger = logging.getLogger(__name__)

def get_supabase_db():
    """
    取得 Supabase 客戶端的依賴注入函式。

    取代舊的 get_async_session 和 get_database_session_safe。
    用於 FastAPI 的 Depends()。
    """
    return get_supabase_client()

async def check_database_connection():
    """
    檢查 Supabase 資料庫連接狀態
    """
    try:
        client = get_supabase_client()
        # 嘗試執行一個簡單的查詢
        client.table('sessions').select("id").limit(1).execute()
        logger.info("✅ Supabase 資料庫連接正常")
        return True
    except Exception as e:
        logger.error(f"❌ Supabase 資料庫連接失敗: {e}")
        logger.error("💡 請檢查 SUPABASE_URL 和 SUPABASE_KEY 環境變數")
        return False

async def check_tables_exist() -> bool:
    """
    檢查所有必要的 Supabase 資料庫表格是否存在

    Returns:
        bool: 如果所有表格都存在則回傳 True，否則回傳 False
    """
    required_tables = [
        'sessions',
        'audio_files',
        'transcript_segments',
        'transcripts',
        'notes'
    ]
    client = get_supabase_client()

    try:
        for table_name in required_tables:
            try:
                # 嘗試查詢表格來檢查是否存在
                client.table(table_name).select("id", head=True).limit(1).execute()
                logger.info(f"✅ 表格 '{table_name}' 存在且可訪問")
            except Exception:
                logger.error(f"❌ 表格 '{table_name}' 不存在或無法訪問。")
                return False
        logger.info("✅ 所有核心表格都存在")
        return True
    except Exception as e:
        logger.error(f"❌ 檢查表格時發生錯誤: {e}")
        return False

async def auto_init_database():
    """
    自動檢測並初始化 Supabase 資料庫

    檢查表格是否存在，如果不存在則提示使用者手動執行 SQL 腳本
    """
    logger.info("🔍 檢查 Supabase 資料庫表格狀態...")

    if await check_tables_exist():
        logger.info("✅ Supabase 資料庫表格已存在，跳過初始化")
        return

    logger.warning("🚧 偵測到缺失的表格")
    logger.warning("📋 請在 Supabase Dashboard 的 SQL Editor 中執行以下腳本：")
    logger.warning("   app/db/supabase_init.sql")
    logger.warning("💡 或參考 README.md 中的詳細設定指南")

    raise RuntimeError(
        "資料庫表格尚未建立。請在 Supabase Dashboard 中執行 app/db/supabase_init.sql 腳本。"
    )

# 為了兼容舊的命名，保留一個別名
get_supabase_client_safe = get_supabase_db

# 新增：回傳目前資料庫模式（Supabase 固定）

def get_database_mode() -> str:
    """取得目前資料庫連線模式。"""
    return "supabase"


async def get_database_stats() -> dict:
    """取得 Supabase 資料庫統計資訊（簡易占位實作）。"""
    # 在完整實作中可以呼叫 Supabase RPC 或資訊視圖
    return {
        "tables": "unknown",
        "status": "placeholder",
    }


# END FILE CONTENTS


# File: app/services/azure_whisper.py

import logging
import tempfile
from datetime import datetime
from pathlib import Path
from uuid import UUID
from typing import Any, Dict, Optional

from openai import AsyncAzureOpenAI
from httpx import Timeout
from app.core.config import settings

__all__ = ["AzureWhisperService", "PerformanceTimer"]

logger = logging.getLogger(__name__)

class PerformanceTimer:
    """效能計時器"""
    def __init__(self, operation_name: str):
        self.operation_name = operation_name
        self.start_time = None
        self.end_time = None

    def __enter__(self):
        import time
        self.start_time = time.time()
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        import time
        self.end_time = time.time()
        duration = self.get_duration()
        if duration > 1.0:
            logger.warning(f"⚠️  {self.operation_name} took {duration:.2f}s (slow)")
        else:
            logger.info(f"⏱️  {self.operation_name} completed in {duration:.2f}s")

    def get_duration(self) -> float:
        if self.start_time and self.end_time:
            return self.end_time - self.start_time
        return 0.0

class AzureWhisperService:
    def __init__(self):
        self.client = AsyncAzureOpenAI(
            api_key=settings.AZURE_OPENAI_API_KEY,
            azure_endpoint=settings.AZURE_OPENAI_ENDPOINT,
            api_version="2024-06-01",
            timeout=Timeout(connect=5, read=55, write=30, pool=5),
            max_retries=2,
        )
        self.deployment = settings.WHISPER_DEPLOYMENT_NAME
        self.language = settings.WHISPER_LANGUAGE

    async def transcribe(self, audio: bytes, session_id: UUID, chunk_seq: int, *, api_language: str, canonical_lang: str) -> Optional[Dict[str, Any]]:
        with PerformanceTimer(f"Whisper chunk {chunk_seq}"):
            with tempfile.NamedTemporaryFile(suffix='.webm', delete=False) as temp_file:
                temp_file.write(audio)
                temp_file.flush()
                logger.info(f"🔎 call whisper: session_id={session_id}, chunk={chunk_seq}, api_lang={api_language}, canonical_lang={canonical_lang}, temp_file={temp_file.name}")
                try:
                    with open(temp_file.name, 'rb') as audio_file:
                        transcript = await self.client.audio.transcriptions.create(
                            model=self.deployment,
                            file=audio_file,
                            language=api_language,
                            response_format="json",
                            temperature=0
                        )
                    # Debug Azure 回傳內容
                    try:
                        import json
                        logger.debug("Whisper raw json ⇒ %s", resp) # type: ignore
                        logger.debug("Whisper raw response: %s", json.dumps(transcript if isinstance(transcript, dict) else transcript.__dict__, ensure_ascii=False, indent=2))
                    except Exception as e:
                        logger.debug("Whisper raw response (fallback): %s", str(transcript))
                        logger.debug("Failed to json.dumps transcript: %s", e)
                    Path(temp_file.name).unlink(missing_ok=True)
                    text = getattr(transcript, "text", None) or (transcript.get("text") if isinstance(transcript, dict) else None)
                    if not text or not text.strip():
                        return None
                    return {
                        "text": text.strip(),
                        "chunk_sequence": chunk_seq,
                        "session_id": str(session_id),
                        "lang_code": canonical_lang,
                        "timestamp": datetime.utcnow().isoformat(),
                    }
                finally:

                    Path(temp_file.name).unlink(missing_ok=True)


# END FILE CONTENTS


# File: .gptree_config

# GPTree Local Config
version: 2

# Whether to use .gitignore
useGitIgnore: true
# File types to include (e.g., .py,.js)
includeFileTypes: *
# File types to exclude when includeFileTypes is '*'
excludeFileTypes: 
# Output file name
outputFile: gptree_output.txt
# Whether to output the file locally or relative to the project directory
outputFileLocally: true
# Whether to copy the output to the clipboard
copyToClipboard: false
# Whether to use safe mode (prevent overly large files from being combined)
safeMode: true
# Whether to store the files chosen in the config file (--save, -s)
storeFilesChosen: true
# Whether to include line numbers in the output (--line-numbers, -n)
lineNumbers: false
# Whether to show ignored files in the directory tree
showIgnoredInTree: false
# Whether to show only default ignored files in the directory tree while still respecting gitignore
showDefaultIgnoredInTree: false
# Previously selected files (when using the -s or --save flag previously)
previousFiles: 


# END FILE CONTENTS


# File: app/services/stt/factory.py

# app/services/stt/factory.py
from __future__ import annotations

import logging
from typing import Dict, Type
from uuid import UUID

from app.db.database import get_supabase_client
from app.services.stt.interfaces import ISTTProvider
from app.services.stt.whisper_provider import WhisperProvider
from app.services.stt.gpt4o_provider import GPT4oProvider
from app.services.stt.gemini_provider import GeminiProvider
from app.core.config import get_settings

logger = logging.getLogger(__name__)

settings = get_settings()
# ------------------------------------------------------------------
# 1. provider singleton cache
# ------------------------------------------------------------------
_provider_cache: Dict[str, ISTTProvider] = {}


def _instance(cls: Type[ISTTProvider]) -> ISTTProvider:
    """
    lazy singleton per provider class
    Provider 類別必須有 `name` class 屬性 (str)
    """
    if cls.name not in _provider_cache:
        _provider_cache[cls.name] = cls()
    return _provider_cache[cls.name]


# ------------------------------------------------------------------
# 2. public API
# ------------------------------------------------------------------
def get_provider(session_id: UUID) -> ISTTProvider:
    """
    根據 sessions.stt_provider 欄位，回傳對應 ISTTProvider 物件。
    預設 whisper。
    """
    supa = get_supabase_client()
    row = (
        supa.table("sessions")
        .select("stt_provider")
        .eq("id", str(session_id))
        .single()
        .execute()
    )

    provider_code: str = (
    row.data or {}
).get("stt_provider", settings.STT_PROVIDER_DEFAULT).lower()

    match provider_code:
        case "gpt4o" | "gpt-4o":
            return _instance(GPT4oProvider)
        case "gemini" | "google_gemini":
            return _instance(GeminiProvider)
        case "whisper" | _:
            # 包含 None / 空字串 → whisper
            return _instance(WhisperProvider)


# END FILE CONTENTS


# File: frontend/components/ui/carousel.tsx

"use client"

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}


# END FILE CONTENTS


# File: frontend/hooks/use-recording-adapter.ts

"use client"

import { useRecording as useRecordingLegacy } from './use-recording'
import { useRecordingNew } from './use-recording-new'
import { isFeatureEnabled } from '../lib/feature-flags'
import { TranscriptMessage } from '../lib/transcript-manager'

// 統一的 UseRecording 介面
interface UseRecordingReturn {
    isRecording: boolean
    recordingTime: number
    transcripts: TranscriptMessage[]
    transcriptCompleted: boolean
    error: string | null
    startRecording: (sessionId: string) => Promise<void>
    stopRecording: () => void
    clearTranscripts: () => void
}

/**
 * useRecording 適配器 Hook
 * 根據功能開關決定使用新舊版本的 useRecording
 * 確保 API 完全相容，現有組件無需修改
 */
export function useRecording(): UseRecordingReturn {
    const useNewRecordingHook = isFeatureEnabled('useNewRecordingHook')
    const useNewStateManagement = isFeatureEnabled('useNewStateManagement')

    console.log('🔄 [useRecordingAdapter] 功能開關狀態:', {
        useNewRecordingHook,
        useNewStateManagement,
        willUseNewVersion: useNewRecordingHook || useNewStateManagement
    })

    // 如果啟用新 Recording Hook 或新狀態管理，使用新版本
    if (useNewRecordingHook || useNewStateManagement) {
        console.log('🔄 [useRecordingAdapter] 使用新版本 useRecordingNew')
        return useRecordingNew()
    }

    // 否則使用舊版本
    console.log('🔄 [useRecordingAdapter] 使用舊版本 useRecording')
    return useRecordingLegacy()
}

// 導出舊版本供直接使用（用於測試或特殊情況）
export { useRecording as useRecordingLegacy } from './use-recording'
export { useRecordingNew } from './use-recording-new'


# END FILE CONTENTS


# File: frontend/components/ui/sheet.tsx

"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}


# END FILE CONTENTS


# File: frontend/lib/services/__tests__/simple-recording-service.test.ts

import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest'
import { SimpleRecordingService } from '../simple-recording-service'

// Mock AdvancedAudioRecorder
vi.mock('../../advanced-audio-recorder', () => ({
    AdvancedAudioRecorder: vi.fn().mockImplementation(() => ({
        start: vi.fn(),
        stop: vi.fn(),
        cleanup: vi.fn(),
        onSegment: vi.fn(),
        onError: vi.fn(),
    }))
}))

// Mock RestAudioUploader
vi.mock('../rest-audio-uploader', () => ({
    RestAudioUploader: vi.fn().mockImplementation(() => ({
        uploadSegment: vi.fn(),
        retryFailedSegments: vi.fn(),
        getCachedSegmentsCount: vi.fn(),
        cleanup: vi.fn(),
        onUploadSuccess: vi.fn(),
        onUploadError: vi.fn(),
        onCacheStored: vi.fn(),
    }))
}))

describe('SimpleRecordingService', () => {
    let service: SimpleRecordingService
    let mockStream: MediaStream
    let origGetUserMedia: any

    beforeEach(() => {
        service = new SimpleRecordingService()
        mockStream = { getTracks: vi.fn() } as any
        origGetUserMedia = navigator.mediaDevices.getUserMedia
        navigator.mediaDevices.getUserMedia = vi.fn().mockResolvedValue(mockStream)
    })

    afterEach(() => {
        vi.restoreAllMocks()
        navigator.mediaDevices.getUserMedia = origGetUserMedia
    })

    it('應該正確初始化 audioRecorder 與 audioUploader 並開始錄音', async () => {
        await service.startRecording('test-session')
        // audioRecorder, audioUploader 應被建立
        expect(service['audioRecorder']).toBeDefined()
        expect(service['audioUploader']).toBeDefined()
        expect(service['recordingState'].isRecording).toBe(true)
    })

    it('應該處理麥克風權限不足', async () => {
        navigator.mediaDevices.getUserMedia = vi.fn().mockRejectedValue(new Error('Permission denied'))
        await expect(service.startRecording('fail-session')).rejects.toThrow('Permission denied')
        expect(service['audioRecorder']).toBeNull()
        expect(service['audioUploader']).toBeNull()
        expect(service['recordingState'].isRecording).toBe(false)
        expect(service['recordingState'].error).toMatch(/Permission denied/)
    })

    it('應該處理初始化失敗', async () => {
        // 模擬 stream 存在但 initMediaRecorder 失敗
        service['stream'] = mockStream
        service['sessionId'] = 'fail-session'
        // 強制讓 initMediaRecorder 拋出錯誤
        service['initMediaRecorder'] = vi.fn().mockImplementation(() => { throw new Error('Init failed') })
        await expect(service.startRecording('fail-session')).rejects.toThrow('Init failed')
        expect(service['audioRecorder']).toBeNull()
        expect(service['audioUploader']).toBeNull()
        expect(service['recordingState'].isRecording).toBe(false)
        expect(service['recordingState'].error).toMatch(/Init failed/)
    })

    it('應該處理重複啟動錄音', async () => {
        await service.startRecording('session-1')
        // 再次啟動錄音
        service['stopRecording'] = vi.fn().mockResolvedValue(undefined)
        await service.startRecording('session-2')
        expect(service['stopRecording']).toHaveBeenCalled()
        expect(service['audioRecorder']).toBeDefined()
        expect(service['audioUploader']).toBeDefined()
        expect(service['recordingState'].isRecording).toBe(true)
        expect(service['recordingState'].currentSessionId).toBe('session-2')
    })
})


# END FILE CONTENTS


# File: frontend/components/recording-state.tsx

"use client"

import { RecordingWaitingState } from "./recording-waiting-state"
import { RecordingActiveState } from "./recording-active-state"
import type { TranscriptEntry } from "../types/app-state"

interface RecordingStateProps {
  transcriptEntries: TranscriptEntry[]
  recordingTime: number
  onStopRecording: () => void
  error?: string | null
}

export function RecordingState({ transcriptEntries, recordingTime, onStopRecording, error }: RecordingStateProps) {
  if (transcriptEntries.length === 0) {
    return (
      <RecordingWaitingState
        recordingTime={recordingTime}
        onStopRecording={onStopRecording}
        transcriptEntries={transcriptEntries}
        error={error}
      />
    )
  }
  return (
    <RecordingActiveState
      transcriptEntries={transcriptEntries}
      recordingTime={recordingTime}
      onStopRecording={onStopRecording}
    />
  )
}


# END FILE CONTENTS


# File: uv.lock

version = 1
revision = 2
requires-python = ">=3.12"
resolution-markers = [
    "python_full_version >= '3.13'",
    "python_full_version < '3.13'",
]

[[package]]
name = "aiofiles"
version = "24.1.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/0b/03/a88171e277e8caa88a4c77808c20ebb04ba74cc4681bf1e9416c862de237/aiofiles-24.1.0.tar.gz", hash = "sha256:22a075c9e5a3810f0c2e48f3008c94d68c65d763b9b03857924c99e57355166c", size = 30247, upload-time = "2024-06-24T11:02:03.584Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/a5/45/30bb92d442636f570cb5651bc661f52b610e2eec3f891a5dc3a4c3667db0/aiofiles-24.1.0-py3-none-any.whl", hash = "sha256:b4ec55f4195e3eb5d7abd1bf7e061763e864dd4954231fb8539a0ef8bb8260e5", size = 15896, upload-time = "2024-06-24T11:02:01.529Z" },
]

[[package]]
name = "aiohappyeyeballs"
version = "2.6.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/26/30/f84a107a9c4331c14b2b586036f40965c128aa4fee4dda5d3d51cb14ad54/aiohappyeyeballs-2.6.1.tar.gz", hash = "sha256:c3f9d0113123803ccadfdf3f0faa505bc78e6a72d1cc4806cbd719826e943558", size = 22760, upload-time = "2025-03-12T01:42:48.764Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/0f/15/5bf3b99495fb160b63f95972b81750f18f7f4e02ad051373b669d17d44f2/aiohappyeyeballs-2.6.1-py3-none-any.whl", hash = "sha256:f349ba8f4b75cb25c99c5c2d84e997e485204d2902a9597802b0371f09331fb8", size = 15265, upload-time = "2025-03-12T01:42:47.083Z" },
]

[[package]]
name = "aiohttp"
version = "3.12.13"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "aiohappyeyeballs" },
    { name = "aiosignal" },
    { name = "attrs" },
    { name = "frozenlist" },
    { name = "multidict" },
    { name = "propcache" },
    { name = "yarl" },
]
sdist = { url = "https://files.pythonhosted.org/packages/42/6e/ab88e7cb2a4058bed2f7870276454f85a7c56cd6da79349eb314fc7bbcaa/aiohttp-3.12.13.tar.gz", hash = "sha256:47e2da578528264a12e4e3dd8dd72a7289e5f812758fe086473fab037a10fcce", size = 7819160, upload-time = "2025-06-14T15:15:41.354Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/b4/6a/ce40e329788013cd190b1d62bbabb2b6a9673ecb6d836298635b939562ef/aiohttp-3.12.13-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:0aa580cf80558557285b49452151b9c69f2fa3ad94c5c9e76e684719a8791b73", size = 700491, upload-time = "2025-06-14T15:14:00.048Z" },
    { url = "https://files.pythonhosted.org/packages/28/d9/7150d5cf9163e05081f1c5c64a0cdf3c32d2f56e2ac95db2a28fe90eca69/aiohttp-3.12.13-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:b103a7e414b57e6939cc4dece8e282cfb22043efd0c7298044f6594cf83ab347", size = 475104, upload-time = "2025-06-14T15:14:01.691Z" },
    { url = "https://files.pythonhosted.org/packages/f8/91/d42ba4aed039ce6e449b3e2db694328756c152a79804e64e3da5bc19dffc/aiohttp-3.12.13-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:78f64e748e9e741d2eccff9597d09fb3cd962210e5b5716047cbb646dc8fe06f", size = 467948, upload-time = "2025-06-14T15:14:03.561Z" },
    { url = "https://files.pythonhosted.org/packages/99/3b/06f0a632775946981d7c4e5a865cddb6e8dfdbaed2f56f9ade7bb4a1039b/aiohttp-3.12.13-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:29c955989bf4c696d2ededc6b0ccb85a73623ae6e112439398935362bacfaaf6", size = 1714742, upload-time = "2025-06-14T15:14:05.558Z" },
    { url = "https://files.pythonhosted.org/packages/92/a6/2552eebad9ec5e3581a89256276009e6a974dc0793632796af144df8b740/aiohttp-3.12.13-cp312-cp312-manylinux_2_17_armv7l.manylinux2014_armv7l.manylinux_2_31_armv7l.whl", hash = "sha256:d640191016763fab76072c87d8854a19e8e65d7a6fcfcbf017926bdbbb30a7e5", size = 1697393, upload-time = "2025-06-14T15:14:07.194Z" },
    { url = "https://files.pythonhosted.org/packages/d8/9f/bd08fdde114b3fec7a021381b537b21920cdd2aa29ad48c5dffd8ee314f1/aiohttp-3.12.13-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:4dc507481266b410dede95dd9f26c8d6f5a14315372cc48a6e43eac652237d9b", size = 1752486, upload-time = "2025-06-14T15:14:08.808Z" },
    { url = "https://files.pythonhosted.org/packages/f7/e1/affdea8723aec5bd0959171b5490dccd9a91fcc505c8c26c9f1dca73474d/aiohttp-3.12.13-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:8a94daa873465d518db073bd95d75f14302e0208a08e8c942b2f3f1c07288a75", size = 1798643, upload-time = "2025-06-14T15:14:10.767Z" },
    { url = "https://files.pythonhosted.org/packages/f3/9d/666d856cc3af3a62ae86393baa3074cc1d591a47d89dc3bf16f6eb2c8d32/aiohttp-3.12.13-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:177f52420cde4ce0bb9425a375d95577fe082cb5721ecb61da3049b55189e4e6", size = 1718082, upload-time = "2025-06-14T15:14:12.38Z" },
    { url = "https://files.pythonhosted.org/packages/f3/ce/3c185293843d17be063dada45efd2712bb6bf6370b37104b4eda908ffdbd/aiohttp-3.12.13-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:0f7df1f620ec40f1a7fbcb99ea17d7326ea6996715e78f71a1c9a021e31b96b8", size = 1633884, upload-time = "2025-06-14T15:14:14.415Z" },
    { url = "https://files.pythonhosted.org/packages/3a/5b/f3413f4b238113be35dfd6794e65029250d4b93caa0974ca572217745bdb/aiohttp-3.12.13-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:3062d4ad53b36e17796dce1c0d6da0ad27a015c321e663657ba1cc7659cfc710", size = 1694943, upload-time = "2025-06-14T15:14:16.48Z" },
    { url = "https://files.pythonhosted.org/packages/82/c8/0e56e8bf12081faca85d14a6929ad5c1263c146149cd66caa7bc12255b6d/aiohttp-3.12.13-cp312-cp312-musllinux_1_2_armv7l.whl", hash = "sha256:8605e22d2a86b8e51ffb5253d9045ea73683d92d47c0b1438e11a359bdb94462", size = 1716398, upload-time = "2025-06-14T15:14:18.589Z" },
    { url = "https://files.pythonhosted.org/packages/ea/f3/33192b4761f7f9b2f7f4281365d925d663629cfaea093a64b658b94fc8e1/aiohttp-3.12.13-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:54fbbe6beafc2820de71ece2198458a711e224e116efefa01b7969f3e2b3ddae", size = 1657051, upload-time = "2025-06-14T15:14:20.223Z" },
    { url = "https://files.pythonhosted.org/packages/5e/0b/26ddd91ca8f84c48452431cb4c5dd9523b13bc0c9766bda468e072ac9e29/aiohttp-3.12.13-cp312-cp312-musllinux_1_2_ppc64le.whl", hash = "sha256:050bd277dfc3768b606fd4eae79dd58ceda67d8b0b3c565656a89ae34525d15e", size = 1736611, upload-time = "2025-06-14T15:14:21.988Z" },
    { url = "https://files.pythonhosted.org/packages/c3/8d/e04569aae853302648e2c138a680a6a2f02e374c5b6711732b29f1e129cc/aiohttp-3.12.13-cp312-cp312-musllinux_1_2_s390x.whl", hash = "sha256:2637a60910b58f50f22379b6797466c3aa6ae28a6ab6404e09175ce4955b4e6a", size = 1764586, upload-time = "2025-06-14T15:14:23.979Z" },
    { url = "https://files.pythonhosted.org/packages/ac/98/c193c1d1198571d988454e4ed75adc21c55af247a9fda08236602921c8c8/aiohttp-3.12.13-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:e986067357550d1aaa21cfe9897fa19e680110551518a5a7cf44e6c5638cb8b5", size = 1724197, upload-time = "2025-06-14T15:14:25.692Z" },
    { url = "https://files.pythonhosted.org/packages/e7/9e/07bb8aa11eec762c6b1ff61575eeeb2657df11ab3d3abfa528d95f3e9337/aiohttp-3.12.13-cp312-cp312-win32.whl", hash = "sha256:ac941a80aeea2aaae2875c9500861a3ba356f9ff17b9cb2dbfb5cbf91baaf5bf", size = 421771, upload-time = "2025-06-14T15:14:27.364Z" },
    { url = "https://files.pythonhosted.org/packages/52/66/3ce877e56ec0813069cdc9607cd979575859c597b6fb9b4182c6d5f31886/aiohttp-3.12.13-cp312-cp312-win_amd64.whl", hash = "sha256:671f41e6146a749b6c81cb7fd07f5a8356d46febdaaaf07b0e774ff04830461e", size = 447869, upload-time = "2025-06-14T15:14:29.05Z" },
    { url = "https://files.pythonhosted.org/packages/11/0f/db19abdf2d86aa1deec3c1e0e5ea46a587b97c07a16516b6438428b3a3f8/aiohttp-3.12.13-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:d4a18e61f271127465bdb0e8ff36e8f02ac4a32a80d8927aa52371e93cd87938", size = 694910, upload-time = "2025-06-14T15:14:30.604Z" },
    { url = "https://files.pythonhosted.org/packages/d5/81/0ab551e1b5d7f1339e2d6eb482456ccbe9025605b28eed2b1c0203aaaade/aiohttp-3.12.13-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:532542cb48691179455fab429cdb0d558b5e5290b033b87478f2aa6af5d20ace", size = 472566, upload-time = "2025-06-14T15:14:32.275Z" },
    { url = "https://files.pythonhosted.org/packages/34/3f/6b7d336663337672d29b1f82d1f252ec1a040fe2d548f709d3f90fa2218a/aiohttp-3.12.13-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:d7eea18b52f23c050ae9db5d01f3d264ab08f09e7356d6f68e3f3ac2de9dfabb", size = 464856, upload-time = "2025-06-14T15:14:34.132Z" },
    { url = "https://files.pythonhosted.org/packages/26/7f/32ca0f170496aa2ab9b812630fac0c2372c531b797e1deb3deb4cea904bd/aiohttp-3.12.13-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:ad7c8e5c25f2a26842a7c239de3f7b6bfb92304593ef997c04ac49fb703ff4d7", size = 1703683, upload-time = "2025-06-14T15:14:36.034Z" },
    { url = "https://files.pythonhosted.org/packages/ec/53/d5513624b33a811c0abea8461e30a732294112318276ce3dbf047dbd9d8b/aiohttp-3.12.13-cp313-cp313-manylinux_2_17_armv7l.manylinux2014_armv7l.manylinux_2_31_armv7l.whl", hash = "sha256:6af355b483e3fe9d7336d84539fef460120c2f6e50e06c658fe2907c69262d6b", size = 1684946, upload-time = "2025-06-14T15:14:38Z" },
    { url = "https://files.pythonhosted.org/packages/37/72/4c237dd127827b0247dc138d3ebd49c2ded6114c6991bbe969058575f25f/aiohttp-3.12.13-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:a95cf9f097498f35c88e3609f55bb47b28a5ef67f6888f4390b3d73e2bac6177", size = 1737017, upload-time = "2025-06-14T15:14:39.951Z" },
    { url = "https://files.pythonhosted.org/packages/0d/67/8a7eb3afa01e9d0acc26e1ef847c1a9111f8b42b82955fcd9faeb84edeb4/aiohttp-3.12.13-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:b8ed8c38a1c584fe99a475a8f60eefc0b682ea413a84c6ce769bb19a7ff1c5ef", size = 1786390, upload-time = "2025-06-14T15:14:42.151Z" },
    { url = "https://files.pythonhosted.org/packages/48/19/0377df97dd0176ad23cd8cad4fd4232cfeadcec6c1b7f036315305c98e3f/aiohttp-3.12.13-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:7a0b9170d5d800126b5bc89d3053a2363406d6e327afb6afaeda2d19ee8bb103", size = 1708719, upload-time = "2025-06-14T15:14:44.039Z" },
    { url = "https://files.pythonhosted.org/packages/61/97/ade1982a5c642b45f3622255173e40c3eed289c169f89d00eeac29a89906/aiohttp-3.12.13-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:372feeace612ef8eb41f05ae014a92121a512bd5067db8f25101dd88a8db11da", size = 1622424, upload-time = "2025-06-14T15:14:45.945Z" },
    { url = "https://files.pythonhosted.org/packages/99/ab/00ad3eea004e1d07ccc406e44cfe2b8da5acb72f8c66aeeb11a096798868/aiohttp-3.12.13-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:a946d3702f7965d81f7af7ea8fb03bb33fe53d311df48a46eeca17e9e0beed2d", size = 1675447, upload-time = "2025-06-14T15:14:47.911Z" },
    { url = "https://files.pythonhosted.org/packages/3f/fe/74e5ce8b2ccaba445fe0087abc201bfd7259431d92ae608f684fcac5d143/aiohttp-3.12.13-cp313-cp313-musllinux_1_2_armv7l.whl", hash = "sha256:a0c4725fae86555bbb1d4082129e21de7264f4ab14baf735278c974785cd2041", size = 1707110, upload-time = "2025-06-14T15:14:50.334Z" },
    { url = "https://files.pythonhosted.org/packages/ef/c4/39af17807f694f7a267bd8ab1fbacf16ad66740862192a6c8abac2bff813/aiohttp-3.12.13-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:9b28ea2f708234f0a5c44eb6c7d9eb63a148ce3252ba0140d050b091b6e842d1", size = 1649706, upload-time = "2025-06-14T15:14:52.378Z" },
    { url = "https://files.pythonhosted.org/packages/38/e8/f5a0a5f44f19f171d8477059aa5f28a158d7d57fe1a46c553e231f698435/aiohttp-3.12.13-cp313-cp313-musllinux_1_2_ppc64le.whl", hash = "sha256:d4f5becd2a5791829f79608c6f3dc745388162376f310eb9c142c985f9441cc1", size = 1725839, upload-time = "2025-06-14T15:14:54.617Z" },
    { url = "https://files.pythonhosted.org/packages/fd/ac/81acc594c7f529ef4419d3866913f628cd4fa9cab17f7bf410a5c3c04c53/aiohttp-3.12.13-cp313-cp313-musllinux_1_2_s390x.whl", hash = "sha256:60f2ce6b944e97649051d5f5cc0f439360690b73909230e107fd45a359d3e911", size = 1759311, upload-time = "2025-06-14T15:14:56.597Z" },
    { url = "https://files.pythonhosted.org/packages/38/0d/aabe636bd25c6ab7b18825e5a97d40024da75152bec39aa6ac8b7a677630/aiohttp-3.12.13-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:69fc1909857401b67bf599c793f2183fbc4804717388b0b888f27f9929aa41f3", size = 1708202, upload-time = "2025-06-14T15:14:58.598Z" },
    { url = "https://files.pythonhosted.org/packages/1f/ab/561ef2d8a223261683fb95a6283ad0d36cb66c87503f3a7dde7afe208bb2/aiohttp-3.12.13-cp313-cp313-win32.whl", hash = "sha256:7d7e68787a2046b0e44ba5587aa723ce05d711e3a3665b6b7545328ac8e3c0dd", size = 420794, upload-time = "2025-06-14T15:15:00.939Z" },
    { url = "https://files.pythonhosted.org/packages/9d/47/b11d0089875a23bff0abd3edb5516bcd454db3fefab8604f5e4b07bd6210/aiohttp-3.12.13-cp313-cp313-win_amd64.whl", hash = "sha256:5a178390ca90419bfd41419a809688c368e63c86bd725e1186dd97f6b89c2706", size = 446735, upload-time = "2025-06-14T15:15:02.858Z" },
]

[[package]]
name = "aiosignal"
version = "1.3.2"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "frozenlist" },
]
sdist = { url = "https://files.pythonhosted.org/packages/ba/b5/6d55e80f6d8a08ce22b982eafa278d823b541c925f11ee774b0b9c43473d/aiosignal-1.3.2.tar.gz", hash = "sha256:a8c255c66fafb1e499c9351d0bf32ff2d8a0321595ebac3b93713656d2436f54", size = 19424, upload-time = "2024-12-13T17:10:40.86Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/ec/6a/bc7e17a3e87a2985d3e8f4da4cd0f481060eb78fb08596c42be62c90a4d9/aiosignal-1.3.2-py2.py3-none-any.whl", hash = "sha256:45cde58e409a301715980c2b01d0c28bdde3770d8290b5eb2173759d9acb31a5", size = 7597, upload-time = "2024-12-13T17:10:38.469Z" },
]

[[package]]
name = "annotated-types"
version = "0.7.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/ee/67/531ea369ba64dcff5ec9c3402f9f51bf748cec26dde048a2f973a4eea7f5/annotated_types-0.7.0.tar.gz", hash = "sha256:aff07c09a53a08bc8cfccb9c85b05f1aa9a2a6f23728d790723543408344ce89", size = 16081, upload-time = "2024-05-20T21:33:25.928Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/78/b6/6307fbef88d9b5ee7421e68d78a9f162e0da4900bc5f5793f6d3d0e34fb8/annotated_types-0.7.0-py3-none-any.whl", hash = "sha256:1f02e8b43a8fbbc3f3e0d4f0f4bfc8131bcb4eebe8849b8e5c773f3a1c582a53", size = 13643, upload-time = "2024-05-20T21:33:24.1Z" },
]

[[package]]
name = "anyio"
version = "4.9.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "idna" },
    { name = "sniffio" },
    { name = "typing-extensions", marker = "python_full_version < '3.13'" },
]
sdist = { url = "https://files.pythonhosted.org/packages/95/7d/4c1bd541d4dffa1b52bd83fb8527089e097a106fc90b467a7313b105f840/anyio-4.9.0.tar.gz", hash = "sha256:673c0c244e15788651a4ff38710fea9675823028a6f08a5eda409e0c9840a028", size = 190949, upload-time = "2025-03-17T00:02:54.77Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/a1/ee/48ca1a7c89ffec8b6a0c5d02b89c305671d5ffd8d3c94acf8b8c408575bb/anyio-4.9.0-py3-none-any.whl", hash = "sha256:9f76d541cad6e36af7beb62e978876f3b41e3e04f2c1fbf0884604c0a9c4d93c", size = 100916, upload-time = "2025-03-17T00:02:52.713Z" },
]

[[package]]
name = "attrs"
version = "25.3.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/5a/b0/1367933a8532ee6ff8d63537de4f1177af4bff9f3e829baf7331f595bb24/attrs-25.3.0.tar.gz", hash = "sha256:75d7cefc7fb576747b2c81b4442d4d4a1ce0900973527c011d1030fd3bf4af1b", size = 812032, upload-time = "2025-03-13T11:10:22.779Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/77/06/bb80f5f86020c4551da315d78b3ab75e8228f89f0162f2c3a819e407941a/attrs-25.3.0-py3-none-any.whl", hash = "sha256:427318ce031701fea540783410126f03899a97ffc6f61596ad581ac2e40e3bc3", size = 63815, upload-time = "2025-03-13T11:10:21.14Z" },
]

[[package]]
name = "cachetools"
version = "5.5.2"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/6c/81/3747dad6b14fa2cf53fcf10548cf5aea6913e96fab41a3c198676f8948a5/cachetools-5.5.2.tar.gz", hash = "sha256:1a661caa9175d26759571b2e19580f9d6393969e5dfca11fdb1f947a23e640d4", size = 28380, upload-time = "2025-02-20T21:01:19.524Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/72/76/20fa66124dbe6be5cafeb312ece67de6b61dd91a0247d1ea13db4ebb33c2/cachetools-5.5.2-py3-none-any.whl", hash = "sha256:d26a22bcc62eb95c3beabd9f1ee5e820d3d2704fe2967cbe350e20c8ffcd3f0a", size = 10080, upload-time = "2025-02-20T21:01:16.647Z" },
]

[[package]]
name = "certifi"
version = "2025.6.15"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/73/f7/f14b46d4bcd21092d7d3ccef689615220d8a08fb25e564b65d20738e672e/certifi-2025.6.15.tar.gz", hash = "sha256:d747aa5a8b9bbbb1bb8c22bb13e22bd1f18e9796defa16bab421f7f7a317323b", size = 158753, upload-time = "2025-06-15T02:45:51.329Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/84/ae/320161bd181fc06471eed047ecce67b693fd7515b16d495d8932db763426/certifi-2025.6.15-py3-none-any.whl", hash = "sha256:2e0c7ce7cb5d8f8634ca55d2ba7e6ec2689a2fd6537d8dec1296a477a4910057", size = 157650, upload-time = "2025-06-15T02:45:49.977Z" },
]

[[package]]
name = "charset-normalizer"
version = "3.4.2"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/e4/33/89c2ced2b67d1c2a61c19c6751aa8902d46ce3dacb23600a283619f5a12d/charset_normalizer-3.4.2.tar.gz", hash = "sha256:5baececa9ecba31eff645232d59845c07aa030f0c81ee70184a90d35099a0e63", size = 126367, upload-time = "2025-05-02T08:34:42.01Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d7/a4/37f4d6035c89cac7930395a35cc0f1b872e652eaafb76a6075943754f095/charset_normalizer-3.4.2-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:0c29de6a1a95f24b9a1aa7aefd27d2487263f00dfd55a77719b530788f75cff7", size = 199936, upload-time = "2025-05-02T08:32:33.712Z" },
    { url = "https://files.pythonhosted.org/packages/ee/8a/1a5e33b73e0d9287274f899d967907cd0bf9c343e651755d9307e0dbf2b3/charset_normalizer-3.4.2-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:cddf7bd982eaa998934a91f69d182aec997c6c468898efe6679af88283b498d3", size = 143790, upload-time = "2025-05-02T08:32:35.768Z" },
    { url = "https://files.pythonhosted.org/packages/66/52/59521f1d8e6ab1482164fa21409c5ef44da3e9f653c13ba71becdd98dec3/charset_normalizer-3.4.2-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:fcbe676a55d7445b22c10967bceaaf0ee69407fbe0ece4d032b6eb8d4565982a", size = 153924, upload-time = "2025-05-02T08:32:37.284Z" },
    { url = "https://files.pythonhosted.org/packages/86/2d/fb55fdf41964ec782febbf33cb64be480a6b8f16ded2dbe8db27a405c09f/charset_normalizer-3.4.2-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:d41c4d287cfc69060fa91cae9683eacffad989f1a10811995fa309df656ec214", size = 146626, upload-time = "2025-05-02T08:32:38.803Z" },
    { url = "https://files.pythonhosted.org/packages/8c/73/6ede2ec59bce19b3edf4209d70004253ec5f4e319f9a2e3f2f15601ed5f7/charset_normalizer-3.4.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:4e594135de17ab3866138f496755f302b72157d115086d100c3f19370839dd3a", size = 148567, upload-time = "2025-05-02T08:32:40.251Z" },
    { url = "https://files.pythonhosted.org/packages/09/14/957d03c6dc343c04904530b6bef4e5efae5ec7d7990a7cbb868e4595ee30/charset_normalizer-3.4.2-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:cf713fe9a71ef6fd5adf7a79670135081cd4431c2943864757f0fa3a65b1fafd", size = 150957, upload-time = "2025-05-02T08:32:41.705Z" },
    { url = "https://files.pythonhosted.org/packages/0d/c8/8174d0e5c10ccebdcb1b53cc959591c4c722a3ad92461a273e86b9f5a302/charset_normalizer-3.4.2-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:a370b3e078e418187da8c3674eddb9d983ec09445c99a3a263c2011993522981", size = 145408, upload-time = "2025-05-02T08:32:43.709Z" },
    { url = "https://files.pythonhosted.org/packages/58/aa/8904b84bc8084ac19dc52feb4f5952c6df03ffb460a887b42615ee1382e8/charset_normalizer-3.4.2-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:a955b438e62efdf7e0b7b52a64dc5c3396e2634baa62471768a64bc2adb73d5c", size = 153399, upload-time = "2025-05-02T08:32:46.197Z" },
    { url = "https://files.pythonhosted.org/packages/c2/26/89ee1f0e264d201cb65cf054aca6038c03b1a0c6b4ae998070392a3ce605/charset_normalizer-3.4.2-cp312-cp312-musllinux_1_2_ppc64le.whl", hash = "sha256:7222ffd5e4de8e57e03ce2cef95a4c43c98fcb72ad86909abdfc2c17d227fc1b", size = 156815, upload-time = "2025-05-02T08:32:48.105Z" },
    { url = "https://files.pythonhosted.org/packages/fd/07/68e95b4b345bad3dbbd3a8681737b4338ff2c9df29856a6d6d23ac4c73cb/charset_normalizer-3.4.2-cp312-cp312-musllinux_1_2_s390x.whl", hash = "sha256:bee093bf902e1d8fc0ac143c88902c3dfc8941f7ea1d6a8dd2bcb786d33db03d", size = 154537, upload-time = "2025-05-02T08:32:49.719Z" },
    { url = "https://files.pythonhosted.org/packages/77/1a/5eefc0ce04affb98af07bc05f3bac9094513c0e23b0562d64af46a06aae4/charset_normalizer-3.4.2-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:dedb8adb91d11846ee08bec4c8236c8549ac721c245678282dcb06b221aab59f", size = 149565, upload-time = "2025-05-02T08:32:51.404Z" },
    { url = "https://files.pythonhosted.org/packages/37/a0/2410e5e6032a174c95e0806b1a6585eb21e12f445ebe239fac441995226a/charset_normalizer-3.4.2-cp312-cp312-win32.whl", hash = "sha256:db4c7bf0e07fc3b7d89ac2a5880a6a8062056801b83ff56d8464b70f65482b6c", size = 98357, upload-time = "2025-05-02T08:32:53.079Z" },
    { url = "https://files.pythonhosted.org/packages/6c/4f/c02d5c493967af3eda9c771ad4d2bbc8df6f99ddbeb37ceea6e8716a32bc/charset_normalizer-3.4.2-cp312-cp312-win_amd64.whl", hash = "sha256:5a9979887252a82fefd3d3ed2a8e3b937a7a809f65dcb1e068b090e165bbe99e", size = 105776, upload-time = "2025-05-02T08:32:54.573Z" },
    { url = "https://files.pythonhosted.org/packages/ea/12/a93df3366ed32db1d907d7593a94f1fe6293903e3e92967bebd6950ed12c/charset_normalizer-3.4.2-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:926ca93accd5d36ccdabd803392ddc3e03e6d4cd1cf17deff3b989ab8e9dbcf0", size = 199622, upload-time = "2025-05-02T08:32:56.363Z" },
    { url = "https://files.pythonhosted.org/packages/04/93/bf204e6f344c39d9937d3c13c8cd5bbfc266472e51fc8c07cb7f64fcd2de/charset_normalizer-3.4.2-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:eba9904b0f38a143592d9fc0e19e2df0fa2e41c3c3745554761c5f6447eedabf", size = 143435, upload-time = "2025-05-02T08:32:58.551Z" },
    { url = "https://files.pythonhosted.org/packages/22/2a/ea8a2095b0bafa6c5b5a55ffdc2f924455233ee7b91c69b7edfcc9e02284/charset_normalizer-3.4.2-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:3fddb7e2c84ac87ac3a947cb4e66d143ca5863ef48e4a5ecb83bd48619e4634e", size = 153653, upload-time = "2025-05-02T08:33:00.342Z" },
    { url = "https://files.pythonhosted.org/packages/b6/57/1b090ff183d13cef485dfbe272e2fe57622a76694061353c59da52c9a659/charset_normalizer-3.4.2-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:98f862da73774290f251b9df8d11161b6cf25b599a66baf087c1ffe340e9bfd1", size = 146231, upload-time = "2025-05-02T08:33:02.081Z" },
    { url = "https://files.pythonhosted.org/packages/e2/28/ffc026b26f441fc67bd21ab7f03b313ab3fe46714a14b516f931abe1a2d8/charset_normalizer-3.4.2-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:6c9379d65defcab82d07b2a9dfbfc2e95bc8fe0ebb1b176a3190230a3ef0e07c", size = 148243, upload-time = "2025-05-02T08:33:04.063Z" },
    { url = "https://files.pythonhosted.org/packages/c0/0f/9abe9bd191629c33e69e47c6ef45ef99773320e9ad8e9cb08b8ab4a8d4cb/charset_normalizer-3.4.2-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:e635b87f01ebc977342e2697d05b56632f5f879a4f15955dfe8cef2448b51691", size = 150442, upload-time = "2025-05-02T08:33:06.418Z" },
    { url = "https://files.pythonhosted.org/packages/67/7c/a123bbcedca91d5916c056407f89a7f5e8fdfce12ba825d7d6b9954a1a3c/charset_normalizer-3.4.2-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:1c95a1e2902a8b722868587c0e1184ad5c55631de5afc0eb96bc4b0d738092c0", size = 145147, upload-time = "2025-05-02T08:33:08.183Z" },
    { url = "https://files.pythonhosted.org/packages/ec/fe/1ac556fa4899d967b83e9893788e86b6af4d83e4726511eaaad035e36595/charset_normalizer-3.4.2-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:ef8de666d6179b009dce7bcb2ad4c4a779f113f12caf8dc77f0162c29d20490b", size = 153057, upload-time = "2025-05-02T08:33:09.986Z" },
    { url = "https://files.pythonhosted.org/packages/2b/ff/acfc0b0a70b19e3e54febdd5301a98b72fa07635e56f24f60502e954c461/charset_normalizer-3.4.2-cp313-cp313-musllinux_1_2_ppc64le.whl", hash = "sha256:32fc0341d72e0f73f80acb0a2c94216bd704f4f0bce10aedea38f30502b271ff", size = 156454, upload-time = "2025-05-02T08:33:11.814Z" },
    { url = "https://files.pythonhosted.org/packages/92/08/95b458ce9c740d0645feb0e96cea1f5ec946ea9c580a94adfe0b617f3573/charset_normalizer-3.4.2-cp313-cp313-musllinux_1_2_s390x.whl", hash = "sha256:289200a18fa698949d2b39c671c2cc7a24d44096784e76614899a7ccf2574b7b", size = 154174, upload-time = "2025-05-02T08:33:13.707Z" },
    { url = "https://files.pythonhosted.org/packages/78/be/8392efc43487ac051eee6c36d5fbd63032d78f7728cb37aebcc98191f1ff/charset_normalizer-3.4.2-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:4a476b06fbcf359ad25d34a057b7219281286ae2477cc5ff5e3f70a246971148", size = 149166, upload-time = "2025-05-02T08:33:15.458Z" },
    { url = "https://files.pythonhosted.org/packages/44/96/392abd49b094d30b91d9fbda6a69519e95802250b777841cf3bda8fe136c/charset_normalizer-3.4.2-cp313-cp313-win32.whl", hash = "sha256:aaeeb6a479c7667fbe1099af9617c83aaca22182d6cf8c53966491a0f1b7ffb7", size = 98064, upload-time = "2025-05-02T08:33:17.06Z" },
    { url = "https://files.pythonhosted.org/packages/e9/b0/0200da600134e001d91851ddc797809e2fe0ea72de90e09bec5a2fbdaccb/charset_normalizer-3.4.2-cp313-cp313-win_amd64.whl", hash = "sha256:aa6af9e7d59f9c12b33ae4e9450619cf2488e2bbe9b44030905877f0b2324980", size = 105641, upload-time = "2025-05-02T08:33:18.753Z" },
    { url = "https://files.pythonhosted.org/packages/20/94/c5790835a017658cbfabd07f3bfb549140c3ac458cfc196323996b10095a/charset_normalizer-3.4.2-py3-none-any.whl", hash = "sha256:7f56930ab0abd1c45cd15be65cc741c28b1c9a34876ce8c17a2fa107810c0af0", size = 52626, upload-time = "2025-05-02T08:34:40.053Z" },
]

[[package]]
name = "click"
version = "8.2.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "colorama", marker = "sys_platform == 'win32'" },
]
sdist = { url = "https://files.pythonhosted.org/packages/60/6c/8ca2efa64cf75a977a0d7fac081354553ebe483345c734fb6b6515d96bbc/click-8.2.1.tar.gz", hash = "sha256:27c491cc05d968d271d5a1db13e3b5a184636d9d930f148c50b038f0d0646202", size = 286342, upload-time = "2025-05-20T23:19:49.832Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/85/32/10bb5764d90a8eee674e9dc6f4db6a0ab47c8c4d0d83c27f7c39ac415a4d/click-8.2.1-py3-none-any.whl", hash = "sha256:61a3265b914e850b85317d0b3109c7f8cd35a670f963866005d6ef1d5175a12b", size = 102215, upload-time = "2025-05-20T23:19:47.796Z" },
]

[[package]]
name = "colorama"
version = "0.4.6"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/d8/53/6f443c9a4a8358a93a6792e2acffb9d9d5cb0a5cfd8802644b7b1c9a02e4/colorama-0.4.6.tar.gz", hash = "sha256:08695f5cb7ed6e0531a20572697297273c47b8cae5a63ffc6d6ed5c201be6e44", size = 27697, upload-time = "2022-10-25T02:36:22.414Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d1/d6/3965ed04c63042e047cb6a3e6ed1a63a35087b6a609aa3a15ed8ac56c221/colorama-0.4.6-py2.py3-none-any.whl", hash = "sha256:4f1d9991f5acc0ca119f9d443620b77f9d6b33703e51011c16baf57afb285fc6", size = 25335, upload-time = "2022-10-25T02:36:20.889Z" },
]

[[package]]
name = "coverage"
version = "7.9.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/e7/e0/98670a80884f64578f0c22cd70c5e81a6e07b08167721c7487b4d70a7ca0/coverage-7.9.1.tar.gz", hash = "sha256:6cf43c78c4282708a28e466316935ec7489a9c487518a77fa68f716c67909cec", size = 813650, upload-time = "2025-06-13T13:02:28.627Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/68/d9/7f66eb0a8f2fce222de7bdc2046ec41cb31fe33fb55a330037833fb88afc/coverage-7.9.1-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:a8de12b4b87c20de895f10567639c0797b621b22897b0af3ce4b4e204a743626", size = 212336, upload-time = "2025-06-13T13:01:10.909Z" },
    { url = "https://files.pythonhosted.org/packages/20/20/e07cb920ef3addf20f052ee3d54906e57407b6aeee3227a9c91eea38a665/coverage-7.9.1-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:5add197315a054e92cee1b5f686a2bcba60c4c3e66ee3de77ace6c867bdee7cb", size = 212571, upload-time = "2025-06-13T13:01:12.518Z" },
    { url = "https://files.pythonhosted.org/packages/78/f8/96f155de7e9e248ca9c8ff1a40a521d944ba48bec65352da9be2463745bf/coverage-7.9.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:600a1d4106fe66f41e5d0136dfbc68fe7200a5cbe85610ddf094f8f22e1b0300", size = 246377, upload-time = "2025-06-13T13:01:14.87Z" },
    { url = "https://files.pythonhosted.org/packages/3e/cf/1d783bd05b7bca5c10ded5f946068909372e94615a4416afadfe3f63492d/coverage-7.9.1-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:2a876e4c3e5a2a1715a6608906aa5a2e0475b9c0f68343c2ada98110512ab1d8", size = 243394, upload-time = "2025-06-13T13:01:16.23Z" },
    { url = "https://files.pythonhosted.org/packages/02/dd/e7b20afd35b0a1abea09fb3998e1abc9f9bd953bee548f235aebd2b11401/coverage-7.9.1-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:81f34346dd63010453922c8e628a52ea2d2ccd73cb2487f7700ac531b247c8a5", size = 245586, upload-time = "2025-06-13T13:01:17.532Z" },
    { url = "https://files.pythonhosted.org/packages/4e/38/b30b0006fea9d617d1cb8e43b1bc9a96af11eff42b87eb8c716cf4d37469/coverage-7.9.1-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:888f8eee13f2377ce86d44f338968eedec3291876b0b8a7289247ba52cb984cd", size = 245396, upload-time = "2025-06-13T13:01:19.164Z" },
    { url = "https://files.pythonhosted.org/packages/31/e4/4d8ec1dc826e16791f3daf1b50943e8e7e1eb70e8efa7abb03936ff48418/coverage-7.9.1-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:9969ef1e69b8c8e1e70d591f91bbc37fc9a3621e447525d1602801a24ceda898", size = 243577, upload-time = "2025-06-13T13:01:22.433Z" },
    { url = "https://files.pythonhosted.org/packages/25/f4/b0e96c5c38e6e40ef465c4bc7f138863e2909c00e54a331da335faf0d81a/coverage-7.9.1-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:60c458224331ee3f1a5b472773e4a085cc27a86a0b48205409d364272d67140d", size = 244809, upload-time = "2025-06-13T13:01:24.143Z" },
    { url = "https://files.pythonhosted.org/packages/8a/65/27e0a1fa5e2e5079bdca4521be2f5dabf516f94e29a0defed35ac2382eb2/coverage-7.9.1-cp312-cp312-win32.whl", hash = "sha256:5f646a99a8c2b3ff4c6a6e081f78fad0dde275cd59f8f49dc4eab2e394332e74", size = 214724, upload-time = "2025-06-13T13:01:25.435Z" },
    { url = "https://files.pythonhosted.org/packages/9b/a8/d5b128633fd1a5e0401a4160d02fa15986209a9e47717174f99dc2f7166d/coverage-7.9.1-cp312-cp312-win_amd64.whl", hash = "sha256:30f445f85c353090b83e552dcbbdad3ec84c7967e108c3ae54556ca69955563e", size = 215535, upload-time = "2025-06-13T13:01:27.861Z" },
    { url = "https://files.pythonhosted.org/packages/a3/37/84bba9d2afabc3611f3e4325ee2c6a47cd449b580d4a606b240ce5a6f9bf/coverage-7.9.1-cp312-cp312-win_arm64.whl", hash = "sha256:af41da5dca398d3474129c58cb2b106a5d93bbb196be0d307ac82311ca234342", size = 213904, upload-time = "2025-06-13T13:01:29.202Z" },
    { url = "https://files.pythonhosted.org/packages/d0/a7/a027970c991ca90f24e968999f7d509332daf6b8c3533d68633930aaebac/coverage-7.9.1-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:31324f18d5969feef7344a932c32428a2d1a3e50b15a6404e97cba1cc9b2c631", size = 212358, upload-time = "2025-06-13T13:01:30.909Z" },
    { url = "https://files.pythonhosted.org/packages/f2/48/6aaed3651ae83b231556750280682528fea8ac7f1232834573472d83e459/coverage-7.9.1-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:0c804506d624e8a20fb3108764c52e0eef664e29d21692afa375e0dd98dc384f", size = 212620, upload-time = "2025-06-13T13:01:32.256Z" },
    { url = "https://files.pythonhosted.org/packages/6c/2a/f4b613f3b44d8b9f144847c89151992b2b6b79cbc506dee89ad0c35f209d/coverage-7.9.1-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:ef64c27bc40189f36fcc50c3fb8f16ccda73b6a0b80d9bd6e6ce4cffcd810bbd", size = 245788, upload-time = "2025-06-13T13:01:33.948Z" },
    { url = "https://files.pythonhosted.org/packages/04/d2/de4fdc03af5e4e035ef420ed26a703c6ad3d7a07aff2e959eb84e3b19ca8/coverage-7.9.1-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:d4fe2348cc6ec372e25adec0219ee2334a68d2f5222e0cba9c0d613394e12d86", size = 243001, upload-time = "2025-06-13T13:01:35.285Z" },
    { url = "https://files.pythonhosted.org/packages/f5/e8/eed18aa5583b0423ab7f04e34659e51101135c41cd1dcb33ac1d7013a6d6/coverage-7.9.1-cp313-cp313-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:34ed2186fe52fcc24d4561041979a0dec69adae7bce2ae8d1c49eace13e55c43", size = 244985, upload-time = "2025-06-13T13:01:36.712Z" },
    { url = "https://files.pythonhosted.org/packages/17/f8/ae9e5cce8885728c934eaa58ebfa8281d488ef2afa81c3dbc8ee9e6d80db/coverage-7.9.1-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:25308bd3d00d5eedd5ae7d4357161f4df743e3c0240fa773ee1b0f75e6c7c0f1", size = 245152, upload-time = "2025-06-13T13:01:39.303Z" },
    { url = "https://files.pythonhosted.org/packages/5a/c8/272c01ae792bb3af9b30fac14d71d63371db227980682836ec388e2c57c0/coverage-7.9.1-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:73e9439310f65d55a5a1e0564b48e34f5369bee943d72c88378f2d576f5a5751", size = 243123, upload-time = "2025-06-13T13:01:40.727Z" },
    { url = "https://files.pythonhosted.org/packages/8c/d0/2819a1e3086143c094ab446e3bdf07138527a7b88cb235c488e78150ba7a/coverage-7.9.1-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:37ab6be0859141b53aa89412a82454b482c81cf750de4f29223d52268a86de67", size = 244506, upload-time = "2025-06-13T13:01:42.184Z" },
    { url = "https://files.pythonhosted.org/packages/8b/4e/9f6117b89152df7b6112f65c7a4ed1f2f5ec8e60c4be8f351d91e7acc848/coverage-7.9.1-cp313-cp313-win32.whl", hash = "sha256:64bdd969456e2d02a8b08aa047a92d269c7ac1f47e0c977675d550c9a0863643", size = 214766, upload-time = "2025-06-13T13:01:44.482Z" },
    { url = "https://files.pythonhosted.org/packages/27/0f/4b59f7c93b52c2c4ce7387c5a4e135e49891bb3b7408dcc98fe44033bbe0/coverage-7.9.1-cp313-cp313-win_amd64.whl", hash = "sha256:be9e3f68ca9edb897c2184ad0eee815c635565dbe7a0e7e814dc1f7cbab92c0a", size = 215568, upload-time = "2025-06-13T13:01:45.772Z" },
    { url = "https://files.pythonhosted.org/packages/09/1e/9679826336f8c67b9c39a359352882b24a8a7aee48d4c9cad08d38d7510f/coverage-7.9.1-cp313-cp313-win_arm64.whl", hash = "sha256:1c503289ffef1d5105d91bbb4d62cbe4b14bec4d13ca225f9c73cde9bb46207d", size = 213939, upload-time = "2025-06-13T13:01:47.087Z" },
    { url = "https://files.pythonhosted.org/packages/bb/5b/5c6b4e7a407359a2e3b27bf9c8a7b658127975def62077d441b93a30dbe8/coverage-7.9.1-cp313-cp313t-macosx_10_13_x86_64.whl", hash = "sha256:0b3496922cb5f4215bf5caaef4cf12364a26b0be82e9ed6d050f3352cf2d7ef0", size = 213079, upload-time = "2025-06-13T13:01:48.554Z" },
    { url = "https://files.pythonhosted.org/packages/a2/22/1e2e07279fd2fd97ae26c01cc2186e2258850e9ec125ae87184225662e89/coverage-7.9.1-cp313-cp313t-macosx_11_0_arm64.whl", hash = "sha256:9565c3ab1c93310569ec0d86b017f128f027cab0b622b7af288696d7ed43a16d", size = 213299, upload-time = "2025-06-13T13:01:49.997Z" },
    { url = "https://files.pythonhosted.org/packages/14/c0/4c5125a4b69d66b8c85986d3321520f628756cf524af810baab0790c7647/coverage-7.9.1-cp313-cp313t-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:2241ad5dbf79ae1d9c08fe52b36d03ca122fb9ac6bca0f34439e99f8327ac89f", size = 256535, upload-time = "2025-06-13T13:01:51.314Z" },
    { url = "https://files.pythonhosted.org/packages/81/8b/e36a04889dda9960be4263e95e777e7b46f1bb4fc32202612c130a20c4da/coverage-7.9.1-cp313-cp313t-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:3bb5838701ca68b10ebc0937dbd0eb81974bac54447c55cd58dea5bca8451029", size = 252756, upload-time = "2025-06-13T13:01:54.403Z" },
    { url = "https://files.pythonhosted.org/packages/98/82/be04eff8083a09a4622ecd0e1f31a2c563dbea3ed848069e7b0445043a70/coverage-7.9.1-cp313-cp313t-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:b30a25f814591a8c0c5372c11ac8967f669b97444c47fd794926e175c4047ece", size = 254912, upload-time = "2025-06-13T13:01:56.769Z" },
    { url = "https://files.pythonhosted.org/packages/0f/25/c26610a2c7f018508a5ab958e5b3202d900422cf7cdca7670b6b8ca4e8df/coverage-7.9.1-cp313-cp313t-musllinux_1_2_aarch64.whl", hash = "sha256:2d04b16a6062516df97969f1ae7efd0de9c31eb6ebdceaa0d213b21c0ca1a683", size = 256144, upload-time = "2025-06-13T13:01:58.19Z" },
    { url = "https://files.pythonhosted.org/packages/c5/8b/fb9425c4684066c79e863f1e6e7ecebb49e3a64d9f7f7860ef1688c56f4a/coverage-7.9.1-cp313-cp313t-musllinux_1_2_i686.whl", hash = "sha256:7931b9e249edefb07cd6ae10c702788546341d5fe44db5b6108a25da4dca513f", size = 254257, upload-time = "2025-06-13T13:01:59.645Z" },
    { url = "https://files.pythonhosted.org/packages/93/df/27b882f54157fc1131e0e215b0da3b8d608d9b8ef79a045280118a8f98fe/coverage-7.9.1-cp313-cp313t-musllinux_1_2_x86_64.whl", hash = "sha256:52e92b01041151bf607ee858e5a56c62d4b70f4dac85b8c8cb7fb8a351ab2c10", size = 255094, upload-time = "2025-06-13T13:02:01.37Z" },
    { url = "https://files.pythonhosted.org/packages/41/5f/cad1c3dbed8b3ee9e16fa832afe365b4e3eeab1fb6edb65ebbf745eabc92/coverage-7.9.1-cp313-cp313t-win32.whl", hash = "sha256:684e2110ed84fd1ca5f40e89aa44adf1729dc85444004111aa01866507adf363", size = 215437, upload-time = "2025-06-13T13:02:02.905Z" },
    { url = "https://files.pythonhosted.org/packages/99/4d/fad293bf081c0e43331ca745ff63673badc20afea2104b431cdd8c278b4c/coverage-7.9.1-cp313-cp313t-win_amd64.whl", hash = "sha256:437c576979e4db840539674e68c84b3cda82bc824dd138d56bead1435f1cb5d7", size = 216605, upload-time = "2025-06-13T13:02:05.638Z" },
    { url = "https://files.pythonhosted.org/packages/1f/56/4ee027d5965fc7fc126d7ec1187529cc30cc7d740846e1ecb5e92d31b224/coverage-7.9.1-cp313-cp313t-win_arm64.whl", hash = "sha256:18a0912944d70aaf5f399e350445738a1a20b50fbea788f640751c2ed9208b6c", size = 214392, upload-time = "2025-06-13T13:02:07.642Z" },
    { url = "https://files.pythonhosted.org/packages/08/b8/7ddd1e8ba9701dea08ce22029917140e6f66a859427406579fd8d0ca7274/coverage-7.9.1-py3-none-any.whl", hash = "sha256:66b974b145aa189516b6bf2d8423e888b742517d37872f6ee4c5be0073bd9a3c", size = 204000, upload-time = "2025-06-13T13:02:27.173Z" },
]

[[package]]
name = "deprecation"
version = "2.1.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "packaging" },
]
sdist = { url = "https://files.pythonhosted.org/packages/5a/d3/8ae2869247df154b64c1884d7346d412fed0c49df84db635aab2d1c40e62/deprecation-2.1.0.tar.gz", hash = "sha256:72b3bde64e5d778694b0cf68178aed03d15e15477116add3fb773e581f9518ff", size = 173788, upload-time = "2020-04-20T14:23:38.738Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/02/c3/253a89ee03fc9b9682f1541728eb66db7db22148cd94f89ab22528cd1e1b/deprecation-2.1.0-py2.py3-none-any.whl", hash = "sha256:a10811591210e1fb0e768a8c25517cabeabcba6f0bf96564f8ff45189f90b14a", size = 11178, upload-time = "2020-04-20T14:23:36.581Z" },
]

[[package]]
name = "distro"
version = "1.9.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/fc/f8/98eea607f65de6527f8a2e8885fc8015d3e6f5775df186e443e0964a11c3/distro-1.9.0.tar.gz", hash = "sha256:2fa77c6fd8940f116ee1d6b94a2f90b13b5ea8d019b98bc8bafdcabcdd9bdbed", size = 60722, upload-time = "2023-12-24T09:54:32.31Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/12/b3/231ffd4ab1fc9d679809f356cebee130ac7daa00d6d6f3206dd4fd137e9e/distro-1.9.0-py3-none-any.whl", hash = "sha256:7bffd925d65168f85027d8da9af6bddab658135b840670a223589bc0c8ef02b2", size = 20277, upload-time = "2023-12-24T09:54:30.421Z" },
]

[[package]]
name = "fastapi"
version = "0.115.14"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "pydantic" },
    { name = "starlette" },
    { name = "typing-extensions" },
]
sdist = { url = "https://files.pythonhosted.org/packages/ca/53/8c38a874844a8b0fa10dd8adf3836ac154082cf88d3f22b544e9ceea0a15/fastapi-0.115.14.tar.gz", hash = "sha256:b1de15cdc1c499a4da47914db35d0e4ef8f1ce62b624e94e0e5824421df99739", size = 296263, upload-time = "2025-06-26T15:29:08.21Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/53/50/b1222562c6d270fea83e9c9075b8e8600b8479150a18e4516a6138b980d1/fastapi-0.115.14-py3-none-any.whl", hash = "sha256:6c0c8bf9420bd58f565e585036d971872472b4f7d3f6c73b698e10cffdefb3ca", size = 95514, upload-time = "2025-06-26T15:29:06.49Z" },
]

[[package]]
name = "frozenlist"
version = "1.7.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/79/b1/b64018016eeb087db503b038296fd782586432b9c077fc5c7839e9cb6ef6/frozenlist-1.7.0.tar.gz", hash = "sha256:2e310d81923c2437ea8670467121cc3e9b0f76d3043cc1d2331d56c7fb7a3a8f", size = 45078, upload-time = "2025-06-09T23:02:35.538Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/ef/a2/c8131383f1e66adad5f6ecfcce383d584ca94055a34d683bbb24ac5f2f1c/frozenlist-1.7.0-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:3dbf9952c4bb0e90e98aec1bd992b3318685005702656bc6f67c1a32b76787f2", size = 81424, upload-time = "2025-06-09T23:00:42.24Z" },
    { url = "https://files.pythonhosted.org/packages/4c/9d/02754159955088cb52567337d1113f945b9e444c4960771ea90eb73de8db/frozenlist-1.7.0-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:1f5906d3359300b8a9bb194239491122e6cf1444c2efb88865426f170c262cdb", size = 47952, upload-time = "2025-06-09T23:00:43.481Z" },
    { url = "https://files.pythonhosted.org/packages/01/7a/0046ef1bd6699b40acd2067ed6d6670b4db2f425c56980fa21c982c2a9db/frozenlist-1.7.0-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:3dabd5a8f84573c8d10d8859a50ea2dec01eea372031929871368c09fa103478", size = 46688, upload-time = "2025-06-09T23:00:44.793Z" },
    { url = "https://files.pythonhosted.org/packages/d6/a2/a910bafe29c86997363fb4c02069df4ff0b5bc39d33c5198b4e9dd42d8f8/frozenlist-1.7.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:aa57daa5917f1738064f302bf2626281a1cb01920c32f711fbc7bc36111058a8", size = 243084, upload-time = "2025-06-09T23:00:46.125Z" },
    { url = "https://files.pythonhosted.org/packages/64/3e/5036af9d5031374c64c387469bfcc3af537fc0f5b1187d83a1cf6fab1639/frozenlist-1.7.0-cp312-cp312-manylinux_2_17_armv7l.manylinux2014_armv7l.manylinux_2_31_armv7l.whl", hash = "sha256:c193dda2b6d49f4c4398962810fa7d7c78f032bf45572b3e04dd5249dff27e08", size = 233524, upload-time = "2025-06-09T23:00:47.73Z" },
    { url = "https://files.pythonhosted.org/packages/06/39/6a17b7c107a2887e781a48ecf20ad20f1c39d94b2a548c83615b5b879f28/frozenlist-1.7.0-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:bfe2b675cf0aaa6d61bf8fbffd3c274b3c9b7b1623beb3809df8a81399a4a9c4", size = 248493, upload-time = "2025-06-09T23:00:49.742Z" },
    { url = "https://files.pythonhosted.org/packages/be/00/711d1337c7327d88c44d91dd0f556a1c47fb99afc060ae0ef66b4d24793d/frozenlist-1.7.0-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:8fc5d5cda37f62b262405cf9652cf0856839c4be8ee41be0afe8858f17f4c94b", size = 244116, upload-time = "2025-06-09T23:00:51.352Z" },
    { url = "https://files.pythonhosted.org/packages/24/fe/74e6ec0639c115df13d5850e75722750adabdc7de24e37e05a40527ca539/frozenlist-1.7.0-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:b0d5ce521d1dd7d620198829b87ea002956e4319002ef0bc8d3e6d045cb4646e", size = 224557, upload-time = "2025-06-09T23:00:52.855Z" },
    { url = "https://files.pythonhosted.org/packages/8d/db/48421f62a6f77c553575201e89048e97198046b793f4a089c79a6e3268bd/frozenlist-1.7.0-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:488d0a7d6a0008ca0db273c542098a0fa9e7dfaa7e57f70acef43f32b3f69dca", size = 241820, upload-time = "2025-06-09T23:00:54.43Z" },
    { url = "https://files.pythonhosted.org/packages/1d/fa/cb4a76bea23047c8462976ea7b7a2bf53997a0ca171302deae9d6dd12096/frozenlist-1.7.0-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:15a7eaba63983d22c54d255b854e8108e7e5f3e89f647fc854bd77a237e767df", size = 236542, upload-time = "2025-06-09T23:00:56.409Z" },
    { url = "https://files.pythonhosted.org/packages/5d/32/476a4b5cfaa0ec94d3f808f193301debff2ea42288a099afe60757ef6282/frozenlist-1.7.0-cp312-cp312-musllinux_1_2_armv7l.whl", hash = "sha256:1eaa7e9c6d15df825bf255649e05bd8a74b04a4d2baa1ae46d9c2d00b2ca2cb5", size = 249350, upload-time = "2025-06-09T23:00:58.468Z" },
    { url = "https://files.pythonhosted.org/packages/8d/ba/9a28042f84a6bf8ea5dbc81cfff8eaef18d78b2a1ad9d51c7bc5b029ad16/frozenlist-1.7.0-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:e4389e06714cfa9d47ab87f784a7c5be91d3934cd6e9a7b85beef808297cc025", size = 225093, upload-time = "2025-06-09T23:01:00.015Z" },
    { url = "https://files.pythonhosted.org/packages/bc/29/3a32959e68f9cf000b04e79ba574527c17e8842e38c91d68214a37455786/frozenlist-1.7.0-cp312-cp312-musllinux_1_2_ppc64le.whl", hash = "sha256:73bd45e1488c40b63fe5a7df892baf9e2a4d4bb6409a2b3b78ac1c6236178e01", size = 245482, upload-time = "2025-06-09T23:01:01.474Z" },
    { url = "https://files.pythonhosted.org/packages/80/e8/edf2f9e00da553f07f5fa165325cfc302dead715cab6ac8336a5f3d0adc2/frozenlist-1.7.0-cp312-cp312-musllinux_1_2_s390x.whl", hash = "sha256:99886d98e1643269760e5fe0df31e5ae7050788dd288947f7f007209b8c33f08", size = 249590, upload-time = "2025-06-09T23:01:02.961Z" },
    { url = "https://files.pythonhosted.org/packages/1c/80/9a0eb48b944050f94cc51ee1c413eb14a39543cc4f760ed12657a5a3c45a/frozenlist-1.7.0-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:290a172aae5a4c278c6da8a96222e6337744cd9c77313efe33d5670b9f65fc43", size = 237785, upload-time = "2025-06-09T23:01:05.095Z" },
    { url = "https://files.pythonhosted.org/packages/f3/74/87601e0fb0369b7a2baf404ea921769c53b7ae00dee7dcfe5162c8c6dbf0/frozenlist-1.7.0-cp312-cp312-win32.whl", hash = "sha256:426c7bc70e07cfebc178bc4c2bf2d861d720c4fff172181eeb4a4c41d4ca2ad3", size = 39487, upload-time = "2025-06-09T23:01:06.54Z" },
    { url = "https://files.pythonhosted.org/packages/0b/15/c026e9a9fc17585a9d461f65d8593d281fedf55fbf7eb53f16c6df2392f9/frozenlist-1.7.0-cp312-cp312-win_amd64.whl", hash = "sha256:563b72efe5da92e02eb68c59cb37205457c977aa7a449ed1b37e6939e5c47c6a", size = 43874, upload-time = "2025-06-09T23:01:07.752Z" },
    { url = "https://files.pythonhosted.org/packages/24/90/6b2cebdabdbd50367273c20ff6b57a3dfa89bd0762de02c3a1eb42cb6462/frozenlist-1.7.0-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:ee80eeda5e2a4e660651370ebffd1286542b67e268aa1ac8d6dbe973120ef7ee", size = 79791, upload-time = "2025-06-09T23:01:09.368Z" },
    { url = "https://files.pythonhosted.org/packages/83/2e/5b70b6a3325363293fe5fc3ae74cdcbc3e996c2a11dde2fd9f1fb0776d19/frozenlist-1.7.0-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:d1a81c85417b914139e3a9b995d4a1c84559afc839a93cf2cb7f15e6e5f6ed2d", size = 47165, upload-time = "2025-06-09T23:01:10.653Z" },
    { url = "https://files.pythonhosted.org/packages/f4/25/a0895c99270ca6966110f4ad98e87e5662eab416a17e7fd53c364bf8b954/frozenlist-1.7.0-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:cbb65198a9132ebc334f237d7b0df163e4de83fb4f2bdfe46c1e654bdb0c5d43", size = 45881, upload-time = "2025-06-09T23:01:12.296Z" },
    { url = "https://files.pythonhosted.org/packages/19/7c/71bb0bbe0832793c601fff68cd0cf6143753d0c667f9aec93d3c323f4b55/frozenlist-1.7.0-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:dab46c723eeb2c255a64f9dc05b8dd601fde66d6b19cdb82b2e09cc6ff8d8b5d", size = 232409, upload-time = "2025-06-09T23:01:13.641Z" },
    { url = "https://files.pythonhosted.org/packages/c0/45/ed2798718910fe6eb3ba574082aaceff4528e6323f9a8570be0f7028d8e9/frozenlist-1.7.0-cp313-cp313-manylinux_2_17_armv7l.manylinux2014_armv7l.manylinux_2_31_armv7l.whl", hash = "sha256:6aeac207a759d0dedd2e40745575ae32ab30926ff4fa49b1635def65806fddee", size = 225132, upload-time = "2025-06-09T23:01:15.264Z" },
    { url = "https://files.pythonhosted.org/packages/ba/e2/8417ae0f8eacb1d071d4950f32f229aa6bf68ab69aab797b72a07ea68d4f/frozenlist-1.7.0-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:bd8c4e58ad14b4fa7802b8be49d47993182fdd4023393899632c88fd8cd994eb", size = 237638, upload-time = "2025-06-09T23:01:16.752Z" },
    { url = "https://files.pythonhosted.org/packages/f8/b7/2ace5450ce85f2af05a871b8c8719b341294775a0a6c5585d5e6170f2ce7/frozenlist-1.7.0-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:04fb24d104f425da3540ed83cbfc31388a586a7696142004c577fa61c6298c3f", size = 233539, upload-time = "2025-06-09T23:01:18.202Z" },
    { url = "https://files.pythonhosted.org/packages/46/b9/6989292c5539553dba63f3c83dc4598186ab2888f67c0dc1d917e6887db6/frozenlist-1.7.0-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:6a5c505156368e4ea6b53b5ac23c92d7edc864537ff911d2fb24c140bb175e60", size = 215646, upload-time = "2025-06-09T23:01:19.649Z" },
    { url = "https://files.pythonhosted.org/packages/72/31/bc8c5c99c7818293458fe745dab4fd5730ff49697ccc82b554eb69f16a24/frozenlist-1.7.0-cp313-cp313-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:8bd7eb96a675f18aa5c553eb7ddc24a43c8c18f22e1f9925528128c052cdbe00", size = 232233, upload-time = "2025-06-09T23:01:21.175Z" },
    { url = "https://files.pythonhosted.org/packages/59/52/460db4d7ba0811b9ccb85af996019f5d70831f2f5f255f7cc61f86199795/frozenlist-1.7.0-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:05579bf020096fe05a764f1f84cd104a12f78eaab68842d036772dc6d4870b4b", size = 227996, upload-time = "2025-06-09T23:01:23.098Z" },
    { url = "https://files.pythonhosted.org/packages/ba/c9/f4b39e904c03927b7ecf891804fd3b4df3db29b9e487c6418e37988d6e9d/frozenlist-1.7.0-cp313-cp313-musllinux_1_2_armv7l.whl", hash = "sha256:376b6222d114e97eeec13d46c486facd41d4f43bab626b7c3f6a8b4e81a5192c", size = 242280, upload-time = "2025-06-09T23:01:24.808Z" },
    { url = "https://files.pythonhosted.org/packages/b8/33/3f8d6ced42f162d743e3517781566b8481322be321b486d9d262adf70bfb/frozenlist-1.7.0-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:0aa7e176ebe115379b5b1c95b4096fb1c17cce0847402e227e712c27bdb5a949", size = 217717, upload-time = "2025-06-09T23:01:26.28Z" },
    { url = "https://files.pythonhosted.org/packages/3e/e8/ad683e75da6ccef50d0ab0c2b2324b32f84fc88ceee778ed79b8e2d2fe2e/frozenlist-1.7.0-cp313-cp313-musllinux_1_2_ppc64le.whl", hash = "sha256:3fbba20e662b9c2130dc771e332a99eff5da078b2b2648153a40669a6d0e36ca", size = 236644, upload-time = "2025-06-09T23:01:27.887Z" },
    { url = "https://files.pythonhosted.org/packages/b2/14/8d19ccdd3799310722195a72ac94ddc677541fb4bef4091d8e7775752360/frozenlist-1.7.0-cp313-cp313-musllinux_1_2_s390x.whl", hash = "sha256:f3f4410a0a601d349dd406b5713fec59b4cee7e71678d5b17edda7f4655a940b", size = 238879, upload-time = "2025-06-09T23:01:29.524Z" },
    { url = "https://files.pythonhosted.org/packages/ce/13/c12bf657494c2fd1079a48b2db49fa4196325909249a52d8f09bc9123fd7/frozenlist-1.7.0-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:e2cdfaaec6a2f9327bf43c933c0319a7c429058e8537c508964a133dffee412e", size = 232502, upload-time = "2025-06-09T23:01:31.287Z" },
    { url = "https://files.pythonhosted.org/packages/d7/8b/e7f9dfde869825489382bc0d512c15e96d3964180c9499efcec72e85db7e/frozenlist-1.7.0-cp313-cp313-win32.whl", hash = "sha256:5fc4df05a6591c7768459caba1b342d9ec23fa16195e744939ba5914596ae3e1", size = 39169, upload-time = "2025-06-09T23:01:35.503Z" },
    { url = "https://files.pythonhosted.org/packages/35/89/a487a98d94205d85745080a37860ff5744b9820a2c9acbcdd9440bfddf98/frozenlist-1.7.0-cp313-cp313-win_amd64.whl", hash = "sha256:52109052b9791a3e6b5d1b65f4b909703984b770694d3eb64fad124c835d7cba", size = 43219, upload-time = "2025-06-09T23:01:36.784Z" },
    { url = "https://files.pythonhosted.org/packages/56/d5/5c4cf2319a49eddd9dd7145e66c4866bdc6f3dbc67ca3d59685149c11e0d/frozenlist-1.7.0-cp313-cp313t-macosx_10_13_universal2.whl", hash = "sha256:a6f86e4193bb0e235ef6ce3dde5cbabed887e0b11f516ce8a0f4d3b33078ec2d", size = 84345, upload-time = "2025-06-09T23:01:38.295Z" },
    { url = "https://files.pythonhosted.org/packages/a4/7d/ec2c1e1dc16b85bc9d526009961953df9cec8481b6886debb36ec9107799/frozenlist-1.7.0-cp313-cp313t-macosx_10_13_x86_64.whl", hash = "sha256:82d664628865abeb32d90ae497fb93df398a69bb3434463d172b80fc25b0dd7d", size = 48880, upload-time = "2025-06-09T23:01:39.887Z" },
    { url = "https://files.pythonhosted.org/packages/69/86/f9596807b03de126e11e7d42ac91e3d0b19a6599c714a1989a4e85eeefc4/frozenlist-1.7.0-cp313-cp313t-macosx_11_0_arm64.whl", hash = "sha256:912a7e8375a1c9a68325a902f3953191b7b292aa3c3fb0d71a216221deca460b", size = 48498, upload-time = "2025-06-09T23:01:41.318Z" },
    { url = "https://files.pythonhosted.org/packages/5e/cb/df6de220f5036001005f2d726b789b2c0b65f2363b104bbc16f5be8084f8/frozenlist-1.7.0-cp313-cp313t-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:9537c2777167488d539bc5de2ad262efc44388230e5118868e172dd4a552b146", size = 292296, upload-time = "2025-06-09T23:01:42.685Z" },
    { url = "https://files.pythonhosted.org/packages/83/1f/de84c642f17c8f851a2905cee2dae401e5e0daca9b5ef121e120e19aa825/frozenlist-1.7.0-cp313-cp313t-manylinux_2_17_armv7l.manylinux2014_armv7l.manylinux_2_31_armv7l.whl", hash = "sha256:f34560fb1b4c3e30ba35fa9a13894ba39e5acfc5f60f57d8accde65f46cc5e74", size = 273103, upload-time = "2025-06-09T23:01:44.166Z" },
    { url = "https://files.pythonhosted.org/packages/88/3c/c840bfa474ba3fa13c772b93070893c6e9d5c0350885760376cbe3b6c1b3/frozenlist-1.7.0-cp313-cp313t-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:acd03d224b0175f5a850edc104ac19040d35419eddad04e7cf2d5986d98427f1", size = 292869, upload-time = "2025-06-09T23:01:45.681Z" },
    { url = "https://files.pythonhosted.org/packages/a6/1c/3efa6e7d5a39a1d5ef0abeb51c48fb657765794a46cf124e5aca2c7a592c/frozenlist-1.7.0-cp313-cp313t-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:f2038310bc582f3d6a09b3816ab01737d60bf7b1ec70f5356b09e84fb7408ab1", size = 291467, upload-time = "2025-06-09T23:01:47.234Z" },
    { url = "https://files.pythonhosted.org/packages/4f/00/d5c5e09d4922c395e2f2f6b79b9a20dab4b67daaf78ab92e7729341f61f6/frozenlist-1.7.0-cp313-cp313t-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:b8c05e4c8e5f36e5e088caa1bf78a687528f83c043706640a92cb76cd6999384", size = 266028, upload-time = "2025-06-09T23:01:48.819Z" },
    { url = "https://files.pythonhosted.org/packages/4e/27/72765be905619dfde25a7f33813ac0341eb6b076abede17a2e3fbfade0cb/frozenlist-1.7.0-cp313-cp313t-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:765bb588c86e47d0b68f23c1bee323d4b703218037765dcf3f25c838c6fecceb", size = 284294, upload-time = "2025-06-09T23:01:50.394Z" },
    { url = "https://files.pythonhosted.org/packages/88/67/c94103a23001b17808eb7dd1200c156bb69fb68e63fcf0693dde4cd6228c/frozenlist-1.7.0-cp313-cp313t-musllinux_1_2_aarch64.whl", hash = "sha256:32dc2e08c67d86d0969714dd484fd60ff08ff81d1a1e40a77dd34a387e6ebc0c", size = 281898, upload-time = "2025-06-09T23:01:52.234Z" },
    { url = "https://files.pythonhosted.org/packages/42/34/a3e2c00c00f9e2a9db5653bca3fec306349e71aff14ae45ecc6d0951dd24/frozenlist-1.7.0-cp313-cp313t-musllinux_1_2_armv7l.whl", hash = "sha256:c0303e597eb5a5321b4de9c68e9845ac8f290d2ab3f3e2c864437d3c5a30cd65", size = 290465, upload-time = "2025-06-09T23:01:53.788Z" },
    { url = "https://files.pythonhosted.org/packages/bb/73/f89b7fbce8b0b0c095d82b008afd0590f71ccb3dee6eee41791cf8cd25fd/frozenlist-1.7.0-cp313-cp313t-musllinux_1_2_i686.whl", hash = "sha256:a47f2abb4e29b3a8d0b530f7c3598badc6b134562b1a5caee867f7c62fee51e3", size = 266385, upload-time = "2025-06-09T23:01:55.769Z" },
    { url = "https://files.pythonhosted.org/packages/cd/45/e365fdb554159462ca12df54bc59bfa7a9a273ecc21e99e72e597564d1ae/frozenlist-1.7.0-cp313-cp313t-musllinux_1_2_ppc64le.whl", hash = "sha256:3d688126c242a6fabbd92e02633414d40f50bb6002fa4cf995a1d18051525657", size = 288771, upload-time = "2025-06-09T23:01:57.4Z" },
    { url = "https://files.pythonhosted.org/packages/00/11/47b6117002a0e904f004d70ec5194fe9144f117c33c851e3d51c765962d0/frozenlist-1.7.0-cp313-cp313t-musllinux_1_2_s390x.whl", hash = "sha256:4e7e9652b3d367c7bd449a727dc79d5043f48b88d0cbfd4f9f1060cf2b414104", size = 288206, upload-time = "2025-06-09T23:01:58.936Z" },
    { url = "https://files.pythonhosted.org/packages/40/37/5f9f3c3fd7f7746082ec67bcdc204db72dad081f4f83a503d33220a92973/frozenlist-1.7.0-cp313-cp313t-musllinux_1_2_x86_64.whl", hash = "sha256:1a85e345b4c43db8b842cab1feb41be5cc0b10a1830e6295b69d7310f99becaf", size = 282620, upload-time = "2025-06-09T23:02:00.493Z" },
    { url = "https://files.pythonhosted.org/packages/0b/31/8fbc5af2d183bff20f21aa743b4088eac4445d2bb1cdece449ae80e4e2d1/frozenlist-1.7.0-cp313-cp313t-win32.whl", hash = "sha256:3a14027124ddb70dfcee5148979998066897e79f89f64b13328595c4bdf77c81", size = 43059, upload-time = "2025-06-09T23:02:02.072Z" },
    { url = "https://files.pythonhosted.org/packages/bb/ed/41956f52105b8dbc26e457c5705340c67c8cc2b79f394b79bffc09d0e938/frozenlist-1.7.0-cp313-cp313t-win_amd64.whl", hash = "sha256:3bf8010d71d4507775f658e9823210b7427be36625b387221642725b515dcf3e", size = 47516, upload-time = "2025-06-09T23:02:03.779Z" },
    { url = "https://files.pythonhosted.org/packages/ee/45/b82e3c16be2182bff01179db177fe144d58b5dc787a7d4492c6ed8b9317f/frozenlist-1.7.0-py3-none-any.whl", hash = "sha256:9a5af342e34f7e97caf8c995864c7a396418ae2859cc6fdf1b1073020d516a7e", size = 13106, upload-time = "2025-06-09T23:02:34.204Z" },
]

[[package]]
name = "google-ai-generativelanguage"
version = "0.6.15"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "google-api-core", extra = ["grpc"] },
    { name = "google-auth" },
    { name = "proto-plus" },
    { name = "protobuf" },
]
sdist = { url = "https://files.pythonhosted.org/packages/11/d1/48fe5d7a43d278e9f6b5ada810b0a3530bbeac7ed7fcbcd366f932f05316/google_ai_generativelanguage-0.6.15.tar.gz", hash = "sha256:8f6d9dc4c12b065fe2d0289026171acea5183ebf2d0b11cefe12f3821e159ec3", size = 1375443, upload-time = "2025-01-13T21:50:47.459Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/7c/a3/67b8a6ff5001a1d8864922f2d6488dc2a14367ceb651bc3f09a947f2f306/google_ai_generativelanguage-0.6.15-py3-none-any.whl", hash = "sha256:5a03ef86377aa184ffef3662ca28f19eeee158733e45d7947982eb953c6ebb6c", size = 1327356, upload-time = "2025-01-13T21:50:44.174Z" },
]

[[package]]
name = "google-api-core"
version = "2.25.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "google-auth" },
    { name = "googleapis-common-protos" },
    { name = "proto-plus" },
    { name = "protobuf" },
    { name = "requests" },
]
sdist = { url = "https://files.pythonhosted.org/packages/dc/21/e9d043e88222317afdbdb567165fdbc3b0aad90064c7e0c9eb0ad9955ad8/google_api_core-2.25.1.tar.gz", hash = "sha256:d2aaa0b13c78c61cb3f4282c464c046e45fbd75755683c9c525e6e8f7ed0a5e8", size = 165443, upload-time = "2025-06-12T20:52:20.439Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/14/4b/ead00905132820b623732b175d66354e9d3e69fcf2a5dcdab780664e7896/google_api_core-2.25.1-py3-none-any.whl", hash = "sha256:8a2a56c1fef82987a524371f99f3bd0143702fecc670c72e600c1cda6bf8dbb7", size = 160807, upload-time = "2025-06-12T20:52:19.334Z" },
]

[package.optional-dependencies]
grpc = [
    { name = "grpcio" },
    { name = "grpcio-status" },
]

[[package]]
name = "google-api-python-client"
version = "2.176.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "google-api-core" },
    { name = "google-auth" },
    { name = "google-auth-httplib2" },
    { name = "httplib2" },
    { name = "uritemplate" },
]
sdist = { url = "https://files.pythonhosted.org/packages/3e/38/daf70faf6d05556d382bac640bc6765f09fcfb9dfb51ac4a595d3453a2a9/google_api_python_client-2.176.0.tar.gz", hash = "sha256:2b451cdd7fd10faeb5dd20f7d992f185e1e8f4124c35f2cdcc77c843139a4cf1", size = 13154773, upload-time = "2025-07-08T18:07:10.354Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/b1/2c/758f415a19a12c3c6d06902794b0dd4c521d912a59b98ab752bba48812df/google_api_python_client-2.176.0-py3-none-any.whl", hash = "sha256:e22239797f1d085341e12cd924591fc65c56d08e0af02549d7606092e6296510", size = 13678445, upload-time = "2025-07-08T18:07:07.799Z" },
]

[[package]]
name = "google-auth"
version = "2.40.3"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "cachetools" },
    { name = "pyasn1-modules" },
    { name = "rsa" },
]
sdist = { url = "https://files.pythonhosted.org/packages/9e/9b/e92ef23b84fa10a64ce4831390b7a4c2e53c0132568d99d4ae61d04c8855/google_auth-2.40.3.tar.gz", hash = "sha256:500c3a29adedeb36ea9cf24b8d10858e152f2412e3ca37829b3fa18e33d63b77", size = 281029, upload-time = "2025-06-04T18:04:57.577Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/17/63/b19553b658a1692443c62bd07e5868adaa0ad746a0751ba62c59568cd45b/google_auth-2.40.3-py2.py3-none-any.whl", hash = "sha256:1370d4593e86213563547f97a92752fc658456fe4514c809544f330fed45a7ca", size = 216137, upload-time = "2025-06-04T18:04:55.573Z" },
]

[[package]]
name = "google-auth-httplib2"
version = "0.2.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "google-auth" },
    { name = "httplib2" },
]
sdist = { url = "https://files.pythonhosted.org/packages/56/be/217a598a818567b28e859ff087f347475c807a5649296fb5a817c58dacef/google-auth-httplib2-0.2.0.tar.gz", hash = "sha256:38aa7badf48f974f1eb9861794e9c0cb2a0511a4ec0679b1f886d108f5640e05", size = 10842, upload-time = "2023-12-12T17:40:30.722Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/be/8a/fe34d2f3f9470a27b01c9e76226965863f153d5fbe276f83608562e49c04/google_auth_httplib2-0.2.0-py2.py3-none-any.whl", hash = "sha256:b65a0a2123300dd71281a7bf6e64d65a0759287df52729bdd1ae2e47dc311a3d", size = 9253, upload-time = "2023-12-12T17:40:13.055Z" },
]

[[package]]
name = "google-generativeai"
version = "0.8.5"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "google-ai-generativelanguage" },
    { name = "google-api-core" },
    { name = "google-api-python-client" },
    { name = "google-auth" },
    { name = "protobuf" },
    { name = "pydantic" },
    { name = "tqdm" },
    { name = "typing-extensions" },
]
wheels = [
    { url = "https://files.pythonhosted.org/packages/6e/40/c42ff9ded9f09ec9392879a8e6538a00b2dc185e834a3392917626255419/google_generativeai-0.8.5-py3-none-any.whl", hash = "sha256:22b420817fb263f8ed520b33285f45976d5b21e904da32b80d4fd20c055123a2", size = 155427, upload-time = "2025-04-17T00:40:00.67Z" },
]

[[package]]
name = "googleapis-common-protos"
version = "1.70.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "protobuf" },
]
sdist = { url = "https://files.pythonhosted.org/packages/39/24/33db22342cf4a2ea27c9955e6713140fedd51e8b141b5ce5260897020f1a/googleapis_common_protos-1.70.0.tar.gz", hash = "sha256:0e1b44e0ea153e6594f9f394fef15193a68aaaea2d843f83e2742717ca753257", size = 145903, upload-time = "2025-04-14T10:17:02.924Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/86/f1/62a193f0227cf15a920390abe675f386dec35f7ae3ffe6da582d3ade42c7/googleapis_common_protos-1.70.0-py3-none-any.whl", hash = "sha256:b8bfcca8c25a2bb253e0e0b0adaf8c00773e5e6af6fd92397576680b807e0fd8", size = 294530, upload-time = "2025-04-14T10:17:01.271Z" },
]

[[package]]
name = "gotrue"
version = "2.12.2"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "httpx", extra = ["http2"] },
    { name = "pydantic" },
    { name = "pyjwt" },
    { name = "pytest-mock" },
]
sdist = { url = "https://files.pythonhosted.org/packages/3f/54/5d3befeb871bc91d83a87217e56c882a5c42dfa49ad7983e41de21ff557c/gotrue-2.12.2.tar.gz", hash = "sha256:9f23c4e45d5129c495867fd95ce14c4ebe5054b07d7449b01874332cb5c1f076", size = 38059, upload-time = "2025-06-23T21:21:35.225Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/9b/1d/6d5e3eaf663eaff0d3084eb2d370d7a7c0cf83d9d94a2bba1eaa50fe145e/gotrue-2.12.2-py3-none-any.whl", hash = "sha256:72443e106507545b2814f3c52d66c3b8f5eaf05c1e43b21b0fadf72742971406", size = 43968, upload-time = "2025-06-23T21:21:33.415Z" },
]

[[package]]
name = "grpcio"
version = "1.73.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/79/e8/b43b851537da2e2f03fa8be1aef207e5cbfb1a2e014fbb6b40d24c177cd3/grpcio-1.73.1.tar.gz", hash = "sha256:7fce2cd1c0c1116cf3850564ebfc3264fba75d3c74a7414373f1238ea365ef87", size = 12730355, upload-time = "2025-06-26T01:53:24.622Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/b8/41/456caf570c55d5ac26f4c1f2db1f2ac1467d5bf3bcd660cba3e0a25b195f/grpcio-1.73.1-cp312-cp312-linux_armv7l.whl", hash = "sha256:921b25618b084e75d424a9f8e6403bfeb7abef074bb6c3174701e0f2542debcf", size = 5334621, upload-time = "2025-06-26T01:52:23.602Z" },
    { url = "https://files.pythonhosted.org/packages/2a/c2/9a15e179e49f235bb5e63b01590658c03747a43c9775e20c4e13ca04f4c4/grpcio-1.73.1-cp312-cp312-macosx_11_0_universal2.whl", hash = "sha256:277b426a0ed341e8447fbf6c1d6b68c952adddf585ea4685aa563de0f03df887", size = 10601131, upload-time = "2025-06-26T01:52:25.691Z" },
    { url = "https://files.pythonhosted.org/packages/0c/1d/1d39e90ef6348a0964caa7c5c4d05f3bae2c51ab429eb7d2e21198ac9b6d/grpcio-1.73.1-cp312-cp312-manylinux_2_17_aarch64.whl", hash = "sha256:96c112333309493c10e118d92f04594f9055774757f5d101b39f8150f8c25582", size = 5759268, upload-time = "2025-06-26T01:52:27.631Z" },
    { url = "https://files.pythonhosted.org/packages/8a/2b/2dfe9ae43de75616177bc576df4c36d6401e0959833b2e5b2d58d50c1f6b/grpcio-1.73.1-cp312-cp312-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:f48e862aed925ae987eb7084409a80985de75243389dc9d9c271dd711e589918", size = 6409791, upload-time = "2025-06-26T01:52:29.711Z" },
    { url = "https://files.pythonhosted.org/packages/6e/66/e8fe779b23b5a26d1b6949e5c70bc0a5fd08f61a6ec5ac7760d589229511/grpcio-1.73.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:83a6c2cce218e28f5040429835fa34a29319071079e3169f9543c3fbeff166d2", size = 6003728, upload-time = "2025-06-26T01:52:31.352Z" },
    { url = "https://files.pythonhosted.org/packages/a9/39/57a18fcef567784108c4fc3f5441cb9938ae5a51378505aafe81e8e15ecc/grpcio-1.73.1-cp312-cp312-musllinux_1_1_aarch64.whl", hash = "sha256:65b0458a10b100d815a8426b1442bd17001fdb77ea13665b2f7dc9e8587fdc6b", size = 6103364, upload-time = "2025-06-26T01:52:33.028Z" },
    { url = "https://files.pythonhosted.org/packages/c5/46/28919d2aa038712fc399d02fa83e998abd8c1f46c2680c5689deca06d1b2/grpcio-1.73.1-cp312-cp312-musllinux_1_1_i686.whl", hash = "sha256:0a9f3ea8dce9eae9d7cb36827200133a72b37a63896e0e61a9d5ec7d61a59ab1", size = 6749194, upload-time = "2025-06-26T01:52:34.734Z" },
    { url = "https://files.pythonhosted.org/packages/3d/56/3898526f1fad588c5d19a29ea0a3a4996fb4fa7d7c02dc1be0c9fd188b62/grpcio-1.73.1-cp312-cp312-musllinux_1_1_x86_64.whl", hash = "sha256:de18769aea47f18e782bf6819a37c1c528914bfd5683b8782b9da356506190c8", size = 6283902, upload-time = "2025-06-26T01:52:36.503Z" },
    { url = "https://files.pythonhosted.org/packages/dc/64/18b77b89c5870d8ea91818feb0c3ffb5b31b48d1b0ee3e0f0d539730fea3/grpcio-1.73.1-cp312-cp312-win32.whl", hash = "sha256:24e06a5319e33041e322d32c62b1e728f18ab8c9dbc91729a3d9f9e3ed336642", size = 3668687, upload-time = "2025-06-26T01:52:38.678Z" },
    { url = "https://files.pythonhosted.org/packages/3c/52/302448ca6e52f2a77166b2e2ed75f5d08feca4f2145faf75cb768cccb25b/grpcio-1.73.1-cp312-cp312-win_amd64.whl", hash = "sha256:303c8135d8ab176f8038c14cc10d698ae1db9c480f2b2823f7a987aa2a4c5646", size = 4334887, upload-time = "2025-06-26T01:52:40.743Z" },
    { url = "https://files.pythonhosted.org/packages/37/bf/4ca20d1acbefabcaba633ab17f4244cbbe8eca877df01517207bd6655914/grpcio-1.73.1-cp313-cp313-linux_armv7l.whl", hash = "sha256:b310824ab5092cf74750ebd8a8a8981c1810cb2b363210e70d06ef37ad80d4f9", size = 5335615, upload-time = "2025-06-26T01:52:42.896Z" },
    { url = "https://files.pythonhosted.org/packages/75/ed/45c345f284abec5d4f6d77cbca9c52c39b554397eb7de7d2fcf440bcd049/grpcio-1.73.1-cp313-cp313-macosx_11_0_universal2.whl", hash = "sha256:8f5a6df3fba31a3485096ac85b2e34b9666ffb0590df0cd044f58694e6a1f6b5", size = 10595497, upload-time = "2025-06-26T01:52:44.695Z" },
    { url = "https://files.pythonhosted.org/packages/a4/75/bff2c2728018f546d812b755455014bc718f8cdcbf5c84f1f6e5494443a8/grpcio-1.73.1-cp313-cp313-manylinux_2_17_aarch64.whl", hash = "sha256:052e28fe9c41357da42250a91926a3e2f74c046575c070b69659467ca5aa976b", size = 5765321, upload-time = "2025-06-26T01:52:46.871Z" },
    { url = "https://files.pythonhosted.org/packages/70/3b/14e43158d3b81a38251b1d231dfb45a9b492d872102a919fbf7ba4ac20cd/grpcio-1.73.1-cp313-cp313-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:1c0bf15f629b1497436596b1cbddddfa3234273490229ca29561209778ebe182", size = 6415436, upload-time = "2025-06-26T01:52:49.134Z" },
    { url = "https://files.pythonhosted.org/packages/e5/3f/81d9650ca40b54338336fd360f36773be8cb6c07c036e751d8996eb96598/grpcio-1.73.1-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:0ab860d5bfa788c5a021fba264802e2593688cd965d1374d31d2b1a34cacd854", size = 6007012, upload-time = "2025-06-26T01:52:51.076Z" },
    { url = "https://files.pythonhosted.org/packages/55/f4/59edf5af68d684d0f4f7ad9462a418ac517201c238551529098c9aa28cb0/grpcio-1.73.1-cp313-cp313-musllinux_1_1_aarch64.whl", hash = "sha256:ad1d958c31cc91ab050bd8a91355480b8e0683e21176522bacea225ce51163f2", size = 6105209, upload-time = "2025-06-26T01:52:52.773Z" },
    { url = "https://files.pythonhosted.org/packages/e4/a8/700d034d5d0786a5ba14bfa9ce974ed4c976936c2748c2bd87aa50f69b36/grpcio-1.73.1-cp313-cp313-musllinux_1_1_i686.whl", hash = "sha256:f43ffb3bd415c57224c7427bfb9e6c46a0b6e998754bfa0d00f408e1873dcbb5", size = 6753655, upload-time = "2025-06-26T01:52:55.064Z" },
    { url = "https://files.pythonhosted.org/packages/1f/29/efbd4ac837c23bc48e34bbaf32bd429f0dc9ad7f80721cdb4622144c118c/grpcio-1.73.1-cp313-cp313-musllinux_1_1_x86_64.whl", hash = "sha256:686231cdd03a8a8055f798b2b54b19428cdf18fa1549bee92249b43607c42668", size = 6287288, upload-time = "2025-06-26T01:52:57.33Z" },
    { url = "https://files.pythonhosted.org/packages/d8/61/c6045d2ce16624bbe18b5d169c1a5ce4d6c3a47bc9d0e5c4fa6a50ed1239/grpcio-1.73.1-cp313-cp313-win32.whl", hash = "sha256:89018866a096e2ce21e05eabed1567479713ebe57b1db7cbb0f1e3b896793ba4", size = 3668151, upload-time = "2025-06-26T01:52:59.405Z" },
    { url = "https://files.pythonhosted.org/packages/c2/d7/77ac689216daee10de318db5aa1b88d159432dc76a130948a56b3aa671a2/grpcio-1.73.1-cp313-cp313-win_amd64.whl", hash = "sha256:4a68f8c9966b94dff693670a5cf2b54888a48a5011c5d9ce2295a1a1465ee84f", size = 4335747, upload-time = "2025-06-26T01:53:01.233Z" },
]

[[package]]
name = "grpcio-status"
version = "1.71.2"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "googleapis-common-protos" },
    { name = "grpcio" },
    { name = "protobuf" },
]
sdist = { url = "https://files.pythonhosted.org/packages/fd/d1/b6e9877fedae3add1afdeae1f89d1927d296da9cf977eca0eb08fb8a460e/grpcio_status-1.71.2.tar.gz", hash = "sha256:c7a97e176df71cdc2c179cd1847d7fc86cca5832ad12e9798d7fed6b7a1aab50", size = 13677, upload-time = "2025-06-28T04:24:05.426Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/67/58/317b0134129b556a93a3b0afe00ee675b5657f0155509e22fcb853bafe2d/grpcio_status-1.71.2-py3-none-any.whl", hash = "sha256:803c98cb6a8b7dc6dbb785b1111aed739f241ab5e9da0bba96888aa74704cfd3", size = 14424, upload-time = "2025-06-28T04:23:42.136Z" },
]

[[package]]
name = "h11"
version = "0.16.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/01/ee/02a2c011bdab74c6fb3c75474d40b3052059d95df7e73351460c8588d963/h11-0.16.0.tar.gz", hash = "sha256:4e35b956cf45792e4caa5885e69fba00bdbc6ffafbfa020300e549b208ee5ff1", size = 101250, upload-time = "2025-04-24T03:35:25.427Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/04/4b/29cac41a4d98d144bf5f6d33995617b185d14b22401f75ca86f384e87ff1/h11-0.16.0-py3-none-any.whl", hash = "sha256:63cf8bbe7522de3bf65932fda1d9c2772064ffb3dae62d55932da54b31cb6c86", size = 37515, upload-time = "2025-04-24T03:35:24.344Z" },
]

[[package]]
name = "h2"
version = "4.2.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "hpack" },
    { name = "hyperframe" },
]
sdist = { url = "https://files.pythonhosted.org/packages/1b/38/d7f80fd13e6582fb8e0df8c9a653dcc02b03ca34f4d72f34869298c5baf8/h2-4.2.0.tar.gz", hash = "sha256:c8a52129695e88b1a0578d8d2cc6842bbd79128ac685463b887ee278126ad01f", size = 2150682, upload-time = "2025-02-02T07:43:51.815Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d0/9e/984486f2d0a0bd2b024bf4bc1c62688fcafa9e61991f041fb0e2def4a982/h2-4.2.0-py3-none-any.whl", hash = "sha256:479a53ad425bb29af087f3458a61d30780bc818e4ebcf01f0b536ba916462ed0", size = 60957, upload-time = "2025-02-01T11:02:26.481Z" },
]

[[package]]
name = "hpack"
version = "4.1.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/2c/48/71de9ed269fdae9c8057e5a4c0aa7402e8bb16f2c6e90b3aa53327b113f8/hpack-4.1.0.tar.gz", hash = "sha256:ec5eca154f7056aa06f196a557655c5b009b382873ac8d1e66e79e87535f1dca", size = 51276, upload-time = "2025-01-22T21:44:58.347Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/07/c6/80c95b1b2b94682a72cbdbfb85b81ae2daffa4291fbfa1b1464502ede10d/hpack-4.1.0-py3-none-any.whl", hash = "sha256:157ac792668d995c657d93111f46b4535ed114f0c9c8d672271bbec7eae1b496", size = 34357, upload-time = "2025-01-22T21:44:56.92Z" },
]

[[package]]
name = "httpcore"
version = "1.0.9"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "certifi" },
    { name = "h11" },
]
sdist = { url = "https://files.pythonhosted.org/packages/06/94/82699a10bca87a5556c9c59b5963f2d039dbd239f25bc2a63907a05a14cb/httpcore-1.0.9.tar.gz", hash = "sha256:6e34463af53fd2ab5d807f399a9b45ea31c3dfa2276f15a2c3f00afff6e176e8", size = 85484, upload-time = "2025-04-24T22:06:22.219Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/7e/f5/f66802a942d491edb555dd61e3a9961140fd64c90bce1eafd741609d334d/httpcore-1.0.9-py3-none-any.whl", hash = "sha256:2d400746a40668fc9dec9810239072b40b4484b640a8c38fd654a024c7a1bf55", size = 78784, upload-time = "2025-04-24T22:06:20.566Z" },
]

[[package]]
name = "httplib2"
version = "0.22.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "pyparsing" },
]
sdist = { url = "https://files.pythonhosted.org/packages/3d/ad/2371116b22d616c194aa25ec410c9c6c37f23599dcd590502b74db197584/httplib2-0.22.0.tar.gz", hash = "sha256:d7a10bc5ef5ab08322488bde8c726eeee5c8618723fdb399597ec58f3d82df81", size = 351116, upload-time = "2023-03-21T22:29:37.214Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/a8/6c/d2fbdaaa5959339d53ba38e94c123e4e84b8fbc4b84beb0e70d7c1608486/httplib2-0.22.0-py3-none-any.whl", hash = "sha256:14ae0a53c1ba8f3d37e9e27cf37eabb0fb9980f435ba405d546948b009dd64dc", size = 96854, upload-time = "2023-03-21T22:29:35.683Z" },
]

[[package]]
name = "httptools"
version = "0.6.4"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/a7/9a/ce5e1f7e131522e6d3426e8e7a490b3a01f39a6696602e1c4f33f9e94277/httptools-0.6.4.tar.gz", hash = "sha256:4e93eee4add6493b59a5c514da98c939b244fce4a0d8879cd3f466562f4b7d5c", size = 240639, upload-time = "2024-10-16T19:45:08.902Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/bb/0e/d0b71465c66b9185f90a091ab36389a7352985fe857e352801c39d6127c8/httptools-0.6.4-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:df017d6c780287d5c80601dafa31f17bddb170232d85c066604d8558683711a2", size = 200683, upload-time = "2024-10-16T19:44:30.175Z" },
    { url = "https://files.pythonhosted.org/packages/e2/b8/412a9bb28d0a8988de3296e01efa0bd62068b33856cdda47fe1b5e890954/httptools-0.6.4-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:85071a1e8c2d051b507161f6c3e26155b5c790e4e28d7f236422dbacc2a9cc44", size = 104337, upload-time = "2024-10-16T19:44:31.786Z" },
    { url = "https://files.pythonhosted.org/packages/9b/01/6fb20be3196ffdc8eeec4e653bc2a275eca7f36634c86302242c4fbb2760/httptools-0.6.4-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:69422b7f458c5af875922cdb5bd586cc1f1033295aa9ff63ee196a87519ac8e1", size = 508796, upload-time = "2024-10-16T19:44:32.825Z" },
    { url = "https://files.pythonhosted.org/packages/f7/d8/b644c44acc1368938317d76ac991c9bba1166311880bcc0ac297cb9d6bd7/httptools-0.6.4-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:16e603a3bff50db08cd578d54f07032ca1631450ceb972c2f834c2b860c28ea2", size = 510837, upload-time = "2024-10-16T19:44:33.974Z" },
    { url = "https://files.pythonhosted.org/packages/52/d8/254d16a31d543073a0e57f1c329ca7378d8924e7e292eda72d0064987486/httptools-0.6.4-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:ec4f178901fa1834d4a060320d2f3abc5c9e39766953d038f1458cb885f47e81", size = 485289, upload-time = "2024-10-16T19:44:35.111Z" },
    { url = "https://files.pythonhosted.org/packages/5f/3c/4aee161b4b7a971660b8be71a92c24d6c64372c1ab3ae7f366b3680df20f/httptools-0.6.4-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:f9eb89ecf8b290f2e293325c646a211ff1c2493222798bb80a530c5e7502494f", size = 489779, upload-time = "2024-10-16T19:44:36.253Z" },
    { url = "https://files.pythonhosted.org/packages/12/b7/5cae71a8868e555f3f67a50ee7f673ce36eac970f029c0c5e9d584352961/httptools-0.6.4-cp312-cp312-win_amd64.whl", hash = "sha256:db78cb9ca56b59b016e64b6031eda5653be0589dba2b1b43453f6e8b405a0970", size = 88634, upload-time = "2024-10-16T19:44:37.357Z" },
    { url = "https://files.pythonhosted.org/packages/94/a3/9fe9ad23fd35f7de6b91eeb60848986058bd8b5a5c1e256f5860a160cc3e/httptools-0.6.4-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:ade273d7e767d5fae13fa637f4d53b6e961fb7fd93c7797562663f0171c26660", size = 197214, upload-time = "2024-10-16T19:44:38.738Z" },
    { url = "https://files.pythonhosted.org/packages/ea/d9/82d5e68bab783b632023f2fa31db20bebb4e89dfc4d2293945fd68484ee4/httptools-0.6.4-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:856f4bc0478ae143bad54a4242fccb1f3f86a6e1be5548fecfd4102061b3a083", size = 102431, upload-time = "2024-10-16T19:44:39.818Z" },
    { url = "https://files.pythonhosted.org/packages/96/c1/cb499655cbdbfb57b577734fde02f6fa0bbc3fe9fb4d87b742b512908dff/httptools-0.6.4-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:322d20ea9cdd1fa98bd6a74b77e2ec5b818abdc3d36695ab402a0de8ef2865a3", size = 473121, upload-time = "2024-10-16T19:44:41.189Z" },
    { url = "https://files.pythonhosted.org/packages/af/71/ee32fd358f8a3bb199b03261f10921716990808a675d8160b5383487a317/httptools-0.6.4-cp313-cp313-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:4d87b29bd4486c0093fc64dea80231f7c7f7eb4dc70ae394d70a495ab8436071", size = 473805, upload-time = "2024-10-16T19:44:42.384Z" },
    { url = "https://files.pythonhosted.org/packages/8a/0a/0d4df132bfca1507114198b766f1737d57580c9ad1cf93c1ff673e3387be/httptools-0.6.4-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:342dd6946aa6bda4b8f18c734576106b8a31f2fe31492881a9a160ec84ff4bd5", size = 448858, upload-time = "2024-10-16T19:44:43.959Z" },
    { url = "https://files.pythonhosted.org/packages/1e/6a/787004fdef2cabea27bad1073bf6a33f2437b4dbd3b6fb4a9d71172b1c7c/httptools-0.6.4-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:4b36913ba52008249223042dca46e69967985fb4051951f94357ea681e1f5dc0", size = 452042, upload-time = "2024-10-16T19:44:45.071Z" },
    { url = "https://files.pythonhosted.org/packages/4d/dc/7decab5c404d1d2cdc1bb330b1bf70e83d6af0396fd4fc76fc60c0d522bf/httptools-0.6.4-cp313-cp313-win_amd64.whl", hash = "sha256:28908df1b9bb8187393d5b5db91435ccc9c8e891657f9cbb42a2541b44c82fc8", size = 87682, upload-time = "2024-10-16T19:44:46.46Z" },
]

[[package]]
name = "httpx"
version = "0.28.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "anyio" },
    { name = "certifi" },
    { name = "httpcore" },
    { name = "idna" },
]
sdist = { url = "https://files.pythonhosted.org/packages/b1/df/48c586a5fe32a0f01324ee087459e112ebb7224f646c0b5023f5e79e9956/httpx-0.28.1.tar.gz", hash = "sha256:75e98c5f16b0f35b567856f597f06ff2270a374470a5c2392242528e3e3e42fc", size = 141406, upload-time = "2024-12-06T15:37:23.222Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/2a/39/e50c7c3a983047577ee07d2a9e53faf5a69493943ec3f6a384bdc792deb2/httpx-0.28.1-py3-none-any.whl", hash = "sha256:d909fcccc110f8c7faf814ca82a9a4d816bc5a6dbfea25d6591d6985b8ba59ad", size = 73517, upload-time = "2024-12-06T15:37:21.509Z" },
]

[package.optional-dependencies]
http2 = [
    { name = "h2" },
]

[[package]]
name = "hyperframe"
version = "6.1.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/02/e7/94f8232d4a74cc99514c13a9f995811485a6903d48e5d952771ef6322e30/hyperframe-6.1.0.tar.gz", hash = "sha256:f630908a00854a7adeabd6382b43923a4c4cd4b821fcb527e6ab9e15382a3b08", size = 26566, upload-time = "2025-01-22T21:41:49.302Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/48/30/47d0bf6072f7252e6521f3447ccfa40b421b6824517f82854703d0f5a98b/hyperframe-6.1.0-py3-none-any.whl", hash = "sha256:b03380493a519fce58ea5af42e4a42317bf9bd425596f7a0835ffce80f1a42e5", size = 13007, upload-time = "2025-01-22T21:41:47.295Z" },
]

[[package]]
name = "idna"
version = "3.10"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/f1/70/7703c29685631f5a7590aa73f1f1d3fa9a380e654b86af429e0934a32f7d/idna-3.10.tar.gz", hash = "sha256:12f65c9b470abda6dc35cf8e63cc574b1c52b11df2c86030af0ac09b01b13ea9", size = 190490, upload-time = "2024-09-15T18:07:39.745Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/76/c6/c88e154df9c4e1a2a66ccf0005a88dfb2650c1dffb6f5ce603dfbd452ce3/idna-3.10-py3-none-any.whl", hash = "sha256:946d195a0d259cbba61165e88e65941f16e9b36ea6ddb97f00452bae8b1287d3", size = 70442, upload-time = "2024-09-15T18:07:37.964Z" },
]

[[package]]
name = "iniconfig"
version = "2.1.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/f2/97/ebf4da567aa6827c909642694d71c9fcf53e5b504f2d96afea02718862f3/iniconfig-2.1.0.tar.gz", hash = "sha256:3abbd2e30b36733fee78f9c7f7308f2d0050e88f0087fd25c2645f63c773e1c7", size = 4793, upload-time = "2025-03-19T20:09:59.721Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/2c/e1/e6716421ea10d38022b952c159d5161ca1193197fb744506875fbb87ea7b/iniconfig-2.1.0-py3-none-any.whl", hash = "sha256:9deba5723312380e77435581c6bf4935c94cbfab9b1ed33ef8d238ea168eb760", size = 6050, upload-time = "2025-03-19T20:10:01.071Z" },
]

[[package]]
name = "jiter"
version = "0.10.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/ee/9d/ae7ddb4b8ab3fb1b51faf4deb36cb48a4fbbd7cb36bad6a5fca4741306f7/jiter-0.10.0.tar.gz", hash = "sha256:07a7142c38aacc85194391108dc91b5b57093c978a9932bd86a36862759d9500", size = 162759, upload-time = "2025-05-18T19:04:59.73Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/6d/b5/348b3313c58f5fbfb2194eb4d07e46a35748ba6e5b3b3046143f3040bafa/jiter-0.10.0-cp312-cp312-macosx_10_12_x86_64.whl", hash = "sha256:1e274728e4a5345a6dde2d343c8da018b9d4bd4350f5a472fa91f66fda44911b", size = 312262, upload-time = "2025-05-18T19:03:44.637Z" },
    { url = "https://files.pythonhosted.org/packages/9c/4a/6a2397096162b21645162825f058d1709a02965606e537e3304b02742e9b/jiter-0.10.0-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:7202ae396446c988cb2a5feb33a543ab2165b786ac97f53b59aafb803fef0744", size = 320124, upload-time = "2025-05-18T19:03:46.341Z" },
    { url = "https://files.pythonhosted.org/packages/2a/85/1ce02cade7516b726dd88f59a4ee46914bf79d1676d1228ef2002ed2f1c9/jiter-0.10.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:23ba7722d6748b6920ed02a8f1726fb4b33e0fd2f3f621816a8b486c66410ab2", size = 345330, upload-time = "2025-05-18T19:03:47.596Z" },
    { url = "https://files.pythonhosted.org/packages/75/d0/bb6b4f209a77190ce10ea8d7e50bf3725fc16d3372d0a9f11985a2b23eff/jiter-0.10.0-cp312-cp312-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:371eab43c0a288537d30e1f0b193bc4eca90439fc08a022dd83e5e07500ed026", size = 369670, upload-time = "2025-05-18T19:03:49.334Z" },
    { url = "https://files.pythonhosted.org/packages/a0/f5/a61787da9b8847a601e6827fbc42ecb12be2c925ced3252c8ffcb56afcaf/jiter-0.10.0-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:6c675736059020365cebc845a820214765162728b51ab1e03a1b7b3abb70f74c", size = 489057, upload-time = "2025-05-18T19:03:50.66Z" },
    { url = "https://files.pythonhosted.org/packages/12/e4/6f906272810a7b21406c760a53aadbe52e99ee070fc5c0cb191e316de30b/jiter-0.10.0-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:0c5867d40ab716e4684858e4887489685968a47e3ba222e44cde6e4a2154f959", size = 389372, upload-time = "2025-05-18T19:03:51.98Z" },
    { url = "https://files.pythonhosted.org/packages/e2/ba/77013b0b8ba904bf3762f11e0129b8928bff7f978a81838dfcc958ad5728/jiter-0.10.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:395bb9a26111b60141757d874d27fdea01b17e8fac958b91c20128ba8f4acc8a", size = 352038, upload-time = "2025-05-18T19:03:53.703Z" },
    { url = "https://files.pythonhosted.org/packages/67/27/c62568e3ccb03368dbcc44a1ef3a423cb86778a4389e995125d3d1aaa0a4/jiter-0.10.0-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.whl", hash = "sha256:6842184aed5cdb07e0c7e20e5bdcfafe33515ee1741a6835353bb45fe5d1bd95", size = 391538, upload-time = "2025-05-18T19:03:55.046Z" },
    { url = "https://files.pythonhosted.org/packages/c0/72/0d6b7e31fc17a8fdce76164884edef0698ba556b8eb0af9546ae1a06b91d/jiter-0.10.0-cp312-cp312-musllinux_1_1_aarch64.whl", hash = "sha256:62755d1bcea9876770d4df713d82606c8c1a3dca88ff39046b85a048566d56ea", size = 523557, upload-time = "2025-05-18T19:03:56.386Z" },
    { url = "https://files.pythonhosted.org/packages/2f/09/bc1661fbbcbeb6244bd2904ff3a06f340aa77a2b94e5a7373fd165960ea3/jiter-0.10.0-cp312-cp312-musllinux_1_1_x86_64.whl", hash = "sha256:533efbce2cacec78d5ba73a41756beff8431dfa1694b6346ce7af3a12c42202b", size = 514202, upload-time = "2025-05-18T19:03:57.675Z" },
    { url = "https://files.pythonhosted.org/packages/1b/84/5a5d5400e9d4d54b8004c9673bbe4403928a00d28529ff35b19e9d176b19/jiter-0.10.0-cp312-cp312-win32.whl", hash = "sha256:8be921f0cadd245e981b964dfbcd6fd4bc4e254cdc069490416dd7a2632ecc01", size = 211781, upload-time = "2025-05-18T19:03:59.025Z" },
    { url = "https://files.pythonhosted.org/packages/9b/52/7ec47455e26f2d6e5f2ea4951a0652c06e5b995c291f723973ae9e724a65/jiter-0.10.0-cp312-cp312-win_amd64.whl", hash = "sha256:a7c7d785ae9dda68c2678532a5a1581347e9c15362ae9f6e68f3fdbfb64f2e49", size = 206176, upload-time = "2025-05-18T19:04:00.305Z" },
    { url = "https://files.pythonhosted.org/packages/2e/b0/279597e7a270e8d22623fea6c5d4eeac328e7d95c236ed51a2b884c54f70/jiter-0.10.0-cp313-cp313-macosx_10_12_x86_64.whl", hash = "sha256:e0588107ec8e11b6f5ef0e0d656fb2803ac6cf94a96b2b9fc675c0e3ab5e8644", size = 311617, upload-time = "2025-05-18T19:04:02.078Z" },
    { url = "https://files.pythonhosted.org/packages/91/e3/0916334936f356d605f54cc164af4060e3e7094364add445a3bc79335d46/jiter-0.10.0-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:cafc4628b616dc32530c20ee53d71589816cf385dd9449633e910d596b1f5c8a", size = 318947, upload-time = "2025-05-18T19:04:03.347Z" },
    { url = "https://files.pythonhosted.org/packages/6a/8e/fd94e8c02d0e94539b7d669a7ebbd2776e51f329bb2c84d4385e8063a2ad/jiter-0.10.0-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:520ef6d981172693786a49ff5b09eda72a42e539f14788124a07530f785c3ad6", size = 344618, upload-time = "2025-05-18T19:04:04.709Z" },
    { url = "https://files.pythonhosted.org/packages/6f/b0/f9f0a2ec42c6e9c2e61c327824687f1e2415b767e1089c1d9135f43816bd/jiter-0.10.0-cp313-cp313-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:554dedfd05937f8fc45d17ebdf298fe7e0c77458232bcb73d9fbbf4c6455f5b3", size = 368829, upload-time = "2025-05-18T19:04:06.912Z" },
    { url = "https://files.pythonhosted.org/packages/e8/57/5bbcd5331910595ad53b9fd0c610392ac68692176f05ae48d6ce5c852967/jiter-0.10.0-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:5bc299da7789deacf95f64052d97f75c16d4fc8c4c214a22bf8d859a4288a1c2", size = 491034, upload-time = "2025-05-18T19:04:08.222Z" },
    { url = "https://files.pythonhosted.org/packages/9b/be/c393df00e6e6e9e623a73551774449f2f23b6ec6a502a3297aeeece2c65a/jiter-0.10.0-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:5161e201172de298a8a1baad95eb85db4fb90e902353b1f6a41d64ea64644e25", size = 388529, upload-time = "2025-05-18T19:04:09.566Z" },
    { url = "https://files.pythonhosted.org/packages/42/3e/df2235c54d365434c7f150b986a6e35f41ebdc2f95acea3036d99613025d/jiter-0.10.0-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:2e2227db6ba93cb3e2bf67c87e594adde0609f146344e8207e8730364db27041", size = 350671, upload-time = "2025-05-18T19:04:10.98Z" },
    { url = "https://files.pythonhosted.org/packages/c6/77/71b0b24cbcc28f55ab4dbfe029f9a5b73aeadaba677843fc6dc9ed2b1d0a/jiter-0.10.0-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.whl", hash = "sha256:15acb267ea5e2c64515574b06a8bf393fbfee6a50eb1673614aa45f4613c0cca", size = 390864, upload-time = "2025-05-18T19:04:12.722Z" },
    { url = "https://files.pythonhosted.org/packages/6a/d3/ef774b6969b9b6178e1d1e7a89a3bd37d241f3d3ec5f8deb37bbd203714a/jiter-0.10.0-cp313-cp313-musllinux_1_1_aarch64.whl", hash = "sha256:901b92f2e2947dc6dfcb52fd624453862e16665ea909a08398dde19c0731b7f4", size = 522989, upload-time = "2025-05-18T19:04:14.261Z" },
    { url = "https://files.pythonhosted.org/packages/0c/41/9becdb1d8dd5d854142f45a9d71949ed7e87a8e312b0bede2de849388cb9/jiter-0.10.0-cp313-cp313-musllinux_1_1_x86_64.whl", hash = "sha256:d0cb9a125d5a3ec971a094a845eadde2db0de85b33c9f13eb94a0c63d463879e", size = 513495, upload-time = "2025-05-18T19:04:15.603Z" },
    { url = "https://files.pythonhosted.org/packages/9c/36/3468e5a18238bdedae7c4d19461265b5e9b8e288d3f86cd89d00cbb48686/jiter-0.10.0-cp313-cp313-win32.whl", hash = "sha256:48a403277ad1ee208fb930bdf91745e4d2d6e47253eedc96e2559d1e6527006d", size = 211289, upload-time = "2025-05-18T19:04:17.541Z" },
    { url = "https://files.pythonhosted.org/packages/7e/07/1c96b623128bcb913706e294adb5f768fb7baf8db5e1338ce7b4ee8c78ef/jiter-0.10.0-cp313-cp313-win_amd64.whl", hash = "sha256:75f9eb72ecb640619c29bf714e78c9c46c9c4eaafd644bf78577ede459f330d4", size = 205074, upload-time = "2025-05-18T19:04:19.21Z" },
    { url = "https://files.pythonhosted.org/packages/54/46/caa2c1342655f57d8f0f2519774c6d67132205909c65e9aa8255e1d7b4f4/jiter-0.10.0-cp313-cp313t-macosx_11_0_arm64.whl", hash = "sha256:28ed2a4c05a1f32ef0e1d24c2611330219fed727dae01789f4a335617634b1ca", size = 318225, upload-time = "2025-05-18T19:04:20.583Z" },
    { url = "https://files.pythonhosted.org/packages/43/84/c7d44c75767e18946219ba2d703a5a32ab37b0bc21886a97bc6062e4da42/jiter-0.10.0-cp313-cp313t-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:14a4c418b1ec86a195f1ca69da8b23e8926c752b685af665ce30777233dfe070", size = 350235, upload-time = "2025-05-18T19:04:22.363Z" },
    { url = "https://files.pythonhosted.org/packages/01/16/f5a0135ccd968b480daad0e6ab34b0c7c5ba3bc447e5088152696140dcb3/jiter-0.10.0-cp313-cp313t-win_amd64.whl", hash = "sha256:d7bfed2fe1fe0e4dda6ef682cee888ba444b21e7a6553e03252e4feb6cf0adca", size = 207278, upload-time = "2025-05-18T19:04:23.627Z" },
    { url = "https://files.pythonhosted.org/packages/1c/9b/1d646da42c3de6c2188fdaa15bce8ecb22b635904fc68be025e21249ba44/jiter-0.10.0-cp314-cp314-macosx_10_12_x86_64.whl", hash = "sha256:5e9251a5e83fab8d87799d3e1a46cb4b7f2919b895c6f4483629ed2446f66522", size = 310866, upload-time = "2025-05-18T19:04:24.891Z" },
    { url = "https://files.pythonhosted.org/packages/ad/0e/26538b158e8a7c7987e94e7aeb2999e2e82b1f9d2e1f6e9874ddf71ebda0/jiter-0.10.0-cp314-cp314-macosx_11_0_arm64.whl", hash = "sha256:023aa0204126fe5b87ccbcd75c8a0d0261b9abdbbf46d55e7ae9f8e22424eeb8", size = 318772, upload-time = "2025-05-18T19:04:26.161Z" },
    { url = "https://files.pythonhosted.org/packages/7b/fb/d302893151caa1c2636d6574d213e4b34e31fd077af6050a9c5cbb42f6fb/jiter-0.10.0-cp314-cp314-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:3c189c4f1779c05f75fc17c0c1267594ed918996a231593a21a5ca5438445216", size = 344534, upload-time = "2025-05-18T19:04:27.495Z" },
    { url = "https://files.pythonhosted.org/packages/01/d8/5780b64a149d74e347c5128d82176eb1e3241b1391ac07935693466d6219/jiter-0.10.0-cp314-cp314-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:15720084d90d1098ca0229352607cd68256c76991f6b374af96f36920eae13c4", size = 369087, upload-time = "2025-05-18T19:04:28.896Z" },
    { url = "https://files.pythonhosted.org/packages/e8/5b/f235a1437445160e777544f3ade57544daf96ba7e96c1a5b24a6f7ac7004/jiter-0.10.0-cp314-cp314-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:e4f2fb68e5f1cfee30e2b2a09549a00683e0fde4c6a2ab88c94072fc33cb7426", size = 490694, upload-time = "2025-05-18T19:04:30.183Z" },
    { url = "https://files.pythonhosted.org/packages/85/a9/9c3d4617caa2ff89cf61b41e83820c27ebb3f7b5fae8a72901e8cd6ff9be/jiter-0.10.0-cp314-cp314-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:ce541693355fc6da424c08b7edf39a2895f58d6ea17d92cc2b168d20907dee12", size = 388992, upload-time = "2025-05-18T19:04:32.028Z" },
    { url = "https://files.pythonhosted.org/packages/68/b1/344fd14049ba5c94526540af7eb661871f9c54d5f5601ff41a959b9a0bbd/jiter-0.10.0-cp314-cp314-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:31c50c40272e189d50006ad5c73883caabb73d4e9748a688b216e85a9a9ca3b9", size = 351723, upload-time = "2025-05-18T19:04:33.467Z" },
    { url = "https://files.pythonhosted.org/packages/41/89/4c0e345041186f82a31aee7b9d4219a910df672b9fef26f129f0cda07a29/jiter-0.10.0-cp314-cp314-manylinux_2_5_i686.manylinux1_i686.whl", hash = "sha256:fa3402a2ff9815960e0372a47b75c76979d74402448509ccd49a275fa983ef8a", size = 392215, upload-time = "2025-05-18T19:04:34.827Z" },
    { url = "https://files.pythonhosted.org/packages/55/58/ee607863e18d3f895feb802154a2177d7e823a7103f000df182e0f718b38/jiter-0.10.0-cp314-cp314-musllinux_1_1_aarch64.whl", hash = "sha256:1956f934dca32d7bb647ea21d06d93ca40868b505c228556d3373cbd255ce853", size = 522762, upload-time = "2025-05-18T19:04:36.19Z" },
    { url = "https://files.pythonhosted.org/packages/15/d0/9123fb41825490d16929e73c212de9a42913d68324a8ce3c8476cae7ac9d/jiter-0.10.0-cp314-cp314-musllinux_1_1_x86_64.whl", hash = "sha256:fcedb049bdfc555e261d6f65a6abe1d5ad68825b7202ccb9692636c70fcced86", size = 513427, upload-time = "2025-05-18T19:04:37.544Z" },
    { url = "https://files.pythonhosted.org/packages/d8/b3/2bd02071c5a2430d0b70403a34411fc519c2f227da7b03da9ba6a956f931/jiter-0.10.0-cp314-cp314-win32.whl", hash = "sha256:ac509f7eccca54b2a29daeb516fb95b6f0bd0d0d8084efaf8ed5dfc7b9f0b357", size = 210127, upload-time = "2025-05-18T19:04:38.837Z" },
    { url = "https://files.pythonhosted.org/packages/03/0c/5fe86614ea050c3ecd728ab4035534387cd41e7c1855ef6c031f1ca93e3f/jiter-0.10.0-cp314-cp314t-macosx_11_0_arm64.whl", hash = "sha256:5ed975b83a2b8639356151cef5c0d597c68376fc4922b45d0eb384ac058cfa00", size = 318527, upload-time = "2025-05-18T19:04:40.612Z" },
    { url = "https://files.pythonhosted.org/packages/b3/4a/4175a563579e884192ba6e81725fc0448b042024419be8d83aa8a80a3f44/jiter-0.10.0-cp314-cp314t-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:3aa96f2abba33dc77f79b4cf791840230375f9534e5fac927ccceb58c5e604a5", size = 354213, upload-time = "2025-05-18T19:04:41.894Z" },
]

[[package]]
name = "loguru"
version = "0.7.3"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "colorama", marker = "sys_platform == 'win32'" },
    { name = "win32-setctime", marker = "sys_platform == 'win32'" },
]
sdist = { url = "https://files.pythonhosted.org/packages/3a/05/a1dae3dffd1116099471c643b8924f5aa6524411dc6c63fdae648c4f1aca/loguru-0.7.3.tar.gz", hash = "sha256:19480589e77d47b8d85b2c827ad95d49bf31b0dcde16593892eb51dd18706eb6", size = 63559, upload-time = "2024-12-06T11:20:56.608Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/0c/29/0348de65b8cc732daa3e33e67806420b2ae89bdce2b04af740289c5c6c8c/loguru-0.7.3-py3-none-any.whl", hash = "sha256:31a33c10c8e1e10422bfd431aeb5d351c7cf7fa671e3c4df004162264b28220c", size = 61595, upload-time = "2024-12-06T11:20:54.538Z" },
]

[[package]]
name = "multidict"
version = "6.6.3"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/3d/2c/5dad12e82fbdf7470f29bff2171484bf07cb3b16ada60a6589af8f376440/multidict-6.6.3.tar.gz", hash = "sha256:798a9eb12dab0a6c2e29c1de6f3468af5cb2da6053a20dfa3344907eed0937cc", size = 101006, upload-time = "2025-06-30T15:53:46.929Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/0e/a0/6b57988ea102da0623ea814160ed78d45a2645e4bbb499c2896d12833a70/multidict-6.6.3-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:056bebbeda16b2e38642d75e9e5310c484b7c24e3841dc0fb943206a72ec89d6", size = 76514, upload-time = "2025-06-30T15:51:48.728Z" },
    { url = "https://files.pythonhosted.org/packages/07/7a/d1e92665b0850c6c0508f101f9cf0410c1afa24973e1115fe9c6a185ebf7/multidict-6.6.3-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:e5f481cccb3c5c5e5de5d00b5141dc589c1047e60d07e85bbd7dea3d4580d63f", size = 45394, upload-time = "2025-06-30T15:51:49.986Z" },
    { url = "https://files.pythonhosted.org/packages/52/6f/dd104490e01be6ef8bf9573705d8572f8c2d2c561f06e3826b081d9e6591/multidict-6.6.3-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:10bea2ee839a759ee368b5a6e47787f399b41e70cf0c20d90dfaf4158dfb4e55", size = 43590, upload-time = "2025-06-30T15:51:51.331Z" },
    { url = "https://files.pythonhosted.org/packages/44/fe/06e0e01b1b0611e6581b7fd5a85b43dacc08b6cea3034f902f383b0873e5/multidict-6.6.3-cp312-cp312-manylinux1_i686.manylinux2014_i686.manylinux_2_17_i686.manylinux_2_5_i686.whl", hash = "sha256:2334cfb0fa9549d6ce2c21af2bfbcd3ac4ec3646b1b1581c88e3e2b1779ec92b", size = 237292, upload-time = "2025-06-30T15:51:52.584Z" },
    { url = "https://files.pythonhosted.org/packages/ce/71/4f0e558fb77696b89c233c1ee2d92f3e1d5459070a0e89153c9e9e804186/multidict-6.6.3-cp312-cp312-manylinux2014_aarch64.manylinux_2_17_aarch64.manylinux_2_28_aarch64.whl", hash = "sha256:b8fee016722550a2276ca2cb5bb624480e0ed2bd49125b2b73b7010b9090e888", size = 258385, upload-time = "2025-06-30T15:51:53.913Z" },
    { url = "https://files.pythonhosted.org/packages/e3/25/cca0e68228addad24903801ed1ab42e21307a1b4b6dd2cf63da5d3ae082a/multidict-6.6.3-cp312-cp312-manylinux2014_armv7l.manylinux_2_17_armv7l.manylinux_2_31_armv7l.whl", hash = "sha256:e5511cb35f5c50a2db21047c875eb42f308c5583edf96bd8ebf7d770a9d68f6d", size = 242328, upload-time = "2025-06-30T15:51:55.672Z" },
    { url = "https://files.pythonhosted.org/packages/6e/a3/46f2d420d86bbcb8fe660b26a10a219871a0fbf4d43cb846a4031533f3e0/multidict-6.6.3-cp312-cp312-manylinux2014_ppc64le.manylinux_2_17_ppc64le.manylinux_2_28_ppc64le.whl", hash = "sha256:712b348f7f449948e0a6c4564a21c7db965af900973a67db432d724619b3c680", size = 268057, upload-time = "2025-06-30T15:51:57.037Z" },
    { url = "https://files.pythonhosted.org/packages/9e/73/1c743542fe00794a2ec7466abd3f312ccb8fad8dff9f36d42e18fb1ec33e/multidict-6.6.3-cp312-cp312-manylinux2014_s390x.manylinux_2_17_s390x.manylinux_2_28_s390x.whl", hash = "sha256:e4e15d2138ee2694e038e33b7c3da70e6b0ad8868b9f8094a72e1414aeda9c1a", size = 269341, upload-time = "2025-06-30T15:51:59.111Z" },
    { url = "https://files.pythonhosted.org/packages/a4/11/6ec9dcbe2264b92778eeb85407d1df18812248bf3506a5a1754bc035db0c/multidict-6.6.3-cp312-cp312-manylinux2014_x86_64.manylinux_2_17_x86_64.manylinux_2_28_x86_64.whl", hash = "sha256:8df25594989aebff8a130f7899fa03cbfcc5d2b5f4a461cf2518236fe6f15961", size = 256081, upload-time = "2025-06-30T15:52:00.533Z" },
    { url = "https://files.pythonhosted.org/packages/9b/2b/631b1e2afeb5f1696846d747d36cda075bfdc0bc7245d6ba5c319278d6c4/multidict-6.6.3-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:159ca68bfd284a8860f8d8112cf0521113bffd9c17568579e4d13d1f1dc76b65", size = 253581, upload-time = "2025-06-30T15:52:02.43Z" },
    { url = "https://files.pythonhosted.org/packages/bf/0e/7e3b93f79efeb6111d3bf9a1a69e555ba1d07ad1c11bceb56b7310d0d7ee/multidict-6.6.3-cp312-cp312-musllinux_1_2_armv7l.whl", hash = "sha256:e098c17856a8c9ade81b4810888c5ad1914099657226283cab3062c0540b0643", size = 250750, upload-time = "2025-06-30T15:52:04.26Z" },
    { url = "https://files.pythonhosted.org/packages/ad/9e/086846c1d6601948e7de556ee464a2d4c85e33883e749f46b9547d7b0704/multidict-6.6.3-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:67c92ed673049dec52d7ed39f8cf9ebbadf5032c774058b4406d18c8f8fe7063", size = 251548, upload-time = "2025-06-30T15:52:06.002Z" },
    { url = "https://files.pythonhosted.org/packages/8c/7b/86ec260118e522f1a31550e87b23542294880c97cfbf6fb18cc67b044c66/multidict-6.6.3-cp312-cp312-musllinux_1_2_ppc64le.whl", hash = "sha256:bd0578596e3a835ef451784053cfd327d607fc39ea1a14812139339a18a0dbc3", size = 262718, upload-time = "2025-06-30T15:52:07.707Z" },
    { url = "https://files.pythonhosted.org/packages/8c/bd/22ce8f47abb0be04692c9fc4638508b8340987b18691aa7775d927b73f72/multidict-6.6.3-cp312-cp312-musllinux_1_2_s390x.whl", hash = "sha256:346055630a2df2115cd23ae271910b4cae40f4e336773550dca4889b12916e75", size = 259603, upload-time = "2025-06-30T15:52:09.58Z" },
    { url = "https://files.pythonhosted.org/packages/07/9c/91b7ac1691be95cd1f4a26e36a74b97cda6aa9820632d31aab4410f46ebd/multidict-6.6.3-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:555ff55a359302b79de97e0468e9ee80637b0de1fce77721639f7cd9440b3a10", size = 251351, upload-time = "2025-06-30T15:52:10.947Z" },
    { url = "https://files.pythonhosted.org/packages/6f/5c/4d7adc739884f7a9fbe00d1eac8c034023ef8bad71f2ebe12823ca2e3649/multidict-6.6.3-cp312-cp312-win32.whl", hash = "sha256:73ab034fb8d58ff85c2bcbadc470efc3fafeea8affcf8722855fb94557f14cc5", size = 41860, upload-time = "2025-06-30T15:52:12.334Z" },
    { url = "https://files.pythonhosted.org/packages/6a/a3/0fbc7afdf7cb1aa12a086b02959307848eb6bcc8f66fcb66c0cb57e2a2c1/multidict-6.6.3-cp312-cp312-win_amd64.whl", hash = "sha256:04cbcce84f63b9af41bad04a54d4cc4e60e90c35b9e6ccb130be2d75b71f8c17", size = 45982, upload-time = "2025-06-30T15:52:13.6Z" },
    { url = "https://files.pythonhosted.org/packages/b8/95/8c825bd70ff9b02462dc18d1295dd08d3e9e4eb66856d292ffa62cfe1920/multidict-6.6.3-cp312-cp312-win_arm64.whl", hash = "sha256:0f1130b896ecb52d2a1e615260f3ea2af55fa7dc3d7c3003ba0c3121a759b18b", size = 43210, upload-time = "2025-06-30T15:52:14.893Z" },
    { url = "https://files.pythonhosted.org/packages/52/1d/0bebcbbb4f000751fbd09957257903d6e002943fc668d841a4cf2fb7f872/multidict-6.6.3-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:540d3c06d48507357a7d57721e5094b4f7093399a0106c211f33540fdc374d55", size = 75843, upload-time = "2025-06-30T15:52:16.155Z" },
    { url = "https://files.pythonhosted.org/packages/07/8f/cbe241b0434cfe257f65c2b1bcf9e8d5fb52bc708c5061fb29b0fed22bdf/multidict-6.6.3-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:9c19cea2a690f04247d43f366d03e4eb110a0dc4cd1bbeee4d445435428ed35b", size = 45053, upload-time = "2025-06-30T15:52:17.429Z" },
    { url = "https://files.pythonhosted.org/packages/32/d2/0b3b23f9dbad5b270b22a3ac3ea73ed0a50ef2d9a390447061178ed6bdb8/multidict-6.6.3-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:7af039820cfd00effec86bda5d8debef711a3e86a1d3772e85bea0f243a4bd65", size = 43273, upload-time = "2025-06-30T15:52:19.346Z" },
    { url = "https://files.pythonhosted.org/packages/fd/fe/6eb68927e823999e3683bc49678eb20374ba9615097d085298fd5b386564/multidict-6.6.3-cp313-cp313-manylinux1_i686.manylinux2014_i686.manylinux_2_17_i686.manylinux_2_5_i686.whl", hash = "sha256:500b84f51654fdc3944e936f2922114349bf8fdcac77c3092b03449f0e5bc2b3", size = 237124, upload-time = "2025-06-30T15:52:20.773Z" },
    { url = "https://files.pythonhosted.org/packages/e7/ab/320d8507e7726c460cb77117848b3834ea0d59e769f36fdae495f7669929/multidict-6.6.3-cp313-cp313-manylinux2014_aarch64.manylinux_2_17_aarch64.manylinux_2_28_aarch64.whl", hash = "sha256:f3fc723ab8a5c5ed6c50418e9bfcd8e6dceba6c271cee6728a10a4ed8561520c", size = 256892, upload-time = "2025-06-30T15:52:22.242Z" },
    { url = "https://files.pythonhosted.org/packages/76/60/38ee422db515ac69834e60142a1a69111ac96026e76e8e9aa347fd2e4591/multidict-6.6.3-cp313-cp313-manylinux2014_armv7l.manylinux_2_17_armv7l.manylinux_2_31_armv7l.whl", hash = "sha256:94c47ea3ade005b5976789baaed66d4de4480d0a0bf31cef6edaa41c1e7b56a6", size = 240547, upload-time = "2025-06-30T15:52:23.736Z" },
    { url = "https://files.pythonhosted.org/packages/27/fb/905224fde2dff042b030c27ad95a7ae744325cf54b890b443d30a789b80e/multidict-6.6.3-cp313-cp313-manylinux2014_ppc64le.manylinux_2_17_ppc64le.manylinux_2_28_ppc64le.whl", hash = "sha256:dbc7cf464cc6d67e83e136c9f55726da3a30176f020a36ead246eceed87f1cd8", size = 266223, upload-time = "2025-06-30T15:52:25.185Z" },
    { url = "https://files.pythonhosted.org/packages/76/35/dc38ab361051beae08d1a53965e3e1a418752fc5be4d3fb983c5582d8784/multidict-6.6.3-cp313-cp313-manylinux2014_s390x.manylinux_2_17_s390x.manylinux_2_28_s390x.whl", hash = "sha256:900eb9f9da25ada070f8ee4a23f884e0ee66fe4e1a38c3af644256a508ad81ca", size = 267262, upload-time = "2025-06-30T15:52:26.969Z" },
    { url = "https://files.pythonhosted.org/packages/1f/a3/0a485b7f36e422421b17e2bbb5a81c1af10eac1d4476f2ff92927c730479/multidict-6.6.3-cp313-cp313-manylinux2014_x86_64.manylinux_2_17_x86_64.manylinux_2_28_x86_64.whl", hash = "sha256:7c6df517cf177da5d47ab15407143a89cd1a23f8b335f3a28d57e8b0a3dbb884", size = 254345, upload-time = "2025-06-30T15:52:28.467Z" },
    { url = "https://files.pythonhosted.org/packages/b4/59/bcdd52c1dab7c0e0d75ff19cac751fbd5f850d1fc39172ce809a74aa9ea4/multidict-6.6.3-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:4ef421045f13879e21c994b36e728d8e7d126c91a64b9185810ab51d474f27e7", size = 252248, upload-time = "2025-06-30T15:52:29.938Z" },
    { url = "https://files.pythonhosted.org/packages/bb/a4/2d96aaa6eae8067ce108d4acee6f45ced5728beda55c0f02ae1072c730d1/multidict-6.6.3-cp313-cp313-musllinux_1_2_armv7l.whl", hash = "sha256:6c1e61bb4f80895c081790b6b09fa49e13566df8fbff817da3f85b3a8192e36b", size = 250115, upload-time = "2025-06-30T15:52:31.416Z" },
    { url = "https://files.pythonhosted.org/packages/25/d2/ed9f847fa5c7d0677d4f02ea2c163d5e48573de3f57bacf5670e43a5ffaa/multidict-6.6.3-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:e5e8523bb12d7623cd8300dbd91b9e439a46a028cd078ca695eb66ba31adee3c", size = 249649, upload-time = "2025-06-30T15:52:32.996Z" },
    { url = "https://files.pythonhosted.org/packages/1f/af/9155850372563fc550803d3f25373308aa70f59b52cff25854086ecb4a79/multidict-6.6.3-cp313-cp313-musllinux_1_2_ppc64le.whl", hash = "sha256:ef58340cc896219e4e653dade08fea5c55c6df41bcc68122e3be3e9d873d9a7b", size = 261203, upload-time = "2025-06-30T15:52:34.521Z" },
    { url = "https://files.pythonhosted.org/packages/36/2f/c6a728f699896252cf309769089568a33c6439626648843f78743660709d/multidict-6.6.3-cp313-cp313-musllinux_1_2_s390x.whl", hash = "sha256:fc9dc435ec8699e7b602b94fe0cd4703e69273a01cbc34409af29e7820f777f1", size = 258051, upload-time = "2025-06-30T15:52:35.999Z" },
    { url = "https://files.pythonhosted.org/packages/d0/60/689880776d6b18fa2b70f6cc74ff87dd6c6b9b47bd9cf74c16fecfaa6ad9/multidict-6.6.3-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:9e864486ef4ab07db5e9cb997bad2b681514158d6954dd1958dfb163b83d53e6", size = 249601, upload-time = "2025-06-30T15:52:37.473Z" },
    { url = "https://files.pythonhosted.org/packages/75/5e/325b11f2222a549019cf2ef879c1f81f94a0d40ace3ef55cf529915ba6cc/multidict-6.6.3-cp313-cp313-win32.whl", hash = "sha256:5633a82fba8e841bc5c5c06b16e21529573cd654f67fd833650a215520a6210e", size = 41683, upload-time = "2025-06-30T15:52:38.927Z" },
    { url = "https://files.pythonhosted.org/packages/b1/ad/cf46e73f5d6e3c775cabd2a05976547f3f18b39bee06260369a42501f053/multidict-6.6.3-cp313-cp313-win_amd64.whl", hash = "sha256:e93089c1570a4ad54c3714a12c2cef549dc9d58e97bcded193d928649cab78e9", size = 45811, upload-time = "2025-06-30T15:52:40.207Z" },
    { url = "https://files.pythonhosted.org/packages/c5/c9/2e3fe950db28fb7c62e1a5f46e1e38759b072e2089209bc033c2798bb5ec/multidict-6.6.3-cp313-cp313-win_arm64.whl", hash = "sha256:c60b401f192e79caec61f166da9c924e9f8bc65548d4246842df91651e83d600", size = 43056, upload-time = "2025-06-30T15:52:41.575Z" },
    { url = "https://files.pythonhosted.org/packages/3a/58/aaf8114cf34966e084a8cc9517771288adb53465188843d5a19862cb6dc3/multidict-6.6.3-cp313-cp313t-macosx_10_13_universal2.whl", hash = "sha256:02fd8f32d403a6ff13864b0851f1f523d4c988051eea0471d4f1fd8010f11134", size = 82811, upload-time = "2025-06-30T15:52:43.281Z" },
    { url = "https://files.pythonhosted.org/packages/71/af/5402e7b58a1f5b987a07ad98f2501fdba2a4f4b4c30cf114e3ce8db64c87/multidict-6.6.3-cp313-cp313t-macosx_10_13_x86_64.whl", hash = "sha256:f3aa090106b1543f3f87b2041eef3c156c8da2aed90c63a2fbed62d875c49c37", size = 48304, upload-time = "2025-06-30T15:52:45.026Z" },
    { url = "https://files.pythonhosted.org/packages/39/65/ab3c8cafe21adb45b24a50266fd747147dec7847425bc2a0f6934b3ae9ce/multidict-6.6.3-cp313-cp313t-macosx_11_0_arm64.whl", hash = "sha256:e924fb978615a5e33ff644cc42e6aa241effcf4f3322c09d4f8cebde95aff5f8", size = 46775, upload-time = "2025-06-30T15:52:46.459Z" },
    { url = "https://files.pythonhosted.org/packages/49/ba/9fcc1b332f67cc0c0c8079e263bfab6660f87fe4e28a35921771ff3eea0d/multidict-6.6.3-cp313-cp313t-manylinux1_i686.manylinux2014_i686.manylinux_2_17_i686.manylinux_2_5_i686.whl", hash = "sha256:b9fe5a0e57c6dbd0e2ce81ca66272282c32cd11d31658ee9553849d91289e1c1", size = 229773, upload-time = "2025-06-30T15:52:47.88Z" },
    { url = "https://files.pythonhosted.org/packages/a4/14/0145a251f555f7c754ce2dcbcd012939bbd1f34f066fa5d28a50e722a054/multidict-6.6.3-cp313-cp313t-manylinux2014_aarch64.manylinux_2_17_aarch64.manylinux_2_28_aarch64.whl", hash = "sha256:b24576f208793ebae00280c59927c3b7c2a3b1655e443a25f753c4611bc1c373", size = 250083, upload-time = "2025-06-30T15:52:49.366Z" },
    { url = "https://files.pythonhosted.org/packages/9e/d4/d5c0bd2bbb173b586c249a151a26d2fb3ec7d53c96e42091c9fef4e1f10c/multidict-6.6.3-cp313-cp313t-manylinux2014_armv7l.manylinux_2_17_armv7l.manylinux_2_31_armv7l.whl", hash = "sha256:135631cb6c58eac37d7ac0df380294fecdc026b28837fa07c02e459c7fb9c54e", size = 228980, upload-time = "2025-06-30T15:52:50.903Z" },
    { url = "https://files.pythonhosted.org/packages/21/32/c9a2d8444a50ec48c4733ccc67254100c10e1c8ae8e40c7a2d2183b59b97/multidict-6.6.3-cp313-cp313t-manylinux2014_ppc64le.manylinux_2_17_ppc64le.manylinux_2_28_ppc64le.whl", hash = "sha256:274d416b0df887aef98f19f21578653982cfb8a05b4e187d4a17103322eeaf8f", size = 257776, upload-time = "2025-06-30T15:52:52.764Z" },
    { url = "https://files.pythonhosted.org/packages/68/d0/14fa1699f4ef629eae08ad6201c6b476098f5efb051b296f4c26be7a9fdf/multidict-6.6.3-cp313-cp313t-manylinux2014_s390x.manylinux_2_17_s390x.manylinux_2_28_s390x.whl", hash = "sha256:e252017a817fad7ce05cafbe5711ed40faeb580e63b16755a3a24e66fa1d87c0", size = 256882, upload-time = "2025-06-30T15:52:54.596Z" },
    { url = "https://files.pythonhosted.org/packages/da/88/84a27570fbe303c65607d517a5f147cd2fc046c2d1da02b84b17b9bdc2aa/multidict-6.6.3-cp313-cp313t-manylinux2014_x86_64.manylinux_2_17_x86_64.manylinux_2_28_x86_64.whl", hash = "sha256:2e4cc8d848cd4fe1cdee28c13ea79ab0ed37fc2e89dd77bac86a2e7959a8c3bc", size = 247816, upload-time = "2025-06-30T15:52:56.175Z" },
    { url = "https://files.pythonhosted.org/packages/1c/60/dca352a0c999ce96a5d8b8ee0b2b9f729dcad2e0b0c195f8286269a2074c/multidict-6.6.3-cp313-cp313t-musllinux_1_2_aarch64.whl", hash = "sha256:9e236a7094b9c4c1b7585f6b9cca34b9d833cf079f7e4c49e6a4a6ec9bfdc68f", size = 245341, upload-time = "2025-06-30T15:52:57.752Z" },
    { url = "https://files.pythonhosted.org/packages/50/ef/433fa3ed06028f03946f3993223dada70fb700f763f70c00079533c34578/multidict-6.6.3-cp313-cp313t-musllinux_1_2_armv7l.whl", hash = "sha256:e0cb0ab69915c55627c933f0b555a943d98ba71b4d1c57bc0d0a66e2567c7471", size = 235854, upload-time = "2025-06-30T15:52:59.74Z" },
    { url = "https://files.pythonhosted.org/packages/1b/1f/487612ab56fbe35715320905215a57fede20de7db40a261759690dc80471/multidict-6.6.3-cp313-cp313t-musllinux_1_2_i686.whl", hash = "sha256:81ef2f64593aba09c5212a3d0f8c906a0d38d710a011f2f42759704d4557d3f2", size = 243432, upload-time = "2025-06-30T15:53:01.602Z" },
    { url = "https://files.pythonhosted.org/packages/da/6f/ce8b79de16cd885c6f9052c96a3671373d00c59b3ee635ea93e6e81b8ccf/multidict-6.6.3-cp313-cp313t-musllinux_1_2_ppc64le.whl", hash = "sha256:b9cbc60010de3562545fa198bfc6d3825df430ea96d2cc509c39bd71e2e7d648", size = 252731, upload-time = "2025-06-30T15:53:03.517Z" },
    { url = "https://files.pythonhosted.org/packages/bb/fe/a2514a6aba78e5abefa1624ca85ae18f542d95ac5cde2e3815a9fbf369aa/multidict-6.6.3-cp313-cp313t-musllinux_1_2_s390x.whl", hash = "sha256:70d974eaaa37211390cd02ef93b7e938de564bbffa866f0b08d07e5e65da783d", size = 247086, upload-time = "2025-06-30T15:53:05.48Z" },
    { url = "https://files.pythonhosted.org/packages/8c/22/b788718d63bb3cce752d107a57c85fcd1a212c6c778628567c9713f9345a/multidict-6.6.3-cp313-cp313t-musllinux_1_2_x86_64.whl", hash = "sha256:3713303e4a6663c6d01d648a68f2848701001f3390a030edaaf3fc949c90bf7c", size = 243338, upload-time = "2025-06-30T15:53:07.522Z" },
    { url = "https://files.pythonhosted.org/packages/22/d6/fdb3d0670819f2228f3f7d9af613d5e652c15d170c83e5f1c94fbc55a25b/multidict-6.6.3-cp313-cp313t-win32.whl", hash = "sha256:639ecc9fe7cd73f2495f62c213e964843826f44505a3e5d82805aa85cac6f89e", size = 47812, upload-time = "2025-06-30T15:53:09.263Z" },
    { url = "https://files.pythonhosted.org/packages/b6/d6/a9d2c808f2c489ad199723197419207ecbfbc1776f6e155e1ecea9c883aa/multidict-6.6.3-cp313-cp313t-win_amd64.whl", hash = "sha256:9f97e181f344a0ef3881b573d31de8542cc0dbc559ec68c8f8b5ce2c2e91646d", size = 53011, upload-time = "2025-06-30T15:53:11.038Z" },
    { url = "https://files.pythonhosted.org/packages/f2/40/b68001cba8188dd267590a111f9661b6256debc327137667e832bf5d66e8/multidict-6.6.3-cp313-cp313t-win_arm64.whl", hash = "sha256:ce8b7693da41a3c4fde5871c738a81490cea5496c671d74374c8ab889e1834fb", size = 45254, upload-time = "2025-06-30T15:53:12.421Z" },
    { url = "https://files.pythonhosted.org/packages/d8/30/9aec301e9772b098c1f5c0ca0279237c9766d94b97802e9888010c64b0ed/multidict-6.6.3-py3-none-any.whl", hash = "sha256:8db10f29c7541fc5da4defd8cd697e1ca429db743fa716325f236079b96f775a", size = 12313, upload-time = "2025-06-30T15:53:45.437Z" },
]

[[package]]
name = "openai"
version = "1.93.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "anyio" },
    { name = "distro" },
    { name = "httpx" },
    { name = "jiter" },
    { name = "pydantic" },
    { name = "sniffio" },
    { name = "tqdm" },
    { name = "typing-extensions" },
]
sdist = { url = "https://files.pythonhosted.org/packages/e4/d7/e91c6a9cf71726420cddf539852ee4c29176ebb716a702d9118d0409fd8e/openai-1.93.0.tar.gz", hash = "sha256:988f31ade95e1ff0585af11cc5a64510225e4f5cd392698c675d0a9265b8e337", size = 486573, upload-time = "2025-06-27T21:21:39.421Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/64/46/a10d9df4673df56f71201d129ba1cb19eaff3366d08c8664d61a7df52e65/openai-1.93.0-py3-none-any.whl", hash = "sha256:3d746fe5498f0dd72e0d9ab706f26c91c0f646bf7459e5629af8ba7c9dbdf090", size = 755038, upload-time = "2025-06-27T21:21:37.532Z" },
]

[[package]]
name = "packaging"
version = "25.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/a1/d4/1fc4078c65507b51b96ca8f8c3ba19e6a61c8253c72794544580a7b6c24d/packaging-25.0.tar.gz", hash = "sha256:d443872c98d677bf60f6a1f2f8c1cb748e8fe762d2bf9d3148b5599295b0fc4f", size = 165727, upload-time = "2025-04-19T11:48:59.673Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/20/12/38679034af332785aac8774540895e234f4d07f7545804097de4b666afd8/packaging-25.0-py3-none-any.whl", hash = "sha256:29572ef2b1f17581046b3a2227d5c611fb25ec70ca1ba8554b24b0e69331a484", size = 66469, upload-time = "2025-04-19T11:48:57.875Z" },
]

[[package]]
name = "pluggy"
version = "1.6.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/f9/e2/3e91f31a7d2b083fe6ef3fa267035b518369d9511ffab804f839851d2779/pluggy-1.6.0.tar.gz", hash = "sha256:7dcc130b76258d33b90f61b658791dede3486c3e6bfb003ee5c9bfb396dd22f3", size = 69412, upload-time = "2025-05-15T12:30:07.975Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/54/20/4d324d65cc6d9205fabedc306948156824eb9f0ee1633355a8f7ec5c66bf/pluggy-1.6.0-py3-none-any.whl", hash = "sha256:e920276dd6813095e9377c0bc5566d94c932c33b27a3e3945d8389c374dd4746", size = 20538, upload-time = "2025-05-15T12:30:06.134Z" },
]

[[package]]
name = "postgrest"
version = "1.1.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "deprecation" },
    { name = "httpx", extra = ["http2"] },
    { name = "pydantic" },
]
sdist = { url = "https://files.pythonhosted.org/packages/6e/3e/1b50568e1f5db0bdced4a82c7887e37326585faef7ca43ead86849cb4861/postgrest-1.1.1.tar.gz", hash = "sha256:f3bb3e8c4602775c75c844a31f565f5f3dd584df4d36d683f0b67d01a86be322", size = 15431, upload-time = "2025-06-23T19:21:34.742Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/a4/71/188a50ea64c17f73ff4df5196ec1553a8f1723421eb2d1069c73bab47d78/postgrest-1.1.1-py3-none-any.whl", hash = "sha256:98a6035ee1d14288484bfe36235942c5fb2d26af6d8120dfe3efbe007859251a", size = 22366, upload-time = "2025-06-23T19:21:33.637Z" },
]

[[package]]
name = "prometheus-client"
version = "0.22.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/5e/cf/40dde0a2be27cc1eb41e333d1a674a74ce8b8b0457269cc640fd42b07cf7/prometheus_client-0.22.1.tar.gz", hash = "sha256:190f1331e783cf21eb60bca559354e0a4d4378facecf78f5428c39b675d20d28", size = 69746, upload-time = "2025-06-02T14:29:01.152Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/32/ae/ec06af4fe3ee72d16973474f122541746196aaa16cea6f66d18b963c6177/prometheus_client-0.22.1-py3-none-any.whl", hash = "sha256:cca895342e308174341b2cbf99a56bef291fbc0ef7b9e5412a0f26d653ba7094", size = 58694, upload-time = "2025-06-02T14:29:00.068Z" },
]

[[package]]
name = "propcache"
version = "0.3.2"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/a6/16/43264e4a779dd8588c21a70f0709665ee8f611211bdd2c87d952cfa7c776/propcache-0.3.2.tar.gz", hash = "sha256:20d7d62e4e7ef05f221e0db2856b979540686342e7dd9973b815599c7057e168", size = 44139, upload-time = "2025-06-09T22:56:06.081Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/a8/42/9ca01b0a6f48e81615dca4765a8f1dd2c057e0540f6116a27dc5ee01dfb6/propcache-0.3.2-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:8de106b6c84506b31c27168582cd3cb3000a6412c16df14a8628e5871ff83c10", size = 73674, upload-time = "2025-06-09T22:54:30.551Z" },
    { url = "https://files.pythonhosted.org/packages/af/6e/21293133beb550f9c901bbece755d582bfaf2176bee4774000bd4dd41884/propcache-0.3.2-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:28710b0d3975117239c76600ea351934ac7b5ff56e60953474342608dbbb6154", size = 43570, upload-time = "2025-06-09T22:54:32.296Z" },
    { url = "https://files.pythonhosted.org/packages/0c/c8/0393a0a3a2b8760eb3bde3c147f62b20044f0ddac81e9d6ed7318ec0d852/propcache-0.3.2-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:ce26862344bdf836650ed2487c3d724b00fbfec4233a1013f597b78c1cb73615", size = 43094, upload-time = "2025-06-09T22:54:33.929Z" },
    { url = "https://files.pythonhosted.org/packages/37/2c/489afe311a690399d04a3e03b069225670c1d489eb7b044a566511c1c498/propcache-0.3.2-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:bca54bd347a253af2cf4544bbec232ab982f4868de0dd684246b67a51bc6b1db", size = 226958, upload-time = "2025-06-09T22:54:35.186Z" },
    { url = "https://files.pythonhosted.org/packages/9d/ca/63b520d2f3d418c968bf596839ae26cf7f87bead026b6192d4da6a08c467/propcache-0.3.2-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:55780d5e9a2ddc59711d727226bb1ba83a22dd32f64ee15594b9392b1f544eb1", size = 234894, upload-time = "2025-06-09T22:54:36.708Z" },
    { url = "https://files.pythonhosted.org/packages/11/60/1d0ed6fff455a028d678df30cc28dcee7af77fa2b0e6962ce1df95c9a2a9/propcache-0.3.2-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:035e631be25d6975ed87ab23153db6a73426a48db688070d925aa27e996fe93c", size = 233672, upload-time = "2025-06-09T22:54:38.062Z" },
    { url = "https://files.pythonhosted.org/packages/37/7c/54fd5301ef38505ab235d98827207176a5c9b2aa61939b10a460ca53e123/propcache-0.3.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:ee6f22b6eaa39297c751d0e80c0d3a454f112f5c6481214fcf4c092074cecd67", size = 224395, upload-time = "2025-06-09T22:54:39.634Z" },
    { url = "https://files.pythonhosted.org/packages/ee/1a/89a40e0846f5de05fdc6779883bf46ba980e6df4d2ff8fb02643de126592/propcache-0.3.2-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:7ca3aee1aa955438c4dba34fc20a9f390e4c79967257d830f137bd5a8a32ed3b", size = 212510, upload-time = "2025-06-09T22:54:41.565Z" },
    { url = "https://files.pythonhosted.org/packages/5e/33/ca98368586c9566a6b8d5ef66e30484f8da84c0aac3f2d9aec6d31a11bd5/propcache-0.3.2-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:7a4f30862869fa2b68380d677cc1c5fcf1e0f2b9ea0cf665812895c75d0ca3b8", size = 222949, upload-time = "2025-06-09T22:54:43.038Z" },
    { url = "https://files.pythonhosted.org/packages/ba/11/ace870d0aafe443b33b2f0b7efdb872b7c3abd505bfb4890716ad7865e9d/propcache-0.3.2-cp312-cp312-musllinux_1_2_armv7l.whl", hash = "sha256:b77ec3c257d7816d9f3700013639db7491a434644c906a2578a11daf13176251", size = 217258, upload-time = "2025-06-09T22:54:44.376Z" },
    { url = "https://files.pythonhosted.org/packages/5b/d2/86fd6f7adffcfc74b42c10a6b7db721d1d9ca1055c45d39a1a8f2a740a21/propcache-0.3.2-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:cab90ac9d3f14b2d5050928483d3d3b8fb6b4018893fc75710e6aa361ecb2474", size = 213036, upload-time = "2025-06-09T22:54:46.243Z" },
    { url = "https://files.pythonhosted.org/packages/07/94/2d7d1e328f45ff34a0a284cf5a2847013701e24c2a53117e7c280a4316b3/propcache-0.3.2-cp312-cp312-musllinux_1_2_ppc64le.whl", hash = "sha256:0b504d29f3c47cf6b9e936c1852246c83d450e8e063d50562115a6be6d3a2535", size = 227684, upload-time = "2025-06-09T22:54:47.63Z" },
    { url = "https://files.pythonhosted.org/packages/b7/05/37ae63a0087677e90b1d14710e532ff104d44bc1efa3b3970fff99b891dc/propcache-0.3.2-cp312-cp312-musllinux_1_2_s390x.whl", hash = "sha256:ce2ac2675a6aa41ddb2a0c9cbff53780a617ac3d43e620f8fd77ba1c84dcfc06", size = 234562, upload-time = "2025-06-09T22:54:48.982Z" },
    { url = "https://files.pythonhosted.org/packages/a4/7c/3f539fcae630408d0bd8bf3208b9a647ccad10976eda62402a80adf8fc34/propcache-0.3.2-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:62b4239611205294cc433845b914131b2a1f03500ff3c1ed093ed216b82621e1", size = 222142, upload-time = "2025-06-09T22:54:50.424Z" },
    { url = "https://files.pythonhosted.org/packages/7c/d2/34b9eac8c35f79f8a962546b3e97e9d4b990c420ee66ac8255d5d9611648/propcache-0.3.2-cp312-cp312-win32.whl", hash = "sha256:df4a81b9b53449ebc90cc4deefb052c1dd934ba85012aa912c7ea7b7e38b60c1", size = 37711, upload-time = "2025-06-09T22:54:52.072Z" },
    { url = "https://files.pythonhosted.org/packages/19/61/d582be5d226cf79071681d1b46b848d6cb03d7b70af7063e33a2787eaa03/propcache-0.3.2-cp312-cp312-win_amd64.whl", hash = "sha256:7046e79b989d7fe457bb755844019e10f693752d169076138abf17f31380800c", size = 41479, upload-time = "2025-06-09T22:54:53.234Z" },
    { url = "https://files.pythonhosted.org/packages/dc/d1/8c747fafa558c603c4ca19d8e20b288aa0c7cda74e9402f50f31eb65267e/propcache-0.3.2-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:ca592ed634a73ca002967458187109265e980422116c0a107cf93d81f95af945", size = 71286, upload-time = "2025-06-09T22:54:54.369Z" },
    { url = "https://files.pythonhosted.org/packages/61/99/d606cb7986b60d89c36de8a85d58764323b3a5ff07770a99d8e993b3fa73/propcache-0.3.2-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:9ecb0aad4020e275652ba3975740f241bd12a61f1a784df044cf7477a02bc252", size = 42425, upload-time = "2025-06-09T22:54:55.642Z" },
    { url = "https://files.pythonhosted.org/packages/8c/96/ef98f91bbb42b79e9bb82bdd348b255eb9d65f14dbbe3b1594644c4073f7/propcache-0.3.2-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:7f08f1cc28bd2eade7a8a3d2954ccc673bb02062e3e7da09bc75d843386b342f", size = 41846, upload-time = "2025-06-09T22:54:57.246Z" },
    { url = "https://files.pythonhosted.org/packages/5b/ad/3f0f9a705fb630d175146cd7b1d2bf5555c9beaed54e94132b21aac098a6/propcache-0.3.2-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:d1a342c834734edb4be5ecb1e9fb48cb64b1e2320fccbd8c54bf8da8f2a84c33", size = 208871, upload-time = "2025-06-09T22:54:58.975Z" },
    { url = "https://files.pythonhosted.org/packages/3a/38/2085cda93d2c8b6ec3e92af2c89489a36a5886b712a34ab25de9fbca7992/propcache-0.3.2-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:8a544caaae1ac73f1fecfae70ded3e93728831affebd017d53449e3ac052ac1e", size = 215720, upload-time = "2025-06-09T22:55:00.471Z" },
    { url = "https://files.pythonhosted.org/packages/61/c1/d72ea2dc83ac7f2c8e182786ab0fc2c7bd123a1ff9b7975bee671866fe5f/propcache-0.3.2-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:310d11aa44635298397db47a3ebce7db99a4cc4b9bbdfcf6c98a60c8d5261cf1", size = 215203, upload-time = "2025-06-09T22:55:01.834Z" },
    { url = "https://files.pythonhosted.org/packages/af/81/b324c44ae60c56ef12007105f1460d5c304b0626ab0cc6b07c8f2a9aa0b8/propcache-0.3.2-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:4c1396592321ac83157ac03a2023aa6cc4a3cc3cfdecb71090054c09e5a7cce3", size = 206365, upload-time = "2025-06-09T22:55:03.199Z" },
    { url = "https://files.pythonhosted.org/packages/09/73/88549128bb89e66d2aff242488f62869014ae092db63ccea53c1cc75a81d/propcache-0.3.2-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:8cabf5b5902272565e78197edb682017d21cf3b550ba0460ee473753f28d23c1", size = 196016, upload-time = "2025-06-09T22:55:04.518Z" },
    { url = "https://files.pythonhosted.org/packages/b9/3f/3bdd14e737d145114a5eb83cb172903afba7242f67c5877f9909a20d948d/propcache-0.3.2-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:0a2f2235ac46a7aa25bdeb03a9e7060f6ecbd213b1f9101c43b3090ffb971ef6", size = 205596, upload-time = "2025-06-09T22:55:05.942Z" },
    { url = "https://files.pythonhosted.org/packages/0f/ca/2f4aa819c357d3107c3763d7ef42c03980f9ed5c48c82e01e25945d437c1/propcache-0.3.2-cp313-cp313-musllinux_1_2_armv7l.whl", hash = "sha256:92b69e12e34869a6970fd2f3da91669899994b47c98f5d430b781c26f1d9f387", size = 200977, upload-time = "2025-06-09T22:55:07.792Z" },
    { url = "https://files.pythonhosted.org/packages/cd/4a/e65276c7477533c59085251ae88505caf6831c0e85ff8b2e31ebcbb949b1/propcache-0.3.2-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:54e02207c79968ebbdffc169591009f4474dde3b4679e16634d34c9363ff56b4", size = 197220, upload-time = "2025-06-09T22:55:09.173Z" },
    { url = "https://files.pythonhosted.org/packages/7c/54/fc7152e517cf5578278b242396ce4d4b36795423988ef39bb8cd5bf274c8/propcache-0.3.2-cp313-cp313-musllinux_1_2_ppc64le.whl", hash = "sha256:4adfb44cb588001f68c5466579d3f1157ca07f7504fc91ec87862e2b8e556b88", size = 210642, upload-time = "2025-06-09T22:55:10.62Z" },
    { url = "https://files.pythonhosted.org/packages/b9/80/abeb4a896d2767bf5f1ea7b92eb7be6a5330645bd7fb844049c0e4045d9d/propcache-0.3.2-cp313-cp313-musllinux_1_2_s390x.whl", hash = "sha256:fd3e6019dc1261cd0291ee8919dd91fbab7b169bb76aeef6c716833a3f65d206", size = 212789, upload-time = "2025-06-09T22:55:12.029Z" },
    { url = "https://files.pythonhosted.org/packages/b3/db/ea12a49aa7b2b6d68a5da8293dcf50068d48d088100ac016ad92a6a780e6/propcache-0.3.2-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:4c181cad81158d71c41a2bce88edce078458e2dd5ffee7eddd6b05da85079f43", size = 205880, upload-time = "2025-06-09T22:55:13.45Z" },
    { url = "https://files.pythonhosted.org/packages/d1/e5/9076a0bbbfb65d1198007059c65639dfd56266cf8e477a9707e4b1999ff4/propcache-0.3.2-cp313-cp313-win32.whl", hash = "sha256:8a08154613f2249519e549de2330cf8e2071c2887309a7b07fb56098f5170a02", size = 37220, upload-time = "2025-06-09T22:55:15.284Z" },
    { url = "https://files.pythonhosted.org/packages/d3/f5/b369e026b09a26cd77aa88d8fffd69141d2ae00a2abaaf5380d2603f4b7f/propcache-0.3.2-cp313-cp313-win_amd64.whl", hash = "sha256:e41671f1594fc4ab0a6dec1351864713cb3a279910ae8b58f884a88a0a632c05", size = 40678, upload-time = "2025-06-09T22:55:16.445Z" },
    { url = "https://files.pythonhosted.org/packages/a4/3a/6ece377b55544941a08d03581c7bc400a3c8cd3c2865900a68d5de79e21f/propcache-0.3.2-cp313-cp313t-macosx_10_13_universal2.whl", hash = "sha256:9a3cf035bbaf035f109987d9d55dc90e4b0e36e04bbbb95af3055ef17194057b", size = 76560, upload-time = "2025-06-09T22:55:17.598Z" },
    { url = "https://files.pythonhosted.org/packages/0c/da/64a2bb16418740fa634b0e9c3d29edff1db07f56d3546ca2d86ddf0305e1/propcache-0.3.2-cp313-cp313t-macosx_10_13_x86_64.whl", hash = "sha256:156c03d07dc1323d8dacaa221fbe028c5c70d16709cdd63502778e6c3ccca1b0", size = 44676, upload-time = "2025-06-09T22:55:18.922Z" },
    { url = "https://files.pythonhosted.org/packages/36/7b/f025e06ea51cb72c52fb87e9b395cced02786610b60a3ed51da8af017170/propcache-0.3.2-cp313-cp313t-macosx_11_0_arm64.whl", hash = "sha256:74413c0ba02ba86f55cf60d18daab219f7e531620c15f1e23d95563f505efe7e", size = 44701, upload-time = "2025-06-09T22:55:20.106Z" },
    { url = "https://files.pythonhosted.org/packages/a4/00/faa1b1b7c3b74fc277f8642f32a4c72ba1d7b2de36d7cdfb676db7f4303e/propcache-0.3.2-cp313-cp313t-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:f066b437bb3fa39c58ff97ab2ca351db465157d68ed0440abecb21715eb24b28", size = 276934, upload-time = "2025-06-09T22:55:21.5Z" },
    { url = "https://files.pythonhosted.org/packages/74/ab/935beb6f1756e0476a4d5938ff44bf0d13a055fed880caf93859b4f1baf4/propcache-0.3.2-cp313-cp313t-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:f1304b085c83067914721e7e9d9917d41ad87696bf70f0bc7dee450e9c71ad0a", size = 278316, upload-time = "2025-06-09T22:55:22.918Z" },
    { url = "https://files.pythonhosted.org/packages/f8/9d/994a5c1ce4389610838d1caec74bdf0e98b306c70314d46dbe4fcf21a3e2/propcache-0.3.2-cp313-cp313t-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:ab50cef01b372763a13333b4e54021bdcb291fc9a8e2ccb9c2df98be51bcde6c", size = 282619, upload-time = "2025-06-09T22:55:24.651Z" },
    { url = "https://files.pythonhosted.org/packages/2b/00/a10afce3d1ed0287cef2e09506d3be9822513f2c1e96457ee369adb9a6cd/propcache-0.3.2-cp313-cp313t-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:fad3b2a085ec259ad2c2842666b2a0a49dea8463579c606426128925af1ed725", size = 265896, upload-time = "2025-06-09T22:55:26.049Z" },
    { url = "https://files.pythonhosted.org/packages/2e/a8/2aa6716ffa566ca57c749edb909ad27884680887d68517e4be41b02299f3/propcache-0.3.2-cp313-cp313t-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:261fa020c1c14deafd54c76b014956e2f86991af198c51139faf41c4d5e83892", size = 252111, upload-time = "2025-06-09T22:55:27.381Z" },
    { url = "https://files.pythonhosted.org/packages/36/4f/345ca9183b85ac29c8694b0941f7484bf419c7f0fea2d1e386b4f7893eed/propcache-0.3.2-cp313-cp313t-musllinux_1_2_aarch64.whl", hash = "sha256:46d7f8aa79c927e5f987ee3a80205c987717d3659f035c85cf0c3680526bdb44", size = 268334, upload-time = "2025-06-09T22:55:28.747Z" },
    { url = "https://files.pythonhosted.org/packages/3e/ca/fcd54f78b59e3f97b3b9715501e3147f5340167733d27db423aa321e7148/propcache-0.3.2-cp313-cp313t-musllinux_1_2_armv7l.whl", hash = "sha256:6d8f3f0eebf73e3c0ff0e7853f68be638b4043c65a70517bb575eff54edd8dbe", size = 255026, upload-time = "2025-06-09T22:55:30.184Z" },
    { url = "https://files.pythonhosted.org/packages/8b/95/8e6a6bbbd78ac89c30c225210a5c687790e532ba4088afb8c0445b77ef37/propcache-0.3.2-cp313-cp313t-musllinux_1_2_i686.whl", hash = "sha256:03c89c1b14a5452cf15403e291c0ccd7751d5b9736ecb2c5bab977ad6c5bcd81", size = 250724, upload-time = "2025-06-09T22:55:31.646Z" },
    { url = "https://files.pythonhosted.org/packages/ee/b0/0dd03616142baba28e8b2d14ce5df6631b4673850a3d4f9c0f9dd714a404/propcache-0.3.2-cp313-cp313t-musllinux_1_2_ppc64le.whl", hash = "sha256:0cc17efde71e12bbaad086d679ce575268d70bc123a5a71ea7ad76f70ba30bba", size = 268868, upload-time = "2025-06-09T22:55:33.209Z" },
    { url = "https://files.pythonhosted.org/packages/c5/98/2c12407a7e4fbacd94ddd32f3b1e3d5231e77c30ef7162b12a60e2dd5ce3/propcache-0.3.2-cp313-cp313t-musllinux_1_2_s390x.whl", hash = "sha256:acdf05d00696bc0447e278bb53cb04ca72354e562cf88ea6f9107df8e7fd9770", size = 271322, upload-time = "2025-06-09T22:55:35.065Z" },
    { url = "https://files.pythonhosted.org/packages/35/91/9cb56efbb428b006bb85db28591e40b7736847b8331d43fe335acf95f6c8/propcache-0.3.2-cp313-cp313t-musllinux_1_2_x86_64.whl", hash = "sha256:4445542398bd0b5d32df908031cb1b30d43ac848e20470a878b770ec2dcc6330", size = 265778, upload-time = "2025-06-09T22:55:36.45Z" },
    { url = "https://files.pythonhosted.org/packages/9a/4c/b0fe775a2bdd01e176b14b574be679d84fc83958335790f7c9a686c1f468/propcache-0.3.2-cp313-cp313t-win32.whl", hash = "sha256:f86e5d7cd03afb3a1db8e9f9f6eff15794e79e791350ac48a8c924e6f439f394", size = 41175, upload-time = "2025-06-09T22:55:38.436Z" },
    { url = "https://files.pythonhosted.org/packages/a4/ff/47f08595e3d9b5e149c150f88d9714574f1a7cbd89fe2817158a952674bf/propcache-0.3.2-cp313-cp313t-win_amd64.whl", hash = "sha256:9704bedf6e7cbe3c65eca4379a9b53ee6a83749f047808cbb5044d40d7d72198", size = 44857, upload-time = "2025-06-09T22:55:39.687Z" },
    { url = "https://files.pythonhosted.org/packages/cc/35/cc0aaecf278bb4575b8555f2b137de5ab821595ddae9da9d3cd1da4072c7/propcache-0.3.2-py3-none-any.whl", hash = "sha256:98f1ec44fb675f5052cccc8e609c46ed23a35a1cfd18545ad4e29002d858a43f", size = 12663, upload-time = "2025-06-09T22:56:04.484Z" },
]

[[package]]
name = "proto-plus"
version = "1.26.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "protobuf" },
]
sdist = { url = "https://files.pythonhosted.org/packages/f4/ac/87285f15f7cce6d4a008f33f1757fb5a13611ea8914eb58c3d0d26243468/proto_plus-1.26.1.tar.gz", hash = "sha256:21a515a4c4c0088a773899e23c7bbade3d18f9c66c73edd4c7ee3816bc96a012", size = 56142, upload-time = "2025-03-10T15:54:38.843Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/4e/6d/280c4c2ce28b1593a19ad5239c8b826871fc6ec275c21afc8e1820108039/proto_plus-1.26.1-py3-none-any.whl", hash = "sha256:13285478c2dcf2abb829db158e1047e2f1e8d63a077d94263c2b88b043c75a66", size = 50163, upload-time = "2025-03-10T15:54:37.335Z" },
]

[[package]]
name = "protobuf"
version = "5.29.5"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/43/29/d09e70352e4e88c9c7a198d5645d7277811448d76c23b00345670f7c8a38/protobuf-5.29.5.tar.gz", hash = "sha256:bc1463bafd4b0929216c35f437a8e28731a2b7fe3d98bb77a600efced5a15c84", size = 425226, upload-time = "2025-05-28T23:51:59.82Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/5f/11/6e40e9fc5bba02988a214c07cf324595789ca7820160bfd1f8be96e48539/protobuf-5.29.5-cp310-abi3-win32.whl", hash = "sha256:3f1c6468a2cfd102ff4703976138844f78ebd1fb45f49011afc5139e9e283079", size = 422963, upload-time = "2025-05-28T23:51:41.204Z" },
    { url = "https://files.pythonhosted.org/packages/81/7f/73cefb093e1a2a7c3ffd839e6f9fcafb7a427d300c7f8aef9c64405d8ac6/protobuf-5.29.5-cp310-abi3-win_amd64.whl", hash = "sha256:3f76e3a3675b4a4d867b52e4a5f5b78a2ef9565549d4037e06cf7b0942b1d3fc", size = 434818, upload-time = "2025-05-28T23:51:44.297Z" },
    { url = "https://files.pythonhosted.org/packages/dd/73/10e1661c21f139f2c6ad9b23040ff36fee624310dc28fba20d33fdae124c/protobuf-5.29.5-cp38-abi3-macosx_10_9_universal2.whl", hash = "sha256:e38c5add5a311f2a6eb0340716ef9b039c1dfa428b28f25a7838ac329204a671", size = 418091, upload-time = "2025-05-28T23:51:45.907Z" },
    { url = "https://files.pythonhosted.org/packages/6c/04/98f6f8cf5b07ab1294c13f34b4e69b3722bb609c5b701d6c169828f9f8aa/protobuf-5.29.5-cp38-abi3-manylinux2014_aarch64.whl", hash = "sha256:fa18533a299d7ab6c55a238bf8629311439995f2e7eca5caaff08663606e9015", size = 319824, upload-time = "2025-05-28T23:51:47.545Z" },
    { url = "https://files.pythonhosted.org/packages/85/e4/07c80521879c2d15f321465ac24c70efe2381378c00bf5e56a0f4fbac8cd/protobuf-5.29.5-cp38-abi3-manylinux2014_x86_64.whl", hash = "sha256:63848923da3325e1bf7e9003d680ce6e14b07e55d0473253a690c3a8b8fd6e61", size = 319942, upload-time = "2025-05-28T23:51:49.11Z" },
    { url = "https://files.pythonhosted.org/packages/7e/cc/7e77861000a0691aeea8f4566e5d3aa716f2b1dece4a24439437e41d3d25/protobuf-5.29.5-py3-none-any.whl", hash = "sha256:6cf42630262c59b2d8de33954443d94b746c952b01434fc58a417fdbd2e84bd5", size = 172823, upload-time = "2025-05-28T23:51:58.157Z" },
]

[[package]]
name = "psycopg2-binary"
version = "2.9.10"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/cb/0e/bdc8274dc0585090b4e3432267d7be4dfbfd8971c0fa59167c711105a6bf/psycopg2-binary-2.9.10.tar.gz", hash = "sha256:4b3df0e6990aa98acda57d983942eff13d824135fe2250e6522edaa782a06de2", size = 385764, upload-time = "2024-10-16T11:24:58.126Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/49/7d/465cc9795cf76f6d329efdafca74693714556ea3891813701ac1fee87545/psycopg2_binary-2.9.10-cp312-cp312-macosx_12_0_x86_64.whl", hash = "sha256:880845dfe1f85d9d5f7c412efea7a08946a46894537e4e5d091732eb1d34d9a0", size = 3044771, upload-time = "2024-10-16T11:20:35.234Z" },
    { url = "https://files.pythonhosted.org/packages/8b/31/6d225b7b641a1a2148e3ed65e1aa74fc86ba3fee850545e27be9e1de893d/psycopg2_binary-2.9.10-cp312-cp312-macosx_14_0_arm64.whl", hash = "sha256:9440fa522a79356aaa482aa4ba500b65f28e5d0e63b801abf6aa152a29bd842a", size = 3275336, upload-time = "2024-10-16T11:20:38.742Z" },
    { url = "https://files.pythonhosted.org/packages/30/b7/a68c2b4bff1cbb1728e3ec864b2d92327c77ad52edcd27922535a8366f68/psycopg2_binary-2.9.10-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:e3923c1d9870c49a2d44f795df0c889a22380d36ef92440ff618ec315757e539", size = 2851637, upload-time = "2024-10-16T11:20:42.145Z" },
    { url = "https://files.pythonhosted.org/packages/0b/b1/cfedc0e0e6f9ad61f8657fd173b2f831ce261c02a08c0b09c652b127d813/psycopg2_binary-2.9.10-cp312-cp312-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:7b2c956c028ea5de47ff3a8d6b3cc3330ab45cf0b7c3da35a2d6ff8420896526", size = 3082097, upload-time = "2024-10-16T11:20:46.185Z" },
    { url = "https://files.pythonhosted.org/packages/18/ed/0a8e4153c9b769f59c02fb5e7914f20f0b2483a19dae7bf2db54b743d0d0/psycopg2_binary-2.9.10-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:f758ed67cab30b9a8d2833609513ce4d3bd027641673d4ebc9c067e4d208eec1", size = 3264776, upload-time = "2024-10-16T11:20:50.879Z" },
    { url = "https://files.pythonhosted.org/packages/10/db/d09da68c6a0cdab41566b74e0a6068a425f077169bed0946559b7348ebe9/psycopg2_binary-2.9.10-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:8cd9b4f2cfab88ed4a9106192de509464b75a906462fb846b936eabe45c2063e", size = 3020968, upload-time = "2024-10-16T11:20:56.819Z" },
    { url = "https://files.pythonhosted.org/packages/94/28/4d6f8c255f0dfffb410db2b3f9ac5218d959a66c715c34cac31081e19b95/psycopg2_binary-2.9.10-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:6dc08420625b5a20b53551c50deae6e231e6371194fa0651dbe0fb206452ae1f", size = 2872334, upload-time = "2024-10-16T11:21:02.411Z" },
    { url = "https://files.pythonhosted.org/packages/05/f7/20d7bf796593c4fea95e12119d6cc384ff1f6141a24fbb7df5a668d29d29/psycopg2_binary-2.9.10-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:d7cd730dfa7c36dbe8724426bf5612798734bff2d3c3857f36f2733f5bfc7c00", size = 2822722, upload-time = "2024-10-16T11:21:09.01Z" },
    { url = "https://files.pythonhosted.org/packages/4d/e4/0c407ae919ef626dbdb32835a03b6737013c3cc7240169843965cada2bdf/psycopg2_binary-2.9.10-cp312-cp312-musllinux_1_2_ppc64le.whl", hash = "sha256:155e69561d54d02b3c3209545fb08938e27889ff5a10c19de8d23eb5a41be8a5", size = 2920132, upload-time = "2024-10-16T11:21:16.339Z" },
    { url = "https://files.pythonhosted.org/packages/2d/70/aa69c9f69cf09a01da224909ff6ce8b68faeef476f00f7ec377e8f03be70/psycopg2_binary-2.9.10-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:c3cc28a6fd5a4a26224007712e79b81dbaee2ffb90ff406256158ec4d7b52b47", size = 2959312, upload-time = "2024-10-16T11:21:25.584Z" },
    { url = "https://files.pythonhosted.org/packages/d3/bd/213e59854fafe87ba47814bf413ace0dcee33a89c8c8c814faca6bc7cf3c/psycopg2_binary-2.9.10-cp312-cp312-win32.whl", hash = "sha256:ec8a77f521a17506a24a5f626cb2aee7850f9b69a0afe704586f63a464f3cd64", size = 1025191, upload-time = "2024-10-16T11:21:29.912Z" },
    { url = "https://files.pythonhosted.org/packages/92/29/06261ea000e2dc1e22907dbbc483a1093665509ea586b29b8986a0e56733/psycopg2_binary-2.9.10-cp312-cp312-win_amd64.whl", hash = "sha256:18c5ee682b9c6dd3696dad6e54cc7ff3a1a9020df6a5c0f861ef8bfd338c3ca0", size = 1164031, upload-time = "2024-10-16T11:21:34.211Z" },
    { url = "https://files.pythonhosted.org/packages/3e/30/d41d3ba765609c0763505d565c4d12d8f3c79793f0d0f044ff5a28bf395b/psycopg2_binary-2.9.10-cp313-cp313-macosx_12_0_x86_64.whl", hash = "sha256:26540d4a9a4e2b096f1ff9cce51253d0504dca5a85872c7f7be23be5a53eb18d", size = 3044699, upload-time = "2024-10-16T11:21:42.841Z" },
    { url = "https://files.pythonhosted.org/packages/35/44/257ddadec7ef04536ba71af6bc6a75ec05c5343004a7ec93006bee66c0bc/psycopg2_binary-2.9.10-cp313-cp313-macosx_14_0_arm64.whl", hash = "sha256:e217ce4d37667df0bc1c397fdcd8de5e81018ef305aed9415c3b093faaeb10fb", size = 3275245, upload-time = "2024-10-16T11:21:51.989Z" },
    { url = "https://files.pythonhosted.org/packages/1b/11/48ea1cd11de67f9efd7262085588790a95d9dfcd9b8a687d46caf7305c1a/psycopg2_binary-2.9.10-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:245159e7ab20a71d989da00f280ca57da7641fa2cdcf71749c193cea540a74f7", size = 2851631, upload-time = "2024-10-16T11:21:57.584Z" },
    { url = "https://files.pythonhosted.org/packages/62/e0/62ce5ee650e6c86719d621a761fe4bc846ab9eff8c1f12b1ed5741bf1c9b/psycopg2_binary-2.9.10-cp313-cp313-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:3c4ded1a24b20021ebe677b7b08ad10bf09aac197d6943bfe6fec70ac4e4690d", size = 3082140, upload-time = "2024-10-16T11:22:02.005Z" },
    { url = "https://files.pythonhosted.org/packages/27/ce/63f946c098611f7be234c0dd7cb1ad68b0b5744d34f68062bb3c5aa510c8/psycopg2_binary-2.9.10-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:3abb691ff9e57d4a93355f60d4f4c1dd2d68326c968e7db17ea96df3c023ef73", size = 3264762, upload-time = "2024-10-16T11:22:06.412Z" },
    { url = "https://files.pythonhosted.org/packages/43/25/c603cd81402e69edf7daa59b1602bd41eb9859e2824b8c0855d748366ac9/psycopg2_binary-2.9.10-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:8608c078134f0b3cbd9f89b34bd60a943b23fd33cc5f065e8d5f840061bd0673", size = 3020967, upload-time = "2024-10-16T11:22:11.583Z" },
    { url = "https://files.pythonhosted.org/packages/5f/d6/8708d8c6fca531057fa170cdde8df870e8b6a9b136e82b361c65e42b841e/psycopg2_binary-2.9.10-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:230eeae2d71594103cd5b93fd29d1ace6420d0b86f4778739cb1a5a32f607d1f", size = 2872326, upload-time = "2024-10-16T11:22:16.406Z" },
    { url = "https://files.pythonhosted.org/packages/ce/ac/5b1ea50fc08a9df82de7e1771537557f07c2632231bbab652c7e22597908/psycopg2_binary-2.9.10-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:bb89f0a835bcfc1d42ccd5f41f04870c1b936d8507c6df12b7737febc40f0909", size = 2822712, upload-time = "2024-10-16T11:22:21.366Z" },
    { url = "https://files.pythonhosted.org/packages/c4/fc/504d4503b2abc4570fac3ca56eb8fed5e437bf9c9ef13f36b6621db8ef00/psycopg2_binary-2.9.10-cp313-cp313-musllinux_1_2_ppc64le.whl", hash = "sha256:f0c2d907a1e102526dd2986df638343388b94c33860ff3bbe1384130828714b1", size = 2920155, upload-time = "2024-10-16T11:22:25.684Z" },
    { url = "https://files.pythonhosted.org/packages/b2/d1/323581e9273ad2c0dbd1902f3fb50c441da86e894b6e25a73c3fda32c57e/psycopg2_binary-2.9.10-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:f8157bed2f51db683f31306aa497311b560f2265998122abe1dce6428bd86567", size = 2959356, upload-time = "2024-10-16T11:22:30.562Z" },
    { url = "https://files.pythonhosted.org/packages/08/50/d13ea0a054189ae1bc21af1d85b6f8bb9bbc5572991055d70ad9006fe2d6/psycopg2_binary-2.9.10-cp313-cp313-win_amd64.whl", hash = "sha256:27422aa5f11fbcd9b18da48373eb67081243662f9b46e6fd07c3eb46e4535142", size = 2569224, upload-time = "2025-01-04T20:09:19.234Z" },
]

[[package]]
name = "pyasn1"
version = "0.6.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/ba/e9/01f1a64245b89f039897cb0130016d79f77d52669aae6ee7b159a6c4c018/pyasn1-0.6.1.tar.gz", hash = "sha256:6f580d2bdd84365380830acf45550f2511469f673cb4a5ae3857a3170128b034", size = 145322, upload-time = "2024-09-10T22:41:42.55Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/c8/f1/d6a797abb14f6283c0ddff96bbdd46937f64122b8c925cab503dd37f8214/pyasn1-0.6.1-py3-none-any.whl", hash = "sha256:0d632f46f2ba09143da3a8afe9e33fb6f92fa2320ab7e886e2d0f7672af84629", size = 83135, upload-time = "2024-09-11T16:00:36.122Z" },
]

[[package]]
name = "pyasn1-modules"
version = "0.4.2"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "pyasn1" },
]
sdist = { url = "https://files.pythonhosted.org/packages/e9/e6/78ebbb10a8c8e4b61a59249394a4a594c1a7af95593dc933a349c8d00964/pyasn1_modules-0.4.2.tar.gz", hash = "sha256:677091de870a80aae844b1ca6134f54652fa2c8c5a52aa396440ac3106e941e6", size = 307892, upload-time = "2025-03-28T02:41:22.17Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/47/8d/d529b5d697919ba8c11ad626e835d4039be708a35b0d22de83a269a6682c/pyasn1_modules-0.4.2-py3-none-any.whl", hash = "sha256:29253a9207ce32b64c3ac6600edc75368f98473906e8fd1043bd6b5b1de2c14a", size = 181259, upload-time = "2025-03-28T02:41:19.028Z" },
]

[[package]]
name = "pydantic"
version = "2.11.7"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "annotated-types" },
    { name = "pydantic-core" },
    { name = "typing-extensions" },
    { name = "typing-inspection" },
]
sdist = { url = "https://files.pythonhosted.org/packages/00/dd/4325abf92c39ba8623b5af936ddb36ffcfe0beae70405d456ab1fb2f5b8c/pydantic-2.11.7.tar.gz", hash = "sha256:d989c3c6cb79469287b1569f7447a17848c998458d49ebe294e975b9baf0f0db", size = 788350, upload-time = "2025-06-14T08:33:17.137Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/6a/c0/ec2b1c8712ca690e5d61979dee872603e92b8a32f94cc1b72d53beab008a/pydantic-2.11.7-py3-none-any.whl", hash = "sha256:dde5df002701f6de26248661f6835bbe296a47bf73990135c7d07ce741b9623b", size = 444782, upload-time = "2025-06-14T08:33:14.905Z" },
]

[[package]]
name = "pydantic-core"
version = "2.33.2"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "typing-extensions" },
]
sdist = { url = "https://files.pythonhosted.org/packages/ad/88/5f2260bdfae97aabf98f1778d43f69574390ad787afb646292a638c923d4/pydantic_core-2.33.2.tar.gz", hash = "sha256:7cb8bc3605c29176e1b105350d2e6474142d7c1bd1d9327c4a9bdb46bf827acc", size = 435195, upload-time = "2025-04-23T18:33:52.104Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/18/8a/2b41c97f554ec8c71f2a8a5f85cb56a8b0956addfe8b0efb5b3d77e8bdc3/pydantic_core-2.33.2-cp312-cp312-macosx_10_12_x86_64.whl", hash = "sha256:a7ec89dc587667f22b6a0b6579c249fca9026ce7c333fc142ba42411fa243cdc", size = 2009000, upload-time = "2025-04-23T18:31:25.863Z" },
    { url = "https://files.pythonhosted.org/packages/a1/02/6224312aacb3c8ecbaa959897af57181fb6cf3a3d7917fd44d0f2917e6f2/pydantic_core-2.33.2-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:3c6db6e52c6d70aa0d00d45cdb9b40f0433b96380071ea80b09277dba021ddf7", size = 1847996, upload-time = "2025-04-23T18:31:27.341Z" },
    { url = "https://files.pythonhosted.org/packages/d6/46/6dcdf084a523dbe0a0be59d054734b86a981726f221f4562aed313dbcb49/pydantic_core-2.33.2-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:4e61206137cbc65e6d5256e1166f88331d3b6238e082d9f74613b9b765fb9025", size = 1880957, upload-time = "2025-04-23T18:31:28.956Z" },
    { url = "https://files.pythonhosted.org/packages/ec/6b/1ec2c03837ac00886ba8160ce041ce4e325b41d06a034adbef11339ae422/pydantic_core-2.33.2-cp312-cp312-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:eb8c529b2819c37140eb51b914153063d27ed88e3bdc31b71198a198e921e011", size = 1964199, upload-time = "2025-04-23T18:31:31.025Z" },
    { url = "https://files.pythonhosted.org/packages/2d/1d/6bf34d6adb9debd9136bd197ca72642203ce9aaaa85cfcbfcf20f9696e83/pydantic_core-2.33.2-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:c52b02ad8b4e2cf14ca7b3d918f3eb0ee91e63b3167c32591e57c4317e134f8f", size = 2120296, upload-time = "2025-04-23T18:31:32.514Z" },
    { url = "https://files.pythonhosted.org/packages/e0/94/2bd0aaf5a591e974b32a9f7123f16637776c304471a0ab33cf263cf5591a/pydantic_core-2.33.2-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:96081f1605125ba0855dfda83f6f3df5ec90c61195421ba72223de35ccfb2f88", size = 2676109, upload-time = "2025-04-23T18:31:33.958Z" },
    { url = "https://files.pythonhosted.org/packages/f9/41/4b043778cf9c4285d59742281a769eac371b9e47e35f98ad321349cc5d61/pydantic_core-2.33.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:8f57a69461af2a5fa6e6bbd7a5f60d3b7e6cebb687f55106933188e79ad155c1", size = 2002028, upload-time = "2025-04-23T18:31:39.095Z" },
    { url = "https://files.pythonhosted.org/packages/cb/d5/7bb781bf2748ce3d03af04d5c969fa1308880e1dca35a9bd94e1a96a922e/pydantic_core-2.33.2-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.whl", hash = "sha256:572c7e6c8bb4774d2ac88929e3d1f12bc45714ae5ee6d9a788a9fb35e60bb04b", size = 2100044, upload-time = "2025-04-23T18:31:41.034Z" },
    { url = "https://files.pythonhosted.org/packages/fe/36/def5e53e1eb0ad896785702a5bbfd25eed546cdcf4087ad285021a90ed53/pydantic_core-2.33.2-cp312-cp312-musllinux_1_1_aarch64.whl", hash = "sha256:db4b41f9bd95fbe5acd76d89920336ba96f03e149097365afe1cb092fceb89a1", size = 2058881, upload-time = "2025-04-23T18:31:42.757Z" },
    { url = "https://files.pythonhosted.org/packages/01/6c/57f8d70b2ee57fc3dc8b9610315949837fa8c11d86927b9bb044f8705419/pydantic_core-2.33.2-cp312-cp312-musllinux_1_1_armv7l.whl", hash = "sha256:fa854f5cf7e33842a892e5c73f45327760bc7bc516339fda888c75ae60edaeb6", size = 2227034, upload-time = "2025-04-23T18:31:44.304Z" },
    { url = "https://files.pythonhosted.org/packages/27/b9/9c17f0396a82b3d5cbea4c24d742083422639e7bb1d5bf600e12cb176a13/pydantic_core-2.33.2-cp312-cp312-musllinux_1_1_x86_64.whl", hash = "sha256:5f483cfb75ff703095c59e365360cb73e00185e01aaea067cd19acffd2ab20ea", size = 2234187, upload-time = "2025-04-23T18:31:45.891Z" },
    { url = "https://files.pythonhosted.org/packages/b0/6a/adf5734ffd52bf86d865093ad70b2ce543415e0e356f6cacabbc0d9ad910/pydantic_core-2.33.2-cp312-cp312-win32.whl", hash = "sha256:9cb1da0f5a471435a7bc7e439b8a728e8b61e59784b2af70d7c169f8dd8ae290", size = 1892628, upload-time = "2025-04-23T18:31:47.819Z" },
    { url = "https://files.pythonhosted.org/packages/43/e4/5479fecb3606c1368d496a825d8411e126133c41224c1e7238be58b87d7e/pydantic_core-2.33.2-cp312-cp312-win_amd64.whl", hash = "sha256:f941635f2a3d96b2973e867144fde513665c87f13fe0e193c158ac51bfaaa7b2", size = 1955866, upload-time = "2025-04-23T18:31:49.635Z" },
    { url = "https://files.pythonhosted.org/packages/0d/24/8b11e8b3e2be9dd82df4b11408a67c61bb4dc4f8e11b5b0fc888b38118b5/pydantic_core-2.33.2-cp312-cp312-win_arm64.whl", hash = "sha256:cca3868ddfaccfbc4bfb1d608e2ccaaebe0ae628e1416aeb9c4d88c001bb45ab", size = 1888894, upload-time = "2025-04-23T18:31:51.609Z" },
    { url = "https://files.pythonhosted.org/packages/46/8c/99040727b41f56616573a28771b1bfa08a3d3fe74d3d513f01251f79f172/pydantic_core-2.33.2-cp313-cp313-macosx_10_12_x86_64.whl", hash = "sha256:1082dd3e2d7109ad8b7da48e1d4710c8d06c253cbc4a27c1cff4fbcaa97a9e3f", size = 2015688, upload-time = "2025-04-23T18:31:53.175Z" },
    { url = "https://files.pythonhosted.org/packages/3a/cc/5999d1eb705a6cefc31f0b4a90e9f7fc400539b1a1030529700cc1b51838/pydantic_core-2.33.2-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:f517ca031dfc037a9c07e748cefd8d96235088b83b4f4ba8939105d20fa1dcd6", size = 1844808, upload-time = "2025-04-23T18:31:54.79Z" },
    { url = "https://files.pythonhosted.org/packages/6f/5e/a0a7b8885c98889a18b6e376f344da1ef323d270b44edf8174d6bce4d622/pydantic_core-2.33.2-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:0a9f2c9dd19656823cb8250b0724ee9c60a82f3cdf68a080979d13092a3b0fef", size = 1885580, upload-time = "2025-04-23T18:31:57.393Z" },
    { url = "https://files.pythonhosted.org/packages/3b/2a/953581f343c7d11a304581156618c3f592435523dd9d79865903272c256a/pydantic_core-2.33.2-cp313-cp313-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:2b0a451c263b01acebe51895bfb0e1cc842a5c666efe06cdf13846c7418caa9a", size = 1973859, upload-time = "2025-04-23T18:31:59.065Z" },
    { url = "https://files.pythonhosted.org/packages/e6/55/f1a813904771c03a3f97f676c62cca0c0a4138654107c1b61f19c644868b/pydantic_core-2.33.2-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:1ea40a64d23faa25e62a70ad163571c0b342b8bf66d5fa612ac0dec4f069d916", size = 2120810, upload-time = "2025-04-23T18:32:00.78Z" },
    { url = "https://files.pythonhosted.org/packages/aa/c3/053389835a996e18853ba107a63caae0b9deb4a276c6b472931ea9ae6e48/pydantic_core-2.33.2-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:0fb2d542b4d66f9470e8065c5469ec676978d625a8b7a363f07d9a501a9cb36a", size = 2676498, upload-time = "2025-04-23T18:32:02.418Z" },
    { url = "https://files.pythonhosted.org/packages/eb/3c/f4abd740877a35abade05e437245b192f9d0ffb48bbbbd708df33d3cda37/pydantic_core-2.33.2-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:9fdac5d6ffa1b5a83bca06ffe7583f5576555e6c8b3a91fbd25ea7780f825f7d", size = 2000611, upload-time = "2025-04-23T18:32:04.152Z" },
    { url = "https://files.pythonhosted.org/packages/59/a7/63ef2fed1837d1121a894d0ce88439fe3e3b3e48c7543b2a4479eb99c2bd/pydantic_core-2.33.2-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.whl", hash = "sha256:04a1a413977ab517154eebb2d326da71638271477d6ad87a769102f7c2488c56", size = 2107924, upload-time = "2025-04-23T18:32:06.129Z" },
    { url = "https://files.pythonhosted.org/packages/04/8f/2551964ef045669801675f1cfc3b0d74147f4901c3ffa42be2ddb1f0efc4/pydantic_core-2.33.2-cp313-cp313-musllinux_1_1_aarch64.whl", hash = "sha256:c8e7af2f4e0194c22b5b37205bfb293d166a7344a5b0d0eaccebc376546d77d5", size = 2063196, upload-time = "2025-04-23T18:32:08.178Z" },
    { url = "https://files.pythonhosted.org/packages/26/bd/d9602777e77fc6dbb0c7db9ad356e9a985825547dce5ad1d30ee04903918/pydantic_core-2.33.2-cp313-cp313-musllinux_1_1_armv7l.whl", hash = "sha256:5c92edd15cd58b3c2d34873597a1e20f13094f59cf88068adb18947df5455b4e", size = 2236389, upload-time = "2025-04-23T18:32:10.242Z" },
    { url = "https://files.pythonhosted.org/packages/42/db/0e950daa7e2230423ab342ae918a794964b053bec24ba8af013fc7c94846/pydantic_core-2.33.2-cp313-cp313-musllinux_1_1_x86_64.whl", hash = "sha256:65132b7b4a1c0beded5e057324b7e16e10910c106d43675d9bd87d4f38dde162", size = 2239223, upload-time = "2025-04-23T18:32:12.382Z" },
    { url = "https://files.pythonhosted.org/packages/58/4d/4f937099c545a8a17eb52cb67fe0447fd9a373b348ccfa9a87f141eeb00f/pydantic_core-2.33.2-cp313-cp313-win32.whl", hash = "sha256:52fb90784e0a242bb96ec53f42196a17278855b0f31ac7c3cc6f5c1ec4811849", size = 1900473, upload-time = "2025-04-23T18:32:14.034Z" },
    { url = "https://files.pythonhosted.org/packages/a0/75/4a0a9bac998d78d889def5e4ef2b065acba8cae8c93696906c3a91f310ca/pydantic_core-2.33.2-cp313-cp313-win_amd64.whl", hash = "sha256:c083a3bdd5a93dfe480f1125926afcdbf2917ae714bdb80b36d34318b2bec5d9", size = 1955269, upload-time = "2025-04-23T18:32:15.783Z" },
    { url = "https://files.pythonhosted.org/packages/f9/86/1beda0576969592f1497b4ce8e7bc8cbdf614c352426271b1b10d5f0aa64/pydantic_core-2.33.2-cp313-cp313-win_arm64.whl", hash = "sha256:e80b087132752f6b3d714f041ccf74403799d3b23a72722ea2e6ba2e892555b9", size = 1893921, upload-time = "2025-04-23T18:32:18.473Z" },
    { url = "https://files.pythonhosted.org/packages/a4/7d/e09391c2eebeab681df2b74bfe6c43422fffede8dc74187b2b0bf6fd7571/pydantic_core-2.33.2-cp313-cp313t-macosx_11_0_arm64.whl", hash = "sha256:61c18fba8e5e9db3ab908620af374db0ac1baa69f0f32df4f61ae23f15e586ac", size = 1806162, upload-time = "2025-04-23T18:32:20.188Z" },
    { url = "https://files.pythonhosted.org/packages/f1/3d/847b6b1fed9f8ed3bb95a9ad04fbd0b212e832d4f0f50ff4d9ee5a9f15cf/pydantic_core-2.33.2-cp313-cp313t-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:95237e53bb015f67b63c91af7518a62a8660376a6a0db19b89acc77a4d6199f5", size = 1981560, upload-time = "2025-04-23T18:32:22.354Z" },
    { url = "https://files.pythonhosted.org/packages/6f/9a/e73262f6c6656262b5fdd723ad90f518f579b7bc8622e43a942eec53c938/pydantic_core-2.33.2-cp313-cp313t-win_amd64.whl", hash = "sha256:c2fc0a768ef76c15ab9238afa6da7f69895bb5d1ee83aeea2e3509af4472d0b9", size = 1935777, upload-time = "2025-04-23T18:32:25.088Z" },
]

[[package]]
name = "pydantic-settings"
version = "2.10.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "pydantic" },
    { name = "python-dotenv" },
    { name = "typing-inspection" },
]
sdist = { url = "https://files.pythonhosted.org/packages/68/85/1ea668bbab3c50071ca613c6ab30047fb36ab0da1b92fa8f17bbc38fd36c/pydantic_settings-2.10.1.tar.gz", hash = "sha256:06f0062169818d0f5524420a360d632d5857b83cffd4d42fe29597807a1614ee", size = 172583, upload-time = "2025-06-24T13:26:46.841Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/58/f0/427018098906416f580e3cf1366d3b1abfb408a0652e9f31600c24a1903c/pydantic_settings-2.10.1-py3-none-any.whl", hash = "sha256:a60952460b99cf661dc25c29c0ef171721f98bfcb52ef8d9ea4c943d7c8cc796", size = 45235, upload-time = "2025-06-24T13:26:45.485Z" },
]

[[package]]
name = "pygments"
version = "2.19.2"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/b0/77/a5b8c569bf593b0140bde72ea885a803b82086995367bf2037de0159d924/pygments-2.19.2.tar.gz", hash = "sha256:636cb2477cec7f8952536970bc533bc43743542f70392ae026374600add5b887", size = 4968631, upload-time = "2025-06-21T13:39:12.283Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/c7/21/705964c7812476f378728bdf590ca4b771ec72385c533964653c68e86bdc/pygments-2.19.2-py3-none-any.whl", hash = "sha256:86540386c03d588bb81d44bc3928634ff26449851e99741617ecb9037ee5ec0b", size = 1225217, upload-time = "2025-06-21T13:39:07.939Z" },
]

[[package]]
name = "pyjwt"
version = "2.10.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/e7/46/bd74733ff231675599650d3e47f361794b22ef3e3770998dda30d3b63726/pyjwt-2.10.1.tar.gz", hash = "sha256:3cc5772eb20009233caf06e9d8a0577824723b44e6648ee0a2aedb6cf9381953", size = 87785, upload-time = "2024-11-28T03:43:29.933Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/61/ad/689f02752eeec26aed679477e80e632ef1b682313be70793d798c1d5fc8f/PyJWT-2.10.1-py3-none-any.whl", hash = "sha256:dcdd193e30abefd5debf142f9adfcdd2b58004e644f25406ffaebd50bd98dacb", size = 22997, upload-time = "2024-11-28T03:43:27.893Z" },
]

[[package]]
name = "pyparsing"
version = "3.2.3"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/bb/22/f1129e69d94ffff626bdb5c835506b3a5b4f3d070f17ea295e12c2c6f60f/pyparsing-3.2.3.tar.gz", hash = "sha256:b9c13f1ab8b3b542f72e28f634bad4de758ab3ce4546e4301970ad6fa77c38be", size = 1088608, upload-time = "2025-03-25T05:01:28.114Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/05/e7/df2285f3d08fee213f2d041540fa4fc9ca6c2d44cf36d3a035bf2a8d2bcc/pyparsing-3.2.3-py3-none-any.whl", hash = "sha256:a749938e02d6fd0b59b356ca504a24982314bb090c383e3cf201c95ef7e2bfcf", size = 111120, upload-time = "2025-03-25T05:01:24.908Z" },
]

[[package]]
name = "pytest"
version = "8.4.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "colorama", marker = "sys_platform == 'win32'" },
    { name = "iniconfig" },
    { name = "packaging" },
    { name = "pluggy" },
    { name = "pygments" },
]
sdist = { url = "https://files.pythonhosted.org/packages/08/ba/45911d754e8eba3d5a841a5ce61a65a685ff1798421ac054f85aa8747dfb/pytest-8.4.1.tar.gz", hash = "sha256:7c67fd69174877359ed9371ec3af8a3d2b04741818c51e5e99cc1742251fa93c", size = 1517714, upload-time = "2025-06-18T05:48:06.109Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/29/16/c8a903f4c4dffe7a12843191437d7cd8e32751d5de349d45d3fe69544e87/pytest-8.4.1-py3-none-any.whl", hash = "sha256:539c70ba6fcead8e78eebbf1115e8b589e7565830d7d006a8723f19ac8a0afb7", size = 365474, upload-time = "2025-06-18T05:48:03.955Z" },
]

[[package]]
name = "pytest-asyncio"
version = "1.0.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "pytest" },
]
sdist = { url = "https://files.pythonhosted.org/packages/d0/d4/14f53324cb1a6381bef29d698987625d80052bb33932d8e7cbf9b337b17c/pytest_asyncio-1.0.0.tar.gz", hash = "sha256:d15463d13f4456e1ead2594520216b225a16f781e144f8fdf6c5bb4667c48b3f", size = 46960, upload-time = "2025-05-26T04:54:40.484Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/30/05/ce271016e351fddc8399e546f6e23761967ee09c8c568bbfbecb0c150171/pytest_asyncio-1.0.0-py3-none-any.whl", hash = "sha256:4f024da9f1ef945e680dc68610b52550e36590a67fd31bb3b4943979a1f90ef3", size = 15976, upload-time = "2025-05-26T04:54:39.035Z" },
]

[[package]]
name = "pytest-cov"
version = "6.2.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "coverage" },
    { name = "pluggy" },
    { name = "pytest" },
]
sdist = { url = "https://files.pythonhosted.org/packages/18/99/668cade231f434aaa59bbfbf49469068d2ddd945000621d3d165d2e7dd7b/pytest_cov-6.2.1.tar.gz", hash = "sha256:25cc6cc0a5358204b8108ecedc51a9b57b34cc6b8c967cc2c01a4e00d8a67da2", size = 69432, upload-time = "2025-06-12T10:47:47.684Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/bc/16/4ea354101abb1287856baa4af2732be351c7bee728065aed451b678153fd/pytest_cov-6.2.1-py3-none-any.whl", hash = "sha256:f5bc4c23f42f1cdd23c70b1dab1bbaef4fc505ba950d53e0081d0730dd7e86d5", size = 24644, upload-time = "2025-06-12T10:47:45.932Z" },
]

[[package]]
name = "pytest-mock"
version = "3.14.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "pytest" },
]
sdist = { url = "https://files.pythonhosted.org/packages/71/28/67172c96ba684058a4d24ffe144d64783d2a270d0af0d9e792737bddc75c/pytest_mock-3.14.1.tar.gz", hash = "sha256:159e9edac4c451ce77a5cdb9fc5d1100708d2dd4ba3c3df572f14097351af80e", size = 33241, upload-time = "2025-05-26T13:58:45.167Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/b2/05/77b60e520511c53d1c1ca75f1930c7dd8e971d0c4379b7f4b3f9644685ba/pytest_mock-3.14.1-py3-none-any.whl", hash = "sha256:178aefcd11307d874b4cd3100344e7e2d888d9791a6a1d9bfe90fbc1b74fd1d0", size = 9923, upload-time = "2025-05-26T13:58:43.487Z" },
]

[[package]]
name = "python-dateutil"
version = "2.9.0.post0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "six" },
]
sdist = { url = "https://files.pythonhosted.org/packages/66/c0/0c8b6ad9f17a802ee498c46e004a0eb49bc148f2fd230864601a86dcf6db/python-dateutil-2.9.0.post0.tar.gz", hash = "sha256:37dd54208da7e1cd875388217d5e00ebd4179249f90fb72437e91a35459a0ad3", size = 342432, upload-time = "2024-03-01T18:36:20.211Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/ec/57/56b9bcc3c9c6a792fcbaf139543cee77261f3651ca9da0c93f5c1221264b/python_dateutil-2.9.0.post0-py2.py3-none-any.whl", hash = "sha256:a8b2bc7bffae282281c8140a97d3aa9c14da0b136dfe83f850eea9a5f7470427", size = 229892, upload-time = "2024-03-01T18:36:18.57Z" },
]

[[package]]
name = "python-dotenv"
version = "1.1.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/f6/b0/4bc07ccd3572a2f9df7e6782f52b0c6c90dcbb803ac4a167702d7d0dfe1e/python_dotenv-1.1.1.tar.gz", hash = "sha256:a8a6399716257f45be6a007360200409fce5cda2661e3dec71d23dc15f6189ab", size = 41978, upload-time = "2025-06-24T04:21:07.341Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/5f/ed/539768cf28c661b5b068d66d96a2f155c4971a5d55684a514c1a0e0dec2f/python_dotenv-1.1.1-py3-none-any.whl", hash = "sha256:31f23644fe2602f88ff55e1f5c79ba497e01224ee7737937930c448e4d0e24dc", size = 20556, upload-time = "2025-06-24T04:21:06.073Z" },
]

[[package]]
name = "python-multipart"
version = "0.0.20"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/f3/87/f44d7c9f274c7ee665a29b885ec97089ec5dc034c7f3fafa03da9e39a09e/python_multipart-0.0.20.tar.gz", hash = "sha256:8dd0cab45b8e23064ae09147625994d090fa46f5b0d1e13af944c331a7fa9d13", size = 37158, upload-time = "2024-12-16T19:45:46.972Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/45/58/38b5afbc1a800eeea951b9285d3912613f2603bdf897a4ab0f4bd7f405fc/python_multipart-0.0.20-py3-none-any.whl", hash = "sha256:8a62d3a8335e06589fe01f2a3e178cdcc632f3fbe0d492ad9ee0ec35aab1f104", size = 24546, upload-time = "2024-12-16T19:45:44.423Z" },
]

[[package]]
name = "pyyaml"
version = "6.0.2"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/54/ed/79a089b6be93607fa5cdaedf301d7dfb23af5f25c398d5ead2525b063e17/pyyaml-6.0.2.tar.gz", hash = "sha256:d584d9ec91ad65861cc08d42e834324ef890a082e591037abe114850ff7bbc3e", size = 130631, upload-time = "2024-08-06T20:33:50.674Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/86/0c/c581167fc46d6d6d7ddcfb8c843a4de25bdd27e4466938109ca68492292c/PyYAML-6.0.2-cp312-cp312-macosx_10_9_x86_64.whl", hash = "sha256:c70c95198c015b85feafc136515252a261a84561b7b1d51e3384e0655ddf25ab", size = 183873, upload-time = "2024-08-06T20:32:25.131Z" },
    { url = "https://files.pythonhosted.org/packages/a8/0c/38374f5bb272c051e2a69281d71cba6fdb983413e6758b84482905e29a5d/PyYAML-6.0.2-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:ce826d6ef20b1bc864f0a68340c8b3287705cae2f8b4b1d932177dcc76721725", size = 173302, upload-time = "2024-08-06T20:32:26.511Z" },
    { url = "https://files.pythonhosted.org/packages/c3/93/9916574aa8c00aa06bbac729972eb1071d002b8e158bd0e83a3b9a20a1f7/PyYAML-6.0.2-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:1f71ea527786de97d1a0cc0eacd1defc0985dcf6b3f17bb77dcfc8c34bec4dc5", size = 739154, upload-time = "2024-08-06T20:32:28.363Z" },
    { url = "https://files.pythonhosted.org/packages/95/0f/b8938f1cbd09739c6da569d172531567dbcc9789e0029aa070856f123984/PyYAML-6.0.2-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:9b22676e8097e9e22e36d6b7bda33190d0d400f345f23d4065d48f4ca7ae0425", size = 766223, upload-time = "2024-08-06T20:32:30.058Z" },
    { url = "https://files.pythonhosted.org/packages/b9/2b/614b4752f2e127db5cc206abc23a8c19678e92b23c3db30fc86ab731d3bd/PyYAML-6.0.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:80bab7bfc629882493af4aa31a4cfa43a4c57c83813253626916b8c7ada83476", size = 767542, upload-time = "2024-08-06T20:32:31.881Z" },
    { url = "https://files.pythonhosted.org/packages/d4/00/dd137d5bcc7efea1836d6264f049359861cf548469d18da90cd8216cf05f/PyYAML-6.0.2-cp312-cp312-musllinux_1_1_aarch64.whl", hash = "sha256:0833f8694549e586547b576dcfaba4a6b55b9e96098b36cdc7ebefe667dfed48", size = 731164, upload-time = "2024-08-06T20:32:37.083Z" },
    { url = "https://files.pythonhosted.org/packages/c9/1f/4f998c900485e5c0ef43838363ba4a9723ac0ad73a9dc42068b12aaba4e4/PyYAML-6.0.2-cp312-cp312-musllinux_1_1_x86_64.whl", hash = "sha256:8b9c7197f7cb2738065c481a0461e50ad02f18c78cd75775628afb4d7137fb3b", size = 756611, upload-time = "2024-08-06T20:32:38.898Z" },
    { url = "https://files.pythonhosted.org/packages/df/d1/f5a275fdb252768b7a11ec63585bc38d0e87c9e05668a139fea92b80634c/PyYAML-6.0.2-cp312-cp312-win32.whl", hash = "sha256:ef6107725bd54b262d6dedcc2af448a266975032bc85ef0172c5f059da6325b4", size = 140591, upload-time = "2024-08-06T20:32:40.241Z" },
    { url = "https://files.pythonhosted.org/packages/0c/e8/4f648c598b17c3d06e8753d7d13d57542b30d56e6c2dedf9c331ae56312e/PyYAML-6.0.2-cp312-cp312-win_amd64.whl", hash = "sha256:7e7401d0de89a9a855c839bc697c079a4af81cf878373abd7dc625847d25cbd8", size = 156338, upload-time = "2024-08-06T20:32:41.93Z" },
    { url = "https://files.pythonhosted.org/packages/ef/e3/3af305b830494fa85d95f6d95ef7fa73f2ee1cc8ef5b495c7c3269fb835f/PyYAML-6.0.2-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:efdca5630322a10774e8e98e1af481aad470dd62c3170801852d752aa7a783ba", size = 181309, upload-time = "2024-08-06T20:32:43.4Z" },
    { url = "https://files.pythonhosted.org/packages/45/9f/3b1c20a0b7a3200524eb0076cc027a970d320bd3a6592873c85c92a08731/PyYAML-6.0.2-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:50187695423ffe49e2deacb8cd10510bc361faac997de9efef88badc3bb9e2d1", size = 171679, upload-time = "2024-08-06T20:32:44.801Z" },
    { url = "https://files.pythonhosted.org/packages/7c/9a/337322f27005c33bcb656c655fa78325b730324c78620e8328ae28b64d0c/PyYAML-6.0.2-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:0ffe8360bab4910ef1b9e87fb812d8bc0a308b0d0eef8c8f44e0254ab3b07133", size = 733428, upload-time = "2024-08-06T20:32:46.432Z" },
    { url = "https://files.pythonhosted.org/packages/a3/69/864fbe19e6c18ea3cc196cbe5d392175b4cf3d5d0ac1403ec3f2d237ebb5/PyYAML-6.0.2-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:17e311b6c678207928d649faa7cb0d7b4c26a0ba73d41e99c4fff6b6c3276484", size = 763361, upload-time = "2024-08-06T20:32:51.188Z" },
    { url = "https://files.pythonhosted.org/packages/04/24/b7721e4845c2f162d26f50521b825fb061bc0a5afcf9a386840f23ea19fa/PyYAML-6.0.2-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:70b189594dbe54f75ab3a1acec5f1e3faa7e8cf2f1e08d9b561cb41b845f69d5", size = 759523, upload-time = "2024-08-06T20:32:53.019Z" },
    { url = "https://files.pythonhosted.org/packages/2b/b2/e3234f59ba06559c6ff63c4e10baea10e5e7df868092bf9ab40e5b9c56b6/PyYAML-6.0.2-cp313-cp313-musllinux_1_1_aarch64.whl", hash = "sha256:41e4e3953a79407c794916fa277a82531dd93aad34e29c2a514c2c0c5fe971cc", size = 726660, upload-time = "2024-08-06T20:32:54.708Z" },
    { url = "https://files.pythonhosted.org/packages/fe/0f/25911a9f080464c59fab9027482f822b86bf0608957a5fcc6eaac85aa515/PyYAML-6.0.2-cp313-cp313-musllinux_1_1_x86_64.whl", hash = "sha256:68ccc6023a3400877818152ad9a1033e3db8625d899c72eacb5a668902e4d652", size = 751597, upload-time = "2024-08-06T20:32:56.985Z" },
    { url = "https://files.pythonhosted.org/packages/14/0d/e2c3b43bbce3cf6bd97c840b46088a3031085179e596d4929729d8d68270/PyYAML-6.0.2-cp313-cp313-win32.whl", hash = "sha256:bc2fa7c6b47d6bc618dd7fb02ef6fdedb1090ec036abab80d4681424b84c1183", size = 140527, upload-time = "2024-08-06T20:33:03.001Z" },
    { url = "https://files.pythonhosted.org/packages/fa/de/02b54f42487e3d3c6efb3f89428677074ca7bf43aae402517bc7cca949f3/PyYAML-6.0.2-cp313-cp313-win_amd64.whl", hash = "sha256:8388ee1976c416731879ac16da0aff3f63b286ffdd57cdeb95f3f2e085687563", size = 156446, upload-time = "2024-08-06T20:33:04.33Z" },
]

[[package]]
name = "realtime"
version = "2.5.3"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "typing-extensions" },
    { name = "websockets" },
]
sdist = { url = "https://files.pythonhosted.org/packages/48/94/3cf962b814303a1688eece56a94b25a7bd423d60705f1124cba0896c9c07/realtime-2.5.3.tar.gz", hash = "sha256:0587594f3bc1c84bf007ff625075b86db6528843e03250dc84f4f2808be3d99a", size = 18527, upload-time = "2025-06-26T22:39:01.59Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/fe/2a/f69c156a58d44b7b9ca22dab181b91e4d93d074f99923c75907bf3953d40/realtime-2.5.3-py3-none-any.whl", hash = "sha256:eb0994636946eff04c4c7f044f980c8c633c7eb632994f549f61053a474ac970", size = 21784, upload-time = "2025-06-26T22:38:59.98Z" },
]

[[package]]
name = "requests"
version = "2.32.4"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "certifi" },
    { name = "charset-normalizer" },
    { name = "idna" },
    { name = "urllib3" },
]
sdist = { url = "https://files.pythonhosted.org/packages/e1/0a/929373653770d8a0d7ea76c37de6e41f11eb07559b103b1c02cafb3f7cf8/requests-2.32.4.tar.gz", hash = "sha256:27d0316682c8a29834d3264820024b62a36942083d52caf2f14c0591336d3422", size = 135258, upload-time = "2025-06-09T16:43:07.34Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/7c/e4/56027c4a6b4ae70ca9de302488c5ca95ad4a39e190093d6c1a8ace08341b/requests-2.32.4-py3-none-any.whl", hash = "sha256:27babd3cda2a6d50b30443204ee89830707d396671944c998b5975b031ac2b2c", size = 64847, upload-time = "2025-06-09T16:43:05.728Z" },
]

[[package]]
name = "rsa"
version = "4.9.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "pyasn1" },
]
sdist = { url = "https://files.pythonhosted.org/packages/da/8a/22b7beea3ee0d44b1916c0c1cb0ee3af23b700b6da9f04991899d0c555d4/rsa-4.9.1.tar.gz", hash = "sha256:e7bdbfdb5497da4c07dfd35530e1a902659db6ff241e39d9953cad06ebd0ae75", size = 29034, upload-time = "2025-04-16T09:51:18.218Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/64/8d/0133e4eb4beed9e425d9a98ed6e081a55d195481b7632472be1af08d2f6b/rsa-4.9.1-py3-none-any.whl", hash = "sha256:68635866661c6836b8d39430f97a996acbd61bfa49406748ea243539fe239762", size = 34696, upload-time = "2025-04-16T09:51:17.142Z" },
]

[[package]]
name = "six"
version = "1.17.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/94/e7/b2c673351809dca68a0e064b6af791aa332cf192da575fd474ed7d6f16a2/six-1.17.0.tar.gz", hash = "sha256:ff70335d468e7eb6ec65b95b99d3a2836546063f63acc5171de367e834932a81", size = 34031, upload-time = "2024-12-04T17:35:28.174Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/b7/ce/149a00dd41f10bc29e5921b496af8b574d8413afcd5e30dfa0ed46c2cc5e/six-1.17.0-py2.py3-none-any.whl", hash = "sha256:4721f391ed90541fddacab5acf947aa0d3dc7d27b2e1e8eda2be8970586c3274", size = 11050, upload-time = "2024-12-04T17:35:26.475Z" },
]

[[package]]
name = "sniffio"
version = "1.3.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/a2/87/a6771e1546d97e7e041b6ae58d80074f81b7d5121207425c964ddf5cfdbd/sniffio-1.3.1.tar.gz", hash = "sha256:f4324edc670a0f49750a81b895f35c3adb843cca46f0530f79fc1babb23789dc", size = 20372, upload-time = "2024-02-25T23:20:04.057Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/e9/44/75a9c9421471a6c4805dbf2356f7c181a29c1879239abab1ea2cc8f38b40/sniffio-1.3.1-py3-none-any.whl", hash = "sha256:2f6da418d1f1e0fddd844478f41680e794e6051915791a034ff65e5f100525a2", size = 10235, upload-time = "2024-02-25T23:20:01.196Z" },
]

[[package]]
name = "starlette"
version = "0.46.2"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "anyio" },
]
sdist = { url = "https://files.pythonhosted.org/packages/ce/20/08dfcd9c983f6a6f4a1000d934b9e6d626cff8d2eeb77a89a68eef20a2b7/starlette-0.46.2.tar.gz", hash = "sha256:7f7361f34eed179294600af672f565727419830b54b7b084efe44bb82d2fccd5", size = 2580846, upload-time = "2025-04-13T13:56:17.942Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/8b/0c/9d30a4ebeb6db2b25a841afbb80f6ef9a854fc3b41be131d249a977b4959/starlette-0.46.2-py3-none-any.whl", hash = "sha256:595633ce89f8ffa71a015caed34a5b2dc1c0cdb3f0f1fbd1e69339cf2abeec35", size = 72037, upload-time = "2025-04-13T13:56:16.21Z" },
]

[[package]]
name = "storage3"
version = "0.12.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "deprecation" },
    { name = "httpx", extra = ["http2"] },
    { name = "python-dateutil" },
]
sdist = { url = "https://files.pythonhosted.org/packages/c5/86/9eae84e8ad4ba73f575f3eaf5536d949f2fd7d6adc85829f9af04bce97e2/storage3-0.12.0.tar.gz", hash = "sha256:94243f20922d57738bf42e96b9f5582b4d166e8bf209eccf20b146909f3f71b0", size = 10024, upload-time = "2025-06-19T17:50:51.763Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/b0/7e/693d6d603db142eb5e6f3cb76eb6e9c439582b7539e2695e175e2de3ac44/storage3-0.12.0-py3-none-any.whl", hash = "sha256:1c4585693ca42243ded1512b58e54c697111e91a20916cd14783eebc37e7c87d", size = 18422, upload-time = "2025-06-19T17:50:50.294Z" },
]

[[package]]
name = "strenum"
version = "0.4.15"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/85/ad/430fb60d90e1d112a62ff57bdd1f286ec73a2a0331272febfddd21f330e1/StrEnum-0.4.15.tar.gz", hash = "sha256:878fb5ab705442070e4dd1929bb5e2249511c0bcf2b0eeacf3bcd80875c82eff", size = 23384, upload-time = "2023-06-29T22:02:58.399Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/81/69/297302c5f5f59c862faa31e6cb9a4cd74721cd1e052b38e464c5b402df8b/StrEnum-0.4.15-py3-none-any.whl", hash = "sha256:a30cda4af7cc6b5bf52c8055bc4bf4b2b6b14a93b574626da33df53cf7740659", size = 8851, upload-time = "2023-06-29T22:02:56.947Z" },
]

[[package]]
name = "study-scriber"
version = "0.1.0"
source = { virtual = "." }
dependencies = [
    { name = "aiofiles" },
    { name = "aiohttp" },
    { name = "fastapi" },
    { name = "google-generativeai" },
    { name = "gotrue" },
    { name = "httpx" },
    { name = "loguru" },
    { name = "openai" },
    { name = "postgrest" },
    { name = "prometheus-client" },
    { name = "psycopg2-binary" },
    { name = "pydantic" },
    { name = "pydantic-settings" },
    { name = "pytest" },
    { name = "pytest-asyncio" },
    { name = "python-dotenv" },
    { name = "python-multipart" },
    { name = "realtime" },
    { name = "storage3" },
    { name = "supabase" },
    { name = "uvicorn", extra = ["standard"] },
    { name = "uvloop" },
]

[package.optional-dependencies]
dev = [
    { name = "pytest" },
    { name = "pytest-asyncio" },
    { name = "pytest-cov" },
]

[package.metadata]
requires-dist = [
    { name = "aiofiles" },
    { name = "aiohttp" },
    { name = "fastapi" },
    { name = "google-generativeai" },
    { name = "gotrue" },
    { name = "httpx" },
    { name = "loguru" },
    { name = "openai" },
    { name = "postgrest" },
    { name = "prometheus-client" },
    { name = "psycopg2-binary" },
    { name = "pydantic" },
    { name = "pydantic-settings" },
    { name = "pytest", specifier = ">=8.0.0" },
    { name = "pytest", marker = "extra == 'dev'", specifier = ">=8.0.0" },
    { name = "pytest-asyncio", specifier = ">=0.23.0" },
    { name = "pytest-asyncio", marker = "extra == 'dev'", specifier = ">=0.23.0" },
    { name = "pytest-cov", marker = "extra == 'dev'", specifier = ">=4.0.0" },
    { name = "python-dotenv" },
    { name = "python-multipart" },
    { name = "realtime" },
    { name = "storage3" },
    { name = "supabase" },
    { name = "uvicorn", extras = ["standard"] },
    { name = "uvloop" },
]
provides-extras = ["dev"]

[[package]]
name = "supabase"
version = "2.16.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "gotrue" },
    { name = "httpx" },
    { name = "postgrest" },
    { name = "realtime" },
    { name = "storage3" },
    { name = "supafunc" },
]
sdist = { url = "https://files.pythonhosted.org/packages/c6/93/335b91e8d09a95a337f051f84e85495f7732400f10c1bcb698a7571f8f1c/supabase-2.16.0.tar.gz", hash = "sha256:98f3810158012d4ec0e3083f2e5515f5e10b32bd71e7d458662140e963c1d164", size = 14595, upload-time = "2025-06-23T16:09:29.504Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/7e/75/2ab71e6605d20a740ff041c6176a328cfaa3fcee0dd0db885e081d98df06/supabase-2.16.0-py3-none-any.whl", hash = "sha256:99065caab3d90a56650bf39fbd0e49740995da3738ab28706c61bd7f2401db55", size = 17713, upload-time = "2025-06-23T16:09:28.299Z" },
]

[[package]]
name = "supafunc"
version = "0.10.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "httpx", extra = ["http2"] },
    { name = "strenum" },
]
sdist = { url = "https://files.pythonhosted.org/packages/e8/4b/16f94bcae8a49f5e09544a4fb0e6ad1c2288038036cefdeedb72fcffd92c/supafunc-0.10.1.tar.gz", hash = "sha256:a5b33c8baecb6b5297d25da29a2503e2ec67ee6986f3d44c137e651b8a59a17d", size = 5036, upload-time = "2025-06-23T18:26:50.327Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/76/4a/9cbea12d86a741d4e73a6e278c2b1d6479fb03d1002efb00e8e71aea76db/supafunc-0.10.1-py3-none-any.whl", hash = "sha256:26df9bd25ff2ef56cb5bfb8962de98f43331f7f8ff69572bac3ed9c3a9672040", size = 8028, upload-time = "2025-06-23T18:26:49.176Z" },
]

[[package]]
name = "tqdm"
version = "4.67.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "colorama", marker = "sys_platform == 'win32'" },
]
sdist = { url = "https://files.pythonhosted.org/packages/a8/4b/29b4ef32e036bb34e4ab51796dd745cdba7ed47ad142a9f4a1eb8e0c744d/tqdm-4.67.1.tar.gz", hash = "sha256:f8aef9c52c08c13a65f30ea34f4e5aac3fd1a34959879d7e59e63027286627f2", size = 169737, upload-time = "2024-11-24T20:12:22.481Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d0/30/dc54f88dd4a2b5dc8a0279bdd7270e735851848b762aeb1c1184ed1f6b14/tqdm-4.67.1-py3-none-any.whl", hash = "sha256:26445eca388f82e72884e0d580d5464cd801a3ea01e63e5601bdff9ba6a48de2", size = 78540, upload-time = "2024-11-24T20:12:19.698Z" },
]

[[package]]
name = "typing-extensions"
version = "4.14.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/d1/bc/51647cd02527e87d05cb083ccc402f93e441606ff1f01739a62c8ad09ba5/typing_extensions-4.14.0.tar.gz", hash = "sha256:8676b788e32f02ab42d9e7c61324048ae4c6d844a399eebace3d4979d75ceef4", size = 107423, upload-time = "2025-06-02T14:52:11.399Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/69/e0/552843e0d356fbb5256d21449fa957fa4eff3bbc135a74a691ee70c7c5da/typing_extensions-4.14.0-py3-none-any.whl", hash = "sha256:a1514509136dd0b477638fc68d6a91497af5076466ad0fa6c338e44e359944af", size = 43839, upload-time = "2025-06-02T14:52:10.026Z" },
]

[[package]]
name = "typing-inspection"
version = "0.4.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "typing-extensions" },
]
sdist = { url = "https://files.pythonhosted.org/packages/f8/b1/0c11f5058406b3af7609f121aaa6b609744687f1d158b3c3a5bf4cc94238/typing_inspection-0.4.1.tar.gz", hash = "sha256:6ae134cc0203c33377d43188d4064e9b357dba58cff3185f22924610e70a9d28", size = 75726, upload-time = "2025-05-21T18:55:23.885Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/17/69/cd203477f944c353c31bade965f880aa1061fd6bf05ded0726ca845b6ff7/typing_inspection-0.4.1-py3-none-any.whl", hash = "sha256:389055682238f53b04f7badcb49b989835495a96700ced5dab2d8feae4b26f51", size = 14552, upload-time = "2025-05-21T18:55:22.152Z" },
]

[[package]]
name = "uritemplate"
version = "4.2.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/98/60/f174043244c5306c9988380d2cb10009f91563fc4b31293d27e17201af56/uritemplate-4.2.0.tar.gz", hash = "sha256:480c2ed180878955863323eea31b0ede668795de182617fef9c6ca09e6ec9d0e", size = 33267, upload-time = "2025-06-02T15:12:06.318Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/a9/99/3ae339466c9183ea5b8ae87b34c0b897eda475d2aec2307cae60e5cd4f29/uritemplate-4.2.0-py3-none-any.whl", hash = "sha256:962201ba1c4edcab02e60f9a0d3821e82dfc5d2d6662a21abd533879bdb8a686", size = 11488, upload-time = "2025-06-02T15:12:03.405Z" },
]

[[package]]
name = "urllib3"
version = "2.5.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/15/22/9ee70a2574a4f4599c47dd506532914ce044817c7752a79b6a51286319bc/urllib3-2.5.0.tar.gz", hash = "sha256:3fc47733c7e419d4bc3f6b3dc2b4f890bb743906a30d56ba4a5bfa4bbff92760", size = 393185, upload-time = "2025-06-18T14:07:41.644Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/a7/c2/fe1e52489ae3122415c51f387e221dd0773709bad6c6cdaa599e8a2c5185/urllib3-2.5.0-py3-none-any.whl", hash = "sha256:e6b01673c0fa6a13e374b50871808eb3bf7046c4b125b216f6bf1cc604cff0dc", size = 129795, upload-time = "2025-06-18T14:07:40.39Z" },
]

[[package]]
name = "uvicorn"
version = "0.35.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "click" },
    { name = "h11" },
]
sdist = { url = "https://files.pythonhosted.org/packages/5e/42/e0e305207bb88c6b8d3061399c6a961ffe5fbb7e2aa63c9234df7259e9cd/uvicorn-0.35.0.tar.gz", hash = "sha256:bc662f087f7cf2ce11a1d7fd70b90c9f98ef2e2831556dd078d131b96cc94a01", size = 78473, upload-time = "2025-06-28T16:15:46.058Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d2/e2/dc81b1bd1dcfe91735810265e9d26bc8ec5da45b4c0f6237e286819194c3/uvicorn-0.35.0-py3-none-any.whl", hash = "sha256:197535216b25ff9b785e29a0b79199f55222193d47f820816e7da751e9bc8d4a", size = 66406, upload-time = "2025-06-28T16:15:44.816Z" },
]

[package.optional-dependencies]
standard = [
    { name = "colorama", marker = "sys_platform == 'win32'" },
    { name = "httptools" },
    { name = "python-dotenv" },
    { name = "pyyaml" },
    { name = "uvloop", marker = "platform_python_implementation != 'PyPy' and sys_platform != 'cygwin' and sys_platform != 'win32'" },
    { name = "watchfiles" },
    { name = "websockets" },
]

[[package]]
name = "uvloop"
version = "0.21.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/af/c0/854216d09d33c543f12a44b393c402e89a920b1a0a7dc634c42de91b9cf6/uvloop-0.21.0.tar.gz", hash = "sha256:3bf12b0fda68447806a7ad847bfa591613177275d35b6724b1ee573faa3704e3", size = 2492741, upload-time = "2024-10-14T23:38:35.489Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/8c/4c/03f93178830dc7ce8b4cdee1d36770d2f5ebb6f3d37d354e061eefc73545/uvloop-0.21.0-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:359ec2c888397b9e592a889c4d72ba3d6befba8b2bb01743f72fffbde663b59c", size = 1471284, upload-time = "2024-10-14T23:37:47.833Z" },
    { url = "https://files.pythonhosted.org/packages/43/3e/92c03f4d05e50f09251bd8b2b2b584a2a7f8fe600008bcc4523337abe676/uvloop-0.21.0-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:f7089d2dc73179ce5ac255bdf37c236a9f914b264825fdaacaded6990a7fb4c2", size = 821349, upload-time = "2024-10-14T23:37:50.149Z" },
    { url = "https://files.pythonhosted.org/packages/a6/ef/a02ec5da49909dbbfb1fd205a9a1ac4e88ea92dcae885e7c961847cd51e2/uvloop-0.21.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:baa4dcdbd9ae0a372f2167a207cd98c9f9a1ea1188a8a526431eef2f8116cc8d", size = 4580089, upload-time = "2024-10-14T23:37:51.703Z" },
    { url = "https://files.pythonhosted.org/packages/06/a7/b4e6a19925c900be9f98bec0a75e6e8f79bb53bdeb891916609ab3958967/uvloop-0.21.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:86975dca1c773a2c9864f4c52c5a55631038e387b47eaf56210f873887b6c8dc", size = 4693770, upload-time = "2024-10-14T23:37:54.122Z" },
    { url = "https://files.pythonhosted.org/packages/ce/0c/f07435a18a4b94ce6bd0677d8319cd3de61f3a9eeb1e5f8ab4e8b5edfcb3/uvloop-0.21.0-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:461d9ae6660fbbafedd07559c6a2e57cd553b34b0065b6550685f6653a98c1cb", size = 4451321, upload-time = "2024-10-14T23:37:55.766Z" },
    { url = "https://files.pythonhosted.org/packages/8f/eb/f7032be105877bcf924709c97b1bf3b90255b4ec251f9340cef912559f28/uvloop-0.21.0-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:183aef7c8730e54c9a3ee3227464daed66e37ba13040bb3f350bc2ddc040f22f", size = 4659022, upload-time = "2024-10-14T23:37:58.195Z" },
    { url = "https://files.pythonhosted.org/packages/3f/8d/2cbef610ca21539f0f36e2b34da49302029e7c9f09acef0b1c3b5839412b/uvloop-0.21.0-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:bfd55dfcc2a512316e65f16e503e9e450cab148ef11df4e4e679b5e8253a5281", size = 1468123, upload-time = "2024-10-14T23:38:00.688Z" },
    { url = "https://files.pythonhosted.org/packages/93/0d/b0038d5a469f94ed8f2b2fce2434a18396d8fbfb5da85a0a9781ebbdec14/uvloop-0.21.0-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:787ae31ad8a2856fc4e7c095341cccc7209bd657d0e71ad0dc2ea83c4a6fa8af", size = 819325, upload-time = "2024-10-14T23:38:02.309Z" },
    { url = "https://files.pythonhosted.org/packages/50/94/0a687f39e78c4c1e02e3272c6b2ccdb4e0085fda3b8352fecd0410ccf915/uvloop-0.21.0-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:5ee4d4ef48036ff6e5cfffb09dd192c7a5027153948d85b8da7ff705065bacc6", size = 4582806, upload-time = "2024-10-14T23:38:04.711Z" },
    { url = "https://files.pythonhosted.org/packages/d2/19/f5b78616566ea68edd42aacaf645adbf71fbd83fc52281fba555dc27e3f1/uvloop-0.21.0-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:f3df876acd7ec037a3d005b3ab85a7e4110422e4d9c1571d4fc89b0fc41b6816", size = 4701068, upload-time = "2024-10-14T23:38:06.385Z" },
    { url = "https://files.pythonhosted.org/packages/47/57/66f061ee118f413cd22a656de622925097170b9380b30091b78ea0c6ea75/uvloop-0.21.0-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:bd53ecc9a0f3d87ab847503c2e1552b690362e005ab54e8a48ba97da3924c0dc", size = 4454428, upload-time = "2024-10-14T23:38:08.416Z" },
    { url = "https://files.pythonhosted.org/packages/63/9a/0962b05b308494e3202d3f794a6e85abe471fe3cafdbcf95c2e8c713aabd/uvloop-0.21.0-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:a5c39f217ab3c663dc699c04cbd50c13813e31d917642d459fdcec07555cc553", size = 4660018, upload-time = "2024-10-14T23:38:10.888Z" },
]

[[package]]
name = "watchfiles"
version = "1.1.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "anyio" },
]
sdist = { url = "https://files.pythonhosted.org/packages/2a/9a/d451fcc97d029f5812e898fd30a53fd8c15c7bbd058fd75cfc6beb9bd761/watchfiles-1.1.0.tar.gz", hash = "sha256:693ed7ec72cbfcee399e92c895362b6e66d63dac6b91e2c11ae03d10d503e575", size = 94406, upload-time = "2025-06-15T19:06:59.42Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/f6/b8/858957045a38a4079203a33aaa7d23ea9269ca7761c8a074af3524fbb240/watchfiles-1.1.0-cp312-cp312-macosx_10_12_x86_64.whl", hash = "sha256:9dc001c3e10de4725c749d4c2f2bdc6ae24de5a88a339c4bce32300a31ede179", size = 402339, upload-time = "2025-06-15T19:05:24.516Z" },
    { url = "https://files.pythonhosted.org/packages/80/28/98b222cca751ba68e88521fabd79a4fab64005fc5976ea49b53fa205d1fa/watchfiles-1.1.0-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:d9ba68ec283153dead62cbe81872d28e053745f12335d037de9cbd14bd1877f5", size = 394409, upload-time = "2025-06-15T19:05:25.469Z" },
    { url = "https://files.pythonhosted.org/packages/86/50/dee79968566c03190677c26f7f47960aff738d32087087bdf63a5473e7df/watchfiles-1.1.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:130fc497b8ee68dce163e4254d9b0356411d1490e868bd8790028bc46c5cc297", size = 450939, upload-time = "2025-06-15T19:05:26.494Z" },
    { url = "https://files.pythonhosted.org/packages/40/45/a7b56fb129700f3cfe2594a01aa38d033b92a33dddce86c8dfdfc1247b72/watchfiles-1.1.0-cp312-cp312-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:50a51a90610d0845a5931a780d8e51d7bd7f309ebc25132ba975aca016b576a0", size = 457270, upload-time = "2025-06-15T19:05:27.466Z" },
    { url = "https://files.pythonhosted.org/packages/b5/c8/fa5ef9476b1d02dc6b5e258f515fcaaecf559037edf8b6feffcbc097c4b8/watchfiles-1.1.0-cp312-cp312-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:dc44678a72ac0910bac46fa6a0de6af9ba1355669b3dfaf1ce5f05ca7a74364e", size = 483370, upload-time = "2025-06-15T19:05:28.548Z" },
    { url = "https://files.pythonhosted.org/packages/98/68/42cfcdd6533ec94f0a7aab83f759ec11280f70b11bfba0b0f885e298f9bd/watchfiles-1.1.0-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:a543492513a93b001975ae283a51f4b67973662a375a403ae82f420d2c7205ee", size = 598654, upload-time = "2025-06-15T19:05:29.997Z" },
    { url = "https://files.pythonhosted.org/packages/d3/74/b2a1544224118cc28df7e59008a929e711f9c68ce7d554e171b2dc531352/watchfiles-1.1.0-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:8ac164e20d17cc285f2b94dc31c384bc3aa3dd5e7490473b3db043dd70fbccfd", size = 478667, upload-time = "2025-06-15T19:05:31.172Z" },
    { url = "https://files.pythonhosted.org/packages/8c/77/e3362fe308358dc9f8588102481e599c83e1b91c2ae843780a7ded939a35/watchfiles-1.1.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:f7590d5a455321e53857892ab8879dce62d1f4b04748769f5adf2e707afb9d4f", size = 452213, upload-time = "2025-06-15T19:05:32.299Z" },
    { url = "https://files.pythonhosted.org/packages/6e/17/c8f1a36540c9a1558d4faf08e909399e8133599fa359bf52ec8fcee5be6f/watchfiles-1.1.0-cp312-cp312-musllinux_1_1_aarch64.whl", hash = "sha256:37d3d3f7defb13f62ece99e9be912afe9dd8a0077b7c45ee5a57c74811d581a4", size = 626718, upload-time = "2025-06-15T19:05:33.415Z" },
    { url = "https://files.pythonhosted.org/packages/26/45/fb599be38b4bd38032643783d7496a26a6f9ae05dea1a42e58229a20ac13/watchfiles-1.1.0-cp312-cp312-musllinux_1_1_x86_64.whl", hash = "sha256:7080c4bb3efd70a07b1cc2df99a7aa51d98685be56be6038c3169199d0a1c69f", size = 623098, upload-time = "2025-06-15T19:05:34.534Z" },
    { url = "https://files.pythonhosted.org/packages/a1/e7/fdf40e038475498e160cd167333c946e45d8563ae4dd65caf757e9ffe6b4/watchfiles-1.1.0-cp312-cp312-win32.whl", hash = "sha256:cbcf8630ef4afb05dc30107bfa17f16c0896bb30ee48fc24bf64c1f970f3b1fd", size = 279209, upload-time = "2025-06-15T19:05:35.577Z" },
    { url = "https://files.pythonhosted.org/packages/3f/d3/3ae9d5124ec75143bdf088d436cba39812122edc47709cd2caafeac3266f/watchfiles-1.1.0-cp312-cp312-win_amd64.whl", hash = "sha256:cbd949bdd87567b0ad183d7676feb98136cde5bb9025403794a4c0db28ed3a47", size = 292786, upload-time = "2025-06-15T19:05:36.559Z" },
    { url = "https://files.pythonhosted.org/packages/26/2f/7dd4fc8b5f2b34b545e19629b4a018bfb1de23b3a496766a2c1165ca890d/watchfiles-1.1.0-cp312-cp312-win_arm64.whl", hash = "sha256:0a7d40b77f07be87c6faa93d0951a0fcd8cbca1ddff60a1b65d741bac6f3a9f6", size = 284343, upload-time = "2025-06-15T19:05:37.5Z" },
    { url = "https://files.pythonhosted.org/packages/d3/42/fae874df96595556a9089ade83be34a2e04f0f11eb53a8dbf8a8a5e562b4/watchfiles-1.1.0-cp313-cp313-macosx_10_12_x86_64.whl", hash = "sha256:5007f860c7f1f8df471e4e04aaa8c43673429047d63205d1630880f7637bca30", size = 402004, upload-time = "2025-06-15T19:05:38.499Z" },
    { url = "https://files.pythonhosted.org/packages/fa/55/a77e533e59c3003d9803c09c44c3651224067cbe7fb5d574ddbaa31e11ca/watchfiles-1.1.0-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:20ecc8abbd957046f1fe9562757903f5eaf57c3bce70929fda6c7711bb58074a", size = 393671, upload-time = "2025-06-15T19:05:39.52Z" },
    { url = "https://files.pythonhosted.org/packages/05/68/b0afb3f79c8e832e6571022611adbdc36e35a44e14f129ba09709aa4bb7a/watchfiles-1.1.0-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:f2f0498b7d2a3c072766dba3274fe22a183dbea1f99d188f1c6c72209a1063dc", size = 449772, upload-time = "2025-06-15T19:05:40.897Z" },
    { url = "https://files.pythonhosted.org/packages/ff/05/46dd1f6879bc40e1e74c6c39a1b9ab9e790bf1f5a2fe6c08b463d9a807f4/watchfiles-1.1.0-cp313-cp313-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:239736577e848678e13b201bba14e89718f5c2133dfd6b1f7846fa1b58a8532b", size = 456789, upload-time = "2025-06-15T19:05:42.045Z" },
    { url = "https://files.pythonhosted.org/packages/8b/ca/0eeb2c06227ca7f12e50a47a3679df0cd1ba487ea19cf844a905920f8e95/watchfiles-1.1.0-cp313-cp313-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:eff4b8d89f444f7e49136dc695599a591ff769300734446c0a86cba2eb2f9895", size = 482551, upload-time = "2025-06-15T19:05:43.781Z" },
    { url = "https://files.pythonhosted.org/packages/31/47/2cecbd8694095647406645f822781008cc524320466ea393f55fe70eed3b/watchfiles-1.1.0-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:12b0a02a91762c08f7264e2e79542f76870c3040bbc847fb67410ab81474932a", size = 597420, upload-time = "2025-06-15T19:05:45.244Z" },
    { url = "https://files.pythonhosted.org/packages/d9/7e/82abc4240e0806846548559d70f0b1a6dfdca75c1b4f9fa62b504ae9b083/watchfiles-1.1.0-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:29e7bc2eee15cbb339c68445959108803dc14ee0c7b4eea556400131a8de462b", size = 477950, upload-time = "2025-06-15T19:05:46.332Z" },
    { url = "https://files.pythonhosted.org/packages/25/0d/4d564798a49bf5482a4fa9416dea6b6c0733a3b5700cb8a5a503c4b15853/watchfiles-1.1.0-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:d9481174d3ed982e269c090f780122fb59cee6c3796f74efe74e70f7780ed94c", size = 451706, upload-time = "2025-06-15T19:05:47.459Z" },
    { url = "https://files.pythonhosted.org/packages/81/b5/5516cf46b033192d544102ea07c65b6f770f10ed1d0a6d388f5d3874f6e4/watchfiles-1.1.0-cp313-cp313-musllinux_1_1_aarch64.whl", hash = "sha256:80f811146831c8c86ab17b640801c25dc0a88c630e855e2bef3568f30434d52b", size = 625814, upload-time = "2025-06-15T19:05:48.654Z" },
    { url = "https://files.pythonhosted.org/packages/0c/dd/7c1331f902f30669ac3e754680b6edb9a0dd06dea5438e61128111fadd2c/watchfiles-1.1.0-cp313-cp313-musllinux_1_1_x86_64.whl", hash = "sha256:60022527e71d1d1fda67a33150ee42869042bce3d0fcc9cc49be009a9cded3fb", size = 622820, upload-time = "2025-06-15T19:05:50.088Z" },
    { url = "https://files.pythonhosted.org/packages/1b/14/36d7a8e27cd128d7b1009e7715a7c02f6c131be9d4ce1e5c3b73d0e342d8/watchfiles-1.1.0-cp313-cp313-win32.whl", hash = "sha256:32d6d4e583593cb8576e129879ea0991660b935177c0f93c6681359b3654bfa9", size = 279194, upload-time = "2025-06-15T19:05:51.186Z" },
    { url = "https://files.pythonhosted.org/packages/25/41/2dd88054b849aa546dbeef5696019c58f8e0774f4d1c42123273304cdb2e/watchfiles-1.1.0-cp313-cp313-win_amd64.whl", hash = "sha256:f21af781a4a6fbad54f03c598ab620e3a77032c5878f3d780448421a6e1818c7", size = 292349, upload-time = "2025-06-15T19:05:52.201Z" },
    { url = "https://files.pythonhosted.org/packages/c8/cf/421d659de88285eb13941cf11a81f875c176f76a6d99342599be88e08d03/watchfiles-1.1.0-cp313-cp313-win_arm64.whl", hash = "sha256:5366164391873ed76bfdf618818c82084c9db7fac82b64a20c44d335eec9ced5", size = 283836, upload-time = "2025-06-15T19:05:53.265Z" },
    { url = "https://files.pythonhosted.org/packages/45/10/6faf6858d527e3599cc50ec9fcae73590fbddc1420bd4fdccfebffeedbc6/watchfiles-1.1.0-cp313-cp313t-macosx_10_12_x86_64.whl", hash = "sha256:17ab167cca6339c2b830b744eaf10803d2a5b6683be4d79d8475d88b4a8a4be1", size = 400343, upload-time = "2025-06-15T19:05:54.252Z" },
    { url = "https://files.pythonhosted.org/packages/03/20/5cb7d3966f5e8c718006d0e97dfe379a82f16fecd3caa7810f634412047a/watchfiles-1.1.0-cp313-cp313t-macosx_11_0_arm64.whl", hash = "sha256:328dbc9bff7205c215a7807da7c18dce37da7da718e798356212d22696404339", size = 392916, upload-time = "2025-06-15T19:05:55.264Z" },
    { url = "https://files.pythonhosted.org/packages/8c/07/d8f1176328fa9e9581b6f120b017e286d2a2d22ae3f554efd9515c8e1b49/watchfiles-1.1.0-cp313-cp313t-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:f7208ab6e009c627b7557ce55c465c98967e8caa8b11833531fdf95799372633", size = 449582, upload-time = "2025-06-15T19:05:56.317Z" },
    { url = "https://files.pythonhosted.org/packages/66/e8/80a14a453cf6038e81d072a86c05276692a1826471fef91df7537dba8b46/watchfiles-1.1.0-cp313-cp313t-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:a8f6f72974a19efead54195bc9bed4d850fc047bb7aa971268fd9a8387c89011", size = 456752, upload-time = "2025-06-15T19:05:57.359Z" },
    { url = "https://files.pythonhosted.org/packages/5a/25/0853b3fe0e3c2f5af9ea60eb2e781eade939760239a72c2d38fc4cc335f6/watchfiles-1.1.0-cp313-cp313t-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:d181ef50923c29cf0450c3cd47e2f0557b62218c50b2ab8ce2ecaa02bd97e670", size = 481436, upload-time = "2025-06-15T19:05:58.447Z" },
    { url = "https://files.pythonhosted.org/packages/fe/9e/4af0056c258b861fbb29dcb36258de1e2b857be4a9509e6298abcf31e5c9/watchfiles-1.1.0-cp313-cp313t-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:adb4167043d3a78280d5d05ce0ba22055c266cf8655ce942f2fb881262ff3cdf", size = 596016, upload-time = "2025-06-15T19:05:59.59Z" },
    { url = "https://files.pythonhosted.org/packages/c5/fa/95d604b58aa375e781daf350897aaaa089cff59d84147e9ccff2447c8294/watchfiles-1.1.0-cp313-cp313t-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:8c5701dc474b041e2934a26d31d39f90fac8a3dee2322b39f7729867f932b1d4", size = 476727, upload-time = "2025-06-15T19:06:01.086Z" },
    { url = "https://files.pythonhosted.org/packages/65/95/fe479b2664f19be4cf5ceeb21be05afd491d95f142e72d26a42f41b7c4f8/watchfiles-1.1.0-cp313-cp313t-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:b067915e3c3936966a8607f6fe5487df0c9c4afb85226613b520890049deea20", size = 451864, upload-time = "2025-06-15T19:06:02.144Z" },
    { url = "https://files.pythonhosted.org/packages/d3/8a/3c4af14b93a15ce55901cd7a92e1a4701910f1768c78fb30f61d2b79785b/watchfiles-1.1.0-cp313-cp313t-musllinux_1_1_aarch64.whl", hash = "sha256:9c733cda03b6d636b4219625a4acb5c6ffb10803338e437fb614fef9516825ef", size = 625626, upload-time = "2025-06-15T19:06:03.578Z" },
    { url = "https://files.pythonhosted.org/packages/da/f5/cf6aa047d4d9e128f4b7cde615236a915673775ef171ff85971d698f3c2c/watchfiles-1.1.0-cp313-cp313t-musllinux_1_1_x86_64.whl", hash = "sha256:cc08ef8b90d78bfac66f0def80240b0197008e4852c9f285907377b2947ffdcb", size = 622744, upload-time = "2025-06-15T19:06:05.066Z" },
    { url = "https://files.pythonhosted.org/packages/2c/00/70f75c47f05dea6fd30df90f047765f6fc2d6eb8b5a3921379b0b04defa2/watchfiles-1.1.0-cp314-cp314-macosx_10_12_x86_64.whl", hash = "sha256:9974d2f7dc561cce3bb88dfa8eb309dab64c729de85fba32e98d75cf24b66297", size = 402114, upload-time = "2025-06-15T19:06:06.186Z" },
    { url = "https://files.pythonhosted.org/packages/53/03/acd69c48db4a1ed1de26b349d94077cca2238ff98fd64393f3e97484cae6/watchfiles-1.1.0-cp314-cp314-macosx_11_0_arm64.whl", hash = "sha256:c68e9f1fcb4d43798ad8814c4c1b61547b014b667216cb754e606bfade587018", size = 393879, upload-time = "2025-06-15T19:06:07.369Z" },
    { url = "https://files.pythonhosted.org/packages/2f/c8/a9a2a6f9c8baa4eceae5887fecd421e1b7ce86802bcfc8b6a942e2add834/watchfiles-1.1.0-cp314-cp314-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:95ab1594377effac17110e1352989bdd7bdfca9ff0e5eeccd8c69c5389b826d0", size = 450026, upload-time = "2025-06-15T19:06:08.476Z" },
    { url = "https://files.pythonhosted.org/packages/fe/51/d572260d98388e6e2b967425c985e07d47ee6f62e6455cefb46a6e06eda5/watchfiles-1.1.0-cp314-cp314-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:fba9b62da882c1be1280a7584ec4515d0a6006a94d6e5819730ec2eab60ffe12", size = 457917, upload-time = "2025-06-15T19:06:09.988Z" },
    { url = "https://files.pythonhosted.org/packages/c6/2d/4258e52917bf9f12909b6ec314ff9636276f3542f9d3807d143f27309104/watchfiles-1.1.0-cp314-cp314-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:3434e401f3ce0ed6b42569128b3d1e3af773d7ec18751b918b89cd49c14eaafb", size = 483602, upload-time = "2025-06-15T19:06:11.088Z" },
    { url = "https://files.pythonhosted.org/packages/84/99/bee17a5f341a4345fe7b7972a475809af9e528deba056f8963d61ea49f75/watchfiles-1.1.0-cp314-cp314-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:fa257a4d0d21fcbca5b5fcba9dca5a78011cb93c0323fb8855c6d2dfbc76eb77", size = 596758, upload-time = "2025-06-15T19:06:12.197Z" },
    { url = "https://files.pythonhosted.org/packages/40/76/e4bec1d59b25b89d2b0716b41b461ed655a9a53c60dc78ad5771fda5b3e6/watchfiles-1.1.0-cp314-cp314-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:7fd1b3879a578a8ec2076c7961076df540b9af317123f84569f5a9ddee64ce92", size = 477601, upload-time = "2025-06-15T19:06:13.391Z" },
    { url = "https://files.pythonhosted.org/packages/1f/fa/a514292956f4a9ce3c567ec0c13cce427c158e9f272062685a8a727d08fc/watchfiles-1.1.0-cp314-cp314-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:62cc7a30eeb0e20ecc5f4bd113cd69dcdb745a07c68c0370cea919f373f65d9e", size = 451936, upload-time = "2025-06-15T19:06:14.656Z" },
    { url = "https://files.pythonhosted.org/packages/32/5d/c3bf927ec3bbeb4566984eba8dd7a8eb69569400f5509904545576741f88/watchfiles-1.1.0-cp314-cp314-musllinux_1_1_aarch64.whl", hash = "sha256:891c69e027748b4a73847335d208e374ce54ca3c335907d381fde4e41661b13b", size = 626243, upload-time = "2025-06-15T19:06:16.232Z" },
    { url = "https://files.pythonhosted.org/packages/e6/65/6e12c042f1a68c556802a84d54bb06d35577c81e29fba14019562479159c/watchfiles-1.1.0-cp314-cp314-musllinux_1_1_x86_64.whl", hash = "sha256:12fe8eaffaf0faa7906895b4f8bb88264035b3f0243275e0bf24af0436b27259", size = 623073, upload-time = "2025-06-15T19:06:17.457Z" },
    { url = "https://files.pythonhosted.org/packages/89/ab/7f79d9bf57329e7cbb0a6fd4c7bd7d0cee1e4a8ef0041459f5409da3506c/watchfiles-1.1.0-cp314-cp314t-macosx_10_12_x86_64.whl", hash = "sha256:bfe3c517c283e484843cb2e357dd57ba009cff351edf45fb455b5fbd1f45b15f", size = 400872, upload-time = "2025-06-15T19:06:18.57Z" },
    { url = "https://files.pythonhosted.org/packages/df/d5/3f7bf9912798e9e6c516094db6b8932df53b223660c781ee37607030b6d3/watchfiles-1.1.0-cp314-cp314t-macosx_11_0_arm64.whl", hash = "sha256:a9ccbf1f129480ed3044f540c0fdbc4ee556f7175e5ab40fe077ff6baf286d4e", size = 392877, upload-time = "2025-06-15T19:06:19.55Z" },
    { url = "https://files.pythonhosted.org/packages/0d/c5/54ec7601a2798604e01c75294770dbee8150e81c6e471445d7601610b495/watchfiles-1.1.0-cp314-cp314t-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:ba0e3255b0396cac3cc7bbace76404dd72b5438bf0d8e7cefa2f79a7f3649caa", size = 449645, upload-time = "2025-06-15T19:06:20.66Z" },
    { url = "https://files.pythonhosted.org/packages/0a/04/c2f44afc3b2fce21ca0b7802cbd37ed90a29874f96069ed30a36dfe57c2b/watchfiles-1.1.0-cp314-cp314t-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:4281cd9fce9fc0a9dbf0fc1217f39bf9cf2b4d315d9626ef1d4e87b84699e7e8", size = 457424, upload-time = "2025-06-15T19:06:21.712Z" },
    { url = "https://files.pythonhosted.org/packages/9f/b0/eec32cb6c14d248095261a04f290636da3df3119d4040ef91a4a50b29fa5/watchfiles-1.1.0-cp314-cp314t-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:6d2404af8db1329f9a3c9b79ff63e0ae7131986446901582067d9304ae8aaf7f", size = 481584, upload-time = "2025-06-15T19:06:22.777Z" },
    { url = "https://files.pythonhosted.org/packages/d1/e2/ca4bb71c68a937d7145aa25709e4f5d68eb7698a25ce266e84b55d591bbd/watchfiles-1.1.0-cp314-cp314t-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:e78b6ed8165996013165eeabd875c5dfc19d41b54f94b40e9fff0eb3193e5e8e", size = 596675, upload-time = "2025-06-15T19:06:24.226Z" },
    { url = "https://files.pythonhosted.org/packages/a1/dd/b0e4b7fb5acf783816bc950180a6cd7c6c1d2cf7e9372c0ea634e722712b/watchfiles-1.1.0-cp314-cp314t-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:249590eb75ccc117f488e2fabd1bfa33c580e24b96f00658ad88e38844a040bb", size = 477363, upload-time = "2025-06-15T19:06:25.42Z" },
    { url = "https://files.pythonhosted.org/packages/69/c4/088825b75489cb5b6a761a4542645718893d395d8c530b38734f19da44d2/watchfiles-1.1.0-cp314-cp314t-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:d05686b5487cfa2e2c28ff1aa370ea3e6c5accfe6435944ddea1e10d93872147", size = 452240, upload-time = "2025-06-15T19:06:26.552Z" },
    { url = "https://files.pythonhosted.org/packages/10/8c/22b074814970eeef43b7c44df98c3e9667c1f7bf5b83e0ff0201b0bd43f9/watchfiles-1.1.0-cp314-cp314t-musllinux_1_1_aarch64.whl", hash = "sha256:d0e10e6f8f6dc5762adee7dece33b722282e1f59aa6a55da5d493a97282fedd8", size = 625607, upload-time = "2025-06-15T19:06:27.606Z" },
    { url = "https://files.pythonhosted.org/packages/32/fa/a4f5c2046385492b2273213ef815bf71a0d4c1943b784fb904e184e30201/watchfiles-1.1.0-cp314-cp314t-musllinux_1_1_x86_64.whl", hash = "sha256:af06c863f152005c7592df1d6a7009c836a247c9d8adb78fef8575a5a98699db", size = 623315, upload-time = "2025-06-15T19:06:29.076Z" },
]

[[package]]
name = "websockets"
version = "15.0.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/21/e6/26d09fab466b7ca9c7737474c52be4f76a40301b08362eb2dbc19dcc16c1/websockets-15.0.1.tar.gz", hash = "sha256:82544de02076bafba038ce055ee6412d68da13ab47f0c60cab827346de828dee", size = 177016, upload-time = "2025-03-05T20:03:41.606Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/51/6b/4545a0d843594f5d0771e86463606a3988b5a09ca5123136f8a76580dd63/websockets-15.0.1-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:3e90baa811a5d73f3ca0bcbf32064d663ed81318ab225ee4f427ad4e26e5aff3", size = 175437, upload-time = "2025-03-05T20:02:16.706Z" },
    { url = "https://files.pythonhosted.org/packages/f4/71/809a0f5f6a06522af902e0f2ea2757f71ead94610010cf570ab5c98e99ed/websockets-15.0.1-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:592f1a9fe869c778694f0aa806ba0374e97648ab57936f092fd9d87f8bc03665", size = 173096, upload-time = "2025-03-05T20:02:18.832Z" },
    { url = "https://files.pythonhosted.org/packages/3d/69/1a681dd6f02180916f116894181eab8b2e25b31e484c5d0eae637ec01f7c/websockets-15.0.1-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:0701bc3cfcb9164d04a14b149fd74be7347a530ad3bbf15ab2c678a2cd3dd9a2", size = 173332, upload-time = "2025-03-05T20:02:20.187Z" },
    { url = "https://files.pythonhosted.org/packages/a6/02/0073b3952f5bce97eafbb35757f8d0d54812b6174ed8dd952aa08429bcc3/websockets-15.0.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:e8b56bdcdb4505c8078cb6c7157d9811a85790f2f2b3632c7d1462ab5783d215", size = 183152, upload-time = "2025-03-05T20:02:22.286Z" },
    { url = "https://files.pythonhosted.org/packages/74/45/c205c8480eafd114b428284840da0b1be9ffd0e4f87338dc95dc6ff961a1/websockets-15.0.1-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:0af68c55afbd5f07986df82831c7bff04846928ea8d1fd7f30052638788bc9b5", size = 182096, upload-time = "2025-03-05T20:02:24.368Z" },
    { url = "https://files.pythonhosted.org/packages/14/8f/aa61f528fba38578ec553c145857a181384c72b98156f858ca5c8e82d9d3/websockets-15.0.1-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:64dee438fed052b52e4f98f76c5790513235efaa1ef7f3f2192c392cd7c91b65", size = 182523, upload-time = "2025-03-05T20:02:25.669Z" },
    { url = "https://files.pythonhosted.org/packages/ec/6d/0267396610add5bc0d0d3e77f546d4cd287200804fe02323797de77dbce9/websockets-15.0.1-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:d5f6b181bb38171a8ad1d6aa58a67a6aa9d4b38d0f8c5f496b9e42561dfc62fe", size = 182790, upload-time = "2025-03-05T20:02:26.99Z" },
    { url = "https://files.pythonhosted.org/packages/02/05/c68c5adbf679cf610ae2f74a9b871ae84564462955d991178f95a1ddb7dd/websockets-15.0.1-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:5d54b09eba2bada6011aea5375542a157637b91029687eb4fdb2dab11059c1b4", size = 182165, upload-time = "2025-03-05T20:02:30.291Z" },
    { url = "https://files.pythonhosted.org/packages/29/93/bb672df7b2f5faac89761cb5fa34f5cec45a4026c383a4b5761c6cea5c16/websockets-15.0.1-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:3be571a8b5afed347da347bfcf27ba12b069d9d7f42cb8c7028b5e98bbb12597", size = 182160, upload-time = "2025-03-05T20:02:31.634Z" },
    { url = "https://files.pythonhosted.org/packages/ff/83/de1f7709376dc3ca9b7eeb4b9a07b4526b14876b6d372a4dc62312bebee0/websockets-15.0.1-cp312-cp312-win32.whl", hash = "sha256:c338ffa0520bdb12fbc527265235639fb76e7bc7faafbb93f6ba80d9c06578a9", size = 176395, upload-time = "2025-03-05T20:02:33.017Z" },
    { url = "https://files.pythonhosted.org/packages/7d/71/abf2ebc3bbfa40f391ce1428c7168fb20582d0ff57019b69ea20fa698043/websockets-15.0.1-cp312-cp312-win_amd64.whl", hash = "sha256:fcd5cf9e305d7b8338754470cf69cf81f420459dbae8a3b40cee57417f4614a7", size = 176841, upload-time = "2025-03-05T20:02:34.498Z" },
    { url = "https://files.pythonhosted.org/packages/cb/9f/51f0cf64471a9d2b4d0fc6c534f323b664e7095640c34562f5182e5a7195/websockets-15.0.1-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:ee443ef070bb3b6ed74514f5efaa37a252af57c90eb33b956d35c8e9c10a1931", size = 175440, upload-time = "2025-03-05T20:02:36.695Z" },
    { url = "https://files.pythonhosted.org/packages/8a/05/aa116ec9943c718905997412c5989f7ed671bc0188ee2ba89520e8765d7b/websockets-15.0.1-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:5a939de6b7b4e18ca683218320fc67ea886038265fd1ed30173f5ce3f8e85675", size = 173098, upload-time = "2025-03-05T20:02:37.985Z" },
    { url = "https://files.pythonhosted.org/packages/ff/0b/33cef55ff24f2d92924923c99926dcce78e7bd922d649467f0eda8368923/websockets-15.0.1-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:746ee8dba912cd6fc889a8147168991d50ed70447bf18bcda7039f7d2e3d9151", size = 173329, upload-time = "2025-03-05T20:02:39.298Z" },
    { url = "https://files.pythonhosted.org/packages/31/1d/063b25dcc01faa8fada1469bdf769de3768b7044eac9d41f734fd7b6ad6d/websockets-15.0.1-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:595b6c3969023ecf9041b2936ac3827e4623bfa3ccf007575f04c5a6aa318c22", size = 183111, upload-time = "2025-03-05T20:02:40.595Z" },
    { url = "https://files.pythonhosted.org/packages/93/53/9a87ee494a51bf63e4ec9241c1ccc4f7c2f45fff85d5bde2ff74fcb68b9e/websockets-15.0.1-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:3c714d2fc58b5ca3e285461a4cc0c9a66bd0e24c5da9911e30158286c9b5be7f", size = 182054, upload-time = "2025-03-05T20:02:41.926Z" },
    { url = "https://files.pythonhosted.org/packages/ff/b2/83a6ddf56cdcbad4e3d841fcc55d6ba7d19aeb89c50f24dd7e859ec0805f/websockets-15.0.1-cp313-cp313-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:0f3c1e2ab208db911594ae5b4f79addeb3501604a165019dd221c0bdcabe4db8", size = 182496, upload-time = "2025-03-05T20:02:43.304Z" },
    { url = "https://files.pythonhosted.org/packages/98/41/e7038944ed0abf34c45aa4635ba28136f06052e08fc2168520bb8b25149f/websockets-15.0.1-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:229cf1d3ca6c1804400b0a9790dc66528e08a6a1feec0d5040e8b9eb14422375", size = 182829, upload-time = "2025-03-05T20:02:48.812Z" },
    { url = "https://files.pythonhosted.org/packages/e0/17/de15b6158680c7623c6ef0db361da965ab25d813ae54fcfeae2e5b9ef910/websockets-15.0.1-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:756c56e867a90fb00177d530dca4b097dd753cde348448a1012ed6c5131f8b7d", size = 182217, upload-time = "2025-03-05T20:02:50.14Z" },
    { url = "https://files.pythonhosted.org/packages/33/2b/1f168cb6041853eef0362fb9554c3824367c5560cbdaad89ac40f8c2edfc/websockets-15.0.1-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:558d023b3df0bffe50a04e710bc87742de35060580a293c2a984299ed83bc4e4", size = 182195, upload-time = "2025-03-05T20:02:51.561Z" },
    { url = "https://files.pythonhosted.org/packages/86/eb/20b6cdf273913d0ad05a6a14aed4b9a85591c18a987a3d47f20fa13dcc47/websockets-15.0.1-cp313-cp313-win32.whl", hash = "sha256:ba9e56e8ceeeedb2e080147ba85ffcd5cd0711b89576b83784d8605a7df455fa", size = 176393, upload-time = "2025-03-05T20:02:53.814Z" },
    { url = "https://files.pythonhosted.org/packages/1b/6c/c65773d6cab416a64d191d6ee8a8b1c68a09970ea6909d16965d26bfed1e/websockets-15.0.1-cp313-cp313-win_amd64.whl", hash = "sha256:e09473f095a819042ecb2ab9465aee615bd9c2028e4ef7d933600a8401c79561", size = 176837, upload-time = "2025-03-05T20:02:55.237Z" },
    { url = "https://files.pythonhosted.org/packages/fa/a8/5b41e0da817d64113292ab1f8247140aac61cbf6cfd085d6a0fa77f4984f/websockets-15.0.1-py3-none-any.whl", hash = "sha256:f7a866fbc1e97b5c617ee4116daaa09b722101d4a3c170c787450ba409f9736f", size = 169743, upload-time = "2025-03-05T20:03:39.41Z" },
]

[[package]]
name = "win32-setctime"
version = "1.2.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/b3/8f/705086c9d734d3b663af0e9bb3d4de6578d08f46b1b101c2442fd9aecaa2/win32_setctime-1.2.0.tar.gz", hash = "sha256:ae1fdf948f5640aae05c511ade119313fb6a30d7eabe25fef9764dca5873c4c0", size = 4867, upload-time = "2024-12-07T15:28:28.314Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/e1/07/c6fe3ad3e685340704d314d765b7912993bcb8dc198f0e7a89382d37974b/win32_setctime-1.2.0-py3-none-any.whl", hash = "sha256:95d644c4e708aba81dc3704a116d8cbc974d70b3bdb8be1d150e36be6e9d1390", size = 4083, upload-time = "2024-12-07T15:28:26.465Z" },
]

[[package]]
name = "yarl"
version = "1.20.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "idna" },
    { name = "multidict" },
    { name = "propcache" },
]
sdist = { url = "https://files.pythonhosted.org/packages/3c/fb/efaa23fa4e45537b827620f04cf8f3cd658b76642205162e072703a5b963/yarl-1.20.1.tar.gz", hash = "sha256:d017a4997ee50c91fd5466cef416231bb82177b93b029906cefc542ce14c35ac", size = 186428, upload-time = "2025-06-10T00:46:09.923Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/5f/9a/cb7fad7d73c69f296eda6815e4a2c7ed53fc70c2f136479a91c8e5fbdb6d/yarl-1.20.1-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:bdcc4cd244e58593a4379fe60fdee5ac0331f8eb70320a24d591a3be197b94a9", size = 133667, upload-time = "2025-06-10T00:43:44.369Z" },
    { url = "https://files.pythonhosted.org/packages/67/38/688577a1cb1e656e3971fb66a3492501c5a5df56d99722e57c98249e5b8a/yarl-1.20.1-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:b29a2c385a5f5b9c7d9347e5812b6f7ab267193c62d282a540b4fc528c8a9d2a", size = 91025, upload-time = "2025-06-10T00:43:46.295Z" },
    { url = "https://files.pythonhosted.org/packages/50/ec/72991ae51febeb11a42813fc259f0d4c8e0507f2b74b5514618d8b640365/yarl-1.20.1-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:1112ae8154186dfe2de4732197f59c05a83dc814849a5ced892b708033f40dc2", size = 89709, upload-time = "2025-06-10T00:43:48.22Z" },
    { url = "https://files.pythonhosted.org/packages/99/da/4d798025490e89426e9f976702e5f9482005c548c579bdae792a4c37769e/yarl-1.20.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:90bbd29c4fe234233f7fa2b9b121fb63c321830e5d05b45153a2ca68f7d310ee", size = 352287, upload-time = "2025-06-10T00:43:49.924Z" },
    { url = "https://files.pythonhosted.org/packages/1a/26/54a15c6a567aac1c61b18aa0f4b8aa2e285a52d547d1be8bf48abe2b3991/yarl-1.20.1-cp312-cp312-manylinux_2_17_armv7l.manylinux2014_armv7l.manylinux_2_31_armv7l.whl", hash = "sha256:680e19c7ce3710ac4cd964e90dad99bf9b5029372ba0c7cbfcd55e54d90ea819", size = 345429, upload-time = "2025-06-10T00:43:51.7Z" },
    { url = "https://files.pythonhosted.org/packages/d6/95/9dcf2386cb875b234353b93ec43e40219e14900e046bf6ac118f94b1e353/yarl-1.20.1-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:4a979218c1fdb4246a05efc2cc23859d47c89af463a90b99b7c56094daf25a16", size = 365429, upload-time = "2025-06-10T00:43:53.494Z" },
    { url = "https://files.pythonhosted.org/packages/91/b2/33a8750f6a4bc224242a635f5f2cff6d6ad5ba651f6edcccf721992c21a0/yarl-1.20.1-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:255b468adf57b4a7b65d8aad5b5138dce6a0752c139965711bdcb81bc370e1b6", size = 363862, upload-time = "2025-06-10T00:43:55.766Z" },
    { url = "https://files.pythonhosted.org/packages/98/28/3ab7acc5b51f4434b181b0cee8f1f4b77a65919700a355fb3617f9488874/yarl-1.20.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:a97d67108e79cfe22e2b430d80d7571ae57d19f17cda8bb967057ca8a7bf5bfd", size = 355616, upload-time = "2025-06-10T00:43:58.056Z" },
    { url = "https://files.pythonhosted.org/packages/36/a3/f666894aa947a371724ec7cd2e5daa78ee8a777b21509b4252dd7bd15e29/yarl-1.20.1-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:8570d998db4ddbfb9a590b185a0a33dbf8aafb831d07a5257b4ec9948df9cb0a", size = 339954, upload-time = "2025-06-10T00:43:59.773Z" },
    { url = "https://files.pythonhosted.org/packages/f1/81/5f466427e09773c04219d3450d7a1256138a010b6c9f0af2d48565e9ad13/yarl-1.20.1-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:97c75596019baae7c71ccf1d8cc4738bc08134060d0adfcbe5642f778d1dca38", size = 365575, upload-time = "2025-06-10T00:44:02.051Z" },
    { url = "https://files.pythonhosted.org/packages/2e/e3/e4b0ad8403e97e6c9972dd587388940a032f030ebec196ab81a3b8e94d31/yarl-1.20.1-cp312-cp312-musllinux_1_2_armv7l.whl", hash = "sha256:1c48912653e63aef91ff988c5432832692ac5a1d8f0fb8a33091520b5bbe19ef", size = 365061, upload-time = "2025-06-10T00:44:04.196Z" },
    { url = "https://files.pythonhosted.org/packages/ac/99/b8a142e79eb86c926f9f06452eb13ecb1bb5713bd01dc0038faf5452e544/yarl-1.20.1-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:4c3ae28f3ae1563c50f3d37f064ddb1511ecc1d5584e88c6b7c63cf7702a6d5f", size = 364142, upload-time = "2025-06-10T00:44:06.527Z" },
    { url = "https://files.pythonhosted.org/packages/34/f2/08ed34a4a506d82a1a3e5bab99ccd930a040f9b6449e9fd050320e45845c/yarl-1.20.1-cp312-cp312-musllinux_1_2_ppc64le.whl", hash = "sha256:c5e9642f27036283550f5f57dc6156c51084b458570b9d0d96100c8bebb186a8", size = 381894, upload-time = "2025-06-10T00:44:08.379Z" },
    { url = "https://files.pythonhosted.org/packages/92/f8/9a3fbf0968eac704f681726eff595dce9b49c8a25cd92bf83df209668285/yarl-1.20.1-cp312-cp312-musllinux_1_2_s390x.whl", hash = "sha256:2c26b0c49220d5799f7b22c6838409ee9bc58ee5c95361a4d7831f03cc225b5a", size = 383378, upload-time = "2025-06-10T00:44:10.51Z" },
    { url = "https://files.pythonhosted.org/packages/af/85/9363f77bdfa1e4d690957cd39d192c4cacd1c58965df0470a4905253b54f/yarl-1.20.1-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:564ab3d517e3d01c408c67f2e5247aad4019dcf1969982aba3974b4093279004", size = 374069, upload-time = "2025-06-10T00:44:12.834Z" },
    { url = "https://files.pythonhosted.org/packages/35/99/9918c8739ba271dcd935400cff8b32e3cd319eaf02fcd023d5dcd487a7c8/yarl-1.20.1-cp312-cp312-win32.whl", hash = "sha256:daea0d313868da1cf2fac6b2d3a25c6e3a9e879483244be38c8e6a41f1d876a5", size = 81249, upload-time = "2025-06-10T00:44:14.731Z" },
    { url = "https://files.pythonhosted.org/packages/eb/83/5d9092950565481b413b31a23e75dd3418ff0a277d6e0abf3729d4d1ce25/yarl-1.20.1-cp312-cp312-win_amd64.whl", hash = "sha256:48ea7d7f9be0487339828a4de0360d7ce0efc06524a48e1810f945c45b813698", size = 86710, upload-time = "2025-06-10T00:44:16.716Z" },
    { url = "https://files.pythonhosted.org/packages/8a/e1/2411b6d7f769a07687acee88a062af5833cf1966b7266f3d8dfb3d3dc7d3/yarl-1.20.1-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:0b5ff0fbb7c9f1b1b5ab53330acbfc5247893069e7716840c8e7d5bb7355038a", size = 131811, upload-time = "2025-06-10T00:44:18.933Z" },
    { url = "https://files.pythonhosted.org/packages/b2/27/584394e1cb76fb771371770eccad35de400e7b434ce3142c2dd27392c968/yarl-1.20.1-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:14f326acd845c2b2e2eb38fb1346c94f7f3b01a4f5c788f8144f9b630bfff9a3", size = 90078, upload-time = "2025-06-10T00:44:20.635Z" },
    { url = "https://files.pythonhosted.org/packages/bf/9a/3246ae92d4049099f52d9b0fe3486e3b500e29b7ea872d0f152966fc209d/yarl-1.20.1-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:f60e4ad5db23f0b96e49c018596707c3ae89f5d0bd97f0ad3684bcbad899f1e7", size = 88748, upload-time = "2025-06-10T00:44:22.34Z" },
    { url = "https://files.pythonhosted.org/packages/a3/25/35afe384e31115a1a801fbcf84012d7a066d89035befae7c5d4284df1e03/yarl-1.20.1-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:49bdd1b8e00ce57e68ba51916e4bb04461746e794e7c4d4bbc42ba2f18297691", size = 349595, upload-time = "2025-06-10T00:44:24.314Z" },
    { url = "https://files.pythonhosted.org/packages/28/2d/8aca6cb2cabc8f12efcb82749b9cefecbccfc7b0384e56cd71058ccee433/yarl-1.20.1-cp313-cp313-manylinux_2_17_armv7l.manylinux2014_armv7l.manylinux_2_31_armv7l.whl", hash = "sha256:66252d780b45189975abfed839616e8fd2dbacbdc262105ad7742c6ae58f3e31", size = 342616, upload-time = "2025-06-10T00:44:26.167Z" },
    { url = "https://files.pythonhosted.org/packages/0b/e9/1312633d16b31acf0098d30440ca855e3492d66623dafb8e25b03d00c3da/yarl-1.20.1-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:59174e7332f5d153d8f7452a102b103e2e74035ad085f404df2e40e663a22b28", size = 361324, upload-time = "2025-06-10T00:44:27.915Z" },
    { url = "https://files.pythonhosted.org/packages/bc/a0/688cc99463f12f7669eec7c8acc71ef56a1521b99eab7cd3abb75af887b0/yarl-1.20.1-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:e3968ec7d92a0c0f9ac34d5ecfd03869ec0cab0697c91a45db3fbbd95fe1b653", size = 359676, upload-time = "2025-06-10T00:44:30.041Z" },
    { url = "https://files.pythonhosted.org/packages/af/44/46407d7f7a56e9a85a4c207724c9f2c545c060380718eea9088f222ba697/yarl-1.20.1-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:d1a4fbb50e14396ba3d375f68bfe02215d8e7bc3ec49da8341fe3157f59d2ff5", size = 352614, upload-time = "2025-06-10T00:44:32.171Z" },
    { url = "https://files.pythonhosted.org/packages/b1/91/31163295e82b8d5485d31d9cf7754d973d41915cadce070491778d9c9825/yarl-1.20.1-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:11a62c839c3a8eac2410e951301309426f368388ff2f33799052787035793b02", size = 336766, upload-time = "2025-06-10T00:44:34.494Z" },
    { url = "https://files.pythonhosted.org/packages/b4/8e/c41a5bc482121f51c083c4c2bcd16b9e01e1cf8729e380273a952513a21f/yarl-1.20.1-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:041eaa14f73ff5a8986b4388ac6bb43a77f2ea09bf1913df7a35d4646db69e53", size = 364615, upload-time = "2025-06-10T00:44:36.856Z" },
    { url = "https://files.pythonhosted.org/packages/e3/5b/61a3b054238d33d70ea06ebba7e58597891b71c699e247df35cc984ab393/yarl-1.20.1-cp313-cp313-musllinux_1_2_armv7l.whl", hash = "sha256:377fae2fef158e8fd9d60b4c8751387b8d1fb121d3d0b8e9b0be07d1b41e83dc", size = 360982, upload-time = "2025-06-10T00:44:39.141Z" },
    { url = "https://files.pythonhosted.org/packages/df/a3/6a72fb83f8d478cb201d14927bc8040af901811a88e0ff2da7842dd0ed19/yarl-1.20.1-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:1c92f4390e407513f619d49319023664643d3339bd5e5a56a3bebe01bc67ec04", size = 369792, upload-time = "2025-06-10T00:44:40.934Z" },
    { url = "https://files.pythonhosted.org/packages/7c/af/4cc3c36dfc7c077f8dedb561eb21f69e1e9f2456b91b593882b0b18c19dc/yarl-1.20.1-cp313-cp313-musllinux_1_2_ppc64le.whl", hash = "sha256:d25ddcf954df1754ab0f86bb696af765c5bfaba39b74095f27eececa049ef9a4", size = 382049, upload-time = "2025-06-10T00:44:42.854Z" },
    { url = "https://files.pythonhosted.org/packages/19/3a/e54e2c4752160115183a66dc9ee75a153f81f3ab2ba4bf79c3c53b33de34/yarl-1.20.1-cp313-cp313-musllinux_1_2_s390x.whl", hash = "sha256:909313577e9619dcff8c31a0ea2aa0a2a828341d92673015456b3ae492e7317b", size = 384774, upload-time = "2025-06-10T00:44:45.275Z" },
    { url = "https://files.pythonhosted.org/packages/9c/20/200ae86dabfca89060ec6447649f219b4cbd94531e425e50d57e5f5ac330/yarl-1.20.1-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:793fd0580cb9664548c6b83c63b43c477212c0260891ddf86809e1c06c8b08f1", size = 374252, upload-time = "2025-06-10T00:44:47.31Z" },
    { url = "https://files.pythonhosted.org/packages/83/75/11ee332f2f516b3d094e89448da73d557687f7d137d5a0f48c40ff211487/yarl-1.20.1-cp313-cp313-win32.whl", hash = "sha256:468f6e40285de5a5b3c44981ca3a319a4b208ccc07d526b20b12aeedcfa654b7", size = 81198, upload-time = "2025-06-10T00:44:49.164Z" },
    { url = "https://files.pythonhosted.org/packages/ba/ba/39b1ecbf51620b40ab402b0fc817f0ff750f6d92712b44689c2c215be89d/yarl-1.20.1-cp313-cp313-win_amd64.whl", hash = "sha256:495b4ef2fea40596bfc0affe3837411d6aa3371abcf31aac0ccc4bdd64d4ef5c", size = 86346, upload-time = "2025-06-10T00:44:51.182Z" },
    { url = "https://files.pythonhosted.org/packages/43/c7/669c52519dca4c95153c8ad96dd123c79f354a376346b198f438e56ffeb4/yarl-1.20.1-cp313-cp313t-macosx_10_13_universal2.whl", hash = "sha256:f60233b98423aab21d249a30eb27c389c14929f47be8430efa7dbd91493a729d", size = 138826, upload-time = "2025-06-10T00:44:52.883Z" },
    { url = "https://files.pythonhosted.org/packages/6a/42/fc0053719b44f6ad04a75d7f05e0e9674d45ef62f2d9ad2c1163e5c05827/yarl-1.20.1-cp313-cp313t-macosx_10_13_x86_64.whl", hash = "sha256:6f3eff4cc3f03d650d8755c6eefc844edde99d641d0dcf4da3ab27141a5f8ddf", size = 93217, upload-time = "2025-06-10T00:44:54.658Z" },
    { url = "https://files.pythonhosted.org/packages/4f/7f/fa59c4c27e2a076bba0d959386e26eba77eb52ea4a0aac48e3515c186b4c/yarl-1.20.1-cp313-cp313t-macosx_11_0_arm64.whl", hash = "sha256:69ff8439d8ba832d6bed88af2c2b3445977eba9a4588b787b32945871c2444e3", size = 92700, upload-time = "2025-06-10T00:44:56.784Z" },
    { url = "https://files.pythonhosted.org/packages/2f/d4/062b2f48e7c93481e88eff97a6312dca15ea200e959f23e96d8ab898c5b8/yarl-1.20.1-cp313-cp313t-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:3cf34efa60eb81dd2645a2e13e00bb98b76c35ab5061a3989c7a70f78c85006d", size = 347644, upload-time = "2025-06-10T00:44:59.071Z" },
    { url = "https://files.pythonhosted.org/packages/89/47/78b7f40d13c8f62b499cc702fdf69e090455518ae544c00a3bf4afc9fc77/yarl-1.20.1-cp313-cp313t-manylinux_2_17_armv7l.manylinux2014_armv7l.manylinux_2_31_armv7l.whl", hash = "sha256:8e0fe9364ad0fddab2688ce72cb7a8e61ea42eff3c7caeeb83874a5d479c896c", size = 323452, upload-time = "2025-06-10T00:45:01.605Z" },
    { url = "https://files.pythonhosted.org/packages/eb/2b/490d3b2dc66f52987d4ee0d3090a147ea67732ce6b4d61e362c1846d0d32/yarl-1.20.1-cp313-cp313t-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:8f64fbf81878ba914562c672024089e3401974a39767747691c65080a67b18c1", size = 346378, upload-time = "2025-06-10T00:45:03.946Z" },
    { url = "https://files.pythonhosted.org/packages/66/ad/775da9c8a94ce925d1537f939a4f17d782efef1f973039d821cbe4bcc211/yarl-1.20.1-cp313-cp313t-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:f6342d643bf9a1de97e512e45e4b9560a043347e779a173250824f8b254bd5ce", size = 353261, upload-time = "2025-06-10T00:45:05.992Z" },
    { url = "https://files.pythonhosted.org/packages/4b/23/0ed0922b47a4f5c6eb9065d5ff1e459747226ddce5c6a4c111e728c9f701/yarl-1.20.1-cp313-cp313t-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:56dac5f452ed25eef0f6e3c6a066c6ab68971d96a9fb441791cad0efba6140d3", size = 335987, upload-time = "2025-06-10T00:45:08.227Z" },
    { url = "https://files.pythonhosted.org/packages/3e/49/bc728a7fe7d0e9336e2b78f0958a2d6b288ba89f25a1762407a222bf53c3/yarl-1.20.1-cp313-cp313t-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:c7d7f497126d65e2cad8dc5f97d34c27b19199b6414a40cb36b52f41b79014be", size = 329361, upload-time = "2025-06-10T00:45:10.11Z" },
    { url = "https://files.pythonhosted.org/packages/93/8f/b811b9d1f617c83c907e7082a76e2b92b655400e61730cd61a1f67178393/yarl-1.20.1-cp313-cp313t-musllinux_1_2_aarch64.whl", hash = "sha256:67e708dfb8e78d8a19169818eeb5c7a80717562de9051bf2413aca8e3696bf16", size = 346460, upload-time = "2025-06-10T00:45:12.055Z" },
    { url = "https://files.pythonhosted.org/packages/70/fd/af94f04f275f95da2c3b8b5e1d49e3e79f1ed8b6ceb0f1664cbd902773ff/yarl-1.20.1-cp313-cp313t-musllinux_1_2_armv7l.whl", hash = "sha256:595c07bc79af2494365cc96ddeb772f76272364ef7c80fb892ef9d0649586513", size = 334486, upload-time = "2025-06-10T00:45:13.995Z" },
    { url = "https://files.pythonhosted.org/packages/84/65/04c62e82704e7dd0a9b3f61dbaa8447f8507655fd16c51da0637b39b2910/yarl-1.20.1-cp313-cp313t-musllinux_1_2_i686.whl", hash = "sha256:7bdd2f80f4a7df852ab9ab49484a4dee8030023aa536df41f2d922fd57bf023f", size = 342219, upload-time = "2025-06-10T00:45:16.479Z" },
    { url = "https://files.pythonhosted.org/packages/91/95/459ca62eb958381b342d94ab9a4b6aec1ddec1f7057c487e926f03c06d30/yarl-1.20.1-cp313-cp313t-musllinux_1_2_ppc64le.whl", hash = "sha256:c03bfebc4ae8d862f853a9757199677ab74ec25424d0ebd68a0027e9c639a390", size = 350693, upload-time = "2025-06-10T00:45:18.399Z" },
    { url = "https://files.pythonhosted.org/packages/a6/00/d393e82dd955ad20617abc546a8f1aee40534d599ff555ea053d0ec9bf03/yarl-1.20.1-cp313-cp313t-musllinux_1_2_s390x.whl", hash = "sha256:344d1103e9c1523f32a5ed704d576172d2cabed3122ea90b1d4e11fe17c66458", size = 355803, upload-time = "2025-06-10T00:45:20.677Z" },
    { url = "https://files.pythonhosted.org/packages/9e/ed/c5fb04869b99b717985e244fd93029c7a8e8febdfcffa06093e32d7d44e7/yarl-1.20.1-cp313-cp313t-musllinux_1_2_x86_64.whl", hash = "sha256:88cab98aa4e13e1ade8c141daeedd300a4603b7132819c484841bb7af3edce9e", size = 341709, upload-time = "2025-06-10T00:45:23.221Z" },
    { url = "https://files.pythonhosted.org/packages/24/fd/725b8e73ac2a50e78a4534ac43c6addf5c1c2d65380dd48a9169cc6739a9/yarl-1.20.1-cp313-cp313t-win32.whl", hash = "sha256:b121ff6a7cbd4abc28985b6028235491941b9fe8fe226e6fdc539c977ea1739d", size = 86591, upload-time = "2025-06-10T00:45:25.793Z" },
    { url = "https://files.pythonhosted.org/packages/94/c3/b2e9f38bc3e11191981d57ea08cab2166e74ea770024a646617c9cddd9f6/yarl-1.20.1-cp313-cp313t-win_amd64.whl", hash = "sha256:541d050a355bbbc27e55d906bc91cb6fe42f96c01413dd0f4ed5a5240513874f", size = 93003, upload-time = "2025-06-10T00:45:27.752Z" },
    { url = "https://files.pythonhosted.org/packages/b4/2d/2345fce04cfd4bee161bf1e7d9cdc702e3e16109021035dbb24db654a622/yarl-1.20.1-py3-none-any.whl", hash = "sha256:83b8eb083fe4683c6115795d9fc1cfaf2cbbefb19b3a1cb68f6527460f483a77", size = 46542, upload-time = "2025-06-10T00:46:07.521Z" },
]


# END FILE CONTENTS


# File: frontend/components/ui/command.tsx

"use client"

import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

const CommandDialog = ({ children, ...props }: DialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}


# END FILE CONTENTS


# File: frontend/utils/export.ts

import { toast } from '@/hooks/use-toast'

export async function downloadZip(sid: string) {
    try {
        const res = await fetch(`/api/export/${sid}?type=zip`)
        if (!res.ok) {
            toast({ title: `Export failed: ${res.statusText}`, variant: 'destructive' })
            return
        }
        const blob = await res.blob()
        const url = window.URL.createObjectURL(blob)

        const a = document.createElement('a')
        a.href = url
        a.download = `${sid}.zip`
        a.style.display = 'none'
        document.body.appendChild(a)
        a.click()
        a.remove()
        setTimeout(() => URL.revokeObjectURL(url), 1_000)
        toast({ title: 'Export started', variant: 'default' })
    } catch (err) {
        console.error(err)
        toast({ title: 'Network error when exporting', variant: 'destructive' })
    }
}


# END FILE CONTENTS


# File: frontend/components/ui/sidebar.tsx

"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}


# END FILE CONTENTS


# File: frontend/constants/providers.ts

export const PROVIDERS = [
  { code: 'whisper', label: 'Azure Whisper' },
  { code: 'gpt4o', label: 'Azure GPT-4o-transcribe' },
];


# END FILE CONTENTS


# File: app/middleware/__init__.py



# END FILE CONTENTS


# File: frontend/hooks/use-local-draft.ts

"use client"

import { useState, useCallback, useEffect, useRef, useMemo } from 'react'

interface DraftData {
    content: string;
}

interface UseLocalDraftReturn {
    draft: DraftData;
    hasDraft: boolean
    lastDraftTime: Date | null
    saveDraft: (data: Partial<DraftData>) => void
    loadDraft: () => DraftData | null
    clearDraft: () => void
    isDraftNewer: (serverTimestamp: Date) => boolean
}

const DRAFT_KEY = 'studyscriber_draft'

export function useLocalDraft(sessionId?: string): UseLocalDraftReturn {
    const [draft, setDraft] = useState<DraftData>({ content: '' })
    const [hasDraft, setHasDraft] = useState(false)
    const [lastDraftTime, setLastDraftTime] = useState<Date | null>(null)

    const autoSaveTimeoutRef = useRef<NodeJS.Timeout | null>(null)
    const currentSessionRef = useRef<string | undefined>(sessionId)

    // 更新 session ID
    useEffect(() => {
        currentSessionRef.current = sessionId
    }, [sessionId])

    // 清除自動儲存計時器
    const clearAutoSaveTimeout = useCallback(() => {
        if (autoSaveTimeoutRef.current) {
            clearTimeout(autoSaveTimeoutRef.current)
            autoSaveTimeoutRef.current = null
        }
    }, [])

    // 從 localStorage 載入草稿
    const loadDraft = useCallback((): DraftData | null => {
        try {
            const draftJson = localStorage.getItem(DRAFT_KEY)
            if (!draftJson) {
                setHasDraft(false)
                return null
            }

            const parsed = JSON.parse(draftJson)
            const draftData: DraftData = {
                content: parsed.content || ''
            }
            const timestamp = parsed.timestamp ? new Date(parsed.timestamp) : new Date()
            const storedSessionId = parsed.sessionId

            // 檢查草稿是否屬於當前會話（如果有指定會話）
            if (currentSessionRef.current && storedSessionId !== currentSessionRef.current) {
                console.log('📝 草稿屬於其他會話，不載入')
                return null
            }

            setDraft(draftData)
            setHasDraft(!!draftData.content.trim())
            setLastDraftTime(timestamp)

            console.log('📖 草稿已從本地載入')
            return draftData
        } catch (err) {
            console.error('❌ 載入草稿失敗:', err)
            return null
        }
    }, [])

    // 儲存草稿到 localStorage
    const saveDraft = useCallback((data: Partial<DraftData>) => {
        const now = new Date()

        // 取得目前的草稿內容，並與新的內容合併
        const currentDraft = { ...draft, ...data }

        if (!currentDraft.content.trim()) {
            // 空內容時清除草稿
            clearDraft()
            return
        }

        const draftDataToStore = {
            ...currentDraft,
            timestamp: now.toISOString(),
            sessionId: currentSessionRef.current || null,
        }

        try {
            localStorage.setItem(DRAFT_KEY, JSON.stringify(draftDataToStore))
            setDraft(currentDraft)
            setHasDraft(true)
            setLastDraftTime(now)

            console.log('💾 草稿已儲存到本地:', currentDraft)
        } catch (err) {
            console.error('❌ 儲存草稿失敗:', err)
        }
    }, [draft]) // 依賴 draft 狀態

    // 清除草稿
    const clearDraft = useCallback(() => {
        clearAutoSaveTimeout()
        try {
            localStorage.removeItem(DRAFT_KEY)

            const clearedDraft = { content: '' }
            setDraft(clearedDraft)
            setHasDraft(false)
            setLastDraftTime(null)

            console.log('🗑️ 草稿已清除')
        } catch (err) {
            console.error('❌ 清除草稿失敗:', err)
        }
    }, [clearAutoSaveTimeout])

    // 判斷草稿是否比伺服器版本更新
    const isDraftNewer = useCallback((serverTimestamp: Date): boolean => {
        if (!lastDraftTime || !hasDraft) {
            return false
        }
        return lastDraftTime > serverTimestamp
    }, [lastDraftTime, hasDraft])

    // 自動儲存草稿（使用防抖動）
    const autoSaveDraft = useCallback((data: Partial<DraftData>) => {
        clearAutoSaveTimeout()

        // 500ms 防抖動，避免過於頻繁的儲存
        autoSaveTimeoutRef.current = setTimeout(() => {
            saveDraft(data)
        }, 500)
    }, [saveDraft, clearAutoSaveTimeout])

    // 初始化時載入草稿
    useEffect(() => {
        loadDraft()
    }, [loadDraft])

    // 組件卸載時清理
    useEffect(() => {
        return () => {
            clearAutoSaveTimeout()
        }
    }, [clearAutoSaveTimeout])

    return useMemo(() => ({
        draft,
        hasDraft,
        lastDraftTime,
        saveDraft: autoSaveDraft, // 使用防抖版本
        loadDraft,
        clearDraft,
        isDraftNewer,
    }), [
        draft,
        hasDraft,
        lastDraftTime,
        autoSaveDraft,
        loadDraft,
        clearDraft,
        isDraftNewer,
    ])
}


# END FILE CONTENTS


# File: frontend/src/test-setup.ts

import '@testing-library/jest-dom'
import { vi } from 'vitest'

// 模擬 window.matchMedia (Radix UI 需要)
Object.defineProperty(window, 'matchMedia', {
    writable: true,
    value: vi.fn().mockImplementation((query: string) => ({
        matches: false,
        media: query,
        onchange: null,
        addListener: vi.fn(),
        removeListener: vi.fn(),
        addEventListener: vi.fn(),
        removeEventListener: vi.fn(),
        dispatchEvent: vi.fn(),
    })),
})

// 模擬 ResizeObserver (某些 UI 元件需要)
Object.defineProperty(global, 'ResizeObserver', {
    writable: true,
    value: vi.fn().mockImplementation(() => ({
        observe: vi.fn(),
        unobserve: vi.fn(),
        disconnect: vi.fn(),
    })),
})


# END FILE CONTENTS


# File: frontend/README.md

# Recreate the UI

*Automatically synced with your [v0.dev](https://v0.dev) deployments*

[![Deployed on Vercel](https://img.shields.io/badge/Deployed%20on-Vercel-black?style=for-the-badge&logo=vercel)](https://vercel.com/otoitsukis-projects/v0-recreate-the-ui)
[![Built with v0](https://img.shields.io/badge/Built%20with-v0.dev-black?style=for-the-badge)](https://v0.dev/chat/projects/5FBRtobaC6g)

## Overview

This repository will stay in sync with your deployed chats on [v0.dev](https://v0.dev).
Any changes you make to your deployed app will be automatically pushed to this repository from [v0.dev](https://v0.dev).

## Deployment

Your project is live at:

**[https://vercel.com/otoitsukis-projects/v0-recreate-the-ui](https://vercel.com/otoitsukis-projects/v0-recreate-the-ui)**

## Build your app

Continue building your app on:

**[https://v0.dev/chat/projects/5FBRtobaC6g](https://v0.dev/chat/projects/5FBRtobaC6g)**

## How It Works

1. Create and modify your project using [v0.dev](https://v0.dev)
2. Deploy your chats from the v0 interface
3. Changes are automatically pushed to this repository
4. Vercel deploys the latest version from this repository

# END FILE CONTENTS


# File: docs/export-transcript-format.md

# transcript.txt 新格式規格（2024-07-15）

## 1. 格式說明
- 每段一行，格式：[hh:mm:ss] 逐字稿內容
- 來源為 transcript_segments，依 chunk_sequence 排序
- timestamp 欄位若有，轉換為 hh:mm:ss，無則為 00:00:00

## 2. 範例
```
[00:00:01] 你好，這是第一段
[00:00:05] 這是第二段
[00:00:10] 測試第三段
```

## 3. 擴充建議
- 未來可支援 transcript.json，完整欄位結構
- 可選擇純文字/含時間戳/JSON 格式 


# END FILE CONTENTS


# File: frontend/components/ui/popover.tsx

"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }


# END FILE CONTENTS


# File: .editorconfig

root = true

[*]
charset = utf-8
end_of_line = lf
insert_final_newline = true
trim_trailing_whitespace = true

[*.py]
indent_style = space
indent_size = 4
max_line_length = 79

[*.{yml,yaml}]
indent_style = space
indent_size = 2

[*.{json,js,ts}]
indent_style = space
indent_size = 2

[*.md]
trim_trailing_whitespace = false


# END FILE CONTENTS


# File: app/services/stt/save_utils.py

import json, logging
from uuid import UUID
from datetime import datetime

from app.db.database import get_supabase_client
from app.utils.timing import calc_times
from app.ws.transcript_feed import manager as ws

logger = logging.getLogger(__name__)


async def save_and_push_result(
    sid: UUID,
    chunk_seq: int,
    res: dict,
) -> None:
    """
    將 provider 回傳的結果：
      1. 寫入 transcript_segments
      2. 透過 WebSocket 推送給前端
    必要欄位：text, lang_code, timestamp
    可選欄位：start_time, end_time
    """
    # -------- 1. 時間欄位保障 --------
    if "start_time" not in res or "end_time" not in res:
        res["start_time"], res["end_time"] = calc_times(chunk_seq)

    # -------- 2. 寫入 DB -------------
    supa = get_supabase_client()
    seg_data = {
        "session_id": str(sid),
        "chunk_sequence": chunk_seq,
        "text": res["text"],
        "start_time": res["start_time"],
        "end_time": res["end_time"],
        "confidence": 1.0,
        "lang_code": res["lang_code"],
        "created_at": res.get("timestamp", datetime.utcnow().isoformat()),
    }
    row = supa.table("transcript_segments").insert(seg_data).execute()
    seg_id = row.data[0]["id"]

    # -------- 3. WebSocket 推送 ------
    await ws.broadcast(
        json.dumps(
            {
                "type": "transcript_segment",
                "session_id": str(sid),
                "segment_id": seg_id,
                "chunk_sequence": chunk_seq,
                "start_time": res["start_time"],
                "end_time": res["end_time"],
                "text": res["text"],
            }
        ),
        str(sid),
    )
    logger.info("📡 推送 transcript_segment seq=%s start=%.1f", chunk_seq, res["start_time"])


# END FILE CONTENTS


# File: app/services/stt/__init__.py

from .interfaces import ISTTProvider           # 對外暴露
__all__ = ["ISTTProvider"]


# END FILE CONTENTS


# File: docs/lang-map-refactor.md

# Lang-map Refactor 規格與設計

## 目標
1. 前端下拉可選 Provider (whisper / gpt4o) 與語言 (zh-TW / en-US …)
2. 後端 `sessions.lang_code` 永遠存 BCP-47（zh-TW、en-US…）
3. 各 Provider 在呼叫外部 API 前，自行把 lang_code 轉成該 API 支援格式
   - Whisper    : zh → zh, en → en  (ISO-639-1, 小寫)
   - GPT-4o-STT : zh → zh, en → en  (可傳 auto)
4. 其他程式碼不再 hard-code 語言碼

## 主要檔案/路徑
- backend
  - app/services/stt/interfaces.py
  - app/services/stt/lang_map.py
  - app/services/stt/whisper_provider.py
  - app/services/stt/gpt4o_provider.py
  - app/services/stt/factory.py
  - app/api/segments.py
  - migrations/20250713_add_enum_lang.sql
- frontend
  - frontend/constants/languages.ts
  - frontend/constants/providers.ts
  - frontend/hooks/useSession.ts

## 設計重點
- 語言碼轉換集中於 lang_map.py，Provider 端自動轉換
- session.lang_code 永遠存 BCP-47
- 前端/後端皆移除 hard-code，統一 import 常數
- SQL migration 補 enum type 支援 zh/en

## TDD/Tidy First 流程
- 先寫測試與型別，逐步重構 provider/factory
- 每步驟 commit 分明，結構與行為分離
- 文件同步更新

## 測試
- lang_map.py 單元測試
- provider/factory 流程整合測試
- 前端下拉選單與 session 建立流程測試

## 執行步驟
1. 執行 SQL migration
2. .env WHISPER_LANGUAGE 可保留 zh-TW（不影響）
3. npm run dev + uv pip run main.py
4. 前端選 provider + 語言，上傳後應：
   - Whisper → 200 OK，語言欄存 zh-TW
   - GPT-4o → TODO NotImplemented（先回 501） 


# END FILE CONTENTS


# File: frontend/hooks/use-transcript-adapter.ts

"use client"

import { useTranscript as useTranscriptLegacy } from './use-transcript'
import { useTranscriptNew } from './use-transcript-new'
import { isFeatureEnabled } from '../lib/feature-flags'
import { TranscriptMessage } from '../lib/transcript-manager'

// 統一的 UseTranscript 介面
interface UseTranscriptReturn {
    transcripts: TranscriptMessage[]
    isConnected: boolean
    isCompleted: boolean
    error: string | null
    connect: (sessionId: string) => Promise<void>
    disconnect: () => void
    clearTranscripts: () => void
    // 自動捲動功能
    autoScrollEnabled: boolean
    enableAutoScroll: () => void
    disableAutoScroll: () => void
    scrollToLatest: () => void
    setScrollContainer: (element: HTMLElement | null) => void
}

/**
 * useTranscript 適配器 Hook
 * 根據功能開關決定使用新舊版本的 useTranscript
 * 特別注意保持 TranscriptManager 的 WebSocket 重連機制
 */
export function useTranscript(): UseTranscriptReturn {
    const useNewTranscriptHook = isFeatureEnabled('useNewTranscriptHook')
    const useNewStateManagement = isFeatureEnabled('useNewStateManagement')

    console.log('🔄 [useTranscriptAdapter] 功能開關狀態:', {
        useNewTranscriptHook,
        useNewStateManagement,
        willUseNewVersion: useNewTranscriptHook || useNewStateManagement
    })

    // 如果啟用新 Transcript Hook 或新狀態管理，使用新版本
    if (useNewTranscriptHook || useNewStateManagement) {
        console.log('🔄 [useTranscriptAdapter] 使用新版本 useTranscriptNew')
        return useTranscriptNew()
    }

    // 否則使用舊版本
    console.log('🔄 [useTranscriptAdapter] 使用舊版本 useTranscript')
    return useTranscriptLegacy()
}

// 導出舊版本供直接使用（用於測試或特殊情況）
export { useTranscript as useTranscriptLegacy } from './use-transcript'
export { useTranscriptNew } from './use-transcript-new'


# END FILE CONTENTS


# File: PRD.md

# StudyScriber PRD

---

## 1. 專案願景

提供「邊錄邊轉錄」的雲端筆記，讓內部訓練、講座筆記一次到位：可選錄音、即時逐字稿、Markdown 筆記與匯出，一條龍完成。

---

## 2. 產品定位

| 項目     | 描述                                                               |
| -------- | ------------------------------------------------------------------ |
| 目標族群 | 成年自學者                                                         |
| 痛點     | 備課／聽課同時要做筆記、整理逐字稿耗時、有時只需要筆記功能         |
| 核心價值 | 1 個畫面完成「純筆記」或「錄音 → 即時逐字稿 → 筆記」，課後一鍵匯出 |

---

## 3. 功能列表

1. **雲端 Markdown 筆記**  
   隨時撰寫 Markdown 筆記

2. **錄音與即時逐字稿**  
   邊錄音邊自動產生逐字稿，支援多國語言

3. **多種語音辨識引擎選擇**  
   可切換 Whisper 或 GPT-4o-transcribe Model

4. **一鍵匯出**  
   筆記、逐字稿可一鍵匯出 ZIP 檔



# END FILE CONTENTS


# File: frontend/lib/__tests__/initial-state-loader.test.ts

import { beforeEach, describe, expect, test, vi } from 'vitest'
import { InitialStateLoader } from '../initial-state-loader'
import type { AppData } from '../../types/app-state'

// Mock localStorage
const localStorageMock = {
    getItem: vi.fn(),
    setItem: vi.fn(),
    removeItem: vi.fn(),
    clear: vi.fn(),
}

// 在測試環境中設置 localStorage mock
Object.defineProperty(window, 'localStorage', {
    value: localStorageMock
})

describe('InitialStateLoader', () => {
    beforeEach(() => {
        vi.clearAllMocks()
        localStorageMock.getItem.mockReturnValue(null)
    })

    describe('loadInitialAppData', () => {
        test('應該返回預設狀態當沒有持久化資料時', () => {
            const result = InitialStateLoader.loadInitialAppData()

            expect(result).toEqual({
                state: 'default',
                transcriptEntries: [],
                editorContent: '',
                isRecording: false,
                recordingTime: 0,
                session: null,
            })
        })

        test('應該載入草稿筆記內容', () => {
            localStorageMock.getItem.mockImplementation((key) => {
                if (key === 'draft_note') return '測試草稿內容'
                return null
            })

            const result = InitialStateLoader.loadInitialAppData()

            expect(result.editorContent).toBe('測試草稿內容')
            expect(localStorageMock.getItem).toHaveBeenCalledWith('draft_note')
        })

        test('應該載入上次會話資訊', () => {
            const mockSession = {
                id: 'test-session-id',
                status: 'active',
                type: 'recording'
            }

            localStorageMock.getItem.mockImplementation((key) => {
                if (key === 'last_session') return JSON.stringify(mockSession)
                return null
            })

            const result = InitialStateLoader.loadInitialAppData()

            expect(result.session).toEqual(mockSession)
            expect(localStorageMock.getItem).toHaveBeenCalledWith('last_session')
        })

        test('應該忽略已完成的會話', () => {
            const completedSession = {
                id: 'test-session-id',
                status: 'completed',
                type: 'recording'
            }

            localStorageMock.getItem.mockImplementation((key) => {
                if (key === 'last_session') return JSON.stringify(completedSession)
                return null
            })

            const result = InitialStateLoader.loadInitialAppData()

            expect(result.session).toBeNull()
        })

        test('應該載入完整的應用狀態', () => {
            const mockAppState = {
                state: 'recording_active',
                transcriptEntries: [
                    { time: '00:01', text: '測試逐字稿' }
                ]
            }

            localStorageMock.getItem.mockImplementation((key) => {
                if (key === 'app_state_v1') return JSON.stringify(mockAppState)
                return null
            })

            const result = InitialStateLoader.loadInitialAppData()

            expect(result.state).toBe('recording_active')
            expect(result.transcriptEntries).toEqual(mockAppState.transcriptEntries)
        })

        test('應該處理無效的 JSON 資料', () => {
            localStorageMock.getItem.mockImplementation((key) => {
                if (key === 'last_session') return 'invalid json'
                return null
            })

            const result = InitialStateLoader.loadInitialAppData()

            // 應該返回預設狀態而不是拋出錯誤
            expect(result.session).toBeNull()
        })
    })

    describe('saveAppState', () => {
        test('應該儲存應用狀態到 localStorage', () => {
            const mockAppData: AppData = {
                state: 'recording_active',
                transcriptEntries: [{ time: '00:01', text: '測試' }],
                editorContent: '測試內容',
                isRecording: true,
                recordingTime: 30,
                session: {
                    id: 'test-session',
                    status: 'active',
                    type: 'recording'
                }
            }

            InitialStateLoader.saveAppState(mockAppData)

            expect(localStorageMock.setItem).toHaveBeenCalledWith(
                'app_state_v1',
                JSON.stringify({
                    state: 'recording_active',
                    transcriptEntries: [{ time: '00:01', text: '測試' }]
                })
            )

            expect(localStorageMock.setItem).toHaveBeenCalledWith(
                'last_session',
                JSON.stringify(mockAppData.session)
            )
        })

        test('應該移除會話資訊當 session 為 null', () => {
            const mockAppData: AppData = {
                state: 'default',
                transcriptEntries: [],
                editorContent: '',
                isRecording: false,
                recordingTime: 0,
                session: null
            }

            InitialStateLoader.saveAppState(mockAppData)

            expect(localStorageMock.removeItem).toHaveBeenCalledWith('last_session')
        })
    })

    describe('clearPersistedState', () => {
        test('應該清除持久化狀態', () => {
            InitialStateLoader.clearPersistedState()

            expect(localStorageMock.removeItem).toHaveBeenCalledWith('app_state_v1')
            expect(localStorageMock.removeItem).toHaveBeenCalledWith('last_session')
            // 不應該清除 draft_note
            expect(localStorageMock.removeItem).not.toHaveBeenCalledWith('draft_note')
        })
    })

    describe('hasPersistedState', () => {
        test('當有持久化狀態時應該返回 true', () => {
            localStorageMock.getItem.mockImplementation((key) => {
                if (key === 'app_state_v1') return '{"state":"default"}'
                return null
            })

            expect(InitialStateLoader.hasPersistedState()).toBe(true)
        })

        test('當沒有持久化狀態時應該返回 false', () => {
            expect(InitialStateLoader.hasPersistedState()).toBe(false)
        })

        test('當有會話資訊時應該返回 true', () => {
            localStorageMock.getItem.mockImplementation((key) => {
                if (key === 'last_session') return '{"id":"test"}'
                return null
            })

            expect(InitialStateLoader.hasPersistedState()).toBe(true)
        })
    })
})


# END FILE CONTENTS


# File: frontend/utils/event-bus.ts

type Handler = (payload?: unknown) => void
const bus = new Map<string, Set<Handler>>()

export function on(event: string, fn: Handler) {
    (bus.get(event) ?? bus.set(event, new Set()).get(event))!.add(fn)
}
export function off(event: string, fn: Handler) {
    bus.get(event)?.delete(fn)
}
export function emit(event: string, payload?: unknown) {
    bus.get(event)?.forEach(fn => fn(payload))
}


# END FILE CONTENTS


# File: package.json

{
	"devDependencies": {
		"@playwright/test": "^1.54.1",
		"jszip": "^3.10.1"
	},
	"packageManager": "pnpm@10.7.0+sha1.66453f13fbf9078d3db193718206a8d738afdbdb"
}


# END FILE CONTENTS


# File: docs/export-wait-until-completed-20240608.md

# 匯出需等 session 狀態 completed 流程規格

- **建立日期**：2024-06-08
- **功能說明**：
  - 前端匯出錄音/逐字稿時，必須等後端 session 狀態為 completed，才能進行下載，避免 500/409 錯誤。

---

## 一、後端

### 1. PATCH /session/{sid}/finish
- 已有：呼叫時會將 session.status 設為 completed。

### 2. WebSocket 錄音上傳流程
- 新增：
  - 在 `app/ws/upload_audio.py` 的 `_handle_upload_complete` 方法結尾，於所有音檔切片上傳與轉錄完成後，自動將 session 狀態設為 completed。
  - 實作：
    ```python
    self.supabase_client.table("sessions").update({
        "status": "completed",
        "completed_at": datetime.utcnow().isoformat()
    }).eq("id", str(self.session_id)).execute()
    ```

---

## 二、前端

### 1. useSession hook
- 提供 `waitUntilCompleted(timeout)` 方法，每 1.5 秒輪詢 `/api/session/{sid}`，直到 status === completed 或超時。

### 2. ExportButton
- 匯出前呼叫 `waitUntilCompleted`，若未完成則提示用戶「後端仍在處理逐字稿，請稍候再試」。
- 完成後才會觸發下載。

---

## 三、測試
- 應測試：
  - 錄音結束後，session 狀態會自動標記 completed。
  - 匯出時若未完成，前端會正確提示。
  - 匯出時若已完成，能正確下載。

---

## 四、備註
- 此設計可防止前端誤觸發匯出時，後端尚未完成逐字稿處理，導致 500/409 錯誤。
- session 狀態統一由 finish API 或 WebSocket 處理結束時自動標記。 


# END FILE CONTENTS


# File: frontend/lib/__tests__/segmented-audio-recorder.test.ts

import { describe, test, expect, beforeEach, vi, afterEach } from 'vitest'
import { SegmentedAudioRecorder, checkSegmentedAudioRecordingSupport } from '../segmented-audio-recorder'

// Mock navigator.mediaDevices
const mockGetUserMedia = vi.fn()
Object.defineProperty(navigator, 'mediaDevices', {
    writable: true,
    value: {
        getUserMedia: mockGetUserMedia,
    },
})

// Mock MediaRecorder
const mockStart = vi.fn()
const mockStop = vi.fn()
const mockRequestData = vi.fn()

class MockMediaRecorder {
    start = mockStart
    stop = mockStop
    requestData = mockRequestData
    state: string = 'inactive'
    ondataavailable: ((event: any) => void) | null = null
    onerror: ((event: any) => void) | null = null

    constructor(stream: any, options: any) {
        // Store for verification
    }

    static isTypeSupported = vi.fn().mockReturnValue(true)
}

Object.defineProperty(window, 'MediaRecorder', {
    writable: true,
    value: MockMediaRecorder,
})

// Mock stream
const mockTrack = { stop: vi.fn() }
const mockStream = {
    getTracks: vi.fn(() => [mockTrack])
}

describe('SegmentedAudioRecorder', () => {
    let recorder: SegmentedAudioRecorder

    beforeEach(() => {
        vi.clearAllMocks()
        mockGetUserMedia.mockResolvedValue(mockStream)

        recorder = new SegmentedAudioRecorder({
            segmentDuration: 1000,
            mimeType: 'audio/webm;codecs=opus',
            audioBitsPerSecond: 64000
        })
    })

    afterEach(() => {
        recorder.cleanup()
    })

    describe('初始化和配置', () => {
        test('應該使用預設配置創建錄音器', () => {
            const defaultRecorder = new SegmentedAudioRecorder()

            expect(defaultRecorder.currentConfig).toEqual({
                segmentDuration: 10000,
                mimeType: 'audio/webm;codecs=opus',
                audioBitsPerSecond: 64000
            })
            expect(defaultRecorder.currentState).toBe('idle')
            expect(defaultRecorder.isRecording).toBe(false)
            expect(defaultRecorder.currentSequence).toBe(0)
        })

        test('應該接受自訂配置', () => {
            const customConfig = {
                segmentDuration: 3000,
                mimeType: 'audio/webm',
                audioBitsPerSecond: 64000
            }

            const customRecorder = new SegmentedAudioRecorder(customConfig)
            expect(customRecorder.currentConfig).toEqual(customConfig)
        })

        test('應該正確設置事件回調', () => {
            const onSegment = vi.fn()
            const onError = vi.fn()
            const onStateChange = vi.fn()

            recorder.onSegment(onSegment)
            recorder.onError(onError)
            recorder.onStateChange(onStateChange)

            // 回調應該被正確設置（透過後續行為驗證）
            expect(recorder.currentState).toBe('idle')
        })
    })

    describe('音訊權限和初始化', () => {
        test('應該成功初始化音訊權限', async () => {
            await recorder.initialize()

            expect(mockGetUserMedia).toHaveBeenCalledWith({ audio: true })
        })

        test('應該處理權限被拒絕的情況', async () => {
            const error = new Error('Permission denied')
            mockGetUserMedia.mockRejectedValueOnce(error)

            const onError = vi.fn()
            recorder.onError(onError)

            await expect(recorder.initialize()).rejects.toThrow('Permission denied')
        })

        test('應該避免重複初始化', async () => {
            await recorder.initialize()
            await recorder.initialize() // 第二次調用

            expect(mockGetUserMedia).toHaveBeenCalledTimes(1)
        })
    })

    describe('錄音狀態管理', () => {
        beforeEach(async () => {
            await recorder.initialize()
        })

        test('應該正確開始錄音', async () => {
            const onSegment = vi.fn()

            await recorder.start(onSegment)

            expect(recorder.isRecording).toBe(true)
            expect(recorder.currentState).toBe('recording')
            expect(mockStart).toHaveBeenCalled()
        })

        test('應該防止重複開始錄音', async () => {
            const onSegment = vi.fn()

            await recorder.start(onSegment)

            await expect(recorder.start(onSegment)).rejects.toThrow('錄製已在進行中')
        })

        test('應該正確停止錄音', async () => {
            const onSegment = vi.fn()

            await recorder.start(onSegment)
            recorder.stop()

            expect(recorder.isRecording).toBe(false)
            expect(recorder.currentState).toBe('idle')
        })
    })

    describe('序號管理', () => {
        test('應該從 0 開始序號', () => {
            expect(recorder.currentSequence).toBe(0)
        })

        test('應該在重新開始錄音時重置序號', async () => {
            await recorder.initialize()
            const onSegment = vi.fn()

            await recorder.start(onSegment)
            recorder.stop()

            expect(recorder.currentSequence).toBe(0)
        })
    })

    describe('資源清理', () => {
        test('應該正確清理所有資源', async () => {
            await recorder.initialize()
            const onSegment = vi.fn()
            await recorder.start(onSegment)

            recorder.cleanup()

            expect(recorder.isRecording).toBe(false)
            expect(recorder.currentSequence).toBe(0)
            expect(mockTrack.stop).toHaveBeenCalled()
        })
    })
})

describe('瀏覽器支援檢查', () => {
    test('應該檢查基本瀏覽器支援', async () => {
        const result = await checkSegmentedAudioRecordingSupport()
        expect(result.isSupported).toBe(true)
    })

    test('應該檢測 MediaDevices API 不支援', async () => {
        // 使用 vi.stubGlobal 來模擬不支援的情況
        vi.stubGlobal('navigator', { ...navigator, mediaDevices: undefined })

        const result = await checkSegmentedAudioRecordingSupport()

        expect(result.isSupported).toBe(false)
        expect(result.error).toContain('不支援 MediaDevices API')

        vi.unstubAllGlobals()
    })

    test('應該檢測 MediaRecorder API 不支援', async () => {
        // 直接測試沒有 MediaRecorder 的情況
        const originalMediaRecorder = global.MediaRecorder
        delete (global as any).MediaRecorder

        const result = await checkSegmentedAudioRecordingSupport()

        expect(result.isSupported).toBe(false)
        expect(result.error).toContain('不支援 MediaRecorder API')

        // 恢復
        global.MediaRecorder = originalMediaRecorder
    })
})


# END FILE CONTENTS


# File: frontend/app/globals.css

@tailwind base;
@tailwind components;
@tailwind utilities;
@import "easymde/dist/easymde.min.css";

@theme {
  --color-background: oklch(1 0 0);
  --color-foreground: oklch(0.145 0 0);
  --color-muted: oklch(0.898 0 0);
  --color-muted-foreground: oklch(0.478 0 0);
  --color-border: oklch(0.898 0 0);
  --color-primary: oklch(0.205 0 0);
  --color-primary-foreground: oklch(0.985 0 0);
}

:root {
  --border: 210, 12%, 83%;
}

/* Custom SimpleMDE styling to match design system */
.CodeMirror {
  font-family: ui-sans-serif, system-ui, sans-serif;
  font-size: 14px;
  line-height: 1.6;
  color: oklch(0.145 0 0);
  background-color: oklch(1 0 0);
  border: none;
  padding: 16px;
}

.editor-toolbar {
  border: none;
  background-color: oklch(1 0 0);
  padding: 16px;
  border-bottom: 1px solid oklch(0.898 0 0);
}

.editor-toolbar a {
  color: oklch(0.478 0 0) !important;
  border: none !important;
  padding: 8px !important;
  margin: 0 4px !important;
}

.editor-toolbar a:hover {
  background-color: oklch(0.898 0 0) !important;
  color: oklch(0.145 0 0) !important;
}

.editor-toolbar.fullscreen {
  background-color: oklch(1 0 0);
}

.CodeMirror-fullscreen {
  background-color: oklch(1 0 0);
}

/* Make SimpleMDE container fill full height */
.editor-container .react-simplemde-editor {
  height: 100%;
  display: flex;
  flex-direction: column;
}

.editor-container .editor-toolbar {
  flex-shrink: 0;
}

.editor-container .CodeMirror {
  flex: 1;
  height: auto !important;
}

.editor-container .CodeMirror-scroll {
  min-height: 100%;
}

.EasyMDEContainer .editor-toolbar {
  border: 0px solid transparent !important;
}

.EasyMDEContainer .CodeMirror-wrap {
  border-width: 1px 0px 0px 0px !important;
}

# END FILE CONTENTS


# File: app/db/supabase_init.sql

/* -----------------------------------------------
StudyScriber – Supabase Database Bootstrap v2025-07-13
------------------------------------------------- */

-- ---------- ENUM TYPES ----------
DO $$ BEGIN
    CREATE TYPE session_type AS ENUM ('note_only', 'recording');
EXCEPTION WHEN duplicate_object THEN NULL; END $$;

DO $$ BEGIN
    CREATE TYPE session_status AS ENUM ('active', 'completed', 'error');
EXCEPTION WHEN duplicate_object THEN NULL; END $$;

DO $$ BEGIN
    CREATE TYPE lang_code AS ENUM ('zh-TW', 'en-US');
EXCEPTION WHEN duplicate_object THEN NULL; END $$;

COMMENT ON TYPE lang_code IS '語言代碼：zh-TW=繁體中文；en-US=美式英文';

-- ---------- TABLE: sessions ----------
CREATE TABLE IF NOT EXISTS sessions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid (),
    type session_type NOT NULL DEFAULT 'note_only',
    status session_status NOT NULL DEFAULT 'active',
    title VARCHAR(255) DEFAULT '未命名筆記',
    lang_code lang_code NOT NULL DEFAULT 'zh-TW', -- ★ 改名
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    started_at TIMESTAMPTZ,
    stt_provider TEXT,
    completed_at TIMESTAMPTZ
);

-- ---------- TABLE: notes ----------
CREATE TABLE IF NOT EXISTS notes (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid (),
    session_id UUID NOT NULL REFERENCES sessions (id) ON DELETE CASCADE,
    content TEXT NOT NULL DEFAULT '',
    client_ts TIMESTAMPTZ,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (session_id) -- 每個 session 僅一條 note
);

-- ---------- TABLE: audio_files ----------
CREATE TABLE IF NOT EXISTS audio_files (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid (),
    session_id UUID NOT NULL REFERENCES sessions (id) ON DELETE CASCADE,
    chunk_sequence INTEGER NOT NULL,
    r2_key TEXT NOT NULL,
    r2_bucket TEXT NOT NULL,
    file_size INTEGER NOT NULL,
    duration_seconds DECIMAL(10, 3),
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (session_id, chunk_sequence)
);

-- ---------- TABLE: transcript_segments ----------
CREATE TABLE IF NOT EXISTS transcript_segments (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid (),
    session_id UUID NOT NULL REFERENCES sessions (id) ON DELETE CASCADE,
    chunk_sequence INTEGER NOT NULL,
    start_time DECIMAL(10, 3) NOT NULL,
    end_time DECIMAL(10, 3) NOT NULL,
    text TEXT NOT NULL,
    confidence DECIMAL(5, 4) DEFAULT 0.0,
    lang_code lang_code DEFAULT 'zh-TW', -- ★ 改名
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

-- ---------- TABLE: transcripts ----------
CREATE TABLE IF NOT EXISTS transcripts (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid (),
    session_id UUID NOT NULL REFERENCES sessions (id) ON DELETE CASCADE,
    full_text TEXT NOT NULL DEFAULT '',
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (session_id) -- 每個 session 僅一條完整逐字稿
);

-- ---------- INDEXES ----------
CREATE INDEX IF NOT EXISTS idx_sessions_status ON sessions (status);

CREATE INDEX IF NOT EXISTS idx_sessions_created_at ON sessions (created_at);

CREATE INDEX IF NOT EXISTS idx_notes_session_id ON notes (session_id);

CREATE INDEX IF NOT EXISTS idx_audio_files_session_id ON audio_files (session_id);

CREATE INDEX IF NOT EXISTS idx_audio_files_sequence ON audio_files (session_id, chunk_sequence);

CREATE INDEX IF NOT EXISTS idx_transcript_segments_session_id ON transcript_segments (session_id);

CREATE INDEX IF NOT EXISTS idx_transcript_segments_sequence ON transcript_segments (session_id, chunk_sequence);

CREATE INDEX IF NOT EXISTS idx_transcripts_session_id ON transcripts (session_id);

-- ---------- TRIGGER: update updated_at ----------
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS trigger LANGUAGE plpgsql AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END $$;

DROP TRIGGER IF EXISTS update_sessions_updated_at ON sessions;

DROP TRIGGER IF EXISTS update_notes_updated_at ON notes;

DROP TRIGGER IF EXISTS update_transcripts_updated_at ON transcripts;

CREATE TRIGGER update_sessions_updated_at
    BEFORE UPDATE ON sessions
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_notes_updated_at
    BEFORE UPDATE ON notes
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_transcripts_updated_at
    BEFORE UPDATE ON transcripts
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- ---------- TRIGGER: single active session ----------
CREATE OR REPLACE FUNCTION check_single_active_session()
RETURNS trigger LANGUAGE plpgsql AS $$
BEGIN
    IF NEW.status = 'active' THEN
        UPDATE sessions
           SET status      = 'completed',
               completed_at = CURRENT_TIMESTAMP
         WHERE status = 'active'
           AND id      <> NEW.id;
    END IF;
    RETURN NEW;
END $$;

DROP TRIGGER IF EXISTS ensure_single_active_session ON sessions;

CREATE TRIGGER ensure_single_active_session
    BEFORE INSERT OR UPDATE ON sessions
    FOR EACH ROW EXECUTE FUNCTION check_single_active_session();

-- ---------- DONE ----------
SELECT 'StudyScriber 資料庫初始化完成！' AS message;


# END FILE CONTENTS


# File: frontend/.eslintrc.json

{
  "extends": [
    "next/core-web-vitals",
    "next/typescript"
  ]
}


# END FILE CONTENTS


# File: frontend/components/default-state.tsx

"use client"

import { Button } from "@/components/ui/button"
import { Upload, FileText } from "lucide-react"

interface DefaultStateProps {
  onStartRecording: () => void
}

export function DefaultState({ onStartRecording }: DefaultStateProps) {
  const handleClick = () => {
    console.log("🔘 [DefaultState] 按鈕被點擊")
    console.log("🔘 [DefaultState] onStartRecording 函數:", typeof onStartRecording)
    try {
      onStartRecording()
      console.log("🔘 [DefaultState] onStartRecording 調用成功")
    } catch (error) {
      console.error("🔘 [DefaultState] onStartRecording 調用失敗:", error)
    }
  }

  console.log("🔄 [DefaultState] 組件渲染，onStartRecording:", typeof onStartRecording)

  return (
    <div className="h-full flex flex-col p-6">
      {/* Main content */}
      <div className="flex-1 flex flex-col items-center justify-center space-y-6">
        <Button
          onClick={handleClick}
          size="lg"
          className="flex items-center gap-3 px-8 py-4 text-base"
          data-testid="start-recording-button"
        >
          <Upload className="w-5 h-5" />
          Start Recording
        </Button>

        <div className="text-center text-muted-foreground text-sm space-y-1">
          <p className="flex items-center justify-center gap-2">
            <FileText className="w-4 h-4" />
            或直接開始編寫筆記
          </p>
          <p>錄音功能隨時可以啟用</p>
        </div>
      </div>
    </div>
  )
}


# END FILE CONTENTS


# File: frontend/lib/services/session-service.ts

"use client"

import { BaseService } from './base-service'
import { ISessionService } from './interfaces'
import { sessionAPI, type SessionCreateRequest, type SessionResponse } from '../api'
import axios from 'axios'

/**
 * SessionService - 會話管理服務
 *
 * 重構現有的 sessionAPI 邏輯到服務層，提供：
 * - 會話創建（純筆記、錄音模式）
 * - 會話升級（純筆記 → 錄音模式）
 * - 會話狀態管理
 * - 統一錯誤處理和重試機制
 */
import { STTProvider } from '../api'

export class SessionService extends BaseService implements ISessionService {
    protected readonly serviceName = 'SessionService'

    /**
     * 服務初始化
     * 重用現有的 sessionAPI 配置和攔截器
     */
    async initialize(): Promise<void> {
        this.logInfo('服務初始化開始')

        // 檢查 sessionAPI 可用性
        try {
            // 簡單的健康檢查 - 嘗試獲取活躍會話
            await this.checkActiveSession()
            this.logSuccess('API 連接檢查', '後端 API 連接正常')
        } catch (error) {
            // 網路錯誤不影響初始化，記錄警告即可
            if (axios.isAxiosError(error) && error.code === 'ERR_NETWORK') {
                this.logWarning('API 連接檢查失敗，但不影響服務初始化', error.message)
            } else {
                this.logWarning('初始化健康檢查失敗', error)
            }
        }

        this.logSuccess('初始化完成')
    }

    /**
     * 服務清理
     */
    async cleanup(): Promise<void> {
        this.logInfo('服務清理開始')
        // SessionService 主要是無狀態的，無需特殊清理
        this.logSuccess('清理完成')
    }

    /**
     * 確保錄音會話存在 - 優雅處理會話衝突
     *
     * 策略：
     * 1. 優先嘗試創建新的錄音會話
     * 2. 若遇到 409 衝突，改為獲取現有活躍會話
     * 3. 確保返回可用的錄音會話
     */
    async ensureRecordingSession(title?: string, content?: string, startTs?: number, sttProvider?: STTProvider): Promise<SessionResponse> {
        this.logInfo('確保錄音會話存在 - 強制新建策略', { title, hasContent: !!content, hasStartTs: !!startTs, sttProvider })

        try {
            // 1. 檢查並完成任何現有活躍會話
            const existingSession = await this.checkActiveSession()
            if (existingSession) {
                this.logInfo('檢測到現有活躍會話，準備完成', {
                    sessionId: existingSession.id,
                    type: existingSession.type,
                    status: existingSession.status
                })

                await this.finishSession(existingSession.id)
                this.logSuccess('現有會話已完成', { sessionId: existingSession.id })
            } else {
                this.logInfo('沒有現有活躍會話')
            }

            // 2. 強制創建新會話
            const newSession = await this.createRecordingSession(
                title,
                content,
                startTs,
                sttProvider
            )

            this.logSuccess('強制新建策略完成', {
                newSessionId: newSession.id,
                type: newSession.type,
                status: newSession.status,
                sttProvider
            })

            return newSession

        } catch (error) {
            if (error instanceof Error && error.message.includes('409')) {
                // 遇到衝突，獲取現有活躍會話
                this.logWarning('會話衝突，嘗試獲取現有活躍會話')
                const activeSession = await this.checkActiveSession()
                if (activeSession) {
                    return activeSession
                }
            }
            this.handleError('確保錄音會話存在 - 強制新建策略', error as Error)
        }
    }

    /**
     * 創建錄音會話
     * 重用 sessionAPI.createSession 的重試機制和錯誤處理
     */
    async createRecordingSession(title?: string, content?: string, startTs?: number, sttProvider?: STTProvider): Promise<SessionResponse> {
        this.logInfo('創建錄音會話', { title, hasContent: !!content, hasStartTs: !!startTs, sttProvider })

        try {
            const sessionData: SessionCreateRequest = {
                title,
                type: 'recording',
                content,
                start_ts: startTs,
                stt_provider: sttProvider
            }

            const session = await sessionAPI.createSession(sessionData)

            this.logSuccess('錄音會話創建成功', {
                sessionId: session.id,
                type: session.type,
                status: session.status,
                withStartTs: !!startTs,
                sttProvider
            })

            return session
        } catch (error) {
            // 不在這裡處理 409 錯誤，交由 ensureRecordingSession 處理
            this.handleError('創建錄音會話', error)
        }
    }

    /**
     * 創建純筆記會話
     * 重用 sessionAPI.createSession 的重試機制和錯誤處理
     */
    async createNoteSession(title?: string, content?: string): Promise<SessionResponse> {
        this.logInfo('創建純筆記會話', { title, hasContent: !!content })

        try {
            const sessionData: SessionCreateRequest = {
                title,
                type: 'note_only',
                content,
            }

            const session = await sessionAPI.createSession(sessionData)

            this.logSuccess('純筆記會話創建成功', {
                sessionId: session.id,
                type: session.type,
                status: session.status
            })

            return session
        } catch (error) {
            // 處理會話衝突錯誤（409）
            if (axios.isAxiosError(error) && error.response?.status === 409) {
                const conflictMessage = '檢測到活躍會話衝突，請重新整理頁面後再試'
                this.logWarning('會話衝突錯誤 (409)', {
                    detail: error.response?.data?.detail,
                    message: error.message
                })
                this.handleError('創建純筆記會話', new Error(conflictMessage))
            }

            this.handleError('創建純筆記會話', error)
        }
    }

    /**
     * 升級會話至錄音模式
     * 重用 sessionAPI.upgradeToRecording 的重試機制和錯誤處理
     */
    async upgradeToRecording(sessionId: string): Promise<SessionResponse> {
        this.logInfo('升級會話至錄音模式', { sessionId })

        try {
            // 先檢查會話是否存在和狀態
            const currentSession = await this.checkActiveSession()

            if (!currentSession) {
                this.handleError('升級會話至錄音模式', new Error('沒有活躍的會話可以升級'))
            }

            if (currentSession!.id !== sessionId) {
                this.handleError('升級會話至錄音模式',
                    new Error(`會話 ID 不匹配：要求升級 ${sessionId}，但活躍會話為 ${currentSession!.id}`))
            }

            if (currentSession!.type === 'recording') {
                this.logInfo('會話已經是錄音模式，返回現有會話', { sessionId })
                return currentSession!
            }

            const updatedSession = await sessionAPI.upgradeToRecording(sessionId)

            this.logSuccess('會話升級成功', {
                sessionId: updatedSession.id,
                oldType: currentSession!.type,
                newType: updatedSession.type,
                status: updatedSession.status
            })

            return updatedSession
        } catch (error) {
            this.handleError('升級會話至錄音模式', error)
        }
    }

    /**
     * 完成會話
     * 重用 sessionAPI.finishSession 的重試機制和錯誤處理
     */
    async finishSession(sessionId: string): Promise<void> {
        this.logInfo('完成會話', { sessionId })

        try {
            await sessionAPI.finishSession(sessionId)

            this.logSuccess('會話完成成功', { sessionId })
        } catch (error) {
            this.handleError('完成會話', error)
        }
    }

    /**
     * 檢查活躍會話
     * 重用 sessionAPI.getActiveSession 的重試機制和錯誤處理
     */
    async checkActiveSession(): Promise<SessionResponse | null> {
        this.logInfo('檢查活躍會話')

        try {
            const activeSession = await sessionAPI.getActiveSession()

            if (activeSession) {
                this.logSuccess('活躍會話檢查', {
                    sessionId: activeSession.id,
                    type: activeSession.type,
                    status: activeSession.status
                })
                return activeSession
            } else {
                this.logInfo('沒有活躍會話')
                return null
            }
        } catch (error) {
            // 網路錯誤不應該拋出，只記錄警告
            if (axios.isAxiosError(error) && error.code === 'ERR_NETWORK') {
                this.logWarning('Backend API 連線暫時失敗，將在後續重試', error.message)
                return null
            }

            this.handleError('檢查活躍會話', error)
        }
    }

    /**
     * 等待會話在資料庫中完全可見
     * 用於解決會話創建後立即查詢可能失敗的時序問題
     */
    async waitForSessionReady(sessionId: string, maxWaitTime: number = 5000): Promise<boolean> {
        this.logInfo('等待會話準備就緒', { sessionId, maxWaitTime })

        const startTime = Date.now()
        const checkInterval = 200 // 每 200ms 檢查一次

        while (Date.now() - startTime < maxWaitTime) {
            try {
                const activeSession = await this.checkActiveSession()

                if (activeSession && activeSession.id === sessionId) {
                    // 進一步驗證會話狀態
                    if (activeSession.status === 'active' && activeSession.type === 'recording') {
                        this.logSuccess('會話已準備就緒', {
                            sessionId,
                            status: activeSession.status,
                            type: activeSession.type,
                            waitTime: Date.now() - startTime
                        })
                        return true
                    }
                }
            } catch (error) {
                // 檢查失敗時繼續等待，不拋出錯誤
                this.logWarning('會話狀態檢查失敗，繼續等待', {
                    sessionId,
                    error: error instanceof Error ? error.message : String(error)
                })
            }

            // 等待下次檢查
            await new Promise(resolve => setTimeout(resolve, checkInterval))
        }

        this.logWarning('等待會話準備就緒超時', {
            sessionId,
            maxWaitTime,
            actualWaitTime: Date.now() - startTime
        })

        return false
    }

    /**
     * 刪除會話
     * 重用 sessionAPI.deleteSession 的重試機制和錯誤處理
     */
    async deleteSession(sessionId: string): Promise<void> {
        this.logInfo('刪除會話', { sessionId })

        try {
            const result = await sessionAPI.deleteSession(sessionId)

            this.logSuccess('會話刪除成功', {
                sessionId,
                result
            })
        } catch (error) {
            this.handleError('刪除會話', error)
        }
    }

    /**
     * 獲取服務狀態摘要
     * 擴展基礎狀態信息，包含 API 連接狀態
     */
    async getServiceStatus(): Promise<SessionServiceStatus> {
        const baseStatus = this.getStatus()

        // 檢查 API 連接狀態
        let apiConnected = false
        let lastApiCheck: string | null = null

        try {
            await this.checkActiveSession()
            apiConnected = true
            lastApiCheck = new Date().toISOString()
        } catch {
            apiConnected = false
            lastApiCheck = new Date().toISOString()
        }

        return {
            ...baseStatus,
            apiConnected,
            lastApiCheck
        }
    }
}

/**
 * SessionService 狀態介面
 * 擴展基礎服務狀態，包含 API 特定信息
 */
export interface SessionServiceStatus {
    serviceName: string
    isInitialized: boolean
    isRunning: boolean
    timestamp: string
    apiConnected: boolean
    lastApiCheck: string | null
}


# END FILE CONTENTS


# File: frontend/e2e/transcript-integration.spec.ts

import { test, expect, Page } from '@playwright/test'

/**
 * 逐字稿功能整合測試
 * 測試完整的錄音和逐字稿流程，包括新舊系統的切換
 */

// 測試前的設置
test.beforeEach(async ({ page }) => {
  // 前往應用程式
  await page.goto('http://localhost:3000')

  // 等待頁面載入完成
  await page.waitForLoadState('networkidle')

  // 檢查頁面是否正常載入
  await expect(page).toHaveTitle(/study-scriber/)
})

test.describe('逐字稿功能測試', () => {
  test('應該能夠啟用新的狀態管理系統', async ({ page }) => {
    // 在瀏覽器控制台中啟用新功能
    await page.evaluate(() => {
      // 啟用所有新功能
      if ((window as any).featureFlags) {
        (window as any).featureFlags.enableAll()
      }
    })

    // 重新載入頁面以應用新設置
    await page.reload()
    await page.waitForLoadState('networkidle')

    // 檢查功能開關是否正確啟用
    const featureFlags = await page.evaluate(() => {
      return (window as any).featureFlags?.getAll()
    })

    console.log('功能開關狀態:', featureFlags)

    // 驗證關鍵功能已啟用
    expect(featureFlags?.useNewStateManagement).toBe(true)
    expect(featureFlags?.useNewTranscriptHook).toBe(true)
  })

  test('應該能夠開始錄音會話', async ({ page }) => {
    // 啟用新功能
    await page.evaluate(() => {
      if ((window as any).featureFlags) {
        (window as any).featureFlags.enableAll()
      }
    })
    await page.reload()
    await page.waitForLoadState('networkidle')

    // 尋找錄音按鈕
    const recordButton = page.locator('button').filter({ hasText: /錄音|Record|開始/ }).first()

    if (await recordButton.count() > 0) {
      // 點擊錄音按鈕
      await recordButton.click()

      // 等待錄音狀態變更
      await page.waitForTimeout(1000)

      // 檢查是否有錄音狀態指示器
      const recordingIndicator = page.locator('[data-testid="recording-indicator"]')
        .or(page.locator('text=/錄音中|Recording/'))
        .or(page.locator('.recording'))

      // 如果找到錄音指示器，驗證錄音狀態
      if (await recordingIndicator.count() > 0) {
        await expect(recordingIndicator.first()).toBeVisible()
        console.log('✅ 錄音功能已啟動')
      } else {
        console.log('ℹ️ 未找到明顯的錄音指示器，但錄音按鈕已點擊')
      }
    } else {
      console.log('ℹ️ 未找到錄音按鈕，可能需要先建立會話')
    }
  })

  test('應該能夠建立新的筆記會話', async ({ page }) => {
    // 啟用新功能
    await page.evaluate(() => {
      if ((window as any).featureFlags) {
        (window as any).featureFlags.enableAll()
      }
    })
    await page.reload()
    await page.waitForLoadState('networkidle')

    // 尋找新筆記或新會話按鈕
    const newNoteButton = page.locator('button').filter({ hasText: /新筆記|New Note|新增|Add/ }).first()

    if (await newNoteButton.count() > 0) {
      await newNoteButton.click()
      await page.waitForTimeout(500)
      console.log('✅ 新筆記按鈕已點擊')
    } else {
      console.log('ℹ️ 未找到新筆記按鈕')
    }

    // 檢查文字編輯器是否存在
    const editorLocator = page.locator('.CodeMirror').first();
    const editorVisible = await editorLocator.isVisible();

    if (editorVisible) {
      console.log('✅ CodeMirror 編輯器已找到且可見');
      // 使用 evaluate 直接設置編輯器內容
      await page.evaluate((text) => {
        const editor = (window as any).theEditor; // 假設 SimpleMDE 實例暴露在 window
        if (editor && editor.codemirror) {
          editor.codemirror.setValue(text);
        } else {
          // 降級方案：尋找 textarea
          const textarea = document.querySelector('.CodeMirror textarea') as HTMLTextAreaElement | null;
          if (textarea) {
            textarea.value = text;
            textarea.dispatchEvent(new Event('input', { bubbles: true }));
          }
        }
      }, '這是一個測試筆記，用於驗證逐字稿功能。');

      // 驗證文字已輸入
      await expect(editorLocator).toHaveText(/測試筆記/);
      console.log('✅ 編輯器功能正常');
    } else {
      console.log('ℹ️ 未找到 CodeMirror 編輯器或其不可見');
      // 嘗試尋找備用的 textarea
      const fallbackEditor = page.locator('[data-testid="fallback-editor"]');
      if (await fallbackEditor.count() > 0) {
        console.log('ℹ️ 找到備用編輯器，繼續測試...');
        await fallbackEditor.fill('這是一個測試筆記，用於驗證逐字稿功能。');
        await expect(fallbackEditor).toHaveValue(/測試筆記/);
        console.log('✅ 備用編輯器功能正常');
      } else {
        console.log('❌ 主編輯器與備用編輯器皆未找到');
      }
    }
  })

  test('應該能夠檢查 WebSocket 連接狀態', async ({ page }) => {
    // 啟用新功能
    await page.evaluate(() => {
      if ((window as any).featureFlags) {
        (window as any).featureFlags.enableAll()
      }
    })
    await page.reload()
    await page.waitForLoadState('networkidle')

    // 檢查 WebSocket 連接狀態
    const wsStatus = await page.evaluate(() => {
      const result: {
        exists: boolean;
        isConnected?: boolean;
        hasListeners?: boolean;
        websocketAvailable: boolean;
      } = {
        exists: false,
        websocketAvailable: typeof WebSocket !== 'undefined',
      };

      // 檢查是否有 TranscriptManager
      const transcriptManager = (window as any).transcriptManager;
      if (transcriptManager) {
        result.exists = true;
        result.isConnected = transcriptManager.isConnected?.() || false;
        result.hasListeners = transcriptManager.listeners?.size > 0 || false;
      }
      return result;
    });

    console.log('WebSocket 狀態:', wsStatus)

    // 驗證 WebSocket 可用性
    expect(wsStatus.websocketAvailable).toBe(true)

    if (wsStatus.exists) {
      console.log('✅ TranscriptManager 已找到')
    } else {
      console.log('ℹ️ TranscriptManager 尚未初始化，這可能是正常的')
    }
  })

  test('應該能夠測試狀態管理系統', async ({ page }) => {
    await page.waitForSelector('body', { timeout: 5000 });
    const hasBody = (await page.locator('body').count()) > 0;
    expect(hasBody).toBe(true);

    const appState = await page.evaluate(() => {
      return {
        hasFeatureFlags: !!(window as any).featureFlags,
        hasStateMachine: !!(window as any).stateMachine,
      };
    });

    // 啟用新功能
    await page.evaluate(() => {
      if ((window as any).featureFlags) {
        (window as any).featureFlags.enableAll()
      }
    })
    await page.reload()
    await page.waitForLoadState('networkidle')

    console.log('🎬 開始模擬完整錄音流程...')

    // 步驟 1: 檢查初始狀態
    const initialState = await page.evaluate(() => {
      return {
        url: window.location.href,
        title: document.title,
        hasAudio: navigator.mediaDevices !== undefined
      }
    })

    console.log('初始狀態:', initialState)

    // 步驟 2: 尋找並點擊開始錄音的按鈕
    const startButtons = [
      'button:has-text("開始錄音")',
      'button:has-text("Start Recording")',
      'button:has-text("錄音")',
      'button:has-text("Record")',
      '[data-testid="start-recording"]',
      '.record-button',
      'button[aria-label*="錄音"]'
    ]

    let recordingStarted = false

    for (const selector of startButtons) {
      const button = page.locator(selector).first()
      if (await button.count() > 0 && await button.isVisible()) {
        console.log(`找到錄音按鈕: ${selector}`)
        await button.click()
        await page.waitForTimeout(1000)
        recordingStarted = true
        break
      }
    }

    if (!recordingStarted) {
      console.log('ℹ️ 未找到明顯的錄音按鈕，嘗試其他方式...')

      // 嘗試透過狀態機直接啟動錄音
      const stateMachineResult = await page.evaluate(() => {
        const sm = (window as any).stateMachine
        if (sm && sm.canTransition && sm.transition) {
          try {
            if (sm.canTransition('USER_START_RECORDING')) {
              const result = sm.transition('USER_START_RECORDING')
              return { success: true, result }
            }
          } catch (error) {
            return { success: false, error: error instanceof Error ? error.message : String(error) }
          }
        }
        return { success: false, reason: 'StateMachine not available' }
      })

      console.log('狀態機錄音嘗試:', stateMachineResult)
    }

    // 步驟 3: 等待並檢查錄音狀態
    await page.waitForTimeout(2000)

    // 步驟 4: 檢查是否有逐字稿區域
    const transcriptArea = page.locator('.transcript, [data-testid="transcript"], .transcription').first()

    if (await transcriptArea.count() > 0) {
      console.log('✅ 找到逐字稿區域')
      await expect(transcriptArea).toBeVisible()
    } else {
      console.log('ℹ️ 未找到明顯的逐字稿區域')
    }

    // 步驟 5: 模擬逐字稿數據（如果有相關 API）
    const mockTranscriptResult = await page.evaluate(() => {
      // 嘗試模擬逐字稿數據
      const mockTranscript = {
        id: 'test-' + Date.now(),
        text: '這是一個測試逐字稿',
        timestamp: new Date().toISOString(),
        confidence: 0.95
      }

      // 如果有 TranscriptManager，嘗試添加測試數據
      const tm = (window as any).transcriptManager
      if (tm && tm.addTranscript) {
        try {
          tm.addTranscript(mockTranscript)
          return { success: true, transcript: mockTranscript }
        } catch (error) {
          return { success: false, error: error instanceof Error ? error.message : String(error) }
        }
      }

      return { success: false, reason: 'TranscriptManager not available' }
    })

    console.log('模擬逐字稿結果:', mockTranscriptResult)

    // 步驟 6: 檢查最終狀態
    const finalState = await page.evaluate(() => {
      return {
        featureFlags: (window as any).featureFlags?.getAll(),
        stateMachine: (window as any).stateMachine?.getCurrentState?.(),
        transcriptManager: !!(window as any).transcriptManager
      }
    })

    console.log('最終狀態:', finalState)

    // 驗證測試結果
    expect(finalState.featureFlags).toBeDefined()
    console.log('🎉 完整錄音流程模擬完成')
  })

  test('應該能夠測試功能開關切換', async ({ page }) => {
    console.log('🔄 測試功能開關切換...')

    // 測試關閉狀態
    await page.evaluate(() => {
      if ((window as any).featureFlags) {
        (window as any).featureFlags.disableAll()
      }
    })

    await page.reload()
    await page.waitForLoadState('networkidle')

    let flagsOff = await page.evaluate(() => {
      return (window as any).featureFlags?.getAll()
    })

    console.log('功能開關關閉狀態:', flagsOff)

    // 測試開啟狀態
    await page.evaluate(() => {
      if ((window as any).featureFlags) {
        (window as any).featureFlags.enableAll()
      }
    })

    await page.reload()
    await page.waitForLoadState('networkidle')

    let flagsOn = await page.evaluate(() => {
      return (window as any).featureFlags?.getAll()
    })

    console.log('功能開關開啟狀態:', flagsOn)

    // 驗證切換成功
    expect(flagsOff?.useNewStateManagement).toBe(false)
    expect(flagsOn?.useNewStateManagement).toBe(true)

    console.log('✅ 功能開關切換測試完成')
  })
})

test.describe('回歸測試', () => {
  test('應該確保現有功能不受影響', async ({ page }) => {
    console.log('🔍 執行回歸測試...')

    // 使用預設設置（新功能關閉）
    await page.evaluate(() => {
      if ((window as any).featureFlags) {
        (window as any).featureFlags.reset()
      }
    })

    await page.reload()
    await page.waitForLoadState('networkidle')
    await page.waitForSelector('body', { timeout: 5000 });
    const hasBody = (await page.locator('body').count()) > 0;
    expect(hasBody).toBe(true);

    const basicFunctions = await page.evaluate(() => {
      return {
        hasTitle: !!document.title,
        hasFeatureFlags: !!(window as any).featureFlags,
        canUseLocalStorage: !!window.localStorage,
        canUseWebSocket: !!window.WebSocket
      };
    });

    console.log('基本功能檢查:', basicFunctions)

    // 驗證基本功能
    expect(basicFunctions.hasTitle).toBe(true)
    expect(basicFunctions.hasFeatureFlags).toBe(true)
    expect(basicFunctions.canUseLocalStorage).toBe(true)
    expect(basicFunctions.canUseWebSocket).toBe(true)

    console.log('✅ 回歸測試通過')
  })
})


# END FILE CONTENTS


# File: frontend/lib/services/transcript-service-adapted.ts

"use client"

import { BaseService } from './base-service'
import { ITranscriptService, TranscriptMessage } from './interfaces'
import { getTranscriptManager, type ITranscriptManager } from '../transcript-manager-adapter'

/**
 * 逐字稿服務資訊介面
 */
interface TranscriptServiceInfo {
    serviceName: string
    isInitialized: boolean
    isRunning: boolean
    connectedSessions: string[]
    activeListeners: Record<string, number>
    totalConnections: number
    transcriptManagerConnections: number
    implementationType: 'refactored' | 'legacy'
}

/**
 * TranscriptService - 適配器版本
 *
 * 使用 TranscriptManager 適配器，根據功能旗標自動選擇實現：
 * - 新的重構實現（transcript-manager-new.ts）
 * - 舊的實現（transcript-manager.ts）
 */
export class TranscriptServiceAdapted extends BaseService implements ITranscriptService {
    protected readonly serviceName = 'TranscriptServiceAdapted'

    private connectedSessions: Set<string> = new Set()
    private sessionListeners: Map<string, Set<(message: TranscriptMessage) => void>> = new Map()
    private transcriptManager: ITranscriptManager | null = null

    /**
     * 取得 TranscriptManager 實例（根據功能旗標動態選擇）
     */
    private async getManager(): Promise<ITranscriptManager> {
        if (!this.transcriptManager) {
            this.transcriptManager = await getTranscriptManager()
            this.logInfo(`已載入 TranscriptManager (${this.getCurrentImplementationType()})`)
        }
        return this.transcriptManager
    }

    /**
 * 取得當前實現類型
 */
    private getCurrentImplementationType(): 'refactored' | 'legacy' {
        try {
            const { getCurrentImplementation } = require('../transcript-manager-adapter')
            return getCurrentImplementation()
        } catch (error) {
            console.warn('⚠️ [TranscriptServiceAdapted] 無法取得實現類型，預設為 legacy')
            return 'legacy'
        }
    }

    /**
     * 初始化服務
     */
    async initialize(): Promise<void> {
        this.logInfo('初始化逐字稿服務 (適配器版本)')

        // 預先載入 TranscriptManager 實例
        await this.getManager()
        this.logSuccess(`TranscriptManager 已載入 (${this.getCurrentImplementationType()})`)
    }

    /**
     * 清理服務資源
     */
    async cleanup(): Promise<void> {
        this.logInfo('清理逐字稿服務資源')

        // 斷開所有連接
        const sessionIds = Array.from(this.connectedSessions)
        for (const sessionId of sessionIds) {
            await this.disconnect(sessionId)
        }

        this.connectedSessions.clear()
        this.sessionListeners.clear()
        this.transcriptManager = null // 重置實例
    }

    /**
     * 連接逐字稿服務
     */
    async connect(sessionId: string): Promise<void> {
        if (!this.isRunning) {
            throw new Error('TranscriptService 尚未啟動，請先調用 start()')
        }

        try {
            this.logInfo(`連接逐字稿服務: ${sessionId}`)

            // 使用適配器獲取 TranscriptManager 並建立連接
            const manager = await this.getManager()
            await manager.connect(sessionId)

            // 記錄連接狀態
            this.connectedSessions.add(sessionId)

            this.logSuccess(`逐字稿服務連接成功: ${sessionId} (${this.getCurrentImplementationType()})`)
        } catch (error) {
            this.handleError(`逐字稿服務連接失敗: ${sessionId}`, error)
            throw error
        }
    }

    /**
     * 斷開逐字稿服務
     */
    async disconnect(sessionId?: string): Promise<void> {
        try {
            const manager = await this.getManager()

            if (sessionId) {
                this.logInfo(`斷開逐字稿服務: ${sessionId}`)

                // 移除所有監聽器（僅適用於舊實現）
                const listeners = this.sessionListeners.get(sessionId)
                if (listeners && (manager as any).removeListener) {
                    listeners.forEach(callback => {
                        (manager as any).removeListener(sessionId, callback)
                    })
                    this.sessionListeners.delete(sessionId)
                }

                // 斷開連接
                await manager.disconnect(sessionId)
                this.connectedSessions.delete(sessionId)

                this.logSuccess(`逐字稿服務斷開成功: ${sessionId}`)
            } else {
                // 斷開所有連接
                this.logInfo('斷開所有逐字稿服務連接')
                await manager.disconnectAll()
                this.connectedSessions.clear()
                this.sessionListeners.clear()
            }
        } catch (error) {
            this.handleError(`斷開逐字稿服務失敗: ${sessionId || 'all'}`, error)
            throw error
        }
    }

    /**
     * 添加逐字稿監聽器
     */
    addTranscriptListener(sessionId: string, callback: (message: TranscriptMessage) => void): void {
        if (!this.isRunning) {
            throw new Error('TranscriptService 尚未啟動，請先調用 start()')
        }

        this.logInfo(`添加逐字稿監聽器: ${sessionId}`)

        // 記錄監聽器
        if (!this.sessionListeners.has(sessionId)) {
            this.sessionListeners.set(sessionId, new Set())
        }
        this.sessionListeners.get(sessionId)!.add(callback)

        // 為兼容性，嘗試添加監聽器（舊實現）
        this.getManager().then(manager => {
            if ((manager as any).addListener && typeof (manager as any).addListener === 'function') {
                try {
                    (manager as any).addListener(sessionId, callback)
                    this.logInfo(`已添加監聽器 (legacy API): ${sessionId}`)
                } catch (error) {
                    this.logWarning('舊實現 addListener 調用失敗:', error)
                }
            } else {
                // 新實現使用事件驅動，不需要手動添加監聽器
                this.logInfo('新實現使用事件驅動方式，無需手動添加監聽器')
            }
        }).catch(error => {
            this.logWarning('添加監聽器時發生錯誤:', error)
        })
    }

    /**
     * 移除逐字稿監聽器
     */
    removeTranscriptListener(sessionId: string, callback: (message: TranscriptMessage) => void): void {
        this.logInfo(`移除逐字稿監聽器: ${sessionId}`)

        // 從記錄中移除
        const listeners = this.sessionListeners.get(sessionId)
        if (listeners) {
            listeners.delete(callback)
            if (listeners.size === 0) {
                this.sessionListeners.delete(sessionId)
            }
        }

        // 只有舊實現才支援 removeListener 方法
        this.getManager().then(manager => {
            if ((manager as any).removeListener) {
                (manager as any).removeListener(sessionId, callback)
            }
        })
    }

    /**
     * 檢查連接狀態
     */
    isConnected(sessionId: string): boolean {
        if (!this.transcriptManager) return false
        return this.transcriptManager.isConnected(sessionId)
    }

    /**
     * 清除逐字稿
     */
    clearTranscripts(sessionId: string): void {
        this.logInfo(`清除逐字稿: ${sessionId}`)
        // TranscriptManager 不儲存逐字稿數據，這個方法主要用於觸發狀態清除
        // 實際的清除邏輯應該在狀態管理層實現
    }

    /**
     * 取得服務狀態資訊
     */
    getServiceInfo(): TranscriptServiceInfo {
        return {
            serviceName: this.serviceName,
            isInitialized: this.isInitialized,
            isRunning: this.isRunning,
            connectedSessions: Array.from(this.connectedSessions),
            activeListeners: Object.fromEntries(
                Array.from(this.sessionListeners.entries()).map(([sessionId, listeners]) => [
                    sessionId,
                    listeners.size
                ])
            ),
            totalConnections: this.connectedSessions.size,
            transcriptManagerConnections: this.transcriptManager?.getConnectionCount() || 0,
            implementationType: this.getCurrentImplementationType()
        }
    }

    /**
     * 強制重新載入 TranscriptManager（用於功能旗標變更後）
     */
    async reloadManager(): Promise<void> {
        this.logInfo('重新載入 TranscriptManager')

        // 先斷開所有連接
        await this.cleanup()

        // 重新初始化
        await this.initialize()

        this.logSuccess(`TranscriptManager 已重新載入 (${this.getCurrentImplementationType()})`)
    }
}


# END FILE CONTENTS


# File: frontend/lib/typed-emitter.ts

/* ============================================================
 * 輕量型別安全 EventEmitter（無 Node polyfill）
 * ============================================================
 */
export type Listener<T> = (payload: T) => void

export class TypedEmitter<Events extends Record<string, any>> {
  private listeners: {
    [K in keyof Events]?: Set<Listener<Events[K]>>
  } = {}

  on<K extends keyof Events>(event: K, listener: Listener<Events[K]>): this {
    (this.listeners[event] ??= new Set()).add(listener)
    return this
  }

  off<K extends keyof Events>(event: K, listener: Listener<Events[K]>): this {
    this.listeners[event]?.delete(listener)
    return this
  }

  emit<K extends keyof Events>(event: K, payload: Events[K]): boolean {
    this.listeners[event]?.forEach((l) => l(payload))
    return !!this.listeners[event]?.size
  }

  removeAllListeners<K extends keyof Events>(event?: K): this {
    if (event) this.listeners[event]?.clear()
    else Object.values(this.listeners).forEach((s) => s?.clear())
    return this
  }
}

# END FILE CONTENTS


# File: .dockerignore

frontend/
.git/
node_modules/
__pycache__/
*.log
*.md
.venv
.serena
.cursor
.vscode


# END FILE CONTENTS


# File: app/core/container.py

"""
一個簡單的依賴注入容器
"""
from typing import Dict, Any, Type, Callable

class Container:
    def __init__(self):
        self._providers: Dict[Type, Callable[[], Any]] = {}

    def register(self, type_hint: Type, provider: Callable[[], Any]):
        """註冊一個服務提供者"""
        self._providers[type_hint] = provider

    def resolve(self, type_hint: Type) -> Any:
        """解析一個服務實例"""
        provider = self._providers.get(type_hint)
        if not provider:
            raise Exception(f"No provider registered for {type_hint}")
        return provider()

# 全域容器實例
container = Container()


# END FILE CONTENTS


# File: frontend/components/ui/collapsible.tsx

"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }


# END FILE CONTENTS


# File: frontend/types/state-transitions.ts

import { AppState, SessionStatus, SessionType } from "./app-state"

// 狀態轉換觸發器類型
export type StateTransitionTrigger =
  | "USER_START_RECORDING"          // 用戶開始錄音
  | "USER_STOP_RECORDING"           // 用戶停止錄音
  | "FIRST_TRANSCRIPT_RECEIVED"     // 收到第一個逐字稿
  | "SESSION_CREATED"               // Session 建立完成
  | "SESSION_UPGRADED"              // Session 升級為錄音模式
  | "PROCESSING_STARTED"            // 開始處理剩餘逐字稿
  | "PROCESSING_COMPLETED"          // 處理完成
  | "ERROR_OCCURRED"                // 發生錯誤
  | "USER_NEW_NOTE"                 // 用戶開新筆記
  | "TRANSCRIPT_COMPLETED"          // 轉錄完全完成

// 狀態轉換條件
export interface StateTransitionCondition {
  currentState: AppState
  targetState: AppState
  trigger: StateTransitionTrigger

  // 額外條件檢查
  sessionExists?: boolean
  sessionStatus?: SessionStatus
  sessionType?: SessionType
  isRecording?: boolean
  hasTranscripts?: boolean

  // 自定義驗證函數
  customValidator?: (context: StateTransitionContext) => boolean
}

// 狀態轉換上下文
export interface StateTransitionContext {
  currentState: AppState
  isRecording: boolean
  transcriptCount: number
  session: {
    id: string
    status: SessionStatus
    type: SessionType
  } | null
  error: string | null
  pendingSessionTitle?: string  // 待建立會話的標題
}

// 狀態轉換結果
export interface StateTransitionResult {
  success: boolean
  newState: AppState
  error?: string
  sideEffects?: StateTransitionSideEffect[]
}

// 副作用類型
export type StateTransitionSideEffect =
  | { type: "CREATE_SESSION"; sessionType: SessionType; title?: string }
  | { type: "UPGRADE_SESSION" }
  | { type: "FINISH_SESSION" }
  | { type: "START_RECORDING" }
  | { type: "STOP_RECORDING" }
  | { type: "CONNECT_WEBSOCKET" }
  | { type: "DISCONNECT_WEBSOCKET" }
  | { type: "CLEAR_TRANSCRIPTS" }
  | { type: "SAVE_DRAFT" }
  | { type: "SHOW_ERROR"; message: string }

// 狀態轉換規則定義
export const STATE_TRANSITION_RULES: StateTransitionCondition[] = [
  // 從 default 狀態開始錄音
  {
    currentState: "default",
    targetState: "recording_waiting",
    trigger: "USER_START_RECORDING",
    customValidator: (context) => {
      // 確保沒有其他活躍的錄音 session
      return !context.session || context.session.status === "completed" || context.session.status === "error"
    }
  },

  // 從 recording_waiting 重新開始錄音（處理重試情況）
  {
    currentState: "recording_waiting",
    targetState: "recording_waiting",
    trigger: "USER_START_RECORDING",
    customValidator: (context) => {
      // 允許在沒有 session 或 session 狀態異常時重新開始
      return !context.session || context.session.status === "completed" || context.session.status === "error"
    }
  },

  // Session 建立完成後保持在 default 狀態
  {
    currentState: "default",
    targetState: "default",
    trigger: "SESSION_CREATED",
    sessionExists: true,
    sessionStatus: "draft"
  },

  // 修復：從 recording_waiting 狀態處理 SESSION_CREATED，保持在 recording_waiting 等待 WebSocket 連接
  {
    currentState: "recording_waiting",
    targetState: "recording_waiting",
    trigger: "SESSION_CREATED",
    sessionExists: true,
    sessionStatus: "active",
    sessionType: "recording"
  },

  // 從 recording_waiting 收到第一個逐字稿轉為 recording_active
  {
    currentState: "recording_waiting",
    targetState: "recording_active",
    trigger: "FIRST_TRANSCRIPT_RECEIVED",
    sessionExists: true,
    sessionStatus: "active",
    sessionType: "recording",
    isRecording: true,
    hasTranscripts: true
  },

  // 從 recording_waiting 或 recording_active 停止錄音轉為 processing
  {
    currentState: "recording_waiting",
    targetState: "processing",
    trigger: "USER_STOP_RECORDING",
    sessionExists: true,
    sessionType: "recording"
  },
  {
    currentState: "recording_active",
    targetState: "processing",
    trigger: "USER_STOP_RECORDING",
    sessionExists: true,
    sessionType: "recording"
  },

  // 從 processing 完成轉錄轉為 finished
  {
    currentState: "processing",
    targetState: "finished",
    trigger: "PROCESSING_COMPLETED",
    sessionExists: true,
    sessionStatus: "completed"
  },

  // 修復：從任何狀態發生錯誤回到 default
  {
    currentState: "recording_waiting",
    targetState: "default",
    trigger: "ERROR_OCCURRED"
  },
  {
    currentState: "recording_active",
    targetState: "default",
    trigger: "ERROR_OCCURRED"
  },
  {
    currentState: "processing",
    targetState: "default",
    trigger: "ERROR_OCCURRED"
  },

  // 從 finished 或任何狀態開新筆記回到 default
  {
    currentState: "finished",
    targetState: "default",
    trigger: "USER_NEW_NOTE"
  },
  {
    currentState: "recording_waiting",
    targetState: "default",
    trigger: "USER_NEW_NOTE"
  },
  {
    currentState: "recording_active",
    targetState: "default",
    trigger: "USER_NEW_NOTE"
  }
]

// 狀態轉換副作用映射
export const STATE_TRANSITION_SIDE_EFFECTS: Record<string, StateTransitionSideEffect[]> = {
  // default -> recording_waiting: 建立會話、開始錄音並連接 WebSocket
  "default->recording_waiting->USER_START_RECORDING": [
    { type: "CREATE_SESSION", sessionType: "recording" },
    { type: "START_RECORDING" },
    { type: "CONNECT_WEBSOCKET" }
  ],

  // recording_waiting -> recording_waiting: 重新開始錄音（重試情況）
  "recording_waiting->recording_waiting->USER_START_RECORDING": [
    { type: "CREATE_SESSION", sessionType: "recording" },
    { type: "START_RECORDING" },
    { type: "CONNECT_WEBSOCKET" }
  ],

  // recording_waiting/recording_active -> processing: 停止錄音
  "recording_waiting->processing->USER_STOP_RECORDING": [
    { type: "STOP_RECORDING" }
  ],
  "recording_active->processing->USER_STOP_RECORDING": [
    { type: "STOP_RECORDING" }
  ],

  // processing -> finished: 完成 session
  "processing->finished->PROCESSING_COMPLETED": [
    { type: "FINISH_SESSION" }
  ],

  // 任何狀態 -> default (新筆記): 清理狀態
  "finished->default->USER_NEW_NOTE": [
    { type: "CLEAR_TRANSCRIPTS" },
    { type: "SAVE_DRAFT" }
  ],
  "recording_waiting->default->USER_NEW_NOTE": [
    { type: "STOP_RECORDING" },
    { type: "DISCONNECT_WEBSOCKET" },
    { type: "CLEAR_TRANSCRIPTS" }
  ],
  "recording_active->default->USER_NEW_NOTE": [
    { type: "STOP_RECORDING" },
    { type: "DISCONNECT_WEBSOCKET" },
    { type: "CLEAR_TRANSCRIPTS" }
  ],

  // 錯誤處理
  "recording_waiting->default->ERROR_OCCURRED": [
    { type: "STOP_RECORDING" },
    { type: "DISCONNECT_WEBSOCKET" },
    { type: "SHOW_ERROR", message: "錄音過程中發生錯誤" }
  ],
  "recording_active->default->ERROR_OCCURRED": [
    { type: "STOP_RECORDING" },
    { type: "DISCONNECT_WEBSOCKET" },
    { type: "SHOW_ERROR", message: "錄音過程中發生錯誤" }
  ],
  "processing->default->ERROR_OCCURRED": [
    { type: "SHOW_ERROR", message: "處理轉錄時發生錯誤" }
  ]
}


# END FILE CONTENTS


# File: frontend/components/theme-provider.tsx

'use client'

import * as React from 'react'
import {
  ThemeProvider as NextThemesProvider,
  type ThemeProviderProps,
} from 'next-themes'

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}


# END FILE CONTENTS


# File: frontend/components/ui/textarea.tsx

import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef<
  HTMLTextAreaElement,
  React.ComponentProps<"textarea">
>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = "Textarea"

export { Textarea }


# END FILE CONTENTS


# File: docs/export-spec.md

# 匯出功能 API 規格（Export API Spec）

## 1. API 路徑

- `GET /api/export/{sid}?type=zip`
  - 下載指定 session 的筆記與逐字稿，打包為 zip 檔案

## 2. 請求參數

- `sid` (path)：Session UUID
- `type` (query)：檔案格式，目前僅支援 `zip`，預留 `csv`、`pdf` 擴充

## 3. 回應格式

- 成功：
  - HTTP 200
  - Content-Type: `application/zip`
  - Content-Disposition: `attachment; filename="{sid}.zip"`
  - ZIP 內容：
    - `note.md`：Markdown 筆記內容
    - `transcript.txt`：逐字稿（如有）
    - （未來可擴充：音檔等）
- 失敗：
  - 400：type 不支援
  - 404：session 或 note 不存在
  - 409：session 尚未完成

## 4. 流程說明

1. 前端呼叫 `/api/export/{sid}?type=zip`
2. 後端檢查 session 狀態與資料存在性
3. 產生 zip 並以 StreamingResponse 回傳
4. 前端收到 zip，觸發下載

## 5. 未來擴充建議

- 支援大檔案時，後端可改用 zipstream-ng 流式壓縮
- type 可擴充 csv、pdf 等格式
- zip 內容可加入音檔、圖片等
- 建議所有依賴寫入 pyproject.toml 


# END FILE CONTENTS


# File: frontend/hooks/use-session-adapter.ts

"use client"

import { useSession as useSessionLegacy } from './use-session'
import { useSessionNew } from './use-session-new'
import { isFeatureEnabled } from '../lib/feature-flags'
import { SessionResponse } from '../lib/api'

// 統一的 UseSession 介面
interface UseSessionReturn {
    currentSession: SessionResponse | null
    isLoading: boolean
    error: string | null
    createNoteSession: (title: string, content?: string) => Promise<SessionResponse | null>
    createRecordingSession: (title: string, content?: string) => Promise<SessionResponse | null>
    upgradeToRecording: () => Promise<SessionResponse | null>
    finishSession: () => Promise<void>
    deleteSession: () => Promise<void>
    clearSession: () => void
    checkActiveSession: () => Promise<SessionResponse | null>
}

/**
 * useSession 適配器 Hook
 * 根據功能開關決定使用新舊版本的 useSession
 * 確保 API 完全相容，現有組件無需修改
 */
export function useSession(): UseSessionReturn {
    const useNewSessionHook = isFeatureEnabled('useNewSessionHook')
    const useNewStateManagement = isFeatureEnabled('useNewStateManagement')

    console.log('🔄 [useSessionAdapter] 功能開關狀態:', {
        useNewSessionHook,
        useNewStateManagement,
        willUseNewVersion: useNewSessionHook || useNewStateManagement
    })

    // 如果啟用新 Session Hook 或新狀態管理，使用新版本
    if (useNewSessionHook || useNewStateManagement) {
        console.log('🔄 [useSessionAdapter] 使用新版本 useSessionNew')
        return useSessionNew()
    }

    // 否則使用舊版本
    console.log('🔄 [useSessionAdapter] 使用舊版本 useSession')
    return useSessionLegacy()
}

// 導出舊版本供直接使用（用於測試或特殊情況）
export { useSession as useSessionLegacy } from './use-session'
export { useSessionNew } from './use-session-new'


# END FILE CONTENTS


# File: frontend/components/ui/alert.tsx

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }


# END FILE CONTENTS


# File: frontend/components/ui/switch.tsx

"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }


# END FILE CONTENTS


# File: frontend/components/recording-active-state.tsx

"use client"

import { useEffect, useRef, useState, useCallback } from "react"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Button } from "@/components/ui/button"
import { Square, Clock } from "lucide-react"
import type { TranscriptEntry } from "../types/app-state"

interface RecordingActiveStateProps {
    transcriptEntries: TranscriptEntry[]
    recordingTime: number
    onStopRecording: () => void
}

// 格式化錄音時間為 HH:MM:SS 格式
function formatRecordingTime(seconds: number): string {
    const hours = Math.floor(seconds / 3600)
    const minutes = Math.floor((seconds % 3600) / 60)
    const secs = seconds % 60

    if (hours > 0) {
        return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`
    }
    return `${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`
}

export function RecordingActiveState({ transcriptEntries, recordingTime, onStopRecording }: RecordingActiveStateProps) {
    const scrollAreaRef = useRef<HTMLDivElement>(null)
    const [isAutoScrollLocked, setIsAutoScrollLocked] = useState(true)
    const [userScrollTimeout, setUserScrollTimeout] = useState<NodeJS.Timeout | null>(null)

    // 自動捲動到底部
    const autoScroll = useCallback(() => {
        if (isAutoScrollLocked && scrollAreaRef.current) {
            const scrollContainer = scrollAreaRef.current.querySelector('[data-radix-scroll-area-viewport]')
            if (scrollContainer) {
                scrollContainer.scrollTop = scrollContainer.scrollHeight
            }
        }
    }, [isAutoScrollLocked])

    // 檢測使用者捲動行為
    const unlockOnScroll = useCallback(
        (event: Event) => {
            const target = event.target as HTMLElement
            if (target) {
                const { scrollTop, scrollHeight, clientHeight } = target
                const isAtBottom = Math.abs(scrollHeight - clientHeight - scrollTop) < 10

                if (!isAtBottom && isAutoScrollLocked) {
                    setIsAutoScrollLocked(false)
                } else if (isAtBottom && !isAutoScrollLocked) {
                    setIsAutoScrollLocked(true)
                }

                if (userScrollTimeout) clearTimeout(userScrollTimeout)

                const timeout = setTimeout(() => {
                    if (!isAutoScrollLocked) setIsAutoScrollLocked(true)
                }, 3000)

                setUserScrollTimeout(timeout)
            }
        },
        [isAutoScrollLocked, userScrollTimeout]
    )

    // 手動切換自動捲動鎖定狀態（保持功能但不顯示按鈕）
    const toggleAutoScrollLock = useCallback(() => setIsAutoScrollLocked(prev => !prev), [])

    // 禁用合併段落邏輯 - 用戶要求一句話一個時間戳
    const mergeSegments = useCallback((entries: TranscriptEntry[]): TranscriptEntry[] => {
        // 直接返回原始條目，不進行任何合併
        return entries
    }, [])

    // 自動捲動
    useEffect(() => {
        autoScroll()
    }, [transcriptEntries, autoScroll])

    // 監聽捲動
    useEffect(() => {
        const scrollContainer = scrollAreaRef.current?.querySelector('[data-radix-scroll-area-viewport]')
        if (scrollContainer) {
            scrollContainer.addEventListener("scroll", unlockOnScroll)
            return () => scrollContainer.removeEventListener("scroll", unlockOnScroll)
        }
    }, [unlockOnScroll])

    // 清理計時器
    useEffect(() => {
        return () => {
            if (userScrollTimeout) {
                clearTimeout(userScrollTimeout)
            }
        }
    }, [userScrollTimeout])

    const mergedEntries = mergeSegments(transcriptEntries)

    return (
        <div className="h-full flex flex-col">
            <ScrollArea className="flex-1" ref={scrollAreaRef}>
                <div className="p-6 space-y-4">
                    {mergedEntries.map((entry, index) => (
                        <div key={index} className="flex gap-4 text-sm">
                            <span className="text-muted-foreground font-mono text-xs mt-1 min-w-[40px] flex-shrink-0">
                                {entry.time}
                            </span>
                            <span className="text-foreground leading-relaxed flex-1">{entry.text}</span>
                        </div>
                    ))}
                </div>
            </ScrollArea>

            <div className="p-4 border-t border-border flex justify-between items-center">
                <div className="flex items-center gap-2 text-muted-foreground">
                    <Clock className="w-4 h-4" />
                    <span className="font-mono text-sm">
                        {formatRecordingTime(recordingTime)}
                    </span>
                </div>

                <Button onClick={onStopRecording} variant="destructive" size="sm" className="flex items-center gap-2">
                    <Square className="w-4 h-4" />
                    Stop
                </Button>
            </div>
        </div>
    )
}


# END FILE CONTENTS


# File: app/services/__init__.py



# END FILE CONTENTS


# File: frontend/types/websocket-messages.ts

/* ============================================================
 * 型別安全：所有 WS 訊息的 Discriminated Union
 * ============================================================
 */

/** 共用欄位（可視需求增刪） */
interface BaseMessage {
    /** 來源伺服器時間（毫秒） */
    timestamp: number
}

/** 逐字稿片段 */
export interface TranscriptSegmentMessage extends BaseMessage {
    type: 'transcript_segment'
    text: string
    start_time: number
    end_time: number
    confidence: number
}

/** 連線建立成功 */
export interface ConnectionEstablishedMessage extends BaseMessage {
    type: 'connection_established'
    message: string
}

/** 整段逐字稿完成 */
export interface TranscriptCompleteMessage extends BaseMessage {
    type: 'transcript_complete'
    message: string
}

/** 心跳回覆 */
export interface HeartbeatAckMessage extends BaseMessage {
    type: 'heartbeat_ack'
}

/** Pong 回覆 */
export interface PongMessage extends BaseMessage {
    type: 'pong'
}

/** 一般錯誤 */
export interface ErrorMessage extends BaseMessage {
    type: 'error'
    error_type: string
    error_message: string
    details?: unknown
}

/** 轉錄服務錯誤 */
export interface TranscriptionErrorMessage extends BaseMessage {
    type: 'transcription_error'
    error_type: string
    error_message: string
}

/** 後端狀態切換（無 type 欄位，另拆） */
export interface PhaseMessage {
    phase: 'waiting' | 'active'
}

/** → 最終 Union */
export type WSMessage =
    | TranscriptSegmentMessage
    | ConnectionEstablishedMessage
    | TranscriptCompleteMessage
    | HeartbeatAckMessage
    | PongMessage
    | ErrorMessage
    | TranscriptionErrorMessage
    | PhaseMessage


# END FILE CONTENTS


# File: app/api/sessions.py

"""
StudyScriber Session 管理 API 端點

使用 Supabase Client 實作會話建立、完成和升級功能
"""

from uuid import UUID
from typing import Dict, Any
from datetime import datetime
from fastapi import APIRouter, Depends, HTTPException, status
from supabase import Client
from app.core.config import get_settings

from app.db.database import get_supabase_client
from app.schemas.session import (
    SessionCreateRequest, SessionOut, SessionUpgradeRequest,
    SessionFinishRequest, SessionStatusResponse, SessionStatus, SessionType, LanguageCode,
    SessionProviderUpdateRequest
)

# 建立路由器
router = APIRouter(prefix="/api", tags=["會話管理"])


@router.post("/session", response_model=SessionOut, status_code=status.HTTP_201_CREATED)
async def create_session(
    request: SessionCreateRequest,
    supabase: Client = Depends(get_supabase_client)
) -> SessionOut:
    """
    建立新會話 (B-001)

    - 支援兩種模式：純筆記 (note_only) 或錄音模式 (recording)
    - 確保同時只有一個活躍會話
    - 自動建立對應的空白筆記記錄
    - 支援精確的錄音開始時間戳
    """
    try:
        # 檢查是否有其他活躍會話
        active_session_response = supabase.table("sessions").select("id").eq("status", "active").limit(1).execute()
        if active_session_response.data:
            raise HTTPException(
                status_code=status.HTTP_409_CONFLICT,
                detail="已有一個活躍的會話，無法建立新會話。"
            )

        session_data = {
            "title": request.title,
            "type": request.type.value,
            "language": request.language.value,
            "status": SessionStatus.ACTIVE.value,
            "stt_provider": request.stt_provider or get_settings().STT_PROVIDER_DEFAULT
        }

        # 如果有提供 start_ts，轉換為 PostgreSQL 時間戳格式
        if request.start_ts is not None:
            started_at = datetime.fromtimestamp(request.start_ts / 1000).isoformat()
            session_data["started_at"] = started_at
            print(f"🕐 [SessionAPI] 設定錄音開始時間: {started_at} (原始時間戳: {request.start_ts})")

        # 若為錄音模式且仍未設定 started_at，則預設為目前時間 (UTC)
        if request.type == SessionType.RECORDING and "started_at" not in session_data:
            session_data["started_at"] = datetime.utcnow().isoformat()

        response = supabase.table("sessions").insert(session_data, returning="representation").execute()

        if not response.data:
            raise HTTPException(status_code=500, detail="無法建立會話")

        new_session = response.data[0]
        session_id = new_session['id']

        note_data = {"session_id": session_id, "content": request.content or ""}
        supabase.table("notes").insert(note_data).execute()

        return SessionOut.model_validate(new_session)

    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail={"error": "internal_error", "message": f"建立會話時發生錯誤: {str(e)}"}
        )


@router.patch("/session/{session_id}/finish", response_model=SessionStatusResponse)
async def finish_session(
    session_id: UUID,
    supabase: Client = Depends(get_supabase_client)
) -> SessionStatusResponse:
    """
    完成會話 (B-002)

    - 將活躍會話標記為完成
    - 設定完成時間
    - 釋放會話鎖定，允許建立新會話
    """
    try:
        # 檢查會話是否存在且活躍
        session_response = supabase.table("sessions").select("*").eq("id", str(session_id)).eq("status", "active").limit(1).execute()
        if not session_response.data:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="找不到活躍的會話或會話已被完成。"
            )

        # 準備更新數據
        update_data = {
            "status": SessionStatus.COMPLETED.value,
            "completed_at": datetime.utcnow().isoformat()
        }

        # 更新會話狀態
        response = supabase.table("sessions").update(update_data).eq("id", str(session_id)).execute()

        if not response.data:
            raise HTTPException(status_code=500, detail="無法更新會話狀態")

        updated_session = response.data[0]

        return SessionStatusResponse(
            success=True,
            message=f"會話 '{updated_session.get('title') or session_id}' 已成功完成",
            session=SessionOut.model_validate(updated_session)
        )

    except HTTPException:
        # 重新拋出已處理的 HTTP 異常
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail={"error": "internal_error", "message": f"完成會話時發生錯誤: {str(e)}"}
        )


@router.delete("/session/{session_id}", response_model=SessionStatusResponse)
async def delete_session(
    session_id: UUID,
    supabase: Client = Depends(get_supabase_client)
) -> SessionStatusResponse:
    """
    刪除會話及其所有相關數據 (B-020)

    - 刪除指定的會話及其所有關聯數據（筆記、音檔、逐字稿等）
    - 由於資料庫有 CASCADE DELETE 約束，會自動清理所有相關表格的數據
    - 此操作不可逆，請謹慎使用
    """
    try:
        # 檢查會話是否存在
        session_response = supabase.table("sessions").select("*").eq("id", str(session_id)).limit(1).execute()
        if not session_response.data:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="找不到指定的會話。"
            )

        session_data = session_response.data[0]
        session_title = session_data.get('title', '未命名筆記')

        # 刪除會話（會自動級聯刪除所有相關數據）
        delete_response = supabase.table("sessions").delete().eq("id", str(session_id)).execute()

        if not delete_response.data:
            raise HTTPException(status_code=500, detail="無法刪除會話")

        return SessionStatusResponse(
            success=True,
            message=f"會話 '{session_title}' ({session_id}) 及其所有相關數據已成功刪除",
            session=None
        )

    except HTTPException:
        # 重新拋出已處理的 HTTP 異常
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail={"error": "internal_error", "message": f"刪除會話時發生錯誤: {str(e)}"}
        )


@router.patch("/session/{session_id}/upgrade", response_model=SessionOut)
async def upgrade_session_to_recording(
    session_id: UUID,
    request: SessionUpgradeRequest,
    supabase: Client = Depends(get_supabase_client)
) -> SessionOut:
    """
    升級會話至錄音模式 (B-015)

    - 將純筆記會話升級為錄音模式
    - 只有 active 狀態的 note_only 會話可以升級
    """
    try:
        # 檢查會話是否可以升級
        session_response = supabase.table("sessions").select("*").eq("id", str(session_id)).eq("status", "active").eq("type", "note_only").limit(1).execute()
        if not session_response.data:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="只有活躍的純筆記會話才能升級。"
            )

        # 準備更新數據
        update_data = {
            "type": SessionType.RECORDING.value,
            "language": request.language.value,
            "started_at": datetime.utcnow().isoformat(),
        }

        # 執行升級
        response = supabase.table("sessions").update(update_data).eq("id", str(session_id)).execute()

        if not response.data:
            raise HTTPException(status_code=500, detail="無法升級會話")

        updated_session = response.data[0]

        return SessionOut.model_validate(updated_session)

    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail={"error": "internal_error", "message": f"升級會話時發生錯誤: {str(e)}"}
        )


@router.get("/session/active", response_model=SessionOut, status_code=status.HTTP_200_OK)
async def get_active_session(
    supabase: Client = Depends(get_supabase_client)
) -> SessionOut:
    """
    取得目前活躍的會話

    - 用於前端檢查是否有進行中的會話
    - 如果沒有活躍會話則返回 404
    """
    response = supabase.table("sessions").select("*").eq("status", "active").limit(1).execute()
    if not response.data:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail={"error": "no_active_session", "message": "目前沒有活躍的會話"}
        )

    return SessionOut.model_validate(response.data[0])


@router.get("/session/{session_id}", response_model=SessionOut)
async def get_session(
    session_id: UUID,
    supabase: Client = Depends(get_supabase_client)
) -> SessionOut:
    """
    取得指定會話的詳細資訊

    - 用於檢視會話狀態和資訊
    """
    response = supabase.table("sessions").select("*").eq("id", str(session_id)).limit(1).execute()

    if not response.data:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail={"error": "session_not_found", "message": "找不到指定的會話"}
        )

    return SessionOut.model_validate(response.data[0])


@router.patch("/session/{session_id}/provider", response_model=SessionOut)
async def update_session_provider(
    session_id: UUID,
    request: SessionProviderUpdateRequest,
    supabase: Client = Depends(get_supabase_client)
) -> SessionOut:
    """
    更新會話 STT Provider (B-016)

    - 僅在尚未上傳音檔時允許切換
    - 支援 whisper 和 gemini 之間的切換
    - 驗證 Provider 的有效性
    """
    try:
        # 檢查會話是否存在且為活躍狀態
        session_response = supabase.table("sessions").select("*").eq("id", str(session_id)).eq("status", "active").limit(1).execute()
        if not session_response.data:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="找不到活躍的會話。"
            )

        # 檢查是否已有音檔上傳（透過 audio_files 表）
        audio_files_response = supabase.table("audio_files").select("id").eq("session_id", str(session_id)).limit(1).execute()
        if audio_files_response.data:
            raise HTTPException(
                status_code=status.HTTP_409_CONFLICT,
                detail="已開始錄音，無法更改 STT Provider。"
            )

        # 驗證 Provider 有效性
        valid_providers = ["whisper", "gemini"]
        if request.stt_provider not in valid_providers:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail=f"無效的 STT Provider。支援的選項：{', '.join(valid_providers)}"
            )

        # 更新 Provider
        update_data = {
            "stt_provider": request.stt_provider,
            "updated_at": datetime.utcnow().isoformat()
        }

        response = supabase.table("sessions").update(update_data).eq("id", str(session_id)).execute()

        if not response.data:
            raise HTTPException(status_code=500, detail="無法更新 STT Provider")

        updated_session = response.data[0]

        logger.info(f"✅ [SessionAPI] 成功更新 session {session_id} STT Provider: {request.stt_provider}")
        return SessionOut.model_validate(updated_session)

    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail={"error": "internal_error", "message": f"更新 STT Provider 時發生錯誤: {str(e)}"}
        )


# END FILE CONTENTS


# File: frontend/tailwind.config.ts

import type { Config } from "tailwindcss";

const config: Config = {
    darkMode: ["class"],
    content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
    "*.{js,ts,jsx,tsx,mdx}"
  ],
  theme: {
  	extend: {
  		colors: {
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			},
  			sidebar: {
  				DEFAULT: 'hsl(var(--sidebar-background))',
  				foreground: 'hsl(var(--sidebar-foreground))',
  				primary: 'hsl(var(--sidebar-primary))',
  				'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
  				accent: 'hsl(var(--sidebar-accent))',
  				'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
  				border: 'hsl(var(--sidebar-border))',
  				ring: 'hsl(var(--sidebar-ring))'
  			}
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		},
  		keyframes: {
  			'accordion-down': {
  				from: {
  					height: '0'
  				},
  				to: {
  					height: 'var(--radix-accordion-content-height)'
  				}
  			},
  			'accordion-up': {
  				from: {
  					height: 'var(--radix-accordion-content-height)'
  				},
  				to: {
  					height: '0'
  				}
  			}
  		},
  		animation: {
  			'accordion-down': 'accordion-down 0.2s ease-out',
  			'accordion-up': 'accordion-up 0.2s ease-out'
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")],
};
export default config;


# END FILE CONTENTS


# File: frontend/lib/services/service-registry.ts

"use client"

import { serviceContainer } from './service-container'
import { SessionService } from './session-service'
import { RecordingService } from './recording-service'
import { SimpleRecordingService } from './simple-recording-service'
import { TranscriptService } from './transcript-service'
import { RecordingFlowService } from './recording-flow-service'
import { SERVICE_KEYS } from './interfaces'
import { isFeatureEnabled } from '../feature-flags'

/**
 * 服務註冊管理
 *
 * 統一管理所有服務的註冊和初始化
 */
export class ServiceRegistry {
    private static isRegistered = false

    /**
     * 註冊所有服務
     *
     * 使用 Singleton 模式確保服務只註冊一次
     */
    static async registerServices(): Promise<void> {
        if (ServiceRegistry.isRegistered) {
            console.log('🔄 [ServiceRegistry] 服務已註冊，跳過重複註冊')
            return
        }

        try {
            console.log('🚀 [ServiceRegistry] 開始註冊服務...')

            // 註冊 SessionService
            serviceContainer.registerSingleton(SERVICE_KEYS.SESSION_SERVICE, () => new SessionService())
            console.log('✅ [ServiceRegistry] SessionService 註冊完成')

            // 註冊 RecordingService（根據功能開關選擇）
            if (isFeatureEnabled('useSimpleRecordingService')) {
                serviceContainer.registerSingleton(SERVICE_KEYS.RECORDING_SERVICE, () => new SimpleRecordingService())
                console.log('✅ [ServiceRegistry] SimpleRecordingService 註冊完成 (Phase 2)')
            } else {
                serviceContainer.registerSingleton(SERVICE_KEYS.RECORDING_SERVICE, () => new RecordingService())
                console.log('✅ [ServiceRegistry] RecordingService 註冊完成 (Legacy)')
            }

            // 註冊 TranscriptService
            serviceContainer.registerSingleton(SERVICE_KEYS.TRANSCRIPT_SERVICE, () => new TranscriptService())
            console.log('✅ [ServiceRegistry] TranscriptService 註冊完成')

            // 註冊 RecordingFlowService
            serviceContainer.registerSingleton(SERVICE_KEYS.RECORDING_FLOW_SERVICE, () => new RecordingFlowService())
            console.log('✅ [ServiceRegistry] RecordingFlowService 註冊完成')

            ServiceRegistry.isRegistered = true
            console.log('✅ [ServiceRegistry] 所有服務註冊完成')

        } catch (error) {
            console.error('❌ [ServiceRegistry] 服務註冊失敗:', error)
            throw error
        }
    }

    /**
     * 初始化所有服務
     *
     * 啟動所有已註冊的服務
     */
    static async initializeServices(): Promise<void> {
        try {
            console.log('🚀 [ServiceRegistry] 開始初始化服務...')

            // 確保服務已註冊
            await ServiceRegistry.registerServices()

            // 初始化 SessionService
            const sessionService = serviceContainer.resolve<SessionService>(SERVICE_KEYS.SESSION_SERVICE)
            await sessionService.start()

            // 初始化 RecordingService
            const recordingService = serviceContainer.resolve<RecordingService>(SERVICE_KEYS.RECORDING_SERVICE)
            await recordingService.start()

            // 初始化 TranscriptService
            const transcriptService = serviceContainer.resolve<TranscriptService>(SERVICE_KEYS.TRANSCRIPT_SERVICE)
            await transcriptService.start()

            // 初始化 RecordingFlowService
            const recordingFlowService = serviceContainer.resolve<RecordingFlowService>(SERVICE_KEYS.RECORDING_FLOW_SERVICE)
            await recordingFlowService.start()

            console.log('✅ [ServiceRegistry] 所有服務初始化完成')

        } catch (error) {
            console.error('❌ [ServiceRegistry] 服務初始化失敗:', error)
            throw error
        }
    }

    /**
     * 停止所有服務
     */
    static async stopServices(): Promise<void> {
        try {
            console.log('🛑 [ServiceRegistry] 開始停止服務...')

            if (!ServiceRegistry.isRegistered) {
                console.log('ℹ️ [ServiceRegistry] 服務未註冊，無需停止')
                return
            }

            // 按相反順序停止服務
            const recordingFlowService = serviceContainer.resolve<RecordingFlowService>(SERVICE_KEYS.RECORDING_FLOW_SERVICE)
            await recordingFlowService.stop()

            const transcriptService = serviceContainer.resolve<TranscriptService>(SERVICE_KEYS.TRANSCRIPT_SERVICE)
            await transcriptService.stop()

            const recordingService = serviceContainer.resolve<RecordingService>(SERVICE_KEYS.RECORDING_SERVICE)
            await recordingService.stop()

            const sessionService = serviceContainer.resolve<SessionService>(SERVICE_KEYS.SESSION_SERVICE)
            await sessionService.stop()

            console.log('✅ [ServiceRegistry] 所有服務停止完成')

        } catch (error) {
            console.error('❌ [ServiceRegistry] 服務停止失敗:', error)
            throw error
        }
    }

    /**
     * 取得服務註冊狀態
     */
    static getRegistrationStatus(): {
        isRegistered: boolean
        registeredServices: string[]
    } {
        return {
            isRegistered: ServiceRegistry.isRegistered,
            registeredServices: serviceContainer.getRegisteredServices()
        }
    }
}

// 自動註冊服務（在模組載入時）
ServiceRegistry.registerServices().catch(error => {
    console.error('❌ [ServiceRegistry] 自動註冊失敗:', error)
})


# END FILE CONTENTS


# File: frontend/lib/stream/audio-uploader.ts

"use client"

/**
 * AudioUploader - 音訊上傳 WebSocket 類別
 *
 * 負責建立 /ws/upload_audio/{sessionId} WebSocket 連接
 * 並發送音訊切片到後端進行語音辨識
 */
export class AudioUploader {
    private ws: WebSocket | null = null
    private sessionId: string | null = null
    private sequenceNumber = 0  // 音訊切片序號
    private reconnectAttempts = 0  // 重連嘗試次數
    private maxReconnectAttempts = 5  // 最大重連次數
    private reconnectDelay = 1000  // 重連延遲（毫秒）
    private pendingChunks: Map<number, Blob> = new Map()  // 待重發的音訊切片

    /**
     * 連接音訊上傳 WebSocket
     */
    async connect(sessionId: string): Promise<void> {
        this.sessionId = sessionId
        this.sequenceNumber = 0  // 重置序號
        this.reconnectAttempts = 0  // 重置重連計數
        this.pendingChunks.clear()  // 清空待處理切片

        const wsBaseUrl = process.env.NEXT_PUBLIC_WS_URL || 'ws://localhost:8000'
        const wsUrl = `${wsBaseUrl}/ws/upload_audio/${sessionId}`

        console.log('🔌 [AudioUploader] 正在連接:', wsUrl)

        this.ws = new WebSocket(wsUrl)

        return new Promise((resolve, reject) => {
            if (!this.ws) return reject(new Error('WebSocket 創建失敗'))

            this.ws.onopen = () => {
                console.log('✅ [AudioUploader] WebSocket 連接成功:', sessionId)
                resolve()
            }

            this.ws.onerror = (error) => {
                console.error('❌ [AudioUploader] WebSocket 錯誤:', error)
                reject(new Error('AudioUploader WebSocket 連接失敗'))
            }

            this.ws.onclose = (event) => {
                console.log('🔌 [AudioUploader] WebSocket 連接已關閉:', {
                    code: event.code,
                    reason: event.reason,
                    sessionId: this.sessionId,
                    wasClean: event.wasClean
                })

                // 如果不是手動關閉，嘗試重連
                if (!event.wasClean && this.sessionId && this.reconnectAttempts < this.maxReconnectAttempts) {
                    this.attemptReconnect()
                }
            }

            this.ws.onmessage = (event) => {
                try {
                    const message = JSON.parse(event.data)
                    this.handleServerMessage(message)
                } catch (error) {
                    console.log('📥 [AudioUploader] 收到非 JSON 消息:', event.data)
                }
            }
        })
    }

    /**
     * 處理伺服器消息
     */
    private handleServerMessage(message: any): void {
        console.log('📥 [AudioUploader] 收到伺服器消息:', message)

        switch (message.type) {
            case 'ack':
                console.log(`✅ [AudioUploader] 音訊切片 #${message.chunk_sequence} 確認收到`)
                break
            case 'upload_error':
                console.error(`❌ [AudioUploader] 上傳錯誤 #${message.chunk_sequence}:`, message.error)
                break
            case 'connection_established':
                console.log('✅ [AudioUploader] 連接已建立')
                break
            default:
                console.log('📥 [AudioUploader] 未知消息類型:', message.type)
        }
    }

    /**
     * 發送音訊切片（修正的 4-byte sequence + Blob 格式）
     * 合併序號和音檔數據為一個二進制消息，使用小端序與後端匹配
     */
    async send(blob: Blob, sequence?: number): Promise<void> {
        if (this.ws?.readyState !== WebSocket.OPEN) {
            console.warn('⚠️ [AudioUploader] WebSocket 未連接，無法發送音訊數據', {
                readyState: this.ws?.readyState,
                expectedState: WebSocket.OPEN,
                sessionId: this.sessionId,
                sequence: sequence ?? this.sequenceNumber
            })
            return
        }

        // 使用傳入的序號或內部序號
        const currentSequence = sequence ?? this.sequenceNumber

        console.log(`📤 [AudioUploader] 準備發送音訊切片 #${currentSequence}`, {
            blobSize: blob.size,
            mimeType: blob.type,
            sessionId: this.sessionId,
            timestamp: new Date().toISOString()
        })

        try {
            // 修正：將序號和音檔數據合併為一個二進制消息
            // 4-byte sequence (小端序) + Blob 數據
            const sequenceBuffer = new ArrayBuffer(4)
            const sequenceView = new DataView(sequenceBuffer)
            sequenceView.setUint32(0, currentSequence, true) // true = 小端序，與後端匹配

            // 將序號和音檔數據合併
            const blobArrayBuffer = await blob.arrayBuffer()
            const combinedBuffer = new ArrayBuffer(4 + blobArrayBuffer.byteLength)
            const combinedView = new Uint8Array(combinedBuffer)

            // 複製序號到合併緩衝區
            combinedView.set(new Uint8Array(sequenceBuffer), 0)
            // 複製音檔數據到合併緩衝區
            combinedView.set(new Uint8Array(blobArrayBuffer), 4)

            // 一次性發送合併的二進制數據
            this.ws.send(combinedBuffer)

            console.log(`✅ [AudioUploader] 音訊切片 #${currentSequence} 發送成功: ${blob.size} bytes (總計: ${combinedBuffer.byteLength} bytes)`)

            // DEV 模式診斷計數
            if (process.env.NODE_ENV === 'development') {
                this.updateDevDiagnostics(currentSequence, blob.size)
            }

            // 只有使用內部序號時才遞增
            if (sequence === undefined) {
                this.sequenceNumber++
            }

        } catch (error) {
            console.error(`❌ [AudioUploader] 發送音訊切片 #${currentSequence} 失敗:`, error)
            this.handleSendError(currentSequence, error)
        }
    }

    /**
     * 處理發送錯誤的重試機制
     */
    private handleSendError(sequence: number, error: any): void {
        console.error(`❌ [AudioUploader] 序號 #${sequence} 發送錯誤:`, error)
        // 可以在這裡實作重試邏輯
        // 例如：將失敗的序號加入重試佇列
    }

    /**
     * 嘗試重新連接 WebSocket
     */
    private async attemptReconnect(): Promise<void> {
        this.reconnectAttempts++

        console.log(`🔄 [AudioUploader] 嘗試重連 (#${this.reconnectAttempts}/${this.maxReconnectAttempts})`)

        // 漸進式延遲重連
        const delay = this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1)

        setTimeout(async () => {
            try {
                if (this.sessionId) {
                    await this.connect(this.sessionId)
                    console.log('✅ [AudioUploader] 重連成功')
                    this.reconnectAttempts = 0 // 重置重連計數

                    // 重新發送待處理的音訊切片
                    this.resendPendingChunks()
                }
            } catch (error) {
                console.error(`❌ [AudioUploader] 重連失敗 (#${this.reconnectAttempts}):`, error)

                if (this.reconnectAttempts < this.maxReconnectAttempts) {
                    this.attemptReconnect()
                } else {
                    console.error('❌ [AudioUploader] 已達重連最大次數，停止嘗試')
                }
            }
        }, delay)
    }

    /**
     * 重新發送待處理的音訊切片
     */
    private resendPendingChunks(): void {
        if (this.pendingChunks.size === 0) return

        console.log(`🔄 [AudioUploader] 重新發送 ${this.pendingChunks.size} 個待處理切片`)

        for (const [sequence, blob] of this.pendingChunks.entries()) {
            this.send(blob, sequence)
        }

        // 清空待處理切片
        this.pendingChunks.clear()
    }

    /**
     * 更新開發模式診斷信息
     */
    private updateDevDiagnostics(sequence: number, blobSize: number): void {
        if (!(window as any).__rec) {
            (window as any).__rec = {
                chunksSent: 0,
                totalBytes: 0,
                isRecording: false,
                sessionId: null,
                lastSequence: -1,
                errors: 0
            }
        }

        const rec = (window as any).__rec
        rec.chunksSent++
        rec.totalBytes += blobSize
        rec.sessionId = this.sessionId
        rec.isRecording = true
        rec.lastSequence = sequence

        console.log(`🔍 [AudioUploader] DEV 診斷:`, {
            chunksSent: rec.chunksSent,
            totalBytes: rec.totalBytes,
            lastSequence: sequence,
            sessionId: this.sessionId
        })
    }

    /**
     * 重置序號（重新開始錄音時使用）
     */
    resetSequence(): void {
        this.sequenceNumber = 0
        console.log('🔄 [AudioUploader] 序號已重置')
    }

    /**
     * 關閉 WebSocket 連接
     */
    close(): void {
        if (this.ws) {
            this.ws.close()
            this.ws = null
        }

        this.sessionId = null
        this.sequenceNumber = 0
        this.reconnectAttempts = 0
        this.pendingChunks.clear()

        // 更新 DEV 模式診斷狀態
        if (process.env.NODE_ENV === 'development' && (window as any).__rec) {
            (window as any).__rec.isRecording = false
        }

        console.log('🔌 [AudioUploader] WebSocket 已關閉')
    }

    /**
     * 檢查連接狀態
     */
    get isConnected(): boolean {
        return this.ws?.readyState === WebSocket.OPEN
    }

    /**
     * 獲取當前會話 ID
     */
    get currentSessionId(): string | null {
        return this.sessionId
    }

    /**
     * 獲取當前序號
     */
    get currentSequence(): number {
        return this.sequenceNumber
    }

    /**
     * 獲取 WebSocket 狀態
     */
    get connectionState(): string {
        if (!this.ws) return 'NOT_CREATED'

        switch (this.ws.readyState) {
            case WebSocket.CONNECTING: return 'CONNECTING'
            case WebSocket.OPEN: return 'OPEN'
            case WebSocket.CLOSING: return 'CLOSING'
            case WebSocket.CLOSED: return 'CLOSED'
            default: return 'UNKNOWN'
        }
    }
}

/**
 * 默認的音訊上傳器實例
 * 可在整個應用中共用
 */
export const audioUploader = new AudioUploader()


# END FILE CONTENTS


# File: frontend/lib/__tests__/network-restorer.test.ts

import { describe, expect, it, vi } from 'vitest'
import { emit } from '@/utils/event-bus'
import * as uploader from '@/lib/rest-audio-uploader'
import * as tm from '@/lib/transcript-manager'

describe('network restorer', () => {
    it('should retry and reconnect', async () => {
        const spyRetry = vi.spyOn(uploader.restAudioUploader, 'retryFailedSegments').mockResolvedValue({ uploaded: 1, remaining: 0 })
        const spyConnect = vi.spyOn(tm.transcriptManager, 'connect').mockReturnValue(Promise.resolve() as any)
        const spyIsConnected = vi.spyOn(tm.transcriptManager, 'isConnected').mockReturnValue(false)

        emit('network:restored')
        await vi.runAllTicks()

        expect(spyRetry).toHaveBeenCalled()
        expect(spyConnect).toHaveBeenCalled()
    })
})


# END FILE CONTENTS


# File: app/core/__init__.py



# END FILE CONTENTS


# File: .cursor/rules/python.mdc

---
description: Python best practices and patterns for modern software development with Flask and SQLite
globs: **/*.py, src/**/*.py, tests/**/*.py
alwaysApply: false
---
<!-- Source: https://github.com/sanjeed5/awesome-cursor-rules-mdc/tree/main/rules-mdc -->

# Python Best Practices

## Project Structure
- Use src-layout with `src/your_package_name/`
- Place tests in `tests/` directory parallel to `src/`
- Keep configuration in `config/` or as environment variables
- Store requirements in `requirements.txt` or `pyproject.toml`
- Place static files in `static/` directory
- Use `templates/` for Jinja2 templates

## Code Style
- Follow Black code formatting
- Use isort for import sorting
- Follow PEP 8 naming conventions:
  - snake_case for functions and variables
  - PascalCase for classes
  - UPPER_CASE for constants
- Maximum line length of 88 characters (Black default)
- Use absolute imports over relative imports

## Type Hints
- Use type hints for all function parameters and returns
- Import types from `typing` module
- Use `Optional[Type]` instead of `Type | None`
- Use `TypeVar` for generic types
- Define custom types in `types.py`
- Use `Protocol` for duck typing

## Flask Structure
- Use Flask factory pattern
- Organize routes using Blueprints
- Use Flask-SQLAlchemy for database
- Implement proper error handlers
- Use Flask-Login for authentication
- Structure views with proper separation of concerns

## Database
- Use SQLAlchemy ORM
- Implement database migrations with Alembic
- Use proper connection pooling
- Define models in separate modules
- Implement proper relationships
- Use proper indexing strategies

## Authentication
- Use Flask-Login for session management
- Implement Google OAuth using Flask-OAuth
- Hash passwords with bcrypt
- Use proper session security
- Implement CSRF protection
- Use proper role-based access control

## API Design
- Use Flask-RESTful for REST APIs
- Implement proper request validation
- Use proper HTTP status codes
- Handle errors consistently
- Use proper response formats
- Implement proper rate limiting

## Testing
- Use pytest for testing
- Write tests for all routes
- Use pytest-cov for coverage
- Implement proper fixtures
- Use proper mocking with pytest-mock
- Test all error scenarios

## Security
- Use HTTPS in production
- Implement proper CORS
- Sanitize all user inputs
- Use proper session configuration
- Implement proper logging
- Follow OWASP guidelines

## Performance
- Use proper caching with Flask-Caching
- Implement database query optimization
- Use proper connection pooling
- Implement proper pagination
- Use background tasks for heavy operations
- Monitor application performance

## Error Handling
- Create custom exception classes
- Use proper try-except blocks
- Implement proper logging
- Return proper error responses
- Handle edge cases properly
- Use proper error messages

## Documentation
- Use Google-style docstrings
- Document all public APIs
- Keep README.md updated
- Use proper inline comments
- Generate API documentation
- Document environment setup

## Development Workflow
- Always use virtual environments (uv)
- Implement pre-commit hooks
- Use proper Git workflow
- Follow semantic versioning
- Use proper CI/CD practices
- Implement proper logging

## Dependencies
- Pin dependency versions
- Use requirements.txt for production
- Separate dev dependencies
- Use proper package versions
- Regularly update dependencies
- Check for security vulnerabilities


# END FILE CONTENTS


# File: app/lib/prom_helpers.py

from prometheus_client import REGISTRY
from typing import Any

def metric_exists(name: str) -> bool:
    """判斷 default CollectorRegistry 裡是否已有同名 metric"""
    return any(m.name == name for m in REGISTRY.collect())

def safe_counter(name: str, documentation: str, labelnames: list[str] | None = None) -> Any:
    from prometheus_client import Counter
    if name in REGISTRY._names_to_collectors:
        return REGISTRY._names_to_collectors[name]
    return Counter(name, documentation, labelnames or [])

def safe_gauge(name: str, documentation: str, labelnames: list[str] | None = None) -> Any:
    from prometheus_client import Gauge
    if name in REGISTRY._names_to_collectors:
        return REGISTRY._names_to_collectors[name]
    return Gauge(name, documentation, labelnames or [])

def safe_summary(name: str, documentation: str, labelnames: list[str] | None = None) -> Any:
    from prometheus_client import Summary
    if name in REGISTRY._names_to_collectors:
        return REGISTRY._names_to_collectors[name]
    return Summary(name, documentation, labelnames or [])


# END FILE CONTENTS


# File: frontend/components/ui/slider.tsx

"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }


# END FILE CONTENTS


# File: frontend/lib/state-machine.ts

"use client"

import { AppState } from "../types/app-state"
import {
    StateTransitionTrigger,
    StateTransitionCondition,
    StateTransitionContext,
    StateTransitionResult,
    StateTransitionSideEffect,
    STATE_TRANSITION_RULES,
    STATE_TRANSITION_SIDE_EFFECTS
} from "../types/state-transitions"

// 狀態機類別
export class StateMachine {
    private currentState: AppState = "default"
    private context: StateTransitionContext
    private listeners: Set<(newState: AppState, sideEffects: StateTransitionSideEffect[]) => void> = new Set()

    constructor(initialContext: StateTransitionContext) {
        this.context = initialContext
        this.currentState = initialContext.currentState
        this.exposeToWindow()
    }

    // 更新上下文
    updateContext(newContext: Partial<StateTransitionContext>): void {
        this.context = { ...this.context, ...newContext }
        console.log('🔄 [StateMachine] 上下文已更新:', this.context)
    }

    // 嘗試狀態轉換
    transition(trigger: StateTransitionTrigger): StateTransitionResult {
        const transitionKey = `${this.currentState}->${trigger}`
        console.log(`🔄 [StateMachine] 嘗試狀態轉換: ${transitionKey}`)

        // 尋找符合的轉換規則
        const matchingRules = this.findMatchingRules(trigger)

        if (matchingRules.length === 0) {
            const error = `沒有找到符合的轉換規則: ${transitionKey}`
            console.warn(`⚠️ [StateMachine] ${error}`)
            return {
                success: false,
                newState: this.currentState,
                error
            }
        }

        // 驗證轉換條件
        const validRule = this.validateTransitionRules(matchingRules)

        if (!validRule) {
            const error = `轉換條件不符合: ${transitionKey}`
            console.warn(`⚠️ [StateMachine] ${error}`)
            return {
                success: false,
                newState: this.currentState,
                error
            }
        }

        // 執行狀態轉換
        const result = this.executeTransition(validRule, trigger)

        if (result.success) {
            this.currentState = result.newState
            console.log(`✅ [StateMachine] 狀態轉換成功: ${this.context.currentState} -> ${result.newState}`)

            // 更新上下文中的當前狀態
            this.context.currentState = result.newState

            // 通知監聽器
            this.notifyListeners(result.newState, result.sideEffects || [])
        }

        return result
    }

    // 尋找匹配的轉換規則
    private findMatchingRules(trigger: StateTransitionTrigger): StateTransitionCondition[] {
        return STATE_TRANSITION_RULES.filter(rule =>
            rule.currentState === this.currentState && rule.trigger === trigger
        )
    }

    // 驗證轉換規則
    private validateTransitionRules(rules: StateTransitionCondition[]): StateTransitionCondition | null {
        for (const rule of rules) {
            if (this.isRuleValid(rule)) {
                return rule
            }
        }
        return null
    }

    // 檢查單一規則是否有效
    private isRuleValid(rule: StateTransitionCondition): boolean {
        const context = this.context

        // 檢查 session 存在性
        if (rule.sessionExists !== undefined) {
            const hasSession = context.session !== null
            if (rule.sessionExists !== hasSession) {
                console.log(`🔍 [StateMachine] Session 存在性檢查失敗: 期望 ${rule.sessionExists}, 實際 ${hasSession}`)
                return false
            }
        }

        // 檢查 session 狀態
        if (rule.sessionStatus !== undefined) {
            if (!context.session || context.session.status !== rule.sessionStatus) {
                console.log(`🔍 [StateMachine] Session 狀態檢查失敗: 期望 ${rule.sessionStatus}, 實際 ${context.session?.status}`)
                return false
            }
        }

        // 檢查 session 類型
        if (rule.sessionType !== undefined) {
            if (!context.session || context.session.type !== rule.sessionType) {
                console.log(`🔍 [StateMachine] Session 類型檢查失敗: 期望 ${rule.sessionType}, 實際 ${context.session?.type}`)
                return false
            }
        }

        // 檢查錄音狀態
        if (rule.isRecording !== undefined) {
            if (context.isRecording !== rule.isRecording) {
                console.log(`🔍 [StateMachine] 錄音狀態檢查失敗: 期望 ${rule.isRecording}, 實際 ${context.isRecording}`)
                return false
            }
        }

        // 檢查逐字稿存在性
        if (rule.hasTranscripts !== undefined) {
            const hasTranscripts = context.transcriptCount > 0
            if (rule.hasTranscripts !== hasTranscripts) {
                console.log(`🔍 [StateMachine] 逐字稿存在性檢查失敗: 期望 ${rule.hasTranscripts}, 實際 ${hasTranscripts}`)
                return false
            }
        }

        // 執行自定義驗證
        if (rule.customValidator) {
            const isValid = rule.customValidator(context)
            if (!isValid) {
                console.log(`🔍 [StateMachine] 自定義驗證失敗`)
                return false
            }
        }

        console.log(`✅ [StateMachine] 規則驗證通過: ${rule.currentState} -> ${rule.targetState}`)
        return true
    }

    // 執行狀態轉換
    private executeTransition(rule: StateTransitionCondition, trigger: StateTransitionTrigger): StateTransitionResult {
        const sideEffectKey = `${rule.currentState}->${rule.targetState}->${trigger}`
        const sideEffects = STATE_TRANSITION_SIDE_EFFECTS[sideEffectKey] || []

        console.log(`🔄 [StateMachine] 執行轉換: ${sideEffectKey}`)
        console.log(`🔄 [StateMachine] 副作用:`, sideEffects)

        return {
            success: true,
            newState: rule.targetState,
            sideEffects
        }
    }

    // 添加狀態變更監聽器
    addListener(listener: (newState: AppState, sideEffects: StateTransitionSideEffect[]) => void): void {
        this.listeners.add(listener)
    }

    // 移除狀態變更監聽器
    removeListener(listener: (newState: AppState, sideEffects: StateTransitionSideEffect[]) => void): void {
        this.listeners.delete(listener)
    }

    // 通知所有監聽器
    private notifyListeners(newState: AppState, sideEffects: StateTransitionSideEffect[]): void {
        this.listeners.forEach(listener => {
            try {
                listener(newState, sideEffects)
            } catch (error) {
                console.error('🔄 [StateMachine] 監聽器執行失敗:', error)
            }
        })
    }

    // 取得當前狀態
    getCurrentState(): AppState {
        return this.currentState
    }

    // 取得當前上下文
    getContext(): StateTransitionContext {
        return { ...this.context }
    }

    // 檢查是否可以執行特定轉換
    canTransition(trigger: StateTransitionTrigger): boolean {
        const matchingRules = this.findMatchingRules(trigger)
        return matchingRules.some(rule => this.isRuleValid(rule))
    }

    // 取得可用的轉換
    getAvailableTransitions(): StateTransitionTrigger[] {
        const availableTransitions: StateTransitionTrigger[] = []

        // 檢查所有可能的觸發器
        const allTriggers: StateTransitionTrigger[] = [
            "USER_START_RECORDING",
            "USER_STOP_RECORDING",
            "FIRST_TRANSCRIPT_RECEIVED",
            "SESSION_CREATED",
            "SESSION_UPGRADED",
            "PROCESSING_STARTED",
            "PROCESSING_COMPLETED",
            "ERROR_OCCURRED",
            "USER_NEW_NOTE",
            "TRANSCRIPT_COMPLETED"
        ]

        for (const trigger of allTriggers) {
            if (this.canTransition(trigger)) {
                availableTransitions.push(trigger)
            }
        }

        return availableTransitions
    }

    // 重置狀態機
    reset(newContext?: StateTransitionContext): void {
        this.currentState = "default"
        if (newContext) {
            this.context = newContext
        } else {
            this.context = {
                currentState: "default",
                isRecording: false,
                transcriptCount: 0,
                session: null,
                error: null
            }
        }
        console.log('🔄 [StateMachine] 狀態機已重置')
    }

    // 暴露到 window 供調試使用
    private exposeToWindow(): void {
        if (typeof window !== 'undefined') {
            (window as any).stateMachine = {
                getCurrentState: () => this.getCurrentState(),
                getContext: () => this.getContext(),
                canTransition: (trigger: StateTransitionTrigger) => this.canTransition(trigger),
                getAvailableTransitions: () => this.getAvailableTransitions(),
                transition: (trigger: StateTransitionTrigger) => this.transition(trigger),
                reset: () => this.reset(),

                // 便利方法
                startRecording: () => this.transition("USER_START_RECORDING"),
                stopRecording: () => this.transition("USER_STOP_RECORDING"),
                newNote: () => this.transition("USER_NEW_NOTE"),
                firstTranscript: () => this.transition("FIRST_TRANSCRIPT_RECEIVED"),
                processingComplete: () => this.transition("PROCESSING_COMPLETED"),
                error: () => this.transition("ERROR_OCCURRED"),
            }

            console.log('🔄 [StateMachine] 調試介面已暴露到 window.stateMachine')
            console.log('   使用方法: window.stateMachine.startRecording()')
            console.log('   查看狀態: window.stateMachine.getCurrentState()')
            console.log('   可用轉換: window.stateMachine.getAvailableTransitions()')
        }
    }
}

// 副作用處理器介面
export interface SideEffectHandler {
    handleSideEffect(effect: StateTransitionSideEffect): Promise<void> | void
}

// 狀態機管理器
export class StateMachineManager {
    private stateMachine: StateMachine
    private sideEffectHandlers: Map<string, SideEffectHandler> = new Map()

    constructor(initialContext: StateTransitionContext) {
        this.stateMachine = new StateMachine(initialContext)

        // 監聽狀態變更並處理副作用
        this.stateMachine.addListener((newState, sideEffects) => {
            this.handleSideEffects(sideEffects)
        })
    }

    // 註冊副作用處理器
    registerSideEffectHandler(effectType: string, handler: SideEffectHandler): void {
        this.sideEffectHandlers.set(effectType, handler)
        console.log(`🔄 [StateMachineManager] 副作用處理器已註冊: ${effectType}`)
    }

    // 處理副作用
    private async handleSideEffects(sideEffects: StateTransitionSideEffect[]): Promise<void> {
        for (const effect of sideEffects) {
            const handler = this.sideEffectHandlers.get(effect.type)
            if (handler) {
                try {
                    await handler.handleSideEffect(effect)
                    console.log(`✅ [StateMachineManager] 副作用處理完成: ${effect.type}`)
                } catch (error) {
                    console.error(`❌ [StateMachineManager] 副作用處理失敗: ${effect.type}`, error)
                }
            } else {
                console.warn(`⚠️ [StateMachineManager] 未找到副作用處理器: ${effect.type}`)
            }
        }
    }

    // 取得狀態機實例
    getStateMachine(): StateMachine {
        return this.stateMachine
    }

    // 更新上下文並觸發自動轉換
    updateContextAndTransition(
        newContext: Partial<StateTransitionContext>,
        autoTrigger?: StateTransitionTrigger
    ): StateTransitionResult | null {
        this.stateMachine.updateContext(newContext)

        if (autoTrigger && this.stateMachine.canTransition(autoTrigger)) {
            return this.stateMachine.transition(autoTrigger)
        }

        return null
    }
}

// 便利函數：建立狀態機實例
export function createStateMachine(initialContext: StateTransitionContext): StateMachineManager {
    return new StateMachineManager(initialContext)
}


# END FILE CONTENTS


# File: frontend/components/ui/use-mobile.tsx

import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}


# END FILE CONTENTS


# File: frontend/components/ui/calendar.tsx

"use client"

import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ...props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ...props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }


# END FILE CONTENTS


# File: frontend/public/placeholder-logo.svg

<svg xmlns="http://www.w3.org/2000/svg" width="215" height="48" fill="none"><path fill="#000" d="M57.588 9.6h6L73.828 38h-5.2l-2.36-6.88h-11.36L52.548 38h-5.2l10.24-28.4Zm7.16 17.16-4.16-12.16-4.16 12.16h8.32Zm23.694-2.24c-.186-1.307-.706-2.32-1.56-3.04-.853-.72-1.866-1.08-3.04-1.08-1.68 0-2.986.613-3.92 1.84-.906 1.227-1.36 2.947-1.36 5.16s.454 3.933 1.36 5.16c.934 1.227 2.24 1.84 3.92 1.84 1.254 0 2.307-.373 3.16-1.12.854-.773 1.387-1.867 1.6-3.28l5.12.24c-.186 1.68-.733 3.147-1.64 4.4-.906 1.227-2.08 2.173-3.52 2.84-1.413.667-2.986 1-4.72 1-2.08 0-3.906-.453-5.48-1.36-1.546-.907-2.76-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84 0-2.24.427-4.187 1.28-5.84.88-1.68 2.094-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.68 0 3.227.32 4.64.96 1.414.64 2.56 1.56 3.44 2.76.907 1.2 1.454 2.6 1.64 4.2l-5.12.28Zm11.486-7.72.12 3.4c.534-1.227 1.307-2.173 2.32-2.84 1.04-.693 2.267-1.04 3.68-1.04 1.494 0 2.76.387 3.8 1.16 1.067.747 1.827 1.813 2.28 3.2.507-1.44 1.294-2.52 2.36-3.24 1.094-.747 2.414-1.12 3.96-1.12 1.414 0 2.64.307 3.68.92s1.84 1.52 2.4 2.72c.56 1.2.84 2.667.84 4.4V38h-4.96V25.92c0-1.813-.293-3.187-.88-4.12-.56-.96-1.413-1.44-2.56-1.44-.906 0-1.68.213-2.32.64-.64.427-1.133 1.053-1.48 1.88-.32.827-.48 1.84-.48 3.04V38h-4.56V25.92c0-1.2-.133-2.213-.4-3.04-.24-.827-.626-1.453-1.16-1.88-.506-.427-1.133-.64-1.88-.64-.906 0-1.68.227-2.32.68-.64.427-1.133 1.053-1.48 1.88-.32.827-.48 1.827-.48 3V38h-4.96V16.8h4.48Zm26.723 10.6c0-2.24.427-4.187 1.28-5.84.854-1.68 2.067-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.84 0 3.494.413 4.96 1.24 1.467.827 2.64 2.08 3.52 3.76.88 1.653 1.347 3.693 1.4 6.12v1.32h-15.08c.107 1.813.614 3.227 1.52 4.24.907.987 2.134 1.48 3.68 1.48.987 0 1.88-.253 2.68-.76a4.803 4.803 0 0 0 1.84-2.2l5.08.36c-.64 2.027-1.84 3.64-3.6 4.84-1.733 1.173-3.733 1.76-6 1.76-2.08 0-3.906-.453-5.48-1.36-1.573-.907-2.786-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84Zm15.16-2.04c-.213-1.733-.76-3.013-1.64-3.84-.853-.827-1.893-1.24-3.12-1.24-1.44 0-2.6.453-3.48 1.36-.88.88-1.44 2.12-1.68 3.72h9.92ZM163.139 9.6V38h-5.04V9.6h5.04Zm8.322 7.2.24 5.88-.64-.36c.32-2.053 1.094-3.56 2.32-4.52 1.254-.987 2.787-1.48 4.6-1.48 2.32 0 4.107.733 5.36 2.2 1.254 1.44 1.88 3.387 1.88 5.84V38h-4.96V25.92c0-1.253-.12-2.28-.36-3.08-.24-.8-.64-1.413-1.2-1.84-.533-.427-1.253-.64-2.16-.64-1.44 0-2.573.48-3.4 1.44-.8.933-1.2 2.307-1.2 4.12V38h-4.96V16.8h4.48Zm30.003 7.72c-.186-1.307-.706-2.32-1.56-3.04-.853-.72-1.866-1.08-3.04-1.08-1.68 0-2.986.613-3.92 1.84-.906 1.227-1.36 2.947-1.36 5.16s.454 3.933 1.36 5.16c.934 1.227 2.24 1.84 3.92 1.84 1.254 0 2.307-.373 3.16-1.12.854-.773 1.387-1.867 1.6-3.28l5.12.24c-.186 1.68-.733 3.147-1.64 4.4-.906 1.227-2.08 2.173-3.52 2.84-1.413.667-2.986 1-4.72 1-2.08 0-3.906-.453-5.48-1.36-1.546-.907-2.76-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84 0-2.24.427-4.187 1.28-5.84.88-1.68 2.094-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.68 0 3.227.32 4.64.96 1.414.64 2.56 1.56 3.44 2.76.907 1.2 1.454 2.6 1.64 4.2l-5.12.28Zm11.443 8.16V38h-5.6v-5.32h5.6Z"/><path fill="#171717" fill-rule="evenodd" d="m7.839 40.783 16.03-28.054L20 6 0 40.783h7.839Zm8.214 0H40L27.99 19.894l-4.02 7.032 3.976 6.914H20.02l-3.967 6.943Z" clip-rule="evenodd"/></svg>

# END FILE CONTENTS


# File: app/api/export.py

from fastapi import APIRouter, HTTPException, status
from fastapi.responses import StreamingResponse
from uuid import UUID
import io, zipfile
from app.db.database import get_supabase_client

router = APIRouter(prefix="/api/export", tags=["export"])

def _sec_to_ts(sec: float) -> str:
    h = int(sec // 3600)
    m = int((sec % 3600) // 60)
    s = int(sec % 60)
    return f"[{h:02d}:{m:02d}:{s:02d}]"

@router.get("/{sid}", response_class=StreamingResponse)
async def export_resource(sid: UUID, type: str = "zip"):
    try:
        if type != "zip":
            raise HTTPException(status.HTTP_400_BAD_REQUEST, "unsupported type")

        sb = get_supabase_client()

        # 1. session 必須 completed
        session = (
            sb.table("sessions")
            .select("status")
            .eq("id", str(sid))
            .limit(1)
            .execute()
            .data
        )
        if not session:
            raise HTTPException(status.HTTP_404_NOT_FOUND, "session not found")
        if session[0]["status"] != "completed":
            raise HTTPException(status.HTTP_202_ACCEPTED, "session not finished")

        # 2. 讀 note：欄位名稱可能是 markdown / body / content
        note_row = (
            sb.table("notes")
            .select("content, markdown, body")
            .eq("session_id", str(sid))
            .limit(1)
            .execute()
            .data
        )
        if not note_row:
            raise HTTPException(status.HTTP_404_NOT_FOUND, "note not found")
        note = note_row[0]
        note_md = note.get("content") or note.get("markdown") or note.get("body") or ""

        # 3. 逐字稿：優先用有時間戳的 segments，沒有就退回 full_text
        seg_rows = (
            sb.table("transcript_segments")
            .select("text, start_time")
            .eq("session_id", str(sid))
            .order("chunk_sequence")
            .execute()
            .data
        )

        if seg_rows:
            transcript_txt = "\n".join(
                f"{_sec_to_ts(seg.get('start_time', 0))} {seg.get('text', '').strip()}"
                for seg in seg_rows
            )
        else:
            # fallback 讀 transcripts.full_text
            full = (
                sb.table("transcripts")
                .select("full_text")
                .eq("session_id", str(sid))
                .limit(1)
                .execute()
                .data
            )
            transcript_txt = (full[0]["full_text"] if full else "").strip()

        # 4. 打包 ZIP
        buf = io.BytesIO()
        with zipfile.ZipFile(buf, "w", zipfile.ZIP_DEFLATED) as zf:
            zf.writestr("note.md", note_md.strip())
            zf.writestr("transcript.txt", transcript_txt)
        buf.seek(0)

        headers = {
            "Content-Disposition": f'attachment; filename="{sid}.zip"'
        }
        return StreamingResponse(buf, media_type="application/zip", headers=headers)
    except HTTPException as e:
        # FastAPI HTTPException 直接丟出
        raise e
    except Exception as e:
        import traceback
        print(f"[EXPORT ERROR] {e}")
        print(traceback.format_exc())
        raise HTTPException(status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f"Export failed: {e}")


# END FILE CONTENTS


# File: .cursor/rules/react.mdc

---
description:
globs: *.js,*.jsx,*.ts,*.tsx
alwaysApply: false
---
<!-- Source: https://github.com/sanjeed5/awesome-cursor-rules-mdc/blob/main/rules-mdc/react.mdc -->

# React Best Practices: A Comprehensive Guide

This document outlines the best practices for developing React applications, covering various aspects from code organization to security and testing. Following these guidelines leads to more maintainable, scalable, and performant applications.

## 1. Code Organization and Structure

### 1.1 Directory Structure

A well-defined directory structure is crucial for maintainability. Here's a recommended structure:


src/
  ├── components/
  │   ├── Button/
  │   │   ├── Button.jsx
  │   │   ├── Button.module.css
  │   │   └── Button.test.jsx
  │   ├── Input/
  │   │   ├── Input.jsx
  │   │   ├── Input.module.css
  │   │   └── Input.test.jsx
  │   └── ...
  ├── contexts/
  │   ├── AuthContext.jsx
  │   └── ThemeContext.jsx
  ├── hooks/
  │   ├── useAuth.js
  │   └── useTheme.js
  ├── pages/
  │   ├── Home.jsx
  │   ├── About.jsx
  │   └── ...
  ├── services/
  │   ├── api.js
  │   └── auth.js
  ├── utils/
  │   ├── helpers.js
  │   └── validators.js
  ├── App.jsx
  ├── index.jsx
  └── ...


-   **`components/`**: Reusable UI components.
    -   Each component has its own directory containing the component file, associated styles (using CSS modules), and tests.
-   **`contexts/`**: React context providers.
-   **`hooks/`**: Custom React hooks.
-   **`pages/`**: Top-level components representing different routes or views.
-   **`services/`**: API interaction logic.
-   **`utils/`**: Utility functions.

### 1.2 File Naming Conventions

-   **Components**: Use PascalCase (e.g., `MyComponent.jsx`).
-   **Hooks**: Use camelCase prefixed with `use` (e.g., `useMyHook.js`).
-   **Contexts**: Use PascalCase suffixed with `Context` (e.g., `MyContext.jsx`).
-   **Services/Utils**: Use camelCase (e.g., `apiService.js`, `stringUtils.js`).
-   **CSS Modules**: Use `.module.css` or `.module.scss` (e.g., `Button.module.css`).

### 1.3 Module Organization

-   **Co-location**: Keep related files (component, styles, tests) together in the same directory.
-   **Single Responsibility**: Each module should have a clear and specific purpose.
-   **Avoid Circular Dependencies**: Ensure modules don't depend on each other in a circular manner.

### 1.4 Component Architecture

-   **Atomic Design**: Consider using Atomic Design principles (Atoms, Molecules, Organisms, Templates, Pages) to structure components.
-   **Composition over Inheritance**: Favor component composition to reuse code and functionality.
-   **Presentational and Container Components**: Separate UI rendering (presentational) from state management and logic (container).

### 1.5 Code Splitting Strategies

-   **Route-Based Splitting**: Use `React.lazy` and `Suspense` to load components only when a specific route is accessed.  This is very common and improves initial load time.
-   **Component-Based Splitting**: Split large components into smaller chunks that can be loaded on demand.
-   **Bundle Analyzer**: Use a tool like `webpack-bundle-analyzer` to identify large dependencies and optimize bundle size.

## 2. Common Patterns and Anti-patterns

### 2.1 Design Patterns

-   **Higher-Order Components (HOCs)**: Reusable logic that wraps components (use with caution; prefer hooks).
-   **Render Props**: Sharing code using a prop whose value is a function.
-   **Compound Components**: Components that work together implicitly (e.g., `Tabs`, `Tab`).
-   **Hooks**: Reusable stateful logic that can be shared across functional components.

### 2.2 Recommended Approaches

-   **Form Handling**: Use controlled components with local state or a form library like Formik or React Hook Form.
-   **API Calls**: Use `useEffect` hook to make API calls and manage loading states.
-   **Conditional Rendering**: Use short-circuit evaluation (`&&`) or ternary operators for simple conditions; use separate components for complex scenarios.
-   **List Rendering**: Always provide a unique and stable `key` prop when rendering lists.

### 2.3 Anti-patterns and Code Smells

-   **Direct DOM Manipulation**: Avoid directly manipulating the DOM; let React handle updates.
-   **Mutating State Directly**: Always use `setState` or the state updater function to modify state.
-   **Inline Styles**: Use CSS modules or styled-components for maintainable styles.
-   **Over-Engineering**: Avoid using complex solutions for simple problems.
-   **Prop Drilling**: Passing props through multiple levels of components without them being used.

### 2.4 State Management Best Practices

-   **Local State**: Use `useState` for component-specific state.
-   **Context API**: Use `useContext` for global state accessible to many components, but avoid for very frequently updated data.
-   **Redux/Mobx**: Use these libraries for complex state management in large applications.
-   **Recoil/Zustand**: Lightweight alternatives to Redux, often easier to set up and use.
-   **Immutable Data**: Treat state as immutable to prevent unexpected side effects.

### 2.5 Error Handling Patterns

-   **Error Boundaries**: Wrap components with error boundaries to catch errors during rendering and prevent crashes.
-   **Try-Catch Blocks**: Use try-catch blocks for handling errors in asynchronous operations and event handlers.
-   **Centralized Error Logging**: Implement a centralized error logging service to track errors and improve application stability.

## 3. Performance Considerations

### 3.1 Optimization Techniques

-   **Memoization**: Use `React.memo`, `useMemo`, and `useCallback` to prevent unnecessary re-renders and recalculations.
-   **Virtualization**: Use libraries like `react-window` or `react-virtualized` to efficiently render large lists or tables.
-   **Debouncing/Throttling**: Limit the rate at which functions are executed (e.g., in input fields).
-   **Code Splitting**: Load code on demand using `React.lazy` and `Suspense`.

### 3.2 Memory Management

-   **Avoid Memory Leaks**: Clean up event listeners, timers, and subscriptions in `useEffect`'s cleanup function.
-   **Release Unused Objects**: Avoid holding onto large objects in memory when they are no longer needed.
-   **Garbage Collection**: Understand how JavaScript's garbage collection works and avoid creating unnecessary objects.

### 3.3 Rendering Optimization

-   **Minimize State Updates**: Avoid unnecessary state updates that trigger re-renders.
-   **Batch Updates**: Batch multiple state updates into a single update using `ReactDOM.unstable_batchedUpdates`.
-   **Keys**: Ensure that keys are unique and consistent across renders.

### 3.4 Bundle Size Optimization

-   **Tree Shaking**: Remove unused code during the build process.
-   **Minification**: Reduce the size of JavaScript and CSS files.
-   **Image Optimization**: Compress and optimize images to reduce file size.
-   **Dependency Analysis**: Use tools like `webpack-bundle-analyzer` to identify large dependencies.

### 3.5 Lazy Loading Strategies

-   **Route-Based Lazy Loading**: Load components when a user navigates to a specific route.
-   **Component-Based Lazy Loading**: Load components when they are about to be rendered.
-   **Intersection Observer**: Load components when they become visible in the viewport.

## 4. Security Best Practices

### 4.1 Common Vulnerabilities and Prevention

-   **Cross-Site Scripting (XSS)**: Sanitize user input to prevent malicious code injection.
-   **Cross-Site Request Forgery (CSRF)**: Use anti-CSRF tokens to protect against unauthorized requests.
-   **Denial of Service (DoS)**: Implement rate limiting and request validation to prevent abuse.
-   **Injection Attacks**: Avoid directly embedding user input into database queries or system commands.

### 4.2 Input Validation

-   **Client-Side Validation**: Validate user input in the browser to provide immediate feedback.
-   **Server-Side Validation**: Always validate user input on the server to prevent malicious data.
-   **Sanitize Input**: Sanitize user input to remove potentially harmful characters or code.

### 4.3 Authentication and Authorization

-   **Secure Authentication**: Use secure authentication mechanisms like OAuth 2.0 or JWT.
-   **Role-Based Access Control (RBAC)**: Implement RBAC to control access to resources based on user roles.
-   **Multi-Factor Authentication (MFA)**: Enable MFA to add an extra layer of security.

### 4.4 Data Protection Strategies

-   **Encryption**: Encrypt sensitive data at rest and in transit.
-   **Data Masking**: Mask sensitive data in logs and UI displays.
-   **Regular Backups**: Create regular backups of application data.

### 4.5 Secure API Communication

-   **HTTPS**: Use HTTPS to encrypt communication between the client and the server.
-   **API Keys**: Protect API keys and secrets.
-   **CORS**: Configure Cross-Origin Resource Sharing (CORS) to prevent unauthorized access to APIs.

## 5. Testing Approaches

### 5.1 Unit Testing

-   **Test Components**: Test individual components in isolation.
-   **Testing Library**: Use React Testing Library for UI testing, focusing on user behavior.
-   **Jest**: Use Jest as the test runner.

### 5.2 Integration Testing

-   **Test Component Interactions**: Test how components interact with each other.
-   **Mock API Calls**: Mock API calls to test component behavior in different scenarios.
-   **React Testing Library**: Effective for testing integration points in components.

### 5.3 End-to-End (E2E) Testing

-   **Test Full Application Flows**: Test complete user flows, such as login, registration, and checkout.
-   **Cypress/Playwright**: Use tools like Cypress or Playwright for E2E testing.
-   **Automated Browser Tests**: Automate browser tests to ensure application stability.

### 5.4 Test Organization

-   **Co-locate Tests**: Keep test files close to the components they test (e.g., `Button.test.jsx` in the `Button` directory).
-   **Descriptive Names**: Use descriptive names for test files and test cases.
-   **Test Suites**: Organize tests into logical suites.

### 5.5 Mocking and Stubbing

-   **Mock Modules**: Mock external modules or API calls to isolate components during testing.
-   **Stub Functions**: Stub function implementations to control component behavior.
-   **Jest Mocks**: Utilize Jest's mocking capabilities for effective unit testing.

## 6. Common Pitfalls and Gotchas

### 6.1 Frequent Mistakes

-   **Ignoring Keys in Lists**: Forgetting to provide unique and stable `key` props when rendering lists.
-   **Incorrect State Updates**: Mutating state directly instead of using `setState` or the state updater function.
-   **Missing Dependencies in `useEffect`**: Not including all dependencies in the dependency array of the `useEffect` hook.
-   **Over-Using State**: Storing derived data in state instead of calculating it on demand.

### 6.2 Edge Cases

-   **Asynchronous State Updates**: Handling state updates in asynchronous operations.
-   **Race Conditions**: Preventing race conditions when making multiple API calls.
-   **Handling Errors in Event Handlers**: Properly handling errors in event handlers to prevent crashes.

### 6.3 Version-Specific Issues

-   **React 16 vs. React 17/18**: Understanding differences in lifecycle methods, error handling, and concurrent mode.
-   **Deprecated Features**: Being aware of deprecated features and using recommended alternatives.

### 6.4 Compatibility Concerns

-   **Browser Compatibility**: Ensuring compatibility with different browsers and devices.
-   **Library Compatibility**: Ensuring compatibility between React and other libraries.

### 6.5 Debugging Strategies

-   **React DevTools**: Use React DevTools to inspect component hierarchies, props, and state.
-   **Console Logging**: Use console logging to debug code and track variables.
-   **Breakpoints**: Set breakpoints in the code to step through execution and inspect variables.

## 7. Tooling and Environment

### 7.1 Recommended Development Tools

-   **VS Code**: A popular code editor with excellent React support.
-   **Create React App**: A tool for quickly setting up a new React project.
-   **React DevTools**: A browser extension for inspecting React components.
-   **ESLint**: A linter for enforcing code style and preventing errors.
-   **Prettier**: A code formatter for automatically formatting code.

### 7.2 Build Configuration

-   **Webpack/Vite**: Configure Webpack or Vite to bundle and optimize code.
-   **Babel**: Configure Babel to transpile JavaScript code to older versions.
-   **Environment Variables**: Use environment variables to configure different environments.

### 7.3 Linting and Formatting

-   **ESLint**: Configure ESLint with recommended React rules.
-   **Prettier**: Configure Prettier to automatically format code.
-   **Husky/lint-staged**: Use Husky and lint-staged to run linters and formatters before committing code.

### 7.4 Deployment Best Practices

-   **Static Hosting**: Host static assets on a CDN.
-   **Server-Side Rendering (SSR)**: Use SSR to improve SEO and initial load time.
-   **Continuous Deployment**: Automate the deployment process using CI/CD.

### 7.5 CI/CD Integration

-   **GitHub Actions/GitLab CI**: Use GitHub Actions or GitLab CI to automate testing, linting, and deployment.
-   **Automated Testing**: Run automated tests on every commit or pull request.
-   **Automated Deployment**: Automatically deploy code to production after successful tests.

By following these best practices, React developers can build high-quality, maintainable, and scalable applications that meet the demands of modern web development. Continual education and adaptation to emerging trends in the React ecosystem are crucial for sustained success.


# END FILE CONTENTS


# File: frontend/lib/advanced-audio-recorder.ts

"use client"

import { getAudioChunkIntervalMs } from './config'

/**
 * AdvancedAudioRecorder - 進階分段音訊錄製器
 *
 * Phase 2.5 WebM Header 修復：實作無縫 MediaRecorder 切換策略
 * 解決 MediaRecorder.start(timeslice) 只在第一個段落包含完整 container header 的問題
 *
 * 核心策略：
 * - 可配置時間重新創建 MediaRecorder 實例
 * - 使用預建策略：提前創建下一個 MediaRecorder，避免建立延遲
 * - 無縫角色轉換：stop→start 間隙 ≈ 1-3ms
 * - 確保每個段落都包含完整 WebM EBML header
 * - 支援環境變數配置切片時間
 */

export interface AudioSegment {
    blob: Blob
    timestamp: number
    duration: number
    sequence: number
}

export interface AdvancedAudioRecorderConfig {
    segmentDuration: number // 段落時長（毫秒）
    mimeType: string
    audioBitsPerSecond: number
}

const DEFAULT_CONFIG: AdvancedAudioRecorderConfig = {
    segmentDuration: getAudioChunkIntervalMs(), // 從環境變數讀取切片時長
    mimeType: 'audio/webm;codecs=opus',
    audioBitsPerSecond: 128000, // 128 kbps for configurable chunks
}

export class AdvancedAudioRecorder {
    private stream: MediaStream | null = null
    private config: AdvancedAudioRecorderConfig
    private isRecording: boolean = false
    private sequence: number = 0

    // 雙 MediaRecorder 策略
    private currentRecorder: MediaRecorder | null = null
    private nextRecorder: MediaRecorder | null = null
    private swapTimer: ReturnType<typeof setTimeout> | null = null

    // 事件回調
    private onSegmentCallback?: (segment: AudioSegment) => void
    private onErrorCallback?: (error: Error) => void

    constructor(config: Partial<AdvancedAudioRecorderConfig> = {}) {
        this.config = { ...DEFAULT_CONFIG, ...config }
    }

    /**
     * 初始化錄音器 - 獲取音訊權限
     */
    async initialize(): Promise<void> {
        if (this.stream) {
            return // 已初始化
        }

        try {
            this.stream = await navigator.mediaDevices.getUserMedia({ audio: true })
            console.log('🎤 [AdvancedAudioRecorder] 音訊權限獲取成功')
        } catch (error) {
            const errorMsg = error instanceof Error ? error.message : '獲取音訊權限失敗'
            this.handleError(new Error(errorMsg))
            throw error
        }
    }

    /**
     * 開始錄音 - 使用雙 MediaRecorder 無縫切換策略
     */
    async start(onSegmentAvailable: (segment: AudioSegment) => void): Promise<void> {
        if (this.isRecording) {
            throw new Error('錄製已在進行中')
        }

        if (!this.stream) {
            await this.initialize()
        }

        this.onSegmentCallback = onSegmentAvailable
        this.sequence = 0
        this.isRecording = true

        console.log('🎬 [AdvancedAudioRecorder] 開始進階錄音', {
            segmentDuration: this.config.segmentDuration,
            mimeType: this.config.mimeType,
            audioBitsPerSecond: this.config.audioBitsPerSecond
        })

        // 檢查瀏覽器支援度
        if (!this.checkMediaRecorderSupport()) {
            throw new Error('瀏覽器不支援所需的音頻錄製功能')
        }

        try {
            // 啟動雙 MediaRecorder 策略
            await this.initializeRecorders()
            this.startCurrentRecorder()
            this.scheduleNextSwap()

            console.log('✅ [AdvancedAudioRecorder] 雙 MediaRecorder 策略啟動成功')
        } catch (error) {
            this.isRecording = false
            this.handleError(error instanceof Error ? error : new Error('啟動錄音失敗'))
            throw error
        }
    }

    /**
     * 停止錄音
     */
    stop(): void {
        console.log('⏹️ [AdvancedAudioRecorder] 停止進階錄音')

        this.isRecording = false

        // 清除切換計時器
        if (this.swapTimer) {
            clearTimeout(this.swapTimer)
            this.swapTimer = null
        }

        // 停止當前錄音器
        if (this.currentRecorder && this.currentRecorder.state !== 'inactive') {
            this.currentRecorder.stop()
        }

        // 清理下一個錄音器
        this.cleanupRecorder(this.nextRecorder)
        this.nextRecorder = null
    }

    /**
     * 清理資源
     */
    cleanup(): void {
        this.stop()

        if (this.stream) {
            this.stream.getTracks().forEach(track => track.stop())
            this.stream = null
        }

        this.cleanupRecorder(this.currentRecorder)
        this.cleanupRecorder(this.nextRecorder)
        this.currentRecorder = null
        this.nextRecorder = null
        this.sequence = 0

        console.log('🧹 [AdvancedAudioRecorder] 已清理')
    }

    /**
     * 檢查是否正在錄音
     */
    get recording(): boolean {
        return this.isRecording
    }

    /**
     * 獲取當前序號
     */
    get currentSequence(): number {
        return this.sequence
    }

    /**
     * 重置序號
     */
    resetSequence(): void {
        this.sequence = 0
        console.log('🔄 [AdvancedAudioRecorder] 序號已重置為 0')
    }

    /**
     * 獲取當前配置
     */
    get currentConfig(): AdvancedAudioRecorderConfig {
        return { ...this.config }
    }

    // ============ 私有方法 ============

    /**
     * 檢查 MediaRecorder 支援度
     */
    private checkMediaRecorderSupport(): boolean {
        if (!window.MediaRecorder) {
            this.handleError(new Error('瀏覽器不支援 MediaRecorder API'))
            return false
        }

        if (!MediaRecorder.isTypeSupported(this.config.mimeType)) {
            this.handleError(new Error(`不支援音訊格式: ${this.config.mimeType}`))
            return false
        }

        return true
    }

    /**
     * 初始化雙 MediaRecorder
     */
    private async initializeRecorders(): Promise<void> {
        try {
            this.currentRecorder = this.createMediaRecorder()
            this.nextRecorder = this.createMediaRecorder()
            console.log('🔄 [AdvancedAudioRecorder] 雙 MediaRecorder 初始化完成')
        } catch (error) {
            throw new Error(`MediaRecorder 初始化失敗: ${error instanceof Error ? error.message : '未知錯誤'}`)
        }
    }

    /**
     * 創建 MediaRecorder 實例
     */
    private createMediaRecorder(): MediaRecorder {
        if (!this.stream) {
            throw new Error('音訊流未初始化')
        }

        const recorder = new MediaRecorder(this.stream, {
            mimeType: this.config.mimeType,
            audioBitsPerSecond: this.config.audioBitsPerSecond,
        })

        // 設定事件處理
        recorder.ondataavailable = (event) => {
            if (event.data.size > 0 && this.isRecording) {
                console.log(`📦 [AdvancedAudioRecorder] 段落 #${this.sequence} 完成`, {
                    size: event.data.size,
                    mimeType: this.config.mimeType,
                    hasCompleteHeader: true // 每個段落都有完整檔頭
                })

                const segment: AudioSegment = {
                    blob: event.data,
                    timestamp: Date.now(),
                    duration: this.config.segmentDuration,
                    sequence: this.sequence++,
                }

                // 回調通知有新段落可用
                this.onSegmentCallback?.(segment)
            }
        }

        recorder.onerror = (event) => {
            console.error('❌ [AdvancedAudioRecorder] MediaRecorder 錯誤:', event)
            this.handleError(new Error(`MediaRecorder 錯誤: ${event}`))
        }

        return recorder
    }

    /**
     * 啟動當前錄音器
     */
    private startCurrentRecorder(): void {
        if (!this.currentRecorder) {
            throw new Error('當前錄音器未初始化')
        }

        console.log(`🎵 [AdvancedAudioRecorder] 開始錄音段落 #${this.sequence}`)
        this.currentRecorder.start() // 不使用 timeslice，讓 stop() 觸發完整段落
    }

    /**
     * 排程下一次切換
     */
    private scheduleNextSwap(): void {
        if (!this.isRecording) return

        this.swapTimer = setTimeout(() => {
            if (this.isRecording) {
                this.swapRecorders()
            }
        }, this.config.segmentDuration)
    }

    /**
     * 執行 MediaRecorder 角色轉換
     */
    private swapRecorders(): void {
        try {
            console.log('🔄 [AdvancedAudioRecorder] 執行 MediaRecorder 切換')

            // 步驟 1: 停止當前錄音器（觸發 dataavailable）
            if (this.currentRecorder && this.currentRecorder.state === 'recording') {
                this.currentRecorder.stop()
            }

            // 步驟 2: 啟動備用錄音器
            if (this.nextRecorder) {
                this.nextRecorder.start()
                console.log(`🎵 [AdvancedAudioRecorder] 切換到段落 #${this.sequence}`)
            }

            // 步驟 3: 角色轉換
            const oldRecorder = this.currentRecorder
            this.currentRecorder = this.nextRecorder

            // 步驟 4: 準備下一個錄音器
            try {
                this.nextRecorder = this.createMediaRecorder()
            } catch (error) {
                console.error('❌ [AdvancedAudioRecorder] 創建下一個錄音器失敗:', error)
                this.handleError(error instanceof Error ? error : new Error('創建錄音器失敗'))
                return
            }

            // 步驟 5: 清理舊錄音器
            this.cleanupRecorder(oldRecorder)

            // 步驟 6: 排程下一次切換
            if (this.isRecording) {
                this.scheduleNextSwap()
            }

        } catch (error) {
            console.error('❌ [AdvancedAudioRecorder] 切換錄音器失敗:', error)
            this.handleError(error instanceof Error ? error : new Error('切換錄音器失敗'))
        }
    }

    /**
     * 清理 MediaRecorder
     */
    private cleanupRecorder(recorder: MediaRecorder | null): void {
        if (!recorder) return

        try {
            if (recorder.state !== 'inactive') {
                recorder.stop()
            }
        } catch (error) {
            console.warn('⚠️ [AdvancedAudioRecorder] 清理錄音器時發生警告:', error)
        }
    }

    /**
     * 錯誤處理
     */
    private handleError(error: Error): void {
        console.error('❌ [AdvancedAudioRecorder] 錯誤:', error)
        this.isRecording = false
        this.onErrorCallback?.(error)
    }

    // ============ 事件回調設定 ============

    onSegment(callback: (segment: AudioSegment) => void): void {
        this.onSegmentCallback = callback
    }

    onError(callback: (error: Error) => void): void {
        this.onErrorCallback = callback
    }
}

/**
 * 檢查進階音訊錄製支援
 */
export async function checkAdvancedAudioRecordingSupport(): Promise<{ isSupported: boolean; error?: string }> {
    if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
        return { isSupported: false, error: '瀏覽器不支援 MediaDevices API' }
    }

    if (!window.MediaRecorder) {
        return { isSupported: false, error: '瀏覽器不支援 MediaRecorder API' }
    }

    // 檢查 MIME 類型支援
    if (!MediaRecorder.isTypeSupported(DEFAULT_CONFIG.mimeType)) {
        return { isSupported: false, error: `不支援音訊格式: ${DEFAULT_CONFIG.mimeType}` }
    }

    try {
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true })
        // 立即停止串流以釋放資源
        stream.getTracks().forEach(track => track.stop())
        return { isSupported: true }
    } catch (error) {
        return { isSupported: false, error: `無法獲取麥克風權限: ${error}` }
    }
}


# END FILE CONTENTS


# File: frontend/lib/services/interfaces.ts

"use client"

import type { SessionResponse, STTProvider } from '../api'
import type { BaseService } from './base-service'

/**
 * 服務層介面定義
 *
 * 提供統一的服務契約，確保類型安全和一致性
 */

/**
 * 錄音流程啟動結果
 *
 * RecordingFlowService.startRecordingFlow() 的返回類型
 * 成功時直接返回 SessionResponse，失敗時拋出 Error
 */
export type StartRecordingResult = SessionResponse

/**
 * 會話管理服務介面
 */
export interface ISessionService {
  /**
   * 確保錄音會話存在 - 優雅處理會話衝突
   *
   * 策略：
   * 1. 優先嘗試創建新的錄音會話
   * 2. 若遇到 409 衝突，改為獲取現有活躍會話
   * 3. 確保返回可用的錄音會話
   */
  ensureRecordingSession(title?: string, content?: string, startTs?: number, sttProvider?: STTProvider): Promise<SessionResponse>

  /**
   * 創建錄音會話
   */
  createRecordingSession(title?: string, content?: string, startTs?: number, sttProvider?: STTProvider): Promise<SessionResponse>

  /**
   * 創建純筆記會話
   */
  createNoteSession(title?: string, content?: string): Promise<SessionResponse>

  /**
   * 升級會話至錄音模式
   */
  upgradeToRecording(sessionId: string): Promise<SessionResponse>

  /**
   * 完成會話
   */
  finishSession(sessionId: string): Promise<void>

  /**
   * 檢查活躍會話
   */
  checkActiveSession(): Promise<SessionResponse | null>

  /**
   * 等待會話在資料庫中完全可見
   */
  waitForSessionReady(sessionId: string, maxWaitTime?: number): Promise<boolean>

  /**
   * 刪除會話
   */
  deleteSession(sessionId: string): Promise<void>
}

/**
 * 錄音狀態
 */
export interface RecordingState {
  isRecording: boolean
  recordingTime: number
  currentSessionId: string | null
  error: string | null
}

/**
 * 錄音服務介面
 */
export interface IRecordingService extends BaseService {
  /**
   * 開始錄音
   */
  startRecording(sessionId: string): Promise<void>

  /**
   * 停止錄音
   */
  stopRecording(): Promise<void>

  /**
   * 取得當前錄音狀態
   */
  getRecordingState(): RecordingState

  /**
   * 檢查是否正在錄音
   */
  isRecording(): boolean

  /**
   * 取得錄音時間（秒）
   */
  getRecordingTime(): number

  /**
   * 請求錄音權限
   */
  requestPermission(): Promise<boolean>
}

/**
 * 逐字稿訊息類型
 */
export interface TranscriptMessage {
  type: string
  text?: string
  start_time?: number
  end_time?: number
  chunk_sequence?: number
  start_sequence?: number
  confidence?: number
  timestamp?: number
  phase?: string
  message?: string
  error_type?: string
  error_message?: string
  details?: any
}

/**
 * 逐字稿項目
 */
export interface TranscriptEntry {
  startTime?: number
  time: string
  text: string
}

/**
 * 逐字稿服務介面
 */
export interface ITranscriptService {
  /**
   * 連接逐字稿服務
   */
  connect(sessionId: string): Promise<void>

  /**
   * 斷開逐字稿服務
   */
  disconnect(sessionId?: string): Promise<void>

  /**
   * 添加逐字稿監聽器
   */
  addTranscriptListener(sessionId: string, callback: (message: TranscriptMessage) => void): void

  /**
   * 移除逐字稿監聽器
   */
  removeTranscriptListener(sessionId: string, callback: (message: TranscriptMessage) => void): void

  /**
   * 檢查連接狀態
   */
  isConnected(sessionId: string): boolean

  /**
   * 清除逐字稿
   */
  clearTranscripts(sessionId: string): void

  /**
   * 開始錄音
   */
  start(sessionId: string): Promise<void>
}

/**
 * 服務容器介面
 */
export interface IServiceContainer {
  /**
   * 註冊服務
   */
  register<T>(key: string, factory: () => T): void

  /**
   * 註冊單例服務
   */
  registerSingleton<T>(key: string, factory: () => T): void

  /**
   * 解析服務
   */
  resolve<T>(key: string): T

  /**
   * 檢查服務是否已註冊
   */
  isRegistered(key: string): boolean

  /**
   * 取得已註冊的服務清單
   */
  getRegisteredServices(): string[]
}

/**
 * 服務註冊鍵值常數
 * 避免字串拼寫錯誤，提供類型安全的服務鍵值
 */
export const SERVICE_KEYS = {
  SESSION_SERVICE: 'SessionService',
  RECORDING_SERVICE: 'RecordingService',
  TRANSCRIPT_SERVICE: 'TranscriptService',
  RECORDING_FLOW_SERVICE: 'RecordingFlowService'
} as const

/**
 * 服務鍵值類型
 */
export type ServiceKey = typeof SERVICE_KEYS[keyof typeof SERVICE_KEYS]

/**
 * 匯出服務類型映射
 * 提供編譯時類型檢查
 */
export interface ServiceTypeMap {
  [SERVICE_KEYS.SESSION_SERVICE]: ISessionService
  [SERVICE_KEYS.RECORDING_SERVICE]: IRecordingService
  [SERVICE_KEYS.TRANSCRIPT_SERVICE]: ITranscriptService
}


# END FILE CONTENTS


# File: app/services/transcript_feed.py

"""
逐字稿 WebSocket 廣播服務 (簡化版 InMemoryHub)

維持 sid → set[WebSocket] 映射，支援多個客戶端連接
"""

import logging
import json
from typing import Dict, Set
from fastapi import WebSocket

logger = logging.getLogger(__name__)


class TranscriptHub:
    """
    逐字稿 WebSocket 廣播中心 (InMemoryHub 模式)

    功能：
    - 管理會話 ID 對應的 WebSocket 連接池
    - 支援一對多廣播
    - 自動清理斷開的連接
    """

    def __init__(self):
        """初始化廣播中心"""
        self._subscribers: Dict[str, Set[WebSocket]] = {}
        logger.info("🔌 TranscriptHub 初始化完成")

    async def subscribe(self, session_id: str, websocket: WebSocket):
        """
        訂閱會話的轉錄推送

        Args:
            session_id: 會話 ID
            websocket: WebSocket 連接
        """
        if session_id not in self._subscribers:
            self._subscribers[session_id] = set()

        self._subscribers[session_id].add(websocket)
        logger.info(f"📱 新訂閱者加入會話 {session_id} (目前訂閱者: {len(self._subscribers[session_id])})")

    async def unsubscribe(self, session_id: str, websocket: WebSocket):
        """
        取消訂閱

        Args:
            session_id: 會話 ID
            websocket: WebSocket 連接
        """
        if session_id in self._subscribers:
            self._subscribers[session_id].discard(websocket)

            # 如果沒有訂閱者了，清理會話記錄
            if not self._subscribers[session_id]:
                del self._subscribers[session_id]
                logger.info(f"🗑️ 會話 {session_id} 無訂閱者，已清理")
            else:
                logger.info(f"📱 訂閱者離開會話 {session_id} (剩餘訂閱者: {len(self._subscribers[session_id])})")

    async def broadcast(self, session_id: str, message: dict):
        """
        廣播訊息到指定會話的所有訂閱者

        Args:
            session_id: 會話 ID
            message: 要廣播的訊息字典
        """
        if session_id not in self._subscribers:
            logger.debug(f"📡 會話 {session_id} 無訂閱者，跳過廣播")
            return

        # 獲取訂閱者副本，避免迭代時修改
        subscribers = self._subscribers[session_id].copy()
        successful_broadcasts = 0
        failed_connections = set()

        for websocket in subscribers:
            try:
                await websocket.send_json(message)
                successful_broadcasts += 1
            except Exception as e:
                logger.warning(f"⚠️ 廣播失敗，WebSocket 連接異常: {e}")
                failed_connections.add(websocket)

        # 清理失敗的連接
        if failed_connections:
            for failed_ws in failed_connections:
                await self.unsubscribe(session_id, failed_ws)

            logger.info(f"🗑️ 已清理 {len(failed_connections)} 個異常連接")

        if successful_broadcasts > 0:
            logger.debug(f"📡 成功廣播到會話 {session_id} ({successful_broadcasts} 個訂閱者)")

    async def broadcast_error(self, session_id: str, error_type: str, message: str, seq: int = None):
        """
        廣播錯誤訊息

        Args:
            session_id: 會話 ID
            error_type: 錯誤類型
            message: 錯誤訊息
            seq: 切片序號（可選）
        """
        error_message = {
            "type": "error",
            "error_type": error_type,
            "message": message,
            "session_id": session_id,
            "timestamp": self._get_timestamp()
        }

        if seq is not None:
            error_message["seq"] = seq

        await self.broadcast(session_id, error_message)
        logger.error(f"❌ 廣播錯誤到會話 {session_id}: {error_type} - {message}")

    async def broadcast_transcript_segment(self, session_id: str, seq: int, text: str, start_time: float = None, end_time: float = None, confidence: float = None):
        """
        廣播轉錄片段

        Args:
            session_id: 會話 ID
            seq: 切片序號
            text: 轉錄文字
            start_time: 開始時間（秒）
            end_time: 結束時間（秒）
            confidence: 信心度
        """
        transcript_message = {
            "type": "transcript_segment",
            "session_id": session_id,
            "seq": seq,
            "text": text,
            "timestamp": self._get_timestamp()
        }

        if start_time is not None:
            transcript_message["start_time"] = start_time

        if end_time is not None:
            transcript_message["end_time"] = end_time

        if confidence is not None:
            transcript_message["confidence"] = confidence

        await self.broadcast(session_id, transcript_message)
        logger.info(f"📝 廣播轉錄片段到會話 {session_id} seq={seq}: '{text[:50]}{'...' if len(text) > 50 else ''}'")

    async def broadcast_phase(self, session_id: str, phase: str):
        """
        廣播階段變更

        Args:
            session_id: 會話 ID
            phase: 階段名稱 (waiting, active, processing, completed)
        """
        phase_message = {
            "type": "phase",
            "phase": phase,
            "session_id": session_id,
            "timestamp": self._get_timestamp()
        }

        await self.broadcast(session_id, phase_message)
        logger.info(f"🔄 廣播階段變更到會話 {session_id}: {phase}")

    def get_subscriber_count(self, session_id: str) -> int:
        """
        獲取指定會話的訂閱者數量

        Args:
            session_id: 會話 ID

        Returns:
            int: 訂閱者數量
        """
        return len(self._subscribers.get(session_id, set()))

    def get_total_subscribers(self) -> int:
        """
        獲取總訂閱者數量

        Returns:
            int: 總訂閱者數量
        """
        return sum(len(subscribers) for subscribers in self._subscribers.values())

    def get_active_sessions(self) -> list:
        """
        獲取有訂閱者的活躍會話 ID 列表

        Returns:
            list: 活躍會話 ID 列表
        """
        return list(self._subscribers.keys())

    def _get_timestamp(self) -> str:
        """獲取當前時間戳"""
        from datetime import datetime
        return datetime.utcnow().isoformat()

    async def cleanup_session(self, session_id: str):
        """
        清理指定會話的所有連接

        Args:
            session_id: 會話 ID
        """
        if session_id in self._subscribers:
            subscribers = self._subscribers[session_id].copy()
            for websocket in subscribers:
                try:
                    await websocket.close()
                except:
                    pass  # 忽略關閉時的錯誤

            del self._subscribers[session_id]
            logger.info(f"🗑️ 已清理會話 {session_id} 的所有連接 ({len(subscribers)} 個)")


# 全域 Hub 實例
transcript_hub = TranscriptHub()


def get_transcript_hub() -> TranscriptHub:
    """獲取全域轉錄廣播中心實例"""
    return transcript_hub


# END FILE CONTENTS


# File: frontend/components/ui/button.tsx

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }


# END FILE CONTENTS


# File: pytest.ini

[tool:pytest]
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*
addopts =
    -v
    --tb=short
    --strict-markers
    --disable-warnings
    --color=yes
    --durations=10
markers =
    asyncio: marks tests as async
    unit: marks tests as unit tests
    integration: marks tests as integration tests
    slow: marks tests as slow running
asyncio_mode = auto
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning


# END FILE CONTENTS


# File: frontend/hooks/use-session-new.ts

"use client"

import { useCallback, useMemo, useEffect } from 'react'
import { useAppStateContext } from './use-app-state-context'
import { isFeatureEnabled } from '../lib/feature-flags'
import { SERVICE_KEYS, serviceContainer } from '../lib/services'
import type { ISessionService } from '../lib/services'
import type { SessionResponse } from '../lib/api'

interface UseSessionNewReturn {
    currentSession: SessionResponse | null
    isLoading: boolean
    error: string | null
    createNoteSession: (title?: string, content?: string) => Promise<SessionResponse | null>
    createRecordingSession: (title?: string, content?: string) => Promise<SessionResponse | null>
    upgradeToRecording: () => Promise<SessionResponse | null>
    finishSession: () => Promise<void>
    deleteSession: () => Promise<void>
    clearSession: () => void
    checkActiveSession: () => Promise<SessionResponse | null>
}

/**
 * useSessionNew - 會話管理 Hook (適配器層)
 *
 * 重構為適配器層：
 * - 內部調用 SessionService 而非直接調用 sessionAPI
 * - 保持對外接口完全不變，確保組件層無感知變更
 * - 使用服務層實現清晰的架構分層
 */
export function useSessionNew(): UseSessionNewReturn {
    const context = useAppStateContext()

    console.log('🔄 [useSessionNew] Hook 初始化 (適配器層)，功能開關狀態:', {
        useNewStateManagement: isFeatureEnabled('useNewStateManagement'),
        useNewSessionHook: isFeatureEnabled('useNewSessionHook'),
        contextSession: context.appData.session,
        contextError: context.error,
        contextLoading: context.isLoading,
    })

    // 解析服務實例 - 使用服務層
    const sessionService = useMemo(() => {
        try {
            return serviceContainer.resolve<ISessionService>(SERVICE_KEYS.SESSION_SERVICE)
        } catch (error) {
            console.error('❌ [useSessionNew] 無法解析 SessionService:', error)
            throw new Error('會話服務初始化失敗')
        }
    }, [])

    const clearError = useCallback(() => {
        context.setError(null)
    }, [context])

    const checkActiveSession = useCallback(async (): Promise<SessionResponse | null> => {
        context.setLoading(true)
        clearError()

        try {
            const activeSession = await sessionService.checkActiveSession()
            if (activeSession) {
                context.setSession({
                    id: activeSession.id,
                    status: activeSession.status,
                    type: activeSession.type,
                })
                console.log('✅ [useSessionNew] 已恢復活躍會話狀態:', activeSession)
                return activeSession
            } else {
                console.log('ℹ️ [useSessionNew] 沒有活躍會話，使用預設狀態')
                context.setSession(null)
                return null
            }
        } catch (err) {
            if (err instanceof Error && err.message.includes('Network Error')) {
                console.warn('⚠️ [useSessionNew] Backend API 連線暫時失敗，將在後續重試:', err.message)
                return null
            }

            const errorMessage = err instanceof Error ? err.message : '檢查活躍會話失敗'
            context.setError(errorMessage)
            console.error('❌ [useSessionNew] 檢查活躍會話失敗:', err)
            return null
        } finally {
            context.setLoading(false)
        }
    }, [clearError, context, sessionService])

    const createNoteSession = useCallback(async (title?: string, content?: string): Promise<SessionResponse | null> => {
        context.setLoading(true)
        clearError()

        try {
            const session = await sessionService.createNoteSession(title, content)

            context.setSession({
                id: session.id,
                status: session.status,
                type: session.type,
            })

            console.log('✅ [useSessionNew] 純筆記會話建立成功:', session)
            return session
        } catch (err) {
            // 保持原有的 409 衝突錯誤處理邏輯
            if (err instanceof Error && err.message.includes('409')) {
                const conflictMessage = '檢測到活躍會話衝突，請重新整理頁面後再試'
                context.setError(conflictMessage)
                console.error('❌ [useSessionNew] 會話衝突錯誤 (409):', err.message)
                return null
            }

            const errorMessage = err instanceof Error ? err.message : '建立會話失敗'
            context.setError(errorMessage)
            console.error('❌ [useSessionNew] 建立純筆記會話失敗:', err)
            return null
        } finally {
            context.setLoading(false)
        }
    }, [clearError, context, sessionService])

    const createRecordingSession = useCallback(async (title?: string, content?: string): Promise<SessionResponse | null> => {
        context.setLoading(true)
        clearError()

        try {
            const session = await sessionService.createRecordingSession(title, content)

            context.setSession({
                id: session.id,
                status: session.status,
                type: session.type,
            })

            console.log('✅ [useSessionNew] 錄音會話建立成功:', session)
            return session
        } catch (err) {
            // 保持原有的 409 衝突錯誤處理邏輯
            if (err instanceof Error && err.message.includes('409')) {
                const conflictMessage = '檢測到活躍會話衝突，請重新整理頁面後再試'
                context.setError(conflictMessage)
                console.error('❌ [useSessionNew] 會話衝突錯誤 (409):', err.message)
                return null
            }

            const errorMessage = err instanceof Error ? err.message : '建立錄音會話失敗'
            context.setError(errorMessage)
            console.error('❌ [useSessionNew] 建立錄音會話失敗:', err)
            return null
        } finally {
            context.setLoading(false)
        }
    }, [clearError, context, sessionService])

    const upgradeToRecording = useCallback(async (): Promise<SessionResponse | null> => {
        const currentSessionData = context.appData.session

        if (!currentSessionData) {
            context.setError('沒有活躍的會話可以升級')
            return null
        }

        if (currentSessionData.type === 'recording') {
            console.log('🔄 [useSessionNew] 會話已經是錄音模式')
            try {
                const activeSession = await sessionService.checkActiveSession()
                return activeSession
            } catch (err) {
                console.error('❌ [useSessionNew] 獲取活躍會話失敗:', err)
                return null
            }
        }

        context.setLoading(true)
        clearError()

        try {
            const updatedSession = await sessionService.upgradeToRecording(currentSessionData.id)

            context.setSession({
                id: updatedSession.id,
                status: updatedSession.status,
                type: updatedSession.type,
            })

            console.log('✅ [useSessionNew] 會話升級為錄音模式成功:', updatedSession)
            return updatedSession
        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : '升級會話失敗'
            context.setError(errorMessage)
            console.error('❌ [useSessionNew] 升級會話失敗:', err)
            return null
        } finally {
            context.setLoading(false)
        }
    }, [clearError, context, sessionService])

    const finishSession = useCallback(async (): Promise<void> => {
        const currentSessionData = context.appData.session

        if (!currentSessionData) {
            console.log('🔄 [useSessionNew] 沒有活躍的會話需要完成')
            return
        }

        context.setLoading(true)
        clearError()

        try {
            await sessionService.finishSession(currentSessionData.id)
            console.log('✅ [useSessionNew] 會話完成成功:', currentSessionData.id)

            context.updateSessionStatus('completed')
        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : '完成會話失敗'
            context.setError(errorMessage)
            console.error('❌ [useSessionNew] 完成會話失敗:', err)
        } finally {
            context.setLoading(false)
        }
    }, [clearError, context, sessionService])

    const deleteSession = useCallback(async (): Promise<void> => {
        const currentSessionData = context.appData.session

        if (!currentSessionData) {
            console.log('🔄 [useSessionNew] 沒有活躍的會話需要刪除')
            return
        }

        context.setLoading(true)
        clearError()

        try {
            await sessionService.deleteSession(currentSessionData.id)
            console.log('✅ [useSessionNew] 會話刪除成功:', currentSessionData.id)
            context.setSession(null)
        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : '刪除會話失敗'
            context.setError(errorMessage)
            console.error('❌ [useSessionNew] 刪除會話失敗:', err)
        } finally {
            context.setLoading(false)
        }
    }, [clearError, context, sessionService])

    const clearSession = useCallback(() => {
        context.setSession(null)
        context.setError(null)
        console.log('🔄 [useSessionNew] 會話已清除')
    }, [context])

    // 向後相容的 currentSession 格式
    const currentSession: SessionResponse | null = useMemo(() => {
        const sessionData = context.appData.session
        if (!sessionData) return null

        return {
            id: sessionData.id,
            title: '',
            type: sessionData.type,
            status: sessionData.status,
            language: 'zh-TW',
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString(),
        }
    }, [context.appData.session])

    // 確保服務層已初始化
    useEffect(() => {
        if (!sessionService) {
            console.error('❌ [useSessionNew] SessionService 未正確初始化')
            context.setError('會話服務初始化失敗')
        }
    }, [sessionService, context])

    return useMemo(() => ({
        currentSession,
        isLoading: context.isLoading,
        error: context.error,
        createNoteSession,
        createRecordingSession,
        upgradeToRecording,
        finishSession,
        deleteSession,
        clearSession,
        checkActiveSession,
    }), [
        currentSession,
        context.isLoading,
        context.error,
        createNoteSession,
        createRecordingSession,
        upgradeToRecording,
        finishSession,
        deleteSession,
        clearSession,
        checkActiveSession,
    ])
}


# END FILE CONTENTS


# File: frontend/components/ui/use-toast.ts

"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }


# END FILE CONTENTS


# File: frontend/types/app-state.ts

// 前端應用狀態 - 對應 PRD 四狀態流程
export type AppState =
  | "default"     // 預設畫面：可寫筆記，顯示錄音按鈕
  | "recording_waiting" // 錄音畫面：錄音中，尚未收到逐字稿
  | "recording_active"  // 錄音畫面：錄音中，已顯示逐字稿
  | "processing"  // 處理畫面：停止錄音後，處理剩餘逐字稿
  | "finished"    // 完整逐字稿畫面：可編輯筆記、匯出、開新筆記

export interface TranscriptEntry {
  startTime?: number
  time: string
  text: string
  provider?: 'whisper' | 'gemini'  // STT Provider 標識
}

export interface AppData {
  state: AppState
  editorContent: string
  transcriptEntries: TranscriptEntry[]
  isRecording: boolean
  recordingTime: number
  session?: {
    id: string
    status: SessionStatus
    type: SessionType
  } | null
}

// 後端 Session 狀態對應前端狀態
export type SessionStatus = "draft" | "active" | "processing" | "completed" | "error"
export type SessionType = "note_only" | "recording"

// 狀態映射介面
export interface StateMapping {
  frontendState: AppState
  backendStatus: SessionStatus
  sessionType: SessionType
}


# END FILE CONTENTS


# File: frontend/lib/segmented-audio-recorder.ts

"use client"

import { getAudioChunkIntervalMs } from './config'

// 音訊錄製狀態
export type SegmentedAudioRecorderState = 'idle' | 'recording' | 'paused' | 'error'

// 音訊錄製配置
export interface SegmentedAudioRecorderConfig {
  segmentDuration: number // 每個段落時長（毫秒）
  mimeType: string // 音訊格式
  audioBitsPerSecond?: number // 音訊位元率
}

// 音訊段落資料
export interface AudioSegment {
  blob: Blob
  timestamp: number
  duration: number
  sequence: number
}

// 預設配置
const DEFAULT_CONFIG: SegmentedAudioRecorderConfig = {
  segmentDuration: getAudioChunkIntervalMs(), // 從環境變數讀取切片時長
  mimeType: 'audio/webm;codecs=opus',
  audioBitsPerSecond: 64000, // 64 kbps for configurable chunks（降低位元率）
}

/**
 * SegmentedAudioRecorder - 分段式音訊錄製器
 *
 * 核心特點：
 * - 使用遞迴啟動/停止 MediaRecorder 模式
 * - 每個 segment 包含完整 WebM Header
 * - 支援可配置的切片時長（預設 5 秒）
 * - 解決 Azure OpenAI Whisper API 檔頭問題
 */
export class SegmentedAudioRecorder {
  private stream: MediaStream | null = null
  private config: SegmentedAudioRecorderConfig
  private state: SegmentedAudioRecorderState = 'idle'
  private sequence: number = 0
  private recording = false
  private segmentTimeout: NodeJS.Timeout | null = null

  // 事件回調
  private onSegmentCallback?: (segment: AudioSegment) => void
  private onStateChangeCallback?: (state: SegmentedAudioRecorderState) => void
  private onErrorCallback?: (error: Error) => void
  private onStartCallback?: () => void

  constructor(config: Partial<SegmentedAudioRecorderConfig> = {}) {
    this.config = { ...DEFAULT_CONFIG, ...config }
  }

  /**
   * 初始化錄音器 - 獲取音訊權限
   */
  async initialize(): Promise<void> {
    if (this.stream) {
      return // 已初始化
    }

    try {
      this.stream = await navigator.mediaDevices.getUserMedia({ audio: true })
      console.log('🎤 [SegmentedAudioRecorder] 音訊權限獲取成功')
    } catch (error) {
      const errorMsg = error instanceof Error ? error.message : '獲取音訊權限失敗'
      this.handleError(new Error(errorMsg))
      throw error
    }
  }

  /**
   * 開始錄音 - 啟動遞迴分段錄音
   */
  async start(onSegmentAvailable: (segment: AudioSegment) => void): Promise<void> {
    if (this.recording) {
      throw new Error('錄製已在進行中')
    }

    if (!this.stream) {
      await this.initialize()
    }

    this.onSegmentCallback = onSegmentAvailable
    this.recording = true
    this.sequence = 0

    console.log('🎬 [SegmentedAudioRecorder] 開始分段錄音', {
      segmentDuration: this.config.segmentDuration,
      mimeType: this.config.mimeType,
      audioBitsPerSecond: this.config.audioBitsPerSecond
    })

    this.setState('recording')
    this.startSegment()
  }

  /**
   * 核心遞迴函式 - 啟動單個錄音段落
   */
  private startSegment(): void {
    if (!this.recording || !this.stream) {
      return
    }

    console.log(`🎵 [SegmentedAudioRecorder] 開始錄音段落 #${this.sequence}`)

    // 建立新的 MediaRecorder 實例
    const mediaRecorder = new MediaRecorder(this.stream, {
      mimeType: this.config.mimeType,
      audioBitsPerSecond: this.config.audioBitsPerSecond,
    })

    // 新增：設定錄音開始事件處理
    mediaRecorder.onstart = () => {
      console.log(`🚀 [SegmentedAudioRecorder] 段落 #${this.sequence} 錄音真正開始`)
      // 只在第一個段落觸發 onstart 回調
      if (this.sequence === 0 && this.onStartCallback) {
        console.log('🎯 [SegmentedAudioRecorder] 觸發錄音開始回調')
        this.onStartCallback()
      }
    }

    // 設定資料接收處理
    mediaRecorder.ondataavailable = (event) => {
      if (event.data.size > 0) {
        console.log(`📦 [SegmentedAudioRecorder] 段落 #${this.sequence} 完成`, {
          size: event.data.size,
          mimeType: this.config.mimeType,
          containsCompleteHeader: true // 每個段落都有完整檔頭
        })

        const segment: AudioSegment = {
          blob: event.data,
          timestamp: Date.now(),
          duration: this.config.segmentDuration,
          sequence: this.sequence++,
        }

        // 回調通知有新段落可用
        this.onSegmentCallback?.(segment)
      }
    }

    // 錯誤處理
    mediaRecorder.onerror = (event) => {
      console.error(`❌ [SegmentedAudioRecorder] 段落 #${this.sequence} 錯誤:`, event)
      this.handleError(new Error(`MediaRecorder 錯誤: ${event}`))
    }

    // 開始錄製此段落
    mediaRecorder.start()

    // 設定計時器，在指定時間後結束此段落並開始下一段
    this.segmentTimeout = setTimeout(() => {
      if (mediaRecorder.state === 'recording') {
        // 請求數據並停止 MediaRecorder
        mediaRecorder.requestData() // 觸發 ondataavailable
        mediaRecorder.stop()        // 結束此段

        // 如果仍在錄音狀態，遞迴開始下一段
        if (this.recording) {
          // 短暫延遲確保前一段完全結束
          setTimeout(() => {
            this.startSegment()
          }, 50)
        }
      }
    }, this.config.segmentDuration)
  }

  /**
   * 停止錄音
   */
  stop(): void {
    console.log('⏹️ [SegmentedAudioRecorder] 停止錄音')

    this.recording = false

    // 清除計時器
    if (this.segmentTimeout) {
      clearTimeout(this.segmentTimeout)
      this.segmentTimeout = null
    }

    this.setState('idle')
  }

  /**
   * 清理資源
   */
  cleanup(): void {
    this.stop()

    if (this.stream) {
      this.stream.getTracks().forEach(track => track.stop())
      this.stream = null
    }

    this.sequence = 0
    console.log('🧹 SegmentedAudioRecorder 已清理')
  }

  /**
   * 檢查是否正在錄音
   */
  get isRecording(): boolean {
    return this.recording
  }

  /**
   * 獲取當前序號
   */
  get currentSequence(): number {
    return this.sequence
  }

  /**
   * 獲取當前狀態
   */
  get currentState(): SegmentedAudioRecorderState {
    return this.state
  }

  /**
   * 獲取當前配置
   */
  get currentConfig(): SegmentedAudioRecorderConfig {
    return { ...this.config }
  }

  // 設定狀態
  private setState(newState: SegmentedAudioRecorderState): void {
    this.state = newState
    this.onStateChangeCallback?.(newState)
  }

  // 錯誤處理
  private handleError(error: Error): void {
    console.error('❌ SegmentedAudioRecorder 錯誤:', error)
    this.setState('error')
    this.recording = false
    this.onErrorCallback?.(error)
  }

  // 事件回調設定
  onSegment(callback: (segment: AudioSegment) => void): void {
    this.onSegmentCallback = callback
  }

  onStateChange(callback: (state: SegmentedAudioRecorderState) => void): void {
    this.onStateChangeCallback = callback
  }

  onError(callback: (error: Error) => void): void {
    this.onErrorCallback = callback
  }

  onStart(callback: () => void): void {
    this.onStartCallback = callback
  }
}

// 工廠函數
export const createSegmentedAudioRecorder = (config?: Partial<SegmentedAudioRecorderConfig>): SegmentedAudioRecorder => {
  return new SegmentedAudioRecorder(config)
}

/**
 * 檢查瀏覽器分段式音訊錄製支援
 */
export async function checkSegmentedAudioRecordingSupport(): Promise<{ isSupported: boolean; error?: string }> {
  if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
    return { isSupported: false, error: '瀏覽器不支援 MediaDevices API' }
  }

  if (!window.MediaRecorder) {
    return { isSupported: false, error: '瀏覽器不支援 MediaRecorder API' }
  }

  // 檢查 MIME 類型支援
  if (!MediaRecorder.isTypeSupported(DEFAULT_CONFIG.mimeType)) {
    return { isSupported: false, error: `不支援音訊格式: ${DEFAULT_CONFIG.mimeType}` }
  }

  try {
    const stream = await navigator.mediaDevices.getUserMedia({ audio: true })
    // 立即停止串流以釋放資源
    stream.getTracks().forEach(track => track.stop())
    return { isSupported: true }
  } catch (error) {
    return { isSupported: false, error: `無法獲取麥克風權限: ${error}` }
  }
}


# END FILE CONTENTS


# File: frontend/types/app-state-context.ts

import { AppData, AppState, SessionStatus, SessionType, TranscriptEntry } from "./app-state"
import { StateTransitionTrigger, StateTransitionResult } from './state-transitions';

// 狀態管理 Actions
export type AppStateAction =
    | { type: "SET_STATE"; payload: AppState }
    | { type: "SET_APP_STATE"; payload: AppState }  // 別名，為了向後相容
    | { type: "SET_RECORDING"; payload: boolean }
    | { type: "SET_RECORDING_TIME"; payload: number }
    | { type: "SET_EDITOR_CONTENT"; payload: string }
    | { type: "SET_TRANSCRIPT_ENTRIES"; payload: TranscriptEntry[] }
    | { type: "ADD_TRANSCRIPT_ENTRY"; payload: TranscriptEntry }
    | { type: "SET_SESSION"; payload: { id: string; status: SessionStatus; type: SessionType } | null }
    | { type: "UPDATE_SESSION_STATUS"; payload: SessionStatus }
    | { type: "RESET_STATE" }
    | { type: "SET_LOADING"; payload: boolean }
    | { type: "SET_ERROR"; payload: string | null }
    | { type: "CLEAR_ERROR" }

// Context 狀態介面
export interface AppStateContextValue {
    // 狀態數據
    appData: AppData
    isLoading: boolean
    error: string | null

    // 狀態更新函數
    dispatch: (action: AppStateAction) => void

    // 便利方法（封裝常用的 dispatch 操作）
    setState: (state: AppState) => void
    setRecording: (isRecording: boolean) => void
    setRecordingTime: (time: number) => void
    setEditorContent: (content: string) => void
    setTranscriptEntries: (entries: TranscriptEntry[]) => void
    addTranscriptEntry: (entry: TranscriptEntry) => void
    setSession: (session: { id: string; status: SessionStatus; type: SessionType } | null) => void
    updateSessionStatus: (status: SessionStatus) => void
    resetState: () => void
    setLoading: (loading: boolean) => void
    setError: (error: string | null) => void
    transition: (trigger: StateTransitionTrigger) => StateTransitionResult | null
}

// 初始狀態
export const initialAppData: AppData = {
    state: "default",
    transcriptEntries: [],
    editorContent: "",
    isRecording: false,
    recordingTime: 0,
    session: null,
}

export const initialContextState = {
    appData: initialAppData,
    isLoading: false,
    error: null,
}


# END FILE CONTENTS


# File: frontend/public/placeholder.svg

<svg xmlns="http://www.w3.org/2000/svg" width="1200" height="1200" fill="none"><rect width="1200" height="1200" fill="#EAEAEA" rx="3"/><g opacity=".5"><g opacity=".5"><path fill="#FAFAFA" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/></g><path stroke="url(#a)" stroke-width="2.418" d="M0-1.209h553.581" transform="scale(1 -1) rotate(45 1163.11 91.165)"/><path stroke="url(#b)" stroke-width="2.418" d="M404.846 598.671h391.726"/><path stroke="url(#c)" stroke-width="2.418" d="M599.5 795.742V404.017"/><path stroke="url(#d)" stroke-width="2.418" d="m795.717 796.597-391.441-391.44"/><path fill="#fff" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/><g clip-path="url(#e)"><path fill="#666" fill-rule="evenodd" d="M616.426 586.58h-31.434v16.176l3.553-3.554.531-.531h9.068l.074-.074 8.463-8.463h2.565l7.18 7.181V586.58Zm-15.715 14.654 3.698 3.699 1.283 1.282-2.565 2.565-1.282-1.283-5.2-5.199h-6.066l-5.514 5.514-.073.073v2.876a2.418 2.418 0 0 0 2.418 2.418h26.598a2.418 2.418 0 0 0 2.418-2.418v-8.317l-8.463-8.463-7.181 7.181-.071.072Zm-19.347 5.442v4.085a6.045 6.045 0 0 0 6.046 6.045h26.598a6.044 6.044 0 0 0 6.045-6.045v-7.108l1.356-1.355-1.282-1.283-.074-.073v-17.989h-38.689v23.43l-.146.146.146.147Z" clip-rule="evenodd"/></g><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/></g><defs><linearGradient id="a" x1="554.061" x2="-.48" y1=".083" y2=".087" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="b" x1="796.912" x2="404.507" y1="599.963" y2="599.965" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="c" x1="600.792" x2="600.794" y1="403.677" y2="796.082" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="d" x1="404.85" x2="796.972" y1="403.903" y2="796.02" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><clipPath id="e"><path fill="#fff" d="M581.364 580.535h38.689v38.689h-38.689z"/></clipPath></defs></svg>

# END FILE CONTENTS


# File: frontend/components/provider-context-menu.tsx

"use client"

import {
    DropdownMenu,
    DropdownMenuTrigger,
    DropdownMenuContent,
    DropdownMenuItem,
    DropdownMenuSub,
    DropdownMenuSubTrigger,
    DropdownMenuSubContent,
    DropdownMenuRadioGroup,
    DropdownMenuRadioItem,
    DropdownMenuPortal,
} from "@/components/ui/dropdown-menu"
import { Button } from "@/components/ui/button"
import { Settings, Mic, Zap } from "lucide-react"
import { STTProvider } from "@/lib/api"
import { PROVIDERS } from "../constants/providers"

interface ProviderContextMenuProps {
    currentProvider: STTProvider
    onProviderChange: (provider: STTProvider) => void
    disabled?: boolean
}

export function ProviderContextMenu({ currentProvider, onProviderChange, disabled = false }: ProviderContextMenuProps) {
    const providerDisplayName = Object.fromEntries(PROVIDERS.map(p => [p.code, p.label]))

    return (
        <DropdownMenu>
            <DropdownMenuTrigger asChild>
                <Button
                    variant="ghost"
                    size="icon"
                    className="h-8 w-8"
                    disabled={disabled}
                    data-testid="settings-button"
                >
                    <Settings className="w-4 h-4" />
                </Button>
            </DropdownMenuTrigger>
            <DropdownMenuPortal>
                <DropdownMenuContent side="bottom" sideOffset={4} className="bg-white rounded-md">
                    <DropdownMenuItem disabled>Config</DropdownMenuItem>
                    <DropdownMenuSub>
                        <DropdownMenuSubTrigger>Switch Provider</DropdownMenuSubTrigger>
                        <DropdownMenuSubContent className="bg-white rounded-md">
                            <DropdownMenuRadioGroup value={currentProvider} onValueChange={(value) => onProviderChange(value as STTProvider)}>
                                {PROVIDERS.map((p) => (
                                    <DropdownMenuRadioItem value={p.code} key={p.code}>
                                        {p.label}
                                    </DropdownMenuRadioItem>
                                ))}
                            </DropdownMenuRadioGroup>
                        </DropdownMenuSubContent>
                    </DropdownMenuSub>
                </DropdownMenuContent>
            </DropdownMenuPortal>
        </DropdownMenu>
    )
}


# END FILE CONTENTS


# File: app/__init__.py

"""
StudyScriber API Application

雲端筆記應用：邊錄邊轉錄，支援純筆記與錄音模式
"""

__version__ = "0.1.0"


# END FILE CONTENTS


# File: app/core/webm_header_repairer.py

"""
WebM 檔頭修復核心邏輯
提供檔頭提取、驗證和重組功能，解決 MediaRecorder 後續 chunk 缺乏 EBML 檔頭的問題
"""

import logging
import time
from typing import Optional, Tuple
from dataclasses import dataclass

from .ffmpeg import detect_webm_header_info, is_webm_header_complete, WebMHeaderInfo

logger = logging.getLogger(__name__)


@dataclass
class HeaderRepairResult:
    """檔頭修復結果"""
    success: bool = False
    repaired_data: Optional[bytes] = None
    original_header_size: int = 0
    audio_data_size: int = 0
    repair_time_ms: float = 0.0
    error_message: Optional[str] = None


@dataclass
class HeaderExtractionResult:
    """檔頭提取結果"""
    success: bool = False
    header_data: Optional[bytes] = None
    header_info: Optional[WebMHeaderInfo] = None
    extraction_time_ms: float = 0.0
    error_message: Optional[str] = None


class WebMHeaderRepairer:
    """
    WebM 檔頭修復核心引擎

    負責從第一個完整 chunk 提取檔頭模板，並將其應用到後續缺乏檔頭的 chunk 中
    """

    def __init__(self):
        """初始化 WebM 檔頭修復器"""
        self._repair_stats = {
            'total_extractions': 0,
            'successful_extractions': 0,
            'total_repairs': 0,
            'successful_repairs': 0,
            'total_repair_time_ms': 0.0
        }
        logger.info("WebMHeaderRepairer 初始化完成")

    def extract_header(self, complete_webm_chunk: bytes) -> HeaderExtractionResult:
        """
        從完整的 WebM chunk 中提取檔頭模板

        Args:
            complete_webm_chunk: 包含完整檔頭的 WebM chunk 數據

        Returns:
            HeaderExtractionResult: 檔頭提取結果
        """
        start_time = time.time()
        result = HeaderExtractionResult()

        try:
            self._repair_stats['total_extractions'] += 1

            # 1. 驗證輸入數據
            if not complete_webm_chunk or len(complete_webm_chunk) < 32:
                result.error_message = "輸入數據長度不足"
                return result

            # 2. 檢測檔頭完整性
            header_info = detect_webm_header_info(complete_webm_chunk)
            if not header_info.is_complete:
                result.error_message = f"檔頭不完整: {header_info.error_message}"
                return result

            # 3. 提取檔頭數據（從開始到第一個 Cluster）
            if header_info.header_size > 0:
                header_data = complete_webm_chunk[:header_info.header_size]

                # 4. 驗證提取的檔頭
                if self._validate_extracted_header(header_data):
                    result.success = True
                    result.header_data = header_data
                    result.header_info = header_info
                    self._repair_stats['successful_extractions'] += 1

                    logger.debug(f"成功提取檔頭: 大小={len(header_data)} bytes, "
                               f"編碼器={header_info.codec_type}, "
                               f"音軌數={header_info.track_count}")
                else:
                    result.error_message = "提取的檔頭驗證失敗"
            else:
                result.error_message = "無法確定檔頭大小"

        except Exception as e:
            result.error_message = f"檔頭提取異常: {str(e)}"
            logger.error(f"檔頭提取發生錯誤: {e}")

        finally:
            result.extraction_time_ms = (time.time() - start_time) * 1000

        return result

    def repair_chunk(self, header_template: bytes, incomplete_chunk: bytes) -> HeaderRepairResult:
        """
        使用檔頭模板修復不完整的 WebM chunk

        Args:
            header_template: 從完整 chunk 提取的檔頭模板
            incomplete_chunk: 缺乏檔頭的 WebM chunk

        Returns:
            HeaderRepairResult: 修復結果
        """
        start_time = time.time()
        result = HeaderRepairResult()

        try:
            self._repair_stats['total_repairs'] += 1

            # 1. 驗證輸入
            if not header_template or not incomplete_chunk:
                result.error_message = "輸入參數無效"
                return result

            if len(header_template) < 32 or len(incomplete_chunk) < 8:
                result.error_message = "數據長度不足"
                return result

            # 2. 檢測 incomplete_chunk 是否已經有檔頭
            if is_webm_header_complete(incomplete_chunk):
                # 如果已經有完整檔頭，直接返回原數據
                result.success = True
                result.repaired_data = incomplete_chunk
                result.original_header_size = 0
                result.audio_data_size = len(incomplete_chunk)
                logger.debug("Chunk 已有完整檔頭，無需修復")
                return result

            # 3. 檢測 incomplete_chunk 中的音頻數據起始位置
            audio_data_start = self._find_audio_data_start(incomplete_chunk)
            if audio_data_start == -1:
                result.error_message = "無法在 incomplete chunk 中找到有效的音頻數據"
                return result

            # 4. 提取音頻數據
            audio_data = incomplete_chunk[audio_data_start:]
            if len(audio_data) < 8:
                result.error_message = "音頻數據長度不足"
                return result

            # 5. 修復檔頭中的時間戳信息（如果需要）
            repaired_header = self._update_header_timestamps(header_template, incomplete_chunk)

            # 6. 拼接修復後的數據
            repaired_data = repaired_header + audio_data

            # 7. 驗證修復結果
            if self.validate_repaired_chunk(repaired_data):
                result.success = True
                result.repaired_data = repaired_data
                result.original_header_size = len(repaired_header)
                result.audio_data_size = len(audio_data)
                self._repair_stats['successful_repairs'] += 1

                logger.debug(f"成功修復 chunk: 檔頭={len(repaired_header)} bytes, "
                           f"音頻={len(audio_data)} bytes, "
                           f"總計={len(repaired_data)} bytes")
            else:
                result.error_message = "修復後的數據驗證失敗"

        except Exception as e:
            result.error_message = f"檔頭修復異常: {str(e)}"
            logger.error(f"檔頭修復發生錯誤: {e}")

        finally:
            repair_time_ms = (time.time() - start_time) * 1000
            result.repair_time_ms = repair_time_ms
            self._repair_stats['total_repair_time_ms'] += repair_time_ms

        return result

    def validate_repaired_chunk(self, repaired_chunk: bytes) -> bool:
        """
        驗證修復後的 WebM chunk 是否有效

        Args:
            repaired_chunk: 修復後的 WebM 數據

        Returns:
            bool: True 表示驗證通過，False 表示驗證失敗
        """
        try:
            if not repaired_chunk or len(repaired_chunk) < 32:
                return False

            # 1. 檢查是否有完整的檔頭
            if not is_webm_header_complete(repaired_chunk):
                logger.debug("修復後的 chunk 檔頭仍不完整")
                return False

            # 2. 檢測檔頭資訊
            header_info = detect_webm_header_info(repaired_chunk)
            if not header_info.is_complete:
                logger.debug(f"檔頭驗證失敗: {header_info.error_message}")
                return False

            # 3. 檢查數據長度合理性
            if header_info.header_size >= len(repaired_chunk):
                logger.debug("檔頭大小異常，等於或超過總數據大小")
                return False

            # 4. 檢查是否有音頻數據
            audio_data_size = len(repaired_chunk) - header_info.header_size
            if audio_data_size < 8:
                logger.debug("音頻數據長度不足")
                return False

            logger.debug(f"修復驗證通過: 檔頭={header_info.header_size} bytes, "
                        f"音頻={audio_data_size} bytes, "
                        f"編碼器={header_info.codec_type}")

            return True

        except Exception as e:
            logger.error(f"修復驗證發生錯誤: {e}")
            return False

    def get_repair_statistics(self) -> dict:
        """
        獲取修復統計信息

        Returns:
            dict: 包含修復統計數據的字典
        """
        stats = self._repair_stats.copy()

        # 計算成功率
        if stats['total_extractions'] > 0:
            stats['extraction_success_rate'] = stats['successful_extractions'] / stats['total_extractions']
        else:
            stats['extraction_success_rate'] = 0.0

        if stats['total_repairs'] > 0:
            stats['repair_success_rate'] = stats['successful_repairs'] / stats['total_repairs']
            stats['average_repair_time_ms'] = stats['total_repair_time_ms'] / stats['total_repairs']
        else:
            stats['repair_success_rate'] = 0.0
            stats['average_repair_time_ms'] = 0.0

        return stats

    def _validate_extracted_header(self, header_data: bytes) -> bool:
        """
        驗證提取的檔頭是否有效

        Args:
            header_data: 提取的檔頭數據

        Returns:
            bool: True 表示有效，False 表示無效
        """
        try:
            # 檢查基本長度
            if len(header_data) < 32:
                return False

            # 檢查 EBML header 標記
            if header_data[:4] != b'\x1A\x45\xDF\xA3':
                return False

            # 使用現有的檔頭檢測功能進行深度驗證
            header_info = detect_webm_header_info(header_data)
            return header_info.has_ebml_header and header_info.has_segment

        except Exception:
            return False

    def _find_audio_data_start(self, incomplete_chunk: bytes) -> int:
        """
        在不完整的 chunk 中尋找音頻數據的起始位置

        Args:
            incomplete_chunk: 不完整的 WebM chunk

        Returns:
            int: 音頻數據起始位置，-1 表示未找到
        """
        try:
            # 1. 檢查是否以 Cluster 元素開始 (0x1F43B675)
            cluster_marker = b'\x1F\x43\xB6\x75'
            if incomplete_chunk.startswith(cluster_marker):
                return 0  # 直接從 Cluster 開始

            # 2. 在前 64 bytes 中搜尋 Cluster 標記
            search_range = min(len(incomplete_chunk), 64)
            for i in range(search_range - len(cluster_marker) + 1):
                if incomplete_chunk[i:i + len(cluster_marker)] == cluster_marker:
                    return i

            # 3. 如果沒找到 Cluster，檢查是否包含其他音頻數據標記
            # SimpleBlock (0xA3) 或 Block (0xA1)
            audio_markers = [b'\xA3', b'\xA1']
            for marker in audio_markers:
                for i in range(search_range):
                    if incomplete_chunk[i:i + len(marker)] == marker:
                        return max(0, i - 8)  # 往前一點以包含可能的長度資訊

            # 4. 如果都沒找到，假設從開始就是音頻數據
            logger.debug("未找到明確的音頻數據標記，假設從頭開始")
            return 0

        except Exception as e:
            logger.debug(f"尋找音頻數據起始位置時發生錯誤: {e}")
            return 0  # 預設從開始處理

    def _update_header_timestamps(self, header_template: bytes, incomplete_chunk: bytes) -> bytes:
        """
        更新檔頭中的時間戳信息（如有需要）

        Args:
            header_template: 原始檔頭模板
            incomplete_chunk: 不完整的 chunk（可能包含時間戳信息）

        Returns:
            bytes: 更新後的檔頭數據
        """
        try:
            # 目前先返回原始檔頭模板
            # 未來可以實作更複雜的時間戳更新邏輯
            return header_template

        except Exception as e:
            logger.debug(f"更新檔頭時間戳時發生錯誤: {e}")
            return header_template


# END FILE CONTENTS


# File: frontend/components/ui/navigation-menu.tsx

import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}


# END FILE CONTENTS


# File: frontend/lib/services/recording-flow-service.ts

"use client"

import { BaseService } from './base-service'
import { serviceContainer } from './service-container'
import { SERVICE_KEYS, type ISessionService, type IRecordingService, type ITranscriptService, type TranscriptMessage } from './interfaces'
import type { SessionResponse } from '../api'
import type { AppState } from '../../types/app-state'
import { useAppStore } from '../app-store-zustand'
import { formatTime } from '../../utils/time'

/**
 * 錄音流程管理服務
 *
 * 整合 SessionService、RecordingService 和 TranscriptService
 * 提供統一的錄音流程管理
 */
import { STTProvider } from '../api'

const AUDIO_CHUNK_SEC = Number(
  process.env.NEXT_PUBLIC_AUDIO_CHUNK_INTERVAL_SEC ?? "15"
);

export class RecordingFlowService extends BaseService {
  protected readonly serviceName = 'RecordingFlowService'

  // 服務依賴
  private sessionService!: ISessionService
  private recordingService!: IRecordingService
  private transcriptService!: ITranscriptService

  // 流程狀態
  private currentSession: SessionResponse | null = null
  private isFlowActive = false
  private labelIntervalSec = (() => {
    const raw = process.env.NEXT_PUBLIC_TRANSCRIPT_LABEL_INTERVAL
    const n = Number(raw)
    return Number.isFinite(n) && n > 0 ? Math.floor(n) : 15
  })()
  private lastLabelSec = 0
  private transcriptEntries: Array<{ time: string; text: string }> = []

  private setAppState: (s: AppState) => void

  constructor(setAppStateFn?: (s: AppState) => void) {
    super()
    if (setAppStateFn) {
      this.setAppState = setAppStateFn
    } else {
      this.setAppState = useAppStore.getState().setState
    }
  }

  /**
   * 服務初始化
   */
  async initialize(): Promise<void> {
    this.logInfo('初始化錄音流程服務')

    // 解析服務依賴
    this.sessionService = serviceContainer.resolve<ISessionService>(SERVICE_KEYS.SESSION_SERVICE)
    this.recordingService = serviceContainer.resolve<IRecordingService>(SERVICE_KEYS.RECORDING_SERVICE)
    this.transcriptService = serviceContainer.resolve<ITranscriptService>(SERVICE_KEYS.TRANSCRIPT_SERVICE)

    this.logSuccess('服務依賴解析完成')
    this.logSuccess('初始化完成')
  }

  /**
   * 服務清理
   */
  async cleanup(): Promise<void> {
    this.logInfo('清理錄音流程服務')

    // 如果有活躍的流程，先停止
    if (this.isFlowActive) {
      await this.stopRecordingFlow()
    }

    // 重置狀態
    this.currentSession = null
    this.isFlowActive = false
    this.transcriptEntries = []

    this.logSuccess('清理完成')
  }

  /**
   * 開始錄音流程
   */
  async startRecordingFlow(title?: string, content?: string, startTs?: number, sttProvider?: STTProvider): Promise<SessionResponse> {
    this.logInfo('開始錄音流程', { title, content, startTs })

    try {
      // ① 先拿權限
      if (!(await this.recordingService.requestPermission())) {
        this.setAppState('default')
        throw new Error('麥克風權限被拒')
      }

      // === 🛠 追加: 若有現有活躍會話，先結束它，避免 Session 打架 ===
      const activeSession = await this.sessionService.checkActiveSession()
      if (activeSession) {
        this.logInfo('檢測到現有活躍會話，先完成它以避免衝突', {
          sessionId: activeSession.id,
          type: activeSession.type,
          status: activeSession.status
        })
        await this.sessionService.finishSession(activeSession.id)
        this.logSuccess('已完成現有活躍會話', { sessionId: activeSession.id })
      }
      // === 🛠 追加結束 ===

      // ② 建 Session（POST /session）
      const session = await this.sessionService.createRecordingSession(
        title || `錄音筆記 ${new Date().toLocaleString()}`,
        content,
        startTs,
        sttProvider
      )
      if (!session) {
        this.setAppState('default')
        throw new Error('建立 Session 失敗')
      }

      // ③ 啟動逐字稿服務
      await this.transcriptService.start(session.id)
      this.setAppState('processing')

      // 步驟 1: 使用新建立的會話
      this.currentSession = session
      this.logSuccess('錄音會話已準備', { sessionId: this.currentSession.id, withStartTs: !!startTs })

      // 步驟 2: 等待會話在資料庫中完全可見
      this.logInfo('步驟 2: 等待會話準備完成')
      const isReady = await this.sessionService.waitForSessionReady(this.currentSession.id, 5000)
      if (!isReady) {
        throw new Error('會話準備超時')
      }
      this.logSuccess('會話準備完成')

      // 步驟 3: 連接逐字稿服務
      this.logInfo('步驟 3: 連接逐字稿服務')
      await this.transcriptService.connect(this.currentSession.id)
      this.setupTranscriptListener()
      this.logSuccess('逐字稿服務連接成功')

      // 步驟 4: 開始錄音
      this.logInfo('步驟 4: 開始錄音')
      await this.recordingService.startRecording(this.currentSession.id)

      // 通知全域狀態：設置錄音開始時間，啟動計時器
      try {
        const setRecordingStart = (await import('../app-store-zustand')).useAppStore.getState().setRecordingStart
        setRecordingStart(Date.now())
        console.log('🕐 [RecordingFlowService] 已透過 AppStore 設置錄音開始時間')
      } catch (e) {
        console.warn('⚠️ [RecordingFlowService] 無法設置錄音開始時間:', e)
      }

      this.logSuccess('錄音啟動成功')

      // 標記流程為活躍
      this.isFlowActive = true

      this.logSuccess('錄音流程啟動完成', {
        sessionId: this.currentSession.id,
        isRecording: this.recordingService.isRecording(),
        transcriptConnected: this.transcriptService.isConnected(this.currentSession.id)
      })

      // 診斷資訊
      console.log('🎉 [RecordingFlowService] 錄音流程已完全啟動', {
        sessionId: this.currentSession.id,
        audioRecording: this.recordingService.isRecording() ? '✅ 錄音中' : '❌ 未錄音',
        transcriptWS: this.transcriptService.isConnected(this.currentSession.id) ? '✅ 已連接' : '❌ 未連接',
        recordingState: this.recordingService.getRecordingState(),
        timestamp: new Date().toISOString()
      })

      console.log('📋 [RecordingFlowService] 請檢查：')
      console.log('1. 應該每秒看到 [AudioRecorder] ondataavailable 觸發')
      console.log('2. 應該每秒看到 [AudioUploadWebSocket] Binary frame 已送出')
      console.log('3. DevTools > Network > WS > /ws/upload_audio 應該看到 binary frames')
      console.log('4. DevTools > Network > WS > /ws/transcript_feed 應該收到逐字稿')

      return this.currentSession

    } catch (error) {
      await this.cleanupFlowResources()
      this.handleError('開始錄音流程', error)
      throw error
    }
  }

  /**
   * 停止錄音流程
   */
  async stopRecordingFlow(): Promise<void> {
    this.logInfo('停止錄音流程')

    try {
      if (!this.isFlowActive || !this.currentSession) {
        this.logWarning('沒有活躍的錄音流程')
        return
      }

      const sessionId = this.currentSession.id

      // 步驟 1: 停止錄音
      this.logInfo('步驟 1: 停止錄音')
      if (this.recordingService.isRecording()) {
        await this.recordingService.stopRecording()
        this.logSuccess('錄音已停止')
      }

      // 步驟 2: 斷開逐字稿服務（保持連接以接收剩餘處理結果）
      this.logInfo('步驟 2: 斷開逐字稿服務')
      await this.transcriptService.disconnect(sessionId)
      this.logSuccess('逐字稿服務已斷開')

      // 步驟 3: 完成會話
      this.logInfo('步驟 3: 完成會話')
      await this.sessionService.finishSession(sessionId)
      this.logSuccess('會話已完成')

      // 重置流程狀態
      this.isFlowActive = false

      this.logSuccess('錄音流程停止完成', {
        sessionId,
        transcriptEntriesCount: this.transcriptEntries.length,
        finalRecordingTime: this.recordingService.getRecordingTime()
      })

    } catch (error) {
      this.handleError('停止錄音流程', error)
      throw error
    } finally {
      // 確保資源清理
      await this.cleanupFlowResources()
    }
  }

  /**
   * 取得當前會話
   */
  getCurrentSession(): SessionResponse | null {
    return this.currentSession
  }

  /**
   * 檢查流程是否活躍
   */
  isFlowRunning(): boolean {
    return this.isFlowActive
  }

  /**
   * 取得逐字稿項目
   */
  getTranscriptEntries(): Array<{ time: string; text: string }> {
    return [...this.transcriptEntries]
  }

  /**
   * 取得錄音狀態
   */
  getRecordingState() {
    return this.recordingService.getRecordingState()
  }

  /**
   * 設定逐字稿監聽器
   */
  private setupTranscriptListener(): void {
    if (!this.currentSession) return

    const sessionId = this.currentSession.id

    // 移除現有監聽器（如果有）
    this.transcriptService.removeTranscriptListener(sessionId, this.handleTranscriptMessage)

    // 添加新的監聽器
    this.transcriptService.addTranscriptListener(sessionId, this.handleTranscriptMessage)

    this.logInfo('逐字稿監聽器已設定', { sessionId })
  }

  /**
   * 處理逐字稿訊息
   */
  private handleTranscriptMessage = (msg: TranscriptMessage): void => {
    try {
      // 1. 判斷訊息型別
      if (
        (msg.type === 'transcript' || msg.type === 'transcript_segment') &&
        msg.text
      ) {
        /* 2. 計算 startSec
           a. 後端若有 start_time → 用它
           b. 否則用 chunk_sequence × 切片長度
        */
        const startSec =
          msg.start_time !== undefined
            ? msg.start_time
            : (msg.chunk_sequence ?? 0) * AUDIO_CHUNK_SEC;

        /* 3. 每隔 labelIntervalSec 秒插入一條時間碼 */
        if (startSec - this.lastLabelSec >= this.labelIntervalSec) {
          this.transcriptEntries.push({
            time: formatTime(startSec),
            text: '',              // 純時間標籤
          })
          this.lastLabelSec = startSec
        }

        /* 4. 真正的逐字稿行 */
        this.transcriptEntries.push({
          time: formatTime(startSec),
          text: msg.text.trim(),
        })
      } else if (msg.type === 'error') {
        this.logWarning('逐字稿錯誤', msg)
      } else if (msg.type === 'transcript_complete') {
        this.setAppState('finished')
        if (this.currentSession) {
          this.transcriptService.disconnect(this.currentSession.id)
        }
        this.isFlowActive = false
        this.logSuccess('收到 transcript_complete，流程結束')
      }
    } catch (e) {
      this.logWarning('處理逐字稿訊息失敗', e)
    }
  }

  /**
   * 清理流程資源
   */
  private async cleanupFlowResources(): Promise<void> {
    try {
      // 停止錄音（如果還在錄音）
      if (this.recordingService?.isRecording()) {
        await this.recordingService.stopRecording()
      }

      // 斷開逐字稿服務
      if (this.currentSession && this.transcriptService?.isConnected(this.currentSession.id)) {
        await this.transcriptService.disconnect(this.currentSession.id)
      }

      // 重置狀態
      this.currentSession = null
      this.isFlowActive = false

      this.logInfo('流程資源清理完成')
    } catch (error) {
      this.logWarning('清理流程資源時發生錯誤', error)
    }
  }

  /**
   * 取得流程詳細狀態
   */
  async getFlowStatus() {
    const baseStatus = this.getStatus()

    return {
      ...baseStatus,
      isFlowActive: this.isFlowActive,
      currentSession: this.currentSession,
      transcriptEntriesCount: this.transcriptEntries.length,
      recordingState: this.recordingService?.getRecordingState() || null,
      transcriptConnected: this.currentSession
        ? this.transcriptService?.isConnected(this.currentSession.id) || false
        : false
    }
  }
}


# END FILE CONTENTS


# File: frontend/components/ui/accordion.tsx

"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }


# END FILE CONTENTS


# File: app/utils/validators.py

"""
檔案驗證工具

實作各種檔案格式的基本驗證功能
"""

import logging

logger = logging.getLogger(__name__)


def valid_webm(head: bytes) -> bool:
    """
    驗證 WebM 檔案格式

    檢查 EBML header 魔術數字 0x1A45DFA3
    WebM 是基於 Matroska 容器格式，使用 EBML 編碼

    Args:
        head: 檔案開頭的位元組資料（至少需要 4 bytes）

    Returns:
        bool: 如果是有效的 WebM 檔案則返回 True
    """
    if len(head) < 4:
        logger.warning("檔案過小，無法進行 WebM 格式驗證")
        return False

    # EBML header 魔術數字: 0x1A45DFA3
    ebml_header = b"\x1A\x45\xDF\xA3"

    is_valid = head.startswith(ebml_header)

    if is_valid:
        logger.debug("✅ WebM 檔案格式驗證通過")
    else:
        logger.warning(f"❌ WebM 檔案格式驗證失敗: 期望 {ebml_header.hex()}, 實際 {head[:4].hex()}")

    return is_valid


def valid_audio_size(size_bytes: int, max_size: int = 5 * 1024 * 1024) -> bool:
    """
    驗證音檔大小

    Args:
        size_bytes: 檔案大小（位元組）
        max_size: 最大允許大小（預設 5MB）

    Returns:
        bool: 如果檔案大小在允許範圍內則返回 True
    """
    is_valid = 0 < size_bytes <= max_size

    if is_valid:
        logger.debug(f"✅ 音檔大小驗證通過: {size_bytes} bytes")
    else:
        logger.warning(f"❌ 音檔大小驗證失敗: {size_bytes} bytes (限制: {max_size} bytes)")

    return is_valid


def valid_sequence_number(seq: int, min_seq: int = 0, max_seq: int = 9999) -> bool:
    """
    驗證序號範圍

    Args:
        seq: 序號
        min_seq: 最小序號（預設 0）
        max_seq: 最大序號（預設 9999）

    Returns:
        bool: 如果序號在有效範圍內則返回 True
    """
    is_valid = min_seq <= seq <= max_seq

    if is_valid:
        logger.debug(f"✅ 序號驗證通過: {seq}")
    else:
        logger.warning(f"❌ 序號驗證失敗: {seq} (範圍: {min_seq}-{max_seq})")

    return is_valid


# END FILE CONTENTS


# File: frontend/components/ui/input.tsx

import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }


# END FILE CONTENTS


# File: frontend/hooks/use-notes.ts

"use client"

import { useState, useCallback, useRef, useEffect, useMemo } from 'react'
import { notesAPI, type NoteUpdateRequest, type NoteResponse } from '../lib/api'
import { useLocalDraft } from './use-local-draft'

interface UseNotesReturn {
    noteContent: string
    lastSaved: Date | null
    isSaving: boolean
    error: string | null
    updateNote: (content: string) => void
    saveNote: (sessionId: string) => Promise<void>
    loadNote: (sessionId: string) => Promise<void>
    clearNote: () => void
    // 本地草稿相關
    hasDraft: boolean
    lastDraftTime: Date | null
    restoreDraft: () => void
    clearDraft: () => void
}

export function useNotes(): UseNotesReturn {
    const [noteContent, setNoteContent] = useState('')
    const [lastSaved, setLastSaved] = useState<Date | null>(null)
    const [isSaving, setIsSaving] = useState(false)
    const [error, setError] = useState<string | null>(null)

    const autoSaveTimeoutRef = useRef<NodeJS.Timeout | null>(null)
    const lastContentRef = useRef('')
    const currentSessionIdRef = useRef<string | null>(null)

    // 使用本地草稿功能
    const localDraft = useLocalDraft(currentSessionIdRef.current || undefined)

    // 清除自動儲存計時器
    const clearAutoSaveTimeout = useCallback(() => {
        if (autoSaveTimeoutRef.current) {
            clearTimeout(autoSaveTimeoutRef.current)
            autoSaveTimeoutRef.current = null
        }
    }, [])

    // 執行儲存操作
    const performSave = useCallback(async (sessionId: string, content: string): Promise<void> => {
        if (!content.trim() || content === lastContentRef.current) {
            return // 沒有變更，不需要儲存
        }

        setIsSaving(true)
        setError(null)

        try {
            const updateData: NoteUpdateRequest = {
                content,
                client_ts: new Date().toISOString()
            }

            await notesAPI.updateNote(sessionId, updateData)

            setLastSaved(new Date())
            lastContentRef.current = content
            console.log('✅ 筆記儲存成功')

        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : '儲存筆記失敗'
            setError(errorMessage)
            console.error('❌ 儲存筆記失敗:', err)
        } finally {
            setIsSaving(false)
        }
    }, [])

    // 手動儲存筆記
    const saveNote = useCallback(async (sessionId: string): Promise<void> => {
        clearAutoSaveTimeout()
        await performSave(sessionId, noteContent)
    }, [noteContent, performSave, clearAutoSaveTimeout])

    // 更新筆記內容（觸發自動儲存）
    const updateNote = useCallback((content: string): void => {
        setNoteContent(content)

        // 立即儲存本地草稿
        localDraft.saveDraft(content)

        // 如果有 session ID，設定自動儲存到伺服器
        if (currentSessionIdRef.current) {
            clearAutoSaveTimeout()

            // 10 秒後自動儲存到伺服器
            autoSaveTimeoutRef.current = setTimeout(() => {
                performSave(currentSessionIdRef.current!, content)
            }, 10000)
        }
    }, [performSave, clearAutoSaveTimeout, localDraft])

    // 載入筆記
    const loadNote = useCallback(async (sessionId: string): Promise<void> => {
        currentSessionIdRef.current = sessionId
        setError(null)

        try {
            const note = await notesAPI.getNote(sessionId)
            const serverContent = note.content
            const serverTimestamp = new Date(note.updated_at)

            // 檢查是否有較新的本地草稿
            if (localDraft.hasDraft && localDraft.isDraftNewer(serverTimestamp)) {
                console.log('⚠️ 發現較新的本地草稿，使用草稿內容')
                setNoteContent(localDraft.draftContent)
                lastContentRef.current = localDraft.draftContent
                // 不設定 lastSaved，因為草稿內容尚未同步到伺服器
            } else {
                setNoteContent(serverContent)
                lastContentRef.current = serverContent
                setLastSaved(serverTimestamp)
                // 清除過時的本地草稿
                localDraft.clearDraft()
            }

            console.log('✅ 筆記載入成功')

        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : '載入筆記失敗'
            setError(errorMessage)
            console.error('❌ 載入筆記失敗:', err)

            // 如果筆記不存在，檢查是否有本地草稿
            if (errorMessage.includes('404') || errorMessage.includes('not found')) {
                if (localDraft.hasDraft) {
                    console.log('📝 使用本地草稿內容')
                    setNoteContent(localDraft.draftContent)
                } else {
                    setNoteContent('')
                }
                lastContentRef.current = ''
                console.log('🔄 初始化空筆記')
            }
        }
    }, [localDraft])

    // 清除筆記
    const clearNote = useCallback(() => {
        clearAutoSaveTimeout()
        setNoteContent('')
        setLastSaved(null)
        setError(null)
        lastContentRef.current = ''
        currentSessionIdRef.current = null
        localDraft.clearDraft()
        console.log('🔄 筆記已清除')
    }, [clearAutoSaveTimeout, localDraft])

    // 還原本地草稿
    const restoreDraft = useCallback(() => {
        const draftContent = localDraft.loadDraft()
        if (draftContent) {
            setNoteContent(draftContent)
            console.log('🔄 已還原本地草稿')
        }
    }, [localDraft])

    // 組件卸載時清理
    useEffect(() => {
        return () => {
            clearAutoSaveTimeout()
        }
    }, [clearAutoSaveTimeout])

    return useMemo(() => ({
        noteContent,
        lastSaved,
        isSaving,
        error,
        updateNote,
        saveNote,
        loadNote,
        clearNote,
        hasDraft: localDraft.hasDraft,
        lastDraftTime: localDraft.lastDraftTime,
        restoreDraft,
        clearDraft: localDraft.clearDraft,
    }), [
        noteContent,
        lastSaved,
        isSaving,
        error,
        updateNote,
        saveNote,
        loadNote,
        clearNote,
        localDraft.hasDraft,
        localDraft.lastDraftTime,
        restoreDraft,
        localDraft.clearDraft,
    ])
}


# END FILE CONTENTS


# File: frontend/hooks/use-transcript-new.ts

"use client"

import { useState, useCallback, useRef, useEffect } from 'react'
import { useAppStateContext } from './use-app-state-context'
import { isFeatureEnabled } from '../lib/feature-flags'
import { SERVICE_KEYS, serviceContainer } from '../lib/services'
import type { ITranscriptService, TranscriptMessage } from '../lib/services'

interface UseTranscriptNewReturn {
    transcripts: TranscriptMessage[]
    isConnected: boolean
    isCompleted: boolean
    error: string | null
    connect: (sessionId: string) => Promise<void>
    disconnect: () => void
    clearTranscripts: () => void
    // 自動捲動功能
    autoScrollEnabled: boolean
    enableAutoScroll: () => void
    disableAutoScroll: () => void
    scrollToLatest: () => void
    setScrollContainer: (element: HTMLElement | null) => void
}

/**
 * useTranscriptNew - 逐字稿管理 Hook (適配器層)
 *
 * 重構為適配器層：
 * - 內部調用 TranscriptService 而非直接使用 transcriptManager
 * - 保持對外接口完全不變，確保組件層無感知變更
 * - 保持 TranscriptManager 的獨立性和 WebSocket 重連機制
 */
export function useTranscriptNew(): UseTranscriptNewReturn {
    // 使用新的 Context 狀態管理
    const context = useAppStateContext()

    // 本地狀態（保持 TranscriptService 獨立性，避免影響 WebSocket 重連機制）
    const [isConnected, setIsConnected] = useState(false)
    const [isCompleted, setIsCompleted] = useState(false)
    const [localError, setLocalError] = useState<string | null>(null)
    const [autoScrollEnabled, setAutoScrollEnabled] = useState(true)

    const containerRef = useRef<HTMLElement | null>(null)
    const currentSessionIdRef = useRef<string | null>(null)
    const transcriptServiceRef = useRef<ITranscriptService | null>(null)

    console.log('🔄 [useTranscriptNew] Hook 初始化 (適配器層)', {
        useNewStateManagement: isFeatureEnabled('useNewStateManagement'),
        useNewTranscriptHook: isFeatureEnabled('useNewTranscriptHook'),
        contextTranscriptCount: context.appData.transcriptEntries.length,
    })

    // 初始化服務實例
    const initializeService = useCallback(() => {
        if (!transcriptServiceRef.current) {
            try {
                transcriptServiceRef.current = serviceContainer.resolve<ITranscriptService>(SERVICE_KEYS.TRANSCRIPT_SERVICE)
                console.log('✅ [useTranscriptNew] TranscriptService 初始化成功')
            } catch (error) {
                console.error('❌ [useTranscriptNew] 無法解析 TranscriptService:', error)
                throw new Error('逐字稿服務初始化失敗')
            }
        }
    }, [])

    // 處理逐字稿接收與合併邏輯 - 整合 Context
    const handleTranscript = useCallback((transcript: TranscriptMessage) => {
        if (transcript.type === 'transcript_complete') {
            setIsCompleted(true)
            // 觸發狀態轉換
            context.transition('PROCESSING_COMPLETED')
            return
        }

        const anyMessage = transcript as any
        if (anyMessage.type === 'error') {
            const errorMessage = anyMessage.error_message || '轉錄過程中發生錯誤'
            setLocalError(errorMessage)
            context.setError(errorMessage)
            return
        }

        if (transcript.type === 'transcript_segment' && transcript.text) {
            const startTime = transcript.start_time ?? 0
            const hours = Math.floor(startTime / 3600)
            const minutes = Math.floor((startTime % 3600) / 60)
            const seconds = Math.floor(startTime % 60)
            const timeStr = `${hours.toString().padStart(2, "0")}:${minutes.toString().padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`

            context.addTranscriptEntry({
                time: timeStr,
                text: transcript.text,
            })
        }
    }, [context])

    // 自動捲動功能
    const scrollToLatest = useCallback(() => {
        if (containerRef.current && autoScrollEnabled) {
            containerRef.current.scrollTop = containerRef.current.scrollHeight
        }
    }, [autoScrollEnabled])

    // 檢測使用者滾動 - 離底部 >60px 時禁用自動捲動
    const handleScroll = useCallback((event: Event) => {
        const container = event.target as HTMLElement
        if (!container) return

        const { scrollTop, scrollHeight, clientHeight } = container
        const distanceFromBottom = scrollHeight - scrollTop - clientHeight

        if (distanceFromBottom > 60) {
            setAutoScrollEnabled(false)
        } else if (distanceFromBottom <= 10) {
            setAutoScrollEnabled(true)
        }
    }, [])

    // 設定自動捲動容器
    const setScrollContainer = useCallback((element: HTMLElement | null) => {
        if (containerRef.current) {
            containerRef.current.removeEventListener('scroll', handleScroll)
        }

        containerRef.current = element

        if (element) {
            element.addEventListener('scroll', handleScroll)
        }
    }, [handleScroll])

    // 啟用自動捲動
    const enableAutoScroll = useCallback(() => {
        setAutoScrollEnabled(true)
        scrollToLatest()
    }, [scrollToLatest])

    // 禁用自動捲動
    const disableAutoScroll = useCallback(() => {
        setAutoScrollEnabled(false)
    }, [])

    // 連接 TranscriptService - 使用服務層
    const connect = useCallback(async (sessionId: string): Promise<void> => {
        try {
            setLocalError(null)
            context.setError(null)
            setIsCompleted(false)

            console.log('🔌 [useTranscriptNew] 連接逐字稿服務 (適配器層):', sessionId)

            // 初始化服務
            initializeService()
            const transcriptService = transcriptServiceRef.current!

            // 先移除之前的監聽器
            if (currentSessionIdRef.current) {
                transcriptService.removeTranscriptListener(currentSessionIdRef.current, handleTranscript)
            }

            // 使用服務層連接
            await transcriptService.connect(sessionId)
            transcriptService.addTranscriptListener(sessionId, handleTranscript)

            currentSessionIdRef.current = sessionId
            setIsConnected(transcriptService.isConnected(sessionId))

            console.log('✅ [useTranscriptNew] 逐字稿服務連接成功 (服務層):', sessionId)

        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : '連接逐字稿服務失敗'
            setLocalError(errorMessage)
            context.setError(errorMessage)
            setIsConnected(false)
            console.error('❌ [useTranscriptNew] 連接逐字稿服務失敗:', err)
        }
    }, [handleTranscript, context, initializeService])

    // 斷開連接 - 使用服務層
    const disconnect = useCallback(() => {
        console.log('🔌 [useTranscriptNew] 斷開逐字稿服務 (適配器層)')

        const transcriptService = transcriptServiceRef.current
        if (currentSessionIdRef.current && transcriptService) {
            transcriptService.removeTranscriptListener(currentSessionIdRef.current, handleTranscript)

            // 使用服務層斷開連接（如果有會話ID）
            transcriptService.disconnect(currentSessionIdRef.current)

            currentSessionIdRef.current = null
        }

        setIsConnected(false)
        console.log('✅ [useTranscriptNew] 逐字稿服務斷開成功 (服務層)')
    }, [handleTranscript])

    // 清空逐字稿 - 使用 Context
    const clearTranscripts = useCallback(() => {
        context.setTranscriptEntries([])
        setIsCompleted(false)
        console.log('🔄 [useTranscriptNew] 逐字稿已清除 (適配器層)')
    }, [context])

    // 自動捲動效果
    useEffect(() => {
        if (context.appData.transcriptEntries.length > 0) {
            scrollToLatest()
        }
    }, [context.appData.transcriptEntries, scrollToLatest])

    // 清理資源
    useEffect(() => {
        return () => {
            const transcriptService = transcriptServiceRef.current
            if (currentSessionIdRef.current && transcriptService) {
                transcriptService.removeTranscriptListener(currentSessionIdRef.current, handleTranscript)
            }

            if (containerRef.current) {
                containerRef.current.removeEventListener('scroll', handleScroll)
            }
        }
    }, [handleTranscript, handleScroll])

    // 轉換 Context 中的 transcriptEntries 為 TranscriptMessage 格式（向後相容）
    const compatibleTranscripts: TranscriptMessage[] = context.appData.transcriptEntries.map((entry, index) => ({
        type: 'transcript_segment',
        text: entry.text,
        start_time: 0,
        end_time: 0,
        start_sequence: index,
        confidence: 1.0,
        timestamp: Date.now(),
    }))

    return {
        transcripts: compatibleTranscripts,
        isConnected,
        isCompleted,
        error: context.error || localError,
        connect,
        disconnect,
        clearTranscripts,
        autoScrollEnabled,
        enableAutoScroll,
        disableAutoScroll,
        scrollToLatest,
        setScrollContainer,
    }
}


# END FILE CONTENTS


# File: app/db/__init__.py



# END FILE CONTENTS


# File: e2e/export-api.spec.ts

const TEST_SESSION_ID = 'EE002F79-B1C1-4900-A0BA-C81FDA4F89FD'


# END FILE CONTENTS


# File: main.py

"""
StudyScriber FastAPI 應用程式主入口

雲端筆記應用：邊錄邊轉錄，支援純筆記與錄音模式
"""

import os
import uvicorn
from contextlib import asynccontextmanager
from fastapi import FastAPI, HTTPException, WebSocket
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse, Response
from datetime import datetime
import logging

# Task 5: Prometheus 監控支援
try:
    from prometheus_client import generate_latest, CONTENT_TYPE_LATEST
    PROMETHEUS_AVAILABLE = True
except ImportError:
    PROMETHEUS_AVAILABLE = False

from app.db.database import auto_init_database, check_database_connection, check_tables_exist, get_database_stats, get_database_mode
from app.api.sessions import router as sessions_router
from app.api.notes import router as notes_router
from app.api.segments import router as segments_router
from app.ws.upload_audio import router as upload_audio_router
from app.ws.transcript_feed import router as transcript_feed_router
from app.core.ffmpeg import check_ffmpeg_health
from app.core.config import settings
from app.core.container import container
from app.services.stt.factory import get_provider
from app.services.azure_openai_v2 import queue_manager

# 配置日誌
logging.basicConfig(level=settings.LOG_LEVEL, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    應用程式生命週期管理

    啟動時初始化資料庫，關閉時清理資源
    """
    # 啟動時執行
    logger.info("🚀 StudyScriber 正在啟動...")
    check_ffmpeg_health()
    await check_database_connection()

    # Task 3: 啟動隊列管理器
    try:
        await queue_manager.start_workers()
        logger.info("✅ 轉錄隊列管理器啟動成功")
    except Exception as e:
        logger.error(f"❌ 隊列管理器啟動失敗: {e}")

    yield

    # 關閉時執行
    logger.info("🔄 StudyScriber 正在關閉...")

    # Task 3: 停止隊列管理器
    try:
        await queue_manager.stop_workers()
        logger.info("✅ 轉錄隊列管理器已停止")
    except Exception as e:
        logger.warning(f"⚠️ 隊列管理器停止時發生錯誤: {e}")

# 建立 FastAPI 應用程式
app = FastAPI(
    title="StudyScriber API",
    description="雲端筆記應用：邊錄邊轉錄，支援純筆記與錄音模式",
    version="0.1.0",
    lifespan=lifespan
)

# CORS 設定
cors_origins = os.getenv("CORS_ORIGINS", "http://localhost:3000").split(",")
app.add_middleware(
    CORSMiddleware,
    allow_origins=cors_origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# 註冊路由
app.include_router(sessions_router)
app.include_router(notes_router)
app.include_router(segments_router)
app.include_router(upload_audio_router)
app.include_router(transcript_feed_router)


@app.get("/")
async def root():
    """根路由 - API 狀態檢查"""
    return {
        "message": "StudyScriber API is running",
        "version": "0.1.0",
        "status": "healthy"
    }


@app.get("/debug/container")
async def debug_container():
    """除錯端點 - 檢查 provider 狀態"""
    try:
        # 查詢 provider 狀態
        # 這裡僅示範查詢一個 session（可根據實際需求調整）
        from uuid import UUID
        test_session_id = UUID("00000000-0000-0000-0000-000000000000")  # TODO: 改為實際 session id
        provider = get_provider(test_session_id)
        return {
            "status": "success",
            "provider": provider.name(),
            "class_name": type(provider).__name__,
        }
    except Exception as e:
        return {
            "status": "error",
            "error": str(e)
        }


@app.get("/health")
async def health_check():
    """健康檢查端點"""
    try:
        db_ok = await check_database_connection()
        if not db_ok:
            raise HTTPException(status_code=503, detail="Database connection failed")
        tables_ok = await check_tables_exist()
        if not tables_ok:
            raise HTTPException(status_code=503, detail="Database tables missing")
        ffmpeg_health = check_ffmpeg_health()
        # 查詢 provider 狀態
        from uuid import UUID
        test_session_id = UUID("00000000-0000-0000-0000-000000000000")  # TODO: 改為實際 session id
        try:
            provider = get_provider(test_session_id)
            provider_available = provider is not None
        except Exception as e:
            logger.warning(f"Provider 解析失敗: {e}")
            provider_available = False
        return {
            "status": "healthy",
            "database": "connected",
            "tables": "available",
            "services": {
                "ffmpeg": {
                    "available": ffmpeg_health['ffmpeg_available'],
                    "status": ffmpeg_health['status'],
                    "version": ffmpeg_health.get('version', 'N/A'),
                    "processes": {
                        "active": ffmpeg_health.get('active_processes', 0),
                        "pooled": ffmpeg_health.get('pooled_processes', 0),
                        "max": ffmpeg_health.get('max_processes', 3)
                    }
                },
                "provider": {
                    "available": provider_available,
                    "service": provider.name() if provider_available else "Disabled"
                }
            }
        }
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=503, detail=f"Health check failed: {str(e)}")


@app.get("/database")
async def database_info():
    """資料庫資訊端點"""
    try:
        # 取得資料庫統計
        db_stats = await get_database_stats()

        # 取得連接模式
        connection_mode = get_database_mode()

        # 檢查連接狀態
        connection_ok = await check_database_connection()

        # 檢查表格狀態
        tables_ok = await check_tables_exist()

        return {
            "status": "success",
            "timestamp": datetime.utcnow().isoformat(),
            "connection": {
                "mode": connection_mode,
                "status": "connected" if connection_ok else "disconnected",
                "tables_available": tables_ok
            },
            "statistics": db_stats
        }

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"無法取得資料庫資訊: {str(e)}")


@app.get("/performance")
async def performance_stats():
    """效能統計端點"""
    try:
        # 取得轉錄服務效能統計
        # 這裡需要根據實際的 provider 架構來調整，
        # 例如，如果 provider 本身有 get_performance_report 方法
        # 則可以從 provider 獲取，否則返回預設值。
        # 目前，我們只保留了 queue_manager 的啟動/關閉，
        # 所以這裡返回一個預設值。
        return {
            "status": "success",
            "timestamp": datetime.utcnow().isoformat(),
            "transcription_service": {"status": "no_stats_available"},
            "ffmpeg_service": {
                "status": "N/A",
                "available": False,
                "active_processes": 0,
                "pooled_processes": 0
            }
        }

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"無法取得效能統計: {str(e)}")


@app.get("/debug/queue")
async def debug_queue():
    """Task 3 & 4: 除錯端點 - 檢查隊列狀態"""
    try:
        stats = queue_manager.get_stats()
        return {
            "status": "success",
            "queue_stats": stats,
            "timestamp": datetime.utcnow().isoformat()
        }
    except Exception as e:
        return {
            "status": "error",
            "queue_stats": {
                "error": str(e)
            }
        }


@app.get("/metrics")
async def metrics():
    """Task 5: Prometheus 監控指標端點"""
    if not PROMETHEUS_AVAILABLE:
        raise HTTPException(
            status_code=503,
            detail="Prometheus metrics not available - prometheus-client not installed"
        )

    try:
        # 生成 Prometheus 格式的監控指標
        metrics_data = generate_latest()
        return Response(
            content=metrics_data,
            media_type=CONTENT_TYPE_LATEST,
            headers={
                "Content-Type": CONTENT_TYPE_LATEST,
                "Cache-Control": "no-cache, no-store, must-revalidate",
                "Pragma": "no-cache",
                "Expires": "0"
            }
        )
    except Exception as e:
        logger.error(f"Failed to generate metrics: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Failed to generate metrics: {str(e)}"
        )


# 全域例外處理器
@app.exception_handler(Exception)
async def global_exception_handler(request, exc):
    """全域例外處理"""
    return JSONResponse(
        status_code=500,
        content={
            "error": "Internal server error",
            "message": str(exc),
            "path": str(request.url)
        }
    )


if __name__ == "__main__":
    # 設置 workers=1 確保在單一進程中運行，
    # 這對於使用內存存儲 WebSocket 連接狀態至關重要。
    # 多進程會導致每個進程有獨立的 ConnectionManager 實例。
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        workers=1
    )


# END FILE CONTENTS


# File: app/services/stt/lang_map.py

"""Convert canonical BCP-47 lang_code ⇄ provider-specific code."""

_CANONICAL_TO_SHORT = {
    "zh-TW": "zh",
    "zh":    "zh",
    "en-US": "en",
    "en":    "en",
}

def to_whisper(code: str) -> str:
    """Whisper 端點語言碼（ISO-639-1，小寫；未知→'auto')."""
    return _CANONICAL_TO_SHORT.get(code, "auto")

def to_gpt4o(code: str) -> str:
    """GPT-4o speech-transcribe 語言碼（同 Whisper）"""
    return _CANONICAL_TO_SHORT.get(code, "auto")


# END FILE CONTENTS


# File: frontend/components/ui/aspect-ratio.tsx

"use client"

import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }


# END FILE CONTENTS


# File: app/services/stt/gpt4o_provider.py

# app/services/stt/gpt4o_provider.py
from __future__ import annotations

import logging
from datetime import datetime
from io import BytesIO
from typing import Any, Dict
from uuid import UUID

from openai import AsyncAzureOpenAI, RateLimitError

from app.core.config import get_settings
from app.core.ffmpeg import detect_audio_format, webm_to_wav
from app.db.database import get_supabase_client
from app.services.stt.interfaces import ISTTProvider
from app.services.stt.lang_map import to_gpt4o
from app.utils.timer import PerformanceTimer
from app.utils.timing import calc_times

settings = get_settings()
logger = logging.getLogger(__name__)


class GPT4oProvider(ISTTProvider):
    """Azure GPT-4o Audio Transcriptions"""

    name = "gpt4o"
    _client: AsyncAzureOpenAI | None = None

    # ---------- client singleton ------------------------------------
    @classmethod
    def _client_lazy(cls) -> AsyncAzureOpenAI:
        if cls._client is None:
            api_key_raw = settings.AZURE_OPENAI_API_KEY
            api_key = (
                api_key_raw.get_secret_value()
                if hasattr(api_key_raw, "get_secret_value")
                else api_key_raw
            )
            cls._client = AsyncAzureOpenAI(
                api_key=api_key,
                azure_endpoint=settings.AZURE_OPENAI_ENDPOINT,
                api_version="2024-06-01",
                timeout=(5, 55),          # connect / read
                max_retries=2,
            )
        return cls._client

    # ---------- main -------------------------------------------------
    async def transcribe(
        self,
        audio: bytes,
        session_id: UUID,
        chunk_seq: int,
    ) -> Dict[str, Any] | None:
        """
        • 將 WebM→WAV（16 kHz mono）
        • 呼叫 GPT-4o 取得 text
        • 回傳統一欄位；None 代表跳過
        """

        # 1. 取得 canonical lang_code → zh / en / auto
        supa = get_supabase_client()
        row = (
            supa.table("sessions").select("lang_code")
            .eq("id", str(session_id)).single().execute()
        )
        canonical = (row.data or {}).get("lang_code", "zh-TW")
        api_lang = to_gpt4o(canonical)

        # 2. 轉 WAV
        fmt = detect_audio_format(audio)
        if fmt not in ("webm", "wav"):
            logger.error("GPT4o 不支援格式 %s", fmt)
            return None

        wav_bytes = await webm_to_wav(audio) if fmt == "webm" else audio
        if not wav_bytes:
            logger.error("WebM→WAV 轉換失敗 %s seq=%s", session_id, chunk_seq)
            return None

        # 3. 呼叫 GPT-4o
        client = self._client_lazy()
        with PerformanceTimer(f"gpt4o chunk {chunk_seq}"):
            try:
                # (filename, bytes/IO, mime)
                file_tuple = ("chunk.wav", wav_bytes, "audio/wav")
                resp = await client.audio.transcriptions.create(
                    model=settings.GPT4O_DEPLOYMENT_NAME,
                    file=file_tuple,
                    language=api_lang,
                    response_format="json",
                    prompt=settings.GPT4O_TRANSCRIBE_PROMPT or None,
                )
            except RateLimitError as e:
                logger.warning("GPT4o 429: %s", e)
                raise
            except Exception as e:
                logger.error("GPT4o API error: %s", e, exc_info=True)
                return None

        text = getattr(resp, "text", "").strip()
        if not text:
            logger.info("GPT4o 空白文字 %s seq=%s", session_id, chunk_seq)
            return None

        # 4. 時間戳 = chunk_seq × D
        start_time, end_time = calc_times(chunk_seq)

        return {
            "text": text,
            "chunk_sequence": chunk_seq,
            "session_id": str(session_id),
            "lang_code": canonical,
            "start_time": start_time,
            "end_time": end_time,
            "timestamp": datetime.utcnow().isoformat(),
            "duration": settings.AUDIO_CHUNK_DURATION_SEC,
        }

    # ---------- meta -----------------------------------------------
    def max_rpm(self) -> int:
        return getattr(settings, "GPT4O_MAX_REQUESTS", 60)


# END FILE CONTENTS


# File: frontend/components/ui/badge.tsx

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }


# END FILE CONTENTS


# File: app/schemas/note.py

"""
StudyScriber Note Pydantic 模型

定義筆記相關的請求和響應模型
"""

from datetime import datetime
from typing import Optional
from uuid import UUID
from pydantic import BaseModel, Field, ConfigDict, field_validator


class NoteSaveRequest(BaseModel):
    """儲存筆記請求"""
    content: str = Field(description="筆記內容（Markdown 格式）")
    client_ts: Optional[datetime] = Field(None, description="客戶端時間戳")

    @field_validator('content')
    @classmethod
    def validate_content_length(cls, v: str) -> str:
        """驗證筆記內容長度（限制 1MB）"""
        if len(v.encode('utf-8')) > 1024 * 1024:  # 1MB limit
            raise ValueError('筆記內容超過 1MB 限制')
        return v


class NoteOut(BaseModel):
    """筆記輸出模型"""
    model_config = ConfigDict(
        from_attributes=True,
        json_encoders={UUID: str}  # 添加 UUID 到字串的序列化器
    )

    session_id: UUID = Field(description="會話 ID")
    content: str = Field(description="筆記內容")
    updated_at: datetime = Field(description="伺服器更新時間")
    client_ts: Optional[datetime] = Field(None, description="客戶端時間戳")


class NoteSaveResponse(BaseModel):
    """筆記儲存響應"""
    success: bool = Field(description="儲存是否成功")
    message: str = Field(description="回應訊息")
    server_ts: datetime = Field(description="伺服器時間戳")
    note: Optional[NoteOut] = Field(None, description="更新後的筆記資料")


class NoteConflictError(BaseModel):
    """筆記衝突錯誤（客戶端時間戳較舊）"""
    model_config = ConfigDict(json_encoders={UUID: str})

    error: str = Field("note_conflict", description="錯誤類型")
    message: str = Field(description="錯誤訊息")
    server_note: NoteOut = Field(description="伺服器端較新的筆記資料")
    client_ts: Optional[datetime] = Field(None, description="客戶端時間戳")
    server_ts: datetime = Field(description="伺服器時間戳")


# END FILE CONTENTS


# File: frontend/hooks/use-mobile.tsx

import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}


# END FILE CONTENTS


# File: frontend/__tests__/integration/app-state-provider.test.tsx

import { beforeEach, describe, expect, test, vi } from 'vitest'
import { render, screen, act } from '@testing-library/react'
import { createElement } from 'react'
import { AppStateProviderWrapper } from '../../providers/app-state-provider-wrapper'
import { useAppState } from '../../hooks/use-app-state-adapter'
import { featureFlagManager } from '../../lib/feature-flags'

// Mock 外部依賴
vi.mock('../../hooks/use-session-adapter', () => ({
    useSession: vi.fn(() => ({
        currentSession: null,
        isLoading: false,
        error: null,
        createNoteSession: vi.fn(),
        createRecordingSession: vi.fn(),
        upgradeToRecording: vi.fn(),
        finishSession: vi.fn(),
        deleteSession: vi.fn(),
        checkActiveSession: vi.fn(),
    }))
}))

vi.mock('../../hooks/use-recording-adapter', () => ({
    useRecording: vi.fn(() => ({
        isRecording: false,
        recordingTime: 0,
        transcripts: [],
        error: null,
        startRecording: vi.fn(),
        stopRecording: vi.fn(),
        clearTranscripts: vi.fn(),
    }))
}))

vi.mock('../../hooks/use-notes', () => ({
    useNotes: vi.fn(() => ({
        noteContent: '',
        loadNote: vi.fn(),
        clearNote: vi.fn(),
    }))
}))

vi.mock('../../hooks/use-transcript-adapter', () => ({
    useTranscript: vi.fn(() => ({
        isConnected: false,
        error: null,
        autoScrollEnabled: true,
        disconnect: vi.fn(),
        clearTranscripts: vi.fn(),
        enableAutoScroll: vi.fn(),
        disableAutoScroll: vi.fn(),
        scrollToLatest: vi.fn(),
    }))
}))

vi.mock('@/components/ui/use-toast', () => ({
    useToast: vi.fn(() => ({
        toast: vi.fn(),
    }))
}))

// 測試組件
function TestComponent() {
    const { appData, isLoading, error } = useAppState()

    return createElement('div', { 'data-testid': 'test-component' }, [
        createElement('div', { 'data-testid': 'app-state', key: 'state' }, appData.state),
        createElement('div', { 'data-testid': 'is-recording', key: 'recording' }, String(appData.isRecording)),
        createElement('div', { 'data-testid': 'is-loading', key: 'loading' }, String(isLoading)),
        createElement('div', { 'data-testid': 'error', key: 'error' }, error || 'null'),
    ])
}

describe('AppStateProvider 整合測試', () => {
    beforeEach(() => {
        vi.clearAllMocks()
        // 重置功能開關
        featureFlagManager.reset()
        // 清除 localStorage
        localStorage.clear()
    })

    test('在功能開關關閉時應該使用舊系統', () => {
        // 確保功能開關關閉
        featureFlagManager.disable('useNewStateManagement')
        featureFlagManager.disable('useNewAppStateHook')

        render(
            createElement(AppStateProviderWrapper, null,
                createElement(TestComponent)
            )
        )

        // 檢查組件是否正常渲染
        expect(screen.getByTestId('test-component')).toBeInTheDocument()
        expect(screen.getByTestId('app-state')).toHaveTextContent('default')
        expect(screen.getByTestId('is-recording')).toHaveTextContent('false')
        // 注意：舊系統在初始化時可能會有 loading 狀態，這是正常的
        expect(screen.getByTestId('is-loading')).toBeInTheDocument()
        expect(screen.getByTestId('error')).toHaveTextContent('null')
    })

    test('在啟用 useNewStateManagement 時應該使用新系統', () => {
        // 啟用新狀態管理
        featureFlagManager.enable('useNewStateManagement')

        render(
            createElement(AppStateProviderWrapper, null,
                createElement(TestComponent)
            )
        )

        // 檢查組件是否正常渲染
        expect(screen.getByTestId('test-component')).toBeInTheDocument()
        expect(screen.getByTestId('app-state')).toHaveTextContent('default')
        expect(screen.getByTestId('is-recording')).toHaveTextContent('false')
        expect(screen.getByTestId('is-loading')).toHaveTextContent('false')
        expect(screen.getByTestId('error')).toHaveTextContent('null')
    })

    test('在啟用 useNewAppStateHook 時應該使用新系統', () => {
        // 啟用新 AppState Hook
        featureFlagManager.enable('useNewAppStateHook')

        render(
            createElement(AppStateProviderWrapper, null,
                createElement(TestComponent)
            )
        )

        // 檢查組件是否正常渲染
        expect(screen.getByTestId('test-component')).toBeInTheDocument()
        expect(screen.getByTestId('app-state')).toHaveTextContent('default')
        expect(screen.getByTestId('is-recording')).toHaveTextContent('false')
        expect(screen.getByTestId('is-loading')).toHaveTextContent('false')
        expect(screen.getByTestId('error')).toHaveTextContent('null')
    })

    test('Provider 應該能夠包裝多個子組件', () => {
        featureFlagManager.enable('useNewStateManagement')

        function MultipleChildrenTest() {
            return createElement('div', null, [
                createElement(TestComponent, { key: 'child1' }),
                createElement(TestComponent, { key: 'child2' }),
            ])
        }

        render(
            createElement(AppStateProviderWrapper, null,
                createElement(MultipleChildrenTest)
            )
        )

        // 檢查所有子組件都能正常存取狀態
        const components = screen.getAllByTestId('test-component')
        expect(components).toHaveLength(2)

        components.forEach(component => {
            expect(component).toBeInTheDocument()
        })
    })

    test('功能開關切換應該不會影響組件渲染', () => {
        // 開始時關閉功能開關
        featureFlagManager.disable('useNewStateManagement')
        featureFlagManager.disable('useNewAppStateHook')

        const { rerender } = render(
            createElement(AppStateProviderWrapper, null,
                createElement(TestComponent)
            )
        )

        // 檢查初始狀態
        expect(screen.getByTestId('app-state')).toHaveTextContent('default')

        // 啟用功能開關並重新渲染
        act(() => {
            featureFlagManager.enable('useNewStateManagement')
        })

        rerender(
            createElement(AppStateProviderWrapper, null,
                createElement(TestComponent)
            )
        )

        // 檢查狀態仍然正常
        expect(screen.getByTestId('app-state')).toHaveTextContent('default')
        expect(screen.getByTestId('is-recording')).toHaveTextContent('false')
    })
})


# END FILE CONTENTS


# File: frontend/__tests__/integration/state-transitions.test.tsx

import { beforeEach, describe, expect, test, vi } from 'vitest'
import { renderHook, act } from '@testing-library/react'
import { createElement } from 'react'
import { AppStateProvider } from '../../hooks/use-app-state-context'
import { StateMachine } from '../../lib/state-machine'
import { featureFlagManager } from '../../lib/feature-flags'
import type { ReactNode } from 'react'
import type { AppState } from '../../types/app-state'

// Mock localStorage
const localStorageMock = {
    getItem: vi.fn(),
    setItem: vi.fn(),
    removeItem: vi.fn(),
    clear: vi.fn(),
}

Object.defineProperty(window, 'localStorage', {
    value: localStorageMock
})

function TestWrapper({ children }: { children: ReactNode }) {
    return createElement(AppStateProvider, null, children)
}

describe('狀態轉換測試', () => {
    beforeEach(() => {
        vi.clearAllMocks()
        featureFlagManager.reset()
        featureFlagManager.enable('useNewStateManagement')
        localStorageMock.getItem.mockReturnValue(null)
    })

    describe('基本狀態轉換', () => {
        test('應該支援 default → recording_waiting 轉換', () => {
            const stateMachine = new StateMachine('default')

            const canTransition = stateMachine.canTransition('START_RECORDING')
            expect(canTransition).toBe(true)

            const newState = stateMachine.transition('START_RECORDING')
            expect(newState).toBe('recording_waiting')
        })

        test('應該支援 recording_waiting → recording_active 轉換', () => {
            const stateMachine = new StateMachine('recording_waiting')

            const canTransition = stateMachine.canTransition('RECORDING_STARTED')
            expect(canTransition).toBe(true)

            const newState = stateMachine.transition('RECORDING_STARTED')
            expect(newState).toBe('recording_active')
        })

        test('應該支援 recording_active → processing 轉換', () => {
            const stateMachine = new StateMachine('recording_active')

            const canTransition = stateMachine.canTransition('STOP_RECORDING')
            expect(canTransition).toBe(true)

            const newState = stateMachine.transition('STOP_RECORDING')
            expect(newState).toBe('processing')
        })

        test('應該支援 processing → finished 轉換', () => {
            const stateMachine = new StateMachine('processing')

            const canTransition = stateMachine.canTransition('PROCESSING_COMPLETE')
            expect(canTransition).toBe(true)

            const newState = stateMachine.transition('PROCESSING_COMPLETE')
            expect(newState).toBe('finished')
        })
    })

    describe('狀態轉換限制', () => {
        test('不應該允許無效的狀態轉換', () => {
            const stateMachine = new StateMachine('default')

            // 不能直接從 default 跳到 recording_active
            const canTransition = stateMachine.canTransition('RECORDING_STARTED')
            expect(canTransition).toBe(false)

            // 嘗試無效轉換應該拋出錯誤
            expect(() => {
                stateMachine.transition('RECORDING_STARTED')
            }).toThrow()
        })

        test('finished 狀態應該只能重置到 default', () => {
            const stateMachine = new StateMachine('finished')

            // 只能重置
            expect(stateMachine.canTransition('RESET')).toBe(true)
            expect(stateMachine.canTransition('START_RECORDING')).toBe(false)
            expect(stateMachine.canTransition('STOP_RECORDING')).toBe(false)

            const newState = stateMachine.transition('RESET')
            expect(newState).toBe('default')
        })

        test('應該支援從任何狀態重置到 default', () => {
            const states: AppState[] = ['default', 'recording_waiting', 'recording_active', 'processing', 'finished']

            states.forEach(state => {
                const stateMachine = new StateMachine(state)
                expect(stateMachine.canTransition('RESET')).toBe(true)
                expect(stateMachine.transition('RESET')).toBe('default')
            })
        })
    })

    describe('完整狀態流程', () => {
        test('應該支援完整的錄音流程', () => {
            const stateMachine = new StateMachine('default')

            // 完整流程：default → recording_waiting → recording_active → processing → finished
            expect(stateMachine.getCurrentState()).toBe('default')

            // 開始錄音
            const waitingState = stateMachine.transition('START_RECORDING')
            expect(waitingState).toBe('recording_waiting')

            // 錄音開始
            const activeState = stateMachine.transition('RECORDING_STARTED')
            expect(activeState).toBe('recording_active')

            // 停止錄音
            const processingState = stateMachine.transition('STOP_RECORDING')
            expect(processingState).toBe('processing')

            // 處理完成
            const finishedState = stateMachine.transition('PROCESSING_COMPLETE')
            expect(finishedState).toBe('finished')

            // 重置
            const resetState = stateMachine.transition('RESET')
            expect(resetState).toBe('default')
        })

        test('應該支援筆記模式流程', () => {
            const stateMachine = new StateMachine('default')

            // 筆記模式：default → finished (直接完成)
            expect(stateMachine.getCurrentState()).toBe('default')

            const finishedState = stateMachine.transition('FINISH_SESSION')
            expect(finishedState).toBe('finished')
        })
    })

    describe('錯誤恢復', () => {
        test('應該支援錯誤狀態恢復', () => {
            const stateMachine = new StateMachine('recording_active')

            // 從錄音中發生錯誤
            const errorState = stateMachine.transition('ERROR')
            expect(errorState).toBe('default')
        })

        test('應該支援會話升級', () => {
            const stateMachine = new StateMachine('default')

            // 升級到錄音模式
            const upgradedState = stateMachine.transition('UPGRADE_TO_RECORDING')
            expect(upgradedState).toBe('recording_waiting')
        })
    })

    describe('並發狀態變更', () => {
        test('狀態機應該是線程安全的', () => {
            const stateMachine = new StateMachine('default')
            const results: AppState[] = []

            // 模擬並發轉換
            const transitions = [
                'START_RECORDING',
                'RESET',
                'START_RECORDING',
                'RESET'
            ]

            transitions.forEach(trigger => {
                try {
                    const newState = stateMachine.transition(trigger as any)
                    results.push(newState)
                } catch (error) {
                    // 某些轉換可能失敗，這是預期的
                }
            })

            // 最後狀態應該是有效的
            const finalState = stateMachine.getCurrentState()
            const validStates: AppState[] = ['default', 'recording_waiting', 'recording_active', 'processing', 'finished']
            expect(validStates).toContain(finalState)
        })
    })

    describe('狀態歷史', () => {
        test('應該記錄狀態轉換歷史', () => {
            const stateMachine = new StateMachine('default')

            stateMachine.transition('START_RECORDING')
            stateMachine.transition('RECORDING_STARTED')
            stateMachine.transition('STOP_RECORDING')

            const history = stateMachine.getHistory()
            expect(history).toHaveLength(4) // 包含初始狀態
            expect(history[0]).toBe('default')
            expect(history[1]).toBe('recording_waiting')
            expect(history[2]).toBe('recording_active')
            expect(history[3]).toBe('processing')
        })

        test('應該支援回到上一個狀態', () => {
            const stateMachine = new StateMachine('default')

            stateMachine.transition('START_RECORDING')
            stateMachine.transition('RECORDING_STARTED')

            const canGoBack = stateMachine.canGoBack()
            expect(canGoBack).toBe(true)

            const previousState = stateMachine.goBack()
            expect(previousState).toBe('recording_waiting')
            expect(stateMachine.getCurrentState()).toBe('recording_waiting')
        })
    })
})


# END FILE CONTENTS


# File: frontend/components/ui/resizable.tsx

"use client"

import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }


# END FILE CONTENTS


# File: frontend/postcss.config.mjs

/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

export default config;


# END FILE CONTENTS


# File: .cursor/rules/frontend.mdc

---
description:
globs:
alwaysApply: false
---
<!-- Source: https://github.com/arthow4n/live-language-mate/blob/master/CLAUDE.md -->

### Development Notes

- Uses shadcn/ui component library extensively
- In the default state without a specified style, the tweakcn clean-slate style is applied first: `npx shadcn@latest add https://tweakcn.com/r/themes/clean-slate.json`
- Responsive design with mobile-first approach
- Settings stored in localStorage with versioning


## TypeScript coding style and conventions

- Prefer named import/export over default import/export.
- Early return, early throw.
- In frontend Vitest test files, import explicitly the test helpers e.g. `import { beforeEach, describe, expect, `test`, vi } from 'vitest';`.
- Use Zod to validate and cast type as early as possible, this includes but not limit to handling the following scenarios: `any`, `unknown`, `DefaultBodyType`.
- Always assign unknown type to `const x: unknown = JSON.parse()`, `cosnt x: unknown = await request.json()`, `cosnt x: unknown = await response.json()`, then validate with Zod.
- Zod schemas are shared between frontend and backend.
- Zod schemas are in `frontend/schemas/`, you should find in there first to see if there's a schema you can reuse. You should not create Zod schemas outside of `frontend/schemas/`.
- Never use `any`, `as` type assertion or `!` non-null assertion operator, you should instead use type narrowing, for example in test you can use `expectToBeInstanceOf`, `expectToNotBeNull`, `expectToNotBeUndefined`, and outside of test `instanceof` or do a proper object validation with Zod.
- If you would declare an untyped object, instead you should either type it with e.g. `const x: X = {}` or `{} satisfies X`.
- Avoid optional function parameter, optional property, and default values. If you are about to add one or you see any of such usages, try to look around the related code paths and see if you can refactor to remove it. Default values should only be used when it's absolutely necessary.
- Throw if a logic not really optional:

```ts
// Bad: Is Y optional?
if (x instaceof X) { x.Y(); }

// Bad: Is Y optional?
x?.Y();

// Good: Type narrowing and early throw
if (!x instanceof X) { throw new Error(); }
x.Y();

// Best: Zod type narrowing and early throw, prefer .parse over .safeParse when possible.
zodSchema.parse(x);
x.Y();

// Compromise: Explain why Y is optional if Y is really optional.
x?.Y(); // Y is optional because ...
```

### In fronted, instead of X use Y

- `as` operator -> use Zod
- `console.error` -> `logError`
- `JSX.Element` -> `React.JSX.Element`
- `toBeTruthy`, `.not.toBeNull`, `toBeDefined`, `toBeInstanceOf` or `if (instanceof)` -> use the type narrowing expect helpers in `frontend/__tests__/typedExpectHelpers.ts`
- `getAllBy*()[*]` -> `getByTestId` or `getByText`
- `() => {}` empty mock -> `vi.fn()`
- `JSON.stringify(x)` if x is not typed -> `const x: X = {}; JSON.stringify(x)` or `JSON.stringify({} satisfies X)`
- `fireEvent` -> `userEvent`
- `vi.mock` -> never mock imported code, we write integration test and should not mock any decendant imports.



## Test

- When writing test, write integration test.
- Write integration test to cover business logic, if something can be clicked, input or be interacted in any other ways by the user, it should be covered by a test.
- When writing new test, make sure the test is genuinely new and not testing what another test has already covered. You should look for other existing test cases to understand if the test you are about to write is already covered by another test.
- Use Playwright to test end-to-end frontend with @playwright-e2e-testing.mdc
- Focus on testing the component/function's integrated behaviour, for example, if the import tree looks like A -> B -> C, you should not mock any of A/B/C, instead you should focus on testing if interacting with A as a whole gives you the expected result; in B's test you should not mock B/C and instead test interacting with B; and so on.
- You should only change a test file if you are fixing lint/type errors, or you made a change that requires update that test file.
- If you are only editing test, you should not change the existing code logic that in the test. If refactoring would make writing test easier, explain to the user and wait for feedback. You may add testid yourself if needed.
- If an action will make an API request, you should test whether the API will get the correctly formed request.
- Before you write or change any test code, make sure you step back and get a full picture first, by reading through the related code paths from beginning to end, and understanding how the code and data flows.
- Instead of fixing many test cases in one go, focus on fixing 1 test at a time, each test case should have its own todo item.
- `DragEvent`, `DataTransferItemList`, `DataTransfer`, `DOMRect` are polyfilled and can be used in test:

```ts
const event = new DragEvent('dragenter', {
  cancelable: true,
  bubbles: true,
});
event.dataTransfer?.items.add('hello world', 'text/plain');
```

## Lint

- If you would eslint disable anything, think again and see if there's a better approach to fix it, if you still need to eslint disable, make sure you add -- comment after it to explain why you chose to disable.

### Instead of command X, use Y

- `rg`, `grep` -> use Search tool
- `find` -> `git ls-files` or your own List tool
- `rm` -> try `git rm` first, if fail then try `git clean`
- `head`/`tail`/`cat` -> read the file with tool instead
- `npx tsc` -> `npm run typecheck`
- Don't chain or pipe commands, chained and piped commands will be denied.


# END FILE CONTENTS


# File: SPEC.md

# Technical Specification


## Frontend Stack

- pnpm for Package manager
- React 18 with TypeScript
- Next.js for framework
- Tailwind CSS + shadcn/ui components
- Zustand-like context for state management
- Zod 4, therefore the imports should be `from "zod/v4"`, you may fetch `https://zod.dev/v4/changelog` if you are unsure how to write.
- Playwright MCP for e2e test

```ts
// Bad: Zod 3
import { z } from 'zod';
z.object({ name: z.string() }).strict();
z.object({ name: z.string() }).passthrough();

// Good: Zod 4
import { z } from 'zod/v4';
z.strictObject({ name: z.string() });
z.looseObject({ name: z.string() });
```


## Backend Stack

- Python version 3.10+
  - Use `uv` for virtual environment management
  - Pin all dependency versions in requirements.txt or pyproject.toml
- Separate production and development dependencies
- FastAPI for web framework with async support
- Pydantic v2 for data validation and settings management
- Supabase as database
- Azure OpenAI for transcription services
- WebSocket for real-time communication
- Cloudflare R2 for audio storage
- FFmpeg for audio processing


## File Structure

- Frontend File organization
  - Components in `frontend/components/(ui)/`
  - Custom hooks in `frontend/hooks/`
  - Utilities in `frontend/lib/`
  - Type definitions in `frontend/types/`
  - Services in `frontend/lib/services/`
  - Constants in `frontend/constants/`


- Backend File organization
  - Models in `app/schemas/`
  - Services in `app/services/`
  - API routes in `app/api/`
  - Core utilities in `app/core/`
  - Database related in `app/db/`
  - WebSocket handlers in `app/ws/`
  


### 1. 後端 FastAPI (簡化架構 - REST API 模式)

| #     | 函式 / 協程                                              | 所屬模組              | 責任                                         | I/O                                                |
| ----- | -------------------------------------------------------- | --------------------- | -------------------------------------------- | -------------------------------------------------- |
| B-001 | `create_session(title:str=None, type:str) -> SessionOut` | api.sessions          | POST /api/session                            | in: type, title(可選)；out: sid, status, type      |
| B-002 | `finish_session(sid:UUID)`                               | api.sessions          | PATCH /api/session/{sid}/finish              | in: sid；204                                       |
| B-015 | `upgrade_session_to_recording(sid:UUID)`                 | api.sessions          | PATCH /api/session/{sid}/upgrade             | in: sid；out: updated session                      |
| B-003 | `save_note(sid:UUID, content:str, client_ts:datetime)`   | api.notes             | PUT /api/notes/{sid}                         | in: content, client_ts(可選)；out: server_ts, note |
| B-004 | `export_resource(sid:UUID, type:str)`                    | api.export            | GET /api/export/{sid}?type=                  | StreamingResponse                                  |
| B-020 | `upload_segment(sid:UUID, seq:int, file:UploadFile)`     | api.segments          | POST /api/segment - 上傳 10s WebM 音檔切片   | in: WebM file；out: {"ack": seq}                   |
| B-006 | `ws_transcript_feed(ws:WebSocket, sid:UUID)`             | ws.transcript_feed    | 推送 Azure OpenAI 逐字稿結果                 | ↓ {"text","timestamp",...}                         |
| B-007 | `store_segment_blob(sid, seq, blob)`                     | services.storage      | 上傳到 Cloudflare R2 + 更新 DB `audio_files` | —                                                  |
| B-021 | `ffmpeg_webm_to_pcm(webm_bytes) -> bytes`                | core.ffmpeg           | WebM→16k mono PCM (處理完整 10s 檔案)        | in: WebM blob；out: PCM bytes                      |
| B-010 | `azure_openai_client() -> OpenAI`                        | services.azure_openai | 建立 Azure OpenAI 客戶端                     | return client                                      |
| B-022 | `whisper_transcribe(pcm_bytes) -> str`                   | services.azure_openai | 單檔轉錄：WebM/PCM → Azure OpenAI Whisper    | in: audio bytes；out: transcript text              |
| B-023 | `process_and_transcribe(sid, seq, webm)`                 | api.segments          | 背景任務：轉檔 + STT + 儲存 + 廣播           | BackgroundTasks                                    |
| B-013 | `mark_session_error(sid, reason)`                        | db.crud               | 更新 sessions.status=error                   | —                                                  |
| B-014 | `single_active_guard()`                                  | middleware            | 保證同時僅 1 active session                  | 429 on violation                                   |
| B-016 | `check_tables_exist()`                                   | db.database           | 檢查核心表格是否存在                         | return bool                                        |
| B-017 | `auto_init_database()`                                   | db.database           | 自動檢測並初始化資料庫                       | 啟動時執行                                         |
| B-018 | `init_r2_client() -> S3Client`                           | services.r2_client    | 初始化 Cloudflare R2 客戶端                  | return S3Client                                    |
| B-019 | `generate_r2_presigned_url(bucket, key, expires)`        | services.r2_client    | 生成 R2 預簽名 URL                           | return presigned_url                               |

### ⚠️ 移除的功能 (簡化架構)
- ❌ `ws_upload_audio` - 改用 REST API
- ❌ `handle_ack_missing` - 不再需要 chunk ack/missing 機制
- ❌ `ffmpeg_spawn` - 改為處理完整檔案，不需要串流
- ❌ `transcribe_audio_batch` - 改為單檔處理

### 2. 前端 React（Hook / Utility）

| #     | 函式                                 | 模組                | 責任                                                                                       | I/O                                                                          |
| ----- | ------------------------------------ | ------------------- | ------------------------------------------------------------------------------------------ | ---------------------------------------------------------------------------- |
| F-001 | `useAppState.setState(state)`        | hooks/useAppState   | 管理前端應用狀態轉換                                                                       | 'default'\|'recording_waiting'\|'recording_active'\|'processing'\|'finished' |
| F-002 | `useSession.createNoteSession()`     | hooks/useSession    | POST /session (type=note_only)                                                             | return sid                                                                   |
| F-003 | `useSession.upgradeToRecording(sid)` | hooks/useSession    | PATCH /session/{sid}/upgrade                                                               | return updated session                                                       |
| F-004 | `useRecorder.startRecording()`       | hooks/useRecorder   | a. 建立/升級 session<br>b. 狀態轉為 recording_waiting<br>c. 啟 MediaRecorder timeslice=10s | return sid                                                                   |
| F-005 | `useRecorder.stopRecording()`        | hooks/useRecorder   | a. 停止錄音<br>b. 狀態轉為 processing<br>c. 等待轉錄完成                                   | —                                                                            |
| F-024 | `uploadSegment(seq, blob)`           | hooks/useRecorder   | fetch POST /api/segment 上傳 10s WebM 檔案                                                 | —                                                                            |
| F-025 | `handleUploadError(seq, blob)`       | hooks/useRecorder   | 上傳失敗處理，暫存到 IndexedDB                                                             | —                                                                            |
| F-008 | `useTranscript.connect(sid)`         | hooks/useTranscript | 建 `/ws/transcript_feed` 連線                                                              | —                                                                            |
| F-009 | `mergeSegment(seg)`                  | hooks/useTranscript | 相鄰 ≤1 s 合併段落                                                                         | 更新 segments state                                                          |
| F-010 | `onTranscriptComplete()`             | hooks/useTranscript | 轉錄完成回調，狀態轉為 finished                                                            | —                                                                            |
| F-011 | `autoScroll()`                       | hooks/useTranscript | 若鎖定到底則捲底                                                                           | —                                                                            |
| F-012 | `unlockOnScroll()`                   | hooks/useTranscript | 使用者滾動離底 >60 px                                                                      | set locked=false                                                             |
| F-013 | `toLatest()`                         | hooks/useTranscript | smooth scroll bottom；鎖定                                                                 | —                                                                            |
| F-014 | `useLocalDraft(field,val)`           | hooks/useLocalDraft | 5 s debounce 存 localStorage                                                               | —                                                                            |
| F-015 | `loadDraft()`                        | hooks/useLocalDraft | 載入 draft_note                                                                            | return {note}                                                                |
| F-016 | `clearDraft()`                       | hooks/useLocalDraft | removeItem('draft_*')                                                                      | —                                                                            |
| F-017 | `useAutoSave(sid, content)`          | hooks/useAutoSave   | 每 10 s PUT /notes                                                                         | —                                                                            |
| F-018 | `newNote()`                          | hooks/useAppState   | 清空當前資料，狀態回到 default<br>如果存在活躍會話，先刪除該會話及其所有相關數據           | —                                                                            |
| F-019 | `downloadZip(sid)`                   | utils/export        | GET /export/{sid}?type=zip                                                                 | 觸發 download                                                                |
| F-020 | `showToast(text,type)`               | utils/ui            | 統一錯誤／提示                                                                             | —                                                                            |

### 3. 前端 UI Component Methods（狀態對應）

| #     | 元件                | 出現狀態                                                  | 主要方法 / callback                    |
| ----- | ------------------- | --------------------------------------------------------- | -------------------------------------- |
| C-001 | `RecordButton`      | default, recording_waiting, recording_active              | `onClick => startRecording()           | stopRecording()` |
| C-002 | `MarkdownEditor`    | default, recording_waiting, recording_active, finished    | `onChange => saveDraft() / autoSave()` |
| C-003 | `TranscriptPane`    | recording_waiting, recording_active, processing, finished | `onScroll => unlockOnScroll()`         |
| C-004 | `ToLatestButton`    | recording_waiting, finished                               | `onClick => toLatest()`                |
| C-005 | `ProcessingOverlay` | processing                                                | 顯示轉錄進度與等待動畫                 |
| C-006 | `ExportButton`      | finished                                                  | `onClick => downloadZip()`             |
| C-007 | `NewNoteButton`     | finished                                                  | `onClick => newNote()`                 |
| C-008 | `StatusIndicator`   | all states                                                | 顯示當前狀態（錄音中/處理中/已完成）   |

**各狀態畫面組成**：

| 狀態              | 顯示元件                                                                              |
| ----------------- | ------------------------------------------------------------------------------------- |
| default           | MarkdownEditor + RecordButton + NewNoteButton                                         |
| recording_waiting | MarkdownEditor + TranscriptPane + NewNoteButton + RecordButton(停止) + ToLatestButton |
| recording_active  | MarkdownEditor + TranscriptPane + NewNoteButton + RecordButton(停止) + ToLatestButton |
| processing        | MarkdownEditor + TranscriptPane + ProcessingOverlay                                   |
| finished          | MarkdownEditor + TranscriptPane + ExportButton + NewNoteButton + ToLatestButton       |

**NewNoteButton 在不同狀態的行為**：

| 狀態              | NewNoteButton 行為       | 說明                                                                                           |
| ----------------- | ------------------------ | ---------------------------------------------------------------------------------------------- |
| default           | 清空當前會話並開始新筆記 | 如果存在活躍會話，會先刪除該會話及其所有相關數據；清空編輯器內容和本地草稿；狀態保持在 default |
| recording_waiting | 停止錄音並清空當前會話   | 停止錄音，刪除當前會話及其所有相關數據，回到 default 狀態                                      |
| recording_active  | 停止錄音並清空當前會話   | 停止錄音，刪除當前會話及其所有相關數據，回到 default 狀態                                      |
| finished          | 清空當前會話並開始新筆記 | 刪除已完成的會話及其所有相關數據，清空編輯器內容，回到 default 狀態                            |

### 4. Supabase PostgreSQL 資料庫架構

**架構特色**：
- ✅ **雲端原生**：專為 Supabase 設計，享受完整雲端服務
- ✅ **檔案分離**：音訊檔案使用免費的 Cloudflare R2 儲存，降低成本
- ✅ **自動初始化**：提供完整 SQL 腳本，一鍵建立所有表格
- ✅ **高可用性**：Supabase 提供 99.9% 可用性保證


```Mermaid

sequenceDiagram
    %% ==== Participants ====
    actor User as 👤 使用者
    participant Browser as 🌐 瀏覽器
    participant BE as ⚡ FastAPI
    participant R2 as ☁️ R2 Storage
    participant DB as 💾 Supabase
    participant STT as 🤖 STT Model
    participant WS as 🔌 Websocket

    %% ==== 即時錄音流程 ====
    rect rgb(240,248,255)
        Note over User,WS: 🎙️ 即時錄音與轉錄
        User ->> Browser: 點擊開始錄音
        Browser ->>+ BE: 開新 Session 

        par 儲存與轉錄
            BE ->>+ R2: 儲存 WebM
            BE ->>+ STT: WebM → Whisper
            STT -->> BE: 回覆 Transcript JSON
            BE -->> WS: 傳入逐字稿
            BE ->>+ DB: INSERT transcript_segments
        end

        WS -->> Browser: 送出逐字稿
        Browser -->> User: 更新逐字稿
    end
        WS -->> Browser: 送出逐字稿
        Browser -->> User: 更新逐字稿
    end

    %% ==== 匯出功能 ====
    rect rgb(248,255,248)
        Note over User,WS: 📥 匯出筆記與逐字稿
        User ->> Browser: 點擊匯出
        Browser ->>+ BE: GET /api/export?type=zip
        BE ->>+ DB: SELECT note & transcript
        DB -->>- BE: 文字內容
        BE ->>+ R2: 讀取音訊檔案
        R2 -->>- BE: WebM files
        BE -->>- Browser: ZIP 檔案
        Browser -->> User: 下載完成
    end

```

```mermaid
erDiagram
    sessions {
        UUID id PK "gen_random_uuid()"
        VARCHAR title "會話標題(可選)"
        session_type type "note_only/recording"
        session_status status "active/completed/error"
        lang_code language "zh-TW/en-US"
        TIMESTAMPTZ created_at "建立時間"
        TIMESTAMPZ updated_at "更新時間"
        TIMESTAMPTZ completed_at "完成時間"
    }

    audio_files {
        UUID id PK "gen_random_uuid()"
        UUID session_id FK "關聯會話ID"
        INT chunk_sequence "音檔切片序號"
        TEXT r2_key "Cloudflare R2 物件鍵值"
        TEXT r2_bucket "Cloudflare R2 儲存桶名稱"
        INT file_size "檔案大小"
        DECIMAL duration_seconds "時長(秒)"
        TIMESTAMPTZ created_at "建立時間"
    }

    transcript_segments {
        UUID id PK "gen_random_uuid()"
        UUID session_id FK "關聯會話ID"
        INT chunk_sequence "逐字稿片段序號"
        DECIMAL start_time "開始時間(秒)"
        DECIMAL end_time "結束時間(秒)"
        TEXT text "逐字稿內容"
        DECIMAL confidence "信心度"
        TIMESTAMPTZ created_at "建立時間"
    }

    transcripts {
        UUID id PK "gen_random_uuid()"
        UUID session_id FK "關聯會話ID(UNIQUE)"
        TEXT full_text "完整逐字稿"
        TIMESTAMPTZ created_at "建立時間"
        TIMESTAMPTZ updated_at "更新時間"
    }

    notes {
        UUID id PK "gen_random_uuid()"
        UUID session_id FK "關聯會話ID(UNIQUE)"
        TEXT content "筆記內容(Markdown)"
        TIMESTAMPTZ client_ts "客戶端時間戳(可選)"
        TIMESTAMPTZ created_at "建立時間"
        TIMESTAMPTZ updated_at "更新時間"
    }

    sessions ||--o{ audio_files : "一對多(可選)<br/>純筆記模式無音檔"
    sessions ||--o{ transcript_segments : "一對多(可選)<br/>純筆記模式無逐字稿"
    sessions ||--o| transcripts : "一對一(可選)<br/>純筆記模式無逐字稿"
    sessions ||--|| notes : "一對一(必須)<br/>所有會話都有筆記"
```

### 5. 前端狀態管理

**前端應用狀態 (AppState)**：
```typescript
type AppState = 
  | 'default'           // 預設畫面：可寫筆記，顯示錄音按鈕
  | 'recording_waiting' // 錄音中，尚未收到逐字稿
  | 'recording_active'  // 錄音中，已收到逐字稿並即時顯示
  | 'processing'        // 處理畫面：停止錄音後，處理剩餘逐字稿
  | 'finished'          // 完整逐字稿畫面：可編輯筆記、匯出、開新筆記
```

**狀態轉換規則**：
```
default → recording_waiting           // 按下錄音按鈕
recording_waiting → recording_active  // 收到第一段逐字稿
recording_active → processing         // 按下停止錄音
processing → finished                 // 逐字稿處理完成
finished → default                    // 按下 New note
default → finished                    // 純筆記模式直接完成（未來功能）
```

**各狀態功能對照**：

| 狀態              | 筆記編輯 | 錄音功能 | 逐字稿顯示 | 匯出功能 | 特殊功能   |
| ----------------- | -------- | -------- | ---------- | -------- | ---------- |
| default           | ✅ 可編輯 | ✅ 可開始 | ❌ 無       | ❌ 無     | draft 暫存 |
| recording_waiting | ✅ 可編輯 | ✅ 可停止 | ⏳ 等待中   | ❌ 無     | 計時器     |
| recording_active  | ✅ 可編輯 | ✅ 可停止 | ✅ 即時顯示 | ❌ 無     | 音檔上傳   |
| processing        | ❌ 鎖定   | ❌ 無     | ✅ 更新中   | ❌ 無     | 等待動畫   |
| finished          | ✅ 可編輯 | ❌ 無     | ✅ 完整顯示 | ✅ 可匯出 | New note   |

**後端 Session 狀態對應**：

| 前端狀態          | 後端 Session Status | Session Type        | 說明                           |
| ----------------- | ------------------- | ------------------- | ------------------------------ |
| default           | draft               | note_only           | 草稿狀態，尚未正式建立 session |
| default (已建立)  | active              | note_only           | 純筆記 session                 |
| recording_waiting | active              | recording           | 錄音中，尚未收到逐字稿         |
| recording_active  | active              | recording           | 錄音中，已收到逐字稿並即時顯示 |
| processing        | active              | recording           | 錄音結束，轉錄處理中           |
| finished          | completed           | note_only/recording | 可匯出完整資料                 |

### 6. Azure OpenAI 整合架構 (REST API 簡化版)

**技術選擇理由**：
- ✅ **企業級品質**：Azure OpenAI 提供穩定的 Whisper 模型服務
- ✅ **多語言支援**：優秀的中文語音識別準確度
- ✅ **API 整合**：標準 OpenAI SDK，開發簡單
- ✅ **資料安全**：Microsoft 提供企業級資料保護
- ✅ **架構簡化**：使用完整 10s 檔案，提高成功率

**工作流程**：
```
前端錄音 (10s WebM) → REST API 上傳完整檔案 → 儲存到 R2 → 
FFmpeg 轉換 → Azure OpenAI Whisper API → WebSocket 推送轉錄結果
```

---

## 8. 使用場景與狀態流程

### 場景 1：純筆記模式（不錄音）

- **目標**：讓使用者能快速開始做筆記，無需進行繁瑣的設定。
- **流程**：
  1. **進入頁面**：使用者打開應用，看到預設畫面（`default` 狀態）。
  2. **輸入內容**：
     - 在 `MarkdownEditor` 中輸入筆記，內容暫存於 `localStorage`（`draft_note`）。
  3. **建立會話**：
     - 使用者首次輸入時，自動觸發 `createNoteSession()`，在後端建立一個 `note_only` 類型的 session。
     - 成功後，`useAutoSave` hook 啟動，每 10 秒將筆記內容同步到後端。
  4. **完成筆記**：
     - 使用者可以隨時離開，筆記已儲存。
     - （未來功能）可手動點擊「完成」，將 session 狀態改為 `completed`。

```mermaid
graph TD
    A((使用者進入頁面)) --> B[預設畫面<br/>default 狀態]
    
    B --> C[輸入筆記內容]
    
    C --> D[暫存至 localStorage<br/>draft_note]
    
    D --> E{首次輸入？}
    
    E -->|是| F[自動觸發<br/>createNoteSession]
    E -->|否| G[繼續編輯]
    
    F --> H[建立 note_only<br/>類型 session]
    
    H --> I[啟動 useAutoSave hook]
    
    I --> J[每 10 秒同步<br/>筆記至後端]
    
    G --> J
    J --> K[使用者離開<br/>筆記已儲存]
    J --> L[手動點擊完成<br/>未來功能]
    
    L --> M[session 狀態<br/>改為 completed]
    
    %% 樣式定義
    classDef startEndStyle fill:#e8f5e8,stroke:#4caf50,stroke-width:3px,color:#000
    classDef processStyle fill:#e3f2fd,stroke:#2196f3,stroke-width:2px,color:#000
    classDef decisionStyle fill:#fff3e0,stroke:#ff9800,stroke-width:2px,color:#000
    classDef dataStyle fill:#f3e5f5,stroke:#9c27b0,stroke-width:2px,color:#000
    classDef autoStyle fill:#e8f5e8,stroke:#4caf50,stroke-width:2px,color:#000
    classDef futureStyle fill:#f5f5f5,stroke:#9e9e9e,stroke-width:2px,color:#666,stroke-dasharray: 5 5
    
    %% 應用樣式
    class A,K startEndStyle
    class B,C,F,H,I processStyle
    class E decisionStyle
    class D,J dataStyle
    class G autoStyle
    class L,M futureStyle

```

### 場景 2：先筆記後錄音

- **目標**：允許使用者在已有筆記的基礎上，隨時開始錄音。
- **流程**：
  1. **開始筆記**：同「場景 1」，使用者已建立一個 `note_only` 會話並有一些筆記內容。
  2. **點擊錄音**：使用者點擊 `RecordButton`。
  3. **升級會話**：
     - 呼叫 `upgradeToRecording()`，將後端 session type 從 `note_only` 改為 `recording`。
     - 前端狀態從 `default` 轉為 `recording_waiting`。
  4. **開始錄音**：同「場景 3」的錄音流程。

### 場景 3：邊錄邊記模式

- **目標**：提供最核心的「錄音 + 即時逐字稿 + 筆記」整合體驗。
- **流程**：
  1. **建立會話**：
     - 使用者在 `default` 狀態下，直接點擊 `RecordButton`。
     - 呼叫 `createRecordingSession()` 建立 `recording` 類型的 session。
     - 前端狀態立即轉為 `recording_waiting`。
  2. **錄音與上傳**：
     - `MediaRecorder` 開始錄音，使用 `timeslice=10000`，每 10 秒產生一個完整 WebM 檔案。
     - `ondataavailable` 事件觸發，使用 `fetch` POST 到 `/api/segment` 上傳檔案。
     - 後端立即回應 `{"ack": seq}`，前端處理錯誤時暫存到 IndexedDB。
  3. **即時逐字稿**：
     - `ws_transcript_feed` WebSocket 連線建立。
     - 後端收到檔案後，在背景執行 FFmpeg 轉換 + Whisper API 轉錄。
     - Whisper API 返回轉錄結果，後端透過 WebSocket 推送給前端。
     - `TranscriptPane` 每 10 秒收到一批逐字稿片段。
  4. **同步筆記**：
     - 使用者可以在 `MarkdownEditor` 中隨時輸入筆記，`useAutoSave` 會定期儲存。
  5. **停止錄音**：
     - 使用者點擊 `RecordButton` (此時為停止圖示)。
     - `stopRecording()` 被呼叫，`MediaRecorder` 停止。
     - 前端狀態轉為 `processing`。
  6. **等待轉錄完成**：
     - `ProcessingOverlay` 顯示，鎖定編輯區。
     - 後端處理剩餘的音檔切片，並將最後的逐字稿推送回來。
  7. **完成**：
     - 當後端推送 `transcript_complete` 訊息時，前端狀態轉為 `finished`。
     - `ProcessingOverlay` 消失，使用者可以檢視完整逐字稿、編輯筆記、並匯出。
  8. **匯出與新筆記**：
     - `ExportButton` 可用，點擊下載包含 `.mp4`、`transcript.txt` 和 `note.md` 的 ZIP 檔。
     - `NewNoteButton` 可用，點擊清空當前畫面，回到 `default` 狀態，開始新的筆記。


# END FILE CONTENTS


# File: app/ws/upload_audio.py

"""
WebSocket 音檔上傳服務

實作音檔切片即時上傳、重傳機制與 Cloudflare R2 整合
"""

import json
import logging
import asyncio
import struct
from typing import Dict, Set, Optional, List
from uuid import UUID
from datetime import datetime, timedelta

from fastapi import APIRouter, WebSocket, WebSocketDisconnect, WebSocketException, status, Path, Depends
from supabase import Client
from fastapi import HTTPException
from app.core.container import container
from app.services.stt.factory import get_provider
from ..db.database import get_supabase_client
from ..services.r2_client import get_r2_client, R2ClientError

logger = logging.getLogger(__name__)

router = APIRouter()

class AudioUploadManager:
    """音檔上傳管理器"""

    def __init__(self, websocket: WebSocket, session_id: UUID, supabase_client: Client):
        self.websocket = websocket
        self.session_id = session_id
        self.supabase_client = supabase_client
        self.r2_client = get_r2_client()

        # 狀態管理
        self.is_connected = False
        self.received_chunks: Set[int] = set()  # 已收到的切片序號
        self.last_heartbeat = datetime.utcnow()
        self.upload_tasks: Dict[int, asyncio.Task] = {}  # 上傳任務追蹤

        # 設定
        self.heartbeat_interval = 30  # 心跳間隔（秒）
        self.chunk_timeout = 10  # 切片處理超時（秒）
        self.max_pending_uploads = 5  # 最大並行上傳數

    async def _initialize_received_chunks(self):
        """從資料庫初始化已收到的切片集合"""
        try:
            response = self.supabase_client.table("audio_files").select("chunk_sequence").eq("session_id", str(self.session_id)).execute()
            if response.data:
                self.received_chunks = {item['chunk_sequence'] for item in response.data}
                logger.info(f"從資料庫恢復 {len(self.received_chunks)} 個已存在的切片記錄 for session {self.session_id}")
        except Exception as e:
            logger.error(f"從資料庫初始化 received_chunks 失敗: {e}")
            # 即使初始化失敗，也繼續執行，但使用空的集合
            self.received_chunks = set()

    async def handle_connection(self):
        """處理 WebSocket 連接"""
        logger.info("<<<<< RUNNING UPLOAD_AUDIO.PY CODE (v5) >>>>>")
        try:
            # 接受連接
            await self.websocket.accept()
            self.is_connected = True
            logger.info(f"WebSocket 連接建立: session_id={self.session_id}")

            # 從資料庫加載已有的切片，以處理重連情況
            await self._initialize_received_chunks()

            # 驗證會話狀態
            if not await self._validate_session():
                await self._send_error("Invalid session or session not in recording mode")
                return

            # 發送連接確認
            await self._send_message({
                "type": "connection_established",
                "session_id": str(self.session_id),
                "timestamp": datetime.utcnow().isoformat()
            })

            # 啟動心跳檢測
            heartbeat_task = asyncio.create_task(self._heartbeat_monitor())

            try:
                # 主要消息處理循環
                await self._message_loop()
            finally:
                # 清理資源
                heartbeat_task.cancel()
                await self._cleanup()

        except WebSocketDisconnect:
            logger.info(f"WebSocket 連接斷開: session_id={self.session_id}")
        except Exception as e:
            logger.error(f"WebSocket 處理異常: {e}")
            await self._send_error(f"Connection error: {str(e)}")
        finally:
            self.is_connected = False

    async def _validate_session(self) -> bool:
        """驗證會話存在且處於錄音模式"""
        try:
            response = self.supabase_client.table("sessions").select("*").eq("id", str(self.session_id)).single().execute()

            if not response.data:
                logger.warning(f"會話不存在: {self.session_id}")
                return False

            session = response.data

            if session.get('status') != 'active':
                logger.warning(f"會話非活躍狀態: {self.session_id}, status={session.get('status')}")
                return False

            if session.get('type') != 'recording':
                logger.warning(f"會話非錄音模式: {self.session_id}, type={session.get('type')}")
                return False

            return True
        except Exception as e:
            logger.error(f"會話驗證時發生異常: {self.session_id}, error: {e}")
            return False

    async def _message_loop(self):
        """主要消息處理循環"""
        while self.is_connected:
            try:
                # 接收消息（二進制或文本）
                data = await self.websocket.receive()

                if "bytes" in data:
                    # 處理二進制音檔切片
                    await self._handle_audio_chunk(data["bytes"])
                elif "text" in data:
                    # 處理文本消息（心跳、控制指令等）
                    await self._handle_text_message(data["text"])

            except WebSocketDisconnect:
                # Case 1: 客戶端正常、乾淨地關閉連接
                logger.info("WebSocket gracefully disconnected by client.")
                self.is_connected = False # 確保迴圈終止
                break # 乾淨地退出迴圈

            except RuntimeError as e:
                # Case 2: 連接意外中斷，導致 receive() 失敗
                # 注意：這裡的 "receive" 必須是雙引號，才能匹配異常消息
                if 'Cannot call "receive" once a disconnect message has been received' in str(e):
                    logger.info(f"WebSocket connection closed (RuntimeError on receive), breaking loop: {e}")
                    self.is_connected = False # 確保迴圈終止
                    break # 乾淨地退出迴圈
                else:
                    # 處理其他類型的 RuntimeError
                    logger.error(f"An unexpected runtime error occurred in message loop: {e}", exc_info=True)
                    await self._send_error(f"Message processing runtime error: {str(e)}")
                    # 即使發送錯誤，也要中斷迴圈
                    self.is_connected = False
                    break

            except Exception as e:
                # Case 3: 處理所有其他未預期的錯誤
                logger.error(f"An unexpected error occurred in message loop: {e}", exc_info=True)
                await self._send_error(f"Message processing error: {str(e)}")
                # 發生未知錯誤後也中斷迴圈，避免無限循環
                self.is_connected = False
                break

    async def _handle_audio_chunk(self, chunk_data: bytes):
        """處理音檔切片數據"""
        try:
            # 解析切片格式：4字節序號 + 音檔數據
            if len(chunk_data) < 4:
                await self._send_error("Invalid chunk format: too short")
                return

            # 解包序號（小端序 unsigned int）
            chunk_sequence = struct.unpack('<I', chunk_data[:4])[0]
            audio_data = chunk_data[4:]

            if len(audio_data) == 0:
                await self._send_error(f"Empty audio data for chunk {chunk_sequence}")
                return

            logger.debug(f"收到音檔切片: seq={chunk_sequence}, size={len(audio_data)}")

            # 檢查是否為重複切片
            if chunk_sequence in self.received_chunks:
                logger.debug(f"忽略重複切片: seq={chunk_sequence}")
                await self._send_ack(chunk_sequence)
                return

            # 記錄已收到的切片
            self.received_chunks.add(chunk_sequence)

            # 限制並行上傳數量
            if len(self.upload_tasks) >= self.max_pending_uploads:
                # 等待最舊的上傳完成
                oldest_task = min(self.upload_tasks.values(), key=lambda t: t.get_name())
                await oldest_task

            # 非同步上傳到 R2
            upload_task = asyncio.create_task(
                self._upload_chunk_to_r2(chunk_sequence, audio_data)
            )
            self.upload_tasks[chunk_sequence] = upload_task

        except Exception as e:
            logger.error(f"音檔切片處理失敗: {e}")
            await self._send_error(f"Chunk processing error: {str(e)}")

    async def _upload_chunk_to_r2(self, chunk_sequence: int, audio_data: bytes):
        """上傳音檔切片到 R2 並觸發轉錄"""
        try:
            result = await self.r2_client.store_chunk_blob(
                session_id=self.session_id,
                chunk_sequence=chunk_sequence,
                blob_data=audio_data,
                supabase_client=self.supabase_client
            )

            if result['success']:
                # 上傳成功，發送 ACK
                await self._send_ack(chunk_sequence)
                logger.debug(f"切片上傳成功: seq={chunk_sequence}, size={len(audio_data)}")

                # 轉錄呼叫
                provider = get_provider(self.session_id)
                logger.info(f"🎯 [WS轉錄] 開始轉錄 seq={chunk_sequence} (provider={provider.name()})")
                result = await provider.transcribe(audio_data, self.session_id, chunk_sequence)
                if result:
                    logger.info(f"✅ [WS轉錄] seq={chunk_sequence} 轉錄成功")
                    # TODO: 後續儲存/推播 result
                else:
                    logger.warning(f"⚠️ [WS轉錄] seq={chunk_sequence} 轉錄失敗")
            else:
                # 上傳失敗
                error_message = result.get('error', 'Unknown R2 upload error')
                await self._send_upload_error(chunk_sequence, error_message)
                # 從 received_chunks 移除，允許重試
                self.received_chunks.discard(chunk_sequence)
                logger.error(f"切片上傳失敗: seq={chunk_sequence}, error={error_message}")

        except Exception as e:
            logger.error(f"上傳到 R2 失敗: seq={chunk_sequence}, error: {e}")
            await self._send_upload_error(chunk_sequence, str(e))
            # 從 received_chunks 移除，允許重試
            self.received_chunks.discard(chunk_sequence)
        finally:
            # 清理追蹤字典中的任務
            self.upload_tasks.pop(chunk_sequence, None)

    async def _handle_text_message(self, message_text: str):
        """處理文本消息"""
        try:
            message = json.loads(message_text)
            msg_type = message.get("type")

            if msg_type == "heartbeat":
                # 更新心跳時間
                self.last_heartbeat = datetime.utcnow()
                await self._send_message({"type": "heartbeat_ack"})

            elif msg_type == "request_missing":
                # 客戶端請求缺失切片列表
                await self._send_missing_chunks()

            elif msg_type == "upload_complete":
                # 客戶端表示上傳完成
                await self._handle_upload_complete()

            else:
                logger.warning(f"未知消息類型: {msg_type}")

        except json.JSONDecodeError:
            logger.error(f"JSON 解析失敗: {message_text}")
            await self._send_error("Invalid JSON message")
        except Exception as e:
            logger.error(f"文本消息處理失敗: {e}")
            await self._send_error(f"Text message error: {str(e)}")

    async def _send_ack(self, chunk_sequence: int):
        """發送切片確認"""
        await self._send_message({
            "type": "ack",
            "chunk_sequence": chunk_sequence,
            "timestamp": datetime.utcnow().isoformat()
        })

    async def _send_upload_error(self, chunk_sequence: int, error_msg: str):
        """發送上傳錯誤"""
        await self._send_message({
            "type": "upload_error",
            "chunk_sequence": chunk_sequence,
            "error": error_msg,
            "timestamp": datetime.utcnow().isoformat()
        })

    async def _send_missing_chunks(self):
        """發送缺失切片列表（實作重傳機制）"""
        # 這裡可以實作更複雜的缺失檢測邏輯
        # 目前簡單返回已收到的切片列表
        await self._send_message({
            "type": "chunk_status",
            "received_chunks": sorted(list(self.received_chunks)),
            "total_received": len(self.received_chunks),
            "timestamp": datetime.utcnow().isoformat()
        })

    async def _handle_upload_complete(self):
        """處理上傳完成"""
        # 等待所有進行中的上傳完成
        if self.upload_tasks:
            logger.info(f"等待 {len(self.upload_tasks)} 個上傳任務完成")
            await asyncio.gather(*self.upload_tasks.values(), return_exceptions=True)

        # 向客戶端確認全部切片已接收
        await self._send_message({
            "type": "all_chunks_received"
        })
        await self._send_message({
            "type": "upload_complete_ack",
            "total_chunks": len(self.received_chunks),
            "timestamp": datetime.utcnow().isoformat()
        })

        logger.info(f"音檔上傳完成: session_id={self.session_id}, chunks={len(self.received_chunks)}")

    async def _heartbeat_monitor(self):
        """心跳監控器，超時則關閉連接"""
        while self.is_connected:
            await asyncio.sleep(self.heartbeat_interval)
            if datetime.utcnow() - self.last_heartbeat > timedelta(seconds=self.heartbeat_interval * 2):
                logger.warning(f"心跳超時，關閉連接: session_id={self.session_id}")
                await self._send_error("Heartbeat timeout")
                await self.websocket.close(code=status.WS_1008_POLICY_VIOLATION)
                break

    async def _send_message(self, message: dict):
        """安全地發送消息（即使 is_connected 為 False 亦嘗試傳送，便於單元測試驗證）"""
        try:
            await self.websocket.send_text(json.dumps(message))
        except (WebSocketDisconnect, RuntimeError) as e:
            logger.warning(f"發送消息失敗，連接可能已關閉: {e}")
            self.is_connected = False  # 標記為已斷開

    async def _send_error(self, error_msg: str):
        """安全地發送錯誤消息"""
        logger.error(f"WebSocket 錯誤發送至客戶端: {error_msg}")
        await self._send_message({
            "type": "error",
            "message": error_msg
        })

    async def _cleanup(self):
        """清理資源，例如等待中的上傳任務"""
        if self.upload_tasks:
            logger.info(f"等待 {len(self.upload_tasks)} 個上傳任務完成...")
            await asyncio.gather(*self.upload_tasks.values())
        logger.info(f"清理完成: session_id={self.session_id}")


@router.websocket("/ws/upload_audio/{session_id}")
async def websocket_endpoint(
    websocket: WebSocket,
    session_id: UUID = Path(...),
    supabase_client: Client = Depends(get_supabase_client)
):
    """
    WebSocket 端點：處理音檔上傳

    - B-005: 建立 WebSocket 端點
    - B-012: 實作 ACK/Missing 重傳機制
    - 整合 Cloudflare R2 上傳與 Azure OpenAI 轉錄
    """
    manager = AudioUploadManager(websocket, session_id, supabase_client)
    await manager.handle_connection()


def handle_ack_missing(received_chunks: Set[int], expected_total: Optional[int] = None) -> dict:
    """
    根據已收到的切片列表，產生 ack/missing 報告 (B-012)

    Args:
        received_chunks: 已收到的切片序號集合
        expected_total: 預期的總切片數（可選）

    Returns:
        dict: ACK/Missing 狀態響應
    """
    if not received_chunks:
        return {
            "type": "status",
            "received_count": 0,
            "missing_chunks": [],
            "status": "waiting"
        }

    # 計算缺失的切片
    min_chunk = min(received_chunks)
    max_chunk = max(received_chunks)

    # 如果有指定總數，使用總數；否則基於最大序號推測
    total_expected = expected_total or (max_chunk + 1)

    expected_chunks = set(range(total_expected))
    missing_chunks = sorted(list(expected_chunks - received_chunks))

    return {
        "type": "status",
        "received_count": len(received_chunks),
        "expected_total": total_expected,
        "missing_chunks": missing_chunks,
        "status": "complete" if not missing_chunks else "incomplete"
    }


# END FILE CONTENTS


# File: frontend/components/NetworkRestorerClient.tsx

"use client"
import { useNetworkRestorer } from '@/hooks/useNetworkRestorer'

export function NetworkRestorerClient() {
    useNetworkRestorer()
    return null
}


# END FILE CONTENTS


# File: frontend/hooks/use-recording-new.ts

"use client"

import { useState, useCallback, useRef, useEffect } from 'react'
import { useAppStateContext } from './use-app-state-context'
import { isFeatureEnabled } from '../lib/feature-flags'
import { SERVICE_KEYS, serviceContainer } from '../lib/services'
import type { IRecordingService, ITranscriptService, TranscriptMessage } from '../lib/services'

interface UseRecordingNewReturn {
  isRecording: boolean
  recordingTime: number
  transcripts: TranscriptMessage[]
  transcriptCompleted: boolean
  error: string | null
  startRecording: (sessionId: string) => Promise<void>
  stopRecording: () => void
  clearTranscripts: () => void
}

/**
 * useRecordingNew - 錄音管理 Hook (適配器層)
 *
 * 重構為適配器層：
 * - 內部調用 RecordingService 和 TranscriptService 而非直接管理音頻錄製器
 * - 保持對外接口完全不變，確保組件層無感知變更
 * - 簡化複雜的錄音邏輯，委託給服務層處理
 */
export function useRecordingNew(): UseRecordingNewReturn {
  // 使用新的 Context 狀態管理
  const context = useAppStateContext()

  // 本地狀態（將逐漸遷移到 Context）
  const [localError, setLocalError] = useState<string | null>(null)
  const [localTranscriptCompleted, setLocalTranscriptCompleted] = useState(false)

  // 服務引用
  const recordingServiceRef = useRef<IRecordingService | null>(null)
  const transcriptServiceRef = useRef<ITranscriptService | null>(null)
  const currentSessionIdRef = useRef<string | null>(null)

  // 全域唯一錄音計時器 - 使用 useRef 保持穩定引用
  const recTimerRef = useRef<ReturnType<typeof setInterval> | null>(null)
  const recordingStartedAtRef = useRef<number | null>(null)

  // waiting→active 超時保險
  const waitingTimeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null)

  console.log('🔄 [useRecordingNew] Hook 初始化 (適配器層)，功能開關狀態:', {
    useNewStateManagement: isFeatureEnabled('useNewStateManagement'),
    useNewRecordingHook: isFeatureEnabled('useNewRecordingHook'),
    contextState: context.appData.state,
    contextIsRecording: context.appData.isRecording,
    contextRecordingTime: context.appData.recordingTime,
    timestamp: new Date().toISOString()
  })

  // 清除 waiting 超時
  const clearWaitingTimeout = useCallback(() => {
    if (waitingTimeoutRef.current) {
      clearTimeout(waitingTimeoutRef.current)
      waitingTimeoutRef.current = null
      console.log('⏰ [useRecordingNew] Waiting 超時已清除')
    }
  }, [])

  // 初始化服務實例
  const initializeServices = useCallback(() => {
    if (!recordingServiceRef.current) {
      try {
        recordingServiceRef.current = serviceContainer.resolve<IRecordingService>(SERVICE_KEYS.RECORDING_SERVICE)
        console.log('✅ [useRecordingNew] RecordingService 初始化成功')
      } catch (error) {
        console.error('❌ [useRecordingNew] 無法解析 RecordingService:', error)
        throw new Error('錄音服務初始化失敗')
      }
    }

    if (!transcriptServiceRef.current) {
      try {
        transcriptServiceRef.current = serviceContainer.resolve<ITranscriptService>(SERVICE_KEYS.TRANSCRIPT_SERVICE)
        console.log('✅ [useRecordingNew] TranscriptService 初始化成功')
      } catch (error) {
        console.error('❌ [useRecordingNew] 無法解析 TranscriptService:', error)
        throw new Error('逐字稿服務初始化失敗')
      }
    }
  }, [])

  // 處理逐字稿接收 - 整合 Context
  const handleTranscript = useCallback((transcript: TranscriptMessage) => {
    console.log('📝 [useRecordingNew] 收到逐字稿訊息:', {
      type: transcript.type,
      text: transcript.text,
      textLength: transcript.text?.length || 0,
      start_time: transcript.start_time,
      end_time: transcript.end_time,
      start_sequence: transcript.start_sequence,
      confidence: transcript.confidence,
      sessionId: currentSessionIdRef.current,
      timestamp: new Date().toISOString(),
    })

    // 處理轉錄完成通知
    if (transcript.type === 'transcript_complete' || transcript.message === 'transcription_complete') {
      console.log('✅ [useRecordingNew] 逐字稿轉錄完成，設定 transcriptCompleted=true')
      setLocalTranscriptCompleted(true)
      return
    }

    // 處理 active phase 訊息（重要：這會觸發狀態轉換）
    if (transcript.type === 'active' || transcript.phase === 'active') {
      console.log('🚀 [useRecordingNew] 收到 active phase 訊息，轉錄開始')
      // 清除 waiting 超時
      clearWaitingTimeout()
      // 使用狀態機觸發轉換
      const result = context.transition('FIRST_TRANSCRIPT_RECEIVED')
      if (result?.success) {
        console.log('✅ [useRecordingNew] 狀態機轉換成功: recording_waiting → recording_active')
      }
      return
    }

    // 只處理逐字稿片段類型的訊息
    if (transcript.type !== 'transcript_segment') {
      console.log('⚠️ [useRecordingNew] 跳過非逐字稿片段訊息:', transcript.type)
      return
    }

    if (!transcript.text) {
      console.log('⚠️ [useRecordingNew] 跳過空文字逐字稿')
      return
    }

    console.log('🔄 [useRecordingNew] 開始處理逐字稿片段...', {
      text: transcript.text,
      textPreview: transcript.text.substring(0, 50) + '...',
      sequence: transcript.start_sequence,
      startTime: transcript.start_time,
      endTime: transcript.end_time
    })

    // 使用 Context 更新逐字稿 - 轉換為 TranscriptEntry 格式
    const startTime = transcript.start_time ?? 0
    const hours = Math.floor(startTime / 3600)
    const minutes = Math.floor((startTime % 3600) / 60)
    const seconds = Math.floor(startTime % 60)
    const timeStr = `${hours.toString().padStart(2, "0")}:${minutes.toString().padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`

    const transcriptEntry = {
      time: timeStr,
      text: transcript.text ?? '',
    }

    // 如果是第一個逐字稿片段且狀態還是 waiting，先觸發狀態轉換
    const isFirstTranscript = context.appData.state === 'recording_waiting' && context.appData.transcriptEntries.length === 0

    context.addTranscriptEntry(transcriptEntry)
    console.log('✅ [useRecordingNew] 逐字稿已添加到 Context')

    if (isFirstTranscript) {
      // 清除 waiting 超時
      clearWaitingTimeout()
      const result = context.transition('FIRST_TRANSCRIPT_RECEIVED')
      if (result?.success) {
        console.log('✅ [useRecordingNew] 收到第一個逐字稿片段，狀態機轉換: recording_waiting → recording_active')
      } else {
        console.warn('⚠️ [useRecordingNew] 狀態機轉換失敗:', result?.error)
      }
    }
  }, [context, clearWaitingTimeout])

  // 開始錄音 - 使用服務層
  const startRecording = useCallback(async (sessionId: string): Promise<void> => {
    try {
      setLocalError(null)
      context.setError(null)
      setLocalTranscriptCompleted(false)
      currentSessionIdRef.current = sessionId

      // 立即啟動計時器
      if (recTimerRef.current) {
        clearInterval(recTimerRef.current)
        recTimerRef.current = null
      }
      recordingStartedAtRef.current = Date.now()
      context.setRecordingTime(0)
      recTimerRef.current = setInterval(() => {
        if (recordingStartedAtRef.current) {
          const sec = Math.floor((Date.now() - recordingStartedAtRef.current) / 1000)
          context.setRecordingTime(sec)
        }
      }, 1000)

      context.setRecording(true)
      console.log('⏱️ [useRecordingNew] 計時器立即啟動')

      // 設置 waiting→active 超時保險（20秒）
      clearWaitingTimeout()
      waitingTimeoutRef.current = setTimeout(() => {
        if (context.appData.state === 'recording_waiting') {
          console.warn('⚠️ [useRecordingNew] 20秒內未收到逐字稿，強制轉換到 recording_active')
          const result = context.transition('FIRST_TRANSCRIPT_RECEIVED')
          if (result?.success) {
            console.log('✅ [useRecordingNew] 超時保險觸發: recording_waiting → recording_active')
          } else {
            console.error('❌ [useRecordingNew] 超時保險轉換失敗:', result?.error)
          }
        }
      }, 20000)
      console.log('⏰ [useRecordingNew] 已設置 20 秒 waiting 超時保險')

      // 初始化服務
      initializeServices()
      const recordingService = recordingServiceRef.current!
      console.log('Recorder instance', recordingService)
      const transcriptService = transcriptServiceRef.current!

      // 確保先建立 WebSocket 連線再註冊監聽器，避免漏接訊息
      await transcriptService.connect(sessionId)

      // 設置錄音狀態監聽（保留原本 interval 作為備用）
      const checkRecordingState = () => {
        const state = recordingService.getRecordingState()
        context.setRecording(state.isRecording)
        // context.setRecordingTime(state.recordingTime) // 由 recTimer 主導
        if (state.error) {
          setLocalError(state.error)
          context.setError(state.error)
        }
      }
      const stateCheckInterval = setInterval(checkRecordingState, 1000)

      transcriptService.addTranscriptListener(sessionId, handleTranscript)
      await recordingService.startRecording(sessionId)

      const cleanup = () => {
        clearInterval(stateCheckInterval)
        transcriptService.removeTranscriptListener(sessionId, handleTranscript)
        if (recTimerRef.current) {
          clearInterval(recTimerRef.current)
          recTimerRef.current = null
          recordingStartedAtRef.current = null
          console.log('⏹️ [useRecordingNew] 計時器已清除')
        }
        // 清除 waiting 超時
        clearWaitingTimeout()
      }
      (globalThis as any).currentRecordingCleanup = cleanup
      console.log('✅ [useRecordingNew] 錄音開始成功 (服務層)，Session ID:', sessionId)
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '開始錄音失敗'
      setLocalError(errorMessage)
      context.setError(errorMessage)
      console.error('❌ [useRecordingNew] 開始錄音失敗:', err)
      // 清除 waiting 超時
      clearWaitingTimeout()
    }
  }, [initializeServices, handleTranscript, context, clearWaitingTimeout])

  // 停止錄音 - 使用服務層
  const stopRecording = useCallback(() => {
    try {
      console.log('🛑 [useRecordingNew] 停止錄音 (適配器層)')
      // 清除 recTimer
      if (recTimerRef.current) {
        clearInterval(recTimerRef.current)
        recTimerRef.current = null
        recordingStartedAtRef.current = null
        console.log('⏹️ [useRecordingNew] 計時器已清除')
      }
      // 清除 waiting 超時
      clearWaitingTimeout()
      // 執行清理函數
      const cleanup = (globalThis as any).currentRecordingCleanup
      if (cleanup) {
        cleanup()
        delete (globalThis as any).currentRecordingCleanup
      }
      // 使用服務層停止錄音
      const recordingService = recordingServiceRef.current
      if (recordingService) {
        recordingService.stopRecording()
      }

      // 更新 Context 狀態
      context.setRecording(false)

      console.log('✅ [useRecordingNew] 錄音停止成功 (服務層)，等待轉錄完成')

    } catch (err) {
      console.error('❌ [useRecordingNew] 停止錄音失敗:', err)
      const errorMessage = '停止錄音時發生錯誤'
      setLocalError(errorMessage)
      context.setError(errorMessage)
    }
  }, [context, clearWaitingTimeout])

  // 清空逐字稿 - 整合 Context
  const clearTranscripts = useCallback(() => {
    context.setTranscriptEntries([])
    setLocalTranscriptCompleted(false)
    console.log('🔄 [useRecordingNew] 逐字稿已清除 (適配器層)')
  }, [context])

  // 清理資源
  useEffect(() => {
    return () => {
      // 清理逐字稿監聽器
      if (currentSessionIdRef.current && transcriptServiceRef.current) {
        transcriptServiceRef.current.removeTranscriptListener(currentSessionIdRef.current, handleTranscript)
      }

      // 清理錄音狀態檢查
      const cleanup = (globalThis as any).currentRecordingCleanup
      if (cleanup) {
        cleanup()
        delete (globalThis as any).currentRecordingCleanup
      }

      // 清理計時器
      if (recTimerRef.current) {
        clearInterval(recTimerRef.current)
        recTimerRef.current = null
        recordingStartedAtRef.current = null
        console.log('🔚 [useRecordingNew] useEffect cleanup: 計時器已清除')
      }

      // 清理 waiting 超時
      clearWaitingTimeout()
    }
  }, [handleTranscript, clearWaitingTimeout])

  // 組件真正卸載時的清理（例如頁面切換）
  useEffect(() => {
    const handleUnload = () => {
      console.log('🔚 [useRecordingNew] 頁面卸載，清理所有資源 (適配器層)')
      const cleanup = (globalThis as any).currentRecordingCleanup
      if (cleanup) {
        cleanup()
        delete (globalThis as any).currentRecordingCleanup
      }

      const recordingService = recordingServiceRef.current
      if (recordingService) {
        recordingService.stopRecording()
      }
    }

    window.addEventListener('beforeunload', handleUnload)
    return () => {
      window.removeEventListener('beforeunload', handleUnload)
    }
  }, [])

  // 轉換 TranscriptMessage[] 為向後相容格式
  const compatibleTranscripts: TranscriptMessage[] = context.appData.transcriptEntries.map((entry, index) => ({
    type: 'transcript_segment',
    text: entry.text,
    start_time: 0, // 簡化處理，實際應該從 time 字串解析
    end_time: 0,
    start_sequence: index,
    confidence: 1.0,
    timestamp: Date.now(),
  }))

  // 返回介面保持與舊版相容
  return {
    isRecording: context.appData.isRecording,
    recordingTime: context.appData.recordingTime,
    transcripts: compatibleTranscripts,
    transcriptCompleted: localTranscriptCompleted,
    error: context.error || localError,
    startRecording,
    stopRecording,
    clearTranscripts,
  }
}


# END FILE CONTENTS


# File: frontend/lib/feature-flags.ts

"use client"

// 功能開關配置
export interface FeatureFlags {
  useNewStateManagement: boolean
  useNewRecordingHook: boolean
  useNewSessionHook: boolean
  useNewTranscriptHook: boolean
  useNewAppStateHook: boolean
  useSimpleRecordingService: boolean  // 🔧 Phase 2.5: 使用進階錄音服務 (AdvancedAudioRecorder)
  enableStateSync: boolean
  enableDebugLogging: boolean
}

// 預設功能開關設定（新模式啟用）
const defaultFeatureFlags: FeatureFlags = {
  useNewStateManagement: true,   // 🆕 啟用新狀態管理
  useNewRecordingHook: true,     // 🆕 啟用新 recording hook
  useNewSessionHook: true,       // 🆕 啟用新 session hook
  useNewTranscriptHook: true,    // 🆕 啟用新 transcript hook
  useNewAppStateHook: true,      // 🆕 啟用新 app state hook
  useSimpleRecordingService: true, // 🔧 Phase 2.5: 啟用進階錄音服務 (修復 WebM Header)
  enableStateSync: true,         // 預設開啟狀態同步
  enableDebugLogging: true,      // 預設開啟調試日誌
}

// 從 localStorage 讀取功能開關設定
function loadFeatureFlags(): FeatureFlags {
  if (typeof window === 'undefined') {
    return defaultFeatureFlags
  }

  try {
    const stored = localStorage.getItem('study-scriber-feature-flags')
    if (stored) {
      const parsed = JSON.parse(stored)
      return { ...defaultFeatureFlags, ...parsed }
    }
  } catch (error) {
    console.warn('🚩 [FeatureFlags] 讀取功能開關失敗:', error)
  }

  return defaultFeatureFlags
}

// 儲存功能開關設定到 localStorage
function saveFeatureFlags(flags: Partial<FeatureFlags>): void {
  if (typeof window === 'undefined') return

  try {
    const current = loadFeatureFlags()
    const updated = { ...current, ...flags }
    localStorage.setItem('study-scriber-feature-flags', JSON.stringify(updated))
    console.log('🚩 [FeatureFlags] 功能開關已更新:', updated)
  } catch (error) {
    console.error('🚩 [FeatureFlags] 儲存功能開關失敗:', error)
  }
}

// 功能開關管理器
class FeatureFlagManager {
  private flags: FeatureFlags

  constructor() {
    this.flags = loadFeatureFlags()
    this.exposeToWindow()
  }

  // 檢查功能是否啟用
  isEnabled(flag: keyof FeatureFlags): boolean {
    return this.flags[flag]
  }

  // 啟用功能
  enable(flag: keyof FeatureFlags): void {
    this.updateFlag(flag, true)
  }

  // 停用功能
  disable(flag: keyof FeatureFlags): void {
    this.updateFlag(flag, false)
  }

  // 切換功能狀態
  toggle(flag: keyof FeatureFlags): void {
    this.updateFlag(flag, !this.flags[flag])
  }

  // 更新單一功能開關
  private updateFlag(flag: keyof FeatureFlags, value: boolean): void {
    this.flags = { ...this.flags, [flag]: value }
    saveFeatureFlags({ [flag]: value })

    console.log(`🚩 [FeatureFlags] ${flag}: ${value ? '啟用' : '停用'}`)

    // 如果是關鍵功能，給予警告
    if (flag === 'useNewStateManagement' && value) {
      console.warn('⚠️ [FeatureFlags] 新狀態管理系統已啟用，請確保已完成測試')
    }
  }

  // 批次更新功能開關
  updateFlags(updates: Partial<FeatureFlags>): void {
    this.flags = { ...this.flags, ...updates }
    saveFeatureFlags(updates)
    console.log('🚩 [FeatureFlags] 批次更新完成:', updates)
  }

  // 重置所有功能開關
  reset(): void {
    this.flags = defaultFeatureFlags
    if (typeof window !== 'undefined') {
      localStorage.removeItem('study-scriber-feature-flags')
    }
    console.log('🚩 [FeatureFlags] 已重置為預設值')
  }

  // 取得當前所有功能開關狀態
  getAll(): FeatureFlags {
    return { ...this.flags }
  }

  // 暴露到 window 供調試使用
  private exposeToWindow(): void {
    if (typeof window !== 'undefined') {
      (window as any).featureFlags = {
        enable: (flag: keyof FeatureFlags) => this.enable(flag),
        disable: (flag: keyof FeatureFlags) => this.disable(flag),
        toggle: (flag: keyof FeatureFlags) => this.toggle(flag),
        isEnabled: (flag: keyof FeatureFlags) => this.isEnabled(flag),
        getAll: () => this.getAll(),
        reset: () => this.reset(),

        // 便利方法
        enableNewState: () => this.enable('useNewStateManagement'),
        disableNewState: () => this.disable('useNewStateManagement'),
        enableAll: () => this.updateFlags({
          useNewStateManagement: true,
          useNewRecordingHook: true,
          useNewSessionHook: true,
          useNewTranscriptHook: true,
          useNewAppStateHook: true,
        }),
        disableAll: () => this.updateFlags({
          useNewStateManagement: false,
          useNewRecordingHook: false,
          useNewSessionHook: false,
          useNewTranscriptHook: false,
          useNewAppStateHook: false,
        }),
      }

      console.log('🚩 [FeatureFlags] 調試介面已暴露到 window.featureFlags')
      console.log('   使用方法: window.featureFlags.enableNewState()')
      console.log('   查看狀態: window.featureFlags.getAll()')
    }
  }
}

// 單例模式
export const featureFlagManager = new FeatureFlagManager()

// 便利函數
export const isFeatureEnabled = (flag: keyof FeatureFlags): boolean =>
  featureFlagManager.isEnabled(flag)

export const enableFeature = (flag: keyof FeatureFlags): void =>
  featureFlagManager.enable(flag)

export const disableFeature = (flag: keyof FeatureFlags): void =>
  featureFlagManager.disable(flag)


# END FILE CONTENTS


# File: frontend/components/ui/radio-group.tsx

"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }


# END FILE CONTENTS


# File: frontend/lib/services/__tests__/session-service-409.test.ts

/**
 * SessionService 409 衝突處理測試
 *
 * 測試 ensureRecordingSession 方法在遇到會話衝突時的處理邏輯
 */

import { describe, test, expect, vi, beforeEach, afterEach } from 'vitest'
import { SessionService } from '../session-service'
import { sessionAPI } from '../../api'
import type { SessionResponse } from '../../api'

// Mock sessionAPI
vi.mock('../../api', () => ({
    sessionAPI: {
        createSession: vi.fn(),
        getActiveSession: vi.fn(),
        upgradeToRecording: vi.fn(),
        finishSession: vi.fn(),
        deleteSession: vi.fn()
    }
}))

describe('SessionService - 409 衝突處理', () => {
    let sessionService: SessionService
    const mockSessionAPI = sessionAPI as any

    // 測試用的會話數據
    const mockExistingSession: SessionResponse = {
        id: 'existing-session-123',
        title: '現有錄音會話',
        type: 'recording',
        status: 'active',
        language: 'zh-TW',
        created_at: '2024-01-01T00:00:00Z',
        updated_at: '2024-01-01T00:00:00Z'
    }

    const mockNewSession: SessionResponse = {
        id: 'new-session-456',
        title: '新錄音會話',
        type: 'recording',
        status: 'active',
        language: 'zh-TW',
        created_at: '2024-01-01T01:00:00Z',
        updated_at: '2024-01-01T01:00:00Z'
    }

    const mockNoteSession: SessionResponse = {
        id: 'note-session-789',
        title: '現有筆記會話',
        type: 'note_only',
        status: 'active',
        language: 'zh-TW',
        created_at: '2024-01-01T02:00:00Z',
        updated_at: '2024-01-01T02:00:00Z'
    }

    beforeEach(() => {
        sessionService = new SessionService()
        vi.clearAllMocks()
    })

    afterEach(() => {
        vi.restoreAllMocks()
    })

    describe('ensureRecordingSession - 成功情境', () => {
        test('當沒有現有會話時，應該成功創建新的錄音會話', async () => {
            // Arrange
            mockSessionAPI.createSession.mockResolvedValueOnce(mockNewSession)

            // Act
            const result = await sessionService.ensureRecordingSession('測試標題')

            // Assert
            expect(result).toEqual(mockNewSession)
            expect(mockSessionAPI.createSession).toHaveBeenCalledWith({
                title: '測試標題',
                type: 'recording',
                content: undefined
            })
            expect(mockSessionAPI.getActiveSession).not.toHaveBeenCalled()
        })
    })

    describe('ensureRecordingSession - 409 衝突處理', () => {
        test('當創建會話遇到 409 衝突時，應該獲取現有的錄音會話', async () => {
            // Arrange
            const conflictError = {
                response: {
                    status: 409,
                    data: { detail: '已有活躍會話' }
                },
                isAxiosError: true
            }

            mockSessionAPI.createSession.mockRejectedValueOnce(conflictError)
            mockSessionAPI.getActiveSession.mockResolvedValueOnce(mockExistingSession)

            // Act
            const result = await sessionService.ensureRecordingSession('測試標題')

            // Assert
            expect(result).toEqual(mockExistingSession)
            expect(mockSessionAPI.createSession).toHaveBeenCalledWith({
                title: '測試標題',
                type: 'recording',
                content: undefined
            })
            expect(mockSessionAPI.getActiveSession).toHaveBeenCalledOnce()
        })

        test('當遇到 409 但現有會話是筆記會話時，應該升級為錄音會話', async () => {
            // Arrange
            const conflictError = {
                response: { status: 409 },
                isAxiosError: true
            }

            const upgradedSession: SessionResponse = {
                ...mockNoteSession,
                type: 'recording'
            }

            mockSessionAPI.createSession.mockRejectedValueOnce(conflictError)
            // 第一次調用 - ensureRecordingSession 中檢查現有會話
            mockSessionAPI.getActiveSession.mockResolvedValueOnce(mockNoteSession)
            // 第二次調用 - upgradeToRecording 中檢查會話狀態
            mockSessionAPI.getActiveSession.mockResolvedValueOnce(mockNoteSession)
            mockSessionAPI.upgradeToRecording.mockResolvedValueOnce(upgradedSession)

            // Act
            const result = await sessionService.ensureRecordingSession('測試標題')

            // Assert
            expect(result).toEqual(upgradedSession)
            expect(mockSessionAPI.createSession).toHaveBeenCalled()
            expect(mockSessionAPI.getActiveSession).toHaveBeenCalledTimes(2)
            expect(mockSessionAPI.upgradeToRecording).toHaveBeenCalledWith(mockNoteSession.id)
        })

        test('當遇到 409 但無法獲取現有會話時，應該拋出錯誤', async () => {
            // Arrange
            const conflictError = {
                response: { status: 409 },
                isAxiosError: true
            }

            mockSessionAPI.createSession.mockRejectedValueOnce(conflictError)
            mockSessionAPI.getActiveSession.mockResolvedValueOnce(null)

            // Act & Assert
            await expect(
                sessionService.ensureRecordingSession('測試標題')
            ).rejects.toThrow('會話衝突但無法獲取現有活躍會話，請重新整理頁面')

            expect(mockSessionAPI.createSession).toHaveBeenCalled()
            expect(mockSessionAPI.getActiveSession).toHaveBeenCalledOnce()
        })

        test('當遇到非 409 錯誤時，應該直接拋出原錯誤', async () => {
            // Arrange
            const networkError = new Error('網路連接失敗')
            mockSessionAPI.createSession.mockRejectedValueOnce(networkError)

            // Act & Assert
            await expect(
                sessionService.ensureRecordingSession('測試標題')
            ).rejects.toThrow()

            expect(mockSessionAPI.createSession).toHaveBeenCalled()
            expect(mockSessionAPI.getActiveSession).not.toHaveBeenCalled()
        })
    })

    describe('ensureRecordingSession - 邊緣情況', () => {
        test('當標題為空時，應該使用預設標題', async () => {
            // Arrange
            mockSessionAPI.createSession.mockResolvedValueOnce(mockNewSession)

            // Act
            const result = await sessionService.ensureRecordingSession()

            // Assert
            expect(result).toEqual(mockNewSession)
            expect(mockSessionAPI.createSession).toHaveBeenCalledWith({
                title: expect.stringMatching(/錄音筆記 \d{1,2}\/\d{1,2}\/\d{4}/),
                type: 'recording',
                content: undefined
            })
        })

        test('當提供內容時，應該正確傳遞給 API', async () => {
            // Arrange
            mockSessionAPI.createSession.mockResolvedValueOnce(mockNewSession)

            // Act
            const result = await sessionService.ensureRecordingSession('測試標題', '測試內容')

            // Assert
            expect(result).toEqual(mockNewSession)
            expect(mockSessionAPI.createSession).toHaveBeenCalledWith({
                title: '測試標題',
                type: 'recording',
                content: '測試內容'
            })
        })
    })

    describe('ensureRecordingSession - 整合流程測試', () => {
        test('完整的 409 衝突處理流程：創建失敗 → 獲取現有會話 → 升級會話', async () => {
            // Arrange
            const conflictError = {
                response: { status: 409 },
                isAxiosError: true
            }

            const upgradedSession: SessionResponse = {
                ...mockNoteSession,
                type: 'recording'
            }

            mockSessionAPI.createSession.mockRejectedValueOnce(conflictError)
            // 第一次調用 - ensureRecordingSession 中檢查現有會話
            mockSessionAPI.getActiveSession.mockResolvedValueOnce(mockNoteSession)
            // 第二次調用 - upgradeToRecording 中檢查會話狀態
            mockSessionAPI.getActiveSession.mockResolvedValueOnce(mockNoteSession)
            mockSessionAPI.upgradeToRecording.mockResolvedValueOnce(upgradedSession)

            // Act
            const result = await sessionService.ensureRecordingSession('整合測試')

            // Assert - 驗證調用順序和參數
            expect(mockSessionAPI.createSession).toHaveBeenCalledWith({
                title: '整合測試',
                type: 'recording',
                content: undefined
            })
            expect(mockSessionAPI.getActiveSession).toHaveBeenCalledAfter(
                mockSessionAPI.createSession as any
            )
            expect(mockSessionAPI.upgradeToRecording).toHaveBeenCalledWith(mockNoteSession.id)
            expect(result).toEqual(upgradedSession)
        })

        test('優雅的錯誤恢復：API 調用順序正確且錯誤處理適當', async () => {
            // Arrange
            const conflictError = {
                response: { status: 409 },
                isAxiosError: true
            }

            mockSessionAPI.createSession.mockRejectedValueOnce(conflictError)
            mockSessionAPI.getActiveSession.mockResolvedValueOnce(mockExistingSession)

            // Act
            const result = await sessionService.ensureRecordingSession('錯誤恢復測試')

            // Assert - 驗證最終結果正確
            expect(result).toEqual(mockExistingSession)
            expect(result.type).toBe('recording')
            expect(result.status).toBe('active')

            // 驗證不需要升級（因為現有會話已經是錄音會話）
            expect(mockSessionAPI.upgradeToRecording).not.toHaveBeenCalled()
        })
    })
})


# END FILE CONTENTS


# File: frontend/components/ui/pagination.tsx

import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}


# END FILE CONTENTS


# File: frontend/lib/utils.ts

import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


# END FILE CONTENTS


# File: frontend/e2e/export-api.spec.ts

import { test, expect, Page } from '@playwright/test'
import JSZip from 'jszip'

// 測試用假 session id，請確保後端有對應 completed session 或手動設置
const TEST_SESSION_ID = 'test-session-completed-001'

// 下載並解壓 zip，驗證內容
async function fetchAndUnzipZip(page: Page, sid: string) {
    const response = await page.request.get(`/api/export/${sid}?type=zip`)
    expect(response.status()).toBe(200)
    const buffer = await response.body()
    const zip = await JSZip.loadAsync(buffer)
    const note = await zip.file('note.md')?.async('string')
    const transcript = await zip.file('transcript.txt')?.async('string')
    return { note, transcript }
}

test.describe('匯出 API Proxy 測試', () => {
    test('應該正確 proxy /api/export/<sid> 到 FastAPI', async ({ page }) => {
        // 直接發送 fetch 請求
        const response = await page.request.get(`/api/export/${TEST_SESSION_ID}?type=zip`)
        // 應該不是 404
        expect(response.status()).not.toBe(404)
        // 應該不是 Next.js 預設 404 頁面
        const text = await response.text()
        expect(text).not.toContain('This page could not be found')
        // 標頭應有 FastAPI 標記（如 server: uvicorn）
        const serverHeader = response.headers()['server'] || ''
        expect(serverHeader.toLowerCase()).toContain('uvicorn')
    })

    test('應該能下載並驗證 zip 內容', async ({ page }) => {
        const { note, transcript } = await fetchAndUnzipZip(page, TEST_SESSION_ID)
        expect(note).toBeDefined()
        expect(transcript).toBeDefined()
        expect(note?.length).toBeGreaterThan(0)
        expect(transcript?.length).toBeGreaterThan(0)
        // 可根據實際內容加強驗證
        expect(note).toMatch(/.+/) // 至少有內容
        expect(transcript).toMatch(/\[\d{2}:\d{2}:\d{2}\]/) // 有時間戳
    })
})


# END FILE CONTENTS


# File: frontend/lib/__tests__/state-management.test.ts

import { beforeEach, describe, expect, test, vi } from 'vitest'
import { renderHook, act } from '@testing-library/react'
import { createElement } from 'react'
import { AppStateProvider, useAppStateContext } from '../../hooks/use-app-state-context'
import { useAppStateNew } from '../../hooks/use-app-state-new'
import { featureFlagManager } from '../feature-flags'
import { InitialStateLoader } from '../initial-state-loader'
import type { ReactNode } from 'react'

// Mock 外部依賴
vi.mock('../../hooks/use-session-adapter', () => ({
    useSession: vi.fn(() => ({
        currentSession: null,
        isLoading: false,
        error: null,
        createNoteSession: vi.fn(),
        createRecordingSession: vi.fn(),
        upgradeToRecording: vi.fn(),
        finishSession: vi.fn(),
        deleteSession: vi.fn(),
        checkActiveSession: vi.fn(),
    }))
}))

vi.mock('../../hooks/use-recording-adapter', () => ({
    useRecording: vi.fn(() => ({
        isRecording: false,
        recordingTime: 0,
        transcripts: [],
        error: null,
        startRecording: vi.fn(),
        stopRecording: vi.fn(),
        clearTranscripts: vi.fn(),
    }))
}))

vi.mock('../../hooks/use-notes', () => ({
    useNotes: vi.fn(() => ({
        noteContent: '',
        loadNote: vi.fn(),
        clearNote: vi.fn(),
    }))
}))

vi.mock('../../hooks/use-transcript-adapter', () => ({
    useTranscript: vi.fn(() => ({
        isConnected: false,
        error: null,
        autoScrollEnabled: true,
        disconnect: vi.fn(),
        clearTranscripts: vi.fn(),
        enableAutoScroll: vi.fn(),
        disableAutoScroll: vi.fn(),
        scrollToLatest: vi.fn(),
    }))
}))

vi.mock('@/components/ui/use-toast', () => ({
    useToast: vi.fn(() => ({
        toast: vi.fn(),
    }))
}))

// Mock InitialStateLoader
vi.mock('../../initial-state-loader', () => ({
    InitialStateLoader: {
        loadInitialAppData: vi.fn(() => ({
            state: 'default',
            transcriptEntries: [],
            editorContent: '',
            isRecording: false,
            recordingTime: 0,
            session: null,
        })),
        saveAppState: vi.fn(),
        clearPersistedState: vi.fn(),
        hasPersistedState: vi.fn(() => false),
    }
}))

function TestWrapper({ children }: { children: ReactNode }) {
    return createElement(AppStateProvider, null, children)
}

describe('狀態管理整合測試', () => {
    beforeEach(() => {
        vi.clearAllMocks()
        featureFlagManager.reset()
        featureFlagManager.enable('useNewStateManagement')
    })

    describe('Context 與 Hook 協作', () => {
        test('Context 應該為 Hook 提供正確的狀態', () => {
            const { result } = renderHook(() => useAppStateNew(), {
                wrapper: TestWrapper
            })

            expect(result.current.appData).toBeDefined()
            expect(result.current.appData.state).toBe('default')
            expect(result.current.appData.isRecording).toBe(false)
            expect(result.current.appData.transcriptEntries).toEqual([])
        })

        test('Hook 的狀態變更應該更新 Context', async () => {
            const { result } = renderHook(() => {
                const context = useAppStateContext()
                const hook = useAppStateNew()
                return { context, hook }
            }, {
                wrapper: TestWrapper
            })

            // 測試編輯器內容更新
            await act(async () => {
                result.current.hook.saveLocalDraft('測試內容')
            })

            expect(result.current.context.appData.editorContent).toBe('測試內容')
        })

        test('Context dispatch 應該觸發 Hook 重新渲染', async () => {
            const { result } = renderHook(() => {
                const context = useAppStateContext()
                const hook = useAppStateNew()
                return { context, hook }
            }, {
                wrapper: TestWrapper
            })

            const initialIsRecording = result.current.hook.appData.isRecording

            // 直接透過 Context dispatch 更新狀態
            await act(async () => {
                result.current.context.dispatch({
                    type: 'SET_RECORDING',
                    payload: true
                })
            })

            // Hook 應該重新渲染並反映新狀態
            expect(result.current.hook.appData.isRecording).toBe(true)
            expect(result.current.hook.appData.isRecording).not.toBe(initialIsRecording)
        })
    })

    describe('狀態一致性測試', () => {
        test('多個 Hook 實例應該共享相同狀態', () => {
            const { result: result1 } = renderHook(() => useAppStateNew(), {
                wrapper: TestWrapper
            })
            const { result: result2 } = renderHook(() => useAppStateNew(), {
                wrapper: TestWrapper
            })

            // 兩個 Hook 實例應該有相同的狀態
            expect(result1.current.appData.state).toBe(result2.current.appData.state)
            expect(result1.current.appData.isRecording).toBe(result2.current.appData.isRecording)
        })

        test('狀態變更應該同步到所有 Hook 實例', async () => {
            const { result: result1 } = renderHook(() => useAppStateNew(), {
                wrapper: TestWrapper
            })
            const { result: result2 } = renderHook(() => useAppStateNew(), {
                wrapper: TestWrapper
            })

            // 透過第一個 Hook 更新狀態
            await act(async () => {
                result1.current.saveLocalDraft('同步測試')
            })

            // 第二個 Hook 應該反映相同的變更
            expect(result2.current.appData.editorContent).toBe('同步測試')
        })
    })

    describe('初始狀態載入整合', () => {
        test('Provider 啟動時應該載入初始狀態', () => {
            const mockInitialData = {
                state: 'recording_active' as const,
                transcriptEntries: [{ time: '00:01', text: '測試逐字稿' }],
                editorContent: '測試內容',
                isRecording: true,
                recordingTime: 30,
                session: { id: 'test-session', status: 'active' as const, type: 'recording' as const }
            }

            vi.mocked(InitialStateLoader.loadInitialAppData).mockReturnValue(mockInitialData)

            const { result } = renderHook(() => useAppStateNew(), {
                wrapper: TestWrapper
            })

            // 應該載入初始狀態
            expect(InitialStateLoader.loadInitialAppData).toHaveBeenCalled()
            // 注意：由於 useEffect 的異步特性，初始狀態可能需要額外的渲染週期
        })

        test('狀態變更應該觸發持久化', async () => {
            const { result } = renderHook(() => useAppStateNew(), {
                wrapper: TestWrapper
            })

            await act(async () => {
                result.current.saveLocalDraft('需要持久化的內容')
            })

            // 等待持久化邏輯執行
            await new Promise(resolve => setTimeout(resolve, 1100)) // 等待超過 1 秒的延遲

            expect(InitialStateLoader.saveAppState).toHaveBeenCalled()
        })
    })

    describe('錯誤處理整合', () => {
        test('初始狀態載入失敗應該使用預設狀態', () => {
            vi.mocked(InitialStateLoader.loadInitialAppData).mockImplementation(() => {
                throw new Error('載入失敗')
            })

            const { result } = renderHook(() => useAppStateNew(), {
                wrapper: TestWrapper
            })

            // 應該回退到預設狀態
            expect(result.current.appData.state).toBe('default')
            expect(result.current.appData.transcriptEntries).toEqual([])
        })

        test('持久化失敗不應該影響應用運作', async () => {
            vi.mocked(InitialStateLoader.saveAppState).mockImplementation(() => {
                throw new Error('儲存失敗')
            })

            const { result } = renderHook(() => useAppStateNew(), {
                wrapper: TestWrapper
            })

            // 狀態變更應該仍然正常工作
            await act(async () => {
                result.current.saveLocalDraft('測試內容')
            })

            expect(result.current.appData.editorContent).toBe('測試內容')
        })
    })

    describe('記憶體管理', () => {
        test('Hook unmount 不應該導致記憶體洩漏', () => {
            const { unmount } = renderHook(() => useAppStateNew(), {
                wrapper: TestWrapper
            })

            // unmount 應該正常執行而不拋出錯誤
            expect(() => unmount()).not.toThrow()
        })

        test('多次 mount/unmount 應該穩定', () => {
            for (let i = 0; i < 5; i++) {
                const { unmount } = renderHook(() => useAppStateNew(), {
                    wrapper: TestWrapper
                })
                unmount()
            }

            // 最後一次應該仍然正常工作
            const { result } = renderHook(() => useAppStateNew(), {
                wrapper: TestWrapper
            })

            expect(result.current.appData).toBeDefined()
        })
    })
})


# END FILE CONTENTS


# File: app/schemas/session.py

"""
StudyScriber Session Pydantic 模型

定義會話相關的請求和響應模型
"""
import enum
from datetime import datetime
from typing import Optional
from uuid import UUID
from pydantic import BaseModel, Field, ConfigDict

class SessionType(str, enum.Enum):
    """會話類型"""
    NOTE_ONLY = "note_only"
    RECORDING = "recording"

class SessionStatus(str, enum.Enum):
    """會話狀態"""
    ACTIVE = "active"
    COMPLETED = "completed"
    ERROR = "error"

class LanguageCode(str, enum.Enum):
    """支援的語言代碼"""
    ZH_TW = "zh-TW"
    EN_US = "en-US"


class SessionCreateRequest(BaseModel):
    """建立會話請求"""
    title: Optional[str] = Field(None, max_length=150, description="會話標題")
    type: SessionType = Field(SessionType.NOTE_ONLY, description="會話類型")
    language: LanguageCode = Field(LanguageCode.ZH_TW, description="語言設定")
    stt_provider: Optional[str] = Field(None, description="語音轉文字 Provider ('whisper' or 'gemini')")
    content: Optional[str] = Field(None, description="初始筆記內容")
    start_ts: Optional[int] = Field(None, description="錄音開始時間戳（毫秒）")


class SessionOut(BaseModel):
    """會話輸出模型"""
    id: UUID
    type: SessionType
    status: SessionStatus
    title: Optional[str] = None
    language: LanguageCode
    created_at: datetime
    updated_at: datetime
    completed_at: Optional[datetime] = None

    class Config:
        from_attributes = True


class SessionUpgradeRequest(BaseModel):
    """會話升級請求（純筆記 → 錄音）"""
    language: Optional[LanguageCode] = Field(None, description="錄音語言設定")


class SessionFinishRequest(BaseModel):
    """完成會話請求"""
    duration: Optional[int] = Field(None, ge=0, description="最終錄音時長（秒）")


class SessionStatusResponse(BaseModel):
    """會話狀態響應"""
    success: bool = Field(description="操作是否成功")
    message: str = Field(description="回應訊息")
    session: Optional[SessionOut] = Field(None, description="會話資料")


class ActiveSessionError(BaseModel):
    """活躍會話衝突錯誤"""
    model_config = ConfigDict(json_encoders={UUID: str})

    error: str = Field("active_session_exists", description="錯誤類型")
    message: str = Field(description="錯誤訊息")
    active_session_id: UUID = Field(description="目前活躍會話 ID")


class SessionProviderUpdateRequest(BaseModel):
    """更新會話 STT Provider 請求"""
    stt_provider: str = Field(..., description="語音轉文字 Provider ('whisper' or 'gemini')")
    
    class Config:
        json_schema_extra = {
            "example": {
                "stt_provider": "gemini"
            }
        }


# END FILE CONTENTS


# File: frontend/lib/transcript-manager.ts

"use client"

import { TranscriptWebSocket, TranscriptMessage, WebSocketManager } from './websocket'
import { useAppStore } from './app-store-zustand'
import type { TranscriptEntry } from '../types/app-state'

/**
 * TranscriptManager - 統一管理 transcript WebSocket 連接的 Singleton
 *
 * 功能：
 * - 確保每個 session 只有一個 transcript 連接
 * - 統一管理連接狀態、心跳、重連
 * - 提供簡潔的 API 給其他組件使用
 */
export class TranscriptManager {
  private static instance: TranscriptManager | null = null
  private connections: Map<string, TranscriptWebSocket> = new Map()
  private listeners: Map<string, Set<(message: TranscriptMessage) => void>> = new Map()
  private connectionStates: Map<string, boolean> = new Map()
  private heartbeatIntervals: Map<string, NodeJS.Timeout> = new Map()
  private reconnectAttempts: Map<string, number> = new Map()
  private maxReconnectAttempts = 5
  private heartbeatInterval = 10000 // 10秒，避免伺服器過早判定逾時
  private reconnectDelay = 2000 // 2秒

  private constructor() {
    // Singleton pattern - 私有建構子

    // 開發模式下將實例掛到全域以利除錯
    if (typeof window !== 'undefined') {
      // @ts-ignore
      ; (window as any).transcriptManager = this
    }
  }

  /**
   * 取得 TranscriptManager 實例
   */
  static getInstance(): TranscriptManager {
    if (!TranscriptManager.instance) {
      TranscriptManager.instance = new TranscriptManager()
    }
    return TranscriptManager.instance
  }

  /**
   * 連接到指定 session 的 transcript feed
   */
  async connect(sessionId: string): Promise<void> {
    // 如果已經有連接，直接返回
    if (this.connections.has(sessionId) && this.connectionStates.get(sessionId)) {
      console.log(`📱 [TranscriptManager] Session ${sessionId} 已連接，跳過重複連接`)
      return
    }

    try {
      console.log(`📱 [TranscriptManager] 開始連接 session ${sessionId}`)

      // 清理舊連接（如果存在）
      await this.disconnect(sessionId)

      // 重置重連計數
      this.reconnectAttempts.set(sessionId, 0)

      // 建立新連接
      await this.establishConnection(sessionId)

      // 等待連線完全就緒
      await this.waitForConnectionReady(sessionId)

      console.log(`✅ [TranscriptManager] Session ${sessionId} 連接並就緒`)

    } catch (error) {
      console.error(`❌ [TranscriptManager] Session ${sessionId} 連接失敗:`, error)
      this.connectionStates.set(sessionId, false)

      // 嘗試重連
      this.scheduleReconnect(sessionId)
      throw error
    }
  }

  /**
   * 等待連線完全就緒
   */
  private async waitForConnectionReady(sessionId: string, timeout: number = 5000): Promise<void> {
    return new Promise((resolve, reject) => {
      const startTime = Date.now()

      const checkReady = () => {
        const ws = this.connections.get(sessionId)
        const isConnected = this.connectionStates.get(sessionId)

        console.log(`🔍 [TranscriptManager] 檢查連線就緒狀態:`, {
          sessionId,
          hasWebSocket: !!ws,
          isConnected: !!isConnected,
          wsReadyState: ws?.readyState,
          wsIsConnected: ws?.isConnected || false,
          elapsedTime: Date.now() - startTime
        })

        // 優化：更可靠的 WebSocket 就緒狀態檢測
        const wsReady = ws && (
          ws.isConnected ||
          ws.readyState === WebSocket.OPEN ||
          (typeof window !== 'undefined' && window.WebSocket && ws.readyState === 1) // 測試環境兼容
        )

        // 即時同步狀態，確保一致性
        if (ws && wsReady) {
          const actualConnected = true
          if (this.connectionStates.get(sessionId) !== actualConnected) {
            console.log(`🔄 [TranscriptManager] 即時同步連接狀態: ${sessionId} → ${actualConnected}`)
            this.connectionStates.set(sessionId, actualConnected)
          }

          console.log(`✅ [TranscriptManager] Session ${sessionId} 連線就緒`)
          resolve()
          return
        } else if (ws && !wsReady) {
          // WebSocket 存在但未就緒，同步狀態為 false
          const actualConnected = false
          if (this.connectionStates.get(sessionId) !== actualConnected) {
            console.log(`🔄 [TranscriptManager] 即時同步連接狀態: ${sessionId} → ${actualConnected}`)
            this.connectionStates.set(sessionId, actualConnected)
          }
        }

        // 檢查超時
        if (Date.now() - startTime > timeout) {
          console.error(`⏰ [TranscriptManager] Session ${sessionId} 連線就緒等待超時`)
          console.error(`   最終狀態: ws=${!!ws}, isConnected=${!!isConnected}, wsReady=${!!wsReady}`)
          reject(new Error(`連線就緒等待超時 (${timeout}ms)`))
          return
        }

        // 繼續等待
        setTimeout(checkReady, 100)
      }

      checkReady()
    })
  }

  /**
   * 建立 WebSocket 連接
   */
  private async establishConnection(sessionId: string): Promise<void> {
    const ws = new TranscriptWebSocket(sessionId)

    // 🧪 測試：跳過 TranscriptWebSocket 抽象層，直接使用 WebSocketManager 的 onMessage
    // 註釋原來的設定，使用直接的原生 WebSocket 處理
    // ws.onMessage((message) => {
    //   this.handleMessage(sessionId, message)
    // })

    // 設定連接關閉處理
    this.setupConnectionHandlers(ws, sessionId)

    // 連接 WebSocket
    await ws.connect()

    // 直接使用 WebSocketManager 的 onMessage 來設置原生 onmessage
    WebSocketManager.prototype.onMessage.call(ws, (evt: MessageEvent) => {
      console.log('[WS] raw frame', evt.data?.slice?.(0, 100))
      try {
        const message = JSON.parse(evt.data)
        console.log('[WS] parsed', message.type, message.text?.slice?.(0, 20))
        this.handleMessage(sessionId, message)
      } catch (error) {
        console.error('[WS] parse error', error)
      }
    })

    // 儲存連接
    this.connections.set(sessionId, ws)
    this.connectionStates.set(sessionId, true)

    // 發送初始 ping 啟動後端處理循環
    this.sendPing(sessionId)

    // 啟動心跳
    this.startHeartbeat(sessionId)

    console.log(`✅ TranscriptManager: Session ${sessionId} 連接成功`)
  }

  /**
* 設定連接處理器
*/
  private setupConnectionHandlers(ws: TranscriptWebSocket, sessionId: string): void {
    // 監聽 WebSocket 關閉事件
    ws.onClose((event) => {
      console.log(`🔌 TranscriptManager: Session ${sessionId} 連接關閉:`, event.code, event.reason)

      // 更新狀態
      this.connectionStates.set(sessionId, false)
      this.stopHeartbeat(sessionId)

      // 如果不是手動關閉，嘗試重連
      if (event.code !== 1000) { // 1000 = 正常關閉
        this.scheduleReconnect(sessionId)
      }
    })
  }

  /**
   * 處理收到的訊息
   */
  private handleMessage(sessionId: string, message: any): void {
    console.log('[T] raw', message.type, message.text?.slice(0, 20))

    console.log('🚨 [TranscriptManager] handleMessage 被調用!', {
      sessionId,
      rawMessage: message,
      messageType: typeof message,
      messageKeys: Object.keys(message || {}),
      timestamp: new Date().toISOString()
    })

    console.log('📨 [TranscriptManager] 收到訊息:', {
      sessionId,
      type: message.type,
      message: message,
      timestamp: new Date().toISOString(),
      listenerCount: this.listeners.get(sessionId)?.size || 0
    })

    // 處理不同類型的訊息
    if (message.type === 'transcript_entry') {
      console.log('📝 [TranscriptManager] 收到逐字稿條目:', {
        sessionId,
        payload: message.payload,
        timestamp: new Date().toISOString()
      })

      // 推送到 Zustand store
      const raw = message.payload
      if (raw && raw.text) {
        const parseTime = (t: string | undefined): number => {
          if (!t) return 0
          const parts = t.split(':').map(Number)
          return parts.length === 3
            ? parts[0] * 3600 + parts[1] * 60 + parts[2]
            : parts[0] * 60 + parts[1]
        }

        const startTime = (typeof raw.start_time === 'number') ? raw.start_time : (raw.startTime ?? parseTime(raw.time))

        const entry = {
          startTime,
          time: raw.time ?? `${Math.floor(startTime / 60).toString().padStart(2, '0')}:${(startTime % 60).toString().padStart(2, '0')}`,
          text: raw.text
        }

        console.log('🎯 [TranscriptManager] 準備推送 transcript_segment 到 store:', {
          originalStartTime: raw.start_time,
          startTimeInSeconds: startTime,
          formattedTime: entry.time,
          text: entry.text.substring(0, 50) + '...'
        })

        console.log('[T] before push', useAppStore.getState().appState)
        useAppStore.getState().addTranscriptEntry(entry)
        console.log('✅ [TranscriptManager] transcript_segment 已推送到 store:', entry)

        // 檢查狀態是否有變化
        const currentState = useAppStore.getState()
        console.log('📊 [TranscriptManager] Store 狀態檢查:', {
          appState: currentState.appState,
          transcriptCount: currentState.transcriptEntries.length,
          latestEntry: currentState.transcriptEntries[currentState.transcriptEntries.length - 1]
        })

      } else {
        console.warn('⚠️ [TranscriptManager] 無效的逐字稿條目:', raw)
      }

      this.broadcastToListeners(sessionId, message)
    } else if (message.type === 'transcript_segment') {
      console.log('📝 [TranscriptManager] 逐字稿片段詳情:', {
        sessionId,
        text: message.text,
        textLength: message.text?.length || 0,
        textPreview: message.text?.substring(0, 50) + (message.text?.length > 50 ? '...' : ''),
        start_time: message.start_time,
        end_time: message.end_time,
        confidence: message.confidence
      })

      // 🎯 轉換 transcript_segment 為 TranscriptEntry 格式並推送到 store
      if (message.text) {
        try {
          // 使用 start_time 而不是 timestamp，並轉換為 HH:MM:SS 格式
          const startTimeInSeconds = message.start_time ?? 0
          const hours = Math.floor(startTimeInSeconds / 3600)
          const minutes = Math.floor((startTimeInSeconds % 3600) / 60)
          const seconds = Math.floor(startTimeInSeconds % 60)

          const entry = {
            startTime: startTimeInSeconds,
            time: `${hours.toString().padStart(2, "0")}:${minutes.toString().padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`,
            text: message.text
          }

          console.log('🎯 [TranscriptManager] 準備推送 transcript_segment 到 store:', {
            originalStartTime: message.start_time,
            startTimeInSeconds,
            formattedTime: entry.time,
            text: entry.text.substring(0, 50) + '...'
          })

          console.log('[T] before push', useAppStore.getState().appState)
          useAppStore.getState().addTranscriptEntry(entry)
          console.log('✅ [TranscriptManager] transcript_segment 已推送到 store:', entry)

          // 檢查狀態是否有變化
          const currentState = useAppStore.getState()
          console.log('📊 [TranscriptManager] Store 狀態檢查:', {
            appState: currentState.appState,
            transcriptCount: currentState.transcriptEntries.length,
            latestEntry: currentState.transcriptEntries[currentState.transcriptEntries.length - 1]
          })

        } catch (error) {
          console.error('❌ [TranscriptManager] 處理 transcript_segment 時發生錯誤:', error)
        }
      }

      this.broadcastToListeners(sessionId, message)
    } else if (message.type === 'connection_established') {
      console.log('✅ [TranscriptManager] 連接已建立:', {
        sessionId,
        message: message.message,
        timestamp: message.timestamp
      })
    } else if (message.type === 'transcript_complete') {
      console.log('🎯 [TranscriptManager] 轉錄完成:', {
        sessionId,
        message: message.message,
        timestamp: message.timestamp
      })
      this.broadcastToListeners(sessionId, message)
    } else if (message.type === 'heartbeat_ack') {
      console.log('💓 [TranscriptManager] 心跳回應:', {
        sessionId,
        timestamp: message.timestamp
      })
    } else if (message.type === 'pong') {
      console.log('🏓 [TranscriptManager] Pong 回應:', {
        sessionId,
        timestamp: message.timestamp
      })
    } else if (message.phase === 'waiting') {
      console.log('⏳ [TranscriptManager] 收到 waiting phase:', {
        sessionId,
        phase: message.phase,
        timestamp: new Date().toISOString()
      })
    } else if (message.phase === 'active') {
      console.log('✅ [TranscriptManager] 收到 active phase，轉錄已開始:', {
        sessionId,
        phase: message.phase,
        timestamp: new Date().toISOString()
      })
      // 廣播 active phase 訊息給監聽器
      this.broadcastToListeners(sessionId, message)
    } else if (message.type === 'error' || message.type === 'transcription_error') {
      console.error('🚨 [TranscriptManager] 收到轉錄錯誤:', {
        sessionId,
        type: message.type,
        error_type: message.error_type,
        error_message: message.error_message,
        details: message.details,
        timestamp: new Date().toISOString()
      })
      // 廣播錯誤訊息給監聽器
      this.broadcastToListeners(sessionId, message)
    } else {
      console.log('📨 [TranscriptManager] 未知訊息類型:', {
        sessionId,
        type: message.type,
        fullMessage: message
      })
    }
  }

  /**
   * 廣播訊息給所有監聽器
   */
  private broadcastToListeners(sessionId: string, message: TranscriptMessage): void {
    const sessionListeners = this.listeners.get(sessionId)
    console.log('📡 [TranscriptManager] 廣播訊息給監聽器:', {
      sessionId,
      messageType: message.type,
      listenerCount: sessionListeners?.size || 0,
      hasListeners: !!sessionListeners
    })

    if (sessionListeners) {
      let successCount = 0
      let errorCount = 0

      sessionListeners.forEach(callback => {
        try {
          callback(message)
          successCount++
          console.log(`✅ [TranscriptManager] 監聽器回調成功 (${successCount}/${sessionListeners.size})`)
        } catch (error) {
          errorCount++
          console.error(`❌ [TranscriptManager] 監聽器回調錯誤 (${errorCount}/${sessionListeners.size}):`, error)
        }
      })

      console.log(`📡 [TranscriptManager] 廣播完成: ${successCount} 成功, ${errorCount} 失敗`)
    } else {
      console.warn(`⚠️ [TranscriptManager] 沒有找到 session ${sessionId} 的監聽器`)
    }
  }

  /**
   * 發送 ping
   */
  private sendPing(sessionId: string): void {
    const ws = this.connections.get(sessionId)
    if (ws && ws.isConnected) {
      ws.sendJson({ type: 'ping' })
      console.log(`🏓 TranscriptManager: 向 session ${sessionId} 發送 ping`)
    }
  }

  /**
   * 發送心跳 - 增強狀態同步
   */
  private sendHeartbeat(sessionId: string): void {
    // 先同步狀態
    const isActuallyConnected = this.syncConnectionState(sessionId)

    const ws = this.connections.get(sessionId)
    if (ws && isActuallyConnected) {
      try {
        ws.sendJson({
          type: 'heartbeat',
          timestamp: Date.now()
        })
        console.log(`💓 TranscriptManager: 向 session ${sessionId} 發送心跳`)
      } catch (error) {
        console.error(`❌ TranscriptManager: 發送心跳失敗 ${sessionId}:`, error)
        // 心跳發送失敗，可能連接已斷開
        this.connectionStates.set(sessionId, false)
        this.scheduleReconnect(sessionId)
      }
    } else {
      // 連接已斷開，停止心跳並嘗試重連
      console.warn(`⚠️ TranscriptManager: 心跳檢測到連接斷開 ${sessionId}`)
      this.stopHeartbeat(sessionId)
      this.connectionStates.set(sessionId, false)
      this.scheduleReconnect(sessionId)
    }
  }

  /**
   * 啟動心跳機制
   */
  private startHeartbeat(sessionId: string): void {
    this.stopHeartbeat(sessionId)

    const interval = setInterval(() => {
      this.sendHeartbeat(sessionId)
    }, this.heartbeatInterval)

    this.heartbeatIntervals.set(sessionId, interval)
    console.log(`💓 TranscriptManager: 為 session ${sessionId} 啟動心跳`)
  }

  /**
   * 停止心跳機制
   */
  private stopHeartbeat(sessionId: string): void {
    const interval = this.heartbeatIntervals.get(sessionId)
    if (interval) {
      clearInterval(interval)
      this.heartbeatIntervals.delete(sessionId)
      console.log(`💓 TranscriptManager: 為 session ${sessionId} 停止心跳`)
    }
  }

  /**
   * 安排重連
   */
  private scheduleReconnect(sessionId: string): void {
    const attempts = this.reconnectAttempts.get(sessionId) ?? 0

    if (attempts >= this.maxReconnectAttempts) {
      console.error(`❌ TranscriptManager: Session ${sessionId} 重連次數已達上限`)
      return
    }

    this.reconnectAttempts.set(sessionId, attempts + 1)

    const delay = this.reconnectDelay * Math.pow(2, attempts) // 指數退避
    console.log(`🔄 TranscriptManager: Session ${sessionId} 將在 ${delay}ms 後重連 (第 ${attempts + 1} 次)`)

    setTimeout(async () => {
      try {
        await this.establishConnection(sessionId)
        this.reconnectAttempts.set(sessionId, 0) // 重連成功，重置計數
      } catch (error) {
        console.error(`❌ TranscriptManager: Session ${sessionId} 重連失敗:`, error)
      }
    }, delay)
  }

  /**
   * 斷開指定 session 的連接
   */
  async disconnect(sessionId: string): Promise<void> {
    console.log(`📱 TranscriptManager: 斷開 session ${sessionId}`)

    // 停止心跳
    this.stopHeartbeat(sessionId)

    // 斷開 WebSocket
    const ws = this.connections.get(sessionId)
    if (ws) {
      ws.disconnect()
      this.connections.delete(sessionId)
    }

    // 更新狀態
    this.connectionStates.set(sessionId, false)

    // 清理監聽器
    this.listeners.delete(sessionId)

    // 清理重連計數
    this.reconnectAttempts.delete(sessionId)
  }

  /**
   * 添加訊息監聽器
   */
  addListener(sessionId: string, callback: (message: TranscriptMessage) => void): void {
    if (!this.listeners.has(sessionId)) {
      this.listeners.set(sessionId, new Set())
    }
    this.listeners.get(sessionId)!.add(callback)
    console.log(`📱 TranscriptManager: 為 session ${sessionId} 添加監聽器`)
  }

  /**
   * 移除訊息監聽器
   */
  removeListener(sessionId: string, callback: (message: TranscriptMessage) => void): void {
    const sessionListeners = this.listeners.get(sessionId)
    if (sessionListeners) {
      sessionListeners.delete(callback)
      if (sessionListeners.size === 0) {
        this.listeners.delete(sessionId)
      }
    }
    console.log(`📱 TranscriptManager: 為 session ${sessionId} 移除監聽器`)
  }

  /**
   * 檢查連接狀態 - 優化版，確保即時狀態同步
   */
  isConnected(sessionId: string): boolean {
    const ws = this.connections.get(sessionId)
    const stateConnected = this.connectionStates.get(sessionId) ?? false

    // 實作更可靠的即時狀態檢測
    let actualConnected = false

    if (ws) {
      // 多重檢查確保準確性
      actualConnected = ws.isConnected && (
        ws.readyState === WebSocket.OPEN ||
        (typeof window !== 'undefined' && window.WebSocket && ws.readyState === 1)
      )
    }

    console.log(`🔍 [TranscriptManager] 連接狀態檢查:`, {
      sessionId,
      hasWebSocket: !!ws,
      wsReadyState: ws?.readyState,
      wsIsConnected: ws?.isConnected ?? false,
      stateConnected,
      actualConnected,
      needsSync: stateConnected !== actualConnected,
      timestamp: Date.now()
    })

    // 即時同步狀態，確保 connectionStates 與實際 WebSocket 狀態一致
    if (stateConnected !== actualConnected) {
      console.log(`🔄 [TranscriptManager] 狀態不一致，即時同步: ${sessionId} ${stateConnected} → ${actualConnected}`, {
        previousState: stateConnected,
        newState: actualConnected,
        wsDetails: {
          isConnected: ws?.isConnected,
          readyState: ws?.readyState
        }
      })
      this.connectionStates.set(sessionId, actualConnected)

      // 如果連接斷開但狀態顯示連接，觸發重連
      if (stateConnected && !actualConnected) {
        console.warn(`⚠️ [TranscriptManager] 檢測到連接斷開，將觸發重連: ${sessionId}`)
        this.scheduleReconnect(sessionId)
      }
    }

    return actualConnected
  }

  /**
   * 強化的連接狀態一致性檢查
   */
  private syncConnectionState(sessionId: string): boolean {
    const ws = this.connections.get(sessionId)
    const currentState = this.connectionStates.get(sessionId) ?? false

    if (!ws) {
      // 沒有 WebSocket，狀態應該是 false
      if (currentState !== false) {
        console.log(`🔄 [TranscriptManager] 同步狀態 (無WebSocket): ${sessionId} → false`)
        this.connectionStates.set(sessionId, false)
      }
      return false
    }

    // 有 WebSocket，檢查實際連接狀態
    const actualConnected = ws.isConnected && (
      ws.readyState === WebSocket.OPEN ||
      (typeof window !== 'undefined' && window.WebSocket && ws.readyState === 1)
    )

    if (currentState !== actualConnected) {
      console.log(`🔄 [TranscriptManager] 同步狀態: ${sessionId} ${currentState} → ${actualConnected}`)
      this.connectionStates.set(sessionId, actualConnected)
    }

    return actualConnected
  }

  /**
   * 取得連接數量
   */
  getConnectionCount(): number {
    return Array.from(this.connections.values()).filter(ws => ws.isConnected).length
  }

  /**
   * 清理所有連接
   */
  async disconnectAll(): Promise<void> {
    console.log('📱 TranscriptManager: 清理所有連接')

    const sessionIds = Array.from(this.connections.keys())
    await Promise.all(sessionIds.map(sessionId => this.disconnect(sessionId)))
  }
}

// 匯出 Singleton 實例
export const transcriptManager = TranscriptManager.getInstance()

// 匯出類型
export type { TranscriptMessage }


# END FILE CONTENTS


# File: README.md

# StudyScriber

> 雲端筆記應用：邊錄邊轉錄，支援純筆記與錄音模式

## 📋 專案概述

StudyScriber 是一個先進的雲端筆記應用程式，專為學習者和專業人士設計。它提供兩種主要模式：

- **純筆記模式**：專注於 Markdown 筆記編輯，支援自動儲存
- **錄音模式**：邊錄音邊做筆記，即時轉錄為逐字稿

## 🏗️ 技術架構

### 後端
- **FastAPI** - 現代 Python Web 框架
- **Supabase PostgreSQL** - 雲端資料庫平台
- **SQLAlchemy 2.0** - ORM 與資料庫抽象層
- **Supabase Python SDK** - 官方客戶端
- **Azure OpenAI** - Whisper 語音轉錄服務
- **Google Vertex AI** - Gemini 2.5 Pro 語音轉錄服務
- **Cloudflare R2** - 音檔雲端儲存

#### 🎯 雙 STT Provider 架構
StudyScriber 支援多種語音轉文字引擎，使用者可自由選擇：

- **Whisper (Azure OpenAI)**：高精確度、多語言支援、快速響應
- **Gemini 2.5 Pro (Vertex AI)**：最新 AI 技術、上下文理解、高品質轉錄

##### 技術特色：
- **統一介面**：所有 STT Provider 實作相同的 `ISTTProvider` 介面
- **Factory 模式**：根據會話設定動態選擇 Provider
- **狀態管理**：每個會話的 STT Provider 獨立管理
- **前端整合**：統一的 UI 元件支援 Provider 切換

#### 🚀 WebM 直接轉錄架構 (v2)
StudyScriber 採用革命性的 **WebM 直接轉錄架構**，大幅提升效能：

- **直接轉錄流程**：前端錄音 (WebM) → 直接發送到 Whisper API → 即時轉錄
- **消除轉換瓶頸**：跳過每個 chunk 的 FFmpeg 轉換步驟，節省 60% 處理時間
- **錯誤率降低 80%**：移除 FFmpeg 相關轉換錯誤點
- **向後相容**：保留 FFmpeg 邏輯用於錄音結束後的 WAV 檔案生成

### 前端
- **React** - 使用者介面框架
- **React Hooks** - 狀態管理
- **Socket.IO** - 即時通訊
- **Markdown Editor** - 筆記編輯器

## 🚀 快速開始

### 前置需求

- Python 3.12+
- **Supabase 帳戶** 
- **Azure OpenAI 帳戶** (必須，Whisper 語音轉錄服務)
- **Google Cloud 帳戶** (可選，Gemini 2.5 Pro 語音轉錄服務)
- **Cloudflare 帳戶** (可選，音檔儲存)
- Node.js 18+ (前端開發用)

### 1. 建立 Supabase 專案

1. 前往 [Supabase](https://supabase.com) 註冊帳戶
2. 建立新專案，記下：
   - **Project URL**: `https://your-project-ref.supabase.co`
   - **API Key**: 在 Settings > API 中找到 `anon public` 金鑰

### 2. 設定專案

```bash
# 克隆專案
git clone <repository-url>
cd study-scriber

# 建立虛擬環境
python -m venv .venv
source .venv/bin/activate  # macOS/Linux
# 或 .venv\Scripts\activate  # Windows

# 安裝依賴
uv sync  # 或 pip install -e .
```

### 3. 配置環境變數

複製環境變數範本：
```bash
cp .env.example .env
```

編輯 `.env` 檔案：
```env
# === Supabase 設定 (必須) ===
DB_MODE=supabase
SUPABASE_URL=https://your-project-ref.supabase.co
SUPABASE_KEY=your-anon-public-key

# === Azure OpenAI 服務 (Whisper STT - 必須) ===
AZURE_OPENAI_API_KEY=your-api-key
AZURE_OPENAI_ENDPOINT=https://your-resource.openai.azure.com/
AZURE_OPENAI_API_VERSION=2024-02-01
WHISPER_DEPLOYMENT_NAME=whisper-1

# === Google Vertex AI 服務 (Gemini STT - 可選) ===
STT_PROVIDER_DEFAULT=whisper  # 預設 STT Provider: whisper 或 gemini
GEMINI_ENDPOINT=us-central1-aiplatform.googleapis.com  # Vertex AI 端點
GEMINI_API_KEY=your-gcp-service-account-key  # GCP 服務帳戶 API Key
GEMINI_PROMPT=請輸出逐字稿：  # 自訂 Gemini 提示詞
GEMINI_MAX_REQUESTS=90  # 每分鐘最大請求數

# === Cloudflare R2 儲存 (可選) ===
R2_ACCOUNT_ID=your-account-id
R2_API_TOKEN=your-r2-api-token
R2_BUCKET_NAME=studyscriber-audio
```

### 4. 初始化 Supabase 資料庫

#### 方法 A: 使用 Supabase Dashboard (推薦)

1. 開啟 [Supabase Dashboard](https://supabase.com/dashboard)
2. 選擇您的專案
3. 點選左側選單的 **SQL Editor**
4. 複製 `app/db/supabase_init.sql` 檔案的完整內容
5. 貼上到 SQL Editor 中
6. 點選 **Run** 執行

#### 方法 B: 使用指令行工具

```bash
# 安裝 Supabase CLI (可選)
npm install -g supabase

# 登入並連接專案
supabase login
supabase link --project-ref your-project-ref

# 執行初始化腳本
supabase db reset --linked
```

### 5. 驗證設定

執行整合測試：
```bash
python test_final_integration.py
```

如果看到以下輸出，表示設定成功：
```
🎉 所有測試通過！StudyScriber T1 + T2 整合完全成功！
✨ 現在可以開始開發 T3 (音檔處理) 和 T4 (逐字稿) 功能了！
```

### 6. 設定前端環境變數

```bash
cd frontend
cp .env.example .env.local
```

編輯 `frontend/.env.local` 檔案：
```env
# StudyScriber Frontend Environment Variables
NEXT_PUBLIC_API_URL=http://127.0.0.1:8000
NEXT_PUBLIC_WS_URL=ws://127.0.0.1:8000
NODE_ENV=development
```

### 7. 配置 STT Provider (可選)

StudyScriber 支援兩種語音轉文字引擎：

#### Whisper (Azure OpenAI) - 預設
- 高精確度轉錄
- 多語言支援
- 快速響應時間
- 設定：僅需 Azure OpenAI 相關環境變數

#### Gemini 2.5 Pro (Vertex AI) - 可選
- 最新 AI 技術
- 優秀的上下文理解
- 高品質轉錄結果
- 設定：需額外配置 Google Cloud 服務

##### 啟用 Gemini 的步驟：

1. **建立 Google Cloud 專案**
   - 前往 [Google Cloud Console](https://console.cloud.google.com/)
   - 建立新專案或選擇現有專案
   - 啟用 Vertex AI API

2. **建立服務帳戶**
   - 前往 IAM & Admin > Service Accounts
   - 建立新的服務帳戶
   - 下載 JSON 金鑰檔案
   - 將金鑰內容轉換為 API Key 格式

3. **設定環境變數**
   ```env
   STT_PROVIDER_DEFAULT=gemini
   GEMINI_ENDPOINT=us-central1-aiplatform.googleapis.com
   GEMINI_API_KEY=your-gcp-service-account-key
   ```

4. **UI 中切換 Provider**
   - 在應用程式中點擊設定按鈕
   - 選擇「語音轉文字引擎」
   - 切換到 Gemini 2.5 Pro

### 8. 啟動開發伺服器

**重要：請按順序啟動，避免初始化競速問題**

#### 後端 (Terminal 1) - 先啟動
```bash
uv run python main.py
```
等待看到以下訊息表示 Backend 完全啟動：
```
🚀 StudyScriber 正在啟動...
✅ Transcription service initialized and registered.
INFO:     Application startup complete.
```

#### 前端 (Terminal 2) - 後啟動
```bash
cd frontend
pnpm install  # 首次運行
pnpm dev
```

- 後端 API 服務：`http://localhost:8000`
- 前端應用程式：`http://localhost:3000`

> **注意**: 如果前端啟動時出現網路錯誤，這通常是因為 Backend 還在啟動中。新版本已加入重試機制，會自動處理這個問題。

## 📁 專案結構

```
study-scriber/
├── app/                          # FastAPI 應用程式
│   ├── api/                     # API 路由
│   │   ├── sessions.py         # Session 管理 API
│   │   └── notes.py            # 筆記 API
│   ├── ws/                      # WebSocket 端點
│   ├── services/                # 業務邏輯服務
│   │   └── stt/                # STT Provider 服務
│   │       ├── base.py         # ISTTProvider 介面
│   │       ├── whisper_provider.py  # Whisper STT Provider
│   │       ├── gemini_provider.py   # Gemini STT Provider
│   │       └── factory.py      # Provider Factory
│   ├── core/                    # 核心功能 (FFmpeg, etc.)
│   ├── db/                      # 資料庫配置與模型
│   │   ├── supabase_config.py  # Supabase 配置管理
│   │   ├── supabase_init.sql   # 資料庫初始化腳本
│   │   ├── database.py         # 資料庫連接
│   │   └── models.py           # SQLAlchemy 模型
│   ├── middleware/              # 中介軟體
│   └── schemas/                 # Pydantic 模型
├── test_final_integration.py    # 整合測試腳本
├── main.py                      # 應用程式入口點
├── .env.example                 # 環境變數範本
└── pyproject.toml              # 專案配置
```

## 🎯 STT Provider 功能

StudyScriber 支援多種語音轉文字引擎，提供更多選擇和靈活性：

### 支援的 STT Provider

| Provider | 引擎 | 特色 | 設定難度 |
|----------|------|------|----------|
| **Whisper** | Azure OpenAI | 高精確度、多語言支援、快速響應 | 簡單 |
| **Gemini 2.5 Pro** | Google Vertex AI | 最新 AI 技術、上下文理解、高品質轉錄 | 中等 |

### 功能特色

- **UI 即時切換**：在設定中隨時切換 STT Provider
- **會話級別管理**：每個會話可使用不同的 STT Provider
- **狀態顯示**：逐字稿中顯示 Provider 徽章 (W/G)
- **統一介面**：所有 Provider 回傳相同格式的轉錄結果
- **錯誤處理**：各 Provider 獨立的錯誤處理和重試機制

### 使用方式

1. **開始錄音前**：在設定中選擇偏好的 STT Provider
2. **建立會話**：系統會使用您選擇的 Provider
3. **錄音過程**：逐字稿會顯示對應的 Provider 徽章
4. **會話切換**：不同會話可使用不同的 Provider

## 🗄️ Supabase 資料庫架構

### 主要表格

- **sessions** - 會話管理（純筆記或錄音模式），支援 active/completed/error 狀態
- **notes** - Markdown 筆記內容，支援客戶端時間戳衝突檢測
- **audio_files** - 音檔切片記錄
- **transcript_segments** - 逐字稿片段
- **transcripts** - 完整逐字稿

### 關鍵特性

- **UUID 主鍵** - 使用 `gen_random_uuid()` 自動生成
- **自動時間戳** - 透過觸發器自動更新 `updated_at`
- **單一活躍會話** - 資料庫層級保證同時只有一個 active session
- **完整約束** - 外鍵、檢查約束、唯一約束確保資料完整性
- **級聯刪除** - 刪除 session 時自動清理關聯資料

### 資料庫初始化腳本說明

`app/db/supabase_init.sql` 包含：

1. **自定義類型 (Enum)**
   - `session_type`: `'note_only'`, `'recording'`
   - `session_status`: `'active'`, `'completed'`, `'error'`
   - `lang_code`: `'zh-TW'`, `'en-US'`

2. **表格建立**
   - 所有必要的表格和欄位
   - 適當的資料類型和約束

3. **索引建立**
   - 查詢效能最佳化
   - 唯一約束確保資料完整性

4. **觸發器設定**
   - 自動更新時間戳
   - 單一活躍會話保護

## 🧪 測試

### 前端單元測試

專案已整合 **Vitest** 測試框架，提供 API 層與核心功能的單元測試。

```bash
cd frontend

# 執行測試
pnpm test

# 執行測試並顯示 UI
pnpm test:ui

# 單次執行所有測試
pnpm test:run
```

### 測試覆蓋範圍

- ✅ **API 配置測試** - 驗證環境變數配置
- ✅ **WebSocket URL 建構** - 確保 URL 正確生成
- ✅ **API 方法存在性** - 驗證所有必要的 API 方法

### 新增測試

測試檔案位於：
- `frontend/lib/api.test.ts` - API 層測試
- `frontend/src/test-setup.ts` - 測試環境設定

## 🔧 開發指南

### 測試資料庫連接

```bash
# 完整整合測試
python test_final_integration.py

# 快速連接測試
python -c "
from app.db.supabase_config import get_supabase_client
client = get_supabase_client()
response = client.table('sessions').select('*').execute()
print(f'✅ 連接成功，找到 {len(response.data)} 個 sessions')
"
```

### API 文件

啟動服務後，訪問以下網址查看 API 文件：

- **Swagger UI**: `http://localhost:8000/docs`
- **ReDoc**: `http://localhost:8000/redoc`

### 健康檢查

```bash
curl http://localhost:8000/health
```

## 🛠️ Supabase 管理

### 查看資料

在 Supabase Dashboard 中：
1. 點選 **Table Editor**
2. 瀏覽各個表格的資料
3. 可以直接在 Dashboard 中編輯資料

### 監控效能

在 Supabase Dashboard 中：
1. 點選 **Logs**
2. 查看 API 請求記錄
3. 監控資料庫效能指標

### 備份與還原

Supabase 自動提供：
- 每日自動備份
- 時間點還原 (Point-in-time recovery)
- 可在 Dashboard 的 **Settings > Database** 中管理

## 🚨 常見問題

### Q: 為什麼選擇 Supabase？

A: Supabase 提供：
- **免費額度充足** - 適合開發和小型專案
- **PostgreSQL 完整功能** - 支援複雜查詢和約束
- **內建認證** - 未來擴展使用者系統
- **即時功能** - 支援 WebSocket 和即時同步
- **儲存服務** - 整合音檔儲存
- **99.9% 可用性** - 生產級別穩定性

### Q: 如何重置資料庫？

A: 在 Supabase Dashboard 的 SQL Editor 中執行：
```sql
-- 刪除所有表格
DROP TABLE IF EXISTS notes CASCADE;
DROP TABLE IF EXISTS transcripts CASCADE;
DROP TABLE IF EXISTS transcript_segments CASCADE;
DROP TABLE IF EXISTS audio_files CASCADE;
DROP TABLE IF EXISTS sessions CASCADE;

-- 刪除自定義類型
DROP TYPE IF EXISTS session_type CASCADE;
DROP TYPE IF EXISTS session_status CASCADE;
DROP TYPE IF EXISTS lang_code CASCADE;
```
然後重新執行 `supabase_init.sql`。

### Q: 如何查看詳細錯誤？

A: 在 `.env` 中設定：
```env
DEBUG=true
```
這將啟用詳細的 SQL 查詢日誌。

## 🤝 貢獻指南

1. Fork 專案
2. 建立特性分支 (`git checkout -b feature/amazing-feature`)
3. 確保所有測試通過 (`python test_final_integration.py`)
4. 提交變更 (`git commit -m 'Add amazing feature'`)
5. 推送到分支 (`git push origin feature/amazing-feature`)
6. 開啟 Pull Request

## 📄 授權條款

本專案採用 MIT 授權條款。詳情請見 [LICENSE](LICENSE) 檔案。

## 🔗 相關連結

- **[🔧 音頻切片配置指南](AUDIO_CHUNK_CONFIG.md)** - 環境變數配置錄音切片時間
- [專案需求文件 (PRD)](PRD.md)
- [技術規格書 (SPEC)](SPEC.md)
- [測試報告](T1_T4_Test_Final_Report.md)
- [開發任務清單](Todos.md)
- [Supabase 官方文件](https://supabase.com/docs)
- [API 文件](http://localhost:8000/docs)

---

**StudyScriber** - 讓學習更有效率 🚀


# END FILE CONTENTS


# File: frontend/components.json

{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

# END FILE CONTENTS


# File: Todos.md

## 🎯 當前任務：移除使用者先需要寫標題的功能

### 目標
根據 SPEC.md 修改，讓使用者可以直接開始錄音或做筆記，無需先輸入標題，提供更簡潔的使用體驗。遵循 TDD 原則，從後端驗證開始，逐步推進到前端各層。

### 實作任務

- [ ] **Task 1: 後端 API 測試：驗證可選標題功能**
  - 📁 檔案：`tests/test_session_optional_title.py`
  - 🎯 編寫測試驗證後端 create_session API 在不提供 title 時的行為是否正確
  - 📋 核心功能：
    - 測試 POST /api/session 不傳 title 參數的情況
    - 測試 POST /api/session 傳 title=null 的情況
    - 驗證回應包含正確的 session 結構
    - 確保資料庫中 title 欄位為 NULL
  - 🔄 依賴：無（基礎驗證任務）
  - ⚠️ 關鍵技術挑戰：確認後端已完整支援可選標題，為前端修改奠定基礎
  - ✅ 驗證標準：測試全面覆蓋、API 回應正確、資料庫狀態驗證

- [ ] **Task 2: 前端 API 層更新：SessionCreateRequest 介面調整**
  - 📁 檔案：`frontend/lib/api.ts`, `frontend/types/app-state.ts`
  - 🎯 修改 SessionCreateRequest 介面，讓 title 參數變成可選
  - 📋 核心功能：
    - 更新 TypeScript 介面定義 title 為可選
    - 修改 API 呼叫邏輯，允許不傳遞 title
    - 更新相關類型定義
  - 🔄 依賴：Task 1 完成
  - ⚠️ 關鍵技術挑戰：確保類型安全性，避免破壞現有功能
  - ✅ 驗證標準：TypeScript 編譯無錯誤、介面定義正確、API 呼叫成功

- [ ] **Task 3: 服務層更新：SessionService 方法調整**
  - 📁 檔案：`frontend/lib/services/session-service.ts`, `frontend/lib/services/interfaces.ts`
  - 🎯 修改 SessionService 的 createSession 方法，讓 title 參數變成可選
  - 📋 核心功能：
    - 更新 createSession 方法簽名
    - 修改服務實現邏輯
    - 更新介面定義
  - 🔄 依賴：Task 2 完成
  - ⚠️ 關鍵技術挑戰：保持服務層介面一致性，確保錯誤處理正確
  - ✅ 驗證標準：服務方法正確、介面相容、錯誤處理完整

- [ ] **Task 4: Hook 層更新：useSession 系列 Hook 調整**
  - 📁 檔案：`frontend/hooks/use-session.ts`, `frontend/hooks/use-session-new.ts`
  - 🎯 修改 useSession 和 useSessionNew hooks 的 createNoteSession 和 createRecordingSession 方法
  - 📋 核心功能：
    - 移除 title 必填參數約束
    - 更新函式簽名和實現
    - 確保向後相容性
  - 🔄 依賴：Task 3 完成
  - ⚠️ 關鍵技術挑戰：Hook 狀態管理一致性，避免破壞現有呼叫
  - ✅ 驗證標準：Hook 功能正常、狀態管理正確、向後相容

- [ ] **Task 5: 應用狀態層更新：useAppState 系列 Hook 調整**
  - 📁 檔案：`frontend/hooks/use-app-state.ts`, `frontend/hooks/use-app-state-new.ts`
  - 🎯 修改 useAppState 和 useAppStateNew hooks 中呼叫 session 建立的相關邏輯
  - 📋 核心功能：
    - 更新 startNewNoteSession 和 startRecording 方法
    - 移除強制要求 title 的邏輯
    - 確保狀態轉換正確
  - 🔄 依賴：Task 4 完成
  - ⚠️ 關鍵技術挑戰：應用狀態管理複雜性，確保狀態機正確運作
  - ✅ 驗證標準：狀態轉換正確、應用邏輯完整、無副作用

- [ ] **Task 6: UI 層調整：移除 draftTitle 相關邏輯**
  - 📁 檔案：`frontend/study-scriber.tsx`, `frontend/hooks/use-local-draft.ts`
  - 🎯 從主要 UI 組件和本地草稿 hook 中移除 draftTitle 相關的狀態和邏輯
  - 📋 核心功能：
    - 移除 draftTitle 狀態變數
    - 更新 useLocalDraft hook，移除 title 草稿功能
    - 確保 UI 渲染邏輯正確
  - 🔄 依賴：Task 5 完成
  - ⚠️ 關鍵技術挑戰：UI 一致性，確保移除 title 後介面仍然完整
  - ✅ 驗證標準：UI 正常顯示、無 title 相關錯誤、使用者體驗流暢

- [ ] **Task 7: 整合測試：端到端流程驗證**
  - 📁 檔案：前端測試檔案、整合測試
  - 🎯 執行完整的端到端測試，驗證移除標題功能後的完整使用流程
  - 📋 核心功能：
    - 測試純筆記模式（無標題）
    - 測試錄音模式（無標題）
    - 驗證會話建立和儲存
    - 確認前後端資料一致性
  - 🔄 依賴：Task 6 完成
  - ⚠️ 關鍵技術挑戰：端到端流程複雜性，確保所有修改協同工作
  - ✅ 驗證標準：完整功能正常、無迴歸問題、使用者體驗符合預期

### 🎯 預期效果
- ✅ **使用體驗簡化**：使用者可直接開始錄音或做筆記
- ✅ **向後相容性**：現有功能不受影響
- ✅ **資料一致性**：前後端 API 完全對應
- ✅ **測試覆蓋**：TDD 流程確保品質

### 📊 實作策略
| 階段    | 範圍              | 風險 | 對策         |
| ------- | ----------------- | ---- | ------------ |
| Phase 1 | 後端驗證          | 低   | 確認現有支援 |
| Phase 2 | 前端 API + 服務層 | 中   | 漸進式修改   |
| Phase 3 | Hook + 狀態層     | 中   | 保持介面相容 |
| Phase 4 | UI + 整合測試     | 低   | 端到端驗證   |

## 🚀 優先任務：滑動視窗 Rate Limiting 改進逐字稿延遲

### 目標
將現有的單並發 + 指數退避架構升級為精確的每分鐘 3 次 Whisper API 呼叫控制，目標將平均延遲從 3-5 分鐘降低到 1-2 分鐘。

### 實作任務

- [x] **Task 1: 實作滑動視窗頻率限制器核心模組**
  - 📁 檔案：`app/services/azure_openai_v2.py`
  - 🎯 實作 `SlidingWindowRateLimiter` 類別，使用 `Semaphore + asyncio.call_later()` 機制
  - 📋 核心功能：
    - `async def acquire()` - 取得 API 呼叫許可
    - `def _release_permit()` - 60秒後自動釋放許可
    - `def get_stats()` - 回傳當前狀態統計
  - ⚠️ 關鍵技術挑戰：確保 `call_later()` 正確釋放 semaphore，無記憶體洩漏
  - ✅ 驗證標準：正確控制併發數、自動釋放機制、統計準確性

- [x] **Task 2: 擴展配置系統支援滑動視窗參數**
  - 📁 檔案：`app/core/config.py`, `.env.local`
  - 🎯 新增環境變數配置和 Feature Flag 機制
  - 📋 配置項：
    ```python
    USE_SLIDING_WINDOW_RATE_LIMIT: bool = Field(False)
    SLIDING_WINDOW_MAX_REQUESTS: int = Field(3) 
    SLIDING_WINDOW_SECONDS: int = Field(60)
    ```
  - 🔄 實作 `get_rate_limiter()` 工廠函數支援策略切換
  - ✅ 驗證標準：環境變數正確讀取、Feature Flag 正常切換、向後相容

- [x] **Task 3: 整合滑動視窗到現有轉錄服務架構**
  - 📁 檔案：`app/services/azure_openai_v2.py` 中的 `_transcribe_audio()` 方法
  - 🎯 修改現有的 `rate_limit.wait()` 使用，支援動態 Rate Limiter 切換
  - 📋 整合要點：
    - 保持 `await rate_limit.wait()` 介面不變
    - 優化 RateLimitError 處理，根據 Rate Limiter 類型提供適當錯誤訊息
    - 確保 `backoff()` 和 `reset()` 方法在兩種模式下都正常工作
    - 維持與現有 Prometheus 指標的相容性
  - 🔄 完成功能：
    - ✅ 新增 `SlidingWindowRateLimiter.backoff()` 和 `._delay` 屬性相容
    - ✅ 優化 RateLimitError 處理邏輯，根據類型顯示不同錯誤訊息
    - ✅ 保持與現有架構完全相容
  - ✅ 驗證標準：無縫切換、錯誤處理一致、Prometheus 指標正常、介面相容性完整

- [x] **Task 4: 修改 _transcribe_audio 方法使用 verbose_json 並實作過濾**
  - 📁 檔案：`app/services/azure_openai_v2.py`
  - 🎯 修改 `_transcribe_audio` 方法，將 `response_format` 改為 "verbose_json"
  - 📋 功能：
    - 使用 `_keep` 函數過濾幻覺段落
    - 增加詳細的日誌記錄
    - 更新監控指標
  - 🔄 依賴：Task 3 完成
  - 🆔 TaskID: `f9e4060d-f2ec-4882-9529-211b1f9aca64`
  - ✅ 驗證標準：API 調用正確、過濾功能運作、日誌完整
  - 🎉 **已完成**：成功修改 `_transcribe_audio` 方法支援 `verbose_json` 格式，整合 `_keep` 函數過濾幻覺段落，添加詳細的段落過濾統計日誌（總數、保留、過濾），增強轉錄結果包含段落統計資訊，並通過 7 個完整的單元測試，涵蓋成功過濾、全段落過濾、空段落、API 錯誤、頻率限制、日誌記錄和 Prometheus 指標更新等情況

- [x] **Task 5: 為 _keep 函數和過濾邏輯撰寫單元測試**
  - 📁 檔案：測試檔案 (遵循專案測試結構)
  - 🎯 為新實作的 `_keep` 函數和修改後的 `_transcribe_audio` 方法撰寫完整的單元測試
  - 📋 功能：使用用戶提供的測試範例，確保過濾邏輯在各種邊界條件下都能正確運作
  - 🔄 依賴：Task 4 完成
  - 🆔 TaskID: `bfbd159c-8774-4a17-a984-cb7fa388c359`
  - ✅ 驗證標準：遵循 TDD 原則，測試覆蓋完整
  - 🎉 **已完成**：完整的測試已在 Task 3 和 Task 4 中實作完成 - Task 3 包含 `_keep` 函數的 9 個完整測試（涵蓋有效段落、高靜音機率、低置信度、高重複比率、邊界值、缺少欄位、Prometheus 計數器、多重過濾條件、自定義門檻值），Task 4 包含 `_transcribe_audio` verbose_json 功能的 7 個完整測試（涵蓋成功過濾、全段落過濾、空段落、API 錯誤、頻率限制、日誌記錄、Prometheus 指標更新）

- [x] **Task 6: 更新 .env.example 檔案添加過濾門檻配置範例**
  - 📁 檔案：`.env.example`
  - 🎯 在 Azure OpenAI 區段新增 Whisper 段落過濾門檻的配置範例和詳細說明
  - 📋 功能：
    - 提供清楚的中文註解說明各參數用途和建議值
    - 讓使用者可以直接複製到自己的 .env 檔案中
  - 🔄 依賴：Task 1 完成
  - 🆔 TaskID: `e609aecd-faa9-4b2c-bd39-cf97042f4256`
  - ✅ 驗證標準：文件清楚易懂、配置範例實用
  - 🎉 **已完成**：在 `.env.example` 檔案中新增完整的「Whisper 幻覺過濾設定」區段，包含三個過濾參數（`FILTER_NO_SPEECH=0.8`、`FILTER_LOGPROB=-1.0`、`FILTER_COMPRESSION=2.4`）的詳細中文說明，涵蓋參數用途、數值範圍、建議值和實際效果，讓使用者能夠輕鬆理解和配置幻覺過濾功能

## 🚀 緊急任務：並發處理優化解決逐字稿延遲問題

### 目標
解決當前錄音兩分鐘但只顯示一段逐字稿的嚴重延遲問題。主要原因是硬編碼的單並發限制（`MAX_CONCURRENT_TRANSCRIPTIONS = 1`），導致所有音檔切片必須排隊等待處理。目標將轉錄延遲從 60 秒+ 降至 15 秒內，支援 3-5 個音檔切片並發處理。

### 📋 優化方案（基於現有架構）
用戶提出的三層控制機制與現有系統高度吻合：
1. **Queue防丟失** ✅ 現有：`PriorityQueue`（更強大）
2. **滑動視窗API控制** ✅ 現有：`SlidingWindowRateLimiter`（更完善）  
3. **Semaphore併發控制** ✅ **已完成：從1調整到3**

**核心流程**：`queue.get() → sem.acquire() → sliding.acquire() → call_whisper()`

### 🔥 **CRITICAL UPDATE - 立即測試效果**
**Task 1 已完成且配置全部生效！**
- ✅ 併發處理：1 → 3 (300%提升)  
- ✅ 滑動視窗：啟用 (API優化生效)
- ✅ 監控優化：響應速度2倍提升

**🚨 建議立即測試錄音轉錄效果 - 應該能看到顯著改善！**

### 實作任務

- [x] **Task 1: 外部化並發控制參數配置（✅ 已完成並生效）**
  - 📁 檔案：`app/core/config.py`, `app/services/azure_openai_v2.py`, `.env.local`
  - 🎯 採用用戶建議的參數配置，基於現有架構優化而非重寫
  - 📋 **完成狀態**：
    - ✅ 並發數提升：MAX_CONCURRENT_TRANSCRIPTIONS = 3
    - ✅ Worker優化：TRANSCRIPTION_WORKERS_COUNT = 3
    - ✅ 監控改善：QUEUE_BACKLOG_THRESHOLD = 10, MONITOR_INTERVAL = 5
    - ✅ 滑動視窗啟用：USE_SLIDING_WINDOW_RATE_LIMIT = True
    - ✅ 配置文件問題解決：.env 文件正確讀取
    - ✅ 服務重啟：所有配置生效
  - 🆔 TaskID: `7346d0d6-cc90-4996-b812-e1d476fb1614` ✅ **已完成**
  - ✅ **實測建議**：錄音測試應能看到3倍處理速度提升

- [ ] **Task 2: 優化滑動視窗API配額配置（可能不需要）**
  - 📁 檔案：`.env.local`, `app/core/config.py`
  - 🎯 **狀態更新**：滑動視窗已啟用，3 requests/60s配置已生效
  - ⚡ **建議**：先測試 Task 1 效果，如果延遲已解決可跳過此任務
  - 🆔 TaskID: `8a2b5c9d-ef12-4567-9abc-def123456789`

- [ ] **Task 3: 調整隊列管理和監控參數（已部分完成）**
  - 📁 檔案：`app/services/azure_openai_v2.py`
  - 🎯 **狀態更新**：監控間隔已優化（10s→5s），積壓閾值已調整（30→10）
  - ⚡ **建議**：先測試效果，可能無需進一步調整
  - 🆔 TaskID: `7f3e2d1c-8b5a-4567-9def-abc987654321`

- [ ] **Task 4: 測試和驗證優化效果（立即執行）**
  - 📁 檔案：整體系統測試
  - 🎯 **立即行動**：錄音測試，驗證延遲改善效果
  - 📋 測試重點：
    - 錄音2分鐘內是否能看到多段逐字稿
    - 處理延遲是否從60s+降至15s內
    - 併發處理是否正常運作
    - API 429錯誤是否減少
  - 🆔 TaskID: `9e4d3c2b-1a98-7654-3210-fedcba987654`

### 🚀 立即行動（5分鐘解決）✅ **已完成**
```bash
# 核心配置已生效：
MAX_CONCURRENT_TRANSCRIPTIONS=3      ✅ 生效
USE_SLIDING_WINDOW_RATE_LIMIT=true   ✅ 生效  
QUEUE_BACKLOG_THRESHOLD=10           ✅ 生效
QUEUE_MONITOR_INTERVAL=5             ✅ 生效

# 服務已重啟，配置全部載入 ✅
```

### 🎯 預期效果（基於用戶方案）
- ✅ **延遲優化**：從 60 秒+ 降至 10-15 秒（用戶方案目標）
- ✅ **併發提升**：支援 3 個音檔切片並發處理（`sem.acquire()`）  
- ✅ **API控制**：永不 429 錯誤（`sliding.acquire()`）
- ✅ **隊列防護**：保證不丟檔（`queue.get()`）
- ✅ **架構優勢**：保留現有錯誤處理、監控、段落過濾機制

### 📊 方案對比

| 指標     | 現況         | 用戶方案 | 現有架構優化後 |
| -------- | ------------ | -------- | -------------- |
| 併發處理 | 1個          | 3個      | 3個 ✅          |
| API控制  | 手動         | 滑動視窗 | 滑動視窗 ✅     |
| 延遲時間 | 60s+         | 10-15s   | 10-15s ✅       |
| 錯誤處理 | 完整         | 簡化     | 完整 ✅         |
| 監控系統 | Prometheus   | 基礎廣播 | Prometheus ✅   |
| 段落過濾 | verbose_json | 無       | verbose_json ✅ |

### 🚀 立即行動（5分鐘解決）
```bash
# 在 .env.local 中修改這幾行即可立即生效
MAX_CONCURRENT_TRANSCRIPTIONS=3
USE_SLIDING_WINDOW_RATE_LIMIT=true  
QUEUE_BACKLOG_THRESHOLD=10
QUEUE_MONITOR_INTERVAL=5

# 然後重啟
make restart
```

### 注意事項
- 🔬 **基於現有架構**：無需重寫，只需參數調優
- 📊 **保留企業級功能**：錯誤處理、監控、段落過濾
- 🔄 **可快速回滾**：如遇問題可立即恢復單並發
- 📝 **效果監控**：Prometheus指標可即時觀測優化效果

## 🔥 緊急問題：Waiting 狀態計時器不更新 & 無法轉換到 Active 狀態

### 🚨 問題描述
用戶報告錄音進入 Waiting 狀態後：
1. **計時器不會動** - 錄音時間顯示停滯，不會每秒更新
2. **不會進到 active 狀態** - 無法從 `recording_waiting` 轉換到 `recording_active` 狀態顯示逐字稿

### 🔍 問題根源分析
**基於代碼深度分析的發現：**

#### 1. 計時器問題（useRecordingNew.ts:174）
- **原因**：錄音時間更新依賴於 `stateCheckInterval` 每秒檢查 `recordingService.getRecordingState()` 並更新 Context
- **問題點**：這個 interval 只在 `startRecording` 成功時建立，如果錄音啟動流程中任何步驟失敗，計時器就不會建立或運行
- **影響**：UI 上的錄音時間停滯不動，用戶無法看到錄音進度

#### 2. 狀態轉換問題（useRecordingNew.ts:96-103）
- **原因**：從 `recording_waiting` 轉換到 `recording_active` 需要觸發 `FIRST_TRANSCRIPT_RECEIVED` 事件
- **觸發條件**：收到 WebSocket 的 `active` phase 訊息或第一個逐字稿片段
- **問題點**：如果 WebSocket 連接失敗或沒有收到相應訊息，狀態轉換就不會發生
- **影響**：用戶一直停留在 waiting 狀態，看不到任何逐字稿內容

#### 3. 架構依賴問題
- **複雜依賴鏈**：startRecording → RecordingService → TranscriptService → WebSocket → 狀態轉換
- **單點失敗**：任何一個環節失敗都會導致整個流程停滯
- **缺乏容錯**：沒有超時機制或重試邏輯來處理異常情況

### 📋 修復任務清單

#### Task 1: 診斷並修復錄音計時器不更新問題
- **檔案**：`frontend/hooks/use-recording-new.ts`
- **目標**：確保錄音計時器在所有情況下都能正常運行
- **關鍵修復點**：
  - 檢查 line 174 處的 `stateCheckInterval` 建立邏輯
  - 確保即使 `startRecording` 部分失敗，計時器也能正確運行
  - 添加容錯機制和錯誤處理
  - 增強日誌記錄來追蹤計時器狀態
- **驗證標準**：
  - 進入 recording_waiting 狀態後，計時器應該立即開始更新
  - 即使錄音啟動過程中出現錯誤，計時器仍應顯示正確時間
  - 控制台應有清晰的日誌記錄計時器狀態
  - UI 上的錄音時間應每秒更新一次
- **狀態**：⏳ 待執行

#### Task 2: 修復狀態轉換問題 - recording_waiting 到 recording_active
- **檔案**：`frontend/hooks/use-recording-new.ts`、`frontend/hooks/use-transcript-new.ts`
- **目標**：確保 `FIRST_TRANSCRIPT_RECEIVED` 事件能正確觸發
- **關鍵修復點**：
  - 檢查 line 96-103 中的 `handleTranscript` 邏輯
  - 確保 WebSocket 連接正常且能收到 active phase 訊息
  - 添加超時機制，如果長時間沒收到 active 訊息，自動觸發狀態轉換
  - 增強 WebSocket 連接的錯誤處理和重試機制
  - 檢查狀態機的轉換條件是否正確
- **驗證標準**：
  - 開始錄音後，應能正確從 recording_waiting 轉換到 recording_active
  - 如果 WebSocket 連接失敗，應有適當的錯誤處理和重試
  - 如果長時間沒收到逐字稿，應有超時機制觸發狀態轉換
  - 狀態轉換過程應有清晰的日誌記錄
  - 轉換到 recording_active 後，應能正確顯示逐字稿內容
- **依賴**：Task 1 完成
- **狀態**：⏳ 待執行

#### Task 3: 增強錯誤處理和診斷工具
- **檔案**：`frontend/hooks/use-recording-new.ts`、`frontend/lib/state-machine.ts`
- **目標**：添加詳細的診斷工具幫助追蹤問題
- **關鍵功能**：
  - 在 useRecordingNew.ts 中添加詳細的日誌記錄
  - 在瀏覽器控制台添加調試介面
  - 使用狀態機的調試功能來檢查轉換條件
  - 添加 WebSocket 連接狀態的實時監控
  - 創建問題診斷的便利方法
- **驗證標準**：
  - 控制台應有清晰的日誌記錄所有關鍵事件
  - 開發者工具中應有便利的調試介面
  - 能夠實時監控 WebSocket 連接狀態
  - 狀態機轉換過程應有詳細記錄
  - 錯誤發生時應有足夠的診斷信息
- **依賴**：Task 1, Task 2 完成
- **狀態**：⏳ 待執行

#### Task 4: 測試和驗證修復結果
- **檔案**：整體系統測試
- **目標**：全面驗證修復效果
- **測試範圍**：
  - 測試正常錄音流程：開始錄音 → 等待狀態 → 活躍狀態 → 停止錄音
  - 測試錯誤場景：WebSocket 連接失敗、麥克風權限拒絕、網路斷線等
  - 驗證計時器在各種情況下的準確性
  - 確認狀態轉換的時機和條件
  - 測試逐字稿的正確接收和顯示
- **驗證標準**：
  - 錄音計時器應在所有場景下正常工作
  - 狀態轉換應準確及時
  - 逐字稿應正確接收和顯示
  - 錯誤處理應恰當且用戶友好
  - 整個錄音流程應穩定可靠
- **依賴**：前面所有任務完成
- **狀態**：⏳ 待執行

### 🎯 修復優先順序
1. **Task 1** - 先解決計時器問題（基礎功能）
2. **Task 2** - 修復狀態轉換邏輯（核心功能）
3. **Task 3** - 增強診斷工具（開發支援）
4. **Task 4** - 全面測試驗證（品質保證）

### 🔧 技術債務記錄
- **現有架構過度複雜**：錄音功能涉及太多層級和依賴
- **缺乏容錯機制**：沒有適當的超時和重試邏輯
- **診斷工具不足**：問題發生時難以快速定位原因
- **狀態管理複雜**：Context + 狀態機 + 服務層的多重狀態管理

### 💡 長期改進建議
- 簡化錄音功能的架構層級
- 增加更多的容錯和重試機制
- 建立完整的錯誤監控和預警系統
- 考慮重構狀態管理邏輯

## 🛠️ 錄音流程穩定性修正（依用戶建議細化）

### Task 1: 計時器立即啟動與正確清除
- [x] hooks/use-recording-new.ts
  - [x] 按下 startRecording 時立即建立 interval
  - [x] stopRecording 時正確清除 interval
  - [x] 狀態管理用全域 ref，確保唯一
  - [x] 使用 useRef 保持穩定引用，避免 re-render 時丟失
  - [x] 在 useEffect cleanup 中清理計時器

### Task 2: waiting→active 20 秒超時保險
- [ ] 進入 waiting 狀態時設置 20 秒 timeout
- [ ] 收到第一句逐字稿或 active phase 時清除 timeout
- [ ] 超時自動 setState('recording_active') 並記錄警告

### Task 3: WebSocket 失敗自動進 active
- [ ] ws.onclose 時判斷狀態
- [ ] 若在 waiting 狀態，toast 提示並 setState('recording_active')

---


# END FILE CONTENTS


# File: frontend/lib/services/simple-recording-service.ts

"use client"

import { BaseService } from './base-service'
import { IRecordingService, RecordingState } from './interfaces'
import { AdvancedAudioRecorder, AudioSegment, checkAdvancedAudioRecordingSupport } from '../advanced-audio-recorder'
import { RestAudioUploader, UploadSegmentResponse } from '../rest-audio-uploader'
import { getAudioChunkIntervalMs } from '../config'
import { toast } from '@/hooks/use-toast'

/**
 * SimpleRecordingService - 簡化錄音管理服務
 *
 * Phase 2.5 重構：使用 AdvancedAudioRecorder 修復 WebM Header 問題
 * 整合 AdvancedAudioRecorder + RestAudioUploader
 *
 * 特點：
 * - 使用 AdvancedAudioRecorder（雙 MediaRecorder 無縫切換策略）
 * - 使用 RestAudioUploader（REST API 上傳）
 * - 移除 ack/missing 重傳機制
 * - 簡化錯誤處理和狀態管理
 * - 支援失敗檔案暫存到 IndexedDB
 */
export class SimpleRecordingService extends BaseService implements IRecordingService {
    protected readonly serviceName = 'SimpleRecordingService'

    // 錄音器和上傳器引用
    private audioRecorder: AdvancedAudioRecorder | null = null
    private audioUploader: RestAudioUploader | null = null

    // 錄音狀態
    private recordingState: RecordingState = {
        isRecording: false,
        recordingTime: 0,
        currentSessionId: null,
        error: null
    }

    // 計時器
    private recordingTimer: ReturnType<typeof setInterval> | null = null
    private uploadedSegments = new Set<number>()
    private failedSegments = new Set<number>()

    // 在 class SimpleRecordingService 內部加上：
    public stream: MediaStream | null = null
    private sessionId: string | null = null
    private timerStart: number | null = null

    /**
     * 服務初始化
     */
    async initialize(): Promise<void> {
        this.logInfo('服務初始化開始')

        // 檢查瀏覽器支援度
        const supportCheck = await checkAdvancedAudioRecordingSupport()
        if (!supportCheck.isSupported) {
            const errorMessage = `音頻錄製不支援: ${supportCheck.error || '未知錯誤'}`
            this.logWarning('瀏覽器支援度檢查失敗', supportCheck.error)
            throw new Error(errorMessage)
        }

        this.logSuccess('瀏覽器支援度檢查通過')
        this.logSuccess('初始化完成')
    }

    /**
     * 服務清理
     */
    async cleanup(): Promise<void> {
        this.logInfo('服務清理開始')

        // 如果正在錄音，先停止
        if (this.recordingState.isRecording) {
            await this.stopRecording()
        }

        // 清理音頻錄製器
        if (this.audioRecorder) {
            this.audioRecorder.cleanup()
            this.audioRecorder = null
        }

        // 清理上傳器
        if (this.audioUploader) {
            this.audioUploader.cleanup()
            this.audioUploader = null
        }

        // 清理計時器
        this.clearRecordingTimer()

        // 重置狀態
        this.resetRecordingState()

        this.logSuccess('清理完成')
    }

    /**
     * 開始錄音
     */
    async startRecording(sessionId: string): Promise<void> {
        try {
            this.logInfo(`開始錄音 - sessionId: ${sessionId}`)

            // 如果已經在錄音，先停止
            if (this.recordingState.isRecording) {
                this.logWarning('已在錄音中，先停止現有錄音')
                await this.stopRecording()
            }

            this.sessionId = sessionId
            this.recordingState.currentSessionId = sessionId

            // 請求麥克風權限
            await this.ensureStarted()

            // 初始化錄音器和上傳器
            await this.initMediaRecorder()

            // 更新狀態
            this.recordingState.isRecording = true
            this.recordingState.error = null

            // 啟動計時器
            this.timerStart = Date.now()
            this.startRecordingTimer()

            this.logSuccess(`錄音已開始 - sessionId: ${sessionId}`)
        } catch (error) {
            const errorMessage = error instanceof Error ? error.message : '開始錄音失敗'
            this.recordingState.error = errorMessage
            this.handleError('開始錄音', error)
            throw error
        }
    }

    /**
     * 停止錄音
     */
    async stopRecording(): Promise<void> {
        this.logInfo('停止錄音')

        try {
            // 更新狀態
            this.recordingState.isRecording = false

            // 停止音頻錄製器
            if (this.audioRecorder) {
                this.audioRecorder.stop()
                this.logInfo('音頻錄製器已停止')
            }

            // 停止計時器
            this.clearRecordingTimer()

            // 清理音頻錄製器
            if (this.audioRecorder) {
                this.audioRecorder.cleanup()
                this.audioRecorder = null
            }

            this.logSuccess('錄音停止成功', {
                sessionId: this.recordingState.currentSessionId,
                recordingTime: this.recordingState.recordingTime,
                uploadedSegments: this.uploadedSegments.size,
                failedSegments: this.failedSegments.size
            })

        } catch (error) {
            this.recordingState.error = error instanceof Error ? error.message : '停止錄音失敗'
            this.handleError('停止錄音', error)
        }
    }

    /**
     * 取得當前錄音狀態
     */
    getRecordingState(): RecordingState {
        return { ...this.recordingState }
    }

    /**
     * 檢查是否正在錄音
     */
    isRecording(): boolean {
        return this.recordingState.isRecording
    }

    /**
     * 取得錄音時間（秒）
     */
    getRecordingTime(): number {
        return this.timerStart ? (Date.now() - this.timerStart) / 1000 | 0 : 0
    }

    /**
     * 設定音頻錄製器事件處理
     */
    private setupAudioRecorderEvents(): void {
        if (!this.audioRecorder) return

        // 處理錄製錯誤
        this.audioRecorder.onError((error: Error) => {
            this.logWarning('音頻錄製器錯誤', error.message)
            this.recordingState.error = error.message
        })
    }

    /**
     * 設定上傳器事件處理
     */
    private setupUploaderEvents(): void {
        if (!this.audioUploader) return

        // 處理上傳成功
        this.audioUploader.onUploadSuccess((seq: number, response: UploadSegmentResponse) => {
            this.uploadedSegments.add(seq)
            this.logInfo('音頻段落上傳成功', {
                sequence: seq,
                size: response.size,
                totalUploaded: this.uploadedSegments.size
            })
        })

        // 處理上傳錯誤
        this.audioUploader.onUploadError((seq: number, error: string) => {
            this.failedSegments.add(seq)
            this.logWarning('音頻段落上傳失敗', {
                sequence: seq,
                error,
                totalFailed: this.failedSegments.size
            })
        })

        // 處理暫存到本地
        this.audioUploader.onCacheStored((seq: number) => {
            this.logInfo('音頻段落已暫存到本地', {
                sequence: seq,
                message: '可稍後重新上傳'
            })
        })
    }

    /**
     * 處理音頻段落
     */
    private async handleAudioSegment(segment: any): Promise<void> {
        console.log('🎤 [SimpleRecordingService] 收到音頻段落', {
            sequence: segment.sequence,
            size: segment.blob.size,
            duration: segment.duration,
            timestamp: new Date().toISOString()
        })

        this.logInfo(`收到音頻段落 - sequence: ${segment.sequence}, size: ${segment.blob.size}, duration: ${segment.duration}`)

        // 使用 REST API 上傳
        if (this.audioUploader) {
            try {
                await this.audioUploader.uploadSegment(segment.sequence, segment.blob)
            } catch (error) {
                // 錯誤已由 audioUploader 處理（重試或暫存）
                console.log(`⚠️ [SimpleRecordingService] 段落 #${segment.sequence} 上傳處理中`)
            }
        } else {
            this.logWarning(`音頻上傳器未初始化 - sequence: ${segment.sequence}`)
        }
    }

    /**
     * 重新上傳暫存的失敗段落
     */
    async retryFailedUploads(): Promise<void> {
        this.logInfo('開始重新上傳暫存的失敗段落')

        if (this.audioUploader) {
            try {
                await this.audioUploader.retryFailedSegments()
                this.logSuccess('暫存段落重新上傳完成')
            } catch (error) {
                this.logWarning('重新上傳暫存段落失敗', error)
            }
        }
    }

    /**
     * 取得暫存的失敗段落數量
     */
    async getCachedSegmentsCount(): Promise<number> {
        if (this.audioUploader) {
            return await this.audioUploader.getCachedSegmentsCount()
        }
        return 0
    }

    /**
     * 啟動錄音計時器
     */
    private startRecordingTimer(): void {
        this.clearRecordingTimer()
        this.recordingState.recordingTime = 0

        console.log('⏱️ [SimpleRecordingService] 計時器啟動')
        this.recordingTimer = setInterval(() => {
            this.recordingState.recordingTime += 1

            // 每 30 秒記錄一次錄音時間
            if (this.recordingState.recordingTime % 30 === 0) {
                this.logInfo('錄音進行中', {
                    recordingTime: this.recordingState.recordingTime,
                    minutes: Math.floor(this.recordingState.recordingTime / 60),
                    uploadedSegments: this.uploadedSegments.size,
                    failedSegments: this.failedSegments.size
                })
            }
        }, 1000)
    }

    /**
     * 清理錄音計時器
     */
    private clearRecordingTimer(): void {
        if (this.recordingTimer) {
            clearInterval(this.recordingTimer)
            this.recordingTimer = null
            console.log('⏹️ [SimpleRecordingService] 計時器清除')
        }
    }

    /**
     * 重置錄音狀態
     */
    private resetRecordingState(): void {
        this.recordingState = {
            isRecording: false,
            recordingTime: 0,
            currentSessionId: null,
            error: null
        }
        this.uploadedSegments.clear()
        this.failedSegments.clear()
    }

    /**
     * 清理錄音相關資源
     */
    private async cleanupRecordingResources(): Promise<void> {
        try {
            // 停止音頻錄製器
            if (this.audioRecorder) {
                this.audioRecorder.stop()
                this.audioRecorder.cleanup()
                this.audioRecorder = null
            }

            // 清理上傳器
            if (this.audioUploader) {
                this.audioUploader.cleanup()
                this.audioUploader = null
            }

            // 清理計時器
            this.clearRecordingTimer()

            // 重置狀態
            this.recordingState.isRecording = false

            this.logInfo('錄音資源清理完成')
        } catch (error) {
            this.logWarning('清理錄音資源時發生錯誤', error)
        }
    }

    /**
     * 獲取服務詳細狀態
     */
    async getDetailedStatus(): Promise<SimpleRecordingServiceStatus> {
        const baseStatus = this.getStatus()
        const supportCheck = await checkAdvancedAudioRecordingSupport()
        const cachedCount = await this.getCachedSegmentsCount()

        return {
            ...baseStatus,
            recordingState: this.getRecordingState(),
            audioSupport: {
                supported: supportCheck.isSupported,
                errors: supportCheck.error ? [supportCheck.error] : []
            },
            audioRecorderState: this.audioRecorder?.recording ? 'recording' : 'idle',
            uploadStats: {
                uploaded: this.uploadedSegments.size,
                failed: this.failedSegments.size,
                cached: cachedCount
            }
        }
    }

    async requestPermission(): Promise<boolean> {
        try {
            this.stream = await navigator.mediaDevices.getUserMedia({ audio: true })
            return true
        } catch (e) {
            toast({ title: '需要麥克風權限才能錄音', variant: 'destructive' })
            return false
        }
    }

    private async ensureStarted() {
        if (!this.stream) await this.start()
    }

    /**
     * 初始化 MediaRecorder 和相關元件
     */
    private async initMediaRecorder(): Promise<void> {
        try {
            this.logInfo('初始化 MediaRecorder')

            if (!this.stream) {
                throw new Error('音訊串流未初始化')
            }

            if (!this.sessionId) {
                throw new Error('Session ID 未設定')
            }

            // 創建音頻錄製器
            const chunkInterval = (await import('../config')).getAudioChunkIntervalMs()
            const { AdvancedAudioRecorder } = await import('../advanced-audio-recorder')
            this.audioRecorder = new AdvancedAudioRecorder({
                segmentDuration: chunkInterval,
                mimeType: 'audio/webm;codecs=opus',
                audioBitsPerSecond: 128000
            })

            // 設定錄製器事件（錯誤處理）
            this.setupAudioRecorderEvents()

            // 創建上傳器
            const { RestAudioUploader } = await import('../rest-audio-uploader')
            this.audioUploader = new RestAudioUploader()
            this.audioUploader.setSessionId(this.sessionId)

            // 設定上傳器事件
            this.setupUploaderEvents()

            // 開始錄音並傳入段落處理 callback
            await this.audioRecorder.start(async (segment) => {
                await this.handleAudioSegment(segment)
            })

            this.logSuccess(`MediaRecorder 初始化完成並開始錄音 - sessionId: ${this.sessionId}, chunkInterval: ${chunkInterval}ms`)
        } catch (error) {
            const errorMessage = error instanceof Error ? error.message : '未知錯誤'
            this.logWarning(`初始化 MediaRecorder 失敗: ${errorMessage}`)
            throw error
        }
    }

    // 若有 sessionId 變動需求，可加上：
    private updateSessionId(newSessionId: string): void {
        this.sessionId = newSessionId
        this.recordingState.currentSessionId = newSessionId
        if (this.audioUploader) {
            this.audioUploader.setSessionId(newSessionId)
        }
    }
}

/**
 * SimpleRecordingService 詳細狀態介面
 */
export interface SimpleRecordingServiceStatus {
    serviceName: string
    isInitialized: boolean
    isRunning: boolean
    timestamp: string
    recordingState: RecordingState
    audioSupport: {
        supported: boolean
        errors: string[]
    }
    audioRecorderState: string
    uploadStats: {
        uploaded: number
        failed: number
        cached: number
    }
}


# END FILE CONTENTS


# File: frontend/lib/migration-adapter.ts

"use client"

import { useEffect, useRef, useCallback } from "react"
import { AppData, AppState, SessionStatus, SessionType, TranscriptEntry } from "../types/app-state"
import { AppStateContextValue } from "../types/app-state-context"
import { isFeatureEnabled } from "./feature-flags"

// Legacy Hook 介面定義
export interface LegacyAppStateHook {
    appData: AppData
    isLoading: boolean
    error: string | null
    startRecording: (title?: string) => Promise<void>
    stopRecording: () => Promise<void>
    newNote: () => Promise<void>
    saveLocalDraft: (content: string) => void
    session: { id: string; status: SessionStatus; type: SessionType } | null
    recordingError: string | null
    transcriptError: string | null
    createNoteSession: (title?: string) => Promise<void>
    sessionLoading: boolean
}

// 狀態同步橋接器
export class StateSyncBridge {
    private newContext: AppStateContextValue | null = null
    private legacyHook: LegacyAppStateHook | null = null
    private syncEnabled: boolean = true
    private lastSyncTimestamp: number = 0
    private syncInProgress: boolean = false

    constructor() {
        this.exposeToWindow()
    }

    // 註冊新 Context
    registerNewContext(context: AppStateContextValue): void {
        this.newContext = context
        console.log('🔄 [StateSyncBridge] 新 Context 已註冊')
        this.performSync('new-context-registered')
    }

    // 註冊舊 Hook
    registerLegacyHook(hook: LegacyAppStateHook): void {
        this.legacyHook = hook
        console.log('🔄 [StateSyncBridge] 舊 Hook 已註冊')
        this.performSync('legacy-hook-registered')
    }

    // 執行狀態同步
    private performSync(trigger: string): void {
        if (!this.syncEnabled || this.syncInProgress) return
        if (!this.newContext || !this.legacyHook) return

        this.syncInProgress = true
        const syncTimestamp = Date.now()

        try {
            // 避免過於頻繁的同步
            if (syncTimestamp - this.lastSyncTimestamp < 100) {
                this.syncInProgress = false
                return
            }

            console.log(`🔄 [StateSyncBridge] 執行狀態同步 (觸發: ${trigger})`)

            // 決定同步方向：根據功能開關決定誰是主要數據源
            const useNewAsSource = isFeatureEnabled('useNewStateManagement')

            if (useNewAsSource) {
                this.syncFromNewToLegacy()
            } else {
                this.syncFromLegacyToNew()
            }

            this.lastSyncTimestamp = syncTimestamp
        } catch (error) {
            console.error('🔄 [StateSyncBridge] 同步失敗:', error)
        } finally {
            this.syncInProgress = false
        }
    }

    // 從新系統同步到舊系統
    private syncFromNewToLegacy(): void {
        if (!this.newContext || !this.legacyHook) return

        const newData = this.newContext.appData
        const legacyData = this.legacyHook.appData

        // 檢查是否需要同步
        const needsSync = this.detectDifferences(newData, legacyData)

        if (needsSync.length > 0) {
            console.log('🔄 [StateSyncBridge] 從新系統同步到舊系統:', needsSync)
            // 注意：這裡不能直接修改 legacyData，需要透過 legacy hook 的方法
            // 實際實作時需要根據 legacy hook 的 API 來同步
        }
    }

    // 從舊系統同步到新系統
    private syncFromLegacyToNew(): void {
        if (!this.newContext || !this.legacyHook) return

        const legacyData = this.legacyHook.appData
        const newData = this.newContext.appData

        // 檢查是否需要同步
        const needsSync = this.detectDifferences(legacyData, newData)

        if (needsSync.length > 0) {
            console.log('🔄 [StateSyncBridge] 從舊系統同步到新系統:', needsSync)

            // 同步各個欄位
            if (needsSync.includes('state')) {
                this.newContext.setState(legacyData.state)
            }
            if (needsSync.includes('isRecording')) {
                this.newContext.setRecording(legacyData.isRecording)
            }
            if (needsSync.includes('recordingTime')) {
                this.newContext.setRecordingTime(legacyData.recordingTime)
            }
            if (needsSync.includes('editorContent')) {
                this.newContext.setEditorContent(legacyData.editorContent)
            }
            if (needsSync.includes('transcriptEntries')) {
                this.newContext.setTranscriptEntries(legacyData.transcriptEntries)
            }
            if (needsSync.includes('session')) {
                this.newContext.setSession(legacyData.session || null)
            }
        }
    }

    // 檢測兩個狀態之間的差異
    private detectDifferences(source: AppData, target: AppData): string[] {
        const differences: string[] = []

        if (source.state !== target.state) {
            differences.push('state')
        }
        if (source.isRecording !== target.isRecording) {
            differences.push('isRecording')
        }
        if (source.recordingTime !== target.recordingTime) {
            differences.push('recordingTime')
        }
        if (source.editorContent !== target.editorContent) {
            differences.push('editorContent')
        }
        if (source.transcriptEntries.length !== target.transcriptEntries.length) {
            differences.push('transcriptEntries')
        }
        if (JSON.stringify(source.session) !== JSON.stringify(target.session)) {
            differences.push('session')
        }

        return differences
    }

    // 啟用/停用同步
    enableSync(): void {
        this.syncEnabled = true
        console.log('🔄 [StateSyncBridge] 狀態同步已啟用')
    }

    disableSync(): void {
        this.syncEnabled = false
        console.log('🔄 [StateSyncBridge] 狀態同步已停用')
    }

    // 手動觸發同步
    manualSync(): void {
        this.performSync('manual-trigger')
    }

    // 取得同步狀態
    getSyncStatus(): { enabled: boolean; lastSync: number; inProgress: boolean } {
        return {
            enabled: this.syncEnabled,
            lastSync: this.lastSyncTimestamp,
            inProgress: this.syncInProgress,
        }
    }

    // 暴露到 window 供調試使用
    private exposeToWindow(): void {
        if (typeof window !== 'undefined') {
            (window as any).stateSyncBridge = {
                enableSync: () => this.enableSync(),
                disableSync: () => this.disableSync(),
                manualSync: () => this.manualSync(),
                getStatus: () => this.getSyncStatus(),
            }

            console.log('🔄 [StateSyncBridge] 調試介面已暴露到 window.stateSyncBridge')
        }
    }
}

// 單例模式
export const stateSyncBridge = new StateSyncBridge()

// Legacy Hook 適配器
export function useLegacyHookAdapter(legacyHook: LegacyAppStateHook): LegacyAppStateHook {
    const hasRegistered = useRef(false)

    useEffect(() => {
        if (!hasRegistered.current && isFeatureEnabled('enableStateSync')) {
            stateSyncBridge.registerLegacyHook(legacyHook)
            hasRegistered.current = true
        }
    }, [legacyHook])

    // 如果啟用新狀態管理，返回適配後的版本
    if (isFeatureEnabled('useNewStateManagement')) {
        // TODO: 返回適配後的版本，這裡暫時返回原版本
        return legacyHook
    }

    return legacyHook
}

// New Context 適配器
export function useNewContextAdapter(newContext: AppStateContextValue): AppStateContextValue {
    const hasRegistered = useRef(false)

    useEffect(() => {
        if (!hasRegistered.current && isFeatureEnabled('enableStateSync')) {
            stateSyncBridge.registerNewContext(newContext)
            hasRegistered.current = true
        }
    }, [newContext])

    return newContext
}

// 混合模式 Hook - 根據功能開關決定使用哪個系統
export function useHybridState(
    legacyHook: LegacyAppStateHook,
    newContext: AppStateContextValue
): LegacyAppStateHook {
    const useNew = isFeatureEnabled('useNewStateManagement')

    // 註冊到同步橋接器
    useEffect(() => {
        if (isFeatureEnabled('enableStateSync')) {
            stateSyncBridge.registerLegacyHook(legacyHook)
            stateSyncBridge.registerNewContext(newContext)
        }
    }, [legacyHook, newContext])

    if (useNew) {
        // 將新 Context 適配為 Legacy Hook 介面
        return {
            appData: newContext.appData,
            isLoading: newContext.isLoading,
            error: newContext.error,
            // TODO: 實作其他方法的適配
            startRecording: legacyHook.startRecording,
            stopRecording: legacyHook.stopRecording,
            newNote: legacyHook.newNote,
            saveLocalDraft: legacyHook.saveLocalDraft,
            session: newContext.appData.session || null,
            recordingError: legacyHook.recordingError,
            transcriptError: legacyHook.transcriptError,
            createNoteSession: legacyHook.createNoteSession,
            sessionLoading: legacyHook.sessionLoading,
        }
    }

    return legacyHook
}


# END FILE CONTENTS


# File: app/services/azure_openai_v2.py

#!/usr/bin/env python3
"""
音訊轉錄服務 v2
使用大切片（10-15秒）+ 直接轉換的架構，避免複雜的 WebM 合併
"""

import asyncio
import logging
import subprocess
import tempfile
import time
from datetime import datetime
from pathlib import Path
from typing import Dict, Optional, Any, Set
from uuid import UUID
import json
import os
from asyncio import PriorityQueue, Semaphore

from openai import AsyncAzureOpenAI, RateLimitError
from httpx import Timeout

# Task 5: Prometheus 監控依賴
try:
    import prometheus_client as prom
    PROMETHEUS_AVAILABLE = True
except ImportError:
    PROMETHEUS_AVAILABLE = False
    logger.warning("prometheus-client 未安裝，監控指標將被停用")

from ..db.database import get_supabase_client
from app.core.config import settings
from app.core.ffmpeg import detect_audio_format
from app.core.webm_header_repairer import WebMHeaderRepairer
from app.ws.transcript_feed import manager as transcript_manager
from app.services.r2_client import R2Client

logger = logging.getLogger(__name__)

# Task 5: Prometheus 監控指標
if PROMETHEUS_AVAILABLE:
    # 轉錄請求計數器
    WHISPER_REQ_TOTAL = prom.Counter(
        "whisper_requests_total",
        "Total Whisper API requests",
        ["status", "deployment"]
    )

    # 轉錄延遲指標
    WHISPER_LATENCY_SECONDS = prom.Summary(
        "whisper_latency_seconds",
        "Whisper API latency",
        ["deployment"]
    )

    # 隊列積壓指標
    WHISPER_BACKLOG_GAUGE = prom.Gauge(
        "whisper_backlog_size",
        "Current queue backlog size"
    )

    # 隊列處理統計
    QUEUE_PROCESSED_TOTAL = prom.Counter(
        "queue_processed_total",
        "Total processed jobs",
        ["status"]
    )

    # 隊列等待時間
    QUEUE_WAIT_SECONDS = prom.Summary(
        "queue_wait_seconds",
        "Time jobs spend waiting in queue"
    )

    # 併發處理數量
    CONCURRENT_JOBS_GAUGE = prom.Gauge(
        "concurrent_transcription_jobs",
        "Current number of concurrent transcription jobs"
    )

    # 滑動視窗專用指標
    SLIDING_WINDOW_PERMITS = prom.Gauge(
        "sliding_window_available_permits",
        "Available permits in sliding window rate limiter"
    )

    SLIDING_WINDOW_ACTIVE_REQUESTS = prom.Gauge(
        "sliding_window_active_requests",
        "Current active requests in sliding window"
    )

    SLIDING_WINDOW_QUEUE_TIME = prom.Summary(
        "sliding_window_queue_seconds",
        "Time spent waiting for sliding window permit"
    )

    API_QUOTA_UTILIZATION = prom.Gauge(
        "azure_api_quota_utilization_percent",
        "Azure API quota utilization percentage"
    )

    RATE_LIMITER_TYPE = prom.Gauge(
        "rate_limiter_type",
        "Type of rate limiter in use (0=traditional, 1=sliding_window)",
        ["limiter_type"]
    )

    # 段落過濾指標
    WHISPER_SEGMENTS_FILTERED = prom.Counter(
        "whisper_segments_filtered_total",
        "Total number of segments filtered by quality checks",
        ["reason", "deployment"]
    )

    logger.info("📊 [Metrics] Prometheus 監控指標已初始化")
else:
    # 如果 Prometheus 不可用，創建空的佔位符
    class NoOpMetric:
        def inc(self, *args, **kwargs): pass
        def set(self, *args, **kwargs): pass
        def time(self): return self
        def __enter__(self): return self
        def __exit__(self, *args): pass
        def labels(self, *args, **kwargs): return self

    WHISPER_REQ_TOTAL = NoOpMetric()
    WHISPER_LATENCY_SECONDS = NoOpMetric()
    WHISPER_BACKLOG_GAUGE = NoOpMetric()
    QUEUE_PROCESSED_TOTAL = NoOpMetric()
    QUEUE_WAIT_SECONDS = NoOpMetric()
    CONCURRENT_JOBS_GAUGE = NoOpMetric()
    SLIDING_WINDOW_PERMITS = NoOpMetric()
    SLIDING_WINDOW_ACTIVE_REQUESTS = NoOpMetric()
    SLIDING_WINDOW_QUEUE_TIME = NoOpMetric()
    API_QUOTA_UTILIZATION = NoOpMetric()
    RATE_LIMITER_TYPE = NoOpMetric()
    WHISPER_SEGMENTS_FILTERED = NoOpMetric()

# 全域效能監控開關
ENABLE_PERFORMANCE_LOGGING = os.getenv("ENABLE_PERFORMANCE_LOGGING", "true").lower() == "true"

# Task 1: 優化的 timeout 配置
TIMEOUT = Timeout(connect=5, read=55, write=30, pool=5)

# Task 3: 併發控制與任務優先級配置（使用settings配置值）
# 改為從 settings 動態讀取，支援環境變數配置
QUEUE_HIGH_PRIORITY = 0  # 重試任務高優先級
QUEUE_NORMAL_PRIORITY = 1  # 正常任務

# Task 4: 音訊段落配置 - 移除硬編碼，使用配置值
# CHUNK_DURATION 現在在第 751 行從 settings.AUDIO_CHUNK_DURATION_SEC 讀取
PROCESSING_TIMEOUT = 60  # 處理超時時間（秒）

class PerformanceTimer:
    """效能計時器"""

    def __init__(self, operation_name: str):
        self.operation_name = operation_name
        self.start_time = None
        self.end_time = None

    def __enter__(self):
        self.start_time = time.time()
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.end_time = time.time()
        duration = self.get_duration()

        if ENABLE_PERFORMANCE_LOGGING:
            if duration > 1.0:  # 記錄超過1秒的操作
                logger.warning(f"⚠️  {self.operation_name} took {duration:.2f}s (slow)")
            else:
                logger.info(f"⏱️  {self.operation_name} completed in {duration:.2f}s")

    def get_duration(self) -> float:
        if self.start_time and self.end_time:
            return self.end_time - self.start_time
        return 0.0

# Task 2: 智能頻率限制處理器
class RateLimitHandler:
    """智能頻率限制處理器 - 避免過長等待"""

    def __init__(self):
        self._delay = 0
        logger.info("🚦 [RateLimitHandler] 頻率限制處理器已初始化")

    async def wait(self):
        """等待當前延遲時間"""
        if self._delay:
            logger.info(f"⏳ [RateLimitHandler] 等待 {self._delay}s 避免頻率限制")
            await asyncio.sleep(self._delay)

    def backoff(self):
        """增加退避延遲（指數退避，最大 60 秒）"""
        previous_delay = self._delay
        self._delay = min((self._delay or 5) * 2, 60)  # 最大 60 秒
        logger.warning(f"📈 [RateLimitHandler] 退避延遲：{previous_delay}s → {self._delay}s")

    def reset(self):
        """重置延遲（API 呼叫成功時）"""
        if self._delay > 0:
            logger.info(f"✅ [RateLimitHandler] 重置延遲：{self._delay}s → 0s")
            self._delay = 0

# 滑動視窗頻率限制處理器
class SlidingWindowRateLimiter:
    """滑動視窗頻率限制處理器 - 精確控制 API 配額使用"""

    def __init__(self, max_requests: int = 3, window_seconds: int = 60):
        """
        初始化滑動視窗頻率限制器

        Args:
            max_requests: 滑動視窗內最大請求數（預設 3）
            window_seconds: 滑動視窗時間長度（預設 60 秒）
        """
        self.max_requests = max_requests
        self.window_seconds = window_seconds
        self.semaphore = Semaphore(max_requests)
        self.active_requests = 0
        self.total_acquired = 0
        self.total_released = 0
        self._lock = asyncio.Lock()  # 保護統計數據的一致性

        logger.info(f"🪟 [SlidingWindow] 初始化完成：{max_requests} requests/{window_seconds}s")

    async def acquire(self) -> None:
        """
        取得 API 呼叫許可

        使用 semaphore 控制併發數，並通過 call_later 實現滑動視窗自動釋放
        """
        logger.debug(f"🎫 [SlidingWindow] 請求許可，當前活躍: {self.active_requests}/{self.max_requests}")

        # 記錄等待開始時間（用於 Prometheus 指標）
        wait_start_time = time.time()

        # 等待 semaphore 許可
        await self.semaphore.acquire()

        # 計算等待時間並更新 Prometheus 指標
        wait_duration = time.time() - wait_start_time
        SLIDING_WINDOW_QUEUE_TIME.observe(wait_duration)

        # 更新統計數據（使用鎖保護）
        async with self._lock:
            self.active_requests += 1
            self.total_acquired += 1

        # 更新 Prometheus 指標
        SLIDING_WINDOW_ACTIVE_REQUESTS.set(self.active_requests)
        SLIDING_WINDOW_PERMITS.set(self.max_requests - self.active_requests)

        # 更新配額利用率指標
        utilization = (self.active_requests / self.max_requests) * 100
        API_QUOTA_UTILIZATION.set(utilization)

        # 安排 window_seconds 後自動釋放許可
        try:
            loop = asyncio.get_event_loop()
            loop.call_later(self.window_seconds, self._release_permit)
            logger.debug(f"✅ [SlidingWindow] 許可已取得，活躍請求: {self.active_requests}, 將在 {self.window_seconds}s 後自動釋放")
        except Exception as e:
            # 如果 call_later 失敗，立即釋放許可避免死鎖
            logger.error(f"❌ [SlidingWindow] call_later 設定失敗: {e}")
            self.semaphore.release()
            async with self._lock:
                self.active_requests = max(0, self.active_requests - 1)
            # 回滾 Prometheus 指標
            SLIDING_WINDOW_ACTIVE_REQUESTS.set(self.active_requests)
            SLIDING_WINDOW_PERMITS.set(self.max_requests - self.active_requests)
            utilization = (self.active_requests / self.max_requests) * 100
            API_QUOTA_UTILIZATION.set(utilization)
            raise

    def _release_permit(self) -> None:
        """
        釋放許可（私有方法，由 call_later 調用）

        注意：此方法在事件循環的回調中執行，必須是同步的
        """
        try:
            self.semaphore.release()

            # 更新統計數據（注意：此處無法使用 async lock）
            # 使用原子操作確保一致性
            self.active_requests = max(0, self.active_requests - 1)
            self.total_released += 1

            # 更新 Prometheus 指標
            SLIDING_WINDOW_ACTIVE_REQUESTS.set(self.active_requests)
            SLIDING_WINDOW_PERMITS.set(self.max_requests - self.active_requests)

            # 更新配額利用率指標
            utilization = (self.active_requests / self.max_requests) * 100
            API_QUOTA_UTILIZATION.set(utilization)

            logger.debug(f"🎫 [SlidingWindow] 許可已自動釋放，活躍請求: {self.active_requests}")
        except Exception as e:
            logger.error(f"❌ [SlidingWindow] 釋放許可時發生錯誤: {e}")

    async def wait(self) -> None:
        """
        等待許可（相容於 RateLimitHandler 介面）

        此方法提供與現有 RateLimitHandler.wait() 相同的介面
        """
        await self.acquire()

    def get_stats(self) -> dict:
        """
        獲取滑動視窗統計資訊

        Returns:
            dict: 包含當前狀態的統計資訊
        """
        return {
            'type': 'sliding_window',
            'max_requests': self.max_requests,
            'window_seconds': self.window_seconds,
            'active_requests': self.active_requests,
            'available_permits': self.max_requests - self.active_requests,
            'total_acquired': self.total_acquired,
            'total_released': self.total_released,
            'utilization_percent': (self.active_requests / self.max_requests) * 100 if self.max_requests > 0 else 0,
            'is_at_capacity': self.active_requests >= self.max_requests
        }

    def reset(self) -> None:
        """
        重置統計數據（保持與 RateLimitHandler 介面一致）

        注意：此方法不會影響當前的 semaphore 狀態或活躍請求
        """
        logger.info(f"🔄 [SlidingWindow] 重置統計數據")
        self.total_acquired = 0
        self.total_released = 0

    def backoff(self) -> None:
        """
        退避處理（相容於 RateLimitHandler 介面）

        對於滑動視窗 Rate Limiter，退避實際上是由自動排隊機制處理，
        此方法主要用於記錄和統計目的
        """
        logger.warning(f"🚦 [SlidingWindow] 遇到 429 錯誤，滑動視窗將自動處理退避")

    @property
    def _delay(self) -> int:
        """
        模擬延遲屬性（相容於 RateLimitHandler 介面）

        對於滑動視窗，"延遲"概念是基於可用許可數量計算的預估等待時間
        """
        if self.active_requests >= self.max_requests:
            # 如果已達容量上限，估算需要等待的時間
            return max(1, self.window_seconds // 4)  # 估算等待時間
        return 0

    def __str__(self) -> str:
        """字串表示"""
        return f"SlidingWindowRateLimiter({self.max_requests}/{self.window_seconds}s, active={self.active_requests})"

    def __repr__(self) -> str:
        """詳細字串表示"""
        return f"SlidingWindowRateLimiter(max_requests={self.max_requests}, window_seconds={self.window_seconds}, active_requests={self.active_requests})"

# Task 3: 轉錄任務佇列管理器
class TranscriptionQueueManager:
    """優先級隊列管理器 - 確保順序處理並避免積壓"""

    def __init__(self):
        # 優先級隊列 (priority, timestamp, job_data)
        self.queue: PriorityQueue = PriorityQueue(maxsize=settings.MAX_QUEUE_SIZE)
        # 併發控制信號量（使用配置值）
        self.semaphore = Semaphore(settings.MAX_CONCURRENT_TRANSCRIPTIONS)
        # Worker 任務
        self.workers: list[asyncio.Task] = []
        # Task 4: 積壓監控任務
        self.backlog_monitor_task: Optional[asyncio.Task] = None
        # 統計數據
        self.total_processed = 0
        self.total_failed = 0
        self.total_retries = 0
        # Task 4: 積壓閾值和監控間隔（使用配置值）
        self.backlog_threshold = settings.QUEUE_BACKLOG_THRESHOLD
        self.monitor_interval = settings.QUEUE_MONITOR_INTERVAL
        self.last_backlog_alert = 0  # 上次積壓警報時間
        self.backlog_alert_cooldown = settings.QUEUE_ALERT_COOLDOWN
        # 運行狀態
        self.is_running = False

        logger.info(f"🎯 [QueueManager] 初始化完成：max_concurrent={settings.MAX_CONCURRENT_TRANSCRIPTIONS}, max_queue={settings.MAX_QUEUE_SIZE}")

    async def start_workers(self, num_workers: int = None):
        """啟動 Worker 任務"""
        if self.is_running:
            logger.warning("⚠️ [QueueManager] Workers already running")
            return

        # 使用配置值作為默認值
        if num_workers is None:
            num_workers = settings.TRANSCRIPTION_WORKERS_COUNT

        self.is_running = True
        logger.info(f"🚀 [QueueManager] 啟動 {num_workers} 個 Workers（配置值：{settings.TRANSCRIPTION_WORKERS_COUNT}）")

        # 啟動工作線程
        for i in range(num_workers):
            worker_task = asyncio.create_task(self._worker(f"Worker-{i+1}"))
            self.workers.append(worker_task)

        # Task 4: 啟動積壓監控
        self.backlog_monitor_task = asyncio.create_task(self._backlog_monitor())
        logger.info("📊 [QueueManager] 積壓監控已啟動")

    async def stop_workers(self):
        """停止所有 Workers"""
        if not self.is_running:
            return

        logger.info("⏹️ [QueueManager] 停止所有 Workers")
        self.is_running = False

        # Task 4: 停止積壓監控
        if self.backlog_monitor_task:
            self.backlog_monitor_task.cancel()
            try:
                await self.backlog_monitor_task
            except asyncio.CancelledError:
                pass

        # 取消所有 worker 任務
        for worker in self.workers:
            worker.cancel()

        # 等待所有任務完成
        await asyncio.gather(*self.workers, return_exceptions=True)
        self.workers.clear()

    async def enqueue_job(self, session_id: UUID, chunk_sequence: int, webm_data: bytes, priority: int = QUEUE_NORMAL_PRIORITY):
        """將轉錄任務加入隊列"""
        timestamp = time.time()
        job_data = {
            'session_id': session_id,
            'chunk_sequence': chunk_sequence,
            'webm_data': webm_data,
            'timestamp': timestamp,
            'retry_count': 0
        }

        try:
            # 使用 put_nowait 避免阻塞，如果隊列滿了會拋出異常
            self.queue.put_nowait((priority, timestamp, job_data))

            # Task 5: 更新隊列大小指標
            queue_size = self.queue.qsize()
            WHISPER_BACKLOG_GAUGE.set(queue_size)

            priority_name = "HIGH" if priority == QUEUE_HIGH_PRIORITY else "NORMAL"
            logger.info(f"📥 [QueueManager] 任務已入隊：session={session_id}, chunk={chunk_sequence}, priority={priority_name}, queue_size={queue_size}")

        except asyncio.QueueFull:
            logger.error(f"❌ [QueueManager] 隊列已滿 ({settings.MAX_QUEUE_SIZE})，丟棄任務：session={session_id}, chunk={chunk_sequence}")
            # 可以考慮廣播隊列滿的錯誤到前端
            await self._broadcast_queue_full_error(session_id, chunk_sequence)
            raise Exception(f"Transcription queue is full ({settings.MAX_QUEUE_SIZE}), please try again later")

    async def _worker(self, worker_name: str):
        """Worker 協程 - 處理隊列中的任務"""
        logger.info(f"👷 [QueueManager] {worker_name} 開始工作")

        while self.is_running:
            try:
                # 等待任務
                try:
                    priority, timestamp, job_data = await asyncio.wait_for(
                        self.queue.get(),
                        timeout=1.0  # 1秒超時，讓 worker 能定期檢查運行狀態
                    )
                except asyncio.TimeoutError:
                    continue  # 超時後繼續檢查運行狀態

                # 檢查任務是否過期
                age = time.time() - timestamp
                if age > settings.QUEUE_TIMEOUT_SECONDS:
                    logger.warning(f"⏰ [QueueManager] {worker_name} 丟棄過期任務：age={age:.1f}s, session={job_data['session_id']}, chunk={job_data['chunk_sequence']}")
                    self.queue.task_done()
                    continue

                # Task 5: 記錄隊列等待時間
                wait_time = time.time() - timestamp
                QUEUE_WAIT_SECONDS.observe(wait_time)

                # 獲取併發控制權
                async with self.semaphore:
                    session_id = job_data['session_id']
                    chunk_sequence = job_data['chunk_sequence']

                    logger.info(f"🔧 [QueueManager] {worker_name} 處理任務：session={session_id}, chunk={chunk_sequence}, age={age:.1f}s, wait={wait_time:.1f}s")

                    try:
                        # 執行轉錄
                        result = await self._process_transcription_job(job_data)

                        if result is True:
                            self.total_processed += 1
                            # Task 5: 記錄成功處理的任務
                            QUEUE_PROCESSED_TOTAL.labels(status="success").inc()
                            logger.info(f"✅ [QueueManager] {worker_name} 任務完成：session={session_id}, chunk={chunk_sequence}")
                        elif result == "filtered":
                            self.total_processed += 1
                            # Task 5: 記錄被過濾的任務
                            QUEUE_PROCESSED_TOTAL.labels(status="filtered").inc()
                            logger.info(f"🔇 [QueueManager] {worker_name} 任務被過濾（靜音），跳過重試：session={session_id}, chunk={chunk_sequence}")
                        else:
                            # 處理失敗，決定是否重試
                            # Task 5: 記錄失敗處理的任務
                            QUEUE_PROCESSED_TOTAL.labels(status="failed").inc()
                            await self._handle_job_failure(job_data, worker_name)

                    except Exception as e:
                        logger.error(f"💥 [QueueManager] {worker_name} 任務異常：session={session_id}, chunk={chunk_sequence}, error={e}")
                        # Task 5: 記錄異常處理的任務
                        QUEUE_PROCESSED_TOTAL.labels(status="exception").inc()
                        await self._handle_job_failure(job_data, worker_name)

                # 標記任務完成
                self.queue.task_done()

            except Exception as e:
                logger.error(f"💥 [QueueManager] {worker_name} Worker 異常：{e}")
                await asyncio.sleep(1)  # 短暫休息後繼續

        logger.info(f"👷 [QueueManager] {worker_name} 停止工作")

    async def _process_transcription_job(self, job_data: dict) -> bool:
        """處理單個轉錄任務"""
        session_id = job_data['session_id']
        chunk_sequence = job_data['chunk_sequence']
        webm_data = job_data['webm_data']

        try:
            # 獲取轉錄服務
            service = await initialize_transcription_service_v2()
            if not service:
                logger.error(f"❌ [QueueManager] 轉錄服務不可用：session={session_id}, chunk={chunk_sequence}")
                return False

            # 執行轉錄
            result = await service._transcribe_audio(webm_data, session_id, chunk_sequence)
            if result:
                # 檢查是否為被過濾的結果
                if isinstance(result, dict) and result.get("filtered"):
                    logger.info(f"🔇 [QueueManager] Chunk {chunk_sequence} 被靜音過濾，跳過重試：session={session_id}")
                    return "filtered"  # 返回特殊標記，表示不需要重試
                else:
                    # 儲存並廣播正常結果
                    await service._save_and_push_result(session_id, chunk_sequence, result)
                    return True
            else:
                logger.warning(f"⚠️ [QueueManager] 轉錄無結果：session={session_id}, chunk={chunk_sequence}")
                return False

        except RateLimitError as e:
            logger.warning(f"🚦 [頻率限制] Chunk {chunk_sequence} 遇到 429 錯誤：{str(e)}")
            # 注意：這裡不調用 rate_limit.backoff()，因為它是在轉錄服務中處理的
            return False
        except Exception as e:
            logger.error(f"❌ [QueueManager] 轉錄失敗：session={session_id}, chunk={chunk_sequence}, error={e}")
            return False

    async def _handle_job_failure(self, job_data: dict, worker_name: str):
        """處理任務失敗（暫時不 Retry）"""
        session_id = job_data['session_id']
        chunk_sequence = job_data['chunk_sequence']
        # retry_count = job_data.get('retry_count', 0)

        # 直接記錄失敗，不再重試
        self.total_failed += 1
        logger.error(f"❌ [QueueManager] {worker_name} 任務最終失敗：session={session_id}, chunk={chunk_sequence}, no_retry")

        # 廣播最終失敗通知
        await self._broadcast_final_failure(session_id, chunk_sequence)

    async def _broadcast_queue_full_error(self, session_id: UUID, chunk_sequence: int):
        """廣播隊列滿錯誤"""
        try:
            error_data = {
                "type": "transcription_error",
                "error_type": "queue_full",
                "message": f"轉錄隊列已滿 ({settings.MAX_QUEUE_SIZE})，請稍後重試",
                "session_id": str(session_id),
                "chunk_sequence": chunk_sequence,
                "timestamp": datetime.utcnow().isoformat()
            }
            await transcript_manager.broadcast(
                json.dumps(error_data),
                str(session_id)
            )
        except Exception as e:
            logger.error(f"Failed to broadcast queue full error: {e}")

    async def _broadcast_final_failure(self, session_id: UUID, chunk_sequence: int):
        """廣播最終失敗通知"""
        try:
            error_data = {
                "type": "transcription_error",
                "error_type": "final_failure",
                "message": f"段落 {chunk_sequence} 轉錄最終失敗，已達最大重試次數",
                "session_id": str(session_id),
                "chunk_sequence": chunk_sequence,
                "timestamp": datetime.utcnow().isoformat()
            }
            await transcript_manager.broadcast(
                json.dumps(error_data),
                str(session_id)
            )
        except Exception as e:
            logger.error(f"Failed to broadcast final failure: {e}")

    # Task 4: 積壓監控器
    async def _backlog_monitor(self):
        """積壓監控協程 - 定期檢查隊列積壓並通知前端"""
        logger.info("📊 [BacklogMonitor] 積壓監控開始")

        while self.is_running:
            try:
                queue_size = self.queue.qsize()
                current_time = time.time()

                # 檢查是否超過積壓閾值
                if queue_size > self.backlog_threshold:
                    # 檢查冷卻時間，避免頻繁通知
                    if current_time - self.last_backlog_alert > self.backlog_alert_cooldown:
                        await self._broadcast_backlog_alert(queue_size)
                        self.last_backlog_alert = current_time
                        logger.warning(f"⚠️ [BacklogMonitor] 隊列積壓警報：queue_size={queue_size}, threshold={self.backlog_threshold}")

                # 記錄隊列狀態（調試用）
                if queue_size > 0:
                    logger.debug(f"📊 [BacklogMonitor] 隊列狀態：size={queue_size}, processed={self.total_processed}, failed={self.total_failed}")

                # 等待下次檢查
                await asyncio.sleep(self.monitor_interval)

            except Exception as e:
                logger.error(f"💥 [BacklogMonitor] 監控異常：{e}")
                await asyncio.sleep(self.monitor_interval)

        logger.info("📊 [BacklogMonitor] 積壓監控停止")

    async def _broadcast_backlog_alert(self, queue_size: int):
        """廣播積壓警報到所有活躍會話"""
        try:
            # 計算預估等待時間
            estimated_wait_minutes = (queue_size * 12) // 60  # 假設每個任務平均 12 秒

            alert_data = {
                "event": "stt_backlog",
                "type": "backlog_alert",
                "queue_size": queue_size,
                "threshold": self.backlog_threshold,
                "estimated_wait_minutes": estimated_wait_minutes,
                "message": f"轉錄隊列積壓：{queue_size} 個任務等待處理，預估延遲 {estimated_wait_minutes} 分鐘",
                "timestamp": datetime.utcnow().isoformat(),
                "level": "warning" if queue_size < self.backlog_threshold * 2 else "critical"
            }

            # 廣播到所有活躍連接
            active_connections = getattr(transcript_manager, 'active_connections', {})
            if active_connections:
                broadcast_message = json.dumps(alert_data)

                # 廣播到所有會話
                for session_id in list(active_connections.keys()):
                    try:
                        await transcript_manager.broadcast(broadcast_message, session_id)
                    except Exception as e:
                        logger.warning(f"Failed to broadcast backlog alert to session {session_id}: {e}")

                logger.info(f"📢 [BacklogMonitor] 積壓警報已廣播到 {len(active_connections)} 個會話")
            else:
                logger.debug("📢 [BacklogMonitor] 無活躍會話，跳過積壓警報廣播")

        except Exception as e:
            logger.error(f"Failed to broadcast backlog alert: {e}")

    async def _broadcast_queue_recovery(self, queue_size: int):
        """廣播隊列恢復正常通知"""
        try:
            recovery_data = {
                "event": "stt_recovery",
                "type": "queue_recovery",
                "queue_size": queue_size,
                "message": f"轉錄隊列已恢復正常：當前 {queue_size} 個任務",
                "timestamp": datetime.utcnow().isoformat(),
                "level": "info"
            }

            # 廣播到所有活躍連接
            active_connections = getattr(transcript_manager, 'active_connections', {})
            if active_connections:
                broadcast_message = json.dumps(recovery_data)

                for session_id in list(active_connections.keys()):
                    try:
                        await transcript_manager.broadcast(broadcast_message, session_id)
                    except Exception as e:
                        logger.warning(f"Failed to broadcast recovery to session {session_id}: {e}")

                logger.info(f"📢 [BacklogMonitor] 恢復通知已廣播到 {len(active_connections)} 個會話")

        except Exception as e:
            logger.error(f"Failed to broadcast queue recovery: {e}")

    def get_stats(self) -> dict:
        """獲取隊列統計信息"""
        queue_size = self.queue.qsize()
        return {
            'queue_size': queue_size,
            'max_queue_size': settings.MAX_QUEUE_SIZE,
            'total_processed': self.total_processed,
            'total_failed': self.total_failed,
            'total_retries': self.total_retries,
            'workers_count': len(self.workers),
            'is_running': self.is_running,
            # Task 4: 積壓監控統計
            'backlog_threshold': self.backlog_threshold,
            'is_backlogged': queue_size > self.backlog_threshold,
            'monitor_interval': self.monitor_interval,
            'last_backlog_alert': self.last_backlog_alert,
            'estimated_wait_seconds': queue_size * 12 if queue_size > 0 else 0
        }

# 配置常數
CHUNK_DURATION = settings.AUDIO_CHUNK_DURATION_SEC  # 從配置讀取切片時長
PROCESSING_TIMEOUT = 30  # 處理超時（秒）
MAX_RETRIES = 3  # 最大重試次數

# 全域集合追蹤已廣播 active 相位的 session
_active_phase_sent: Set[str] = set()

# Rate Limiter 工廠函數
def get_rate_limiter():
    """
    Rate Limiter 工廠函數 - 根據配置選擇適當的頻率限制策略

    Returns:
        RateLimitHandler 或 SlidingWindowRateLimiter 實例
    """
    if settings.USE_SLIDING_WINDOW_RATE_LIMIT:
        logger.info(f"🪟 [配置] 使用滑動視窗頻率限制：{settings.SLIDING_WINDOW_MAX_REQUESTS} requests/{settings.SLIDING_WINDOW_SECONDS}s")

        # 更新 Rate Limiter 類型指標
        RATE_LIMITER_TYPE.labels(limiter_type="sliding_window").set(1)
        RATE_LIMITER_TYPE.labels(limiter_type="traditional").set(0)

        return SlidingWindowRateLimiter(
            max_requests=settings.SLIDING_WINDOW_MAX_REQUESTS,
            window_seconds=settings.SLIDING_WINDOW_SECONDS
        )
    else:
        logger.info("🚦 [配置] 使用傳統指數退避頻率限制")

        # 更新 Rate Limiter 類型指標
        RATE_LIMITER_TYPE.labels(limiter_type="traditional").set(1)
        RATE_LIMITER_TYPE.labels(limiter_type="sliding_window").set(0)

        return RateLimitHandler()

# 全域頻率限制處理器（動態選擇）
rate_limit = get_rate_limiter()

# Task 3: 全域隊列管理器
queue_manager = TranscriptionQueueManager()

class SimpleAudioTranscriptionService:
    """簡化的音訊轉錄服務"""

    def __init__(self, azure_client: AsyncAzureOpenAI, deployment_name: str):
        self.client = azure_client
        self.deployment_name = deployment_name
        self.processing_tasks: Dict[str, asyncio.Task] = {}

    def _keep(self, segment: dict) -> bool:
        """
        根據 Whisper verbose_json 回應判斷是否保留轉錄段落

        使用 no_speech_prob、avg_logprob、compression_ratio 等指標過濾幻覺內容

        Args:
            segment: Whisper verbose_json 格式的段落資料

        Returns:
            bool: True 表示保留段落，False 表示過濾掉
        """
        try:
            # 檢查必要欄位是否存在
            required_fields = ['no_speech_prob', 'avg_logprob', 'compression_ratio']
            for field in required_fields:
                if field not in segment:
                    logger.warning(f"🔍 [段落過濾] 段落缺少必要欄位 '{field}'，過濾掉")
                    WHISPER_SEGMENTS_FILTERED.labels(
                        reason="missing_field",
                        deployment=self.deployment_name
                    ).inc()
                    return False

            # 提取過濾指標
            no_speech_prob = segment['no_speech_prob']
            avg_logprob = segment['avg_logprob']
            compression_ratio = segment['compression_ratio']

            # 過濾條件 1: 靜音檢測 - no_speech_prob 過高
            if no_speech_prob >= settings.FILTER_NO_SPEECH:
                logger.debug(f"🔇 [段落過濾] 靜音機率過高: {no_speech_prob:.3f} >= {settings.FILTER_NO_SPEECH}")
                WHISPER_SEGMENTS_FILTERED.labels(
                    reason="no_speech",
                    deployment=self.deployment_name
                ).inc()
                return False

            # 過濾條件 2: 置信度檢測 - avg_logprob 過低
            if avg_logprob < settings.FILTER_LOGPROB:
                logger.debug(f"📉 [段落過濾] 置信度過低: {avg_logprob:.3f} < {settings.FILTER_LOGPROB}")
                WHISPER_SEGMENTS_FILTERED.labels(
                    reason="low_confidence",
                    deployment=self.deployment_name
                ).inc()
                return False

            # 過濾條件 3: 重複內容檢測 - compression_ratio 過高
            if compression_ratio > settings.FILTER_COMPRESSION:
                logger.debug(f"🔄 [段落過濾] 重複比率過高: {compression_ratio:.3f} > {settings.FILTER_COMPRESSION}")
                WHISPER_SEGMENTS_FILTERED.labels(
                    reason="high_compression",
                    deployment=self.deployment_name
                ).inc()
                return False

            # 所有檢查通過，保留段落
            logger.debug(f"✅ [段落過濾] 段落品質良好，保留")
            logger.debug(f"   - 靜音機率: {no_speech_prob:.3f} < {settings.FILTER_NO_SPEECH}")
            logger.debug(f"   - 置信度: {avg_logprob:.3f} >= {settings.FILTER_LOGPROB}")
            logger.debug(f"   - 重複比率: {compression_ratio:.3f} <= {settings.FILTER_COMPRESSION}")
            return True

        except Exception as e:
            logger.error(f"❌ [段落過濾] 過濾邏輯異常: {e}")
            # 異常情況下預設過濾掉，避免產出錯誤內容
            WHISPER_SEGMENTS_FILTERED.labels(
                reason="filter_error",
                deployment=self.deployment_name
            ).inc()
            return False

    # def _get_header_repairer(self) -> WebMHeaderRepairer:
    #     """延遲初始化 WebM 檔頭修復器 - 已停用，不再需要檔頭修復"""
    #     if self._header_repairer is None:
    #         self._header_repairer = WebMHeaderRepairer()
    #     return self._header_repairer

    # def _extract_and_cache_header(self, session_id: str, chunk_0_data: bytes) -> bool:
    #     """檔頭提取和緩存 - 已停用，每個 chunk 都有完整檔頭"""
    #     # 不再需要，每個 chunk 都包含完整 WebM Header
    #     return True

    # def _get_cached_header(self, session_id: str) -> Optional[bytes]:
    #     """獲取緩存檔頭 - 已停用，不再需要檔頭緩存"""
    #     # 不再需要，每個 chunk 都包含完整 WebM Header
    #     return None

    # def _clear_session_cache(self, session_id: str) -> None:
    #     """清理會話緩存 - 已停用"""
    #     # 不再需要緩存
    #     pass

    # def _cleanup_expired_cache(self) -> None:
    #     """清理過期緩存 - 已停用"""
    #     # 不再需要緩存管理
    #     pass

    async def process_audio_chunk(self, session_id: UUID, chunk_sequence: int, webm_data: bytes) -> bool:
        """
        處理單一音訊切片 - Task 3: 使用隊列系統

        Args:
            session_id: 會話 ID
            chunk_sequence: 切片序號
            webm_data: WebM 音訊數據

        Returns:
            bool: 處理是否成功（入隊成功即視為成功）
        """
        try:
            logger.info(f"🚀 [TranscriptionService] 提交轉錄任務：session={session_id}, chunk={chunk_sequence}, size={len(webm_data)} bytes")

            # Task 3: 將任務提交到隊列而非直接處理
            await queue_manager.enqueue_job(session_id, chunk_sequence, webm_data)

            # 返回 True 表示成功提交到隊列
            return True

        except Exception as e:
            logger.error(f"❌ [TranscriptionService] 提交任務失敗：session={session_id}, chunk={chunk_sequence}, error={e}")
            return False

    async def _process_chunk_async(self, session_id: UUID, chunk_sequence: int, webm_data: bytes):
        """非同步處理音訊切片 (WebM 直接轉錄架構 v2 + 檔頭修復)"""
        try:
            with PerformanceTimer(f"Process chunk {chunk_sequence} for session {session_id}"):
                session_id_str = str(session_id)
                logger.info(f"�� [WebM 直接轉錄] 開始處理音訊切片 {chunk_sequence} (session: {session_id}, size: {len(webm_data)} bytes)")

                # 步驟 1: 驗證和修復 WebM 數據（整合檔頭修復邏輯）
                processed_webm_data = await self._validate_and_repair_webm_data(session_id, chunk_sequence, webm_data)
                if processed_webm_data is None:
                    logger.error(f"❌ [驗證失敗] Chunk {chunk_sequence} 驗證失敗，跳過處理")
                    return

                # 步驟 3: WebM 直接轉錄 (使用修復後的數據)
                logger.info(f"⚡ [架構優化] 跳過 FFmpeg 轉換，直接轉錄 WebM (chunk {chunk_sequence})")
                transcript_result = await self._transcribe_audio(processed_webm_data, session_id, chunk_sequence)
                if not transcript_result:
                    logger.error(f"Failed to transcribe WebM chunk {chunk_sequence}")
                    return

                # 步驟 4: 儲存並推送結果
                await self._save_and_push_result(session_id, chunk_sequence, transcript_result)

                logger.info(f"✅ 成功處理音訊切片 {chunk_sequence}: '{transcript_result.get('text', '')[:50]}...'")

        except Exception as e:
            logger.error(f"Error processing chunk {chunk_sequence} for session {session_id}: {e}", exc_info=True)

    async def _validate_and_repair_webm_data(self, session_id: UUID, chunk_sequence: int, webm_data: bytes) -> Optional[bytes]:
        """
        簡化的 WebM 數據驗證（優化後架構）

        由於 SegmentedAudioRecorder 每個 chunk 都包含完整 WebM Header，
        不再需要複雜的檔頭修復邏輯，只需基本驗證即可。

        Args:
            session_id: 會話 ID
            chunk_sequence: 切片序號
            webm_data: 原始 WebM 音訊數據

        Returns:
            Optional[bytes]: 驗證後的 WebM 數據，驗證失敗時返回 None
        """
        start_time = time.time()

        try:
            # 步驟 1: 基本數據驗證
            if not webm_data or len(webm_data) < 50:
                logger.warning(f"WebM chunk {chunk_sequence} too small: {len(webm_data) if webm_data else 0} bytes")
                return None

            # 步驟 2: 簡化驗證 - 每個 chunk 都應該有完整檔頭
            logger.debug(f"🎯 [簡化驗證] Chunk {chunk_sequence} 數據大小: {len(webm_data)} bytes (session: {session_id})")

            # 檢查是否為 WebM 格式（簡單檢查 EBML header）
            if webm_data[:4] == b'\x1A\x45\xDF\xA3':
                logger.debug(f"✅ [檔頭檢查] Chunk {chunk_sequence} 包含完整 WebM EBML header")
            else:
                logger.warning(f"⚠️ [檔頭檢查] Chunk {chunk_sequence} 可能不是標準 WebM 格式，但繼續處理")

            # 步驟 3: 效能統計
            total_time = (time.time() - start_time) * 1000  # ms
            logger.debug(f"📊 [簡化處理] Chunk {chunk_sequence} 驗證完成 - 總計: {total_time:.1f}ms")

            # 效能警告（應該很快）
            if total_time > 10:  # 超過10ms警告（簡化後應該更快）
                logger.warning(f"⚠️ [效能警告] Chunk {chunk_sequence} 簡化驗證時間過長: {total_time:.1f}ms")

            return webm_data  # 直接返回原始數據

        except Exception as e:
            logger.error(f"❌ [簡化驗證] Chunk {chunk_sequence} 處理異常: {e}")
            return webm_data  # 降級使用原始數據

    async def _convert_webm_to_wav(self, webm_data: bytes, chunk_sequence: int, session_id: UUID) -> Optional[bytes]:
        """
        將 WebM / fMP4 轉換為 WAV (保留用於最終下載檔案)

        注意：在 WebM 直接轉錄架構 v2 中，此方法不再用於即時轉錄流程，
        而是保留作為最終匯出時生成 WAV 檔案的備選方案。
        """

        async def _broadcast_error(error_type: str, error_message: str, details: str = None):
            """透過 WebSocket 廣播錯誤訊息到前端"""
            try:
                from app.ws.transcript_feed import manager as transcript_manager

                # 生成音檔診斷資訊
                hex_header = webm_data[:32].hex(' ', 8).upper() if webm_data else "無數據"
                audio_format = detect_audio_format(webm_data)

                # 根據檢測到的格式提供建議
                def get_format_suggestion(audio_format: str) -> str:
                    suggestions = {
                        'fmp4': '建議檢查瀏覽器錄音設定，或嘗試使用 WebM 格式',
                        'mp4': '建議確認音檔完整性，或嘗試使用 WebM 格式',
                        'webm': '建議檢查 WebM 編碼器設定',
                        'unknown': '建議檢查瀏覽器是否支援音訊錄製，或嘗試重新整理頁面'
                    }
                    return suggestions.get(audio_format, '建議檢查音檔格式是否支援')

                error_data = {
                    "type": "conversion_error",
                    "error_type": error_type,
                    "message": error_message,
                    "details": details,
                    "session_id": str(session_id),
                    "chunk_sequence": chunk_sequence,
                    "timestamp": datetime.utcnow().isoformat(),
                    "diagnostics": {
                        "detected_format": audio_format,
                        "file_size": len(webm_data) if webm_data else 0,
                        "header_hex": hex_header,
                        "suggestion": get_format_suggestion(audio_format)
                    }
                }
                await transcript_manager.broadcast(
                    json.dumps(error_data),
                    str(session_id)
                )
                logger.info(f"🚨 [錯誤廣播] 已通知前端轉換錯誤: {error_type}")
                logger.debug(f"   - 格式診斷: {audio_format}, 大小: {len(webm_data) if webm_data else 0} bytes")
                logger.debug(f"   - 頭部數據: {hex_header}")
            except Exception as e:
                logger.error(f"Failed to broadcast error message: {e}")

        try:
            audio_format = detect_audio_format(webm_data)
            logger.info(f"🎵 [格式檢測] 檢測到音檔格式: {audio_format} (chunk {chunk_sequence}, 大小: {len(webm_data)} bytes)")

            with PerformanceTimer(f"{audio_format.upper()} to WAV conversion for chunk {chunk_sequence}"):

                # 基本 FFmpeg 參數
                cmd = ['ffmpeg']

                # 依來源格式決定輸入參數
                if audio_format == 'mp4':
                    # Safari 產出的 fragmented MP4 - 讓 FFmpeg 自動檢測格式
                    # 不指定 -f 參數，能更好處理各種 MP4 變體
                    pass
                elif audio_format == 'webm':
                    cmd += ['-f', 'webm']
                elif audio_format == 'ogg':
                    cmd += ['-f', 'ogg']
                elif audio_format == 'wav':
                    cmd += ['-f', 'wav']

                # 通用旗標：生成時間戳處理不完整流
                cmd += ['-fflags', '+genpts', '-i', 'pipe:0', '-ac', '1', '-ar', '16000', '-f', 'wav', '-y', 'pipe:1']

                logger.debug(f"🔧 [FFmpeg] 執行命令: {' '.join(cmd)}")

                process = await asyncio.create_subprocess_exec(
                    *cmd,
                    stdin=asyncio.subprocess.PIPE,
                    stdout=asyncio.subprocess.PIPE,
                    stderr=asyncio.subprocess.PIPE
                )

                stdout, stderr = await asyncio.wait_for(
                    process.communicate(input=webm_data),
                    timeout=PROCESSING_TIMEOUT
                )

                if process.returncode != 0:
                    error_msg = stderr.decode('utf-8', errors='ignore') if stderr else "Unknown error"
                    logger.error(f"❌ [FFmpeg 錯誤] 轉換失敗 chunk {chunk_sequence}")
                    logger.error(f"   - 格式: {audio_format}")
                    logger.error(f"   - 返回碼: {process.returncode}")
                    logger.error(f"   - 錯誤訊息: {error_msg}")
                    logger.error(f"   - 輸入大小: {len(webm_data)} bytes")

                    # 增強錯誤分析，特別針對 fragmented MP4 錯誤
                    if "could not find corresponding trex" in error_msg.lower():
                        error_reason = "Fragmented MP4 格式錯誤：缺少 Track Extends (trex) 盒，需要使用特殊的 movflags 參數"
                        detailed_suggestion = (
                            "🔧 解決方案：\n"
                            "1. 檢測到 fragmented MP4 格式，建議重新整理頁面\n"
                            "2. 如果問題持續，請嘗試使用不同瀏覽器\n"
                            "3. Safari 用戶建議切換至 Chrome 或 Firefox"
                        )
                    elif "trun track id unknown" in error_msg.lower():
                        error_reason = "Fragmented MP4 追蹤 ID 錯誤：Track Run (trun) 盒中的軌道 ID 無法識別"
                        detailed_suggestion = (
                            "🔧 解決方案：\n"
                            "1. 這是 fragmented MP4 特有錯誤\n"
                            "2. 建議重新錄音或重啟瀏覽器\n"
                            "3. 考慮降低錄音品質設定"
                        )
                    elif "Invalid data found when processing input" in error_msg:
                        error_reason = f"音檔格式 {audio_format} 與 FFmpeg 不兼容，可能是編碼問題"
                        detailed_suggestion = (
                            "🔧 解決方案：\n"
                            "1. 檢查音檔是否完整下載\n"
                            "2. 確認瀏覽器錄音格式設定\n"
                            "3. 嘗試重新開始錄音"
                        )
                    elif "No such file or directory" in error_msg:
                        error_reason = "FFmpeg 程式未找到或配置錯誤"
                        detailed_suggestion = (
                            "🔧 解決方案：\n"
                            "1. 請聯繫技術支援\n"
                            "2. 這是伺服器配置問題"
                        )
                    elif "Permission denied" in error_msg:
                        error_reason = "FFmpeg 權限不足"
                        detailed_suggestion = (
                            "🔧 解決方案：\n"
                            "1. 請聯繫技術支援\n"
                            "2. 這是伺服器權限問題"
                        )
                    else:
                        error_reason = f"FFmpeg 處理 {audio_format} 格式時發生未知錯誤"
                        detailed_suggestion = (
                            "🔧 解決方案：\n"
                            "1. 嘗試重新錄音\n"
                            "2. 檢查網路連線是否穩定\n"
                            "3. 如果問題持續，請聯繫技術支援"
                        )

                    # 記錄詳細診斷資訊
                    logger.error(f"   - 診斷結果: {error_reason}")
                    logger.error(f"   - 建議方案: {detailed_suggestion}")

                    await _broadcast_error("ffmpeg_conversion_failed", error_reason, detailed_suggestion)
                    return None

                if not stdout or len(stdout) < 100:
                    error_msg = f"FFmpeg 產生的 WAV 數據不足: {len(stdout) if stdout else 0} bytes"
                    logger.error(f"❌ [FFmpeg 警告] {error_msg}")
                    await _broadcast_error("insufficient_output", "轉換後的音檔數據不足，可能是靜音或損壞", error_msg)
                    return None

                logger.info(f"✅ [FFmpeg 成功] {audio_format.upper()} ({len(webm_data)} bytes) → WAV ({len(stdout)} bytes)")
                return stdout

        except asyncio.TimeoutError:
            error_msg = f"FFmpeg 轉換超時 (>{PROCESSING_TIMEOUT}秒)"
            logger.error(f"⏰ [FFmpeg 超時] {error_msg}")
            await _broadcast_error("conversion_timeout", "音檔轉換處理時間過長", error_msg)
            return None
        except Exception as e:
            error_msg = f"FFmpeg 轉換異常: {str(e)}"
            logger.error(f"💥 [FFmpeg 異常] {error_msg}")
            await _broadcast_error("conversion_exception", "音檔轉換過程中發生異常錯誤", error_msg)
            return None

    async def _transcribe_audio(self, webm_data: bytes, session_id: UUID, chunk_sequence: int) -> Optional[Dict[str, Any]]:
        """使用 Azure OpenAI Whisper 直接轉錄 WebM 音訊 (簡化: 只處理 text)"""
        from app.services.stt.factory import get_provider
        alt_provider = get_provider(session_id)
        if alt_provider and alt_provider.name() != "whisper":
            return await alt_provider.transcribe(webm_data, session_id, chunk_sequence)

        await rate_limit.wait()
        CONCURRENT_JOBS_GAUGE.inc()

        try:
            with WHISPER_LATENCY_SECONDS.labels(deployment=self.deployment_name).time():
                with PerformanceTimer(f"Whisper WebM transcription for chunk {chunk_sequence}"):
                    with tempfile.NamedTemporaryFile(suffix='.webm', delete=False) as temp_file:
                        temp_file.write(webm_data)
                        temp_file.flush()
                        try:
                            with open(temp_file.name, 'rb') as audio_file:
                                transcript = await self.client.audio.transcriptions.create(
                                    model=self.deployment_name,
                                    file=audio_file,
                                    language=getattr(settings, 'WHISPER_LANGUAGE', 'zh'),
                                    response_format="json",
                                    temperature=0
                                )
                            Path(temp_file.name).unlink(missing_ok=True)

                            # 只處理 {"text": ...} 結果
                            text = getattr(transcript, "text", None) or (transcript.get("text") if isinstance(transcript, dict) else None)
                            if not text or not text.strip():
                                WHISPER_REQ_TOTAL.labels(status="empty", deployment=self.deployment_name).inc()
                                return None
                            combined_text = text.strip()

                            # API 呼叫成功，重置頻率限制延遲
                            rate_limit.reset()
                            WHISPER_REQ_TOTAL.labels(status="success", deployment=self.deployment_name).inc()

                            return {
                                "text": combined_text,
                                "chunk_sequence": chunk_sequence,
                                "session_id": str(session_id),
                                "timestamp": datetime.utcnow().isoformat(),
                                "language": getattr(settings, 'WHISPER_LANGUAGE', 'zh-TW'),
                                "start_offset": 0.0,
                                "end_offset": settings.AUDIO_CHUNK_DURATION_SEC
                            }
                        finally:
                            Path(temp_file.name).unlink(missing_ok=True)
        except RateLimitError as e:
            logger.warning(f"🚦 [頻率限制] Chunk {chunk_sequence} 遇到 429 錯誤：{str(e)}")
            rate_limit.backoff()
            WHISPER_REQ_TOTAL.labels(status="rate_limit", deployment=self.deployment_name).inc()
            if isinstance(rate_limit, SlidingWindowRateLimiter):
                stats = rate_limit.get_stats()
                if stats['is_at_capacity']:
                    error_msg = f"API 配額已滿（{stats['active_requests']}/{stats['max_requests']}），請等待約 {rate_limit._delay}s"
                else:
                    error_msg = f"API 頻率限制，滑動視窗排隊處理中（{stats['available_permits']} 個許可可用）"
            else:
                error_msg = f"API 頻率限制，將在 {rate_limit._delay}s 後重試"
            await self._broadcast_transcription_error(
                session_id,
                chunk_sequence,
                "rate_limit_error",
                error_msg
            )
            return None
        except Exception as e:
            logger.error(f"WebM direct transcription failed for chunk {chunk_sequence}: {e}")
            WHISPER_REQ_TOTAL.labels(status="error", deployment=self.deployment_name).inc()
            await self._broadcast_transcription_error(session_id, chunk_sequence, "whisper_api_error", f"Azure OpenAI Whisper WebM 轉錄失敗: {str(e)}")
            return None
        finally:
            CONCURRENT_JOBS_GAUGE.dec()

    async def _save_and_push_result(self, session_id: UUID, chunk_sequence: int, transcript_result: Dict[str, Any]):
        """儲存轉錄結果並推送到前端"""
        try:
            supabase = get_supabase_client()
            session_response = supabase.table("sessions").select("started_at").eq("id", str(session_id)).limit(1).execute()
            started_at = None
            if session_response.data and session_response.data[0].get('started_at'):
                started_at = session_response.data[0]['started_at']
            chunk_start_seconds = chunk_sequence * settings.AUDIO_CHUNK_DURATION_SEC
            start_time = chunk_start_seconds + transcript_result.get('start_offset', 0)
            end_time = chunk_start_seconds + transcript_result.get('end_offset', settings.AUDIO_CHUNK_DURATION_SEC)
            if started_at:
                logger.info(
                    f"🕐 [時間計算 v2] 精確開始時間: {started_at}, "
                    f"chunk={chunk_sequence}, chunk_start={chunk_start_seconds}s, "
                    f"offset=({transcript_result.get('start_offset', 0)}s-{transcript_result.get('end_offset', 0)}s) → "
                    f"absolute=({start_time}s-{end_time}s)"
                )
            else:
                logger.info(
                    f"🕐 [時間計算 v2] 未檢測到 started_at，使用 fallback 相對時間。" \
                    f"chunk={chunk_sequence}, chunk_start={chunk_start_seconds}s, " \
                    f"offset=({transcript_result.get('start_offset', 0)}s-{transcript_result.get('end_offset', 0)}s) → " \
                    f"relative=({start_time}s-{end_time}s)"
                )
            segment_data = {
                "session_id": str(session_id),
                "chunk_sequence": chunk_sequence,
                "text": transcript_result['text'],
                "start_time": start_time,
                "end_time": end_time,
                "confidence": 1.0,
                "lang_code": transcript_result.get('language', 'zh-TW'),
                "created_at": transcript_result['timestamp']
            }
            response = supabase.table("transcript_segments").insert(segment_data).execute()
            if response.data:
                segment_id = response.data[0]['id']
                logger.debug(f"Saved transcript segment {segment_id} for chunk {chunk_sequence}")
                if str(session_id) not in _active_phase_sent:
                    logger.info(f"🚀 [轉錄推送] 首次廣播 active 相位到 session {session_id}")
                    await transcript_manager.broadcast(
                        json.dumps({"phase": "active"}),
                        str(session_id)
                    )
                    _active_phase_sent.add(str(session_id))
                    logger.info(f"✅ [轉錄推送] Active 相位廣播完成 for session {session_id}")
                transcript_message = {
                    "type": "transcript_segment",
                    "session_id": str(session_id),
                    "segment_id": segment_id,
                    "text": transcript_result['text'],
                    "chunk_sequence": chunk_sequence,
                    "start_sequence": chunk_sequence,
                    "start_time": segment_data['start_time'],
                    "end_time": segment_data['end_time'],
                    "confidence": segment_data['confidence'],
                    "timestamp": segment_data['created_at']
                }
                logger.info(f"📡 [轉錄推送] 廣播逐字稿片段到 session {session_id}:")
                logger.info(f"   - 文字: '{transcript_result['text'][:50]}{'...' if len(transcript_result['text']) > 50 else ''}'")
                logger.info(f"   - 序號: {chunk_sequence}")
                logger.info(f"   - 時間: {segment_data['start_time']}s - {segment_data['end_time']}s")
                await transcript_manager.broadcast(
                    json.dumps(transcript_message),
                    str(session_id)
                )
                logger.info(f"✅ [轉錄推送] 逐字稿片段廣播完成 for session {session_id}")
                logger.info(f"廣播轉錄完成訊息到 session {session_id}")
                await transcript_manager.broadcast(
                    json.dumps({
                        "type": "transcript_complete",
                        "session_id": str(session_id),
                        "message": "Transcription completed for the batch."
                    }),
                    str(session_id)
                )
                logger.info(f"轉錄任務完成 for session: {session_id}, chunk: {chunk_sequence}")
        except Exception as e:
            logger.error(f"Failed to save/push transcript for chunk {chunk_sequence}: {e}")
            await self._broadcast_transcription_error(session_id, chunk_sequence, "database_error", f"資料庫操作失敗: {str(e)}")

    async def _broadcast_transcription_error(self, session_id: UUID, chunk_sequence: int, error_type: str, error_message: str):
        """廣播轉錄錯誤到前端"""
        try:
            from app.ws.transcript_feed import manager as transcript_manager
            error_data = {
                "type": "transcription_error",
                "error_type": error_type,
                "message": error_message,
                "session_id": str(session_id),
                "chunk_sequence": chunk_sequence,
                "timestamp": datetime.utcnow().isoformat()
            }
            await transcript_manager.broadcast(
                json.dumps(error_data),
                str(session_id)
            )
            logger.info(f"🚨 [轉錄錯誤廣播] 已通知前端轉錄錯誤: {error_type}")
        except Exception as e:
            logger.error(f"Failed to broadcast transcription error: {e}")

    # TODO: 在此處實現更優雅的關閉邏輯
    logger.info("Transcription service is shutting down...")

# ----------------------
# 兼容舊測試的工廠函式與全域變數
# ----------------------

_transcription_service_v2: Optional[SimpleAudioTranscriptionService] = None


def get_azure_openai_client() -> Optional[AsyncAzureOpenAI]:
    """Task 1: 建立異步 AzureOpenAI 用戶端，包含優化的 timeout 和重試配置"""
    api_key = os.getenv("AZURE_OPENAI_API_KEY")
    endpoint = os.getenv("AZURE_OPENAI_ENDPOINT")
    if not api_key or not endpoint:
        logger.warning("⚠️ [客戶端初始化] Azure OpenAI 環境變數缺失")
        return None

    # Task 1: 創建異步客戶端，包含 timeout 和減少重試次數
    client = AsyncAzureOpenAI(
        api_key=api_key,
        azure_endpoint=endpoint,
        api_version="2024-06-01",
        timeout=TIMEOUT,
        max_retries=2,  # 由 5 次降到 2 次，避免積壓
    )

    logger.info("✅ [客戶端初始化] AsyncAzureOpenAI 客戶端已創建")
    logger.info(f"   - Timeout: connect={TIMEOUT.connect}s, read={TIMEOUT.read}s")
    logger.info(f"   - Max retries: 2 (優化後)")

    return client


def get_whisper_deployment_name() -> Optional[str]:
    """取得 Whisper 部署名稱，環境變數缺值時回傳 None。"""
    return os.getenv("WHISPER_DEPLOYMENT_NAME")


async def initialize_transcription_service_v2() -> Optional[SimpleAudioTranscriptionService]:
    """初始化並快取 SimpleAudioTranscriptionService 實例。若設定不足則回傳 None。"""
    global _transcription_service_v2
    if _transcription_service_v2 is not None:
        return _transcription_service_v2

    client = get_azure_openai_client()
    deployment = get_whisper_deployment_name()
    if not client or not deployment:
        logger.warning("Azure OpenAI 設定不足，無法初始化轉錄服務 v2")
        return None

    _transcription_service_v2 = SimpleAudioTranscriptionService(client, deployment)
    logger.info("✅ Transcription service v2 initialized with async client")
    return _transcription_service_v2


def cleanup_transcription_service_v2():
    """清理全域轉錄服務實例。"""
    global _transcription_service_v2
    _transcription_service_v2 = None


# END FILE CONTENTS


# File: frontend/components/ui/sonner.tsx

"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }


# END FILE CONTENTS


# File: .env.example

# StudyScriber 環境變數

# ============================================
# Supabase 資料庫配置 (必須)
# ============================================
DB_MODE=supabase
SUPABASE_URL=https://your-project-ref.supabase.co
SUPABASE_KEY=your-anon-public-key

# ============================================
# 語音轉文字 Provider 設定
# ============================================
# 預設 STT Provider：whisper (Azure OpenAI) 或 gemini (Google Vertex AI)
STT_PROVIDER_DEFAULT=whisper

# ============================================
# Azure OpenAI 服務 (Whisper STT - 必須)
# ============================================
AZURE_OPENAI_API_KEY=your-api-key
AZURE_OPENAI_ENDPOINT=https://your-resource.openai.azure.com/
AZURE_OPENAI_API_VERSION=2024-02-01
WHISPER_DEPLOYMENT_NAME=whisper-1

# ============================================
# Google Vertex AI 服務 (Gemini STT - 可選)
# ============================================
# 取消註釋以下設定以啟用 Gemini 2.5 Pro STT
# GEMINI_ENDPOINT=us-central1-aiplatform.googleapis.com
# GEMINI_API_KEY=your-gcp-service-account-key
# GEMINI_PROMPT=請輸出逐字稿：
# GEMINI_MAX_REQUESTS=90


# ============================================
# Azure OpenAI 批次處理設定 (優化為低延遲)
# ============================================

# 批次處理設定 (優化為低延遲)
# 批次大小：2個音檔切片
WHISPER_BATCH_SIZE=2
# 批次超時：3秒 (目標延遲 ≤5秒)
WHISPER_BATCH_TIMEOUT=3

# 效能監控設定
# 啟用效能日誌記錄
ENABLE_PERFORMANCE_LOGGING=true

# ============================================
# Whisper 幻覺過濾設定 (提升轉錄品質)
# ============================================
# 這些參數用於過濾 Azure Whisper API 產生的低品質或幻覺段落
# 使用 verbose_json 格式的回應進行後端自動過濾

# 靜音檢測門檻 - 過濾高靜音機率的段落
# 範圍：0.0-1.0，值越高越嚴格
# 建議值：0.8 (過濾 80% 以上靜音機率的段落)
# 用途：移除「嗯」、「呃」等填充詞和靜音片段
FILTER_NO_SPEECH=0.8

# 置信度過濾門檻 - 過濾低置信度的段落
# 範圍：-5.0 到 0.0，值越高越嚴格
# 建議值：-1.0 (過濾平均對數機率低於 -1.0 的段落)
# 用途：移除模型不確定的轉錄結果
FILTER_LOGPROB=-1.0

# 重複內容檢測門檻 - 過濾高重複比率的段落
# 範圍：1.0+，值越低越嚴格
# 建議值：2.4 (過濾壓縮比大於 2.4 的段落)
# 用途：移除重複文字、迴圈幻覺等內容
FILTER_COMPRESSION=2.4

# ============================================
# 音頻切片配置 (影響前後端錄音切片時間)
# ============================================
# 音頻切片時長（秒）- 同時影響前後端錄音間隔
# 建議值：5-30秒，預設10秒
AUDIO_CHUNK_DURATION_SEC=5

# ============================================
# Cloudflare R2 儲存配置 (必須 - 用於音檔儲存)
# ============================================
# 帳戶 ID - 在 Cloudflare 控制台中可以找到
R2_ACCOUNT_ID=your-account-id

# API Token - 在 Cloudflare 控制台 > API 權杖中建立
# 需要的權限: Zone:Zone:Read, Account:Cloudflare R2:Edit
R2_API_TOKEN=your-r2-api-token

# 儲存桶名稱
R2_BUCKET_NAME=studyscriber-audio

# R2_ENDPOINT_URL 會自動生成: https://{R2_ACCOUNT_ID}.r2.cloudflarestorage.com
# 如需自訂端點，請取消註釋下面這行
# R2_ENDPOINT_URL=https://your-custom-endpoint.com

# ============================================
# 應用程式設定 (可選)
# ============================================
DEBUG=false
LOG_LEVEL=INFO


# END FILE CONTENTS


# File: frontend/components/ui/chart.tsx

"use client"

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}


# END FILE CONTENTS


# File: frontend/app/layout.tsx

import type { Metadata } from 'next'
import './globals.css'
import { AppStateProviderWrapper } from '../providers/app-state-provider-wrapper'

export const metadata: Metadata = {
  title: 'study-scriber',
  description: 'study-scriber',
  generator: 'study-scriber',
}

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode
}>) {
  return (
    <html lang="en" data-testid="html-root">
      <body>
        <AppStateProviderWrapper>
          {children}
        </AppStateProviderWrapper>
      </body>
    </html>
  )
}


# END FILE CONTENTS


# File: frontend/styles/globals.css

@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}


# END FILE CONTENTS


# File: frontend/lib/rest-audio-uploader.ts

"use client"

/**
 * RestAudioUploader - REST API 音頻上傳器
 *
 * Phase 2 重構：替換 WebSocket 為 REST API 上傳
 *
 * 特點：
 * - 使用 fetch POST `/api/segment` 上傳完整 10s 檔案
 * - 實作上傳錯誤處理和重試機制
 * - 使用 IndexedDB 暫存失敗的檔案
 * - 簡化的錯誤處理流程
 */

import { appConfig } from './config'

export interface UploadSegmentResponse {
    ack: number
    size: number
    status: 'success' | 'error'
    error?: string
}

export interface FailedSegment {
    sessionId: string
    sequence: number
    blob: Blob
    timestamp: number
    retryCount: number
}

export class RestAudioUploader {
    private sessionId: string | null = null
    private uploadQueue: Map<number, Blob> = new Map()
    private retryCount: Map<number, number> = new Map()
    private maxRetries = 3

    // 事件回調
    private onUploadSuccessCallback?: (seq: number, response: UploadSegmentResponse) => void
    private onUploadErrorCallback?: (seq: number, error: string) => void
    private onCacheStoredCallback?: (seq: number) => void

    constructor() {
        if (typeof window !== 'undefined') {
            this.initIndexedDB()
        }
    }

    /**
     * 初始化 IndexedDB 存儲
     */
    private async initIndexedDB(): Promise<void> {
        if (typeof window === 'undefined' || !window.indexedDB) {
            console.warn('⚠️ [RestAudioUploader] IndexedDB 不可用（服務器端渲染）')
            return
        }

        return new Promise((resolve, reject) => {
            const request = indexedDB.open('AudioSegmentCache', 1)

            request.onerror = () => {
                console.error('❌ [RestAudioUploader] IndexedDB 開啟失敗')
                reject(new Error('IndexedDB 初始化失敗'))
            }

            request.onsuccess = () => {
                console.log('✅ [RestAudioUploader] IndexedDB 初始化成功')
                resolve()
            }

            request.onupgradeneeded = (event) => {
                const db = (event.target as IDBOpenDBRequest).result

                if (!db.objectStoreNames.contains('failedSegments')) {
                    const store = db.createObjectStore('failedSegments', { keyPath: 'id' })
                    store.createIndex('sessionId', 'sessionId', { unique: false })
                    store.createIndex('timestamp', 'timestamp', { unique: false })
                }
            }
        })
    }

    /**
     * 設定 session ID
     */
    setSessionId(sessionId: string): void {
        this.sessionId = sessionId
        console.log('🎯 [RestAudioUploader] Session ID 設定:', sessionId)
    }

    /**
     * 重置序號和上傳狀態
     */
    resetSequence(): void {
        this.uploadQueue.clear()
        this.retryCount.clear()
        console.log('🔄 [RestAudioUploader] 上傳狀態已重置')
    }

    /**
     * 上傳音頻段落
     */
    async uploadSegment(sequence: number, blob: Blob): Promise<UploadSegmentResponse> {
        if (!this.sessionId) {
            throw new Error('Session ID 未設定')
        }

        console.log(`📤 [RestAudioUploader] 準備上傳段落 #${sequence}`, {
            size: blob.size,
            mimeType: blob.type,
            sessionId: this.sessionId
        })

        try {
            const formData = new FormData()
            formData.append('file', blob, `seg${sequence}.webm`)

            const response = await fetch(`${appConfig.apiUrl}/api/segment?sid=${this.sessionId}&seq=${sequence}`, {
                method: 'POST',
                body: formData
            })

            if (!response.ok) {
                if (response.status === 409) {
                    // 409 視為冪等成功
                    console.log(`✅ [RestAudioUploader] 段落 #${sequence} 已存在，視為上傳成功`)
                    const successResponse = { ack: sequence, size: blob.size, status: 'success' as const }
                    
                    // 重置重試計數
                    this.retryCount.delete(sequence)
                    
                    // 觸發成功回調
                    this.onUploadSuccessCallback?.(sequence, successResponse)
                    
                    return successResponse
                }
                throw new Error(`HTTP ${response.status}: ${response.statusText}`)
            }

            const result: UploadSegmentResponse = await response.json()

            console.log(`✅ [RestAudioUploader] 段落 #${sequence} 上傳成功`, result)

            // 重置重試計數
            this.retryCount.delete(sequence)

            // 觸發成功回調
            this.onUploadSuccessCallback?.(sequence, result)

            return result

        } catch (error) {
            const errorMessage = error instanceof Error ? error.message : '上傳失敗'
            console.error(`❌ [RestAudioUploader] 段落 #${sequence} 上傳失敗:`, errorMessage)

            // 處理重試邏輯
            await this.handleUploadFailure(sequence, blob, errorMessage)

            throw new Error(errorMessage)
        }
    }

    /**
     * 處理上傳失敗 - 重試或暫存
     */
    private async handleUploadFailure(sequence: number, blob: Blob, error: string): Promise<void> {
        const currentRetries = this.retryCount.get(sequence) || 0

        if (currentRetries < this.maxRetries) {
            // 嘗試重試
            this.retryCount.set(sequence, currentRetries + 1)
            console.log(`🔄 [RestAudioUploader] 段落 #${sequence} 準備重試 (${currentRetries + 1}/${this.maxRetries})`)

            // 延遲重試（漸進式延遲）
            const delay = Math.pow(2, currentRetries) * 1000 // 1s, 2s, 4s
            setTimeout(() => {
                this.retryUpload(sequence, blob)
            }, delay)

        } else {
            // 達到最大重試次數，暫存到 IndexedDB
            console.warn(`⚠️ [RestAudioUploader] 段落 #${sequence} 達到最大重試次數，暫存到本地`)
            await this.cacheFailedSegment(sequence, blob)

            // 觸發錯誤回調
            this.onUploadErrorCallback?.(sequence, `達到最大重試次數: ${error}`)
        }
    }

    /**
     * 重試上傳
     */
    private async retryUpload(sequence: number, blob: Blob): Promise<void> {
        try {
            await this.uploadSegment(sequence, blob)
        } catch (error) {
            // 重試失敗會再次觸發 handleUploadFailure
            console.log(`⚠️ [RestAudioUploader] 段落 #${sequence} 重試失敗`)
        }
    }

    /**
     * 暫存失敗的段落到 IndexedDB
     */
    private async cacheFailedSegment(sequence: number, blob: Blob): Promise<void> {
        if (!this.sessionId || typeof window === 'undefined' || !window.indexedDB) return

        try {
            const request = indexedDB.open('AudioSegmentCache', 1)

            request.onsuccess = () => {
                const db = request.result
                const transaction = db.transaction(['failedSegments'], 'readwrite')
                const store = transaction.objectStore('failedSegments')

                const failedSegment: FailedSegment = {
                    sessionId: this.sessionId!,
                    sequence,
                    blob,
                    timestamp: Date.now(),
                    retryCount: this.retryCount.get(sequence) || 0
                }

                const addRequest = store.put({
                    id: `${this.sessionId}_${sequence}`,
                    ...failedSegment
                })

                addRequest.onsuccess = () => {
                    console.log(`💾 [RestAudioUploader] 段落 #${sequence} 已暫存到本地`)
                    this.onCacheStoredCallback?.(sequence)
                }

                addRequest.onerror = () => {
                    console.error(`❌ [RestAudioUploader] 段落 #${sequence} 暫存失敗`)
                }
            }

        } catch (error) {
            console.error('❌ [RestAudioUploader] IndexedDB 暫存錯誤:', error)
        }
    }

    /**
     * 重新上傳暫存的失敗段落
     */
    async retryFailedSegments(): Promise<void> {
        if (!this.sessionId || typeof window === 'undefined' || !window.indexedDB) return

        try {
            const request = indexedDB.open('AudioSegmentCache', 1)

            request.onsuccess = () => {
                const db = request.result
                const transaction = db.transaction(['failedSegments'], 'readonly')
                const store = transaction.objectStore('failedSegments')
                const index = store.index('sessionId')
                const getRequest = index.getAll(this.sessionId)

                getRequest.onsuccess = async () => {
                    const failedSegments = getRequest.result

                    if (failedSegments.length === 0) {
                        console.log('✅ [RestAudioUploader] 沒有暫存的失敗段落')
                        return
                    }

                    console.log(`🔄 [RestAudioUploader] 發現 ${failedSegments.length} 個暫存段落，開始重新上傳`)

                    for (const segment of failedSegments) {
                        try {
                            await this.uploadSegment(segment.sequence, segment.blob)

                            // 上傳成功，從 IndexedDB 中移除
                            await this.removeFailedSegment(`${segment.sessionId}_${segment.sequence}`)

                        } catch (error) {
                            console.warn(`⚠️ [RestAudioUploader] 暫存段落 #${segment.sequence} 重新上傳失敗`)
                        }
                    }
                }
            }

        } catch (error) {
            console.error('❌ [RestAudioUploader] 重新上傳暫存段落失敗:', error)
        }
    }

    /**
     * 從 IndexedDB 中移除成功上傳的段落
     */
    private async removeFailedSegment(id: string): Promise<void> {
        if (typeof window === 'undefined' || !window.indexedDB) return

        try {
            const request = indexedDB.open('AudioSegmentCache', 1)

            request.onsuccess = () => {
                const db = request.result
                const transaction = db.transaction(['failedSegments'], 'readwrite')
                const store = transaction.objectStore('failedSegments')

                const deleteRequest = store.delete(id)
                deleteRequest.onsuccess = () => {
                    console.log(`🗑️ [RestAudioUploader] 已移除暫存段落: ${id}`)
                }
            }

        } catch (error) {
            console.error('❌ [RestAudioUploader] 移除暫存段落失敗:', error)
        }
    }

    /**
     * 獲取暫存的失敗段落數量
     */
    async getCachedSegmentsCount(): Promise<number> {
        if (!this.sessionId || typeof window === 'undefined' || !window.indexedDB) return 0

        return new Promise((resolve) => {
            const request = indexedDB.open('AudioSegmentCache', 1)

            request.onsuccess = () => {
                const db = request.result
                const transaction = db.transaction(['failedSegments'], 'readonly')
                const store = transaction.objectStore('failedSegments')
                const index = store.index('sessionId')
                const countRequest = index.count(this.sessionId!)

                countRequest.onsuccess = () => {
                    resolve(countRequest.result)
                }

                countRequest.onerror = () => {
                    resolve(0)
                }
            }

            request.onerror = () => {
                resolve(0)
            }
        })
    }

    /**
     * 清理資源
     */
    cleanup(): void {
        this.sessionId = null
        this.uploadQueue.clear()
        this.retryCount.clear()
        console.log('🧹 [RestAudioUploader] 已清理')
    }

    // 事件回調設定
    onUploadSuccess(callback: (seq: number, response: UploadSegmentResponse) => void): void {
        this.onUploadSuccessCallback = callback
    }

    onUploadError(callback: (seq: number, error: string) => void): void {
        this.onUploadErrorCallback = callback
    }

    onCacheStored(callback: (seq: number) => void): void {
        this.onCacheStoredCallback = callback
    }
}

// 預設實例
export const restAudioUploader = new RestAudioUploader()


# END FILE CONTENTS


# File: app/services/stt/gemini_provider.py

from __future__ import annotations

import base64
import logging
from datetime import datetime
from typing import Dict, Any
from uuid import UUID

import google.generativeai as genai

from app.core.config import get_settings
from app.core.ffmpeg import webm_to_pcm
from .base import ISTTProvider

logger = logging.getLogger(__name__)
settings = get_settings()


class GeminiProvider(ISTTProvider):
    """使用 Vertex AI Gemini 2.5 Pro 的語音轉文字 Provider。"""

    def __init__(self) -> None:
        # 延遲載入，避免未設定 API Key 仍建立物件
        self._model: genai.GenerativeModel | None = None

    # ------------- 介面實作 -------------
    def name(self) -> str:  # type: ignore[override]
        return "gemini"

    def max_rpm(self) -> int:  # type: ignore[override]
        return settings.GEMINI_MAX_REQUESTS if hasattr(settings, "GEMINI_MAX_REQUESTS") else 60

    async def transcribe(self, webm: bytes, session_id: UUID, chunk_seq: int) -> Dict[str, Any]:  # type: ignore[override]
        """將 WebM 轉為 PCM，送至 Gemini 取得結果。"""
        logger.info(f"🎙️ [Gemini] 開始轉錄 chunk {chunk_seq} (session {session_id})")

        # 初始化模型
        if self._model is None:
            try:
                # 使用新版 google-generativeai 需要先全域設定 API Key
                genai.configure(api_key=settings.GEMINI_API_KEY)
                # 建立模型，不再接受 api_key/base_url 參數
                self._model = genai.GenerativeModel("gemini-2.5-pro-preview")
            except Exception as e:
                logger.error(f"[Gemini] 初始化模型失敗: {e}")
                raise

        # 1. 轉檔
        pcm_bytes = await webm_to_pcm(webm)

        # 2. 組 prompt
        prompt = getattr(settings, "GEMINI_PROMPT", "請輸出逐字稿：")

        # 3. 呼叫 API - 使用 inline_data 方式傳遞音訊 (符合新版 google-generativeai SDK)
        try:
            from google.generativeai import types as genai_types  # type: ignore

            parts = [
                {"text": prompt},
                genai_types.Part.from_bytes(data=pcm_bytes, mime_type="audio/wav"),
            ]

            res = await self._model.generate_content_async(contents=parts)

            text = res.text.strip() if hasattr(res, "text") else ""
        except Exception as e:
            logger.error(f"[Gemini] 轉錄失敗: {e}")
            raise

        logger.info(f"✅ [Gemini] chunk {chunk_seq} 轉錄完成，長度 {len(text)} 字")
        return {
            "text": text,
            "chunk_sequence": chunk_seq,
            "session_id": str(session_id),
            "timestamp": datetime.utcnow().isoformat(),
            "start_time": chunk_seq * settings.AUDIO_CHUNK_DURATION_SEC,
            "end_time": (chunk_seq + 1) * settings.AUDIO_CHUNK_DURATION_SEC,
            "provider": self.name(),
        }


# END FILE CONTENTS


# File: docs/export-tdd-tasks.md

# Export 功能 TDD 任務細項

## 目標
- 依據 export-spec.md、export-transcript-format.md、export-wait-until-completed-20240608.md，實作並完善 Export（匯出）功能，確保前後端流程完整、可測試。

## 主要規格依據
- `GET /api/export/{sid}?type=zip`，下載 session 筆記與逐字稿，打包為 zip。
- 需等待 session 狀態為 completed 才能匯出。
- zip 內容：note.md、transcript.txt（格式詳見 export-transcript-format.md）。
- 前端需有等待提示、錯誤提示、匯出按鈕。

## TDD 步驟
1. 先寫測試（前端/後端），覆蓋成功、失敗、異常情境。
2. 補齊最小實作，讓測試通過。
3. 維持結構與行為分離，必要時先 tidy first。
4. 每步驟皆需通過測試再進行下一步。

## 細項任務
- [ ] 前端：將 Export 按鈕功能串接到 ExportButton 元件，並於 finished 狀態顯示。
- [ ] 前端：補齊 useSession hook 的 waitUntilCompleted 行為測試。
- [ ] 前端：補齊 ExportButton 的整合測試，驗證流程與錯誤提示。
- [ ] 後端：補齊 /api/export/{sid} API 單元測試，涵蓋成功、404、409、400 等情境。

---

> 本文件依 TDD 與 tidy first 原則，逐步追蹤 Export 功能開發進度。 


# END FILE CONTENTS


# File: frontend/components/ui/breadcrumb.tsx

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:w-3.5 [&>svg]:h-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}


# END FILE CONTENTS


# File: frontend/utils/time.ts

export const formatTime = (sec: number): string => {
    const minutes = Math.floor(sec / 60)
    const seconds = Math.floor(sec % 60)
    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`
}


# END FILE CONTENTS


# File: frontend/components/ui/input-otp.tsx

"use client"

import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }


# END FILE CONTENTS


# File: frontend/components/ui/dropdown-menu.tsx

"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}


# END FILE CONTENTS


# File: frontend/app/page.tsx

"use client"

import dynamic from "next/dynamic"
import Component from "../study-scriber"

// 添加全局除錯功能
if (typeof window !== 'undefined') {
  // 立即初始化 TranscriptManager，確保在測試環境中可用
  import('../lib/transcript-manager').then(({ transcriptManager }) => {
    // 確保 TranscriptManager 已暴露到 window
    ; (window as any).transcriptManager = transcriptManager
    console.log('✅ TranscriptManager 已初始化並暴露到 window')
  });

  (window as any).debugTranscript = () => {
    const testMessage = {
      type: 'transcript_segment',
      text: '測試逐字稿內容 - 如果看到這個表示前端可以正常處理',
      start_time: 0,
      end_time: 12,
      start_sequence: 0,
      confidence: 0.95
    };

    // 取得當前 session ID
    const appData = (window as any).appData;
    const sessionId = appData?.session?.id || '861f8cee-1f57-476c-8819-0ffe9ec084c8';

    console.log('🔍 測試逐字稿接收，Session ID:', sessionId);

    // 直接觸發 TranscriptManager 的訊息處理
    const manager = (window as any).transcriptManager;
    if (manager) {
      const listeners = manager.listeners.get(sessionId);
      if (listeners && listeners.size > 0) {
        console.log(`📡 找到 ${listeners.size} 個監聽器，開始廣播測試訊息`);
        listeners.forEach((callback: any) => {
          try {
            callback(testMessage);
            console.log('✅ 測試訊息已發送');
          } catch (error) {
            console.error('❌ 發送測試訊息失敗:', error);
          }
        });
      } else {
        console.error('❌ 沒有找到監聽器，請確認 WebSocket 已連接');
      }
    } else {
      console.error('❌ TranscriptManager 未初始化');
    }
  };

  // 新增：診斷函數
  (window as any).debugState = () => {
    const appData = (window as any).appData;
    console.log('🔍 完整應用狀態診斷：');
    console.log('1. AppData:', appData);
    console.log('2. Session:', appData?.session);
    console.log('3. 錄音狀態:', {
      isRecording: appData?.isRecording,
      recordingTime: appData?.recordingTime,
      state: appData?.state
    });
    console.log('4. 逐字稿:', {
      transcriptEntries: appData?.transcriptEntries,
      count: appData?.transcriptEntries?.length || 0
    });

    // 檢查 transcriptManager 的內部狀態
    const manager = (window as any).transcriptManager;
    if (manager) {
      console.log('5. TranscriptManager:');
      console.log('   - 連接數:', manager.getConnectionCount());
      console.log('   - 連接Map:', manager.connections);
      console.log('   - 監聽器Map:', manager.listeners);
    }

    // 檢查為什麼狀態是 default
    console.log('6. 狀態映射條件:');
    console.log('   - hasSession:', !!appData?.session);
    console.log('   - sessionStatus:', appData?.session?.status);
    console.log('   - sessionType:', appData?.session?.type);
    console.log('   - isRecording:', appData?.isRecording);
    console.log('   - transcriptCount:', appData?.transcriptEntries?.length || 0);
  };

  // 新增：監聽逐字稿更新
  (window as any).watchTranscripts = () => {
    const sessionId = '861f8cee-1f57-476c-8819-0ffe9ec084c8';

    // 添加一個測試監聽器
    const testListener = (message: any) => {
      console.log('🎯 [測試監聽器] 收到訊息:', {
        type: message.type,
        text: message.text,
        time: new Date().toISOString()
      });
    };

    const manager = (window as any).transcriptManager;
    if (manager) {
      manager.addListener(sessionId, testListener);
      console.log('✅ 測試監聽器已添加，等待逐字稿訊息...');

      // 返回移除函數
      return () => {
        manager.removeListener(sessionId, testListener);
        console.log('❌ 測試監聽器已移除');
      };
    } else {
      console.error('❌ TranscriptManager 未初始化');
      return () => { };
    }
  };

  // 新增：手動推送逐字稿
  (window as any).pushTranscript = (text: string, startTime: number = 0) => {
    const appData = (window as any).appData;
    if (!appData) {
      console.error('❌ appData 未定義');
      return;
    }

    // 計算時間格式
    const hours = Math.floor(startTime / 3600);
    const minutes = Math.floor((startTime % 3600) / 60);
    const seconds = Math.floor(startTime % 60);
    const timeStr = `${hours.toString().padStart(2, "0")}:${minutes.toString().padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`;

    // 創建新的逐字稿項目
    const newEntry = {
      time: timeStr,
      text: text
    };

    // 更新 appData
    const currentEntries = appData.transcriptEntries || [];
    const newEntries = [...currentEntries, newEntry];

    // 手動觸發狀態更新
    console.log('📝 手動推送逐字稿:', newEntry);
    console.log('📊 更新前:', currentEntries.length, '條');
    console.log('📊 更新後:', newEntries.length, '條');

    // 更新狀態
    appData.transcriptEntries = newEntries;

    // 如果狀態還是 recording_waiting，改為 recording_active
    if (appData.state === 'recording_waiting' && newEntries.length > 0) {
      appData.state = 'recording_active';
      console.log('✅ 狀態更新: recording_waiting → recording_active');
    }

    // 強制重新渲染
    window.location.reload();
  };

  // 新增：診斷 WebSocket 和狀態
  (window as any).diagnose = () => {
    console.log('🔍 ========== 診斷開始 ==========');

    // 1. 檢查 appData 狀態
    const appData = (window as any).appData;
    console.log('📊 [1] appData 狀態:', {
      state: appData?.state,
      isRecording: appData?.isRecording,
      transcriptEntries: appData?.transcriptEntries?.length || 0,
      session: appData?.session ? {
        id: appData.session.id,
        status: appData.session.status,
        type: appData.session.type
      } : undefined
    });

    // 2. 檢查 recording hook 狀態
    const recordingHook = (window as any).recordingHook;
    if (recordingHook) {
      console.log('🎤 [2] recording hook 狀態:', {
        isRecording: recordingHook.isRecording,
        transcriptsCount: recordingHook.transcripts?.length || 0,
        transcripts: recordingHook.transcripts
      });
    } else {
      console.error('❌ [2] recording hook 未找到');
    }

    // 2.5 檢查 session hook 狀態
    const sessionHook = (window as any).sessionHook;
    if (sessionHook) {
      console.log('🔐 [2.5] session hook 狀態:', {
        currentSession: sessionHook.currentSession,
        isLoading: sessionHook.isLoading,
        error: sessionHook.error
      });
    } else {
      console.error('❌ [2.5] session hook 未找到');
    }

    // 3. 檢查 TranscriptManager 狀態
    const manager = (window as any).transcriptManager;
    const sessionId = appData?.session?.id || sessionHook?.currentSession?.id;

    if (manager && sessionId) {
      console.log('💬 [3] TranscriptManager 狀態:', {
        isConnected: manager.isConnected(sessionId),
        listeners: manager.listeners.size,
        websocket: manager.websocket ? '存在' : '不存在',
        sessionId: sessionId
      });
    } else {
      console.error('❌ [3] session ID 未定義 或 TranscriptManager 未找到', {
        manager: !!manager,
        sessionId: sessionId
      });
    }

    // 4. 檢查 WebSocket 詳情
    if (manager && sessionId) {
      const connections = manager.connections;
      const ws = connections.get(sessionId);
      if (ws) {
        console.log('🔌 [4] WebSocket 詳情:', {
          readyState: ws.readyState,
          readyStateText: ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'][ws.readyState],
          url: ws.url || ws.wsUrl,
          isConnected: ws.isConnected,
          bufferedAmount: ws.bufferedAmount || 'N/A',
          protocol: ws.protocol || 'N/A'
        });
      } else {
        console.error('❌ [4] WebSocket 連接未找到 for session:', sessionId);
      }
    } else {
      console.error('❌ [4] TranscriptManager 或 sessionId 未定義');
    }

    // 5. 檢查 localStorage
    console.log('💾 [5] localStorage 內容:', {
      draft_note: localStorage.getItem('draft_note')?.substring(0, 100) + '...',
      hasOtherSessionKeys: Object.keys(localStorage).filter(k => k.includes('session')).length > 0
    });

    // 6. 手動建立 WebSocket 連接測試
    console.log('🧪 [6] 測試 WebSocket 連接...');
    const testSessionId = sessionId || '23f6bbfe-a846-44db-ba1b-2751adafe0bc'; // 使用後端日誌中的 session ID
    const wsUrl = `ws://localhost:8000/ws/transcript_feed/${testSessionId}`;
    console.log('🧪 測試 URL:', wsUrl);

    // 7. 檢查 appData 中所有可用的屬性
    console.log('🔍 [7] appData 完整內容:', appData);

    console.log('🔍 ========== 診斷結束 ==========');
  };

  // 新增：強制同步狀態
  (window as any).syncStates = () => {
    console.log('🔄 強制同步所有狀態...');

    const recordingHook = (window as any).recordingHook;
    const sessionHook = (window as any).sessionHook;
    const appData = (window as any).appData;

    if (recordingHook && sessionHook && appData) {
      console.log('🔄 [同步前] 狀態對比:', {
        'appData.isRecording': appData.isRecording,
        'recording.isRecording': recordingHook.isRecording,
        'appData.state': appData.state,
        'session.status': sessionHook.currentSession?.status,
        'session.type': sessionHook.currentSession?.type,
        'recording.transcripts.length': recordingHook.transcripts?.length || 0,
        'appData.transcriptEntries.length': appData.transcriptEntries?.length || 0
      });

      // 強制觸發狀態重新計算
      const forceUpdate = () => {
        // 觸發一個微小的狀態變化來強制重新渲染
        const currentTime = appData.recordingTime || 0;
        appData.recordingTime = currentTime + 0.001;

        setTimeout(() => {
          appData.recordingTime = currentTime;
          console.log('✅ 強制同步完成');
        }, 50);
      };

      forceUpdate();
    } else {
      console.error('❌ 無法找到必要的 hooks');
    }
  };

  // 新增：修復狀態不一致
  (window as any).fixStates = () => {
    console.log('🔧 手動修復狀態不一致...');

    const recordingHook = (window as any).recordingHook;
    const appData = (window as any).appData;

    if (recordingHook && appData) {
      console.log('🔧 [修復前] 狀態:', {
        'appData.isRecording': appData.isRecording,
        'recording.isRecording': recordingHook.isRecording,
        'appData.state': appData.state
      });

      // 強制修復 isRecording 狀態
      if (appData.isRecording !== recordingHook.isRecording) {
        console.log('🔧 修復 isRecording 狀態不一致');
        appData.isRecording = recordingHook.isRecording;

        // 如果錄音已停止但狀態還是 recording_waiting，改為 default
        if (!recordingHook.isRecording && appData.state === 'recording_waiting') {
          console.log('🔧 修復狀態: recording_waiting → default');
          appData.state = 'default';
        }

        // 觸發重新渲染
        window.location.reload();
      } else {
        console.log('✅ 狀態已一致，無需修復');
      }
    } else {
      console.error('❌ 無法找到必要的 hooks');
    }
  };

  // 新增：強制 React 重新渲染
  (window as any).forceUpdate = () => {
    console.log('🔄 強制 React 重新渲染...');

    // 方法 1：創建一個微小的狀態變化來觸發重新渲染
    const appData = (window as any).appData;
    if (appData) {
      const originalRecordingTime = appData.recordingTime;
      appData.recordingTime = originalRecordingTime + 0.1;

      setTimeout(() => {
        appData.recordingTime = originalRecordingTime;
        console.log('✅ 強制更新完成');
      }, 100);
    }

    // 方法 2：如果上面不工作，重新載入頁面
    console.log('如果UI還是沒有更新，將在3秒後重新載入頁面...');
    setTimeout(() => {
      if (confirm('UI 沒有更新，是否重新載入頁面？')) {
        window.location.reload();
      }
    }, 3000);
  };
}

export default function Page() {
  return <Component />
}


# END FILE CONTENTS


# File: .cursor/rules/backend.mdc

---
description:
globs:
alwaysApply: false
---
## Development Notes

- Dependency-Injection everywhere (container + FastAPI `Depends`)
- Strict TDD workflow: **Red → Green → Refactor** for every ticket
- Clean, layered architecture (API / Services / Domain / Infra / Core)
- Async-first, non-blocking I/O only (`httpx`, `aioboto3`, SQLAlchemy 2.0 async)
- Structured JSON logging with `structlog`
- Environment-based, typed configuration (`pydantic-settings`, Pydantic v2)
- OpenTelemetry tracing + Prometheus metrics
- Graceful startup/shutdown with FastAPI lifespan
- Health, metrics & readiness endpoints for orchestration
- Blue-green/containerised deployment (uvicorn + uvloop)

---

- Async context managers for resources

```python
# Good
async with aiofiles.open(file_path, "rb") as f:
    content = await f.read()

# Bad
f = await aiofiles.open(file_path, "rb")
content = await f.read()
f.close()
```

- Always use structured logging (never `print`)

```python
# Good
logger.info(
    "processing_chunk",
    extra={"chunk_id": chunk_id, "size": len(data)}
)
```

---

## Error-Handling Patterns

```python
# Good
try:
    result = await some_operation()
except ValidationError as e:
    raise HTTPException(status_code=422, detail=e.errors())
except ResourceNotFound as e:
    raise HTTPException(status_code=404, detail=str(e))
except Exception as e:
    logger.error("unexpected_error", exc_info=True)
    raise HTTPException(status_code=500, detail="Internal server error")
```

## WebSocket Patterns

```python
class ConnectionManager:
    def __init__(self):
        self.active: dict[str, WebSocket] = {}

    async def connect(self, ws: WebSocket, client_id: str):
        await ws.accept()
        self.active[client_id] = ws
        logger.info("ws_connected", client_id=client_id)

    async def disconnect(self, client_id: str):
        if client_id in self.active:
            del self.active[client_id]
            logger.info("ws_disconnected", client_id=client_id)

    async def broadcast(self, msg: str, client_id: str):
        if ws := self.active.get(client_id):
            try:
                await ws.send_text(msg)
            except WebSocketDisconnect:
                await self.disconnect(client_id)
```

---

## Database Patterns

```python
async def get_db():
    async with AsyncSession(engine) as session, session.begin():
        yield session
```

---

# Tests

- pytest + pytest-asyncio
- tests/ mirrors source tree
- Fixtures for common data/deps
- Mock external services (OpenAI, R2, Supabase)
- Test success & failure paths
- Coverage ≥ 90%

```python
@pytest.mark.asyncio
async def test_process_audio_chunk_success(azure_client_mock, supabase_mock):
    svc = AudioTranscriptionService(azure_client_mock, "deployment")
    ok = await svc.process_audio_chunk(uuid4(), 0, b"webm")
    assert ok is True
    azure_client_mock.audio.transcriptions.create.assert_called_once()
```

---

# Performance Considerations

- DB connection pooling
- Async cache (aioredis TTL)
- Background tasks for heavy CPU work
- Stream files with StreamingResponse
- Proper DB indexes
- PerformanceTimer wrapper for critical paths

---

# Security

- No secrets in code (use env or secret manager)
- Validate all inputs with Pydantic
- CORS allow list, never "*" in prod
- Rate-limit APIs (SlowAPI / gateway)
- Sanitize file uploads
- Secure WebSockets (wss) in production

---

# Logging Levels

- **DEBUG** detailed diagnostics
- **INFO** high-level flow
- **WARNING** unusual situations
- **ERROR** request failed, with stack
- **CRITICAL** service unusable

---

# Deployment
- uvicorn[standard] with `--loop uvloop --http httptools`
- Workers = (2 × CPU) + 1
- Env-specific `.env.*` files
- /healthz & /metrics endpoints
- Graceful shutdown hooks
- Memory monitoring & cleanup tasks


# END FILE CONTENTS


# File: frontend/lib/services/base-service.ts

"use client"

/**
 * BaseService - 服務層基礎抽象類
 *
 * 提供統一的服務基礎設施：
 * - 統一日誌介面
 * - 生命週期管理 (initialize/cleanup)
 * - 錯誤處理模式
 * - 服務狀態管理
 */
export abstract class BaseService {
    /**
     * 日誌工具 - 重用現有的 console 模式
     */
    protected readonly logger = console

    /**
     * 服務名稱，用於日誌和調試
     */
    protected abstract readonly serviceName: string

    /**
     * 服務初始化狀態
     */
    private _isInitialized = false

    /**
     * 服務是否正在運行
     */
    private _isRunning = false

    /**
     * 初始化服務
     * 子類必須實現具體的初始化邏輯
     */
    abstract initialize(): Promise<void>

    /**
     * 清理服務資源
     * 子類必須實現具體的清理邏輯
     */
    abstract cleanup(): Promise<void>

    /**
     * 啟動服務
     * 統一的啟動流程：檢查狀態 → 初始化 → 標記為運行中
     */
    async start(): Promise<void> {
        if (this._isRunning) {
            this.logger.warn(`🔄 [${this.serviceName}] 服務已在運行中，跳過啟動`)
            return
        }

        try {
            this.logger.log(`🚀 [${this.serviceName}] 開始啟動服務...`)

            if (!this._isInitialized) {
                await this.initialize()
                this._isInitialized = true
                this.logger.log(`✅ [${this.serviceName}] 服務初始化完成`)
            }

            this._isRunning = true
            this.logger.log(`✅ [${this.serviceName}] 服務啟動成功`)
        } catch (error) {
            this.logger.error(`❌ [${this.serviceName}] 服務啟動失敗:`, error)
            throw error
        }
    }

    /**
     * 停止服務
     * 統一的停止流程：檢查狀態 → 清理資源 → 標記為停止
     */
    async stop(): Promise<void> {
        if (!this._isRunning) {
            this.logger.warn(`🔄 [${this.serviceName}] 服務未在運行中，跳過停止`)
            return
        }

        try {
            this.logger.log(`🛑 [${this.serviceName}] 開始停止服務...`)

            await this.cleanup()
            this._isRunning = false

            this.logger.log(`✅ [${this.serviceName}] 服務停止完成`)
        } catch (error) {
            this.logger.error(`❌ [${this.serviceName}] 服務停止失敗:`, error)
            throw error
        }
    }

    /**
     * 重啟服務
     * 先停止，再啟動
     */
    async restart(): Promise<void> {
        this.logger.log(`🔄 [${this.serviceName}] 開始重啟服務...`)
        await this.stop()
        await this.start()
        this.logger.log(`✅ [${this.serviceName}] 服務重啟完成`)
    }

    /**
     * 檢查服務是否已初始化
     */
    get isInitialized(): boolean {
        return this._isInitialized
    }

    /**
     * 檢查服務是否正在運行
     */
    get isRunning(): boolean {
        return this._isRunning
    }

    /**
     * 獲取服務狀態摘要
     */
    getStatus(): ServiceStatus {
        return {
            serviceName: this.serviceName,
            isInitialized: this._isInitialized,
            isRunning: this._isRunning,
            timestamp: new Date().toISOString()
        }
    }

    /**
     * 統一錯誤處理
     * 提供一致的錯誤日誌格式和錯誤包裝
     */
    protected handleError(operation: string, error: unknown): never {
        const errorMessage = error instanceof Error ? error.message : '未知錯誤'
        const fullMessage = `${this.serviceName} ${operation} 失敗: ${errorMessage}`

        this.logger.error(`❌ [${this.serviceName}] ${operation} 失敗:`, error)

        throw new ServiceError(fullMessage, {
            serviceName: this.serviceName,
            operation,
            originalError: error,
            timestamp: new Date().toISOString()
        })
    }

    /**
     * 統一成功日誌
     */
    protected logSuccess(operation: string, details?: any): void {
        this.logger.log(`✅ [${this.serviceName}] ${operation} 成功`, details ? details : '')
    }

    /**
     * 統一資訊日誌
     */
    protected logInfo(message: string, details?: any): void {
        this.logger.log(`ℹ️ [${this.serviceName}] ${message}`, details ? details : '')
    }

    /**
     * 統一警告日誌
     */
    protected logWarning(message: string, details?: any): void {
        this.logger.warn(`⚠️ [${this.serviceName}] ${message}`, details ? details : '')
    }
}

/**
 * 服務狀態介面
 */
export interface ServiceStatus {
    serviceName: string
    isInitialized: boolean
    isRunning: boolean
    timestamp: string
}

/**
 * 服務錯誤類別
 * 提供結構化的錯誤訊息和上下文
 */
export class ServiceError extends Error {
    readonly serviceName: string
    readonly operation: string
    readonly originalError: unknown
    readonly timestamp: string

    constructor(message: string, context: {
        serviceName: string
        operation: string
        originalError: unknown
        timestamp: string
    }) {
        super(message)
        this.name = 'ServiceError'
        this.serviceName = context.serviceName
        this.operation = context.operation
        this.originalError = context.originalError
        this.timestamp = context.timestamp
    }
}


# END FILE CONTENTS


# File: docs/stop-processing-finish-flow.md

# Stop → Processing → Finished 狀態流規格

## 1. 錄音流程狀態流
- 使用者按下 Stop 停止錄音後，AppState 進入 `processing` 狀態，顯示 ProcessingOverlay，WebSocket 連線保持。
- 後端會將尚未完成的音訊切片全部處理完畢，逐一推送 transcript_segment。
- 最後一個切片處理完畢後，後端廣播 `{type: "transcript_complete"}`。
- 前端收到 `transcript_complete`：
  - AppState 轉為 `finished`
  - 斷開 WS 連線
  - 關閉 ProcessingOverlay

## 2. WebSocket 保持原則
- 停止錄音後，前端不立即斷開 transcript WebSocket，必須等收到 `transcript_complete` 才斷線。
- 這樣可確保所有逐字稿片段都能完整收到。

## 3. transcript_complete 處理
- 前端 handleTranscriptMessage 需新增 `transcript_complete` 分支：
  - 轉換狀態為 finished
  - 斷開 WS
  - 標記流程結束

## 4. ProcessingOverlay 顯示規則
- 只在 AppState = `processing` 時顯示。
- Stop → processing → (收到 complete) → finished，Overlay 自動消失。

## 5. 相關環境變數 fallback
- `labelIntervalSec` 需正確 fallback，避免 undefined。

## 6. 後端行為
- 所有 STT provider（whisper/gpt4o/gemini）都需在最後一片段後廣播 `transcript_complete`。
- 已確認 save_and_push_result() 會廣播此訊息。

---

## 測試重點
- Stop 後進入 processing，收到 transcript_complete 進入 finished
- Overlay 只在 processing 顯示
- provider 路徑皆會廣播 transcript_complete 


# END FILE CONTENTS


# File: frontend/e2e/offline-recovery.spec.ts

import { test, expect } from '@playwright/test'

test('offline 30s then online resumes', async ({ page }) => {
    await page.goto('/')
    await page.evaluate(() => window.dispatchEvent(new Event('offline')))
    await page.waitForTimeout(30_000)        // 錄音 & 斷網
    await page.evaluate(() => window.dispatchEvent(new Event('online')))

    await expect(page.getByText('暫存段落已全部上傳完成')).toBeVisible()
})


# END FILE CONTENTS


# File: .cursor/rules/ui-rules/create-prototype.mdc

---
description:
globs:
alwaysApply: false
---
# Prototype Creation Rule (for Cursor)

Trigger phrases (case-insensitive)
• “create a new prototype”
• “make a new prototype”
• “create prototype”
• “make prototype”
• any similar wording

---

## Workflow

1. **Ask for a name (if missing)**
   If the request does **not** include a prototype name, prompt:
   > “What should the prototype be called?”

2. **Copy the template**
   Duplicate `app/prototypes/_template` → `app/prototypes/<prototype-name>`.

3. **Create / modify core files** inside the new folder:
   • `page.tsx`
   • `styles.module.css`
   • any additional components or utilities required

4. **Install dependencies** (only if new packages are needed)
   ```bash
   pnpm add <package>
   # or: npm i <package> / yarn add <package>
5.	Register on the homepage
In ⁠app/page.tsx (or wherever the prototypes array lives), append:
{
  path: "/prototypes/<prototype-name>",
  label: "<Prototype Name>"
}
6.	Manual test
• Start the dev server
• Confirm the homepage link works
• Confirm the prototype page renders with no TypeScript / ESLint errors

---

All steps must succeed without errors before the task is considered complete.


# END FILE CONTENTS


# File: app/core/ffmpeg.py

"""
FFmpeg 音訊轉換服務 (REST API 簡化架構)

實作 WebM 到 16kHz mono PCM 的轉換，專門處理完整 10s 檔案
"""

import asyncio
import subprocess
import shlex
import logging
from typing import Optional
from dataclasses import dataclass

logger = logging.getLogger(__name__)

# FFmpeg 命令：WebM 輸入 → 16kHz 單聲道 PCM 輸出
FFMPEG_CMD = "ffmpeg -i pipe:0 -ac 1 -ar 16000 -f s16le pipe:1 -loglevel error"


@dataclass
class WebMHeaderInfo:
    """WebM 檔頭信息數據類"""
    is_complete: bool = False
    has_ebml_header: bool = False
    has_segment: bool = False
    header_size: int = 0
    codec_type: str = "unknown"
    track_count: int = 0
    error_message: Optional[str] = None


def detect_webm_header_info(data: bytes) -> WebMHeaderInfo:
    """
    檢測 WebM 檔頭信息

    Args:
        data: WebM 音頻二進制數據

    Returns:
        WebMHeaderInfo: 檔頭信息
    """
    info = WebMHeaderInfo()

    if not data or len(data) < 16:
        info.error_message = "數據長度不足"
        return info

    try:
        # 檢查 EBML 標頭 (0x1A45DFA3)
        if data[:4] == b'\x1A\x45\xDF\xA3':
            info.has_ebml_header = True

            # 簡單檢測 Segment 元素 (0x18538067)
            if b'\x18\x53\x80\x67' in data[:1024]:
                info.has_segment = True

                # 估算檔頭大小（簡化版本）
                cluster_pos = data.find(b'\x1F\x43\xB6\x75')  # Cluster 標記
                if cluster_pos > 0:
                    info.header_size = cluster_pos
                else:
                    info.header_size = min(len(data), 512)  # 預設估算

                info.is_complete = True
                info.codec_type = "opus" if b'Opus' in data[:1024] else "vorbis"
                info.track_count = 1  # 簡化假設只有一個音軌
            else:
                info.error_message = "缺少 Segment 元素"
        else:
            info.error_message = "缺少 EBML 檔頭"

    except Exception as e:
        info.error_message = f"檢測異常: {str(e)}"

    return info


def is_webm_header_complete(data: bytes) -> bool:
    """
    檢查 WebM 檔頭是否完整

    Args:
        data: WebM 音頻二進制數據

    Returns:
        bool: 如果檔頭完整則返回 True
    """
    if not data or len(data) < 16:
        return False

    # 檢查 EBML 檔頭
    if data[:4] != b'\x1A\x45\xDF\xA3':
        return False

    # 檢查是否包含 Segment 元素
    return b'\x18\x53\x80\x67' in data[:1024]


def detect_audio_format(audio_data: bytes) -> str:
    """
    檢測音頻格式

    Args:
        audio_data: 音頻二進制數據

    Returns:
        str: 檢測到的音頻格式 ('webm', 'mp4', 'ogg', 'wav', 'unknown')
    """
    if not audio_data or len(audio_data) < 16:
        return 'unknown'

    # 檢查檔案頭簽名
    header = audio_data[:16]

    # WebM 格式 (EBML header)
    if header.startswith(b'\x1A\x45\xDF\xA3'):
        return 'webm'

    # MP4 格式 (ftypMSNV for fragmented MP4, ftyp for regular MP4)
    if b'ftyp' in header[:8] or header[4:8] == b'ftyp':
        return 'mp4'

    # OGG 格式
    if header.startswith(b'OggS'):
        return 'ogg'

    # WAV 格式 (RIFF header)
    if header.startswith(b'RIFF') and header[8:12] == b'WAVE':
        return 'wav'

    # 檢查更大範圍內的 MP4 格式標識
    search_range = min(len(audio_data), 64)
    for i in range(search_range - 4):
        if audio_data[i:i+4] == b'ftyp':
            return 'mp4'

    logger.debug(f"Unknown audio format, header: {header.hex()}")
    return 'unknown'


def check_ffmpeg_health() -> dict:
    """
    檢查 FFmpeg 健康狀態

    Returns:
        dict: 包含 FFmpeg 狀態信息的字典
    """
    try:
        # 檢查 FFmpeg 是否可用
        result = subprocess.run(['ffmpeg', '-version'],
                              capture_output=True, text=True, timeout=5)

        if result.returncode == 0:
            # 解析版本信息
            version_line = result.stdout.split('\n')[0]
            version = version_line.split(' ')[2] if len(version_line.split(' ')) > 2 else 'unknown'

            return {
                'ffmpeg_available': True,
                'status': 'healthy',
                'version': version,
                'active_processes': 0,  # 簡化版本，不追踪活躍進程
                'pooled_processes': 0,
                'max_processes': 3
            }
        else:
            return {
                'ffmpeg_available': False,
                'status': 'error',
                'error': 'FFmpeg command failed'
            }

    except FileNotFoundError:
        return {
            'ffmpeg_available': False,
            'status': 'not_found',
            'error': 'FFmpeg not installed'
        }
    except subprocess.TimeoutExpired:
        return {
            'ffmpeg_available': False,
            'status': 'timeout',
            'error': 'FFmpeg version check timeout'
        }
    except Exception as e:
        return {
            'ffmpeg_available': False,
            'status': 'error',
            'error': str(e)
        }


async def webm_to_pcm(webm: bytes) -> bytes:
    """
    將 WebM 音訊轉換為 PCM 格式

    轉換參數：
    - 輸入：WebM 格式音訊資料
    - 輸出：16kHz 單聲道 signed 16-bit little-endian PCM
    - 適用於 Azure OpenAI Whisper API

    Args:
        webm: WebM 格式的音訊二進制資料

    Returns:
        bytes: PCM 格式的音訊二進制資料

    Raises:
        RuntimeError: FFmpeg 轉換失敗時拋出
    """
    try:
        logger.debug(f"🎵 [FFmpeg] 開始轉換 WebM → PCM (size: {len(webm)} bytes)")

        # 建立 FFmpeg 子程序
        proc = await asyncio.create_subprocess_exec(
            *shlex.split(FFMPEG_CMD),
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )

        # 執行轉換
        stdout, stderr = await proc.communicate(webm)

        # 檢查轉換結果
        if proc.returncode != 0:
            error_msg = stderr.decode('utf-8') if stderr else "Unknown FFmpeg error"
            logger.error(f"❌ [FFmpeg] 轉換失敗 (返回碼: {proc.returncode}): {error_msg}")
            raise RuntimeError(f"FFmpeg convert failed: {error_msg}")

        if not stdout:
            logger.error("❌ [FFmpeg] 轉換結果為空")
            raise RuntimeError("FFmpeg convert produced no output")

        logger.info(f"✅ [FFmpeg] WebM → PCM 轉換成功 ({len(webm)} → {len(stdout)} bytes)")
        return stdout

    except asyncio.TimeoutError:
        logger.error("❌ [FFmpeg] 轉換超時")
        raise RuntimeError("FFmpeg convert timeout")
    except FileNotFoundError:
        logger.error("❌ [FFmpeg] FFmpeg 程序未找到，請確認已安裝 FFmpeg")
        raise RuntimeError("FFmpeg not found. Please install FFmpeg.")
    except Exception as e:
        logger.error(f"❌ [FFmpeg] 轉換異常: {str(e)}")
        raise RuntimeError(f"FFmpeg convert error: {str(e)}")


async def webm_to_wav(webm: bytes) -> Optional[bytes]:
    """
    將 WebM 音訊轉換為 16kHz mono 16-bit RIFF-WAV 格式

    Args:
        webm: WebM 格式的音訊二進制資料

    Returns:
        Optional[bytes]: WAV 格式的音訊二進制資料，失敗時回傳 None
    """
    ffmpeg_cmd = "ffmpeg -f webm -i pipe:0 -ac 1 -ar 16000 -f wav -y pipe:1 -loglevel error"
    try:
        logger.debug(f"🎵 [FFmpeg] 開始轉換 WebM → WAV (size: {len(webm)} bytes)")
        proc = await asyncio.create_subprocess_exec(
            *shlex.split(ffmpeg_cmd),
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        stdout, stderr = await proc.communicate(webm)
        if proc.returncode != 0:
            error_msg = stderr.decode('utf-8') if stderr else "Unknown FFmpeg error"
            logger.error(f"❌ [FFmpeg] WebM → WAV 轉換失敗 (返回碼: {proc.returncode}): {error_msg}")
            return None
        if not stdout:
            logger.error("❌ [FFmpeg] WebM → WAV 轉換結果為空")
            return None
        logger.info(f"✅ [FFmpeg] WebM → WAV 轉換成功 ({len(webm)} → {len(stdout)} bytes)")
        return stdout
    except asyncio.TimeoutError:
        logger.error("❌ [FFmpeg] WebM → WAV 轉換超時")
        return None
    except FileNotFoundError:
        logger.error("❌ [FFmpeg] FFmpeg 程序未找到，請確認已安裝 FFmpeg")
        return None
    except Exception as e:
        logger.error(f"❌ [FFmpeg] WebM → WAV 轉換異常: {str(e)}")
        return None


async def validate_webm_audio(webm: bytes) -> bool:
    """
    驗證 WebM 音訊檔案是否有效

    使用 FFmpeg 來檢查音訊檔案的完整性和格式

    Args:
        webm: WebM 格式的音訊二進制資料

    Returns:
        bool: 如果音訊檔案有效則返回 True
    """
    try:
        # 使用 FFmpeg 驗證模式（不產生輸出，只檢查格式）
        validate_cmd = "ffmpeg -v error -i pipe:0 -f null -"

        proc = await asyncio.create_subprocess_exec(
            *shlex.split(validate_cmd),
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )

        stdout, stderr = await proc.communicate(webm)

        if proc.returncode == 0:
            logger.debug("✅ [FFmpeg] WebM 音訊檔案驗證通過")
            return True
        else:
            error_msg = stderr.decode('utf-8') if stderr else "Unknown validation error"
            logger.warning(f"⚠️ [FFmpeg] WebM 音訊檔案驗證失敗: {error_msg}")
            return False

    except Exception as e:
        logger.warning(f"⚠️ [FFmpeg] 音訊檔案驗證異常: {str(e)}")
        return False


async def get_audio_info(webm: bytes) -> Optional[dict]:
    """
    獲取音訊檔案資訊

    Args:
        webm: WebM 格式的音訊二進制資料

    Returns:
        dict: 包含音訊資訊的字典，如果失敗則返回 None
    """
    try:
        # 使用 ffprobe 獲取音訊資訊
        probe_cmd = "ffprobe -v quiet -print_format json -show_format -show_streams pipe:0"

        proc = await asyncio.create_subprocess_exec(
            *shlex.split(probe_cmd),
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )

        stdout, stderr = await proc.communicate(webm)

        if proc.returncode == 0 and stdout:
            import json
            info = json.loads(stdout.decode('utf-8'))
            logger.debug(f"📊 [FFprobe] 音訊資訊: {info}")
            return info
        else:
            logger.warning("⚠️ [FFprobe] 無法獲取音訊資訊")
            return None

    except Exception as e:
        logger.warning(f"⚠️ [FFprobe] 獲取音訊資訊異常: {str(e)}")
        return None


# END FILE CONTENTS


# File: frontend/components/ui/scroll-area.tsx

"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }


# END FILE CONTENTS


# File: docs/webm-to-wav-gpt4o.md

# WebM → WAV + GPT4oProvider 上傳規格

## 目標
- 將 16-bit mono 16kHz WebM 音訊轉檔為 RIFF-WAV
- 由 GPT4oProvider 上傳 wav bytes 給 OpenAI API（gpt-4o-transcribe）
- 支援 R2 快取

## 轉檔流程
1. 呼叫 `webm_to_wav(webm: bytes) -> bytes`：
   - 使用 ffmpeg 轉 webm → 16-bit mono 16kHz RIFF-WAV
   - 失敗時回傳 None
2. GPT4oProvider:
   - 先檢查格式，僅支援 webm/wav
   - 呼叫 webm_to_wav 取得 wav bytes
   - 失敗時 log error 並 return None
   - 成功時可選擇性快取到 R2（put_object, content_type='audio/wav'）
   - 上傳格式：
     ```python
     file_tuple = ("audio.wav", BytesIO(wav_bytes), "audio/wav")
     response = await client.audio.transcriptions.create(
         model=model_name,
         file=file_tuple,
         language="zh-TW",
         response_format="json",
     )
     ```
   - 回傳 response['text']

## 測試重點
- webm_to_wav 會正確產生 RIFF header、16kHz、mono、16-bit
- 失敗時回傳 None
- GPT4oProvider 會呼叫 webm_to_wav，並正確傳送 (filename, BytesIO, mime)
- R2 cache 行為正確
- 失敗時 log error 並 return None

## 實作現況
- `webm_to_wav(webm: bytes) -> Optional[bytes]` 已實作於 `app/core/ffmpeg.py`
- 失敗時回傳 None 並 log error
- 單元測試已覆蓋成功與失敗情境，測試檔案：`tests/unit/test_ffmpeg.py`，class: `TestWebMToWav`

## 轉錄欄位完整性規格（2024-06）

### 1. gpt4o_provider.py transcribe() 回傳格式
- 必須回傳 dict，且欄位齊全：
  - text
  - chunk_sequence
  - timestamp
  - language
  - start_offset
  - end_offset

### 2. SimpleAudioTranscriptionService._save_and_push_result 欄位檢查
- 必要欄位：{"text","chunk_sequence","timestamp","start_offset","end_offset"}
- 若缺欄位：log error 並 return，不寫入 DB、不推送 WebSocket
- 測試覆蓋：pytest 驗證缺欄位時只 log error，不拋例外

## 相關檔案
- app/core/ffmpeg.py
- app/services/stt/gpt4o_provider.py
- tests/unit/test_ffmpeg.py
- tests/test_stt_providers.py 


# END FILE CONTENTS


# File: frontend/lib/api.test.ts

import { describe, it, expect, vi } from 'vitest'

// 模擬 axios 完整配置
vi.mock('axios', () => ({
    default: {
        create: vi.fn(() => ({
            post: vi.fn().mockResolvedValue({ data: {} }),
            get: vi.fn().mockResolvedValue({ data: {} }),
            patch: vi.fn().mockResolvedValue({ data: {} }),
            put: vi.fn().mockResolvedValue({ data: {} }),
            interceptors: {
                request: {
                    use: vi.fn(),
                },
                response: {
                    use: vi.fn(),
                },
            },
        })),
        isAxiosError: vi.fn(),
    },
}))

describe('API Configuration', () => {
    it('should use environment variables for API_BASE_URL', () => {
        // 測試環境變數配置
        const expectedURL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000'
        expect(expectedURL).toBe('http://localhost:8000')
    })

    it('should construct WebSocket URL correctly', async () => {
        // 動態 import 以避免模組載入時的錯誤
        const { getWebSocketURL } = await import('./api')

        const wsURL = getWebSocketURL('/test/path')
        const expectedURL = (process.env.NEXT_PUBLIC_WS_URL || 'ws://localhost:8000') + '/test/path'
        expect(wsURL).toBe(expectedURL)
    })
})

describe('API Methods', () => {
    it('should have all required sessionAPI methods', async () => {
        const { sessionAPI } = await import('./api')

        expect(typeof sessionAPI.createSession).toBe('function')
        expect(typeof sessionAPI.getActiveSession).toBe('function')
        expect(typeof sessionAPI.finishSession).toBe('function')
        expect(typeof sessionAPI.upgradeToRecording).toBe('function')
    })

    it('should have all required notesAPI methods', async () => {
        const { notesAPI } = await import('./api')

        expect(typeof notesAPI.updateNote).toBe('function')
        expect(typeof notesAPI.getNote).toBe('function')
    })
})


# END FILE CONTENTS


# File: frontend/next.config.mjs

/** @type {import('next').NextConfig} */
const nextConfig = {
  eslint: {
    ignoreDuringBuilds: true,
  },
  typescript: {
    ignoreBuildErrors: true,
  },
  images: {
    unoptimized: true,
  },
}

export default nextConfig

# END FILE CONTENTS


# File: frontend/hooks/use-app-state.ts

"use client"

import { useState, useCallback, useEffect, useRef } from "react"
import type { AppData, AppState, SessionStatus, SessionType } from "../types/app-state"
import { useSession } from "./use-session"
import { useRecording } from "./use-recording"
import { useNotes } from "./use-notes"
import { useTranscript } from "./use-transcript"
import { TranscriptMessage } from "../lib/websocket"
import { useToast } from "@/components/ui/use-toast"

// 前後端狀態映射規則
const mapBackendToFrontendState = (
  status: SessionStatus,
  type: SessionType,
  isRecording: boolean,
  transcriptsPresent: boolean
): AppState => {
  const timestamp = Date.now()
  const isoTimestamp = new Date().toISOString()

  console.log('🔄 [狀態映射] 輸入參數 (詳細時序):', {
    status,
    type,
    isRecording,
    transcriptsPresent,
    timestamp,
    isoTimestamp,
    note: '檢查時序和邏輯流程'
  })

  let resultState: AppState

  // 詳細的狀態轉換邏輯和時序追蹤
  switch (status) {
    case "draft":
      resultState = "default"
      console.log('🔄 [狀態映射] draft → default (時序正常)')
      break
    case "active":
      if (type === "recording") {
        if (!isRecording) {
          resultState = "default"
          console.log('🔄 [狀態映射] recording session 但 isRecording=false → default (時序檢查通過)', {
            timestamp,
            reason: 'recording session inactive'
          })
        } else {
          // 關鍵的狀態轉換邏輯：recording_waiting → recording_active
          if (transcriptsPresent) {
            resultState = "recording_active"
            console.log(`🔄 [狀態映射] ✅ 關鍵轉換: recording_waiting → recording_active (時序成功)`, {
              transcriptsPresent,
              timestamp,
              trigger: 'first_transcript_received'
            })
          } else {
            resultState = "recording_waiting"
            console.log(`🔄 [狀態映射] 保持 recording_waiting 狀態 (等待逐字稿)`, {
              transcriptsPresent,
              timestamp,
              waiting: 'for_first_transcript'
            })
          }
        }
      } else {
        resultState = "default"
        console.log('🔄 [狀態映射] active session 但 type != recording → default', {
          type,
          timestamp
        })
      }
      break
    case "processing":
      resultState = "processing"
      console.log('🔄 [狀態映射] processing → processing (時序正常)', { timestamp })
      break
    case "completed":
      resultState = "finished"
      console.log('🔄 [狀態映射] completed → finished (時序正常)', { timestamp })
      break
    case "error":
      resultState = "default" // 錯誤時回到預設狀態
      console.log('🔄 [狀態映射] error → default (錯誤恢復)', {
        timestamp,
        recovery: true
      })
      break
    default:
      resultState = "default"
      console.log('🔄 [狀態映射] unknown → default (安全回退)', {
        unknownStatus: status,
        timestamp
      })
      break
  }

  console.log(`🔄 [狀態映射] 最終結果 (時序追蹤): ${status}(${type}) → ${resultState}`, {
    inputParams: { status, type, isRecording, transcriptsPresent },
    output: resultState,
    timestamp,
    duration: Date.now() - timestamp
  })

  return resultState
}

export function useAppState() {
  const [appData, setAppData] = useState<AppData>({
    state: "default",
    transcriptEntries: [],
    editorContent: "",
    isRecording: false,
    recordingTime: 0,
    session: null,
  })

  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)

  // 使用各個專門的 hooks
  const session = useSession()
  const recording = useRecording()
  const notes = useNotes()
  const transcript = useTranscript()
  const { toast } = useToast()

  // 使用 useRef 追蹤前一個狀態值，避免循環依賴
  const prevStateRef = useRef<AppState>('default')
  const prevTranscriptCompletedRef = useRef(false)
  const prevErrorStateRef = useRef<{ recording: string | null, transcript: string | null }>({
    recording: null,
    transcript: null
  })

  // 優化的狀態映射函數，確保時序可預測性
  const mapStateFromSession = useCallback((
    currentSession: any,
    isRecording: boolean,
    transcripts: any[]
  ) => {
    const executionTimestamp = Date.now()

    if (!currentSession) {
      console.log('🔄 [狀態映射] 無活躍會話 → default', { executionTimestamp })
      return 'default'
    }

    // 實作更可靠的 transcriptsPresent 計算
    const transcriptsPresent = Array.isArray(transcripts) && transcripts.length > 0

    console.log('🔄 [狀態映射] 執行時序檢查:', {
      sessionId: currentSession.id,
      sessionStatus: currentSession.status,
      sessionType: currentSession.type,
      isRecording,
      transcriptCount: transcripts.length,
      transcriptsPresent,
      executionTimestamp,
      transcriptsSample: transcripts.slice(0, 2).map(t => ({
        text: t.text?.substring(0, 30) + '...',
        start_time: t.start_time,
        type: t.type
      })),
      note: '時序同步檢查完成'
    })

    const result = mapBackendToFrontendState(
      currentSession.status,
      currentSession.type,
      isRecording,
      transcriptsPresent
    )

    console.log('🔄 [狀態映射] 執行結果:', {
      input: {
        sessionStatus: currentSession.status,
        sessionType: currentSession.type,
        isRecording,
        transcriptsPresent
      },
      output: result,
      executionTimestamp,
      executionDuration: Date.now() - executionTimestamp
    })

    return result
  }, [])

  // 狀態同步：前端狀態與後端 session status 對應 - 強化一致性
  useEffect(() => {
    const activeSession = session.currentSession
    const effectExecutionTime = Date.now()

    console.log('🔄 [狀態同步] useEffect 觸發 (強化一致性版):', {
      hasActiveSession: !!activeSession,
      sessionId: activeSession?.id,
      sessionStatus: activeSession?.status,
      sessionType: activeSession?.type,
      recordingIsRecording: recording.isRecording,
      appDataIsRecording: appData.isRecording,
      isRecordingConsistent: recording.isRecording === appData.isRecording,
      transcriptCount: transcript.transcripts.length,
      recordingTranscriptCount: recording.transcripts.length,
      currentAppState: prevStateRef.current,
      effectExecutionTime,
      note: '強化錄音狀態一致性檢查'
    })

    if (activeSession) {
      // 確保使用最新的 recording.transcripts 狀態
      const latestTranscripts = recording.transcripts
      const transcriptsPresent = Array.isArray(latestTranscripts) && latestTranscripts.length > 0

      console.log('🔄 [狀態同步] 逐字稿狀態計算 (時序保證):', {
        recordingTranscriptCount: latestTranscripts.length,
        transcriptsPresent,
        latestTranscriptTime: latestTranscripts[latestTranscripts.length - 1]?.start_time,
        latestTranscriptText: latestTranscripts[latestTranscripts.length - 1]?.text?.substring(0, 30) + '...',
        effectExecutionTime,
        note: '已確保時序同步'
      })

      // 關鍵修復：強制使用 recording.isRecording 而不是 appData.isRecording
      // 這確保狀態映射邏輯使用最新的錄音狀態
      const frontendState = mapStateFromSession(
        activeSession,
        recording.isRecording, // 直接使用 recording hook 的狀態
        latestTranscripts
      )

      // 檢查是否需要同時更新 isRecording 和 state
      const needsIsRecordingUpdate = appData.isRecording !== recording.isRecording
      const needsStateUpdate = frontendState !== prevStateRef.current

      if (needsIsRecordingUpdate || needsStateUpdate) {
        console.log(`🔄 [狀態同步] 執行狀態更新:`, {
          needsIsRecordingUpdate,
          needsStateUpdate,
          appDataIsRecording: appData.isRecording,
          recordingIsRecording: recording.isRecording,
          previousState: prevStateRef.current,
          newState: frontendState,
          stateChangeTimestamp: Date.now(),
          executionDuration: Date.now() - effectExecutionTime,
          triggerSource: 'comprehensive_state_sync'
        })

        setAppData(prev => ({
          ...prev,
          state: frontendState,
          isRecording: recording.isRecording, // 同時強制同步 isRecording
        }))

        prevStateRef.current = frontendState
      } else {
        console.log('🔄 [狀態同步] 所有狀態一致，跳過更新', {
          currentState: frontendState,
          isRecording: recording.isRecording,
          executionTime: Date.now() - effectExecutionTime
        })
      }
    }
  }, [session.currentSession, recording.isRecording, recording.transcripts, mapStateFromSession])
  // 依賴於 recording.transcripts 而非 length，確保內容變化時觸發狀態同步

  // 初始化應用狀態 - 只在組件掛載時執行一次
  useEffect(() => {
    let isMounted = true

    const initializeApp = async () => {
      console.log('🚀 初始化應用狀態...')
      setIsLoading(true)

      try {
        // 檢查是否有活躍會話
        const activeSession = await session.checkActiveSession()
        if (!isMounted) return // 組件已卸載，停止執行

        if (activeSession) {
          // 載入筆記內容
          await notes.loadNote(activeSession.id)
        } else {
          // 檢查是否有本地草稿
          const draftContent = localStorage.getItem('draft_note')
          if (draftContent) {
            setAppData(prev => ({ ...prev, editorContent: draftContent }))
            console.log('📝 載入本地草稿')
          }
        }
      } catch (error) {
        if (!isMounted) return // 組件已卸載，停止執行

        // 如果是網路錯誤，不要拋出錯誤，讓用戶正常使用應用
        if (error instanceof Error && error.message.includes('Network Error')) {
          console.warn('⚠️ 初始化時 Backend 連線失敗，使用離線模式:', error.message)

          // 檢查是否有本地草稿
          const draftContent = localStorage.getItem('draft_note')
          if (draftContent) {
            setAppData(prev => ({ ...prev, editorContent: draftContent }))
            console.log('📝 離線模式：載入本地草稿')
          }
        } else {
          console.error('❌ 初始化失敗:', error)
          setError(error instanceof Error ? error.message : '初始化失敗')
        }
      } finally {
        if (isMounted) {
          setIsLoading(false)
        }
      }
    }

    initializeApp()

    return () => {
      isMounted = false
    }
  }, []) // 空依賴項，只在組件掛載時執行一次

  // 同步錄音狀態 - 強化一致性檢查
  useEffect(() => {
    console.log('🔄 [錄音狀態同步] 更新 appData.isRecording:', {
      from: appData.isRecording,
      to: recording.isRecording,
      recordingTime: recording.recordingTime,
      timestamp: Date.now(),
      needsUpdate: appData.isRecording !== recording.isRecording
    })

    // 強制同步錄音狀態，確保一致性
    setAppData(prev => {
      const needsUpdate = prev.isRecording !== recording.isRecording || prev.recordingTime !== recording.recordingTime

      if (needsUpdate) {
        console.log('🔄 [錄音狀態同步] 執行狀態更新:', {
          prevIsRecording: prev.isRecording,
          newIsRecording: recording.isRecording,
          prevRecordingTime: prev.recordingTime,
          newRecordingTime: recording.recordingTime
        })
      }

      return {
        ...prev,
        isRecording: recording.isRecording,
        recordingTime: recording.recordingTime,
      }
    })
  }, [recording.isRecording, recording.recordingTime])

  // 移除重複的狀態一致性檢查，已整合到主要狀態同步邏輯中

  // 同步筆記內容
  useEffect(() => {
    setAppData(prev => ({
      ...prev,
      editorContent: notes.noteContent,
    }))
  }, [notes.noteContent])

  // 處理逐字稿更新 - 統一使用 recording.transcripts
  useEffect(() => {
    console.log('📝 [逐字稿更新] useEffect 觸發:', {
      recordingTranscriptCount: recording.transcripts.length,
      recordingTranscripts: recording.transcripts,
      currentState: appData.state,
      isRecording: appData.isRecording,
      note: '統一使用 recording.transcripts，避免雙重管理'
    })

    const transcriptEntries = recording.transcripts.map((transcriptMsg: TranscriptMessage) => {
      // 使用 start_time 並轉換為 HH:MM:SS 格式
      const startTime = transcriptMsg.start_time ?? 0
      const hours = Math.floor(startTime / 3600)
      const minutes = Math.floor((startTime % 3600) / 60)
      const seconds = Math.floor(startTime % 60)
      const timeStr = `${hours.toString().padStart(2, "0")}:${minutes.toString().padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`

      console.log('📝 [逐字稿轉換] 單個片段:', {
        text: transcriptMsg.text,
        timeStr,
        startTime,
        type: transcriptMsg.type
      })

      return {
        time: timeStr,
        text: transcriptMsg.text ?? '',
      }
    })

    console.log('📝 [逐字稿更新] 轉換完成:', {
      entriesCount: transcriptEntries.length,
      entries: transcriptEntries,
      firstEntry: transcriptEntries[0]?.text?.substring(0, 30) + '...',
      appDataBefore: appData.transcriptEntries
    })

    setAppData(prev => {
      console.log('📝 [逐字稿更新] setAppData 執行:', {
        prevTranscriptEntries: prev.transcriptEntries,
        newTranscriptEntries: transcriptEntries,
        isChanged: prev.transcriptEntries !== transcriptEntries
      })
      return {
        ...prev,
        transcriptEntries,
      }
    })
  }, [recording.transcripts])

  // 監聽轉錄完成，自動轉為 finished 狀態
  useEffect(() => {
    const currentCompleted = transcript.isCompleted
    const wasCompleted = prevTranscriptCompletedRef.current

    // 只在轉錄狀態從 false 變為 true 時處理
    if (currentCompleted && !wasCompleted && prevStateRef.current === "processing") {
      console.log('🔄 [轉錄完成] 轉錄完成，轉為 finished 狀態')

      setAppData(prev => {
        const newState = "finished"
        prevStateRef.current = newState
        return { ...prev, state: newState }
      })

      // 完成會話
      if (session.currentSession) {
        session.finishSession().catch(console.error)
      }
    }

    prevTranscriptCompletedRef.current = currentCompleted
  }, [
    transcript.isCompleted,
    session.currentSession,
    session.finishSession
  ])

  // 監聽錄音和轉錄錯誤，處理錯誤狀態
  useEffect(() => {
    const recordingError = recording.error
    const transcriptError = transcript.error
    const prevErrors = prevErrorStateRef.current

    // 只在錯誤狀態真正改變時處理（避免重複處理同樣的錯誤）
    if ((recordingError !== prevErrors.recording) || (transcriptError !== prevErrors.transcript)) {
      if (recordingError || transcriptError) {
        console.log('🚨 [錯誤處理] 檢測到錯誤:', {
          recordingError,
          transcriptError,
          currentState: prevStateRef.current,
          sessionId: session.currentSession?.id
        })

        const currentState = prevStateRef.current

        // 如果是錄音相關錯誤，停止錄音並回到預設狀態
        if (currentState === "recording_waiting" || currentState === "recording_active") {
          console.log('🚨 [錯誤處理] 錄音狀態錯誤，停止錄音並回到預設狀態')

          // 停止錄音
          recording.stopRecording()

          // 清理連線
          transcript.disconnect()

          // 回到預設狀態
          setAppData(prev => {
            prevStateRef.current = "default"
            return { ...prev, state: "default" }
          })

          // 顯示錯誤訊息
          const errorMessage = recordingError || transcriptError || '錄音或轉錄過程中發生錯誤'
          toast({
            title: '錄音錯誤',
            description: errorMessage,
            variant: 'destructive',
          })
        }

        // 如果是處理狀態的錯誤，也回到預設狀態
        if (currentState === "processing") {
          console.log('🚨 [錯誤處理] 處理狀態錯誤，回到預設狀態')

          setAppData(prev => {
            prevStateRef.current = "default"
            return { ...prev, state: "default" }
          })

          const errorMessage = transcriptError || recordingError || '處理轉錄過程中發生錯誤'
          toast({
            title: '處理錯誤',
            description: errorMessage,
            variant: 'destructive',
          })
        }
      }

      // 更新錯誤狀態追蹤
      prevErrorStateRef.current = {
        recording: recordingError,
        transcript: transcriptError
      }
    }
  }, [recording.error, transcript.error, session.currentSession, recording, transcript, toast])

  // 建立純筆記會話
  const createNoteSession = useCallback(async (title?: string) => {
    setIsLoading(true)
    setError(null)

    try {
      const newSession = await session.createNoteSession(title)
      if (newSession) {
        // 載入筆記內容
        await notes.loadNote(newSession.id)

        // 清除本地草稿
        localStorage.removeItem('draft_note')

        console.log('✅ 純筆記會話建立成功')

        toast({
          title: '筆記會話已建立',
          description: `會話 "${title}" 建立成功`,
        })
      }
    } catch (err) {
      // 特別處理會話衝突錯誤
      if (err instanceof Error && err.message.includes('檢測到活躍會話衝突')) {
        const conflictMsg = '偵測到會話衝突，請重新整理頁面後再試'
        console.error("🎤 startRecording: 會話衝突錯誤:", err.message)
        setError(conflictMsg)
        toast({
          title: '會話衝突',
          description: '目前已有活躍會話，請重新整理頁面後再試，或等待當前會話結束',
          variant: 'destructive'
        })
        return
      }

      const msg = err instanceof Error ? err.message : '開始錄音失敗'
      console.error("🎤 startRecording: 流程中發生錯誤:", msg)
      setError(msg)
      toast({ title: '錄音失敗', description: msg, variant: 'destructive' })
    } finally {
      setIsLoading(false)
      console.log("🎤 startRecording: 流程結束")
    }
  }, [session, recording, transcript, appData.editorContent, toast])

  // 建立錄音會話
  const createRecordingSession = useCallback(async (title?: string) => {
    setIsLoading(true)
    setError(null)

    try {
      const newSession = await session.createRecordingSession(title, appData.editorContent)
      if (newSession) {
        // 載入筆記內容
        await notes.loadNote(newSession.id)

        // 清除本地草稿
        localStorage.removeItem('draft_note')

        console.log('✅ 錄音會話建立成功')

        toast({
          title: '錄音會話已建立',
          description: `會話 "${title}" 建立成功`,
        })
      }
    } catch (err) {
      // 特別處理會話衝突錯誤
      if (err instanceof Error && err.message.includes('檢測到活躍會話衝突')) {
        const conflictMsg = '偵測到會話衝突，請重新整理頁面後再試'
        console.error("🎤 createRecordingSession: 會話衝突錯誤:", err.message)
        setError(conflictMsg)
        toast({
          title: '會話衝突',
          description: '目前已有活躍會話，請重新整理頁面後再試，或等待當前會話結束',
          variant: 'destructive'
        })
        return
      }

      const errorMessage = err instanceof Error ? err.message : '建立錄音會話失敗'
      setError(errorMessage)
      console.error('❌ 建立錄音會話失敗:', err)

      toast({
        title: '建立失敗',
        description: errorMessage,
        variant: 'destructive',
      })
    } finally {
      setIsLoading(false)
    }
  }, [session, notes, toast, appData.editorContent])

  // 開始錄音 - 支援四狀態流程
  const startRecording = useCallback(async (title?: string) => {
    console.log("🎤 startRecording: 流程開始")
    setIsLoading(true)
    try {
      // 先檢查是否有活躍會話，確保前端狀態與後端同步
      console.log("🎤 startRecording: 檢查活躍會話狀態")
      const latestActiveSession = await session.checkActiveSession()

      let sessionToRecord = latestActiveSession || session.currentSession
      console.log("🎤 startRecording: 會話狀態檢查結果:", {
        latestActiveSession: latestActiveSession?.id,
        currentSession: session.currentSession?.id,
        finalSessionToUse: sessionToRecord?.id
      })

      if (latestActiveSession && !session.currentSession) {
        console.log("🎤 startRecording: 檢測到活躍會話，同步前端狀態")
      }

      if (!sessionToRecord) {
        console.log("🎤 startRecording: 沒有 session，建立新的錄音 session")
        const newSession = await session.createRecordingSession(title, appData.editorContent)
        if (!newSession) {
          console.error("🎤 startRecording: 建立 session 失敗，回傳值為 null")
          throw new Error('無法建立新的錄音會話')
        }
        console.log("🎤 startRecording: Session 建立成功:", newSession)
        sessionToRecord = newSession
        localStorage.removeItem('draft_note')
      } else if (sessionToRecord.type === 'note_only') {
        console.log("🎤 startRecording: 偵測到 note_only session，進行升級")
        const upgradedSession = await session.upgradeToRecording()
        if (!upgradedSession) {
          console.error("🎤 startRecording: 升級 session 失敗，回傳值為 null")
          throw new Error('無法升級會話')
        }
        console.log("🎤 startRecording: Session 升級成功:", upgradedSession)
        sessionToRecord = upgradedSession
      } else if (sessionToRecord.type === 'recording') {
        console.log("🎤 startRecording: 使用現有的錄音會話:", sessionToRecord.id)
      }

      console.log("🎤 startRecording: 準備呼叫 recording.startRecording")
      // recording.startRecording 使用 TranscriptManager，統一管理逐字稿連接
      await recording.startRecording(sessionToRecord.id)
      console.log("🎤 startRecording: recording.startRecording 呼叫完畢")

      console.log("🎤 startRecording: 跳過 transcript.connect，避免雙重監聽器")
      // 移除重複連接：useRecording 已經透過 TranscriptManager 連接逐字稿
      // 避免 useTranscript 和 useRecording 同時添加監聽器導致競爭條件
      console.log("🎤 startRecording: 逐字稿將由 useRecording hook 統一管理")

      toast({ title: '錄音開始' })
    } catch (err) {
      // 特別處理會話衝突錯誤
      if (err instanceof Error && err.message.includes('檢測到活躍會話衝突')) {
        const conflictMsg = '偵測到會話衝突，請重新整理頁面後再試'
        console.error("🎤 startRecording: 會話衝突錯誤:", err.message)
        setError(conflictMsg)
        toast({
          title: '會話衝突',
          description: '目前已有活躍會話，請重新整理頁面後再試，或等待當前會話結束',
          variant: 'destructive'
        })
        return
      }

      const msg = err instanceof Error ? err.message : '開始錄音失敗'
      console.error("🎤 startRecording: 流程中發生錯誤:", msg)
      setError(msg)
      toast({ title: '錄音失敗', description: msg, variant: 'destructive' })
    } finally {
      setIsLoading(false)
      console.log("🎤 startRecording: 流程結束")
    }
  }, [session, recording, transcript, appData.editorContent, toast])

  // 升級會話為錄音模式
  const upgradeToRecording = useCallback(async () => {
    setIsLoading(true)
    setError(null)

    try {
      const updatedSession = await session.upgradeToRecording()
      if (updatedSession) {
        console.log('✅ 會話升級為錄音模式成功')

        toast({
          title: '升級成功',
          description: '會話已升級為錄音模式',
        })
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '升級會話失敗'
      setError(errorMessage)
      console.error('❌ 升級會話失敗:', err)

      toast({
        title: '升級失敗',
        description: errorMessage,
        variant: 'destructive',
      })
    } finally {
      setIsLoading(false)
    }
  }, [session, toast])

  // 停止錄音 - 自動轉為 processing 狀態
  const stopRecording = useCallback(async () => {
    setIsLoading(true)
    setError(null)

    try {
      await recording.stopRecording()

      // 斷開 transcript 連接
      transcript.disconnect()

      // 狀態轉為 processing
      setAppData(prev => ({ ...prev, state: "processing" }))

      console.log('✅ 錄音停止，開始處理逐字稿')

      toast({
        title: '處理中',
        description: '正在處理錄音內容，請稍候...',
      })
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '停止錄音失敗'
      setError(errorMessage)
      console.error('❌ 停止錄音失敗:', err)

      toast({
        title: '停止失敗',
        description: errorMessage,
        variant: 'destructive',
      })
    } finally {
      setIsLoading(false)
    }
  }, [recording, toast])

  // 完成會話
  const finishSession = useCallback(async () => {
    setIsLoading(true)
    setError(null)

    try {
      await session.finishSession()
      console.log('✅ 會話完成')

      toast({
        title: '會話完成',
        description: '您可以匯出筆記或開始新的筆記',
      })
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '完成會話失敗'
      setError(errorMessage)
      console.error('❌ 完成會話失敗:', err)

      toast({
        title: '完成失敗',
        description: errorMessage,
        variant: 'destructive',
      })
    } finally {
      setIsLoading(false)
    }
  }, [session, toast])

  // 開新筆記 - 清空當前資料，狀態回到 default
  const newNote = useCallback(async () => {
    setIsLoading(true)
    setError(null)

    try {
      // 如果有活躍會話，先刪除它
      if (session.currentSession) {
        console.log('🗑️ 刪除當前活躍會話:', session.currentSession.id)
        await session.deleteSession()
        console.log('✅ 會話刪除成功')
      }

      // 清空當前資料
      setAppData({
        state: "default",
        transcriptEntries: [],
        editorContent: "",
        isRecording: false,
        recordingTime: 0,
      })

      // 清除錄音和逐字稿狀態
      recording.clearTranscripts()
      transcript.clearTranscripts()
      notes.clearNote()

      // 清除本地草稿
      localStorage.removeItem('draft_note')

      console.log('🔄 已開始新筆記')

      toast({
        title: '新筆記',
        description: '已清空內容，可以開始新的筆記',
      })
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '開始新筆記失敗'
      setError(errorMessage)
      console.error('❌ 開始新筆記失敗:', err)

      toast({
        title: '操作失敗',
        description: errorMessage,
        variant: 'destructive',
      })
    } finally {
      setIsLoading(false)
    }
  }, [session, recording, transcript, notes, toast])

  // 自動儲存筆記內容到本地草稿
  const saveLocalDraft = useCallback((content: string) => {
    if (!session.currentSession && content.trim()) {
      localStorage.setItem('draft_note', content)
    }
  }, [session.currentSession])

  return {
    // 應用狀態
    appData,
    isLoading,
    error,

    // 會話管理
    createNoteSession,
    createRecordingSession,
    upgradeToRecording,
    finishSession,
    newNote,

    // 錄音控制
    startRecording,
    stopRecording,

    // 本地草稿
    saveLocalDraft,

    // 外部狀態
    session: session.currentSession,
    sessionLoading: session.isLoading,
    sessionError: session.error,

    // 錄音狀態
    recordingError: recording.error,

    // 逐字稿狀態
    transcriptConnected: transcript.isConnected,
    transcriptError: transcript.error,
    transcriptAutoScroll: transcript.autoScrollEnabled,
    enableAutoScroll: transcript.enableAutoScroll,
    disableAutoScroll: transcript.disableAutoScroll,
    scrollToLatest: transcript.scrollToLatest,
  }
}

export { mapBackendToFrontendState }


# END FILE CONTENTS


# File: app/utils/timer.py

import time, logging
logger = logging.getLogger(__name__)

class PerformanceTimer:
    """with PerformanceTimer("name"): ..."""

    def __init__(self, label: str):
        self.label = label
        self._t0: float | None = None

    def __enter__(self):
        self._t0 = time.perf_counter()
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        t_spent = (time.perf_counter() - self._t0) * 1000
        logger.debug("⏱️  %s took %.1f ms", self.label, t_spent)


# END FILE CONTENTS


# File: app/utils/timing.py

from app.core.config import get_settings
_CHUNK = get_settings().AUDIO_CHUNK_DURATION_SEC

def calc_times(seq: int):
    start = seq * _CHUNK
    return start, start + _CHUNK


# END FILE CONTENTS


# File: frontend/components/ui/label.tsx

"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }


# END FILE CONTENTS


# File: frontend/lib/services/recording-service.ts

"use client"

import { BaseService } from './base-service'
import { IRecordingService, RecordingState } from './interfaces'
import { AudioRecorder, AudioChunk, checkAudioRecordingSupport } from '../audio-recorder'
import { AudioUploadWebSocket, AckMissingMessage } from '../websocket'
import { getAudioChunkIntervalMs, getAudioConfigInfo } from '../config'

/**
 * RecordingService - 錄音管理服務
 *
 * 整合現有的錄音相關邏輯，提供：
 * - 音頻錄製管理（重用 AudioRecorder）
 * - WebSocket 音頻上傳（重用 AudioUploadWebSocket）
 * - 錄音狀態管理
 * - 錯誤處理和重試機制
 * - 心跳監測
 */
export class RecordingService extends BaseService implements IRecordingService {
  protected readonly serviceName = 'RecordingService'

  // 錄音器和 WebSocket 引用
  private audioRecorder: AudioRecorder | null = null
  private audioUploadWs: AudioUploadWebSocket | null = null

  // 錄音狀態
  private recordingState: RecordingState = {
    isRecording: false,
    recordingTime: 0,
    currentSessionId: null,
    error: null
  }

  // 計時器和重試機制
  private recordingTimer: ReturnType<typeof setInterval> | null = null
  private heartbeatTimer: ReturnType<typeof setInterval> | null = null
  private audioChunks: AudioChunk[] = []
  private retryCounts = new Map<number, number>()

  /**
   * 服務初始化
   * 檢查音頻錄製支援度
   */
  async initialize(): Promise<void> {
    this.logInfo('服務初始化開始')

    // 檢查瀏覽器支援度
    const supportCheck = await checkAudioRecordingSupport()
    if (!supportCheck.isSupported) {
      const errorMessage = `音頻錄製不支援: ${supportCheck.error || '未知錯誤'}`
      this.logWarning('瀏覽器支援度檢查失敗', supportCheck.error)
      throw new Error(errorMessage)
    }

    this.logSuccess('瀏覽器支援度檢查通過')
    this.logSuccess('初始化完成')
  }

  /**
   * 服務清理
   */
  async cleanup(): Promise<void> {
    this.logInfo('服務清理開始')

    // 如果正在錄音，先停止
    if (this.recordingState.isRecording) {
      await this.stopRecording()
    }

    // 清理音頻錄製器
    if (this.audioRecorder) {
      this.audioRecorder.cleanup()
      this.audioRecorder = null
    }

    // 清理計時器
    this.clearTimers()

    // 重置狀態
    this.resetRecordingState()

    this.logSuccess('清理完成')
  }

  /**
   * 開始錄音
   * 重用現有的音頻錄製和 WebSocket 上傳邏輯
   */
  async startRecording(sessionId: string): Promise<void> {
    this.logInfo('開始錄音', { sessionId })

    try {
      // 檢查是否已在錄音
      if (this.recordingState.isRecording) {
        this.logWarning('已在錄音中，跳過重複啟動')
        return
      }

      // 重置狀態
      this.resetRecordingState()
      this.recordingState.currentSessionId = sessionId

      // 步驟 1: 初始化音頻錄製器
      this.logInfo('步驟 1: 初始化音頻錄製器')
      const chunkInterval = getAudioChunkIntervalMs()

      console.log('🎯 [RecordingService] 音頻配置', {
        chunkInterval: `${chunkInterval}ms (${chunkInterval / 1000}秒)`,
        mimeType: 'audio/webm;codecs=opus',
        configInfo: getAudioConfigInfo()
      })

      this.audioRecorder = new AudioRecorder({
        chunkInterval, // 使用環境變數配置的切片間隔
        mimeType: 'audio/webm;codecs=opus'
      })

      this.logInfo(`音訊配置: ${getAudioConfigInfo()}`)

      // 設定音頻錄製器事件處理
      this.setupAudioRecorderEvents()

      // 步驟 2: 開始音頻錄製（包含獲取權限）
      this.logInfo('步驟 2: 開始音頻錄製（包含獲取權限）')

      // 步驟 3: 建立音頻上傳 WebSocket
      this.logInfo('步驟 3: 建立音頻上傳 WebSocket')
      this.audioUploadWs = new AudioUploadWebSocket(sessionId)

      // 設定 WebSocket 事件處理
      this.setupWebSocketEvents()

      // 連接 WebSocket
      await this.audioUploadWs.connect()

      // 驗證 WebSocket 連接
      if (!this.audioUploadWs.isConnected) {
        throw new Error('音頻上傳 WebSocket 連接失敗')
      }

      // 步驟 4: 啟動心跳機制
      this.logInfo('步驟 4: 啟動心跳機制')
      this.startHeartbeat()

      // 步驟 5: 開始錄音
      this.logInfo('步驟 5: 開始音頻錄製')
      await this.audioRecorder.start((chunk: AudioChunk) => {
        this.handleAudioChunk(chunk)
      })

      // 步驟 6: 啟動錄音計時器
      this.logInfo('步驟 6: 啟動錄音計時器')
      this.startRecordingTimer()

      // 更新錄音狀態
      this.recordingState.isRecording = true
      this.recordingState.error = null

      this.logSuccess('錄音啟動成功', {
        sessionId,
        chunkConfig: getAudioConfigInfo(),
        mimeType: 'audio/webm;codecs=opus'
      })

    } catch (error) {
      // 錯誤時清理資源
      await this.cleanupRecordingResources()
      this.recordingState.error = error instanceof Error ? error.message : '開始錄音失敗'
      this.handleError('開始錄音', error)
    }
  }

  /**
   * 停止錄音
   * 保持 WebSocket 連接以接收剩餘的處理結果
   */
  async stopRecording(): Promise<void> {
    this.logInfo('停止錄音')

    try {
      // 更新狀態
      this.recordingState.isRecording = false

      // 停止音頻錄製器
      if (this.audioRecorder) {
        this.audioRecorder.stop()
        this.logInfo('音頻錄製器已停止')
      }

      // 停止計時器
      this.clearTimers()

      // 清理音頻錄製器（保留 WebSocket 連接）
      if (this.audioRecorder) {
        this.audioRecorder.cleanup()
        this.audioRecorder = null
      }

      // 斷開音頻上傳 WebSocket
      if (this.audioUploadWs) {
        this.audioUploadWs.disconnect()
        this.audioUploadWs = null
      }

      this.logSuccess('錄音停止成功', {
        sessionId: this.recordingState.currentSessionId,
        recordingTime: this.recordingState.recordingTime
      })

    } catch (error) {
      this.recordingState.error = error instanceof Error ? error.message : '停止錄音失敗'
      this.handleError('停止錄音', error)
    }
  }

  /**
   * 取得當前錄音狀態
   */
  getRecordingState(): RecordingState {
    return { ...this.recordingState }
  }

  /**
   * 檢查是否正在錄音
   */
  isRecording(): boolean {
    return this.recordingState.isRecording
  }

  /**
   * 取得錄音時間（秒）
   */
  getRecordingTime(): number {
    console.log('⏰ [RecordingService] getRecordingTime', this.recordingState.recordingTime)
    return this.recordingState.recordingTime
  }

  /**
   * 設定音頻錄製器事件處理
   */
  private setupAudioRecorderEvents(): void {
    if (!this.audioRecorder) return

    // 處理錄製錯誤
    this.audioRecorder.onError((error: Error) => {
      this.logWarning('音頻錄製器錯誤', error.message)
      this.recordingState.error = error.message
    })

    // 處理狀態變化
    this.audioRecorder.onStateChange((state) => {
      this.logInfo('音頻錄製器狀態變化', state)
    })
  }

  /**
   * 設定 WebSocket 事件處理
   */
  private setupWebSocketEvents(): void {
    if (!this.audioUploadWs) return

    // 處理 ACK/Missing 訊息
    this.audioUploadWs.onAckMissing((data: AckMissingMessage) => {
      this.handleAckMissing(data)
    })

    // 處理 WebSocket 關閉
    this.audioUploadWs.onClose((event) => {
      this.logWarning('音頻上傳 WebSocket 連接關閉', {
        code: event.code,
        reason: event.reason
      })
    })
  }

  /**
   * 處理音頻切片
   * 儲存切片並上傳
   */
  private handleAudioChunk(chunk: AudioChunk): void {
    console.log('🎤 [RecordingService] 收到音頻切片', {
      sequence: chunk.sequence,
      size: chunk.blob.size,
      duration: chunk.duration,
      timestamp: new Date().toISOString()
    })

    this.logInfo('收到音頻切片', {
      sequence: chunk.sequence,
      size: chunk.blob.size,
      duration: chunk.duration
    })

    // 儲存切片供重傳使用
    this.audioChunks[chunk.sequence] = chunk

    // 如果 WebSocket 已連接，立即上傳
    if (this.audioUploadWs?.isConnected) {
      console.log('📤 [RecordingService] 準備上傳音頻切片', {
        sequence: chunk.sequence,
        wsState: this.audioUploadWs.readyState,
        wsUrl: `/ws/upload_audio/${this.recordingState.currentSessionId}`
      })

      this.audioUploadWs.uploadAudioChunk(chunk.blob)

      console.log('✅ [RecordingService] 音頻切片已送出', {
        sequence: chunk.sequence,
        size: chunk.blob.size,
        time: new Date().toISOString()
      })

      this.logInfo('音頻切片已上傳', { sequence: chunk.sequence })
    } else {
      console.error('❌ [RecordingService] WebSocket 未連接，無法上傳音頻切片', {
        sequence: chunk.sequence,
        wsState: this.audioUploadWs?.readyState || 'null',
        isConnected: this.audioUploadWs?.isConnected || false
      })

      this.logWarning('WebSocket 未連接，無法上傳音頻切片', { sequence: chunk.sequence })
    }
  }

  /**
   * 處理 ACK/Missing 訊息
   * 實現音頻切片重傳機制
   */
  private handleAckMissing(data: AckMissingMessage): void {
    this.logInfo('收到 ACK/Missing 訊息', {
      ack: data.ack,
      missing: data.missing
    })

    if (data.missing.length > 0) {
      this.logWarning('檢測到遺失的音頻切片，準備重傳', data.missing)

      // 重傳遺失的切片
      data.missing.forEach(sequence => {
        const retryCount = this.retryCounts.get(sequence) ?? 0

        if (retryCount < 5) { // 最多重傳 5 次
          this.retryCounts.set(sequence, retryCount + 1)

          // 尋找對應的音頻切片進行重傳
          if (this.audioChunks[sequence]) {
            this.logInfo('重傳音頻切片', {
              sequence,
              retryCount: retryCount + 1,
              maxRetries: 5
            })
            this.audioUploadWs?.uploadAudioChunk(this.audioChunks[sequence].blob)
          } else {
            this.logWarning('找不到要重傳的音頻切片', { sequence })
          }
        } else {
          this.logWarning('音頻切片重傳次數已達上限', {
            sequence,
            maxRetries: 5
          })
        }
      })
    }
  }

  /**
   * 啟動錄音計時器
   */
  private startRecordingTimer(): void {
    this.clearRecordingTimer()
    this.recordingState.recordingTime = 0

    console.log('⏱️ [RecordingService] 計時器啟動')
    this.recordingTimer = setInterval(() => {
      this.recordingState.recordingTime += 1

      // 每 30 秒記錄一次錄音時間
      if (this.recordingState.recordingTime % 30 === 0) {
        this.logInfo('錄音進行中', {
          recordingTime: this.recordingState.recordingTime,
          minutes: Math.floor(this.recordingState.recordingTime / 60)
        })
      }
    }, 1000)
  }

  /**
   * 啟動心跳機制
   */
  private startHeartbeat(): void {
    this.clearHeartbeatTimer()

    this.heartbeatTimer = setInterval(() => {
      if (this.audioUploadWs?.isConnected) {
        this.audioUploadWs.send(JSON.stringify({
          type: 'heartbeat',
          timestamp: Date.now()
        }))
        this.logInfo('發送心跳訊號')
      }
    }, 30000) // 每 30 秒發送一次心跳
  }

  /**
   * 清理所有計時器
   */
  private clearTimers(): void {
    this.clearRecordingTimer()
    this.clearHeartbeatTimer()
  }

  /**
   * 清理錄音計時器
   */
  private clearRecordingTimer(): void {
    if (this.recordingTimer) {
      clearInterval(this.recordingTimer)
      this.recordingTimer = null
      console.log('⏹️ [RecordingService] 計時器清除')
    }
  }

  /**
   * 清理心跳計時器
   */
  private clearHeartbeatTimer(): void {
    if (this.heartbeatTimer) {
      clearInterval(this.heartbeatTimer)
      this.heartbeatTimer = null
    }
  }

  /**
   * 重置錄音狀態
   */
  private resetRecordingState(): void {
    this.recordingState = {
      isRecording: false,
      recordingTime: 0,
      currentSessionId: null,
      error: null
    }
    this.audioChunks = []
    this.retryCounts.clear()
  }

  /**
   * 清理錄音相關資源
   * 錯誤處理時使用
   */
  private async cleanupRecordingResources(): Promise<void> {
    try {
      // 停止音頻錄製器
      if (this.audioRecorder) {
        this.audioRecorder.stop()
        this.audioRecorder.cleanup()
        this.audioRecorder = null
      }

      // 關閉 WebSocket 連接
      if (this.audioUploadWs) {
        this.audioUploadWs.disconnect()
        this.audioUploadWs = null
      }

      // 清理計時器
      this.clearTimers()

      // 重置狀態
      this.recordingState.isRecording = false

      this.logInfo('錄音資源清理完成')
    } catch (error) {
      this.logWarning('清理錄音資源時發生錯誤', error)
    }
  }

  /**
   * 獲取服務詳細狀態
   * 擴展基礎狀態，包含錄音特定信息
   */
  async getDetailedStatus(): Promise<RecordingServiceStatus> {
    const baseStatus = this.getStatus()
    const supportCheck = await checkAudioRecordingSupport()

    return {
      ...baseStatus,
      recordingState: this.getRecordingState(),
      audioSupport: {
        supported: supportCheck.isSupported,
        errors: supportCheck.error ? [supportCheck.error] : []
      },
      audioRecorderState: this.audioRecorder?.currentState ?? null,
      webSocketConnected: this.audioUploadWs?.isConnected ?? false,
      chunksCount: this.audioChunks.length,
      retryCount: Array.from(this.retryCounts.values()).reduce((sum, count) => sum + count, 0)
    }
  }
}

/**
 * RecordingService 詳細狀態介面
 */
export interface RecordingServiceStatus {
  serviceName: string
  isInitialized: boolean
  isRunning: boolean
  timestamp: string
  recordingState: RecordingState
  audioSupport: {
    supported: boolean
    errors: string[]
  }
  audioRecorderState: string | null
  webSocketConnected: boolean
  chunksCount: number
  retryCount: number
}


# END FILE CONTENTS


# File: frontend/lib/app-state-reducer.ts

import { AppStateAction, initialAppData } from "../types/app-state-context"
import { AppData } from "../types/app-state"

export interface AppStateReducerState {
  appData: AppData
  isLoading: boolean
  error: string | null
}

export function appStateReducer(
  state: AppStateReducerState,
  action: AppStateAction
): AppStateReducerState {
  console.log('🔄 [AppStateReducer] Action:', action.type, action)

  switch (action.type) {
    case "SET_STATE":
    case "SET_APP_STATE":  // 別名，為了向後相容
      return {
        ...state,
        appData: {
          ...state.appData,
          state: action.payload,
        },
      }

    case "SET_RECORDING":
      return {
        ...state,
        appData: {
          ...state.appData,
          isRecording: action.payload,
        },
      }

    case "SET_RECORDING_TIME":
      console.log('⏰ [AppStateReducer] 更新錄音時間:', action.payload)
      return {
        ...state,
        appData: {
          ...state.appData,
          recordingTime: action.payload,
        },
      }

    case "SET_EDITOR_CONTENT":
      return {
        ...state,
        appData: {
          ...state.appData,
          editorContent: action.payload,
        },
      }

    case "SET_TRANSCRIPT_ENTRIES":
      return {
        ...state,
        appData: {
          ...state.appData,
          transcriptEntries: action.payload,
        },
      }

    case "ADD_TRANSCRIPT_ENTRY":
      return {
        ...state,
        appData: {
          ...state.appData,
          transcriptEntries: [...state.appData.transcriptEntries, action.payload],
        },
      }

    case "SET_SESSION":
      return {
        ...state,
        appData: {
          ...state.appData,
          session: action.payload,
        },
      }

    case "UPDATE_SESSION_STATUS":
      if (!state.appData.session) {
        console.warn('🔄 [AppStateReducer] 試圖更新不存在的 session 狀態')
        return state
      }
      return {
        ...state,
        appData: {
          ...state.appData,
          session: {
            ...state.appData.session,
            status: action.payload,
          },
        },
      }

    case "RESET_STATE":
      return {
        ...state,
        appData: initialAppData,
        error: null,
      }

    case "SET_LOADING":
      return {
        ...state,
        isLoading: action.payload,
      }

    case "SET_ERROR":
      return {
        ...state,
        error: action.payload,
      }

    case "CLEAR_ERROR":
      return {
        ...state,
        error: null,
      }

    default:
      console.warn('🔄 [AppStateReducer] 未知的 action type:', action)
      return state
  }
}


# END FILE CONTENTS


# File: frontend/lib/services/__tests__/recording-service.test.ts

"use client"

import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest'
import { RecordingService } from '../recording-service'
import { AudioRecorder } from '../../audio-recorder'
import { AudioUploadWebSocket } from '../../websocket'

// Mock AudioRecorder
vi.mock('../../audio-recorder', () => ({
    AudioRecorder: vi.fn().mockImplementation(() => ({
        initialize: vi.fn(),
        startRecording: vi.fn(),
        stopRecording: vi.fn(),
        onChunk: vi.fn(),
        onError: vi.fn(),
    }))
}))

// Mock AudioUploadWebSocket
vi.mock('../../websocket', () => ({
    AudioUploadWebSocket: vi.fn().mockImplementation(() => ({
        connect: vi.fn(),
        disconnect: vi.fn(),
        uploadAudioChunk: vi.fn(),
        onAckMissing: vi.fn(),
        isConnected: false,
        send: vi.fn(),
    }))
}))

// Mock transcriptManager
const mockTranscriptManager = {
    connect: vi.fn(),
    disconnect: vi.fn(),
    addListener: vi.fn(),
    removeListener: vi.fn(),
    isConnected: vi.fn(),
}

vi.mock('../../transcript-manager', () => ({
    transcriptManager: mockTranscriptManager
}))

describe('RecordingService', () => {
    let recordingService: RecordingService
    let mockAudioRecorder: any
    let mockWebSocket: any

    beforeEach(() => {
        recordingService = new RecordingService()
        mockAudioRecorder = new AudioRecorder({})
        mockWebSocket = new AudioUploadWebSocket('')
        vi.clearAllMocks()
    })

    afterEach(() => {
        vi.restoreAllMocks()
    })

    describe('服務初始化', () => {
        it('應該正確初始化 RecordingService', () => {
            expect(recordingService).toBeDefined()
            expect(recordingService['serviceName']).toBe('RecordingService')
        })

        it('應該正確啟動和停止服務', async () => {
            await recordingService.start()
            expect(recordingService['isRunning']).toBe(true)

            await recordingService.stop()
            expect(recordingService['isRunning']).toBe(false)
        })

        it('應該返回初始錄音狀態', () => {
            const state = recordingService.getRecordingState()

            expect(state).toEqual({
                isRecording: false,
                recordingTime: 0,
                currentSessionId: null,
                error: null
            })
        })
    })

    describe('startRecording', () => {
        const sessionId = 'test-session-id'

        beforeEach(() => {
            // Mock browser environment
            Object.defineProperty(global, 'window', {
                value: {
                    addEventListener: vi.fn(),
                    removeEventListener: vi.fn(),
                },
                writable: true
            })
        })

        it('應該成功開始錄音', async () => {
            // Setup mocks
            mockAudioRecorder.initialize.mockResolvedValue(undefined)
            mockAudioRecorder.startRecording.mockResolvedValue(undefined)
            mockWebSocket.connect.mockResolvedValue(undefined)
            mockWebSocket.isConnected = true
            mockTranscriptManager.connect.mockResolvedValue(undefined)
            mockTranscriptManager.isConnected.mockReturnValue(true)

            await recordingService.startRecording(sessionId)

            // Verify AudioRecorder was initialized and started
            expect(AudioRecorder).toHaveBeenCalled()
            expect(mockAudioRecorder.initialize).toHaveBeenCalled()
            expect(mockAudioRecorder.startRecording).toHaveBeenCalled()

            // Verify WebSocket was connected
            expect(AudioUploadWebSocket).toHaveBeenCalledWith(sessionId)
            expect(mockWebSocket.connect).toHaveBeenCalled()

            // Verify transcript manager was connected
            expect(mockTranscriptManager.connect).toHaveBeenCalledWith(sessionId)

            // Verify recording state
            const state = recordingService.getRecordingState()
            expect(state.isRecording).toBe(true)
            expect(state.currentSessionId).toBe(sessionId)
        })

        it('應該處理音頻初始化失敗', async () => {
            const initError = new Error('Microphone permission denied')
            mockAudioRecorder.initialize.mockRejectedValue(initError)

            await expect(recordingService.startRecording(sessionId))
                .rejects.toThrow('Microphone permission denied')

            const state = recordingService.getRecordingState()
            expect(state.isRecording).toBe(false)
            expect(state.error).toBe('Microphone permission denied')
        })

        it('應該處理 WebSocket 連接失敗', async () => {
            mockAudioRecorder.initialize.mockResolvedValue(undefined)
            mockWebSocket.connect.mockRejectedValue(new Error('WebSocket connection failed'))

            await expect(recordingService.startRecording(sessionId))
                .rejects.toThrow('WebSocket connection failed')
        })

        it('應該處理 TranscriptManager 連接失敗', async () => {
            mockAudioRecorder.initialize.mockResolvedValue(undefined)
            mockWebSocket.connect.mockResolvedValue(undefined)
            mockWebSocket.isConnected = true
            mockTranscriptManager.connect.mockRejectedValue(new Error('Transcript connection failed'))

            await expect(recordingService.startRecording(sessionId))
                .rejects.toThrow('Transcript connection failed')
        })

        it('應該在瀏覽器環境檢查失敗時拋出錯誤', async () => {
            // Remove window object to simulate non-browser environment
            delete (global as any).window

            await expect(recordingService.startRecording(sessionId))
                .rejects.toThrow('此功能僅在瀏覽器環境中可用')
        })

        it('應該處理重複開始錄音請求', async () => {
            // Setup successful first recording
            mockAudioRecorder.initialize.mockResolvedValue(undefined)
            mockAudioRecorder.startRecording.mockResolvedValue(undefined)
            mockWebSocket.connect.mockResolvedValue(undefined)
            mockWebSocket.isConnected = true
            mockTranscriptManager.connect.mockResolvedValue(undefined)
            mockTranscriptManager.isConnected.mockReturnValue(true)

            await recordingService.startRecording(sessionId)

            // Try to start recording again
            await expect(recordingService.startRecording('another-session'))
                .rejects.toThrow('錄音已在進行中')
        })
    })

    describe('stopRecording', () => {
        beforeEach(async () => {
            // Setup recording state
            Object.defineProperty(global, 'window', {
                value: {
                    addEventListener: vi.fn(),
                    removeEventListener: vi.fn(),
                },
                writable: true
            })

            mockAudioRecorder.initialize.mockResolvedValue(undefined)
            mockAudioRecorder.startRecording.mockResolvedValue(undefined)
            mockWebSocket.connect.mockResolvedValue(undefined)
            mockWebSocket.isConnected = true
            mockTranscriptManager.connect.mockResolvedValue(undefined)
            mockTranscriptManager.isConnected.mockReturnValue(true)

            await recordingService.startRecording('test-session')
        })

        it('應該成功停止錄音', async () => {
            await recordingService.stopRecording()

            // Verify audio recorder was stopped
            expect(mockAudioRecorder.stopRecording).toHaveBeenCalled()

            // Verify WebSocket was disconnected
            expect(mockWebSocket.disconnect).toHaveBeenCalled()

            // Verify recording state
            const state = recordingService.getRecordingState()
            expect(state.isRecording).toBe(false)
            expect(state.currentSessionId).toBeNull()
        })

        it('應該處理停止錄音錯誤', async () => {
            mockAudioRecorder.stopRecording.mockImplementation(() => {
                throw new Error('Stop recording failed')
            })

            await expect(recordingService.stopRecording())
                .rejects.toThrow('Stop recording failed')
        })

        it('應該在沒有錄音時正常處理停止請求', async () => {
            // Stop recording first
            await recordingService.stopRecording()

            // Try to stop again
            await expect(recordingService.stopRecording()).resolves.not.toThrow()
        })
    })

    describe('錄音狀態管理', () => {
        it('應該正確追蹤錄音時間', async () => {
            // Mock timer
            vi.useFakeTimers()

            Object.defineProperty(global, 'window', {
                value: { addEventListener: vi.fn(), removeEventListener: vi.fn() },
                writable: true
            })

            mockAudioRecorder.initialize.mockResolvedValue(undefined)
            mockAudioRecorder.startRecording.mockResolvedValue(undefined)
            mockWebSocket.connect.mockResolvedValue(undefined)
            mockWebSocket.isConnected = true
            mockTranscriptManager.connect.mockResolvedValue(undefined)
            mockTranscriptManager.isConnected.mockReturnValue(true)

            await recordingService.startRecording('test-session')

            // Advance timer by 5 seconds
            vi.advanceTimersByTime(5000)

            const state = recordingService.getRecordingState()
            expect(state.recordingTime).toBe(5)

            vi.useRealTimers()
        })

        it('應該正確報告錄音狀態', async () => {
            expect(recordingService.isRecording()).toBe(false)

            Object.defineProperty(global, 'window', {
                value: { addEventListener: vi.fn(), removeEventListener: vi.fn() },
                writable: true
            })

            mockAudioRecorder.initialize.mockResolvedValue(undefined)
            mockAudioRecorder.startRecording.mockResolvedValue(undefined)
            mockWebSocket.connect.mockResolvedValue(undefined)
            mockWebSocket.isConnected = true
            mockTranscriptManager.connect.mockResolvedValue(undefined)
            mockTranscriptManager.isConnected.mockReturnValue(true)

            await recordingService.startRecording('test-session')
            expect(recordingService.isRecording()).toBe(true)

            await recordingService.stopRecording()
            expect(recordingService.isRecording()).toBe(false)
        })

        it('應該正確報告錄音時間', () => {
            expect(recordingService.getRecordingTime()).toBe(0)
        })
    })

    describe('音頻切片處理', () => {
        it('應該處理音頻切片上傳', () => {
            const mockChunk = {
                sequence: 1,
                blob: new Blob(['test audio data'], { type: 'audio/webm' })
            }

            // Simulate chunk received
            const chunkHandler = mockAudioRecorder.onChunk.mock.calls[0]?.[0]
            if (chunkHandler) {
                chunkHandler(mockChunk)
            }

            // Verify WebSocket upload was called
            expect(mockWebSocket.uploadAudioChunk).toHaveBeenCalledWith(mockChunk.blob)
        })

        it('應該處理 ACK/Missing 重傳機制', () => {
            const ackMissingData = {
                acknowledged: [1, 2],
                missing: [3, 4]
            }

            // Simulate ACK/Missing message
            const ackHandler = mockWebSocket.onAckMissing.mock.calls[0]?.[0]
            if (ackHandler) {
                ackHandler(ackMissingData)
            }

            // Verify retry logic would be triggered for missing chunks
            expect(ackMissingData.missing).toEqual([3, 4])
        })
    })

    describe('錯誤處理', () => {
        it('應該處理音頻錄製器錯誤', async () => {
            const audioError = new Error('Audio recording error')

            // Simulate audio recorder error
            const errorHandler = mockAudioRecorder.onError.mock.calls[0]?.[0]
            if (errorHandler) {
                errorHandler(audioError)
            }

            const state = recordingService.getRecordingState()
            expect(state.error).toBe('Audio recording error')
        })

        it('應該清除錯誤狀態', () => {
            // Set error state
            recordingService['recordingState'].error = 'Test error'

            // Clear error (this would be called internally)
            recordingService['recordingState'].error = null

            const state = recordingService.getRecordingState()
            expect(state.error).toBeNull()
        })
    })

    describe('資源清理', () => {
        it('應該在錯誤時清理資源', async () => {
            Object.defineProperty(global, 'window', {
                value: { addEventListener: vi.fn(), removeEventListener: vi.fn() },
                writable: true
            })

            mockAudioRecorder.initialize.mockResolvedValue(undefined)
            mockAudioRecorder.startRecording.mockRejectedValue(new Error('Start failed'))

            await expect(recordingService.startRecording('test-session'))
                .rejects.toThrow('Start failed')

            // Verify cleanup was performed
            const state = recordingService.getRecordingState()
            expect(state.isRecording).toBe(false)
            expect(state.currentSessionId).toBeNull()
        })

        it('應該在服務停止時清理所有資源', async () => {
            Object.defineProperty(global, 'window', {
                value: { addEventListener: vi.fn(), removeEventListener: vi.fn() },
                writable: true
            })

            mockAudioRecorder.initialize.mockResolvedValue(undefined)
            mockAudioRecorder.startRecording.mockResolvedValue(undefined)
            mockWebSocket.connect.mockResolvedValue(undefined)
            mockWebSocket.isConnected = true
            mockTranscriptManager.connect.mockResolvedValue(undefined)
            mockTranscriptManager.isConnected.mockReturnValue(true)

            await recordingService.startRecording('test-session')
            await recordingService.stop()

            // Verify all resources are cleaned up
            expect(mockAudioRecorder.stopRecording).toHaveBeenCalled()
            expect(mockWebSocket.disconnect).toHaveBeenCalled()

            const state = recordingService.getRecordingState()
            expect(state.isRecording).toBe(false)
        })
    })

    describe('並發和競爭條件', () => {
        it('應該防止並發錄音操作', async () => {
            Object.defineProperty(global, 'window', {
                value: { addEventListener: vi.fn(), removeEventListener: vi.fn() },
                writable: true
            })

            mockAudioRecorder.initialize.mockResolvedValue(undefined)
            mockAudioRecorder.startRecording.mockResolvedValue(undefined)
            mockWebSocket.connect.mockResolvedValue(undefined)
            mockWebSocket.isConnected = true
            mockTranscriptManager.connect.mockResolvedValue(undefined)
            mockTranscriptManager.isConnected.mockReturnValue(true)

            // Start first recording
            const promise1 = recordingService.startRecording('session-1')

            // Try to start second recording immediately
            const promise2 = recordingService.startRecording('session-2')

            const results = await Promise.allSettled([promise1, promise2])

            // One should succeed, one should fail
            expect(results.filter(r => r.status === 'fulfilled')).toHaveLength(1)
            expect(results.filter(r => r.status === 'rejected')).toHaveLength(1)
        })

        it('應該處理快速的開始-停止操作', async () => {
            Object.defineProperty(global, 'window', {
                value: { addEventListener: vi.fn(), removeEventListener: vi.fn() },
                writable: true
            })

            mockAudioRecorder.initialize.mockResolvedValue(undefined)
            mockAudioRecorder.startRecording.mockResolvedValue(undefined)
            mockWebSocket.connect.mockResolvedValue(undefined)
            mockWebSocket.isConnected = true
            mockTranscriptManager.connect.mockResolvedValue(undefined)
            mockTranscriptManager.isConnected.mockReturnValue(true)

            await recordingService.startRecording('test-session')
            await recordingService.stopRecording()

            const state = recordingService.getRecordingState()
            expect(state.isRecording).toBe(false)
        })
    })

    describe('服務狀態報告', () => {
        it('應該報告正確的服務資訊', async () => {
            const status = await recordingService.getDetailedStatus()

            expect(status).toMatchObject({
                serviceName: 'RecordingService',
                isInitialized: expect.any(Boolean),
                isRunning: expect.any(Boolean),
                recordingState: expect.any(Object),
                audioSupport: expect.any(Object),
                webSocketConnected: expect.any(Boolean)
            })
        })
    })
})


# END FILE CONTENTS


# File: .cursorignore

/node_modules
/build
/temp
/xnotes
/.claude
/__pycache__
CLAUDE.local.md

# END FILE CONTENTS


# File: frontend/lib/transcript-manager-new.ts

"use client"

import { TranscriptWebSocket } from './websocket'
import { useAppStore } from './app-store-zustand'
import type { TranscriptEntry } from '../types/app-state'
import {
    TranscriptSegmentMessage,
    TranscriptCompleteMessage,
    ErrorMessage,
    TranscriptionErrorMessage,
    ConnectionEstablishedMessage,
    HeartbeatAckMessage,
    PongMessage,
    PhaseMessage
} from '../types/websocket-messages'

/**
 * TranscriptManager - 型別安全的逐字稿管理器
 *
 * 重構特色：
 * ✅ 使用 TypeScript discriminated union
 * ✅ 事件驅動架構替代 handleMessage 巨型方法
 * ✅ 型別安全的事件處理器
 * ✅ 移除 WebSocketManager hack
 */
export class TranscriptManager {
    private static instance: TranscriptManager | null = null
    private connections: Map<string, TranscriptWebSocket> = new Map()
    private connectionStates: Map<string, boolean> = new Map()
    private heartbeatIntervals: Map<string, NodeJS.Timeout> = new Map()
    private reconnectAttempts: Map<string, number> = new Map()
    private maxReconnectAttempts = 5
    private heartbeatInterval = 10000 // 10秒
    private reconnectDelay = 2000 // 2秒

    private constructor() {
        // Singleton pattern
        if (typeof window !== 'undefined') {
            (window as any).transcriptManager = this
        }
    }

    static getInstance(): TranscriptManager {
        if (!TranscriptManager.instance) {
            TranscriptManager.instance = new TranscriptManager()
        }
        return TranscriptManager.instance
    }

    /* ============================================================
     * 核心連接管理
     * ============================================================ */

    async connect(sessionId: string): Promise<void> {
        console.log(`🔗 [TranscriptManager] 連接會話: ${sessionId}`)

        // 檢查是否已有連接
        if (this.connections.has(sessionId) && this.isConnected(sessionId)) {
            console.log(`✅ [TranscriptManager] 會話 ${sessionId} 已連接`)
            return
        }

        // 清理舊連接
        if (this.connections.has(sessionId)) {
            await this.disconnect(sessionId)
        }

        try {
            await this.establishConnection(sessionId)
            console.log(`✅ [TranscriptManager] 會話 ${sessionId} 連接成功`)
        } catch (error) {
            console.error(`❌ [TranscriptManager] 會話 ${sessionId} 連接失敗:`, error)
            throw error
        }
    }

    async disconnect(sessionId: string): Promise<void> {
        console.log(`📱 [TranscriptManager] 斷開會話: ${sessionId}`)

        // 停止心跳
        this.stopHeartbeat(sessionId)

        // 斷開 WebSocket
        const ws = this.connections.get(sessionId)
        if (ws) {
            ws.disconnect()
            this.connections.delete(sessionId)
        }

        // 清理狀態
        this.connectionStates.set(sessionId, false)
        this.reconnectAttempts.delete(sessionId)
    }

    /* ============================================================
     * 私有方法：連接建立和事件綁定
     * ============================================================ */

    private async establishConnection(sessionId: string): Promise<void> {
        const ws = new TranscriptWebSocket(sessionId)

        // ✅ 使用型別安全的事件綁定（移除 hack）
        this.bindWebSocketEvents(ws, sessionId)

        // 設定關閉處理
        ws.onClose((event) => {
            console.log(`🔌 [TranscriptManager] 會話 ${sessionId} 連接關閉:`, event.code, event.reason)
            this.connectionStates.set(sessionId, false)
            this.stopHeartbeat(sessionId)

            // 如果不是手動關閉，嘗試重連
            if (event.code !== 1000) {
                this.scheduleReconnect(sessionId)
            }
        })

        // 建立連接
        await ws.connect()

        // 保存連接
        this.connections.set(sessionId, ws)
        this.connectionStates.set(sessionId, true)

        // 啟動心跳和初始化
        this.sendPing(sessionId)
        this.startHeartbeat(sessionId)
    }

    private bindWebSocketEvents(ws: TranscriptWebSocket, sessionId: string): void {
        console.log(`🎯 [TranscriptManager] 綁定事件處理器: ${sessionId}`)

        // ✅ 型別安全的事件監聽器
        ws.on('transcript_segment', (msg) => this.handleTranscriptSegment(sessionId, msg))
        ws.on('connection_established', (msg) => this.handleConnectionEstablished(sessionId, msg))
        ws.on('transcript_complete', (msg) => this.handleTranscriptComplete(sessionId, msg))
        ws.on('heartbeat_ack', (msg) => this.handleHeartbeatAck(sessionId, msg))
        ws.on('pong', (msg) => this.handlePong(sessionId, msg))
        ws.on('error', (msg) => this.handleError(sessionId, msg))
        ws.on('transcription_error', (msg) => this.handleTranscriptionError(sessionId, msg))
        ws.on('phase', (msg) => this.handlePhase(sessionId, msg))
    }

    /* ============================================================
     * 型別安全的事件處理器（取代巨型 handleMessage）
     * ============================================================ */

    private handleTranscriptSegment(sessionId: string, msg: TranscriptSegmentMessage): void {
        console.log('📝 [TranscriptManager] 收到逐字稿片段:', {
            sessionId,
            text: msg.text.substring(0, 50) + '...',
            start_time: msg.start_time,
            end_time: msg.end_time,
            confidence: msg.confidence
        })

        // 轉換為 UI 格式並推送到 store
        // 使用 start_time 並轉換為 HH:MM:SS 格式
        const startTimeInSeconds = msg.start_time ?? 0
        const hours = Math.floor(startTimeInSeconds / 3600)
        const minutes = Math.floor((startTimeInSeconds % 3600) / 60)
        const seconds = Math.floor(startTimeInSeconds % 60)

        const entry: TranscriptEntry = {
            startTime: startTimeInSeconds,
            time: `${hours.toString().padStart(2, "0")}:${minutes.toString().padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`,
            text: msg.text
        }

        console.log('🎯 [TranscriptManager] 推送到 store:', entry)
        useAppStore.getState().addTranscriptEntry(entry)

        // 檢查狀態轉換
        const currentState = useAppStore.getState()
        console.log('📊 [TranscriptManager] Store 狀態:', {
            appState: currentState.appState,
            transcriptCount: currentState.transcriptEntries.length
        })
    }

    private handleConnectionEstablished(sessionId: string, msg: ConnectionEstablishedMessage): void {
        console.log('✅ [TranscriptManager] 連接已建立:', {
            sessionId,
            message: msg.message,
            timestamp: msg.timestamp
        })
    }

    private handleTranscriptComplete(sessionId: string, msg: TranscriptCompleteMessage): void {
        console.log('🎯 [TranscriptManager] 轉錄完成:', {
            sessionId,
            message: msg.message,
            timestamp: msg.timestamp
        })
        // 可以在這裡觸發完成狀態或通知
    }

    private handleHeartbeatAck(sessionId: string, msg: HeartbeatAckMessage): void {
        console.log('💓 [TranscriptManager] 心跳確認:', {
            sessionId,
            timestamp: msg.timestamp
        })
    }

    private handlePong(sessionId: string, msg: PongMessage): void {
        console.log('🏓 [TranscriptManager] Pong 回應:', {
            sessionId,
            timestamp: msg.timestamp
        })
    }

    private handleError(sessionId: string, msg: ErrorMessage): void {
        console.error('🚨 [TranscriptManager] 收到錯誤:', {
            sessionId,
            error_type: msg.error_type,
            error_message: msg.error_message,
            details: msg.details
        })
        // 可以在這裡觸發錯誤處理邏輯
    }

    private handleTranscriptionError(sessionId: string, msg: TranscriptionErrorMessage): void {
        console.error('🚨 [TranscriptManager] 轉錄錯誤:', {
            sessionId,
            error_type: msg.error_type,
            error_message: msg.error_message
        })
    }

    private handlePhase(sessionId: string, msg: PhaseMessage): void {
        console.log(`📍 [TranscriptManager] 相位變更: ${msg.phase}`, {
            sessionId,
            phase: msg.phase
        })

        // 🎯 根據 phase 更新應用狀態
        if (msg.phase === 'active') {
            console.log('✅ [TranscriptManager] 收到 active phase，切換到 recording_active')
            useAppStore.getState().setState('recording_active')
        } else if (msg.phase === 'waiting') {
            console.log('⏳ [TranscriptManager] 收到 waiting phase，保持 recording_waiting')
            useAppStore.getState().setState('recording_waiting')
        }
    }

    /* ============================================================
     * 心跳和重連機制
     * ============================================================ */

    private sendPing(sessionId: string): void {
        const ws = this.connections.get(sessionId)
        if (ws && ws.isConnected) {
            ws.sendJson({ type: 'ping' })
            console.log(`🏓 [TranscriptManager] 發送 ping: ${sessionId}`)
        }
    }

    private sendHeartbeat(sessionId: string): void {
        const ws = this.connections.get(sessionId)
        if (ws && ws.isConnected) {
            try {
                ws.sendJson({
                    type: 'heartbeat',
                    timestamp: Date.now()
                })
                console.log(`💓 [TranscriptManager] 發送心跳: ${sessionId}`)
            } catch (error) {
                console.error(`❌ [TranscriptManager] 心跳失敗 ${sessionId}:`, error)
                this.connectionStates.set(sessionId, false)
                this.scheduleReconnect(sessionId)
            }
        }
    }

    private startHeartbeat(sessionId: string): void {
        this.stopHeartbeat(sessionId)

        const interval = setInterval(() => {
            this.sendHeartbeat(sessionId)
        }, this.heartbeatInterval)

        this.heartbeatIntervals.set(sessionId, interval)
        console.log(`💓 [TranscriptManager] 啟動心跳: ${sessionId}`)
    }

    private stopHeartbeat(sessionId: string): void {
        const interval = this.heartbeatIntervals.get(sessionId)
        if (interval) {
            clearInterval(interval)
            this.heartbeatIntervals.delete(sessionId)
            console.log(`💓 [TranscriptManager] 停止心跳: ${sessionId}`)
        }
    }

    private scheduleReconnect(sessionId: string): void {
        const attempts = this.reconnectAttempts.get(sessionId) ?? 0

        if (attempts >= this.maxReconnectAttempts) {
            console.error(`❌ [TranscriptManager] 重連次數已達上限: ${sessionId}`)
            return
        }

        this.reconnectAttempts.set(sessionId, attempts + 1)
        const delay = this.reconnectDelay * Math.pow(2, attempts)

        console.log(`🔄 [TranscriptManager] 排程重連: ${sessionId} (${attempts + 1}/${this.maxReconnectAttempts}) ${delay}ms`)

        setTimeout(async () => {
            try {
                await this.establishConnection(sessionId)
                this.reconnectAttempts.set(sessionId, 0)
                console.log(`✅ [TranscriptManager] 重連成功: ${sessionId}`)
            } catch (error) {
                console.error(`❌ [TranscriptManager] 重連失敗: ${sessionId}`, error)
            }
        }, delay)
    }

    /* ============================================================
 * 向後兼容方法（支援舊的 API）
 * ============================================================ */

    /**
     * @deprecated 舊 API 兼容性 - 請使用事件驅動方式
     */
    addListener(sessionId: string, callback: (message: any) => void): void {
        console.warn('⚠️ [TranscriptManager] addListener 已棄用，請使用事件驅動方式')
        // 為了兼容性，暫時保留但不實作
    }

    /**
     * @deprecated 舊 API 兼容性 - 請使用事件驅動方式
     */
    removeListener(sessionId: string, callback: (message: any) => void): void {
        console.warn('⚠️ [TranscriptManager] removeListener 已棄用，請使用事件驅動方式')
        // 為了兼容性，暫時保留但不實作
    }

    /* ============================================================
     * 公共工具方法
     * ============================================================ */

    isConnected(sessionId: string): boolean {
        const ws = this.connections.get(sessionId)
        const actualConnected = ws?.isConnected ?? false

        // 同步狀態
        const stateConnected = this.connectionStates.get(sessionId) ?? false
        if (stateConnected !== actualConnected) {
            this.connectionStates.set(sessionId, actualConnected)
        }

        return actualConnected
    }

    getConnectionCount(): number {
        return Array.from(this.connections.values()).filter(ws => ws.isConnected).length
    }

    async disconnectAll(): Promise<void> {
        console.log('📱 [TranscriptManager] 清理所有連接')
        const sessionIds = Array.from(this.connections.keys())
        await Promise.all(sessionIds.map(sessionId => this.disconnect(sessionId)))
    }
}

// 匯出 Singleton 實例
export const transcriptManager = TranscriptManager.getInstance()


# END FILE CONTENTS


# File: frontend/pnpm-lock.yaml

lockfileVersion: '9.0'

settings:
  autoInstallPeers: true
  excludeLinksFromLockfile: false

importers:

  .:
    dependencies:
      '@hookform/resolvers':
        specifier: ^3.9.1
        version: 3.10.0(react-hook-form@7.59.0(react@19.1.0))
      '@radix-ui/react-accordion':
        specifier: 1.2.2
        version: 1.2.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-alert-dialog':
        specifier: 1.1.4
        version: 1.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-aspect-ratio':
        specifier: 1.1.1
        version: 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-avatar':
        specifier: 1.1.2
        version: 1.1.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-checkbox':
        specifier: 1.1.3
        version: 1.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-collapsible':
        specifier: 1.1.2
        version: 1.1.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-context-menu':
        specifier: 2.2.4
        version: 2.2.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-dialog':
        specifier: 1.1.4
        version: 1.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-dropdown-menu':
        specifier: 2.1.4
        version: 2.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-hover-card':
        specifier: 1.1.4
        version: 1.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-label':
        specifier: 2.1.1
        version: 2.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-menubar':
        specifier: 1.1.4
        version: 1.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-navigation-menu':
        specifier: 1.2.3
        version: 1.2.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-popover':
        specifier: 1.1.4
        version: 1.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-progress':
        specifier: 1.1.1
        version: 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-radio-group':
        specifier: 1.2.2
        version: 1.2.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-scroll-area':
        specifier: 1.2.2
        version: 1.2.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-select':
        specifier: 2.1.4
        version: 2.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-separator':
        specifier: 1.1.1
        version: 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-slider':
        specifier: 1.2.2
        version: 1.2.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-slot':
        specifier: 1.1.1
        version: 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-switch':
        specifier: 1.1.2
        version: 1.1.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-tabs':
        specifier: 1.1.2
        version: 1.1.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-toast':
        specifier: 1.2.4
        version: 1.2.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-toggle':
        specifier: 1.1.1
        version: 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-toggle-group':
        specifier: 1.1.1
        version: 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-tooltip':
        specifier: 1.1.6
        version: 1.1.6(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      axios:
        specifier: ^1.10.0
        version: 1.10.0
      class-variance-authority:
        specifier: ^0.7.1
        version: 0.7.1
      clsx:
        specifier: ^2.1.1
        version: 2.1.1
      cmdk:
        specifier: 1.0.4
        version: 1.0.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      date-fns:
        specifier: 4.1.0
        version: 4.1.0
      easymde:
        specifier: latest
        version: 2.20.0
      embla-carousel-react:
        specifier: 8.5.1
        version: 8.5.1(react@19.1.0)
      input-otp:
        specifier: 1.4.1
        version: 1.4.1(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      lucide-react:
        specifier: ^0.454.0
        version: 0.454.0(react@19.1.0)
      next:
        specifier: 15.2.4
        version: 15.2.4(@babel/core@7.28.0)(@playwright/test@1.53.2)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      next-themes:
        specifier: ^0.4.4
        version: 0.4.6(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      react:
        specifier: ^19
        version: 19.1.0
      react-day-picker:
        specifier: 8.10.1
        version: 8.10.1(date-fns@4.1.0)(react@19.1.0)
      react-dom:
        specifier: ^19
        version: 19.1.0(react@19.1.0)
      react-hook-form:
        specifier: ^7.54.1
        version: 7.59.0(react@19.1.0)
      react-resizable-panels:
        specifier: ^2.1.7
        version: 2.1.9(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      react-simplemde-editor:
        specifier: latest
        version: 5.2.0(easymde@2.20.0)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      recharts:
        specifier: 2.15.0
        version: 2.15.0(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      sonner:
        specifier: ^1.7.1
        version: 1.7.4(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      tailwind-merge:
        specifier: ^2.5.5
        version: 2.6.0
      tailwindcss-animate:
        specifier: ^1.0.7
        version: 1.0.7(tailwindcss@3.4.17)
      vaul:
        specifier: ^0.9.6
        version: 0.9.9(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      zod:
        specifier: ^3.24.1
        version: 3.25.71
      zustand:
        specifier: ^5.0.6
        version: 5.0.6(@types/react@19.1.8)(react@19.1.0)(use-sync-external-store@1.5.0(react@19.1.0))
    devDependencies:
      '@playwright/test':
        specifier: ^1.44.1
        version: 1.53.2
      '@testing-library/jest-dom':
        specifier: ^6.6.3
        version: 6.6.3
      '@testing-library/react':
        specifier: ^16.3.0
        version: 16.3.0(@testing-library/dom@10.4.0)(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@testing-library/user-event':
        specifier: ^14.6.1
        version: 14.6.1(@testing-library/dom@10.4.0)
      '@types/node':
        specifier: ^22
        version: 22.16.0
      '@types/react':
        specifier: ^19
        version: 19.1.8
      '@types/react-dom':
        specifier: ^19
        version: 19.1.6(@types/react@19.1.8)
      '@vitejs/plugin-react':
        specifier: ^4.6.0
        version: 4.6.0(vite@7.0.0(@types/node@22.16.0)(jiti@1.21.7)(yaml@2.8.0))
      '@vitest/ui':
        specifier: ^3.2.4
        version: 3.2.4(vitest@3.2.4)
      autoprefixer:
        specifier: ^10.4.20
        version: 10.4.21(postcss@8.5.6)
      eslint:
        specifier: ^9
        version: 9.30.1(jiti@1.21.7)
      eslint-config-next:
        specifier: 15.3.4
        version: 15.3.4(eslint@9.30.1(jiti@1.21.7))(typescript@5.8.3)
      jsdom:
        specifier: ^26.1.0
        version: 26.1.0
      postcss:
        specifier: ^8.5.0
        version: 8.5.6
      tailwindcss:
        specifier: ^3.4.17
        version: 3.4.17
      typescript:
        specifier: ^5
        version: 5.8.3
      vitest:
        specifier: ^3.2.4
        version: 3.2.4(@types/node@22.16.0)(@vitest/ui@3.2.4)(jiti@1.21.7)(jsdom@26.1.0)(yaml@2.8.0)

packages:

  '@adobe/css-tools@4.4.3':
    resolution: {integrity: sha512-VQKMkwriZbaOgVCby1UDY/LDk5fIjhQicCvVPFqfe+69fWaPWydbWJ3wRt59/YzIwda1I81loas3oCoHxnqvdA==}

  '@alloc/quick-lru@5.2.0':
    resolution: {integrity: sha512-UrcABB+4bUrFABwbluTIBErXwvbsU/V7TZWfmbgJfbkwiBuziS9gxdODUyuiecfdGQ85jglMW6juS3+z5TsKLw==}
    engines: {node: '>=10'}

  '@ampproject/remapping@2.3.0':
    resolution: {integrity: sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==}
    engines: {node: '>=6.0.0'}

  '@asamuzakjp/css-color@3.2.0':
    resolution: {integrity: sha512-K1A6z8tS3XsmCMM86xoWdn7Fkdn9m6RSVtocUrJYIwZnFVkng/PvkEoWtOWmP+Scc6saYWHWZYbndEEXxl24jw==}

  '@babel/code-frame@7.27.1':
    resolution: {integrity: sha512-cjQ7ZlQ0Mv3b47hABuTevyTuYN4i+loJKGeV9flcCgIK37cCXRh+L1bd3iBHlynerhQ7BhCkn2BPbQUL+rGqFg==}
    engines: {node: '>=6.9.0'}

  '@babel/compat-data@7.28.0':
    resolution: {integrity: sha512-60X7qkglvrap8mn1lh2ebxXdZYtUcpd7gsmy9kLaBJ4i/WdY8PqTSdxyA8qraikqKQK5C1KRBKXqznrVapyNaw==}
    engines: {node: '>=6.9.0'}

  '@babel/core@7.28.0':
    resolution: {integrity: sha512-UlLAnTPrFdNGoFtbSXwcGFQBtQZJCNjaN6hQNP3UPvuNXT1i82N26KL3dZeIpNalWywr9IuQuncaAfUaS1g6sQ==}
    engines: {node: '>=6.9.0'}

  '@babel/generator@7.28.0':
    resolution: {integrity: sha512-lJjzvrbEeWrhB4P3QBsH7tey117PjLZnDbLiQEKjQ/fNJTjuq4HSqgFA+UNSwZT8D7dxxbnuSBMsa1lrWzKlQg==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-compilation-targets@7.27.2':
    resolution: {integrity: sha512-2+1thGUUWWjLTYTHZWK1n8Yga0ijBz1XAhUXcKy81rd5g6yh7hGqMp45v7cadSbEHc9G3OTv45SyneRN3ps4DQ==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-globals@7.28.0':
    resolution: {integrity: sha512-+W6cISkXFa1jXsDEdYA8HeevQT/FULhxzR99pxphltZcVaugps53THCeiWA8SguxxpSp3gKPiuYfSWopkLQ4hw==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-module-imports@7.27.1':
    resolution: {integrity: sha512-0gSFWUPNXNopqtIPQvlD5WgXYI5GY2kP2cCvoT8kczjbfcfuIljTbcWrulD1CIPIX2gt1wghbDy08yE1p+/r3w==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-module-transforms@7.27.3':
    resolution: {integrity: sha512-dSOvYwvyLsWBeIRyOeHXp5vPj5l1I011r52FM1+r1jCERv+aFXYk4whgQccYEGYxK2H3ZAIA8nuPkQ0HaUo3qg==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0

  '@babel/helper-plugin-utils@7.27.1':
    resolution: {integrity: sha512-1gn1Up5YXka3YYAHGKpbideQ5Yjf1tDa9qYcgysz+cNCXukyLl6DjPXhD3VRwSb8c0J9tA4b2+rHEZtc6R0tlw==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-string-parser@7.27.1':
    resolution: {integrity: sha512-qMlSxKbpRlAridDExk92nSobyDdpPijUq2DW6oDnUqd0iOGxmQjyqhMIihI9+zv4LPyZdRje2cavWPbCbWm3eA==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-validator-identifier@7.27.1':
    resolution: {integrity: sha512-D2hP9eA+Sqx1kBZgzxZh0y1trbuU+JoDkiEwqhQ36nodYqJwyEIhPSdMNd7lOm/4io72luTPWH20Yda0xOuUow==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-validator-option@7.27.1':
    resolution: {integrity: sha512-YvjJow9FxbhFFKDSuFnVCe2WxXk1zWc22fFePVNEaWJEu8IrZVlda6N0uHwzZrUM1il7NC9Mlp4MaJYbYd9JSg==}
    engines: {node: '>=6.9.0'}

  '@babel/helpers@7.27.6':
    resolution: {integrity: sha512-muE8Tt8M22638HU31A3CgfSUciwz1fhATfoVai05aPXGor//CdWDCbnlY1yvBPo07njuVOCNGCSp/GTt12lIug==}
    engines: {node: '>=6.9.0'}

  '@babel/parser@7.28.0':
    resolution: {integrity: sha512-jVZGvOxOuNSsuQuLRTh13nU0AogFlw32w/MT+LV6D3sP5WdbW61E77RnkbaO2dUvmPAYrBDJXGn5gGS6tH4j8g==}
    engines: {node: '>=6.0.0'}
    hasBin: true

  '@babel/plugin-transform-react-jsx-self@7.27.1':
    resolution: {integrity: sha512-6UzkCs+ejGdZ5mFFC/OCUrv028ab2fp1znZmCZjAOBKiBK2jXD1O+BPSfX8X2qjJ75fZBMSnQn3Rq2mrBJK2mw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-react-jsx-source@7.27.1':
    resolution: {integrity: sha512-zbwoTsBruTeKB9hSq73ha66iFeJHuaFkUbwvqElnygoNbj/jHRsSeokowZFN3CZ64IvEqcmmkVe89OPXc7ldAw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/runtime@7.27.6':
    resolution: {integrity: sha512-vbavdySgbTTrmFE+EsiqUTzlOr5bzlnJtUv9PynGCAKvfQqjIXbvFdumPM/GxMDfyuGMJaJAU6TO4zc1Jf1i8Q==}
    engines: {node: '>=6.9.0'}

  '@babel/template@7.27.2':
    resolution: {integrity: sha512-LPDZ85aEJyYSd18/DkjNh4/y1ntkE5KwUHWTiqgRxruuZL2F1yuHligVHLvcHY2vMHXttKFpJn6LwfI7cw7ODw==}
    engines: {node: '>=6.9.0'}

  '@babel/traverse@7.28.0':
    resolution: {integrity: sha512-mGe7UK5wWyh0bKRfupsUchrQGqvDbZDbKJw+kcRGSmdHVYrv+ltd0pnpDTVpiTqnaBru9iEvA8pz8W46v0Amwg==}
    engines: {node: '>=6.9.0'}

  '@babel/types@7.28.0':
    resolution: {integrity: sha512-jYnje+JyZG5YThjHiF28oT4SIZLnYOcSBb6+SDaFIyzDVSkXQmQQYclJ2R+YxcdmK0AX6x1E5OQNtuh3jHDrUg==}
    engines: {node: '>=6.9.0'}

  '@csstools/color-helpers@5.0.2':
    resolution: {integrity: sha512-JqWH1vsgdGcw2RR6VliXXdA0/59LttzlU8UlRT/iUUsEeWfYq8I+K0yhihEUTTHLRm1EXvpsCx3083EU15ecsA==}
    engines: {node: '>=18'}

  '@csstools/css-calc@2.1.4':
    resolution: {integrity: sha512-3N8oaj+0juUw/1H3YwmDDJXCgTB1gKU6Hc/bB502u9zR0q2vd786XJH9QfrKIEgFlZmhZiq6epXl4rHqhzsIgQ==}
    engines: {node: '>=18'}
    peerDependencies:
      '@csstools/css-parser-algorithms': ^3.0.5
      '@csstools/css-tokenizer': ^3.0.4

  '@csstools/css-color-parser@3.0.10':
    resolution: {integrity: sha512-TiJ5Ajr6WRd1r8HSiwJvZBiJOqtH86aHpUjq5aEKWHiII2Qfjqd/HCWKPOW8EP4vcspXbHnXrwIDlu5savQipg==}
    engines: {node: '>=18'}
    peerDependencies:
      '@csstools/css-parser-algorithms': ^3.0.5
      '@csstools/css-tokenizer': ^3.0.4

  '@csstools/css-parser-algorithms@3.0.5':
    resolution: {integrity: sha512-DaDeUkXZKjdGhgYaHNJTV9pV7Y9B3b644jCLs9Upc3VeNGg6LWARAT6O+Q+/COo+2gg/bM5rhpMAtf70WqfBdQ==}
    engines: {node: '>=18'}
    peerDependencies:
      '@csstools/css-tokenizer': ^3.0.4

  '@csstools/css-tokenizer@3.0.4':
    resolution: {integrity: sha512-Vd/9EVDiu6PPJt9yAh6roZP6El1xHrdvIVGjyBsHR0RYwNHgL7FJPyIIW4fANJNG6FtyZfvlRPpFI4ZM/lubvw==}
    engines: {node: '>=18'}

  '@emnapi/core@1.4.3':
    resolution: {integrity: sha512-4m62DuCE07lw01soJwPiBGC0nAww0Q+RY70VZ+n49yDIO13yyinhbWCeNnaob0lakDtWQzSdtNWzJeOJt2ma+g==}

  '@emnapi/runtime@1.4.3':
    resolution: {integrity: sha512-pBPWdu6MLKROBX05wSNKcNb++m5Er+KQ9QkB+WVM+pW2Kx9hoSrVTnu3BdkI5eBLZoKu/J6mW/B6i6bJB2ytXQ==}

  '@emnapi/wasi-threads@1.0.2':
    resolution: {integrity: sha512-5n3nTJblwRi8LlXkJ9eBzu+kZR8Yxcc7ubakyQTFzPMtIhFpUBRbsnc2Dv88IZDIbCDlBiWrknhB4Lsz7mg6BA==}

  '@esbuild/aix-ppc64@0.25.5':
    resolution: {integrity: sha512-9o3TMmpmftaCMepOdA5k/yDw8SfInyzWWTjYTFCX3kPSDJMROQTb8jg+h9Cnwnmm1vOzvxN7gIfB5V2ewpjtGA==}
    engines: {node: '>=18'}
    cpu: [ppc64]
    os: [aix]

  '@esbuild/android-arm64@0.25.5':
    resolution: {integrity: sha512-VGzGhj4lJO+TVGV1v8ntCZWJktV7SGCs3Pn1GRWI1SBFtRALoomm8k5E9Pmwg3HOAal2VDc2F9+PM/rEY6oIDg==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [android]

  '@esbuild/android-arm@0.25.5':
    resolution: {integrity: sha512-AdJKSPeEHgi7/ZhuIPtcQKr5RQdo6OO2IL87JkianiMYMPbCtot9fxPbrMiBADOWWm3T2si9stAiVsGbTQFkbA==}
    engines: {node: '>=18'}
    cpu: [arm]
    os: [android]

  '@esbuild/android-x64@0.25.5':
    resolution: {integrity: sha512-D2GyJT1kjvO//drbRT3Hib9XPwQeWd9vZoBJn+bu/lVsOZ13cqNdDeqIF/xQ5/VmWvMduP6AmXvylO/PIc2isw==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [android]

  '@esbuild/darwin-arm64@0.25.5':
    resolution: {integrity: sha512-GtaBgammVvdF7aPIgH2jxMDdivezgFu6iKpmT+48+F8Hhg5J/sfnDieg0aeG/jfSvkYQU2/pceFPDKlqZzwnfQ==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [darwin]

  '@esbuild/darwin-x64@0.25.5':
    resolution: {integrity: sha512-1iT4FVL0dJ76/q1wd7XDsXrSW+oLoquptvh4CLR4kITDtqi2e/xwXwdCVH8hVHU43wgJdsq7Gxuzcs6Iq/7bxQ==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [darwin]

  '@esbuild/freebsd-arm64@0.25.5':
    resolution: {integrity: sha512-nk4tGP3JThz4La38Uy/gzyXtpkPW8zSAmoUhK9xKKXdBCzKODMc2adkB2+8om9BDYugz+uGV7sLmpTYzvmz6Sw==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [freebsd]

  '@esbuild/freebsd-x64@0.25.5':
    resolution: {integrity: sha512-PrikaNjiXdR2laW6OIjlbeuCPrPaAl0IwPIaRv+SMV8CiM8i2LqVUHFC1+8eORgWyY7yhQY+2U2fA55mBzReaw==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [freebsd]

  '@esbuild/linux-arm64@0.25.5':
    resolution: {integrity: sha512-Z9kfb1v6ZlGbWj8EJk9T6czVEjjq2ntSYLY2cw6pAZl4oKtfgQuS4HOq41M/BcoLPzrUbNd+R4BXFyH//nHxVg==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [linux]

  '@esbuild/linux-arm@0.25.5':
    resolution: {integrity: sha512-cPzojwW2okgh7ZlRpcBEtsX7WBuqbLrNXqLU89GxWbNt6uIg78ET82qifUy3W6OVww6ZWobWub5oqZOVtwolfw==}
    engines: {node: '>=18'}
    cpu: [arm]
    os: [linux]

  '@esbuild/linux-ia32@0.25.5':
    resolution: {integrity: sha512-sQ7l00M8bSv36GLV95BVAdhJ2QsIbCuCjh/uYrWiMQSUuV+LpXwIqhgJDcvMTj+VsQmqAHL2yYaasENvJ7CDKA==}
    engines: {node: '>=18'}
    cpu: [ia32]
    os: [linux]

  '@esbuild/linux-loong64@0.25.5':
    resolution: {integrity: sha512-0ur7ae16hDUC4OL5iEnDb0tZHDxYmuQyhKhsPBV8f99f6Z9KQM02g33f93rNH5A30agMS46u2HP6qTdEt6Q1kg==}
    engines: {node: '>=18'}
    cpu: [loong64]
    os: [linux]

  '@esbuild/linux-mips64el@0.25.5':
    resolution: {integrity: sha512-kB/66P1OsHO5zLz0i6X0RxlQ+3cu0mkxS3TKFvkb5lin6uwZ/ttOkP3Z8lfR9mJOBk14ZwZ9182SIIWFGNmqmg==}
    engines: {node: '>=18'}
    cpu: [mips64el]
    os: [linux]

  '@esbuild/linux-ppc64@0.25.5':
    resolution: {integrity: sha512-UZCmJ7r9X2fe2D6jBmkLBMQetXPXIsZjQJCjgwpVDz+YMcS6oFR27alkgGv3Oqkv07bxdvw7fyB71/olceJhkQ==}
    engines: {node: '>=18'}
    cpu: [ppc64]
    os: [linux]

  '@esbuild/linux-riscv64@0.25.5':
    resolution: {integrity: sha512-kTxwu4mLyeOlsVIFPfQo+fQJAV9mh24xL+y+Bm6ej067sYANjyEw1dNHmvoqxJUCMnkBdKpvOn0Ahql6+4VyeA==}
    engines: {node: '>=18'}
    cpu: [riscv64]
    os: [linux]

  '@esbuild/linux-s390x@0.25.5':
    resolution: {integrity: sha512-K2dSKTKfmdh78uJ3NcWFiqyRrimfdinS5ErLSn3vluHNeHVnBAFWC8a4X5N+7FgVE1EjXS1QDZbpqZBjfrqMTQ==}
    engines: {node: '>=18'}
    cpu: [s390x]
    os: [linux]

  '@esbuild/linux-x64@0.25.5':
    resolution: {integrity: sha512-uhj8N2obKTE6pSZ+aMUbqq+1nXxNjZIIjCjGLfsWvVpy7gKCOL6rsY1MhRh9zLtUtAI7vpgLMK6DxjO8Qm9lJw==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [linux]

  '@esbuild/netbsd-arm64@0.25.5':
    resolution: {integrity: sha512-pwHtMP9viAy1oHPvgxtOv+OkduK5ugofNTVDilIzBLpoWAM16r7b/mxBvfpuQDpRQFMfuVr5aLcn4yveGvBZvw==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [netbsd]

  '@esbuild/netbsd-x64@0.25.5':
    resolution: {integrity: sha512-WOb5fKrvVTRMfWFNCroYWWklbnXH0Q5rZppjq0vQIdlsQKuw6mdSihwSo4RV/YdQ5UCKKvBy7/0ZZYLBZKIbwQ==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [netbsd]

  '@esbuild/openbsd-arm64@0.25.5':
    resolution: {integrity: sha512-7A208+uQKgTxHd0G0uqZO8UjK2R0DDb4fDmERtARjSHWxqMTye4Erz4zZafx7Di9Cv+lNHYuncAkiGFySoD+Mw==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [openbsd]

  '@esbuild/openbsd-x64@0.25.5':
    resolution: {integrity: sha512-G4hE405ErTWraiZ8UiSoesH8DaCsMm0Cay4fsFWOOUcz8b8rC6uCvnagr+gnioEjWn0wC+o1/TAHt+It+MpIMg==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [openbsd]

  '@esbuild/sunos-x64@0.25.5':
    resolution: {integrity: sha512-l+azKShMy7FxzY0Rj4RCt5VD/q8mG/e+mDivgspo+yL8zW7qEwctQ6YqKX34DTEleFAvCIUviCFX1SDZRSyMQA==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [sunos]

  '@esbuild/win32-arm64@0.25.5':
    resolution: {integrity: sha512-O2S7SNZzdcFG7eFKgvwUEZ2VG9D/sn/eIiz8XRZ1Q/DO5a3s76Xv0mdBzVM5j5R639lXQmPmSo0iRpHqUUrsxw==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [win32]

  '@esbuild/win32-ia32@0.25.5':
    resolution: {integrity: sha512-onOJ02pqs9h1iMJ1PQphR+VZv8qBMQ77Klcsqv9CNW2w6yLqoURLcgERAIurY6QE63bbLuqgP9ATqajFLK5AMQ==}
    engines: {node: '>=18'}
    cpu: [ia32]
    os: [win32]

  '@esbuild/win32-x64@0.25.5':
    resolution: {integrity: sha512-TXv6YnJ8ZMVdX+SXWVBo/0p8LTcrUYngpWjvm91TMjjBQii7Oz11Lw5lbDV5Y0TzuhSJHwiH4hEtC1I42mMS0g==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [win32]

  '@eslint-community/eslint-utils@4.7.0':
    resolution: {integrity: sha512-dyybb3AcajC7uha6CvhdVRJqaKyn7w2YKqKyAN37NKYgZT36w+iRb0Dymmc5qEJ549c/S31cMMSFd75bteCpCw==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}
    peerDependencies:
      eslint: ^6.0.0 || ^7.0.0 || >=8.0.0

  '@eslint-community/regexpp@4.12.1':
    resolution: {integrity: sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==}
    engines: {node: ^12.0.0 || ^14.0.0 || >=16.0.0}

  '@eslint/config-array@0.21.0':
    resolution: {integrity: sha512-ENIdc4iLu0d93HeYirvKmrzshzofPw6VkZRKQGe9Nv46ZnWUzcF1xV01dcvEg/1wXUR61OmmlSfyeyO7EvjLxQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@eslint/config-helpers@0.3.0':
    resolution: {integrity: sha512-ViuymvFmcJi04qdZeDc2whTHryouGcDlaxPqarTD0ZE10ISpxGUVZGZDx4w01upyIynL3iu6IXH2bS1NhclQMw==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@eslint/core@0.14.0':
    resolution: {integrity: sha512-qIbV0/JZr7iSDjqAc60IqbLdsj9GDt16xQtWD+B78d/HAlvysGdZZ6rpJHGAc2T0FQx1X6thsSPdnoiGKdNtdg==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@eslint/core@0.15.1':
    resolution: {integrity: sha512-bkOp+iumZCCbt1K1CmWf0R9pM5yKpDv+ZXtvSyQpudrI9kuFLp+bM2WOPXImuD/ceQuaa8f5pj93Y7zyECIGNA==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@eslint/eslintrc@3.3.1':
    resolution: {integrity: sha512-gtF186CXhIl1p4pJNGZw8Yc6RlshoePRvE0X91oPGb3vZ8pM3qOS9W9NGPat9LziaBV7XrJWGylNQXkGcnM3IQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@eslint/js@9.30.1':
    resolution: {integrity: sha512-zXhuECFlyep42KZUhWjfvsmXGX39W8K8LFb8AWXM9gSV9dQB+MrJGLKvW6Zw0Ggnbpw0VHTtrhFXYe3Gym18jg==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@eslint/object-schema@2.1.6':
    resolution: {integrity: sha512-RBMg5FRL0I0gs51M/guSAj5/e14VQ4tpZnQNWwuDT66P14I43ItmPfIZRhO9fUVIPOAQXU47atlywZ/czoqFPA==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@eslint/plugin-kit@0.3.3':
    resolution: {integrity: sha512-1+WqvgNMhmlAambTvT3KPtCl/Ibr68VldY2XY40SL1CE0ZXiakFR/cbTspaF5HsnpDMvcYYoJHfl4980NBjGag==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@floating-ui/core@1.7.2':
    resolution: {integrity: sha512-wNB5ooIKHQc+Kui96jE/n69rHFWAVoxn5CAzL1Xdd8FG03cgY3MLO+GF9U3W737fYDSgPWA6MReKhBQBop6Pcw==}

  '@floating-ui/dom@1.7.2':
    resolution: {integrity: sha512-7cfaOQuCS27HD7DX+6ib2OrnW+b4ZBwDNnCcT0uTyidcmyWb03FnQqJybDBoCnpdxwBSfA94UAYlRCt7mV+TbA==}

  '@floating-ui/react-dom@2.1.4':
    resolution: {integrity: sha512-JbbpPhp38UmXDDAu60RJmbeme37Jbgsm7NrHGgzYYFKmblzRUh6Pa641dII6LsjwF4XlScDrde2UAzDo/b9KPw==}
    peerDependencies:
      react: '>=16.8.0'
      react-dom: '>=16.8.0'

  '@floating-ui/utils@0.2.10':
    resolution: {integrity: sha512-aGTxbpbg8/b5JfU1HXSrbH3wXZuLPJcNEcZQFMxLs3oSzgtVu6nFPkbbGGUvBcUjKV2YyB9Wxxabo+HEH9tcRQ==}

  '@hookform/resolvers@3.10.0':
    resolution: {integrity: sha512-79Dv+3mDF7i+2ajj7SkypSKHhl1cbln1OGavqrsF7p6mbUv11xpqpacPsGDCTRvCSjEEIez2ef1NveSVL3b0Ag==}
    peerDependencies:
      react-hook-form: ^7.0.0

  '@humanfs/core@0.19.1':
    resolution: {integrity: sha512-5DyQ4+1JEUzejeK1JGICcideyfUbGixgS9jNgex5nqkW+cY7WZhxBigmieN5Qnw9ZosSNVC9KQKyb+GUaGyKUA==}
    engines: {node: '>=18.18.0'}

  '@humanfs/node@0.16.6':
    resolution: {integrity: sha512-YuI2ZHQL78Q5HbhDiBA1X4LmYdXCKCMQIfw0pw7piHJwyREFebJUvrQN4cMssyES6x+vfUbx1CIpaQUKYdQZOw==}
    engines: {node: '>=18.18.0'}

  '@humanwhocodes/module-importer@1.0.1':
    resolution: {integrity: sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==}
    engines: {node: '>=12.22'}

  '@humanwhocodes/retry@0.3.1':
    resolution: {integrity: sha512-JBxkERygn7Bv/GbN5Rv8Ul6LVknS+5Bp6RgDC/O8gEBU/yeH5Ui5C/OlWrTb6qct7LjjfT6Re2NxB0ln0yYybA==}
    engines: {node: '>=18.18'}

  '@humanwhocodes/retry@0.4.3':
    resolution: {integrity: sha512-bV0Tgo9K4hfPCek+aMAn81RppFKv2ySDQeMoSZuvTASywNTnVJCArCZE2FWqpvIatKu7VMRLWlR1EazvVhDyhQ==}
    engines: {node: '>=18.18'}

  '@img/sharp-darwin-arm64@0.33.5':
    resolution: {integrity: sha512-UT4p+iz/2H4twwAoLCqfA9UH5pI6DggwKEGuaPy7nCVQ8ZsiY5PIcrRvD1DzuY3qYL07NtIQcWnBSY/heikIFQ==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [arm64]
    os: [darwin]

  '@img/sharp-darwin-x64@0.33.5':
    resolution: {integrity: sha512-fyHac4jIc1ANYGRDxtiqelIbdWkIuQaI84Mv45KvGRRxSAa7o7d1ZKAOBaYbnepLC1WqxfpimdeWfvqqSGwR2Q==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [x64]
    os: [darwin]

  '@img/sharp-libvips-darwin-arm64@1.0.4':
    resolution: {integrity: sha512-XblONe153h0O2zuFfTAbQYAX2JhYmDHeWikp1LM9Hul9gVPjFY427k6dFEcOL72O01QxQsWi761svJ/ev9xEDg==}
    cpu: [arm64]
    os: [darwin]

  '@img/sharp-libvips-darwin-x64@1.0.4':
    resolution: {integrity: sha512-xnGR8YuZYfJGmWPvmlunFaWJsb9T/AO2ykoP3Fz/0X5XV2aoYBPkX6xqCQvUTKKiLddarLaxpzNe+b1hjeWHAQ==}
    cpu: [x64]
    os: [darwin]

  '@img/sharp-libvips-linux-arm64@1.0.4':
    resolution: {integrity: sha512-9B+taZ8DlyyqzZQnoeIvDVR/2F4EbMepXMc/NdVbkzsJbzkUjhXv/70GQJ7tdLA4YJgNP25zukcxpX2/SueNrA==}
    cpu: [arm64]
    os: [linux]

  '@img/sharp-libvips-linux-arm@1.0.5':
    resolution: {integrity: sha512-gvcC4ACAOPRNATg/ov8/MnbxFDJqf/pDePbBnuBDcjsI8PssmjoKMAz4LtLaVi+OnSb5FK/yIOamqDwGmXW32g==}
    cpu: [arm]
    os: [linux]

  '@img/sharp-libvips-linux-s390x@1.0.4':
    resolution: {integrity: sha512-u7Wz6ntiSSgGSGcjZ55im6uvTrOxSIS8/dgoVMoiGE9I6JAfU50yH5BoDlYA1tcuGS7g/QNtetJnxA6QEsCVTA==}
    cpu: [s390x]
    os: [linux]

  '@img/sharp-libvips-linux-x64@1.0.4':
    resolution: {integrity: sha512-MmWmQ3iPFZr0Iev+BAgVMb3ZyC4KeFc3jFxnNbEPas60e1cIfevbtuyf9nDGIzOaW9PdnDciJm+wFFaTlj5xYw==}
    cpu: [x64]
    os: [linux]

  '@img/sharp-libvips-linuxmusl-arm64@1.0.4':
    resolution: {integrity: sha512-9Ti+BbTYDcsbp4wfYib8Ctm1ilkugkA/uscUn6UXK1ldpC1JjiXbLfFZtRlBhjPZ5o1NCLiDbg8fhUPKStHoTA==}
    cpu: [arm64]
    os: [linux]

  '@img/sharp-libvips-linuxmusl-x64@1.0.4':
    resolution: {integrity: sha512-viYN1KX9m+/hGkJtvYYp+CCLgnJXwiQB39damAO7WMdKWlIhmYTfHjwSbQeUK/20vY154mwezd9HflVFM1wVSw==}
    cpu: [x64]
    os: [linux]

  '@img/sharp-linux-arm64@0.33.5':
    resolution: {integrity: sha512-JMVv+AMRyGOHtO1RFBiJy/MBsgz0x4AWrT6QoEVVTyh1E39TrCUpTRI7mx9VksGX4awWASxqCYLCV4wBZHAYxA==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [arm64]
    os: [linux]

  '@img/sharp-linux-arm@0.33.5':
    resolution: {integrity: sha512-JTS1eldqZbJxjvKaAkxhZmBqPRGmxgu+qFKSInv8moZ2AmT5Yib3EQ1c6gp493HvrvV8QgdOXdyaIBrhvFhBMQ==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [arm]
    os: [linux]

  '@img/sharp-linux-s390x@0.33.5':
    resolution: {integrity: sha512-y/5PCd+mP4CA/sPDKl2961b+C9d+vPAveS33s6Z3zfASk2j5upL6fXVPZi7ztePZ5CuH+1kW8JtvxgbuXHRa4Q==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [s390x]
    os: [linux]

  '@img/sharp-linux-x64@0.33.5':
    resolution: {integrity: sha512-opC+Ok5pRNAzuvq1AG0ar+1owsu842/Ab+4qvU879ippJBHvyY5n2mxF1izXqkPYlGuP/M556uh53jRLJmzTWA==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [x64]
    os: [linux]

  '@img/sharp-linuxmusl-arm64@0.33.5':
    resolution: {integrity: sha512-XrHMZwGQGvJg2V/oRSUfSAfjfPxO+4DkiRh6p2AFjLQztWUuY/o8Mq0eMQVIY7HJ1CDQUJlxGGZRw1a5bqmd1g==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [arm64]
    os: [linux]

  '@img/sharp-linuxmusl-x64@0.33.5':
    resolution: {integrity: sha512-WT+d/cgqKkkKySYmqoZ8y3pxx7lx9vVejxW/W4DOFMYVSkErR+w7mf2u8m/y4+xHe7yY9DAXQMWQhpnMuFfScw==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [x64]
    os: [linux]

  '@img/sharp-wasm32@0.33.5':
    resolution: {integrity: sha512-ykUW4LVGaMcU9lu9thv85CbRMAwfeadCJHRsg2GmeRa/cJxsVY9Rbd57JcMxBkKHag5U/x7TSBpScF4U8ElVzg==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [wasm32]

  '@img/sharp-win32-ia32@0.33.5':
    resolution: {integrity: sha512-T36PblLaTwuVJ/zw/LaH0PdZkRz5rd3SmMHX8GSmR7vtNSP5Z6bQkExdSK7xGWyxLw4sUknBuugTelgw2faBbQ==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [ia32]
    os: [win32]

  '@img/sharp-win32-x64@0.33.5':
    resolution: {integrity: sha512-MpY/o8/8kj+EcnxwvrP4aTJSWw/aZ7JIGR4aBeZkZw5B7/Jn+tY9/VNwtcoGmdT7GfggGIU4kygOMSbYnOrAbg==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [x64]
    os: [win32]

  '@isaacs/cliui@8.0.2':
    resolution: {integrity: sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==}
    engines: {node: '>=12'}

  '@jridgewell/gen-mapping@0.3.12':
    resolution: {integrity: sha512-OuLGC46TjB5BbN1dH8JULVVZY4WTdkF7tV9Ys6wLL1rubZnCMstOhNHueU5bLCrnRuDhKPDM4g6sw4Bel5Gzqg==}

  '@jridgewell/resolve-uri@3.1.2':
    resolution: {integrity: sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/sourcemap-codec@1.5.4':
    resolution: {integrity: sha512-VT2+G1VQs/9oz078bLrYbecdZKs912zQlkelYpuf+SXF+QvZDYJlbx/LSx+meSAwdDFnF8FVXW92AVjjkVmgFw==}

  '@jridgewell/trace-mapping@0.3.29':
    resolution: {integrity: sha512-uw6guiW/gcAGPDhLmd77/6lW8QLeiV5RUTsAX46Db6oLhGaVj4lhnPwb184s1bkc8kdVg/+h988dro8GRDpmYQ==}

  '@napi-rs/wasm-runtime@0.2.11':
    resolution: {integrity: sha512-9DPkXtvHydrcOsopiYpUgPHpmj0HWZKMUnL2dZqpvC42lsratuBG06V5ipyno0fUek5VlFsNQ+AcFATSrJXgMA==}

  '@next/env@15.2.4':
    resolution: {integrity: sha512-+SFtMgoiYP3WoSswuNmxJOCwi06TdWE733D+WPjpXIe4LXGULwEaofiiAy6kbS0+XjM5xF5n3lKuBwN2SnqD9g==}

  '@next/eslint-plugin-next@15.3.4':
    resolution: {integrity: sha512-lBxYdj7TI8phbJcLSAqDt57nIcobEign5NYIKCiy0hXQhrUbTqLqOaSDi568U6vFg4hJfBdZYsG4iP/uKhCqgg==}

  '@next/swc-darwin-arm64@15.2.4':
    resolution: {integrity: sha512-1AnMfs655ipJEDC/FHkSr0r3lXBgpqKo4K1kiwfUf3iE68rDFXZ1TtHdMvf7D0hMItgDZ7Vuq3JgNMbt/+3bYw==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [darwin]

  '@next/swc-darwin-x64@15.2.4':
    resolution: {integrity: sha512-3qK2zb5EwCwxnO2HeO+TRqCubeI/NgCe+kL5dTJlPldV/uwCnUgC7VbEzgmxbfrkbjehL4H9BPztWOEtsoMwew==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [darwin]

  '@next/swc-linux-arm64-gnu@15.2.4':
    resolution: {integrity: sha512-HFN6GKUcrTWvem8AZN7tT95zPb0GUGv9v0d0iyuTb303vbXkkbHDp/DxufB04jNVD+IN9yHy7y/6Mqq0h0YVaQ==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [linux]

  '@next/swc-linux-arm64-musl@15.2.4':
    resolution: {integrity: sha512-Oioa0SORWLwi35/kVB8aCk5Uq+5/ZIumMK1kJV+jSdazFm2NzPDztsefzdmzzpx5oGCJ6FkUC7vkaUseNTStNA==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [linux]

  '@next/swc-linux-x64-gnu@15.2.4':
    resolution: {integrity: sha512-yb5WTRaHdkgOqFOZiu6rHV1fAEK0flVpaIN2HB6kxHVSy/dIajWbThS7qON3W9/SNOH2JWkVCyulgGYekMePuw==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [linux]

  '@next/swc-linux-x64-musl@15.2.4':
    resolution: {integrity: sha512-Dcdv/ix6srhkM25fgXiyOieFUkz+fOYkHlydWCtB0xMST6X9XYI3yPDKBZt1xuhOytONsIFJFB08xXYsxUwJLw==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [linux]

  '@next/swc-win32-arm64-msvc@15.2.4':
    resolution: {integrity: sha512-dW0i7eukvDxtIhCYkMrZNQfNicPDExt2jPb9AZPpL7cfyUo7QSNl1DjsHjmmKp6qNAqUESyT8YFl/Aw91cNJJg==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [win32]

  '@next/swc-win32-x64-msvc@15.2.4':
    resolution: {integrity: sha512-SbnWkJmkS7Xl3kre8SdMF6F/XDh1DTFEhp0jRTj/uB8iPKoU2bb2NDfcu+iifv1+mxQEd1g2vvSxcZbXSKyWiQ==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [win32]

  '@nodelib/fs.scandir@2.1.5':
    resolution: {integrity: sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==}
    engines: {node: '>= 8'}

  '@nodelib/fs.stat@2.0.5':
    resolution: {integrity: sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==}
    engines: {node: '>= 8'}

  '@nodelib/fs.walk@1.2.8':
    resolution: {integrity: sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==}
    engines: {node: '>= 8'}

  '@nolyfill/is-core-module@1.0.39':
    resolution: {integrity: sha512-nn5ozdjYQpUCZlWGuxcJY/KpxkWQs4DcbMCmKojjyrYDEAGy4Ce19NN4v5MduafTwJlbKc99UA8YhSVqq9yPZA==}
    engines: {node: '>=12.4.0'}

  '@pkgjs/parseargs@0.11.0':
    resolution: {integrity: sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==}
    engines: {node: '>=14'}

  '@playwright/test@1.53.2':
    resolution: {integrity: sha512-tEB2U5z74ebBeyfGNZ3Jfg29AnW+5HlWhvHtb/Mqco9pFdZU1ZLNdVb2UtB5CvmiilNr2ZfVH/qMmAROG/XTzw==}
    engines: {node: '>=18'}
    hasBin: true

  '@polka/url@1.0.0-next.29':
    resolution: {integrity: sha512-wwQAWhWSuHaag8c4q/KN/vCoeOJYshAIvMQwD4GpSb3OiZklFfvAgmj0VCBBImRpuF/aFgIRzllXlVX93Jevww==}

  '@radix-ui/number@1.1.0':
    resolution: {integrity: sha512-V3gRzhVNU1ldS5XhAPTom1fOIo4ccrjjJgmE+LI2h/WaFpHmx0MQApT+KZHnx8abG6Avtfcz4WoEciMnpFT3HQ==}

  '@radix-ui/primitive@1.1.1':
    resolution: {integrity: sha512-SJ31y+Q/zAyShtXJc8x83i9TYdbAfHZ++tUZnvjJJqFjzsdUnKsxPL6IEtBlxKkU7yzer//GQtZSV4GbldL3YA==}

  '@radix-ui/react-accordion@1.2.2':
    resolution: {integrity: sha512-b1oh54x4DMCdGsB4/7ahiSrViXxaBwRPotiZNnYXjLha9vfuURSAZErki6qjDoSIV0eXx5v57XnTGVtGwnfp2g==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-alert-dialog@1.1.4':
    resolution: {integrity: sha512-A6Kh23qZDLy3PSU4bh2UJZznOrUdHImIXqF8YtUa6CN73f8EOO9XlXSCd9IHyPvIquTaa/kwaSWzZTtUvgXVGw==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-arrow@1.1.1':
    resolution: {integrity: sha512-NaVpZfmv8SKeZbn4ijN2V3jlHA9ngBG16VnIIm22nUR0Yk8KUALyBxT3KYEUnNuch9sTE8UTsS3whzBgKOL30w==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-aspect-ratio@1.1.1':
    resolution: {integrity: sha512-kNU4FIpcFMBLkOUcgeIteH06/8JLBcYY6Le1iKenDGCYNYFX3TQqCZjzkOsz37h7r94/99GTb7YhEr98ZBJibw==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-avatar@1.1.2':
    resolution: {integrity: sha512-GaC7bXQZ5VgZvVvsJ5mu/AEbjYLnhhkoidOboC50Z6FFlLA03wG2ianUoH+zgDQ31/9gCF59bE4+2bBgTyMiig==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-checkbox@1.1.3':
    resolution: {integrity: sha512-HD7/ocp8f1B3e6OHygH0n7ZKjONkhciy1Nh0yuBgObqThc3oyx+vuMfFHKAknXRHHWVE9XvXStxJFyjUmB8PIw==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-collapsible@1.1.2':
    resolution: {integrity: sha512-PliMB63vxz7vggcyq0IxNYk8vGDrLXVWw4+W4B8YnwI1s18x7YZYqlG9PLX7XxAJUi0g2DxP4XKJMFHh/iVh9A==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-collection@1.1.1':
    resolution: {integrity: sha512-LwT3pSho9Dljg+wY2KN2mrrh6y3qELfftINERIzBUO9e0N+t0oMTyn3k9iv+ZqgrwGkRnLpNJrsMv9BZlt2yuA==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-compose-refs@1.1.1':
    resolution: {integrity: sha512-Y9VzoRDSJtgFMUCoiZBDVo084VQ5hfpXxVE+NgkdNsjiDBByiImMZKKhxMwCbdHvhlENG6a833CbFkOQvTricw==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-compose-refs@1.1.2':
    resolution: {integrity: sha512-z4eqJvfiNnFMHIIvXP3CY57y2WJs5g2v3X0zm9mEJkrkNv4rDxu+sg9Jh8EkXyeqBkB7SOcboo9dMVqhyrACIg==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-context-menu@2.2.4':
    resolution: {integrity: sha512-ap4wdGwK52rJxGkwukU1NrnEodsUFQIooANKu+ey7d6raQ2biTcEf8za1zr0mgFHieevRTB2nK4dJeN8pTAZGQ==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-context@1.1.1':
    resolution: {integrity: sha512-UASk9zi+crv9WteK/NU4PLvOoL3OuE6BWVKNF6hPRBtYBDXQ2u5iu3O59zUlJiTVvkyuycnqrztsHVJwcK9K+Q==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-dialog@1.1.4':
    resolution: {integrity: sha512-Ur7EV1IwQGCyaAuyDRiOLA5JIUZxELJljF+MbM/2NC0BYwfuRrbpS30BiQBJrVruscgUkieKkqXYDOoByaxIoA==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-direction@1.1.0':
    resolution: {integrity: sha512-BUuBvgThEiAXh2DWu93XsT+a3aWrGqolGlqqw5VU1kG7p/ZH2cuDlM1sRLNnY3QcBS69UIz2mcKhMxDsdewhjg==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-dismissable-layer@1.1.3':
    resolution: {integrity: sha512-onrWn/72lQoEucDmJnr8uczSNTujT0vJnA/X5+3AkChVPowr8n1yvIKIabhWyMQeMvvmdpsvcyDqx3X1LEXCPg==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-dropdown-menu@2.1.4':
    resolution: {integrity: sha512-iXU1Ab5ecM+yEepGAWK8ZhMyKX4ubFdCNtol4sT9D0OVErG9PNElfx3TQhjw7n7BC5nFVz68/5//clWy+8TXzA==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-focus-guards@1.1.1':
    resolution: {integrity: sha512-pSIwfrT1a6sIoDASCSpFwOasEwKTZWDw/iBdtnqKO7v6FeOzYJ7U53cPzYFVR3geGGXgVHaH+CdngrrAzqUGxg==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-focus-scope@1.1.1':
    resolution: {integrity: sha512-01omzJAYRxXdG2/he/+xy+c8a8gCydoQ1yOxnWNcRhrrBW5W+RQJ22EK1SaO8tb3WoUsuEw7mJjBozPzihDFjA==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-hover-card@1.1.4':
    resolution: {integrity: sha512-QSUUnRA3PQ2UhvoCv3eYvMnCAgGQW+sTu86QPuNb+ZMi+ZENd6UWpiXbcWDQ4AEaKF9KKpCHBeaJz9Rw6lRlaQ==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-id@1.1.0':
    resolution: {integrity: sha512-EJUrI8yYh7WOjNOqpoJaf1jlFIH2LvtgAl+YcFqNCa+4hj64ZXmPkAKOFs/ukjz3byN6bdb/AVUqHkI8/uWWMA==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-id@1.1.1':
    resolution: {integrity: sha512-kGkGegYIdQsOb4XjsfM97rXsiHaBwco+hFI66oO4s9LU+PLAC5oJ7khdOVFxkhsmlbpUqDAvXw11CluXP+jkHg==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-label@2.1.1':
    resolution: {integrity: sha512-UUw5E4e/2+4kFMH7+YxORXGWggtY6sM8WIwh5RZchhLuUg2H1hc98Py+pr8HMz6rdaYrK2t296ZEjYLOCO5uUw==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-menu@2.1.4':
    resolution: {integrity: sha512-BnOgVoL6YYdHAG6DtXONaR29Eq4nvbi8rutrV/xlr3RQCMMb3yqP85Qiw/3NReozrSW+4dfLkK+rc1hb4wPU/A==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-menubar@1.1.4':
    resolution: {integrity: sha512-+KMpi7VAZuB46+1LD7a30zb5IxyzLgC8m8j42gk3N4TUCcViNQdX8FhoH1HDvYiA8quuqcek4R4bYpPn/SY1GA==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-navigation-menu@1.2.3':
    resolution: {integrity: sha512-IQWAsQ7dsLIYDrn0WqPU+cdM7MONTv9nqrLVYoie3BPiabSfUVDe6Fr+oEt0Cofsr9ONDcDe9xhmJbL1Uq1yKg==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-popover@1.1.4':
    resolution: {integrity: sha512-aUACAkXx8LaFymDma+HQVji7WhvEhpFJ7+qPz17Nf4lLZqtreGOFRiNQWQmhzp7kEWg9cOyyQJpdIMUMPc/CPw==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-popper@1.2.1':
    resolution: {integrity: sha512-3kn5Me69L+jv82EKRuQCXdYyf1DqHwD2U/sxoNgBGCB7K9TRc3bQamQ+5EPM9EvyPdli0W41sROd+ZU1dTCztw==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-portal@1.1.3':
    resolution: {integrity: sha512-NciRqhXnGojhT93RPyDaMPfLH3ZSl4jjIFbZQ1b/vxvZEdHsBZ49wP9w8L3HzUQwep01LcWtkUvm0OVB5JAHTw==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-presence@1.1.2':
    resolution: {integrity: sha512-18TFr80t5EVgL9x1SwF/YGtfG+l0BS0PRAlCWBDoBEiDQjeKgnNZRVJp/oVBl24sr3Gbfwc/Qpj4OcWTQMsAEg==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-primitive@2.0.1':
    resolution: {integrity: sha512-sHCWTtxwNn3L3fH8qAfnF3WbUZycW93SM1j3NFDzXBiz8D6F5UTTy8G1+WFEaiCdvCVRJWj6N2R4Xq6HdiHmDg==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-primitive@2.1.3':
    resolution: {integrity: sha512-m9gTwRkhy2lvCPe6QJp4d3G1TYEUHn/FzJUtq9MjH46an1wJU+GdoGC5VLof8RX8Ft/DlpshApkhswDLZzHIcQ==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-progress@1.1.1':
    resolution: {integrity: sha512-6diOawA84f/eMxFHcWut0aE1C2kyE9dOyCTQOMRR2C/qPiXz/X0SaiA/RLbapQaXUCmy0/hLMf9meSccD1N0pA==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-radio-group@1.2.2':
    resolution: {integrity: sha512-E0MLLGfOP0l8P/NxgVzfXJ8w3Ch8cdO6UDzJfDChu4EJDy+/WdO5LqpdY8PYnCErkmZH3gZhDL1K7kQ41fAHuQ==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-roving-focus@1.1.1':
    resolution: {integrity: sha512-QE1RoxPGJ/Nm8Qmk0PxP8ojmoaS67i0s7hVssS7KuI2FQoc/uzVlZsqKfQvxPE6D8hICCPHJ4D88zNhT3OOmkw==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-scroll-area@1.2.2':
    resolution: {integrity: sha512-EFI1N/S3YxZEW/lJ/H1jY3njlvTd8tBmgKEn4GHi51+aMm94i6NmAJstsm5cu3yJwYqYc93gpCPm21FeAbFk6g==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-select@2.1.4':
    resolution: {integrity: sha512-pOkb2u8KgO47j/h7AylCj7dJsm69BXcjkrvTqMptFqsE2i0p8lHkfgneXKjAgPzBMivnoMyt8o4KiV4wYzDdyQ==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-separator@1.1.1':
    resolution: {integrity: sha512-RRiNRSrD8iUiXriq/Y5n4/3iE8HzqgLHsusUSg5jVpU2+3tqcUFPJXHDymwEypunc2sWxDUS3UC+rkZRlHedsw==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-slider@1.2.2':
    resolution: {integrity: sha512-sNlU06ii1/ZcbHf8I9En54ZPW0Vil/yPVg4vQMcFNjrIx51jsHbFl1HYHQvCIWJSr1q0ZmA+iIs/ZTv8h7HHSA==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-slot@1.1.1':
    resolution: {integrity: sha512-RApLLOcINYJA+dMVbOju7MYv1Mb2EBp2nH4HdDzXTSyaR5optlm6Otrz1euW3HbdOR8UmmFK06TD+A9frYWv+g==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-slot@1.2.3':
    resolution: {integrity: sha512-aeNmHnBxbi2St0au6VBVC7JXFlhLlOnvIIlePNniyUNAClzmtAUEY8/pBiK3iHjufOlwA+c20/8jngo7xcrg8A==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-switch@1.1.2':
    resolution: {integrity: sha512-zGukiWHjEdBCRyXvKR6iXAQG6qXm2esuAD6kDOi9Cn+1X6ev3ASo4+CsYaD6Fov9r/AQFekqnD/7+V0Cs6/98g==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-tabs@1.1.2':
    resolution: {integrity: sha512-9u/tQJMcC2aGq7KXpGivMm1mgq7oRJKXphDwdypPd/j21j/2znamPU8WkXgnhUaTrSFNIt8XhOyCAupg8/GbwQ==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-toast@1.2.4':
    resolution: {integrity: sha512-Sch9idFJHJTMH9YNpxxESqABcAFweJG4tKv+0zo0m5XBvUSL8FM5xKcJLFLXononpePs8IclyX1KieL5SDUNgA==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-toggle-group@1.1.1':
    resolution: {integrity: sha512-OgDLZEA30Ylyz8YSXvnGqIHtERqnUt1KUYTKdw/y8u7Ci6zGiJfXc02jahmcSNK3YcErqioj/9flWC9S1ihfwg==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-toggle@1.1.1':
    resolution: {integrity: sha512-i77tcgObYr743IonC1hrsnnPmszDRn8p+EGUsUt+5a/JFn28fxaM88Py6V2mc8J5kELMWishI0rLnuGLFD/nnQ==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-tooltip@1.1.6':
    resolution: {integrity: sha512-TLB5D8QLExS1uDn7+wH/bjEmRurNMTzNrtq7IjaS4kjion9NtzsTGkvR5+i7yc9q01Pi2KMM2cN3f8UG4IvvXA==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-use-callback-ref@1.1.0':
    resolution: {integrity: sha512-CasTfvsy+frcFkbXtSJ2Zu9JHpN8TYKxkgJGWbjiZhFivxaeW7rMeZt7QELGVLaYVfFMsKHjb7Ak0nMEe+2Vfw==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-use-controllable-state@1.1.0':
    resolution: {integrity: sha512-MtfMVJiSr2NjzS0Aa90NPTnvTSg6C/JLCV7ma0W6+OMV78vd8OyRpID+Ng9LxzsPbLeuBnWBA1Nq30AtBIDChw==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-use-escape-keydown@1.1.0':
    resolution: {integrity: sha512-L7vwWlR1kTTQ3oh7g1O0CBF3YCyyTj8NmhLR+phShpyA50HCfBFKVJTpshm9PzLiKmehsrQzTYTpX9HvmC9rhw==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-use-layout-effect@1.1.0':
    resolution: {integrity: sha512-+FPE0rOdziWSrH9athwI1R0HDVbWlEhd+FR+aSDk4uWGmSJ9Z54sdZVDQPZAinJhJXwfT+qnj969mCsT2gfm5w==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-use-layout-effect@1.1.1':
    resolution: {integrity: sha512-RbJRS4UWQFkzHTTwVymMTUv8EqYhOp8dOOviLj2ugtTiXRaRQS7GLGxZTLL1jWhMeoSCf5zmcZkqTl9IiYfXcQ==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-use-previous@1.1.0':
    resolution: {integrity: sha512-Z/e78qg2YFnnXcW88A4JmTtm4ADckLno6F7OXotmkQfeuCVaKuYzqAATPhVzl3delXE7CxIV8shofPn3jPc5Og==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-use-rect@1.1.0':
    resolution: {integrity: sha512-0Fmkebhr6PiseyZlYAOtLS+nb7jLmpqTrJyv61Pe68MKYW6OWdRE2kI70TaYY27u7H0lajqM3hSMMLFq18Z7nQ==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-use-size@1.1.0':
    resolution: {integrity: sha512-XW3/vWuIXHa+2Uwcc2ABSfcCledmXhhQPlGbfcRXbiUQI5Icjcg19BGCZVKKInYbvUCut/ufbbLLPFC5cbb1hw==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-visually-hidden@1.1.1':
    resolution: {integrity: sha512-vVfA2IZ9q/J+gEamvj761Oq1FpWgCDaNOOIfbPVp2MVPLEomUr5+Vf7kJGwQ24YxZSlQVar7Bes8kyTo5Dshpg==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/rect@1.1.0':
    resolution: {integrity: sha512-A9+lCBZoaMJlVKcRBz2YByCG+Cp2t6nAnMnNba+XiWxnj6r4JUFqfsgwocMBZU9LPtdxC6wB56ySYpc7LQIoJg==}

  '@rolldown/pluginutils@1.0.0-beta.19':
    resolution: {integrity: sha512-3FL3mnMbPu0muGOCaKAhhFEYmqv9eTfPSJRJmANrCwtgK8VuxpsZDGK+m0LYAGoyO8+0j5uRe4PeyPDK1yA/hA==}

  '@rollup/rollup-android-arm-eabi@4.44.1':
    resolution: {integrity: sha512-JAcBr1+fgqx20m7Fwe1DxPUl/hPkee6jA6Pl7n1v2EFiktAHenTaXl5aIFjUIEsfn9w3HE4gK1lEgNGMzBDs1w==}
    cpu: [arm]
    os: [android]

  '@rollup/rollup-android-arm64@4.44.1':
    resolution: {integrity: sha512-RurZetXqTu4p+G0ChbnkwBuAtwAbIwJkycw1n6GvlGlBuS4u5qlr5opix8cBAYFJgaY05TWtM+LaoFggUmbZEQ==}
    cpu: [arm64]
    os: [android]

  '@rollup/rollup-darwin-arm64@4.44.1':
    resolution: {integrity: sha512-fM/xPesi7g2M7chk37LOnmnSTHLG/v2ggWqKj3CCA1rMA4mm5KVBT1fNoswbo1JhPuNNZrVwpTvlCVggv8A2zg==}
    cpu: [arm64]
    os: [darwin]

  '@rollup/rollup-darwin-x64@4.44.1':
    resolution: {integrity: sha512-gDnWk57urJrkrHQ2WVx9TSVTH7lSlU7E3AFqiko+bgjlh78aJ88/3nycMax52VIVjIm3ObXnDL2H00e/xzoipw==}
    cpu: [x64]
    os: [darwin]

  '@rollup/rollup-freebsd-arm64@4.44.1':
    resolution: {integrity: sha512-wnFQmJ/zPThM5zEGcnDcCJeYJgtSLjh1d//WuHzhf6zT3Md1BvvhJnWoy+HECKu2bMxaIcfWiu3bJgx6z4g2XA==}
    cpu: [arm64]
    os: [freebsd]

  '@rollup/rollup-freebsd-x64@4.44.1':
    resolution: {integrity: sha512-uBmIxoJ4493YATvU2c0upGz87f99e3wop7TJgOA/bXMFd2SvKCI7xkxY/5k50bv7J6dw1SXT4MQBQSLn8Bb/Uw==}
    cpu: [x64]
    os: [freebsd]

  '@rollup/rollup-linux-arm-gnueabihf@4.44.1':
    resolution: {integrity: sha512-n0edDmSHlXFhrlmTK7XBuwKlG5MbS7yleS1cQ9nn4kIeW+dJH+ExqNgQ0RrFRew8Y+0V/x6C5IjsHrJmiHtkxQ==}
    cpu: [arm]
    os: [linux]

  '@rollup/rollup-linux-arm-musleabihf@4.44.1':
    resolution: {integrity: sha512-8WVUPy3FtAsKSpyk21kV52HCxB+me6YkbkFHATzC2Yd3yuqHwy2lbFL4alJOLXKljoRw08Zk8/xEj89cLQ/4Nw==}
    cpu: [arm]
    os: [linux]

  '@rollup/rollup-linux-arm64-gnu@4.44.1':
    resolution: {integrity: sha512-yuktAOaeOgorWDeFJggjuCkMGeITfqvPgkIXhDqsfKX8J3jGyxdDZgBV/2kj/2DyPaLiX6bPdjJDTu9RB8lUPQ==}
    cpu: [arm64]
    os: [linux]

  '@rollup/rollup-linux-arm64-musl@4.44.1':
    resolution: {integrity: sha512-W+GBM4ifET1Plw8pdVaecwUgxmiH23CfAUj32u8knq0JPFyK4weRy6H7ooxYFD19YxBulL0Ktsflg5XS7+7u9g==}
    cpu: [arm64]
    os: [linux]

  '@rollup/rollup-linux-loongarch64-gnu@4.44.1':
    resolution: {integrity: sha512-1zqnUEMWp9WrGVuVak6jWTl4fEtrVKfZY7CvcBmUUpxAJ7WcSowPSAWIKa/0o5mBL/Ij50SIf9tuirGx63Ovew==}
    cpu: [loong64]
    os: [linux]

  '@rollup/rollup-linux-powerpc64le-gnu@4.44.1':
    resolution: {integrity: sha512-Rl3JKaRu0LHIx7ExBAAnf0JcOQetQffaw34T8vLlg9b1IhzcBgaIdnvEbbsZq9uZp3uAH+JkHd20Nwn0h9zPjA==}
    cpu: [ppc64]
    os: [linux]

  '@rollup/rollup-linux-riscv64-gnu@4.44.1':
    resolution: {integrity: sha512-j5akelU3snyL6K3N/iX7otLBIl347fGwmd95U5gS/7z6T4ftK288jKq3A5lcFKcx7wwzb5rgNvAg3ZbV4BqUSw==}
    cpu: [riscv64]
    os: [linux]

  '@rollup/rollup-linux-riscv64-musl@4.44.1':
    resolution: {integrity: sha512-ppn5llVGgrZw7yxbIm8TTvtj1EoPgYUAbfw0uDjIOzzoqlZlZrLJ/KuiE7uf5EpTpCTrNt1EdtzF0naMm0wGYg==}
    cpu: [riscv64]
    os: [linux]

  '@rollup/rollup-linux-s390x-gnu@4.44.1':
    resolution: {integrity: sha512-Hu6hEdix0oxtUma99jSP7xbvjkUM/ycke/AQQ4EC5g7jNRLLIwjcNwaUy95ZKBJJwg1ZowsclNnjYqzN4zwkAw==}
    cpu: [s390x]
    os: [linux]

  '@rollup/rollup-linux-x64-gnu@4.44.1':
    resolution: {integrity: sha512-EtnsrmZGomz9WxK1bR5079zee3+7a+AdFlghyd6VbAjgRJDbTANJ9dcPIPAi76uG05micpEL+gPGmAKYTschQw==}
    cpu: [x64]
    os: [linux]

  '@rollup/rollup-linux-x64-musl@4.44.1':
    resolution: {integrity: sha512-iAS4p+J1az6Usn0f8xhgL4PaU878KEtutP4hqw52I4IO6AGoyOkHCxcc4bqufv1tQLdDWFx8lR9YlwxKuv3/3g==}
    cpu: [x64]
    os: [linux]

  '@rollup/rollup-win32-arm64-msvc@4.44.1':
    resolution: {integrity: sha512-NtSJVKcXwcqozOl+FwI41OH3OApDyLk3kqTJgx8+gp6On9ZEt5mYhIsKNPGuaZr3p9T6NWPKGU/03Vw4CNU9qg==}
    cpu: [arm64]
    os: [win32]

  '@rollup/rollup-win32-ia32-msvc@4.44.1':
    resolution: {integrity: sha512-JYA3qvCOLXSsnTR3oiyGws1Dm0YTuxAAeaYGVlGpUsHqloPcFjPg+X0Fj2qODGLNwQOAcCiQmHub/V007kiH5A==}
    cpu: [ia32]
    os: [win32]

  '@rollup/rollup-win32-x64-msvc@4.44.1':
    resolution: {integrity: sha512-J8o22LuF0kTe7m+8PvW9wk3/bRq5+mRo5Dqo6+vXb7otCm3TPhYOJqOaQtGU9YMWQSL3krMnoOxMr0+9E6F3Ug==}
    cpu: [x64]
    os: [win32]

  '@rtsao/scc@1.1.0':
    resolution: {integrity: sha512-zt6OdqaDoOnJ1ZYsCYGt9YmWzDXl4vQdKTyJev62gFhRGKdx7mcT54V9KIjg+d2wi9EXsPvAPKe7i7WjfVWB8g==}

  '@rushstack/eslint-patch@1.12.0':
    resolution: {integrity: sha512-5EwMtOqvJMMa3HbmxLlF74e+3/HhwBTMcvt3nqVJgGCozO6hzIPOBlwm8mGVNR9SN2IJpxSnlxczyDjcn7qIyw==}

  '@swc/counter@0.1.3':
    resolution: {integrity: sha512-e2BR4lsJkkRlKZ/qCHPw9ZaSxc0MVUd7gtbtaB7aMvHeJVYe8sOB8DBZkP2DtISHGSku9sCK6T6cnY0CtXrOCQ==}

  '@swc/helpers@0.5.15':
    resolution: {integrity: sha512-JQ5TuMi45Owi4/BIMAJBoSQoOJu12oOk/gADqlcUL9JEdHB8vyjUSsxqeNXnmXHjYKMi2WcYtezGEEhqUI/E2g==}

  '@testing-library/dom@10.4.0':
    resolution: {integrity: sha512-pemlzrSESWbdAloYml3bAJMEfNh1Z7EduzqPKprCH5S341frlpYnUEW0H72dLxa6IsYr+mPno20GiSm+h9dEdQ==}
    engines: {node: '>=18'}

  '@testing-library/jest-dom@6.6.3':
    resolution: {integrity: sha512-IteBhl4XqYNkM54f4ejhLRJiZNqcSCoXUOG2CPK7qbD322KjQozM4kHQOfkG2oln9b9HTYqs+Sae8vBATubxxA==}
    engines: {node: '>=14', npm: '>=6', yarn: '>=1'}

  '@testing-library/react@16.3.0':
    resolution: {integrity: sha512-kFSyxiEDwv1WLl2fgsq6pPBbw5aWKrsY2/noi1Id0TK0UParSF62oFQFGHXIyaG4pp2tEub/Zlel+fjjZILDsw==}
    engines: {node: '>=18'}
    peerDependencies:
      '@testing-library/dom': ^10.0.0
      '@types/react': ^18.0.0 || ^19.0.0
      '@types/react-dom': ^18.0.0 || ^19.0.0
      react: ^18.0.0 || ^19.0.0
      react-dom: ^18.0.0 || ^19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@testing-library/user-event@14.6.1':
    resolution: {integrity: sha512-vq7fv0rnt+QTXgPxr5Hjc210p6YKq2kmdziLgnsZGgLJ9e6VAShx1pACLuRjd/AS/sr7phAR58OIIpf0LlmQNw==}
    engines: {node: '>=12', npm: '>=6'}
    peerDependencies:
      '@testing-library/dom': '>=7.21.4'

  '@tybys/wasm-util@0.9.0':
    resolution: {integrity: sha512-6+7nlbMVX/PVDCwaIQ8nTOPveOcFLSt8GcXdx8hD0bt39uWxYT88uXzqTd4fTvqta7oeUJqudepapKNt2DYJFw==}

  '@types/aria-query@5.0.4':
    resolution: {integrity: sha512-rfT93uj5s0PRL7EzccGMs3brplhcrghnDoV26NqKhCAS1hVo+WdNsPvE/yb6ilfr5hi2MEk6d5EWJTKdxg8jVw==}

  '@types/babel__core@7.20.5':
    resolution: {integrity: sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==}

  '@types/babel__generator@7.27.0':
    resolution: {integrity: sha512-ufFd2Xi92OAVPYsy+P4n7/U7e68fex0+Ee8gSG9KX7eo084CWiQ4sdxktvdl0bOPupXtVJPY19zk6EwWqUQ8lg==}

  '@types/babel__template@7.4.4':
    resolution: {integrity: sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==}

  '@types/babel__traverse@7.20.7':
    resolution: {integrity: sha512-dkO5fhS7+/oos4ciWxyEyjWe48zmG6wbCheo/G2ZnHx4fs3EU6YC6UM8rk56gAjNJ9P3MTH2jo5jb92/K6wbng==}

  '@types/chai@5.2.2':
    resolution: {integrity: sha512-8kB30R7Hwqf40JPiKhVzodJs2Qc1ZJ5zuT3uzw5Hq/dhNCl3G3l83jfpdI1e20BP348+fV7VIL/+FxaXkqBmWg==}

  '@types/codemirror@5.60.16':
    resolution: {integrity: sha512-V/yHdamffSS075jit+fDxaOAmdP2liok8NSNJnAZfDJErzOheuygHZEhAJrfmk5TEyM32MhkZjwo/idX791yxw==}

  '@types/d3-array@3.2.1':
    resolution: {integrity: sha512-Y2Jn2idRrLzUfAKV2LyRImR+y4oa2AntrgID95SHJxuMUrkNXmanDSed71sRNZysveJVt1hLLemQZIady0FpEg==}

  '@types/d3-color@3.1.3':
    resolution: {integrity: sha512-iO90scth9WAbmgv7ogoq57O9YpKmFBbmoEoCHDB2xMBY0+/KVrqAaCDyCE16dUspeOvIxFFRI+0sEtqDqy2b4A==}

  '@types/d3-ease@3.0.2':
    resolution: {integrity: sha512-NcV1JjO5oDzoK26oMzbILE6HW7uVXOHLQvHshBUW4UMdZGfiY6v5BeQwh9a9tCzv+CeefZQHJt5SRgK154RtiA==}

  '@types/d3-interpolate@3.0.4':
    resolution: {integrity: sha512-mgLPETlrpVV1YRJIglr4Ez47g7Yxjl1lj7YKsiMCb27VJH9W8NVM6Bb9d8kkpG/uAQS5AmbA48q2IAolKKo1MA==}

  '@types/d3-path@3.1.1':
    resolution: {integrity: sha512-VMZBYyQvbGmWyWVea0EHs/BwLgxc+MKi1zLDCONksozI4YJMcTt8ZEuIR4Sb1MMTE8MMW49v0IwI5+b7RmfWlg==}

  '@types/d3-scale@4.0.9':
    resolution: {integrity: sha512-dLmtwB8zkAeO/juAMfnV+sItKjlsw2lKdZVVy6LRr0cBmegxSABiLEpGVmSJJ8O08i4+sGR6qQtb6WtuwJdvVw==}

  '@types/d3-shape@3.1.7':
    resolution: {integrity: sha512-VLvUQ33C+3J+8p+Daf+nYSOsjB4GXp19/S/aGo60m9h1v6XaxjiT82lKVWJCfzhtuZ3yD7i/TPeC/fuKLLOSmg==}

  '@types/d3-time@3.0.4':
    resolution: {integrity: sha512-yuzZug1nkAAaBlBBikKZTgzCeA+k1uy4ZFwWANOfKw5z5LRhV0gNA7gNkKm7HoK+HRN0wX3EkxGk0fpbWhmB7g==}

  '@types/d3-timer@3.0.2':
    resolution: {integrity: sha512-Ps3T8E8dZDam6fUyNiMkekK3XUsaUEik+idO9/YjPtfj2qruF8tFBXS7XhtE4iIXBLxhmLjP3SXpLhVf21I9Lw==}

  '@types/deep-eql@4.0.2':
    resolution: {integrity: sha512-c9h9dVVMigMPc4bwTvC5dxqtqJZwQPePsWjPlpSOnojbor6pGqdk541lfA7AqFQr5pB1BRdq0juY9db81BwyFw==}

  '@types/estree@1.0.8':
    resolution: {integrity: sha512-dWHzHa2WqEXI/O1E9OjrocMTKJl2mSrEolh1Iomrv6U+JuNwaHXsXx9bLu5gG7BUWFIN0skIQJQ/L1rIex4X6w==}

  '@types/json-schema@7.0.15':
    resolution: {integrity: sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==}

  '@types/json5@0.0.29':
    resolution: {integrity: sha512-dRLjCWHYg4oaA77cxO64oO+7JwCwnIzkZPdrrC71jQmQtlhM556pwKo5bUzqvZndkVbeFLIIi+9TC40JNF5hNQ==}

  '@types/marked@4.3.2':
    resolution: {integrity: sha512-a79Yc3TOk6dGdituy8hmTTJXjOkZ7zsFYV10L337ttq/rec8lRMDBpV7fL3uLx6TgbFCa5DU/h8FmIBQPSbU0w==}

  '@types/node@22.16.0':
    resolution: {integrity: sha512-B2egV9wALML1JCpv3VQoQ+yesQKAmNMBIAY7OteVrikcOcAkWm+dGL6qpeCktPjAv6N1JLnhbNiqS35UpFyBsQ==}

  '@types/react-dom@19.1.6':
    resolution: {integrity: sha512-4hOiT/dwO8Ko0gV1m/TJZYk3y0KBnY9vzDh7W+DH17b2HFSOGgdj33dhihPeuy3l0q23+4e+hoXHV6hCC4dCXw==}
    peerDependencies:
      '@types/react': ^19.0.0

  '@types/react@19.1.8':
    resolution: {integrity: sha512-AwAfQ2Wa5bCx9WP8nZL2uMZWod7J7/JSplxbTmBQ5ms6QpqNYm672H0Vu9ZVKVngQ+ii4R/byguVEUZQyeg44g==}

  '@types/tern@0.23.9':
    resolution: {integrity: sha512-ypzHFE/wBzh+BlH6rrBgS5I/Z7RD21pGhZ2rltb/+ZrVM1awdZwjx7hE5XfuYgHWk9uvV5HLZN3SloevCAp3Bw==}

  '@typescript-eslint/eslint-plugin@8.35.1':
    resolution: {integrity: sha512-9XNTlo7P7RJxbVeICaIIIEipqxLKguyh+3UbXuT2XQuFp6d8VOeDEGuz5IiX0dgZo8CiI6aOFLg4e8cF71SFVg==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      '@typescript-eslint/parser': ^8.35.1
      eslint: ^8.57.0 || ^9.0.0
      typescript: '>=4.8.4 <5.9.0'

  '@typescript-eslint/parser@8.35.1':
    resolution: {integrity: sha512-3MyiDfrfLeK06bi/g9DqJxP5pV74LNv4rFTyvGDmT3x2p1yp1lOd+qYZfiRPIOf/oON+WRZR5wxxuF85qOar+w==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      eslint: ^8.57.0 || ^9.0.0
      typescript: '>=4.8.4 <5.9.0'

  '@typescript-eslint/project-service@8.35.1':
    resolution: {integrity: sha512-VYxn/5LOpVxADAuP3NrnxxHYfzVtQzLKeldIhDhzC8UHaiQvYlXvKuVho1qLduFbJjjy5U5bkGwa3rUGUb1Q6Q==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      typescript: '>=4.8.4 <5.9.0'

  '@typescript-eslint/scope-manager@8.35.1':
    resolution: {integrity: sha512-s/Bpd4i7ht2934nG+UoSPlYXd08KYz3bmjLEb7Ye1UVob0d1ENiT3lY8bsCmik4RqfSbPw9xJJHbugpPpP5JUg==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@typescript-eslint/tsconfig-utils@8.35.1':
    resolution: {integrity: sha512-K5/U9VmT9dTHoNowWZpz+/TObS3xqC5h0xAIjXPw+MNcKV9qg6eSatEnmeAwkjHijhACH0/N7bkhKvbt1+DXWQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      typescript: '>=4.8.4 <5.9.0'

  '@typescript-eslint/type-utils@8.35.1':
    resolution: {integrity: sha512-HOrUBlfVRz5W2LIKpXzZoy6VTZzMu2n8q9C2V/cFngIC5U1nStJgv0tMV4sZPzdf4wQm9/ToWUFPMN9Vq9VJQQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      eslint: ^8.57.0 || ^9.0.0
      typescript: '>=4.8.4 <5.9.0'

  '@typescript-eslint/types@8.35.1':
    resolution: {integrity: sha512-q/O04vVnKHfrrhNAscndAn1tuQhIkwqnaW+eu5waD5IPts2eX1dgJxgqcPx5BX109/qAz7IG6VrEPTOYKCNfRQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@typescript-eslint/typescript-estree@8.35.1':
    resolution: {integrity: sha512-Vvpuvj4tBxIka7cPs6Y1uvM7gJgdF5Uu9F+mBJBPY4MhvjrjWGK4H0lVgLJd/8PWZ23FTqsaJaLEkBCFUk8Y9g==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      typescript: '>=4.8.4 <5.9.0'

  '@typescript-eslint/utils@8.35.1':
    resolution: {integrity: sha512-lhnwatFmOFcazAsUm3ZnZFpXSxiwoa1Lj50HphnDe1Et01NF4+hrdXONSUHIcbVu2eFb1bAf+5yjXkGVkXBKAQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      eslint: ^8.57.0 || ^9.0.0
      typescript: '>=4.8.4 <5.9.0'

  '@typescript-eslint/visitor-keys@8.35.1':
    resolution: {integrity: sha512-VRwixir4zBWCSTP/ljEo091lbpypz57PoeAQ9imjG+vbeof9LplljsL1mos4ccG6H9IjfrVGM359RozUnuFhpw==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@unrs/resolver-binding-android-arm-eabi@1.10.1':
    resolution: {integrity: sha512-zohDKXT1Ok0yhbVGff4YAg9HUs5ietG5GpvJBPFSApZnGe7uf2cd26DRhKZbn0Be6xHUZrSzP+RAgMmzyc71EA==}
    cpu: [arm]
    os: [android]

  '@unrs/resolver-binding-android-arm64@1.10.1':
    resolution: {integrity: sha512-tAN6k5UrTd4nicpA7s2PbjR/jagpDzAmvXFjbpTazUe5FRsFxVcBlS1F5Lzp5jtWU6bdiqRhSvd4X8rdpCffeA==}
    cpu: [arm64]
    os: [android]

  '@unrs/resolver-binding-darwin-arm64@1.10.1':
    resolution: {integrity: sha512-+FCsag8WkauI4dQ50XumCXdfvDCZEpMUnvZDsKMxfOisnEklpDFXc6ThY0WqybBYZbiwR5tWcFaZmI0G6b4vrg==}
    cpu: [arm64]
    os: [darwin]

  '@unrs/resolver-binding-darwin-x64@1.10.1':
    resolution: {integrity: sha512-qYKGGm5wk71ONcXTMZ0+J11qQeOAPz3nw6VtqrBUUELRyXFyvK8cHhHsLBFR4GHnilc2pgY1HTB2TvdW9wO26Q==}
    cpu: [x64]
    os: [darwin]

  '@unrs/resolver-binding-freebsd-x64@1.10.1':
    resolution: {integrity: sha512-hOHMAhbvIQ63gkpgeNsXcWPSyvXH7ZEyeg254hY0Lp/hX8NdW+FsUWq73g9946Pc/BrcVI/I3C1cmZ4RCX9bNw==}
    cpu: [x64]
    os: [freebsd]

  '@unrs/resolver-binding-linux-arm-gnueabihf@1.10.1':
    resolution: {integrity: sha512-6ds7+zzHJgTDmpe0gmFcOTvSUhG5oZukkt+cCsSb3k4Uiz2yEQB4iCRITX2hBwSW+p8gAieAfecITjgqCkswXw==}
    cpu: [arm]
    os: [linux]

  '@unrs/resolver-binding-linux-arm-musleabihf@1.10.1':
    resolution: {integrity: sha512-P7A0G2/jW00diNJyFeq4W9/nxovD62Ay8CMP4UK9OymC7qO7rG1a8Upad68/bdfpIOn7KSp7Aj/6lEW3yyznAA==}
    cpu: [arm]
    os: [linux]

  '@unrs/resolver-binding-linux-arm64-gnu@1.10.1':
    resolution: {integrity: sha512-Cg6xzdkrpltcTPO4At+A79zkC7gPDQIgosJmVV8M104ImB6KZi1MrNXgDYIAfkhUYjPzjNooEDFRAwwPadS7ZA==}
    cpu: [arm64]
    os: [linux]

  '@unrs/resolver-binding-linux-arm64-musl@1.10.1':
    resolution: {integrity: sha512-aNeg99bVkXa4lt+oZbjNRPC8ZpjJTKxijg/wILrJdzNyAymO2UC/HUK1UfDjt6T7U5p/mK24T3CYOi3/+YEQSA==}
    cpu: [arm64]
    os: [linux]

  '@unrs/resolver-binding-linux-ppc64-gnu@1.10.1':
    resolution: {integrity: sha512-ylz5ojeXrkPrtnzVhpCO+YegG63/aKhkoTlY8PfMfBfLaUG8v6m6iqrL7sBUKdVBgOB4kSTUPt9efQdA/Y3Z/w==}
    cpu: [ppc64]
    os: [linux]

  '@unrs/resolver-binding-linux-riscv64-gnu@1.10.1':
    resolution: {integrity: sha512-xcWyhmJfXXOxK7lvE4+rLwBq+on83svlc0AIypfe6x4sMJR+S4oD7n9OynaQShfj2SufPw2KJAotnsNb+4nN2g==}
    cpu: [riscv64]
    os: [linux]

  '@unrs/resolver-binding-linux-riscv64-musl@1.10.1':
    resolution: {integrity: sha512-mW9JZAdOCyorgi1eLJr4gX7xS67WNG9XNPYj5P8VuttK72XNsmdw9yhOO4tDANMgiLXFiSFaiL1gEpoNtRPw/A==}
    cpu: [riscv64]
    os: [linux]

  '@unrs/resolver-binding-linux-s390x-gnu@1.10.1':
    resolution: {integrity: sha512-NZGKhBy6xkJ0k09cWNZz4DnhBcGlhDd3W+j7EYoNvf5TSwj2K6kbmfqTWITEgkvjsMUjm1wsrc4IJaH6VtjyHQ==}
    cpu: [s390x]
    os: [linux]

  '@unrs/resolver-binding-linux-x64-gnu@1.10.1':
    resolution: {integrity: sha512-VsjgckJ0gNMw7p0d8In6uPYr+s0p16yrT2rvG4v2jUpEMYkpnfnCiALa9SWshbvlGjKQ98Q2x19agm3iFk8w8Q==}
    cpu: [x64]
    os: [linux]

  '@unrs/resolver-binding-linux-x64-musl@1.10.1':
    resolution: {integrity: sha512-idMnajMeejnaFi0Mx9UTLSYFDAOTfAEP7VjXNgxKApso3Eu2Njs0p2V95nNIyFi4oQVGFmIuCkoznAXtF/Zbmw==}
    cpu: [x64]
    os: [linux]

  '@unrs/resolver-binding-wasm32-wasi@1.10.1':
    resolution: {integrity: sha512-7jyhjIRNFjzlr8x5pth6Oi9hv3a7ubcVYm2GBFinkBQKcFhw4nIs5BtauSNtDW1dPIGrxF0ciynCZqzxMrYMsg==}
    engines: {node: '>=14.0.0'}
    cpu: [wasm32]

  '@unrs/resolver-binding-win32-arm64-msvc@1.10.1':
    resolution: {integrity: sha512-TY79+N+Gkoo7E99K+zmsKNeiuNJYlclZJtKqsHSls8We2iGhgxtletVsiBYie93MSTDRDMI8pkBZJlIJSZPrdA==}
    cpu: [arm64]
    os: [win32]

  '@unrs/resolver-binding-win32-ia32-msvc@1.10.1':
    resolution: {integrity: sha512-BAJN5PEPlEV+1m8+PCtFoKm3LQ1P57B4Z+0+efU0NzmCaGk7pUaOxuPgl+m3eufVeeNBKiPDltG0sSB9qEfCxw==}
    cpu: [ia32]
    os: [win32]

  '@unrs/resolver-binding-win32-x64-msvc@1.10.1':
    resolution: {integrity: sha512-2v3erKKmmCyIVvvhI2nF15qEbdBpISTq44m9pyd5gfIJB1PN94oePTLWEd82XUbIbvKhv76xTSeUQSCOGesLeg==}
    cpu: [x64]
    os: [win32]

  '@vitejs/plugin-react@4.6.0':
    resolution: {integrity: sha512-5Kgff+m8e2PB+9j51eGHEpn5kUzRKH2Ry0qGoe8ItJg7pqnkPrYPkDQZGgGmTa0EGarHrkjLvOdU3b1fzI8otQ==}
    engines: {node: ^14.18.0 || >=16.0.0}
    peerDependencies:
      vite: ^4.2.0 || ^5.0.0 || ^6.0.0 || ^7.0.0-beta.0

  '@vitest/expect@3.2.4':
    resolution: {integrity: sha512-Io0yyORnB6sikFlt8QW5K7slY4OjqNX9jmJQ02QDda8lyM6B5oNgVWoSoKPac8/kgnCUzuHQKrSLtu/uOqqrig==}

  '@vitest/mocker@3.2.4':
    resolution: {integrity: sha512-46ryTE9RZO/rfDd7pEqFl7etuyzekzEhUbTW3BvmeO/BcCMEgq59BKhek3dXDWgAj4oMK6OZi+vRr1wPW6qjEQ==}
    peerDependencies:
      msw: ^2.4.9
      vite: ^5.0.0 || ^6.0.0 || ^7.0.0-0
    peerDependenciesMeta:
      msw:
        optional: true
      vite:
        optional: true

  '@vitest/pretty-format@3.2.4':
    resolution: {integrity: sha512-IVNZik8IVRJRTr9fxlitMKeJeXFFFN0JaB9PHPGQ8NKQbGpfjlTx9zO4RefN8gp7eqjNy8nyK3NZmBzOPeIxtA==}

  '@vitest/runner@3.2.4':
    resolution: {integrity: sha512-oukfKT9Mk41LreEW09vt45f8wx7DordoWUZMYdY/cyAk7w5TWkTRCNZYF7sX7n2wB7jyGAl74OxgwhPgKaqDMQ==}

  '@vitest/snapshot@3.2.4':
    resolution: {integrity: sha512-dEYtS7qQP2CjU27QBC5oUOxLE/v5eLkGqPE0ZKEIDGMs4vKWe7IjgLOeauHsR0D5YuuycGRO5oSRXnwnmA78fQ==}

  '@vitest/spy@3.2.4':
    resolution: {integrity: sha512-vAfasCOe6AIK70iP5UD11Ac4siNUNJ9i/9PZ3NKx07sG6sUxeag1LWdNrMWeKKYBLlzuK+Gn65Yd5nyL6ds+nw==}

  '@vitest/ui@3.2.4':
    resolution: {integrity: sha512-hGISOaP18plkzbWEcP/QvtRW1xDXF2+96HbEX6byqQhAUbiS5oH6/9JwW+QsQCIYON2bI6QZBF+2PvOmrRZ9wA==}
    peerDependencies:
      vitest: 3.2.4

  '@vitest/utils@3.2.4':
    resolution: {integrity: sha512-fB2V0JFrQSMsCo9HiSq3Ezpdv4iYaXRG1Sx8edX3MwxfyNn83mKiGzOcH+Fkxt4MHxr3y42fQi1oeAInqgX2QA==}

  acorn-jsx@5.3.2:
    resolution: {integrity: sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==}
    peerDependencies:
      acorn: ^6.0.0 || ^7.0.0 || ^8.0.0

  acorn@8.15.0:
    resolution: {integrity: sha512-NZyJarBfL7nWwIq+FDL6Zp/yHEhePMNnnJ0y3qfieCrmNvYct8uvtiV41UvlSe6apAfk0fY1FbWx+NwfmpvtTg==}
    engines: {node: '>=0.4.0'}
    hasBin: true

  agent-base@7.1.3:
    resolution: {integrity: sha512-jRR5wdylq8CkOe6hei19GGZnxM6rBGwFl3Bg0YItGDimvjGtAvdZk4Pu6Cl4u4Igsws4a1fd1Vq3ezrhn4KmFw==}
    engines: {node: '>= 14'}

  ajv@6.12.6:
    resolution: {integrity: sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==}

  ansi-regex@5.0.1:
    resolution: {integrity: sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==}
    engines: {node: '>=8'}

  ansi-regex@6.1.0:
    resolution: {integrity: sha512-7HSX4QQb4CspciLpVFwyRe79O3xsIZDDLER21kERQ71oaPodF8jL725AgJMFAYbooIqolJoRLuM81SpeUkpkvA==}
    engines: {node: '>=12'}

  ansi-styles@4.3.0:
    resolution: {integrity: sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==}
    engines: {node: '>=8'}

  ansi-styles@5.2.0:
    resolution: {integrity: sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==}
    engines: {node: '>=10'}

  ansi-styles@6.2.1:
    resolution: {integrity: sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==}
    engines: {node: '>=12'}

  any-promise@1.3.0:
    resolution: {integrity: sha512-7UvmKalWRt1wgjL1RrGxoSJW/0QZFIegpeGvZG9kjp8vrRu55XTHbwnqq2GpXm9uLbcuhxm3IqX9OB4MZR1b2A==}

  anymatch@3.1.3:
    resolution: {integrity: sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==}
    engines: {node: '>= 8'}

  arg@5.0.2:
    resolution: {integrity: sha512-PYjyFOLKQ9y57JvQ6QLo8dAgNqswh8M1RMJYdQduT6xbWSgK36P/Z/v+p888pM69jMMfS8Xd8F6I1kQ/I9HUGg==}

  argparse@2.0.1:
    resolution: {integrity: sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==}

  aria-hidden@1.2.6:
    resolution: {integrity: sha512-ik3ZgC9dY/lYVVM++OISsaYDeg1tb0VtP5uL3ouh1koGOaUMDPpbFIei4JkFimWUFPn90sbMNMXQAIVOlnYKJA==}
    engines: {node: '>=10'}

  aria-query@5.3.0:
    resolution: {integrity: sha512-b0P0sZPKtyu8HkeRAfCq0IfURZK+SuwMjY1UXGBU27wpAiTwQAIlq56IbIO+ytk/JjS1fMR14ee5WBBfKi5J6A==}

  aria-query@5.3.2:
    resolution: {integrity: sha512-COROpnaoap1E2F000S62r6A60uHZnmlvomhfyT2DlTcrY1OrBKn2UhH7qn5wTC9zMvD0AY7csdPSNwKP+7WiQw==}
    engines: {node: '>= 0.4'}

  array-buffer-byte-length@1.0.2:
    resolution: {integrity: sha512-LHE+8BuR7RYGDKvnrmcuSq3tDcKv9OFEXQt/HpbZhY7V6h0zlUXutnAD82GiFx9rdieCMjkvtcsPqBwgUl1Iiw==}
    engines: {node: '>= 0.4'}

  array-includes@3.1.9:
    resolution: {integrity: sha512-FmeCCAenzH0KH381SPT5FZmiA/TmpndpcaShhfgEN9eCVjnFBqq3l1xrI42y8+PPLI6hypzou4GXw00WHmPBLQ==}
    engines: {node: '>= 0.4'}

  array.prototype.findlast@1.2.5:
    resolution: {integrity: sha512-CVvd6FHg1Z3POpBLxO6E6zr+rSKEQ9L6rZHAaY7lLfhKsWYUBBOuMs0e9o24oopj6H+geRCX0YJ+TJLBK2eHyQ==}
    engines: {node: '>= 0.4'}

  array.prototype.findlastindex@1.2.6:
    resolution: {integrity: sha512-F/TKATkzseUExPlfvmwQKGITM3DGTK+vkAsCZoDc5daVygbJBnjEUCbgkAvVFsgfXfX4YIqZ/27G3k3tdXrTxQ==}
    engines: {node: '>= 0.4'}

  array.prototype.flat@1.3.3:
    resolution: {integrity: sha512-rwG/ja1neyLqCuGZ5YYrznA62D4mZXg0i1cIskIUKSiqF3Cje9/wXAls9B9s1Wa2fomMsIv8czB8jZcPmxCXFg==}
    engines: {node: '>= 0.4'}

  array.prototype.flatmap@1.3.3:
    resolution: {integrity: sha512-Y7Wt51eKJSyi80hFrJCePGGNo5ktJCslFuboqJsbf57CCPcm5zztluPlc4/aD8sWsKvlwatezpV4U1efk8kpjg==}
    engines: {node: '>= 0.4'}

  array.prototype.tosorted@1.1.4:
    resolution: {integrity: sha512-p6Fx8B7b7ZhL/gmUsAy0D15WhvDccw3mnGNbZpi3pmeJdxtWsj2jEaI4Y6oo3XiHfzuSgPwKc04MYt6KgvC/wA==}
    engines: {node: '>= 0.4'}

  arraybuffer.prototype.slice@1.0.4:
    resolution: {integrity: sha512-BNoCY6SXXPQ7gF2opIP4GBE+Xw7U+pHMYKuzjgCN3GwiaIR09UUeKfheyIry77QtrCBlC0KK0q5/TER/tYh3PQ==}
    engines: {node: '>= 0.4'}

  assertion-error@2.0.1:
    resolution: {integrity: sha512-Izi8RQcffqCeNVgFigKli1ssklIbpHnCYc6AknXGYoB6grJqyeby7jv12JUQgmTAnIDnbck1uxksT4dzN3PWBA==}
    engines: {node: '>=12'}

  ast-types-flow@0.0.8:
    resolution: {integrity: sha512-OH/2E5Fg20h2aPrbe+QL8JZQFko0YZaF+j4mnQ7BGhfavO7OpSLa8a0y9sBwomHdSbkhTS8TQNayBfnW5DwbvQ==}

  async-function@1.0.0:
    resolution: {integrity: sha512-hsU18Ae8CDTR6Kgu9DYf0EbCr/a5iGL0rytQDobUcdpYOKokk8LEjVphnXkDkgpi0wYVsqrXuP0bZxJaTqdgoA==}
    engines: {node: '>= 0.4'}

  asynckit@0.4.0:
    resolution: {integrity: sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==}

  autoprefixer@10.4.21:
    resolution: {integrity: sha512-O+A6LWV5LDHSJD3LjHYoNi4VLsj/Whi7k6zG12xTYaU4cQ8oxQGckXNX8cRHK5yOZ/ppVHe0ZBXGzSV9jXdVbQ==}
    engines: {node: ^10 || ^12 || >=14}
    hasBin: true
    peerDependencies:
      postcss: ^8.1.0

  available-typed-arrays@1.0.7:
    resolution: {integrity: sha512-wvUjBtSGN7+7SjNpq/9M2Tg350UZD3q62IFZLbRAR1bSMlCo1ZaeW+BJ+D090e4hIIZLBcTDWe4Mh4jvUDajzQ==}
    engines: {node: '>= 0.4'}

  axe-core@4.10.3:
    resolution: {integrity: sha512-Xm7bpRXnDSX2YE2YFfBk2FnF0ep6tmG7xPh8iHee8MIcrgq762Nkce856dYtJYLkuIoYZvGfTs/PbZhideTcEg==}
    engines: {node: '>=4'}

  axios@1.10.0:
    resolution: {integrity: sha512-/1xYAC4MP/HEG+3duIhFr4ZQXR4sQXOIe+o6sdqzeykGLx6Upp/1p8MHqhINOvGeP7xyNHe7tsiJByc4SSVUxw==}

  axobject-query@4.1.0:
    resolution: {integrity: sha512-qIj0G9wZbMGNLjLmg1PT6v2mE9AH2zlnADJD/2tC6E00hgmhUOfEB6greHPAfLRSufHqROIUTkw6E+M3lH0PTQ==}
    engines: {node: '>= 0.4'}

  balanced-match@1.0.2:
    resolution: {integrity: sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==}

  binary-extensions@2.3.0:
    resolution: {integrity: sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==}
    engines: {node: '>=8'}

  brace-expansion@1.1.12:
    resolution: {integrity: sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==}

  brace-expansion@2.0.2:
    resolution: {integrity: sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==}

  braces@3.0.3:
    resolution: {integrity: sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==}
    engines: {node: '>=8'}

  browserslist@4.25.1:
    resolution: {integrity: sha512-KGj0KoOMXLpSNkkEI6Z6mShmQy0bc1I+T7K9N81k4WWMrfz+6fQ6es80B/YLAeRoKvjYE1YSHHOW1qe9xIVzHw==}
    engines: {node: ^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7}
    hasBin: true

  busboy@1.6.0:
    resolution: {integrity: sha512-8SFQbg/0hQ9xy3UNTB0YEnsNBbWfhf7RtnzpL7TkBiTBRfrQ9Fxcnz7VJsleJpyp6rVLvXiuORqjlHi5q+PYuA==}
    engines: {node: '>=10.16.0'}

  cac@6.7.14:
    resolution: {integrity: sha512-b6Ilus+c3RrdDk+JhLKUAQfzzgLEPy6wcXqS7f/xe1EETvsDP6GORG7SFuOs6cID5YkqchW/LXZbX5bc8j7ZcQ==}
    engines: {node: '>=8'}

  call-bind-apply-helpers@1.0.2:
    resolution: {integrity: sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==}
    engines: {node: '>= 0.4'}

  call-bind@1.0.8:
    resolution: {integrity: sha512-oKlSFMcMwpUg2ednkhQ454wfWiU/ul3CkJe/PEHcTKuiX6RpbehUiFMXu13HalGZxfUwCQzZG747YXBn1im9ww==}
    engines: {node: '>= 0.4'}

  call-bound@1.0.4:
    resolution: {integrity: sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==}
    engines: {node: '>= 0.4'}

  callsites@3.1.0:
    resolution: {integrity: sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==}
    engines: {node: '>=6'}

  camelcase-css@2.0.1:
    resolution: {integrity: sha512-QOSvevhslijgYwRx6Rv7zKdMF8lbRmx+uQGx2+vDc+KI/eBnsy9kit5aj23AgGu3pa4t9AgwbnXWqS+iOY+2aA==}
    engines: {node: '>= 6'}

  caniuse-lite@1.0.30001726:
    resolution: {integrity: sha512-VQAUIUzBiZ/UnlM28fSp2CRF3ivUn1BWEvxMcVTNwpw91Py1pGbPIyIKtd+tzct9C3ouceCVdGAXxZOpZAsgdw==}

  chai@5.2.0:
    resolution: {integrity: sha512-mCuXncKXk5iCLhfhwTc0izo0gtEmpz5CtG2y8GiOINBlMVS6v8TMRc5TaLWKS6692m9+dVVfzgeVxR5UxWHTYw==}
    engines: {node: '>=12'}

  chalk@3.0.0:
    resolution: {integrity: sha512-4D3B6Wf41KOYRFdszmDqMCGq5VV/uMAB273JILmO+3jAlh8X4qDtdtgCR3fxtbLEMzSx22QdhnDcJvu2u1fVwg==}
    engines: {node: '>=8'}

  chalk@4.1.2:
    resolution: {integrity: sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==}
    engines: {node: '>=10'}

  check-error@2.1.1:
    resolution: {integrity: sha512-OAlb+T7V4Op9OwdkjmguYRqncdlx5JiofwOAUkmTF+jNdHwzTaTs4sRAGpzLF3oOz5xAyDGrPgeIDFQmDOTiJw==}
    engines: {node: '>= 16'}

  chokidar@3.6.0:
    resolution: {integrity: sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==}
    engines: {node: '>= 8.10.0'}

  class-variance-authority@0.7.1:
    resolution: {integrity: sha512-Ka+9Trutv7G8M6WT6SeiRWz792K5qEqIGEGzXKhAE6xOWAY6pPH8U+9IY3oCMv6kqTmLsv7Xh/2w2RigkePMsg==}

  client-only@0.0.1:
    resolution: {integrity: sha512-IV3Ou0jSMzZrd3pZ48nLkT9DA7Ag1pnPzaiQhpW7c3RbcqqzvzzVu+L8gfqMp/8IM2MQtSiqaCxrrcfu8I8rMA==}

  clsx@2.1.1:
    resolution: {integrity: sha512-eYm0QWBtUrBWZWG0d386OGAw16Z995PiOVo2B7bjWSbHedGl5e0ZWaq65kOGgUSNesEIDkB9ISbTg/JK9dhCZA==}
    engines: {node: '>=6'}

  cmdk@1.0.4:
    resolution: {integrity: sha512-AnsjfHyHpQ/EFeAnG216WY7A5LiYCoZzCSygiLvfXC3H3LFGCprErteUcszaVluGOhuOTbJS3jWHrSDYPBBygg==}
    peerDependencies:
      react: ^18 || ^19 || ^19.0.0-rc
      react-dom: ^18 || ^19 || ^19.0.0-rc

  codemirror-spell-checker@1.1.2:
    resolution: {integrity: sha512-2Tl6n0v+GJRsC9K3MLCdLaMOmvWL0uukajNJseorZJsslaxZyZMgENocPU8R0DyoTAiKsyqiemSOZo7kjGV0LQ==}

  codemirror@5.65.19:
    resolution: {integrity: sha512-+aFkvqhaAVr1gferNMuN8vkTSrWIFvzlMV9I2KBLCWS2WpZ2+UAkZjlMZmEuT+gcXTi6RrGQCkWq1/bDtGqhIA==}

  color-convert@2.0.1:
    resolution: {integrity: sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==}
    engines: {node: '>=7.0.0'}

  color-name@1.1.4:
    resolution: {integrity: sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==}

  color-string@1.9.1:
    resolution: {integrity: sha512-shrVawQFojnZv6xM40anx4CkoDP+fZsw/ZerEMsW/pyzsRbElpsL/DBVW7q3ExxwusdNXI3lXpuhEZkzs8p5Eg==}

  color@4.2.3:
    resolution: {integrity: sha512-1rXeuUUiGGrykh+CeBdu5Ie7OJwinCgQY0bc7GCRxy5xVHy+moaqkpL/jqQq0MtQOeYcrqEz4abc5f0KtU7W4A==}
    engines: {node: '>=12.5.0'}

  combined-stream@1.0.8:
    resolution: {integrity: sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==}
    engines: {node: '>= 0.8'}

  commander@4.1.1:
    resolution: {integrity: sha512-NOKm8xhkzAjzFx8B2v5OAHT+u5pRQc2UCa2Vq9jYL/31o2wi9mxBA7LIFs3sV5VSC49z6pEhfbMULvShKj26WA==}
    engines: {node: '>= 6'}

  concat-map@0.0.1:
    resolution: {integrity: sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==}

  convert-source-map@2.0.0:
    resolution: {integrity: sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==}

  cross-spawn@7.0.6:
    resolution: {integrity: sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==}
    engines: {node: '>= 8'}

  css.escape@1.5.1:
    resolution: {integrity: sha512-YUifsXXuknHlUsmlgyY0PKzgPOr7/FjCePfHNt0jxm83wHZi44VDMQ7/fGNkjY3/jV1MC+1CmZbaHzugyeRtpg==}

  cssesc@3.0.0:
    resolution: {integrity: sha512-/Tb/JcjK111nNScGob5MNtsntNM1aCNUDipB/TkwZFhyDrrE47SOx/18wF2bbjgc3ZzCSKW1T5nt5EbFoAz/Vg==}
    engines: {node: '>=4'}
    hasBin: true

  cssstyle@4.6.0:
    resolution: {integrity: sha512-2z+rWdzbbSZv6/rhtvzvqeZQHrBaqgogqt85sqFNbabZOuFbCVFb8kPeEtZjiKkbrm395irpNKiYeFeLiQnFPg==}
    engines: {node: '>=18'}

  csstype@3.1.3:
    resolution: {integrity: sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==}

  d3-array@3.2.4:
    resolution: {integrity: sha512-tdQAmyA18i4J7wprpYq8ClcxZy3SC31QMeByyCFyRt7BVHdREQZ5lpzoe5mFEYZUWe+oq8HBvk9JjpibyEV4Jg==}
    engines: {node: '>=12'}

  d3-color@3.1.0:
    resolution: {integrity: sha512-zg/chbXyeBtMQ1LbD/WSoW2DpC3I0mpmPdW+ynRTj/x2DAWYrIY7qeZIHidozwV24m4iavr15lNwIwLxRmOxhA==}
    engines: {node: '>=12'}

  d3-ease@3.0.1:
    resolution: {integrity: sha512-wR/XK3D3XcLIZwpbvQwQ5fK+8Ykds1ip7A2Txe0yxncXSdq1L9skcG7blcedkOX+ZcgxGAmLX1FrRGbADwzi0w==}
    engines: {node: '>=12'}

  d3-format@3.1.0:
    resolution: {integrity: sha512-YyUI6AEuY/Wpt8KWLgZHsIU86atmikuoOmCfommt0LYHiQSPjvX2AcFc38PX0CBpr2RCyZhjex+NS/LPOv6YqA==}
    engines: {node: '>=12'}

  d3-interpolate@3.0.1:
    resolution: {integrity: sha512-3bYs1rOD33uo8aqJfKP3JWPAibgw8Zm2+L9vBKEHJ2Rg+viTR7o5Mmv5mZcieN+FRYaAOWX5SJATX6k1PWz72g==}
    engines: {node: '>=12'}

  d3-path@3.1.0:
    resolution: {integrity: sha512-p3KP5HCf/bvjBSSKuXid6Zqijx7wIfNW+J/maPs+iwR35at5JCbLUT0LzF1cnjbCHWhqzQTIN2Jpe8pRebIEFQ==}
    engines: {node: '>=12'}

  d3-scale@4.0.2:
    resolution: {integrity: sha512-GZW464g1SH7ag3Y7hXjf8RoUuAFIqklOAq3MRl4OaWabTFJY9PN/E1YklhXLh+OQ3fM9yS2nOkCoS+WLZ6kvxQ==}
    engines: {node: '>=12'}

  d3-shape@3.2.0:
    resolution: {integrity: sha512-SaLBuwGm3MOViRq2ABk3eLoxwZELpH6zhl3FbAoJ7Vm1gofKx6El1Ib5z23NUEhF9AsGl7y+dzLe5Cw2AArGTA==}
    engines: {node: '>=12'}

  d3-time-format@4.1.0:
    resolution: {integrity: sha512-dJxPBlzC7NugB2PDLwo9Q8JiTR3M3e4/XANkreKSUxF8vvXKqm1Yfq4Q5dl8budlunRVlUUaDUgFt7eA8D6NLg==}
    engines: {node: '>=12'}

  d3-time@3.1.0:
    resolution: {integrity: sha512-VqKjzBLejbSMT4IgbmVgDjpkYrNWUYJnbCGo874u7MMKIWsILRX+OpX/gTk8MqjpT1A/c6HY2dCA77ZN0lkQ2Q==}
    engines: {node: '>=12'}

  d3-timer@3.0.1:
    resolution: {integrity: sha512-ndfJ/JxxMd3nw31uyKoY2naivF+r29V+Lc0svZxe1JvvIRmi8hUsrMvdOwgS1o6uBHmiz91geQ0ylPP0aj1VUA==}
    engines: {node: '>=12'}

  damerau-levenshtein@1.0.8:
    resolution: {integrity: sha512-sdQSFB7+llfUcQHUQO3+B8ERRj0Oa4w9POWMI/puGtuf7gFywGmkaLCElnudfTiKZV+NvHqL0ifzdrI8Ro7ESA==}

  data-urls@5.0.0:
    resolution: {integrity: sha512-ZYP5VBHshaDAiVZxjbRVcFJpc+4xGgT0bK3vzy1HLN8jTO975HEbuYzZJcHoQEY5K1a0z8YayJkyVETa08eNTg==}
    engines: {node: '>=18'}

  data-view-buffer@1.0.2:
    resolution: {integrity: sha512-EmKO5V3OLXh1rtK2wgXRansaK1/mtVdTUEiEI0W8RkvgT05kfxaH29PliLnpLP73yYO6142Q72QNa8Wx/A5CqQ==}
    engines: {node: '>= 0.4'}

  data-view-byte-length@1.0.2:
    resolution: {integrity: sha512-tuhGbE6CfTM9+5ANGf+oQb72Ky/0+s3xKUpHvShfiz2RxMFgFPjsXuRLBVMtvMs15awe45SRb83D6wH4ew6wlQ==}
    engines: {node: '>= 0.4'}

  data-view-byte-offset@1.0.1:
    resolution: {integrity: sha512-BS8PfmtDGnrgYdOonGZQdLZslWIeCGFP9tpan0hi1Co2Zr2NKADsvGYA8XxuG/4UWgJ6Cjtv+YJnB6MM69QGlQ==}
    engines: {node: '>= 0.4'}

  date-fns@4.1.0:
    resolution: {integrity: sha512-Ukq0owbQXxa/U3EGtsdVBkR1w7KOQ5gIBqdH2hkvknzZPYvBxb/aa6E8L7tmjFtkwZBu3UXBbjIgPo/Ez4xaNg==}

  debug@3.2.7:
    resolution: {integrity: sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==}
    peerDependencies:
      supports-color: '*'
    peerDependenciesMeta:
      supports-color:
        optional: true

  debug@4.4.1:
    resolution: {integrity: sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==}
    engines: {node: '>=6.0'}
    peerDependencies:
      supports-color: '*'
    peerDependenciesMeta:
      supports-color:
        optional: true

  decimal.js-light@2.5.1:
    resolution: {integrity: sha512-qIMFpTMZmny+MMIitAB6D7iVPEorVw6YQRWkvarTkT4tBeSLLiHzcwj6q0MmYSFCiVpiqPJTJEYIrpcPzVEIvg==}

  decimal.js@10.5.0:
    resolution: {integrity: sha512-8vDa8Qxvr/+d94hSh5P3IJwI5t8/c0KsMp+g8bNw9cY2icONa5aPfvKeieW1WlG0WQYwwhJ7mjui2xtiePQSXw==}

  deep-eql@5.0.2:
    resolution: {integrity: sha512-h5k/5U50IJJFpzfL6nO9jaaumfjO/f2NjK/oYB2Djzm4p9L+3T9qWpZqZ2hAbLPuuYq9wrU08WQyBTL5GbPk5Q==}
    engines: {node: '>=6'}

  deep-is@0.1.4:
    resolution: {integrity: sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==}

  define-data-property@1.1.4:
    resolution: {integrity: sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==}
    engines: {node: '>= 0.4'}

  define-properties@1.2.1:
    resolution: {integrity: sha512-8QmQKqEASLd5nx0U1B1okLElbUuuttJ/AnYmRXbbbGDWh6uS208EjD4Xqq/I9wK7u0v6O08XhTWnt5XtEbR6Dg==}
    engines: {node: '>= 0.4'}

  delayed-stream@1.0.0:
    resolution: {integrity: sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==}
    engines: {node: '>=0.4.0'}

  dequal@2.0.3:
    resolution: {integrity: sha512-0je+qPKHEMohvfRTCEo3CrPG6cAzAYgmzKyxRiYSSDkS6eGJdyVJm7WaYA5ECaAD9wLB2T4EEeymA5aFVcYXCA==}
    engines: {node: '>=6'}

  detect-libc@2.0.4:
    resolution: {integrity: sha512-3UDv+G9CsCKO1WKMGw9fwq/SWJYbI0c5Y7LU1AXYoDdbhE2AHQ6N6Nb34sG8Fj7T5APy8qXDCKuuIHd1BR0tVA==}
    engines: {node: '>=8'}

  detect-node-es@1.1.0:
    resolution: {integrity: sha512-ypdmJU/TbBby2Dxibuv7ZLW3Bs1QEmM7nHjEANfohJLvE0XVujisn1qPJcZxg+qDucsr+bP6fLD1rPS3AhJ7EQ==}

  didyoumean@1.2.2:
    resolution: {integrity: sha512-gxtyfqMg7GKyhQmb056K7M3xszy/myH8w+B4RT+QXBQsvAOdc3XymqDDPHx1BgPgsdAA5SIifona89YtRATDzw==}

  dlv@1.1.3:
    resolution: {integrity: sha512-+HlytyjlPKnIG8XuRG8WvmBP8xs8P71y+SKKS6ZXWoEgLuePxtDoUEiH7WkdePWrQ5JBpE6aoVqfZfJUQkjXwA==}

  doctrine@2.1.0:
    resolution: {integrity: sha512-35mSku4ZXK0vfCuHEDAwt55dg2jNajHZ1odvF+8SSr82EsZY4QmXfuWso8oEd8zRhVObSN18aM0CjSdoBX7zIw==}
    engines: {node: '>=0.10.0'}

  dom-accessibility-api@0.5.16:
    resolution: {integrity: sha512-X7BJ2yElsnOJ30pZF4uIIDfBEVgF4XEBxL9Bxhy6dnrm5hkzqmsWHGTiHqRiITNhMyFLyAiWndIJP7Z1NTteDg==}

  dom-accessibility-api@0.6.3:
    resolution: {integrity: sha512-7ZgogeTnjuHbo+ct10G9Ffp0mif17idi0IyWNVA/wcwcm7NPOD/WEHVP3n7n3MhXqxoIYm8d6MuZohYWIZ4T3w==}

  dom-helpers@5.2.1:
    resolution: {integrity: sha512-nRCa7CK3VTrM2NmGkIy4cbK7IZlgBE/PYMn55rrXefr5xXDP0LdtfPnblFDoVdcAfslJ7or6iqAUnx0CCGIWQA==}

  dunder-proto@1.0.1:
    resolution: {integrity: sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==}
    engines: {node: '>= 0.4'}

  eastasianwidth@0.2.0:
    resolution: {integrity: sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==}

  easymde@2.20.0:
    resolution: {integrity: sha512-V1Z5f92TfR42Na852OWnIZMbM7zotWQYTddNaLYZFVKj7APBbyZ3FYJ27gBw2grMW3R6Qdv9J8n5Ij7XRSIgXQ==}

  electron-to-chromium@1.5.179:
    resolution: {integrity: sha512-UWKi/EbBopgfFsc5k61wFpV7WrnnSlSzW/e2XcBmS6qKYTivZlLtoll5/rdqRTxGglGHkmkW0j0pFNJG10EUIQ==}

  embla-carousel-react@8.5.1:
    resolution: {integrity: sha512-z9Y0K84BJvhChXgqn2CFYbfEi6AwEr+FFVVKm/MqbTQ2zIzO1VQri6w67LcfpVF0AjbhwVMywDZqY4alYkjW5w==}
    peerDependencies:
      react: ^16.8.0 || ^17.0.1 || ^18.0.0 || ^19.0.0 || ^19.0.0-rc

  embla-carousel-reactive-utils@8.5.1:
    resolution: {integrity: sha512-n7VSoGIiiDIc4MfXF3ZRTO59KDp820QDuyBDGlt5/65+lumPHxX2JLz0EZ23hZ4eg4vZGUXwMkYv02fw2JVo/A==}
    peerDependencies:
      embla-carousel: 8.5.1

  embla-carousel@8.5.1:
    resolution: {integrity: sha512-JUb5+FOHobSiWQ2EJNaueCNT/cQU9L6XWBbWmorWPQT9bkbk+fhsuLr8wWrzXKagO3oWszBO7MSx+GfaRk4E6A==}

  emoji-regex@8.0.0:
    resolution: {integrity: sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==}

  emoji-regex@9.2.2:
    resolution: {integrity: sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==}

  entities@6.0.1:
    resolution: {integrity: sha512-aN97NXWF6AWBTahfVOIrB/NShkzi5H7F9r1s9mD3cDj4Ko5f2qhhVoYMibXF7GlLveb/D2ioWay8lxI97Ven3g==}
    engines: {node: '>=0.12'}

  es-abstract@1.24.0:
    resolution: {integrity: sha512-WSzPgsdLtTcQwm4CROfS5ju2Wa1QQcVeT37jFjYzdFz1r9ahadC8B8/a4qxJxM+09F18iumCdRmlr96ZYkQvEg==}
    engines: {node: '>= 0.4'}

  es-define-property@1.0.1:
    resolution: {integrity: sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==}
    engines: {node: '>= 0.4'}

  es-errors@1.3.0:
    resolution: {integrity: sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==}
    engines: {node: '>= 0.4'}

  es-iterator-helpers@1.2.1:
    resolution: {integrity: sha512-uDn+FE1yrDzyC0pCo961B2IHbdM8y/ACZsKD4dG6WqrjV53BADjwa7D+1aom2rsNVfLyDgU/eigvlJGJ08OQ4w==}
    engines: {node: '>= 0.4'}

  es-module-lexer@1.7.0:
    resolution: {integrity: sha512-jEQoCwk8hyb2AZziIOLhDqpm5+2ww5uIE6lkO/6jcOCusfk6LhMHpXXfBLXTZ7Ydyt0j4VoUQv6uGNYbdW+kBA==}

  es-object-atoms@1.1.1:
    resolution: {integrity: sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==}
    engines: {node: '>= 0.4'}

  es-set-tostringtag@2.1.0:
    resolution: {integrity: sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==}
    engines: {node: '>= 0.4'}

  es-shim-unscopables@1.1.0:
    resolution: {integrity: sha512-d9T8ucsEhh8Bi1woXCf+TIKDIROLG5WCkxg8geBCbvk22kzwC5G2OnXVMO6FUsvQlgUUXQ2itephWDLqDzbeCw==}
    engines: {node: '>= 0.4'}

  es-to-primitive@1.3.0:
    resolution: {integrity: sha512-w+5mJ3GuFL+NjVtJlvydShqE1eN3h3PbI7/5LAsYJP/2qtuMXjfL2LpHSRqo4b4eSF5K/DH1JXKUAHSB2UW50g==}
    engines: {node: '>= 0.4'}

  esbuild@0.25.5:
    resolution: {integrity: sha512-P8OtKZRv/5J5hhz0cUAdu/cLuPIKXpQl1R9pZtvmHWQvrAUVd0UNIPT4IB4W3rNOqVO0rlqHmCIbSwxh/c9yUQ==}
    engines: {node: '>=18'}
    hasBin: true

  escalade@3.2.0:
    resolution: {integrity: sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==}
    engines: {node: '>=6'}

  escape-string-regexp@4.0.0:
    resolution: {integrity: sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==}
    engines: {node: '>=10'}

  eslint-config-next@15.3.4:
    resolution: {integrity: sha512-WqeumCq57QcTP2lYlV6BRUySfGiBYEXlQ1L0mQ+u4N4X4ZhUVSSQ52WtjqHv60pJ6dD7jn+YZc0d1/ZSsxccvg==}
    peerDependencies:
      eslint: ^7.23.0 || ^8.0.0 || ^9.0.0
      typescript: '>=3.3.1'
    peerDependenciesMeta:
      typescript:
        optional: true

  eslint-import-resolver-node@0.3.9:
    resolution: {integrity: sha512-WFj2isz22JahUv+B788TlO3N6zL3nNJGU8CcZbPZvVEkBPaJdCV4vy5wyghty5ROFbCRnm132v8BScu5/1BQ8g==}

  eslint-import-resolver-typescript@3.10.1:
    resolution: {integrity: sha512-A1rHYb06zjMGAxdLSkN2fXPBwuSaQ0iO5M/hdyS0Ajj1VBaRp0sPD3dn1FhME3c/JluGFbwSxyCfqdSbtQLAHQ==}
    engines: {node: ^14.18.0 || >=16.0.0}
    peerDependencies:
      eslint: '*'
      eslint-plugin-import: '*'
      eslint-plugin-import-x: '*'
    peerDependenciesMeta:
      eslint-plugin-import:
        optional: true
      eslint-plugin-import-x:
        optional: true

  eslint-module-utils@2.12.1:
    resolution: {integrity: sha512-L8jSWTze7K2mTg0vos/RuLRS5soomksDPoJLXIslC7c8Wmut3bx7CPpJijDcBZtxQ5lrbUdM+s0OlNbz0DCDNw==}
    engines: {node: '>=4'}
    peerDependencies:
      '@typescript-eslint/parser': '*'
      eslint: '*'
      eslint-import-resolver-node: '*'
      eslint-import-resolver-typescript: '*'
      eslint-import-resolver-webpack: '*'
    peerDependenciesMeta:
      '@typescript-eslint/parser':
        optional: true
      eslint:
        optional: true
      eslint-import-resolver-node:
        optional: true
      eslint-import-resolver-typescript:
        optional: true
      eslint-import-resolver-webpack:
        optional: true

  eslint-plugin-import@2.32.0:
    resolution: {integrity: sha512-whOE1HFo/qJDyX4SnXzP4N6zOWn79WhnCUY/iDR0mPfQZO8wcYE4JClzI2oZrhBnnMUCBCHZhO6VQyoBU95mZA==}
    engines: {node: '>=4'}
    peerDependencies:
      '@typescript-eslint/parser': '*'
      eslint: ^2 || ^3 || ^4 || ^5 || ^6 || ^7.2.0 || ^8 || ^9
    peerDependenciesMeta:
      '@typescript-eslint/parser':
        optional: true

  eslint-plugin-jsx-a11y@6.10.2:
    resolution: {integrity: sha512-scB3nz4WmG75pV8+3eRUQOHZlNSUhFNq37xnpgRkCCELU3XMvXAxLk1eqWWyE22Ki4Q01Fnsw9BA3cJHDPgn2Q==}
    engines: {node: '>=4.0'}
    peerDependencies:
      eslint: ^3 || ^4 || ^5 || ^6 || ^7 || ^8 || ^9

  eslint-plugin-react-hooks@5.2.0:
    resolution: {integrity: sha512-+f15FfK64YQwZdJNELETdn5ibXEUQmW1DZL6KXhNnc2heoy/sg9VJJeT7n8TlMWouzWqSWavFkIhHyIbIAEapg==}
    engines: {node: '>=10'}
    peerDependencies:
      eslint: ^3.0.0 || ^4.0.0 || ^5.0.0 || ^6.0.0 || ^7.0.0 || ^8.0.0-0 || ^9.0.0

  eslint-plugin-react@7.37.5:
    resolution: {integrity: sha512-Qteup0SqU15kdocexFNAJMvCJEfa2xUKNV4CC1xsVMrIIqEy3SQ/rqyxCWNzfrd3/ldy6HMlD2e0JDVpDg2qIA==}
    engines: {node: '>=4'}
    peerDependencies:
      eslint: ^3 || ^4 || ^5 || ^6 || ^7 || ^8 || ^9.7

  eslint-scope@8.4.0:
    resolution: {integrity: sha512-sNXOfKCn74rt8RICKMvJS7XKV/Xk9kA7DyJr8mJik3S7Cwgy3qlkkmyS2uQB3jiJg6VNdZd/pDBJu0nvG2NlTg==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  eslint-visitor-keys@3.4.3:
    resolution: {integrity: sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  eslint-visitor-keys@4.2.1:
    resolution: {integrity: sha512-Uhdk5sfqcee/9H/rCOJikYz67o0a2Tw2hGRPOG2Y1R2dg7brRe1uG0yaNQDHu+TO/uQPF/5eCapvYSmHUjt7JQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  eslint@9.30.1:
    resolution: {integrity: sha512-zmxXPNMOXmwm9E0yQLi5uqXHs7uq2UIiqEKo3Gq+3fwo1XrJ+hijAZImyF7hclW3E6oHz43Yk3RP8at6OTKflQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    hasBin: true
    peerDependencies:
      jiti: '*'
    peerDependenciesMeta:
      jiti:
        optional: true

  espree@10.4.0:
    resolution: {integrity: sha512-j6PAQ2uUr79PZhBjP5C5fhl8e39FmRnOjsD5lGnWrFU8i2G776tBK7+nP8KuQUTTyAZUwfQqXAgrVH5MbH9CYQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  esquery@1.6.0:
    resolution: {integrity: sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==}
    engines: {node: '>=0.10'}

  esrecurse@4.3.0:
    resolution: {integrity: sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==}
    engines: {node: '>=4.0'}

  estraverse@5.3.0:
    resolution: {integrity: sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==}
    engines: {node: '>=4.0'}

  estree-walker@3.0.3:
    resolution: {integrity: sha512-7RUKfXgSMMkzt6ZuXmqapOurLGPPfgj6l9uRZ7lRGolvk0y2yocc35LdcxKC5PQZdn2DMqioAQ2NoWcrTKmm6g==}

  esutils@2.0.3:
    resolution: {integrity: sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==}
    engines: {node: '>=0.10.0'}

  eventemitter3@4.0.7:
    resolution: {integrity: sha512-8guHBZCwKnFhYdHr2ysuRWErTwhoN2X8XELRlrRwpmfeY2jjuUN4taQMsULKUVo1K4DvZl+0pgfyoysHxvmvEw==}

  expect-type@1.2.1:
    resolution: {integrity: sha512-/kP8CAwxzLVEeFrMm4kMmy4CCDlpipyA7MYLVrdJIkV0fYF0UaigQHRsxHiuY/GEea+bh4KSv3TIlgr+2UL6bw==}
    engines: {node: '>=12.0.0'}

  fast-deep-equal@3.1.3:
    resolution: {integrity: sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==}

  fast-equals@5.2.2:
    resolution: {integrity: sha512-V7/RktU11J3I36Nwq2JnZEM7tNm17eBJz+u25qdxBZeCKiX6BkVSZQjwWIr+IobgnZy+ag73tTZgZi7tr0LrBw==}
    engines: {node: '>=6.0.0'}

  fast-glob@3.3.1:
    resolution: {integrity: sha512-kNFPyjhh5cKjrUltxs+wFx+ZkbRaxxmZ+X0ZU31SOsxCEtP9VPgtq2teZw1DebupL5GmDaNQ6yKMMVcM41iqDg==}
    engines: {node: '>=8.6.0'}

  fast-glob@3.3.3:
    resolution: {integrity: sha512-7MptL8U0cqcFdzIzwOTHoilX9x5BrNqye7Z/LuC7kCMRio1EMSyqRK3BEAUD7sXRq4iT4AzTVuZdhgQ2TCvYLg==}
    engines: {node: '>=8.6.0'}

  fast-json-stable-stringify@2.1.0:
    resolution: {integrity: sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==}

  fast-levenshtein@2.0.6:
    resolution: {integrity: sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==}

  fastq@1.19.1:
    resolution: {integrity: sha512-GwLTyxkCXjXbxqIhTsMI2Nui8huMPtnxg7krajPJAjnEG/iiOS7i+zCtWGZR9G0NBKbXKh6X9m9UIsYX/N6vvQ==}

  fdir@6.4.6:
    resolution: {integrity: sha512-hiFoqpyZcfNm1yc4u8oWCf9A2c4D3QjCrks3zmoVKVxpQRzmPNar1hUJcBG2RQHvEVGDN+Jm81ZheVLAQMK6+w==}
    peerDependencies:
      picomatch: ^3 || ^4
    peerDependenciesMeta:
      picomatch:
        optional: true

  fflate@0.8.2:
    resolution: {integrity: sha512-cPJU47OaAoCbg0pBvzsgpTPhmhqI5eJjh/JIu8tPj5q+T7iLvW/JAYUqmE7KOB4R1ZyEhzBaIQpQpardBF5z8A==}

  file-entry-cache@8.0.0:
    resolution: {integrity: sha512-XXTUwCvisa5oacNGRP9SfNtYBNAMi+RPwBFmblZEF7N7swHYQS6/Zfk7SRwx4D5j3CH211YNRco1DEMNVfZCnQ==}
    engines: {node: '>=16.0.0'}

  fill-range@7.1.1:
    resolution: {integrity: sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==}
    engines: {node: '>=8'}

  find-up@5.0.0:
    resolution: {integrity: sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==}
    engines: {node: '>=10'}

  flat-cache@4.0.1:
    resolution: {integrity: sha512-f7ccFPK3SXFHpx15UIGyRJ/FJQctuKZ0zVuN3frBo4HnK3cay9VEW0R6yPYFHC0AgqhukPzKjq22t5DmAyqGyw==}
    engines: {node: '>=16'}

  flatted@3.3.3:
    resolution: {integrity: sha512-GX+ysw4PBCz0PzosHDepZGANEuFCMLrnRTiEy9McGjmkCQYwRq4A/X786G/fjM/+OjsWSU1ZrY5qyARZmO/uwg==}

  follow-redirects@1.15.9:
    resolution: {integrity: sha512-gew4GsXizNgdoRyqmyfMHyAmXsZDk6mHkSxZFCzW9gwlbtOW44CDtYavM+y+72qD/Vq2l550kMF52DT8fOLJqQ==}
    engines: {node: '>=4.0'}
    peerDependencies:
      debug: '*'
    peerDependenciesMeta:
      debug:
        optional: true

  for-each@0.3.5:
    resolution: {integrity: sha512-dKx12eRCVIzqCxFGplyFKJMPvLEWgmNtUrpTiJIR5u97zEhRG8ySrtboPHZXx7daLxQVrl643cTzbab2tkQjxg==}
    engines: {node: '>= 0.4'}

  foreground-child@3.3.1:
    resolution: {integrity: sha512-gIXjKqtFuWEgzFRJA9WCQeSJLZDjgJUOMCMzxtvFq/37KojM1BFGufqsCy0r4qSQmYLsZYMeyRqzIWOMup03sw==}
    engines: {node: '>=14'}

  form-data@4.0.3:
    resolution: {integrity: sha512-qsITQPfmvMOSAdeyZ+12I1c+CKSstAFAwu+97zrnWAbIr5u8wfsExUzCesVLC8NgHuRUqNN4Zy6UPWUTRGslcA==}
    engines: {node: '>= 6'}

  fraction.js@4.3.7:
    resolution: {integrity: sha512-ZsDfxO51wGAXREY55a7la9LScWpwv9RxIrYABrlvOFBlH/ShPnrtsXeuUIfXKKOVicNxQ+o8JTbJvjS4M89yew==}

  fsevents@2.3.2:
    resolution: {integrity: sha512-xiqMQR4xAeHTuB9uWm+fFRcIOgKBMiOBP+eXiyT7jsgVCq1bkVygt00oASowB7EdtpOHaaPgKt812P9ab+DDKA==}
    engines: {node: ^8.16.0 || ^10.6.0 || >=11.0.0}
    os: [darwin]

  fsevents@2.3.3:
    resolution: {integrity: sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==}
    engines: {node: ^8.16.0 || ^10.6.0 || >=11.0.0}
    os: [darwin]

  function-bind@1.1.2:
    resolution: {integrity: sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==}

  function.prototype.name@1.1.8:
    resolution: {integrity: sha512-e5iwyodOHhbMr/yNrc7fDYG4qlbIvI5gajyzPnb5TCwyhjApznQh1BMFou9b30SevY43gCJKXycoCBjMbsuW0Q==}
    engines: {node: '>= 0.4'}

  functions-have-names@1.2.3:
    resolution: {integrity: sha512-xckBUXyTIqT97tq2x2AMb+g163b5JFysYk0x4qxNFwbfQkmNZoiRHb6sPzI9/QV33WeuvVYBUIiD4NzNIyqaRQ==}

  gensync@1.0.0-beta.2:
    resolution: {integrity: sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==}
    engines: {node: '>=6.9.0'}

  get-intrinsic@1.3.0:
    resolution: {integrity: sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==}
    engines: {node: '>= 0.4'}

  get-nonce@1.0.1:
    resolution: {integrity: sha512-FJhYRoDaiatfEkUK8HKlicmu/3SGFD51q3itKDGoSTysQJBnfOcxU5GxnhE1E6soB76MbT0MBtnKJuXyAx+96Q==}
    engines: {node: '>=6'}

  get-proto@1.0.1:
    resolution: {integrity: sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==}
    engines: {node: '>= 0.4'}

  get-symbol-description@1.1.0:
    resolution: {integrity: sha512-w9UMqWwJxHNOvoNzSJ2oPF5wvYcvP7jUvYzhp67yEhTi17ZDBBC1z9pTdGuzjD+EFIqLSYRweZjqfiPzQ06Ebg==}
    engines: {node: '>= 0.4'}

  get-tsconfig@4.10.1:
    resolution: {integrity: sha512-auHyJ4AgMz7vgS8Hp3N6HXSmlMdUyhSUrfBF16w153rxtLIEOE+HGqaBppczZvnHLqQJfiHotCYpNhl0lUROFQ==}

  glob-parent@5.1.2:
    resolution: {integrity: sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==}
    engines: {node: '>= 6'}

  glob-parent@6.0.2:
    resolution: {integrity: sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==}
    engines: {node: '>=10.13.0'}

  glob@10.4.5:
    resolution: {integrity: sha512-7Bv8RF0k6xjo7d4A/PxYLbUCfb6c+Vpd2/mB2yRDlew7Jb5hEXiCD9ibfO7wpk8i4sevK6DFny9h7EYbM3/sHg==}
    hasBin: true

  globals@14.0.0:
    resolution: {integrity: sha512-oahGvuMGQlPw/ivIYBjVSrWAfWLBeku5tpPE2fOPLi+WHffIWbuh2tCjhyQhTBPMf5E9jDEH4FOmTYgYwbKwtQ==}
    engines: {node: '>=18'}

  globalthis@1.0.4:
    resolution: {integrity: sha512-DpLKbNU4WylpxJykQujfCcwYWiV/Jhm50Goo0wrVILAv5jOr9d+H+UR3PhSCD2rCCEIg0uc+G+muBTwD54JhDQ==}
    engines: {node: '>= 0.4'}

  gopd@1.2.0:
    resolution: {integrity: sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==}
    engines: {node: '>= 0.4'}

  graphemer@1.4.0:
    resolution: {integrity: sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==}

  has-bigints@1.1.0:
    resolution: {integrity: sha512-R3pbpkcIqv2Pm3dUwgjclDRVmWpTJW2DcMzcIhEXEx1oh/CEMObMm3KLmRJOdvhM7o4uQBnwr8pzRK2sJWIqfg==}
    engines: {node: '>= 0.4'}

  has-flag@4.0.0:
    resolution: {integrity: sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==}
    engines: {node: '>=8'}

  has-property-descriptors@1.0.2:
    resolution: {integrity: sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==}

  has-proto@1.2.0:
    resolution: {integrity: sha512-KIL7eQPfHQRC8+XluaIw7BHUwwqL19bQn4hzNgdr+1wXoU0KKj6rufu47lhY7KbJR2C6T6+PfyN0Ea7wkSS+qQ==}
    engines: {node: '>= 0.4'}

  has-symbols@1.1.0:
    resolution: {integrity: sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==}
    engines: {node: '>= 0.4'}

  has-tostringtag@1.0.2:
    resolution: {integrity: sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==}
    engines: {node: '>= 0.4'}

  hasown@2.0.2:
    resolution: {integrity: sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==}
    engines: {node: '>= 0.4'}

  html-encoding-sniffer@4.0.0:
    resolution: {integrity: sha512-Y22oTqIU4uuPgEemfz7NDJz6OeKf12Lsu+QC+s3BVpda64lTiMYCyGwg5ki4vFxkMwQdeZDl2adZoqUgdFuTgQ==}
    engines: {node: '>=18'}

  http-proxy-agent@7.0.2:
    resolution: {integrity: sha512-T1gkAiYYDWYx3V5Bmyu7HcfcvL7mUrTWiM6yOfa3PIphViJ/gFPbvidQ+veqSOHci/PxBcDabeUNCzpOODJZig==}
    engines: {node: '>= 14'}

  https-proxy-agent@7.0.6:
    resolution: {integrity: sha512-vK9P5/iUfdl95AI+JVyUuIcVtd4ofvtrOr3HNtM2yxC9bnMbEdp3x01OhQNnjb8IJYi38VlTE3mBXwcfvywuSw==}
    engines: {node: '>= 14'}

  iconv-lite@0.6.3:
    resolution: {integrity: sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==}
    engines: {node: '>=0.10.0'}

  ignore@5.3.2:
    resolution: {integrity: sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==}
    engines: {node: '>= 4'}

  ignore@7.0.5:
    resolution: {integrity: sha512-Hs59xBNfUIunMFgWAbGX5cq6893IbWg4KnrjbYwX3tx0ztorVgTDA6B2sxf8ejHJ4wz8BqGUMYlnzNBer5NvGg==}
    engines: {node: '>= 4'}

  import-fresh@3.3.1:
    resolution: {integrity: sha512-TR3KfrTZTYLPB6jUjfx6MF9WcWrHL9su5TObK4ZkYgBdWKPOFoSoQIdEuTuR82pmtxH2spWG9h6etwfr1pLBqQ==}
    engines: {node: '>=6'}

  imurmurhash@0.1.4:
    resolution: {integrity: sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==}
    engines: {node: '>=0.8.19'}

  indent-string@4.0.0:
    resolution: {integrity: sha512-EdDDZu4A2OyIK7Lr/2zG+w5jmbuk1DVBnEwREQvBzspBJkCEbRa8GxU1lghYcaGJCnRWibjDXlq779X1/y5xwg==}
    engines: {node: '>=8'}

  input-otp@1.4.1:
    resolution: {integrity: sha512-+yvpmKYKHi9jIGngxagY9oWiiblPB7+nEO75F2l2o4vs+6vpPZZmUl4tBNYuTCvQjhvEIbdNeJu70bhfYP2nbw==}
    peerDependencies:
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0.0 || ^19.0.0-rc

  internal-slot@1.1.0:
    resolution: {integrity: sha512-4gd7VpWNQNB4UKKCFFVcp1AVv+FMOgs9NKzjHKusc8jTMhd5eL1NqQqOpE0KzMds804/yHlglp3uxgluOqAPLw==}
    engines: {node: '>= 0.4'}

  internmap@2.0.3:
    resolution: {integrity: sha512-5Hh7Y1wQbvY5ooGgPbDaL5iYLAPzMTUrjMulskHLH6wnv/A+1q5rgEaiuqEjB+oxGXIVZs1FF+R/KPN3ZSQYYg==}
    engines: {node: '>=12'}

  is-array-buffer@3.0.5:
    resolution: {integrity: sha512-DDfANUiiG2wC1qawP66qlTugJeL5HyzMpfr8lLK+jMQirGzNod0B12cFB/9q838Ru27sBwfw78/rdoU7RERz6A==}
    engines: {node: '>= 0.4'}

  is-arrayish@0.3.2:
    resolution: {integrity: sha512-eVRqCvVlZbuw3GrM63ovNSNAeA1K16kaR/LRY/92w0zxQ5/1YzwblUX652i4Xs9RwAGjW9d9y6X88t8OaAJfWQ==}

  is-async-function@2.1.1:
    resolution: {integrity: sha512-9dgM/cZBnNvjzaMYHVoxxfPj2QXt22Ev7SuuPrs+xav0ukGB0S6d4ydZdEiM48kLx5kDV+QBPrpVnFyefL8kkQ==}
    engines: {node: '>= 0.4'}

  is-bigint@1.1.0:
    resolution: {integrity: sha512-n4ZT37wG78iz03xPRKJrHTdZbe3IicyucEtdRsV5yglwc3GyUfbAfpSeD0FJ41NbUNSt5wbhqfp1fS+BgnvDFQ==}
    engines: {node: '>= 0.4'}

  is-binary-path@2.1.0:
    resolution: {integrity: sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==}
    engines: {node: '>=8'}

  is-boolean-object@1.2.2:
    resolution: {integrity: sha512-wa56o2/ElJMYqjCjGkXri7it5FbebW5usLw/nPmCMs5DeZ7eziSYZhSmPRn0txqeW4LnAmQQU7FgqLpsEFKM4A==}
    engines: {node: '>= 0.4'}

  is-bun-module@2.0.0:
    resolution: {integrity: sha512-gNCGbnnnnFAUGKeZ9PdbyeGYJqewpmc2aKHUEMO5nQPWU9lOmv7jcmQIv+qHD8fXW6W7qfuCwX4rY9LNRjXrkQ==}

  is-callable@1.2.7:
    resolution: {integrity: sha512-1BC0BVFhS/p0qtw6enp8e+8OD0UrK0oFLztSjNzhcKA3WDuJxxAPXzPuPtKkjEY9UUoEWlX/8fgKeu2S8i9JTA==}
    engines: {node: '>= 0.4'}

  is-core-module@2.16.1:
    resolution: {integrity: sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==}
    engines: {node: '>= 0.4'}

  is-data-view@1.0.2:
    resolution: {integrity: sha512-RKtWF8pGmS87i2D6gqQu/l7EYRlVdfzemCJN/P3UOs//x1QE7mfhvzHIApBTRf7axvT6DMGwSwBXYCT0nfB9xw==}
    engines: {node: '>= 0.4'}

  is-date-object@1.1.0:
    resolution: {integrity: sha512-PwwhEakHVKTdRNVOw+/Gyh0+MzlCl4R6qKvkhuvLtPMggI1WAHt9sOwZxQLSGpUaDnrdyDsomoRgNnCfKNSXXg==}
    engines: {node: '>= 0.4'}

  is-extglob@2.1.1:
    resolution: {integrity: sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==}
    engines: {node: '>=0.10.0'}

  is-finalizationregistry@1.1.1:
    resolution: {integrity: sha512-1pC6N8qWJbWoPtEjgcL2xyhQOP491EQjeUo3qTKcmV8YSDDJrOepfG8pcC7h/QgnQHYSv0mJ3Z/ZWxmatVrysg==}
    engines: {node: '>= 0.4'}

  is-fullwidth-code-point@3.0.0:
    resolution: {integrity: sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==}
    engines: {node: '>=8'}

  is-generator-function@1.1.0:
    resolution: {integrity: sha512-nPUB5km40q9e8UfN/Zc24eLlzdSf9OfKByBw9CIdw4H1giPMeA0OIJvbchsCu4npfI2QcMVBsGEBHKZ7wLTWmQ==}
    engines: {node: '>= 0.4'}

  is-glob@4.0.3:
    resolution: {integrity: sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==}
    engines: {node: '>=0.10.0'}

  is-map@2.0.3:
    resolution: {integrity: sha512-1Qed0/Hr2m+YqxnM09CjA2d/i6YZNfF6R2oRAOj36eUdS6qIV/huPJNSEpKbupewFs+ZsJlxsjjPbc0/afW6Lw==}
    engines: {node: '>= 0.4'}

  is-negative-zero@2.0.3:
    resolution: {integrity: sha512-5KoIu2Ngpyek75jXodFvnafB6DJgr3u8uuK0LEZJjrU19DrMD3EVERaR8sjz8CCGgpZvxPl9SuE1GMVPFHx1mw==}
    engines: {node: '>= 0.4'}

  is-number-object@1.1.1:
    resolution: {integrity: sha512-lZhclumE1G6VYD8VHe35wFaIif+CTy5SJIi5+3y4psDgWu4wPDoBhF8NxUOinEc7pHgiTsT6MaBb92rKhhD+Xw==}
    engines: {node: '>= 0.4'}

  is-number@7.0.0:
    resolution: {integrity: sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==}
    engines: {node: '>=0.12.0'}

  is-potential-custom-element-name@1.0.1:
    resolution: {integrity: sha512-bCYeRA2rVibKZd+s2625gGnGF/t7DSqDs4dP7CrLA1m7jKWz6pps0LpYLJN8Q64HtmPKJ1hrN3nzPNKFEKOUiQ==}

  is-regex@1.2.1:
    resolution: {integrity: sha512-MjYsKHO5O7mCsmRGxWcLWheFqN9DJ/2TmngvjKXihe6efViPqc274+Fx/4fYj/r03+ESvBdTXK0V6tA3rgez1g==}
    engines: {node: '>= 0.4'}

  is-set@2.0.3:
    resolution: {integrity: sha512-iPAjerrse27/ygGLxw+EBR9agv9Y6uLeYVJMu+QNCoouJ1/1ri0mGrcWpfCqFZuzzx3WjtwxG098X+n4OuRkPg==}
    engines: {node: '>= 0.4'}

  is-shared-array-buffer@1.0.4:
    resolution: {integrity: sha512-ISWac8drv4ZGfwKl5slpHG9OwPNty4jOWPRIhBpxOoD+hqITiwuipOQ2bNthAzwA3B4fIjO4Nln74N0S9byq8A==}
    engines: {node: '>= 0.4'}

  is-string@1.1.1:
    resolution: {integrity: sha512-BtEeSsoaQjlSPBemMQIrY1MY0uM6vnS1g5fmufYOtnxLGUZM2178PKbhsk7Ffv58IX+ZtcvoGwccYsh0PglkAA==}
    engines: {node: '>= 0.4'}

  is-symbol@1.1.1:
    resolution: {integrity: sha512-9gGx6GTtCQM73BgmHQXfDmLtfjjTUDSyoxTCbp5WtoixAhfgsDirWIcVQ/IHpvI5Vgd5i/J5F7B9cN/WlVbC/w==}
    engines: {node: '>= 0.4'}

  is-typed-array@1.1.15:
    resolution: {integrity: sha512-p3EcsicXjit7SaskXHs1hA91QxgTw46Fv6EFKKGS5DRFLD8yKnohjF3hxoju94b/OcMZoQukzpPpBE9uLVKzgQ==}
    engines: {node: '>= 0.4'}

  is-weakmap@2.0.2:
    resolution: {integrity: sha512-K5pXYOm9wqY1RgjpL3YTkF39tni1XajUIkawTLUo9EZEVUFga5gSQJF8nNS7ZwJQ02y+1YCNYcMh+HIf1ZqE+w==}
    engines: {node: '>= 0.4'}

  is-weakref@1.1.1:
    resolution: {integrity: sha512-6i9mGWSlqzNMEqpCp93KwRS1uUOodk2OJ6b+sq7ZPDSy2WuI5NFIxp/254TytR8ftefexkWn5xNiHUNpPOfSew==}
    engines: {node: '>= 0.4'}

  is-weakset@2.0.4:
    resolution: {integrity: sha512-mfcwb6IzQyOKTs84CQMrOwW4gQcaTOAWJ0zzJCl2WSPDrWk/OzDaImWFH3djXhb24g4eudZfLRozAvPGw4d9hQ==}
    engines: {node: '>= 0.4'}

  isarray@2.0.5:
    resolution: {integrity: sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==}

  isexe@2.0.0:
    resolution: {integrity: sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==}

  iterator.prototype@1.1.5:
    resolution: {integrity: sha512-H0dkQoCa3b2VEeKQBOxFph+JAbcrQdE7KC0UkqwpLmv2EC4P41QXP+rqo9wYodACiG5/WM5s9oDApTU8utwj9g==}
    engines: {node: '>= 0.4'}

  jackspeak@3.4.3:
    resolution: {integrity: sha512-OGlZQpz2yfahA/Rd1Y8Cd9SIEsqvXkLVoSw/cgwhnhFMDbsQFeZYoJJ7bIZBS9BcamUW96asq/npPWugM+RQBw==}

  jiti@1.21.7:
    resolution: {integrity: sha512-/imKNG4EbWNrVjoNC/1H5/9GFy+tqjGBHCaSsN+P2RnPqjsLmv6UD3Ej+Kj8nBWaRAwyk7kK5ZUc+OEatnTR3A==}
    hasBin: true

  js-tokens@4.0.0:
    resolution: {integrity: sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==}

  js-tokens@9.0.1:
    resolution: {integrity: sha512-mxa9E9ITFOt0ban3j6L5MpjwegGz6lBQmM1IJkWeBZGcMxto50+eWdjC/52xDbS2vy0k7vIMK0Fe2wfL9OQSpQ==}

  js-yaml@4.1.0:
    resolution: {integrity: sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==}
    hasBin: true

  jsdom@26.1.0:
    resolution: {integrity: sha512-Cvc9WUhxSMEo4McES3P7oK3QaXldCfNWp7pl2NNeiIFlCoLr3kfq9kb1fxftiwk1FLV7CvpvDfonxtzUDeSOPg==}
    engines: {node: '>=18'}
    peerDependencies:
      canvas: ^3.0.0
    peerDependenciesMeta:
      canvas:
        optional: true

  jsesc@3.1.0:
    resolution: {integrity: sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==}
    engines: {node: '>=6'}
    hasBin: true

  json-buffer@3.0.1:
    resolution: {integrity: sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==}

  json-schema-traverse@0.4.1:
    resolution: {integrity: sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==}

  json-stable-stringify-without-jsonify@1.0.1:
    resolution: {integrity: sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==}

  json5@1.0.2:
    resolution: {integrity: sha512-g1MWMLBiz8FKi1e4w0UyVL3w+iJceWAFBAaBnnGKOpNa5f8TLktkbre1+s6oICydWAm+HRUGTmI+//xv2hvXYA==}
    hasBin: true

  json5@2.2.3:
    resolution: {integrity: sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==}
    engines: {node: '>=6'}
    hasBin: true

  jsx-ast-utils@3.3.5:
    resolution: {integrity: sha512-ZZow9HBI5O6EPgSJLUb8n2NKgmVWTwCvHGwFuJlMjvLFqlGG6pjirPhtdsseaLZjSibD8eegzmYpUZwoIlj2cQ==}
    engines: {node: '>=4.0'}

  keyv@4.5.4:
    resolution: {integrity: sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==}

  language-subtag-registry@0.3.23:
    resolution: {integrity: sha512-0K65Lea881pHotoGEa5gDlMxt3pctLi2RplBb7Ezh4rRdLEOtgi7n4EwK9lamnUCkKBqaeKRVebTq6BAxSkpXQ==}

  language-tags@1.0.9:
    resolution: {integrity: sha512-MbjN408fEndfiQXbFQ1vnd+1NoLDsnQW41410oQBXiyXDMYH5z505juWa4KUE1LqxRC7DgOgZDbKLxHIwm27hA==}
    engines: {node: '>=0.10'}

  levn@0.4.1:
    resolution: {integrity: sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==}
    engines: {node: '>= 0.8.0'}

  lilconfig@3.1.3:
    resolution: {integrity: sha512-/vlFKAoH5Cgt3Ie+JLhRbwOsCQePABiU3tJ1egGvyQ+33R/vcwM2Zl2QR/LzjsBeItPt3oSVXapn+m4nQDvpzw==}
    engines: {node: '>=14'}

  lines-and-columns@1.2.4:
    resolution: {integrity: sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==}

  locate-path@6.0.0:
    resolution: {integrity: sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==}
    engines: {node: '>=10'}

  lodash.merge@4.6.2:
    resolution: {integrity: sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==}

  lodash@4.17.21:
    resolution: {integrity: sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==}

  loose-envify@1.4.0:
    resolution: {integrity: sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==}
    hasBin: true

  loupe@3.1.4:
    resolution: {integrity: sha512-wJzkKwJrheKtknCOKNEtDK4iqg/MxmZheEMtSTYvnzRdEYaZzmgH976nenp8WdJRdx5Vc1X/9MO0Oszl6ezeXg==}

  lru-cache@10.4.3:
    resolution: {integrity: sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ==}

  lru-cache@5.1.1:
    resolution: {integrity: sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==}

  lucide-react@0.454.0:
    resolution: {integrity: sha512-hw7zMDwykCLnEzgncEEjHeA6+45aeEzRYuKHuyRSOPkhko+J3ySGjGIzu+mmMfDFG1vazHepMaYFYHbTFAZAAQ==}
    peerDependencies:
      react: ^16.5.1 || ^17.0.0 || ^18.0.0 || ^19.0.0-rc

  lz-string@1.5.0:
    resolution: {integrity: sha512-h5bgJWpxJNswbU7qCrV0tIKQCaS3blPDrqKWx+QxzuzL1zGUzij9XCWLrSLsJPu5t+eWA/ycetzYAO5IOMcWAQ==}
    hasBin: true

  magic-string@0.30.17:
    resolution: {integrity: sha512-sNPKHvyjVf7gyjwS4xGTaW/mCnF8wnjtifKBEhxfZ7E/S8tQ0rssrwGNn6q8JH/ohItJfSQp9mBtQYuTlH5QnA==}

  marked@4.3.0:
    resolution: {integrity: sha512-PRsaiG84bK+AMvxziE/lCFss8juXjNaWzVbN5tXAm4XjeaS9NAHhop+PjQxz2A9h8Q4M/xGmzP8vqNwy6JeK0A==}
    engines: {node: '>= 12'}
    hasBin: true

  math-intrinsics@1.1.0:
    resolution: {integrity: sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==}
    engines: {node: '>= 0.4'}

  merge2@1.4.1:
    resolution: {integrity: sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==}
    engines: {node: '>= 8'}

  micromatch@4.0.8:
    resolution: {integrity: sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==}
    engines: {node: '>=8.6'}

  mime-db@1.52.0:
    resolution: {integrity: sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==}
    engines: {node: '>= 0.6'}

  mime-types@2.1.35:
    resolution: {integrity: sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==}
    engines: {node: '>= 0.6'}

  min-indent@1.0.1:
    resolution: {integrity: sha512-I9jwMn07Sy/IwOj3zVkVik2JTvgpaykDZEigL6Rx6N9LbMywwUSMtxET+7lVoDLLd3O3IXwJwvuuns8UB/HeAg==}
    engines: {node: '>=4'}

  minimatch@3.1.2:
    resolution: {integrity: sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==}

  minimatch@9.0.5:
    resolution: {integrity: sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==}
    engines: {node: '>=16 || 14 >=14.17'}

  minimist@1.2.8:
    resolution: {integrity: sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==}

  minipass@7.1.2:
    resolution: {integrity: sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==}
    engines: {node: '>=16 || 14 >=14.17'}

  mrmime@2.0.1:
    resolution: {integrity: sha512-Y3wQdFg2Va6etvQ5I82yUhGdsKrcYox6p7FfL1LbK2J4V01F9TGlepTIhnK24t7koZibmg82KGglhA1XK5IsLQ==}
    engines: {node: '>=10'}

  ms@2.1.3:
    resolution: {integrity: sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==}

  mz@2.7.0:
    resolution: {integrity: sha512-z81GNO7nnYMEhrGh9LeymoE4+Yr0Wn5McHIZMK5cfQCl+NDX08sCZgUc9/6MHni9IWuFLm1Z3HTCXu2z9fN62Q==}

  nanoid@3.3.11:
    resolution: {integrity: sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==}
    engines: {node: ^10 || ^12 || ^13.7 || ^14 || >=15.0.1}
    hasBin: true

  napi-postinstall@0.3.0:
    resolution: {integrity: sha512-M7NqKyhODKV1gRLdkwE7pDsZP2/SC2a2vHkOYh9MCpKMbWVfyVfUw5MaH83Fv6XMjxr5jryUp3IDDL9rlxsTeA==}
    engines: {node: ^12.20.0 || ^14.18.0 || >=16.0.0}
    hasBin: true

  natural-compare@1.4.0:
    resolution: {integrity: sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==}

  next-themes@0.4.6:
    resolution: {integrity: sha512-pZvgD5L0IEvX5/9GWyHMf3m8BKiVQwsCMHfoFosXtXBMnaS0ZnIJ9ST4b4NqLVKDEm8QBxoNNGNaBv2JNF6XNA==}
    peerDependencies:
      react: ^16.8 || ^17 || ^18 || ^19 || ^19.0.0-rc
      react-dom: ^16.8 || ^17 || ^18 || ^19 || ^19.0.0-rc

  next@15.2.4:
    resolution: {integrity: sha512-VwL+LAaPSxEkd3lU2xWbgEOtrM8oedmyhBqaVNmgKB+GvZlCy9rgaEc+y2on0wv+l0oSFqLtYD6dcC1eAedUaQ==}
    engines: {node: ^18.18.0 || ^19.8.0 || >= 20.0.0}
    hasBin: true
    peerDependencies:
      '@opentelemetry/api': ^1.1.0
      '@playwright/test': ^1.41.2
      babel-plugin-react-compiler: '*'
      react: ^18.2.0 || 19.0.0-rc-de68d2f4-20241204 || ^19.0.0
      react-dom: ^18.2.0 || 19.0.0-rc-de68d2f4-20241204 || ^19.0.0
      sass: ^1.3.0
    peerDependenciesMeta:
      '@opentelemetry/api':
        optional: true
      '@playwright/test':
        optional: true
      babel-plugin-react-compiler:
        optional: true
      sass:
        optional: true

  node-releases@2.0.19:
    resolution: {integrity: sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw==}

  normalize-path@3.0.0:
    resolution: {integrity: sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==}
    engines: {node: '>=0.10.0'}

  normalize-range@0.1.2:
    resolution: {integrity: sha512-bdok/XvKII3nUpklnV6P2hxtMNrCboOjAcyBuQnWEhO665FwrSNRxU+AqpsyvO6LgGYPspN+lu5CLtw4jPRKNA==}
    engines: {node: '>=0.10.0'}

  nwsapi@2.2.20:
    resolution: {integrity: sha512-/ieB+mDe4MrrKMT8z+mQL8klXydZWGR5Dowt4RAGKbJ3kIGEx3X4ljUo+6V73IXtUPWgfOlU5B9MlGxFO5T+cA==}

  object-assign@4.1.1:
    resolution: {integrity: sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==}
    engines: {node: '>=0.10.0'}

  object-hash@3.0.0:
    resolution: {integrity: sha512-RSn9F68PjH9HqtltsSnqYC1XXoWe9Bju5+213R98cNGttag9q9yAOTzdbsqvIa7aNm5WffBZFpWYr2aWrklWAw==}
    engines: {node: '>= 6'}

  object-inspect@1.13.4:
    resolution: {integrity: sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==}
    engines: {node: '>= 0.4'}

  object-keys@1.1.1:
    resolution: {integrity: sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==}
    engines: {node: '>= 0.4'}

  object.assign@4.1.7:
    resolution: {integrity: sha512-nK28WOo+QIjBkDduTINE4JkF/UJJKyf2EJxvJKfblDpyg0Q+pkOHNTL0Qwy6NP6FhE/EnzV73BxxqcJaXY9anw==}
    engines: {node: '>= 0.4'}

  object.entries@1.1.9:
    resolution: {integrity: sha512-8u/hfXFRBD1O0hPUjioLhoWFHRmt6tKA4/vZPyckBr18l1KE9uHrFaFaUi8MDRTpi4uak2goyPTSNJLXX2k2Hw==}
    engines: {node: '>= 0.4'}

  object.fromentries@2.0.8:
    resolution: {integrity: sha512-k6E21FzySsSK5a21KRADBd/NGneRegFO5pLHfdQLpRDETUNJueLXs3WCzyQ3tFRDYgbq3KHGXfTbi2bs8WQ6rQ==}
    engines: {node: '>= 0.4'}

  object.groupby@1.0.3:
    resolution: {integrity: sha512-+Lhy3TQTuzXI5hevh8sBGqbmurHbbIjAi0Z4S63nthVLmLxfbj4T54a4CfZrXIrt9iP4mVAPYMo/v99taj3wjQ==}
    engines: {node: '>= 0.4'}

  object.values@1.2.1:
    resolution: {integrity: sha512-gXah6aZrcUxjWg2zR2MwouP2eHlCBzdV4pygudehaKXSGW4v2AsRQUK+lwwXhii6KFZcunEnmSUoYp5CXibxtA==}
    engines: {node: '>= 0.4'}

  optionator@0.9.4:
    resolution: {integrity: sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==}
    engines: {node: '>= 0.8.0'}

  own-keys@1.0.1:
    resolution: {integrity: sha512-qFOyK5PjiWZd+QQIh+1jhdb9LpxTF0qs7Pm8o5QHYZ0M3vKqSqzsZaEB6oWlxZ+q2sJBMI/Ktgd2N5ZwQoRHfg==}
    engines: {node: '>= 0.4'}

  p-limit@3.1.0:
    resolution: {integrity: sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==}
    engines: {node: '>=10'}

  p-locate@5.0.0:
    resolution: {integrity: sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==}
    engines: {node: '>=10'}

  package-json-from-dist@1.0.1:
    resolution: {integrity: sha512-UEZIS3/by4OC8vL3P2dTXRETpebLI2NiI5vIrjaD/5UtrkFX/tNbwjTSRAGC/+7CAo2pIcBaRgWmcBBHcsaCIw==}

  parent-module@1.0.1:
    resolution: {integrity: sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==}
    engines: {node: '>=6'}

  parse5@7.3.0:
    resolution: {integrity: sha512-IInvU7fabl34qmi9gY8XOVxhYyMyuH2xUNpb2q8/Y+7552KlejkRvqvD19nMoUW/uQGGbqNpA6Tufu5FL5BZgw==}

  path-exists@4.0.0:
    resolution: {integrity: sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==}
    engines: {node: '>=8'}

  path-key@3.1.1:
    resolution: {integrity: sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==}
    engines: {node: '>=8'}

  path-parse@1.0.7:
    resolution: {integrity: sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==}

  path-scurry@1.11.1:
    resolution: {integrity: sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==}
    engines: {node: '>=16 || 14 >=14.18'}

  pathe@2.0.3:
    resolution: {integrity: sha512-WUjGcAqP1gQacoQe+OBJsFA7Ld4DyXuUIjZ5cc75cLHvJ7dtNsTugphxIADwspS+AraAUePCKrSVtPLFj/F88w==}

  pathval@2.0.1:
    resolution: {integrity: sha512-//nshmD55c46FuFw26xV/xFAaB5HF9Xdap7HJBBnrKdAd6/GxDBaNA1870O79+9ueg61cZLSVc+OaFlfmObYVQ==}
    engines: {node: '>= 14.16'}

  picocolors@1.1.1:
    resolution: {integrity: sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==}

  picomatch@2.3.1:
    resolution: {integrity: sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==}
    engines: {node: '>=8.6'}

  picomatch@4.0.2:
    resolution: {integrity: sha512-M7BAV6Rlcy5u+m6oPhAPFgJTzAioX/6B0DxyvDlo9l8+T3nLKbrczg2WLUyzd45L8RqfUMyGPzekbMvX2Ldkwg==}
    engines: {node: '>=12'}

  pify@2.3.0:
    resolution: {integrity: sha512-udgsAY+fTnvv7kI7aaxbqwWNb0AHiB0qBO89PZKPkoTmGOgdbrHDKD+0B2X4uTfJ/FT1R09r9gTsjUjNJotuog==}
    engines: {node: '>=0.10.0'}

  pirates@4.0.7:
    resolution: {integrity: sha512-TfySrs/5nm8fQJDcBDuUng3VOUKsd7S+zqvbOTiGXHfxX4wK31ard+hoNuvkicM/2YFzlpDgABOevKSsB4G/FA==}
    engines: {node: '>= 6'}

  playwright-core@1.53.2:
    resolution: {integrity: sha512-ox/OytMy+2w1jcYEYlOo1Hhp8hZkLCximMTUTMBXjGUA1KoFfiSZ+DU+3a739jsPY0yoKH2TFy9S2fsJas8yAw==}
    engines: {node: '>=18'}
    hasBin: true

  playwright@1.53.2:
    resolution: {integrity: sha512-6K/qQxVFuVQhRQhFsVZ9fGeatxirtrpPgxzBYWyZLEXJzqYwuL4fuNmfOfD5et1tJE4GScKyPNeLhZeRwuTU3A==}
    engines: {node: '>=18'}
    hasBin: true

  possible-typed-array-names@1.1.0:
    resolution: {integrity: sha512-/+5VFTchJDoVj3bhoqi6UeymcD00DAwb1nJwamzPvHEszJ4FpF6SNNbUbOS8yI56qHzdV8eK0qEfOSiodkTdxg==}
    engines: {node: '>= 0.4'}

  postcss-import@15.1.0:
    resolution: {integrity: sha512-hpr+J05B2FVYUAXHeK1YyI267J/dDDhMU6B6civm8hSY1jYJnBXxzKDKDswzJmtLHryrjhnDjqqp/49t8FALew==}
    engines: {node: '>=14.0.0'}
    peerDependencies:
      postcss: ^8.0.0

  postcss-js@4.0.1:
    resolution: {integrity: sha512-dDLF8pEO191hJMtlHFPRa8xsizHaM82MLfNkUHdUtVEV3tgTp5oj+8qbEqYM57SLfc74KSbw//4SeJma2LRVIw==}
    engines: {node: ^12 || ^14 || >= 16}
    peerDependencies:
      postcss: ^8.4.21

  postcss-load-config@4.0.2:
    resolution: {integrity: sha512-bSVhyJGL00wMVoPUzAVAnbEoWyqRxkjv64tUl427SKnPrENtq6hJwUojroMz2VB+Q1edmi4IfrAPpami5VVgMQ==}
    engines: {node: '>= 14'}
    peerDependencies:
      postcss: '>=8.0.9'
      ts-node: '>=9.0.0'
    peerDependenciesMeta:
      postcss:
        optional: true
      ts-node:
        optional: true

  postcss-nested@6.2.0:
    resolution: {integrity: sha512-HQbt28KulC5AJzG+cZtj9kvKB93CFCdLvog1WFLf1D+xmMvPGlBstkpTEZfK5+AN9hfJocyBFCNiqyS48bpgzQ==}
    engines: {node: '>=12.0'}
    peerDependencies:
      postcss: ^8.2.14

  postcss-selector-parser@6.1.2:
    resolution: {integrity: sha512-Q8qQfPiZ+THO/3ZrOrO0cJJKfpYCagtMUkXbnEfmgUjwXg6z/WBeOyS9APBBPCTSiDV+s4SwQGu8yFsiMRIudg==}
    engines: {node: '>=4'}

  postcss-value-parser@4.2.0:
    resolution: {integrity: sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ==}

  postcss@8.4.31:
    resolution: {integrity: sha512-PS08Iboia9mts/2ygV3eLpY5ghnUcfLV/EXTOW1E2qYxJKGGBUtNjN76FYHnMs36RmARn41bC0AZmn+rR0OVpQ==}
    engines: {node: ^10 || ^12 || >=14}

  postcss@8.5.6:
    resolution: {integrity: sha512-3Ybi1tAuwAP9s0r1UQ2J4n5Y0G05bJkpUIO0/bI9MhwmD70S5aTWbXGBwxHrelT+XM1k6dM0pk+SwNkpTRN7Pg==}
    engines: {node: ^10 || ^12 || >=14}

  prelude-ls@1.2.1:
    resolution: {integrity: sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==}
    engines: {node: '>= 0.8.0'}

  pretty-format@27.5.1:
    resolution: {integrity: sha512-Qb1gy5OrP5+zDf2Bvnzdl3jsTf1qXVMazbvCoKhtKqVs4/YK4ozX4gKQJJVyNe+cajNPn0KoC0MC3FUmaHWEmQ==}
    engines: {node: ^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0}

  prop-types@15.8.1:
    resolution: {integrity: sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==}

  proxy-from-env@1.1.0:
    resolution: {integrity: sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==}

  punycode@2.3.1:
    resolution: {integrity: sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==}
    engines: {node: '>=6'}

  queue-microtask@1.2.3:
    resolution: {integrity: sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==}

  react-day-picker@8.10.1:
    resolution: {integrity: sha512-TMx7fNbhLk15eqcMt+7Z7S2KF7mfTId/XJDjKE8f+IUcFn0l08/kI4FiYTL/0yuOLmEcbR4Fwe3GJf/NiiMnPA==}
    peerDependencies:
      date-fns: ^2.28.0 || ^3.0.0
      react: ^16.8.0 || ^17.0.0 || ^18.0.0

  react-dom@19.1.0:
    resolution: {integrity: sha512-Xs1hdnE+DyKgeHJeJznQmYMIBG3TKIHJJT95Q58nHLSrElKlGQqDTR2HQ9fx5CN/Gk6Vh/kupBTDLU11/nDk/g==}
    peerDependencies:
      react: ^19.1.0

  react-hook-form@7.59.0:
    resolution: {integrity: sha512-kmkek2/8grqarTJExFNjy+RXDIP8yM+QTl3QL6m6Q8b2bih4ltmiXxH7T9n+yXNK477xPh5yZT/6vD8sYGzJTA==}
    engines: {node: '>=18.0.0'}
    peerDependencies:
      react: ^16.8.0 || ^17 || ^18 || ^19

  react-is@16.13.1:
    resolution: {integrity: sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==}

  react-is@17.0.2:
    resolution: {integrity: sha512-w2GsyukL62IJnlaff/nRegPQR94C/XXamvMWmSHRJ4y7Ts/4ocGRmTHvOs8PSE6pB3dWOrD/nueuU5sduBsQ4w==}

  react-is@18.3.1:
    resolution: {integrity: sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==}

  react-refresh@0.17.0:
    resolution: {integrity: sha512-z6F7K9bV85EfseRCp2bzrpyQ0Gkw1uLoCel9XBVWPg/TjRj94SkJzUTGfOa4bs7iJvBWtQG0Wq7wnI0syw3EBQ==}
    engines: {node: '>=0.10.0'}

  react-remove-scroll-bar@2.3.8:
    resolution: {integrity: sha512-9r+yi9+mgU33AKcj6IbT9oRCO78WriSj6t/cF8DWBZJ9aOGPOTEDvdUDz1FwKim7QXWwmHqtdHnRJfhAxEG46Q==}
    engines: {node: '>=10'}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true

  react-remove-scroll@2.7.1:
    resolution: {integrity: sha512-HpMh8+oahmIdOuS5aFKKY6Pyog+FNaZV/XyJOq7b4YFwsFHe5yYfdbIalI4k3vU2nSDql7YskmUseHsRrJqIPA==}
    engines: {node: '>=10'}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  react-resizable-panels@2.1.9:
    resolution: {integrity: sha512-z77+X08YDIrgAes4jl8xhnUu1LNIRp4+E7cv4xHmLOxxUPO/ML7PSrE813b90vj7xvQ1lcf7g2uA9GeMZonjhQ==}
    peerDependencies:
      react: ^16.14.0 || ^17.0.0 || ^18.0.0 || ^19.0.0 || ^19.0.0-rc
      react-dom: ^16.14.0 || ^17.0.0 || ^18.0.0 || ^19.0.0 || ^19.0.0-rc

  react-simplemde-editor@5.2.0:
    resolution: {integrity: sha512-GkTg1MlQHVK2Rks++7sjuQr/GVS/xm6y+HchZ4GPBWrhcgLieh4CjK04GTKbsfYorSRYKa0n37rtNSJmOzEDkQ==}
    peerDependencies:
      easymde: '>= 2.0.0 < 3.0.0'
      react: '>=16.8.2'
      react-dom: '>=16.8.2'

  react-smooth@4.0.4:
    resolution: {integrity: sha512-gnGKTpYwqL0Iii09gHobNolvX4Kiq4PKx6eWBCYYix+8cdw+cGo3do906l1NBPKkSWx1DghC1dlWG9L2uGd61Q==}
    peerDependencies:
      react: ^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0
      react-dom: ^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0

  react-style-singleton@2.2.3:
    resolution: {integrity: sha512-b6jSvxvVnyptAiLjbkWLE/lOnR4lfTtDAl+eUC7RZy+QQWc6wRzIV2CE6xBuMmDxc2qIihtDCZD5NPOFl7fRBQ==}
    engines: {node: '>=10'}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  react-transition-group@4.4.5:
    resolution: {integrity: sha512-pZcd1MCJoiKiBR2NRxeCRg13uCXbydPnmB4EOeRrY7480qNWO8IIgQG6zlDkm6uRMsURXPuKq0GWtiM59a5Q6g==}
    peerDependencies:
      react: '>=16.6.0'
      react-dom: '>=16.6.0'

  react@19.1.0:
    resolution: {integrity: sha512-FS+XFBNvn3GTAWq26joslQgWNoFu08F4kl0J4CgdNKADkdSGXQyTCnKteIAJy96Br6YbpEU1LSzV5dYtjMkMDg==}
    engines: {node: '>=0.10.0'}

  read-cache@1.0.0:
    resolution: {integrity: sha512-Owdv/Ft7IjOgm/i0xvNDZ1LrRANRfew4b2prF3OWMQLxLfu3bS8FVhCsrSCMK4lR56Y9ya+AThoTpDCTxCmpRA==}

  readdirp@3.6.0:
    resolution: {integrity: sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==}
    engines: {node: '>=8.10.0'}

  recharts-scale@0.4.5:
    resolution: {integrity: sha512-kivNFO+0OcUNu7jQquLXAxz1FIwZj8nrj+YkOKc5694NbjCvcT6aSZiIzNzd2Kul4o4rTto8QVR9lMNtxD4G1w==}

  recharts@2.15.0:
    resolution: {integrity: sha512-cIvMxDfpAmqAmVgc4yb7pgm/O1tmmkl/CjrvXuW+62/+7jj/iF9Ykm+hb/UJt42TREHMyd3gb+pkgoa2MxgDIw==}
    engines: {node: '>=14'}
    peerDependencies:
      react: ^16.0.0 || ^17.0.0 || ^18.0.0 || ^19.0.0
      react-dom: ^16.0.0 || ^17.0.0 || ^18.0.0 || ^19.0.0

  redent@3.0.0:
    resolution: {integrity: sha512-6tDA8g98We0zd0GvVeMT9arEOnTw9qM03L9cJXaCjrip1OO764RDBLBfrB4cwzNGDj5OA5ioymC9GkizgWJDUg==}
    engines: {node: '>=8'}

  reflect.getprototypeof@1.0.10:
    resolution: {integrity: sha512-00o4I+DVrefhv+nX0ulyi3biSHCPDe+yLv5o/p6d/UVlirijB8E16FtfwSAi4g3tcqrQ4lRAqQSoFEZJehYEcw==}
    engines: {node: '>= 0.4'}

  regexp.prototype.flags@1.5.4:
    resolution: {integrity: sha512-dYqgNSZbDwkaJ2ceRd9ojCGjBq+mOm9LmtXnAnEGyHhN/5R7iDW2TRw3h+o/jCFxus3P2LfWIIiwowAjANm7IA==}
    engines: {node: '>= 0.4'}

  resolve-from@4.0.0:
    resolution: {integrity: sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==}
    engines: {node: '>=4'}

  resolve-pkg-maps@1.0.0:
    resolution: {integrity: sha512-seS2Tj26TBVOC2NIc2rOe2y2ZO7efxITtLZcGSOnHHNOQ7CkiUBfw0Iw2ck6xkIhPwLhKNLS8BO+hEpngQlqzw==}

  resolve@1.22.10:
    resolution: {integrity: sha512-NPRy+/ncIMeDlTAsuqwKIiferiawhefFJtkNSW0qZJEqMEb+qBt/77B/jGeeek+F0uOeN05CDa6HXbbIgtVX4w==}
    engines: {node: '>= 0.4'}
    hasBin: true

  resolve@2.0.0-next.5:
    resolution: {integrity: sha512-U7WjGVG9sH8tvjW5SmGbQuui75FiyjAX72HX15DwBBwF9dNiQZRQAg9nnPhYy+TUnE0+VcrttuvNI8oSxZcocA==}
    hasBin: true

  reusify@1.1.0:
    resolution: {integrity: sha512-g6QUff04oZpHs0eG5p83rFLhHeV00ug/Yf9nZM6fLeUrPguBTkTQOdpAWWspMh55TZfVQDPaN3NQJfbVRAxdIw==}
    engines: {iojs: '>=1.0.0', node: '>=0.10.0'}

  rollup@4.44.1:
    resolution: {integrity: sha512-x8H8aPvD+xbl0Do8oez5f5o8eMS3trfCghc4HhLAnCkj7Vl0d1JWGs0UF/D886zLW2rOj2QymV/JcSSsw+XDNg==}
    engines: {node: '>=18.0.0', npm: '>=8.0.0'}
    hasBin: true

  rrweb-cssom@0.8.0:
    resolution: {integrity: sha512-guoltQEx+9aMf2gDZ0s62EcV8lsXR+0w8915TC3ITdn2YueuNjdAYh/levpU9nFaoChh9RUS5ZdQMrKfVEN9tw==}

  run-parallel@1.2.0:
    resolution: {integrity: sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==}

  safe-array-concat@1.1.3:
    resolution: {integrity: sha512-AURm5f0jYEOydBj7VQlVvDrjeFgthDdEF5H1dP+6mNpoXOMo1quQqJ4wvJDyRZ9+pO3kGWoOdmV08cSv2aJV6Q==}
    engines: {node: '>=0.4'}

  safe-push-apply@1.0.0:
    resolution: {integrity: sha512-iKE9w/Z7xCzUMIZqdBsp6pEQvwuEebH4vdpjcDWnyzaI6yl6O9FHvVpmGelvEHNsoY6wGblkxR6Zty/h00WiSA==}
    engines: {node: '>= 0.4'}

  safe-regex-test@1.1.0:
    resolution: {integrity: sha512-x/+Cz4YrimQxQccJf5mKEbIa1NzeCRNI5Ecl/ekmlYaampdNLPalVyIcCZNNH3MvmqBugV5TMYZXv0ljslUlaw==}
    engines: {node: '>= 0.4'}

  safer-buffer@2.1.2:
    resolution: {integrity: sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==}

  saxes@6.0.0:
    resolution: {integrity: sha512-xAg7SOnEhrm5zI3puOOKyy1OMcMlIJZYNJY7xLBwSze0UjhPLnWfj2GF2EpT0jmzaJKIWKHLsaSSajf35bcYnA==}
    engines: {node: '>=v12.22.7'}

  scheduler@0.26.0:
    resolution: {integrity: sha512-NlHwttCI/l5gCPR3D1nNXtWABUmBwvZpEQiD4IXSbIDq8BzLIK/7Ir5gTFSGZDUu37K5cMNp0hFtzO38sC7gWA==}

  semver@6.3.1:
    resolution: {integrity: sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==}
    hasBin: true

  semver@7.7.2:
    resolution: {integrity: sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==}
    engines: {node: '>=10'}
    hasBin: true

  set-function-length@1.2.2:
    resolution: {integrity: sha512-pgRc4hJ4/sNjWCSS9AmnS40x3bNMDTknHgL5UaMBTMyJnU90EgWh1Rz+MC9eFu4BuN/UwZjKQuY/1v3rM7HMfg==}
    engines: {node: '>= 0.4'}

  set-function-name@2.0.2:
    resolution: {integrity: sha512-7PGFlmtwsEADb0WYyvCMa1t+yke6daIG4Wirafur5kcf+MhUnPms1UeR0CKQdTZD81yESwMHbtn+TR+dMviakQ==}
    engines: {node: '>= 0.4'}

  set-proto@1.0.0:
    resolution: {integrity: sha512-RJRdvCo6IAnPdsvP/7m6bsQqNnn1FCBX5ZNtFL98MmFF/4xAIJTIg1YbHW5DC2W5SKZanrC6i4HsJqlajw/dZw==}
    engines: {node: '>= 0.4'}

  sharp@0.33.5:
    resolution: {integrity: sha512-haPVm1EkS9pgvHrQ/F3Xy+hgcuMV0Wm9vfIBSiwZ05k+xgb0PkBQpGsAA/oWdDobNaZTH5ppvHtzCFbnSEwHVw==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}

  shebang-command@2.0.0:
    resolution: {integrity: sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==}
    engines: {node: '>=8'}

  shebang-regex@3.0.0:
    resolution: {integrity: sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==}
    engines: {node: '>=8'}

  side-channel-list@1.0.0:
    resolution: {integrity: sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==}
    engines: {node: '>= 0.4'}

  side-channel-map@1.0.1:
    resolution: {integrity: sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==}
    engines: {node: '>= 0.4'}

  side-channel-weakmap@1.0.2:
    resolution: {integrity: sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==}
    engines: {node: '>= 0.4'}

  side-channel@1.1.0:
    resolution: {integrity: sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==}
    engines: {node: '>= 0.4'}

  siginfo@2.0.0:
    resolution: {integrity: sha512-ybx0WO1/8bSBLEWXZvEd7gMW3Sn3JFlW3TvX1nREbDLRNQNaeNN8WK0meBwPdAaOI7TtRRRJn/Es1zhrrCHu7g==}

  signal-exit@4.1.0:
    resolution: {integrity: sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==}
    engines: {node: '>=14'}

  simple-swizzle@0.2.2:
    resolution: {integrity: sha512-JA//kQgZtbuY83m+xT+tXJkmJncGMTFT+C+g2h2R9uxkYIrE2yy9sgmcLhCnw57/WSD+Eh3J97FPEDFnbXnDUg==}

  sirv@3.0.1:
    resolution: {integrity: sha512-FoqMu0NCGBLCcAkS1qA+XJIQTR6/JHfQXl+uGteNCQ76T91DMUjPa9xfmeqMY3z80nLSg9yQmNjK0Px6RWsH/A==}
    engines: {node: '>=18'}

  sonner@1.7.4:
    resolution: {integrity: sha512-DIS8z4PfJRbIyfVFDVnK9rO3eYDtse4Omcm6bt0oEr5/jtLgysmjuBl1frJ9E/EQZrFmKx2A8m/s5s9CRXIzhw==}
    peerDependencies:
      react: ^18.0.0 || ^19.0.0 || ^19.0.0-rc
      react-dom: ^18.0.0 || ^19.0.0 || ^19.0.0-rc

  source-map-js@1.2.1:
    resolution: {integrity: sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==}
    engines: {node: '>=0.10.0'}

  stable-hash@0.0.5:
    resolution: {integrity: sha512-+L3ccpzibovGXFK+Ap/f8LOS0ahMrHTf3xu7mMLSpEGU0EO9ucaysSylKo9eRDFNhWve/y275iPmIZ4z39a9iA==}

  stackback@0.0.2:
    resolution: {integrity: sha512-1XMJE5fQo1jGH6Y/7ebnwPOBEkIEnT4QF32d5R1+VXdXveM0IBMJt8zfaxX1P3QhVwrYe+576+jkANtSS2mBbw==}

  std-env@3.9.0:
    resolution: {integrity: sha512-UGvjygr6F6tpH7o2qyqR6QYpwraIjKSdtzyBdyytFOHmPZY917kwdwLG0RbOjWOnKmnm3PeHjaoLLMie7kPLQw==}

  stop-iteration-iterator@1.1.0:
    resolution: {integrity: sha512-eLoXW/DHyl62zxY4SCaIgnRhuMr6ri4juEYARS8E6sCEqzKpOiE521Ucofdx+KnDZl5xmvGYaaKCk5FEOxJCoQ==}
    engines: {node: '>= 0.4'}

  streamsearch@1.1.0:
    resolution: {integrity: sha512-Mcc5wHehp9aXz1ax6bZUyY5afg9u2rv5cqQI3mRrYkGC8rW2hM02jWuwjtL++LS5qinSyhj2QfLyNsuc+VsExg==}
    engines: {node: '>=10.0.0'}

  string-width@4.2.3:
    resolution: {integrity: sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==}
    engines: {node: '>=8'}

  string-width@5.1.2:
    resolution: {integrity: sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==}
    engines: {node: '>=12'}

  string.prototype.includes@2.0.1:
    resolution: {integrity: sha512-o7+c9bW6zpAdJHTtujeePODAhkuicdAryFsfVKwA+wGw89wJ4GTY484WTucM9hLtDEOpOvI+aHnzqnC5lHp4Rg==}
    engines: {node: '>= 0.4'}

  string.prototype.matchall@4.0.12:
    resolution: {integrity: sha512-6CC9uyBL+/48dYizRf7H7VAYCMCNTBeM78x/VTUe9bFEaxBepPJDa1Ow99LqI/1yF7kuy7Q3cQsYMrcjGUcskA==}
    engines: {node: '>= 0.4'}

  string.prototype.repeat@1.0.0:
    resolution: {integrity: sha512-0u/TldDbKD8bFCQ/4f5+mNRrXwZ8hg2w7ZR8wa16e8z9XpePWl3eGEcUD0OXpEH/VJH/2G3gjUtR3ZOiBe2S/w==}

  string.prototype.trim@1.2.10:
    resolution: {integrity: sha512-Rs66F0P/1kedk5lyYyH9uBzuiI/kNRmwJAR9quK6VOtIpZ2G+hMZd+HQbbv25MgCA6gEffoMZYxlTod4WcdrKA==}
    engines: {node: '>= 0.4'}

  string.prototype.trimend@1.0.9:
    resolution: {integrity: sha512-G7Ok5C6E/j4SGfyLCloXTrngQIQU3PWtXGst3yM7Bea9FRURf1S42ZHlZZtsNque2FN2PoUhfZXYLNWwEr4dLQ==}
    engines: {node: '>= 0.4'}

  string.prototype.trimstart@1.0.8:
    resolution: {integrity: sha512-UXSH262CSZY1tfu3G3Secr6uGLCFVPMhIqHjlgCUtCCcgihYc/xKs9djMTMUOb2j1mVSeU8EU6NWc/iQKU6Gfg==}
    engines: {node: '>= 0.4'}

  strip-ansi@6.0.1:
    resolution: {integrity: sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==}
    engines: {node: '>=8'}

  strip-ansi@7.1.0:
    resolution: {integrity: sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==}
    engines: {node: '>=12'}

  strip-bom@3.0.0:
    resolution: {integrity: sha512-vavAMRXOgBVNF6nyEEmL3DBK19iRpDcoIwW+swQ+CbGiu7lju6t+JklA1MHweoWtadgt4ISVUsXLyDq34ddcwA==}
    engines: {node: '>=4'}

  strip-indent@3.0.0:
    resolution: {integrity: sha512-laJTa3Jb+VQpaC6DseHhF7dXVqHTfJPCRDaEbid/drOhgitgYku/letMUqOXFoWV0zIIUbjpdH2t+tYj4bQMRQ==}
    engines: {node: '>=8'}

  strip-json-comments@3.1.1:
    resolution: {integrity: sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==}
    engines: {node: '>=8'}

  strip-literal@3.0.0:
    resolution: {integrity: sha512-TcccoMhJOM3OebGhSBEmp3UZ2SfDMZUEBdRA/9ynfLi8yYajyWX3JiXArcJt4Umh4vISpspkQIY8ZZoCqjbviA==}

  styled-jsx@5.1.6:
    resolution: {integrity: sha512-qSVyDTeMotdvQYoHWLNGwRFJHC+i+ZvdBRYosOFgC+Wg1vx4frN2/RG/NA7SYqqvKNLf39P2LSRA2pu6n0XYZA==}
    engines: {node: '>= 12.0.0'}
    peerDependencies:
      '@babel/core': '*'
      babel-plugin-macros: '*'
      react: '>= 16.8.0 || 17.x.x || ^18.0.0-0 || ^19.0.0-0'
    peerDependenciesMeta:
      '@babel/core':
        optional: true
      babel-plugin-macros:
        optional: true

  sucrase@3.35.0:
    resolution: {integrity: sha512-8EbVDiu9iN/nESwxeSxDKe0dunta1GOlHufmSSXxMD2z2/tMZpDMpvXQGsc+ajGo8y2uYUmixaSRUc/QPoQ0GA==}
    engines: {node: '>=16 || 14 >=14.17'}
    hasBin: true

  supports-color@7.2.0:
    resolution: {integrity: sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==}
    engines: {node: '>=8'}

  supports-preserve-symlinks-flag@1.0.0:
    resolution: {integrity: sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==}
    engines: {node: '>= 0.4'}

  symbol-tree@3.2.4:
    resolution: {integrity: sha512-9QNk5KwDF+Bvz+PyObkmSYjI5ksVUYtjW7AU22r2NKcfLJcXp96hkDWU3+XndOsUb+AQ9QhfzfCT2O+CNWT5Tw==}

  tailwind-merge@2.6.0:
    resolution: {integrity: sha512-P+Vu1qXfzediirmHOC3xKGAYeZtPcV9g76X+xg2FD4tYgR71ewMA35Y3sCz3zhiN/dwefRpJX0yBcgwi1fXNQA==}

  tailwindcss-animate@1.0.7:
    resolution: {integrity: sha512-bl6mpH3T7I3UFxuvDEXLxy/VuFxBk5bbzplh7tXI68mwMokNYd1t9qPBHlnyTwfa4JGC4zP516I1hYYtQ/vspA==}
    peerDependencies:
      tailwindcss: '>=3.0.0 || insiders'

  tailwindcss@3.4.17:
    resolution: {integrity: sha512-w33E2aCvSDP0tW9RZuNXadXlkHXqFzSkQew/aIa2i/Sj8fThxwovwlXHSPXTbAHwEIhBFXAedUhP2tueAKP8Og==}
    engines: {node: '>=14.0.0'}
    hasBin: true

  thenify-all@1.6.0:
    resolution: {integrity: sha512-RNxQH/qI8/t3thXJDwcstUO4zeqo64+Uy/+sNVRBx4Xn2OX+OZ9oP+iJnNFqplFra2ZUVeKCSa2oVWi3T4uVmA==}
    engines: {node: '>=0.8'}

  thenify@3.3.1:
    resolution: {integrity: sha512-RVZSIV5IG10Hk3enotrhvz0T9em6cyHBLkH/YAZuKqd8hRkKhSfCGIcP2KUY0EPxndzANBmNllzWPwak+bheSw==}

  tiny-invariant@1.3.3:
    resolution: {integrity: sha512-+FbBPE1o9QAYvviau/qC5SE3caw21q3xkvWKBtja5vgqOWIHHJ3ioaq1VPfn/Szqctz2bU/oYeKd9/z5BL+PVg==}

  tinybench@2.9.0:
    resolution: {integrity: sha512-0+DUvqWMValLmha6lr4kD8iAMK1HzV0/aKnCtWb9v9641TnP/MFb7Pc2bxoxQjTXAErryXVgUOfv2YqNllqGeg==}

  tinyexec@0.3.2:
    resolution: {integrity: sha512-KQQR9yN7R5+OSwaK0XQoj22pwHoTlgYqmUscPYoknOoWCWfj/5/ABTMRi69FrKU5ffPVh5QcFikpWJI/P1ocHA==}

  tinyglobby@0.2.14:
    resolution: {integrity: sha512-tX5e7OM1HnYr2+a2C/4V0htOcSQcoSTH9KgJnVvNm5zm/cyEWKJ7j7YutsH9CxMdtOkkLFy2AHrMci9IM8IPZQ==}
    engines: {node: '>=12.0.0'}

  tinypool@1.1.1:
    resolution: {integrity: sha512-Zba82s87IFq9A9XmjiX5uZA/ARWDrB03OHlq+Vw1fSdt0I+4/Kutwy8BP4Y/y/aORMo61FQ0vIb5j44vSo5Pkg==}
    engines: {node: ^18.0.0 || >=20.0.0}

  tinyrainbow@2.0.0:
    resolution: {integrity: sha512-op4nsTR47R6p0vMUUoYl/a+ljLFVtlfaXkLQmqfLR1qHma1h/ysYk4hEXZ880bf2CYgTskvTa/e196Vd5dDQXw==}
    engines: {node: '>=14.0.0'}

  tinyspy@4.0.3:
    resolution: {integrity: sha512-t2T/WLB2WRgZ9EpE4jgPJ9w+i66UZfDc8wHh0xrwiRNN+UwH98GIJkTeZqX9rg0i0ptwzqW+uYeIF0T4F8LR7A==}
    engines: {node: '>=14.0.0'}

  tldts-core@6.1.86:
    resolution: {integrity: sha512-Je6p7pkk+KMzMv2XXKmAE3McmolOQFdxkKw0R8EYNr7sELW46JqnNeTX8ybPiQgvg1ymCoF8LXs5fzFaZvJPTA==}

  tldts@6.1.86:
    resolution: {integrity: sha512-WMi/OQ2axVTf/ykqCQgXiIct+mSQDFdH2fkwhPwgEwvJ1kSzZRiinb0zF2Xb8u4+OqPChmyI6MEu4EezNJz+FQ==}
    hasBin: true

  to-regex-range@5.0.1:
    resolution: {integrity: sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==}
    engines: {node: '>=8.0'}

  totalist@3.0.1:
    resolution: {integrity: sha512-sf4i37nQ2LBx4m3wB74y+ubopq6W/dIzXg0FDGjsYnZHVa1Da8FH853wlL2gtUhg+xJXjfk3kUZS3BRoQeoQBQ==}
    engines: {node: '>=6'}

  tough-cookie@5.1.2:
    resolution: {integrity: sha512-FVDYdxtnj0G6Qm/DhNPSb8Ju59ULcup3tuJxkFb5K8Bv2pUXILbf0xZWU8PX8Ov19OXljbUyveOFwRMwkXzO+A==}
    engines: {node: '>=16'}

  tr46@5.1.1:
    resolution: {integrity: sha512-hdF5ZgjTqgAntKkklYw0R03MG2x/bSzTtkxmIRw/sTNV8YXsCJ1tfLAX23lhxhHJlEf3CRCOCGGWw3vI3GaSPw==}
    engines: {node: '>=18'}

  ts-api-utils@2.1.0:
    resolution: {integrity: sha512-CUgTZL1irw8u29bzrOD/nH85jqyc74D6SshFgujOIA7osm2Rz7dYH77agkx7H4FBNxDq7Cjf+IjaX/8zwFW+ZQ==}
    engines: {node: '>=18.12'}
    peerDependencies:
      typescript: '>=4.8.4'

  ts-interface-checker@0.1.13:
    resolution: {integrity: sha512-Y/arvbn+rrz3JCKl9C4kVNfTfSm2/mEp5FSz5EsZSANGPSlQrpRI5M4PKF+mJnE52jOO90PnPSc3Ur3bTQw0gA==}

  tsconfig-paths@3.15.0:
    resolution: {integrity: sha512-2Ac2RgzDe/cn48GvOe3M+o82pEFewD3UPbyoUHHdKasHwJKjds4fLXWf/Ux5kATBKN20oaFGu+jbElp1pos0mg==}

  tslib@2.8.1:
    resolution: {integrity: sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==}

  type-check@0.4.0:
    resolution: {integrity: sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==}
    engines: {node: '>= 0.8.0'}

  typed-array-buffer@1.0.3:
    resolution: {integrity: sha512-nAYYwfY3qnzX30IkA6AQZjVbtK6duGontcQm1WSG1MD94YLqK0515GNApXkoxKOWMusVssAHWLh9SeaoefYFGw==}
    engines: {node: '>= 0.4'}

  typed-array-byte-length@1.0.3:
    resolution: {integrity: sha512-BaXgOuIxz8n8pIq3e7Atg/7s+DpiYrxn4vdot3w9KbnBhcRQq6o3xemQdIfynqSeXeDrF32x+WvfzmOjPiY9lg==}
    engines: {node: '>= 0.4'}

  typed-array-byte-offset@1.0.4:
    resolution: {integrity: sha512-bTlAFB/FBYMcuX81gbL4OcpH5PmlFHqlCCpAl8AlEzMz5k53oNDvN8p1PNOWLEmI2x4orp3raOFB51tv9X+MFQ==}
    engines: {node: '>= 0.4'}

  typed-array-length@1.0.7:
    resolution: {integrity: sha512-3KS2b+kL7fsuk/eJZ7EQdnEmQoaho/r6KUef7hxvltNA5DR8NAUM+8wJMbJyZ4G9/7i3v5zPBIMN5aybAh2/Jg==}
    engines: {node: '>= 0.4'}

  typescript@5.8.3:
    resolution: {integrity: sha512-p1diW6TqL9L07nNxvRMM7hMMw4c5XOo/1ibL4aAIGmSAt9slTE1Xgw5KWuof2uTOvCg9BY7ZRi+GaF+7sfgPeQ==}
    engines: {node: '>=14.17'}
    hasBin: true

  typo-js@1.2.5:
    resolution: {integrity: sha512-F45vFWdGX8xahIk/sOp79z2NJs8ETMYsmMChm9D5Hlx3+9j7VnCyQyvij5MOCrNY3NNe8noSyokRjQRfq+Bc7A==}

  unbox-primitive@1.1.0:
    resolution: {integrity: sha512-nWJ91DjeOkej/TA8pXQ3myruKpKEYgqvpw9lz4OPHj/NWFNluYrjbz9j01CJ8yKQd2g4jFoOkINCTW2I5LEEyw==}
    engines: {node: '>= 0.4'}

  undici-types@6.21.0:
    resolution: {integrity: sha512-iwDZqg0QAGrg9Rav5H4n0M64c3mkR59cJ6wQp+7C4nI0gsmExaedaYLNO44eT4AtBBwjbTiGPMlt2Md0T9H9JQ==}

  unrs-resolver@1.10.1:
    resolution: {integrity: sha512-EFrL7Hw4kmhZdwWO3dwwFJo6hO3FXuQ6Bg8BK/faHZ9m1YxqBS31BNSTxklIQkxK/4LlV8zTYnPsIRLBzTzjCA==}

  update-browserslist-db@1.1.3:
    resolution: {integrity: sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==}
    hasBin: true
    peerDependencies:
      browserslist: '>= 4.21.0'

  uri-js@4.4.1:
    resolution: {integrity: sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==}

  use-callback-ref@1.3.3:
    resolution: {integrity: sha512-jQL3lRnocaFtu3V00JToYz/4QkNWswxijDaCVNZRiRTO3HQDLsdu1ZtmIUvV4yPp+rvWm5j0y0TG/S61cuijTg==}
    engines: {node: '>=10'}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  use-sidecar@1.1.3:
    resolution: {integrity: sha512-Fedw0aZvkhynoPYlA5WXrMCAMm+nSWdZt6lzJQ7Ok8S6Q+VsHmHpRWndVRJ8Be0ZbkfPc5LRYH+5XrzXcEeLRQ==}
    engines: {node: '>=10'}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  use-sync-external-store@1.5.0:
    resolution: {integrity: sha512-Rb46I4cGGVBmjamjphe8L/UnvJD+uPPtTkNvX5mZgqdbavhI4EbgIWJiIHXJ8bc/i9EQGPRh4DwEURJ552Do0A==}
    peerDependencies:
      react: ^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0

  util-deprecate@1.0.2:
    resolution: {integrity: sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==}

  vaul@0.9.9:
    resolution: {integrity: sha512-7afKg48srluhZwIkaU+lgGtFCUsYBSGOl8vcc8N/M3YQlZFlynHD15AE+pwrYdc826o7nrIND4lL9Y6b9WWZZQ==}
    peerDependencies:
      react: ^16.8 || ^17.0 || ^18.0
      react-dom: ^16.8 || ^17.0 || ^18.0

  victory-vendor@36.9.2:
    resolution: {integrity: sha512-PnpQQMuxlwYdocC8fIJqVXvkeViHYzotI+NJrCuav0ZYFoq912ZHBk3mCeuj+5/VpodOjPe1z0Fk2ihgzlXqjQ==}

  vite-node@3.2.4:
    resolution: {integrity: sha512-EbKSKh+bh1E1IFxeO0pg1n4dvoOTt0UDiXMd/qn++r98+jPO1xtJilvXldeuQ8giIB5IkpjCgMleHMNEsGH6pg==}
    engines: {node: ^18.0.0 || ^20.0.0 || >=22.0.0}
    hasBin: true

  vite@7.0.0:
    resolution: {integrity: sha512-ixXJB1YRgDIw2OszKQS9WxGHKwLdCsbQNkpJN171udl6szi/rIySHL6/Os3s2+oE4P/FLD4dxg4mD7Wust+u5g==}
    engines: {node: ^20.19.0 || >=22.12.0}
    hasBin: true
    peerDependencies:
      '@types/node': ^20.19.0 || >=22.12.0
      jiti: '>=1.21.0'
      less: ^4.0.0
      lightningcss: ^1.21.0
      sass: ^1.70.0
      sass-embedded: ^1.70.0
      stylus: '>=0.54.8'
      sugarss: ^5.0.0
      terser: ^5.16.0
      tsx: ^4.8.1
      yaml: ^2.4.2
    peerDependenciesMeta:
      '@types/node':
        optional: true
      jiti:
        optional: true
      less:
        optional: true
      lightningcss:
        optional: true
      sass:
        optional: true
      sass-embedded:
        optional: true
      stylus:
        optional: true
      sugarss:
        optional: true
      terser:
        optional: true
      tsx:
        optional: true
      yaml:
        optional: true

  vitest@3.2.4:
    resolution: {integrity: sha512-LUCP5ev3GURDysTWiP47wRRUpLKMOfPh+yKTx3kVIEiu5KOMeqzpnYNsKyOoVrULivR8tLcks4+lga33Whn90A==}
    engines: {node: ^18.0.0 || ^20.0.0 || >=22.0.0}
    hasBin: true
    peerDependencies:
      '@edge-runtime/vm': '*'
      '@types/debug': ^4.1.12
      '@types/node': ^18.0.0 || ^20.0.0 || >=22.0.0
      '@vitest/browser': 3.2.4
      '@vitest/ui': 3.2.4
      happy-dom: '*'
      jsdom: '*'
    peerDependenciesMeta:
      '@edge-runtime/vm':
        optional: true
      '@types/debug':
        optional: true
      '@types/node':
        optional: true
      '@vitest/browser':
        optional: true
      '@vitest/ui':
        optional: true
      happy-dom:
        optional: true
      jsdom:
        optional: true

  w3c-xmlserializer@5.0.0:
    resolution: {integrity: sha512-o8qghlI8NZHU1lLPrpi2+Uq7abh4GGPpYANlalzWxyWteJOCsr/P+oPBA49TOLu5FTZO4d3F9MnWJfiMo4BkmA==}
    engines: {node: '>=18'}

  webidl-conversions@7.0.0:
    resolution: {integrity: sha512-VwddBukDzu71offAQR975unBIGqfKZpM+8ZX6ySk8nYhVoo5CYaZyzt3YBvYtRtO+aoGlqxPg/B87NGVZ/fu6g==}
    engines: {node: '>=12'}

  whatwg-encoding@3.1.1:
    resolution: {integrity: sha512-6qN4hJdMwfYBtE3YBTTHhoeuUrDBPZmbQaxWAqSALV/MeEnR5z1xd8UKud2RAkFoPkmB+hli1TZSnyi84xz1vQ==}
    engines: {node: '>=18'}

  whatwg-mimetype@4.0.0:
    resolution: {integrity: sha512-QaKxh0eNIi2mE9p2vEdzfagOKHCcj1pJ56EEHGQOVxp8r9/iszLUUV7v89x9O1p/T+NlTM5W7jW6+cz4Fq1YVg==}
    engines: {node: '>=18'}

  whatwg-url@14.2.0:
    resolution: {integrity: sha512-De72GdQZzNTUBBChsXueQUnPKDkg/5A5zp7pFDuQAj5UFoENpiACU0wlCvzpAGnTkj++ihpKwKyYewn/XNUbKw==}
    engines: {node: '>=18'}

  which-boxed-primitive@1.1.1:
    resolution: {integrity: sha512-TbX3mj8n0odCBFVlY8AxkqcHASw3L60jIuF8jFP78az3C2YhmGvqbHBpAjTRH2/xqYunrJ9g1jSyjCjpoWzIAA==}
    engines: {node: '>= 0.4'}

  which-builtin-type@1.2.1:
    resolution: {integrity: sha512-6iBczoX+kDQ7a3+YJBnh3T+KZRxM/iYNPXicqk66/Qfm1b93iu+yOImkg0zHbj5LNOcNv1TEADiZ0xa34B4q6Q==}
    engines: {node: '>= 0.4'}

  which-collection@1.0.2:
    resolution: {integrity: sha512-K4jVyjnBdgvc86Y6BkaLZEN933SwYOuBFkdmBu9ZfkcAbdVbpITnDmjvZ/aQjRXQrv5EPkTnD1s39GiiqbngCw==}
    engines: {node: '>= 0.4'}

  which-typed-array@1.1.19:
    resolution: {integrity: sha512-rEvr90Bck4WZt9HHFC4DJMsjvu7x+r6bImz0/BrbWb7A2djJ8hnZMrWnHo9F8ssv0OMErasDhftrfROTyqSDrw==}
    engines: {node: '>= 0.4'}

  which@2.0.2:
    resolution: {integrity: sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==}
    engines: {node: '>= 8'}
    hasBin: true

  why-is-node-running@2.3.0:
    resolution: {integrity: sha512-hUrmaWBdVDcxvYqnyh09zunKzROWjbZTiNy8dBEjkS7ehEDQibXJ7XvlmtbwuTclUiIyN+CyXQD4Vmko8fNm8w==}
    engines: {node: '>=8'}
    hasBin: true

  word-wrap@1.2.5:
    resolution: {integrity: sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==}
    engines: {node: '>=0.10.0'}

  wrap-ansi@7.0.0:
    resolution: {integrity: sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==}
    engines: {node: '>=10'}

  wrap-ansi@8.1.0:
    resolution: {integrity: sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==}
    engines: {node: '>=12'}

  ws@8.18.3:
    resolution: {integrity: sha512-PEIGCY5tSlUt50cqyMXfCzX+oOPqN0vuGqWzbcJ2xvnkzkq46oOpz7dQaTDBdfICb4N14+GARUDw2XV2N4tvzg==}
    engines: {node: '>=10.0.0'}
    peerDependencies:
      bufferutil: ^4.0.1
      utf-8-validate: '>=5.0.2'
    peerDependenciesMeta:
      bufferutil:
        optional: true
      utf-8-validate:
        optional: true

  xml-name-validator@5.0.0:
    resolution: {integrity: sha512-EvGK8EJ3DhaHfbRlETOWAS5pO9MZITeauHKJyb8wyajUfQUenkIg2MvLDTZ4T/TgIcm3HU0TFBgWWboAZ30UHg==}
    engines: {node: '>=18'}

  xmlchars@2.2.0:
    resolution: {integrity: sha512-JZnDKK8B0RCDw84FNdDAIpZK+JuJw+s7Lz8nksI7SIuU3UXJJslUthsi+uWBUYOwPFwW7W7PRLRfUKpxjtjFCw==}

  yallist@3.1.1:
    resolution: {integrity: sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==}

  yaml@2.8.0:
    resolution: {integrity: sha512-4lLa/EcQCB0cJkyts+FpIRx5G/llPxfP6VQU5KByHEhLxY3IJCH0f0Hy1MHI8sClTvsIb8qwRJ6R/ZdlDJ/leQ==}
    engines: {node: '>= 14.6'}
    hasBin: true

  yocto-queue@0.1.0:
    resolution: {integrity: sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==}
    engines: {node: '>=10'}

  zod@3.25.71:
    resolution: {integrity: sha512-BsBc/NPk7h8WsUWYWYL+BajcJPY8YhjelaWu2NMLuzgraKAz4Lb4/6K11g9jpuDetjMiqhZ6YaexFLOC0Ogi3Q==}

  zustand@5.0.6:
    resolution: {integrity: sha512-ihAqNeUVhe0MAD+X8M5UzqyZ9k3FFZLBTtqo6JLPwV53cbRB/mJwBI0PxcIgqhBBHlEs8G45OTDTMq3gNcLq3A==}
    engines: {node: '>=12.20.0'}
    peerDependencies:
      '@types/react': '>=18.0.0'
      immer: '>=9.0.6'
      react: '>=18.0.0'
      use-sync-external-store: '>=1.2.0'
    peerDependenciesMeta:
      '@types/react':
        optional: true
      immer:
        optional: true
      react:
        optional: true
      use-sync-external-store:
        optional: true

snapshots:

  '@adobe/css-tools@4.4.3': {}

  '@alloc/quick-lru@5.2.0': {}

  '@ampproject/remapping@2.3.0':
    dependencies:
      '@jridgewell/gen-mapping': 0.3.12
      '@jridgewell/trace-mapping': 0.3.29

  '@asamuzakjp/css-color@3.2.0':
    dependencies:
      '@csstools/css-calc': 2.1.4(@csstools/css-parser-algorithms@3.0.5(@csstools/css-tokenizer@3.0.4))(@csstools/css-tokenizer@3.0.4)
      '@csstools/css-color-parser': 3.0.10(@csstools/css-parser-algorithms@3.0.5(@csstools/css-tokenizer@3.0.4))(@csstools/css-tokenizer@3.0.4)
      '@csstools/css-parser-algorithms': 3.0.5(@csstools/css-tokenizer@3.0.4)
      '@csstools/css-tokenizer': 3.0.4
      lru-cache: 10.4.3

  '@babel/code-frame@7.27.1':
    dependencies:
      '@babel/helper-validator-identifier': 7.27.1
      js-tokens: 4.0.0
      picocolors: 1.1.1

  '@babel/compat-data@7.28.0': {}

  '@babel/core@7.28.0':
    dependencies:
      '@ampproject/remapping': 2.3.0
      '@babel/code-frame': 7.27.1
      '@babel/generator': 7.28.0
      '@babel/helper-compilation-targets': 7.27.2
      '@babel/helper-module-transforms': 7.27.3(@babel/core@7.28.0)
      '@babel/helpers': 7.27.6
      '@babel/parser': 7.28.0
      '@babel/template': 7.27.2
      '@babel/traverse': 7.28.0
      '@babel/types': 7.28.0
      convert-source-map: 2.0.0
      debug: 4.4.1
      gensync: 1.0.0-beta.2
      json5: 2.2.3
      semver: 6.3.1
    transitivePeerDependencies:
      - supports-color

  '@babel/generator@7.28.0':
    dependencies:
      '@babel/parser': 7.28.0
      '@babel/types': 7.28.0
      '@jridgewell/gen-mapping': 0.3.12
      '@jridgewell/trace-mapping': 0.3.29
      jsesc: 3.1.0

  '@babel/helper-compilation-targets@7.27.2':
    dependencies:
      '@babel/compat-data': 7.28.0
      '@babel/helper-validator-option': 7.27.1
      browserslist: 4.25.1
      lru-cache: 5.1.1
      semver: 6.3.1

  '@babel/helper-globals@7.28.0': {}

  '@babel/helper-module-imports@7.27.1':
    dependencies:
      '@babel/traverse': 7.28.0
      '@babel/types': 7.28.0
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-module-transforms@7.27.3(@babel/core@7.28.0)':
    dependencies:
      '@babel/core': 7.28.0
      '@babel/helper-module-imports': 7.27.1
      '@babel/helper-validator-identifier': 7.27.1
      '@babel/traverse': 7.28.0
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-plugin-utils@7.27.1': {}

  '@babel/helper-string-parser@7.27.1': {}

  '@babel/helper-validator-identifier@7.27.1': {}

  '@babel/helper-validator-option@7.27.1': {}

  '@babel/helpers@7.27.6':
    dependencies:
      '@babel/template': 7.27.2
      '@babel/types': 7.28.0

  '@babel/parser@7.28.0':
    dependencies:
      '@babel/types': 7.28.0

  '@babel/plugin-transform-react-jsx-self@7.27.1(@babel/core@7.28.0)':
    dependencies:
      '@babel/core': 7.28.0
      '@babel/helper-plugin-utils': 7.27.1

  '@babel/plugin-transform-react-jsx-source@7.27.1(@babel/core@7.28.0)':
    dependencies:
      '@babel/core': 7.28.0
      '@babel/helper-plugin-utils': 7.27.1

  '@babel/runtime@7.27.6': {}

  '@babel/template@7.27.2':
    dependencies:
      '@babel/code-frame': 7.27.1
      '@babel/parser': 7.28.0
      '@babel/types': 7.28.0

  '@babel/traverse@7.28.0':
    dependencies:
      '@babel/code-frame': 7.27.1
      '@babel/generator': 7.28.0
      '@babel/helper-globals': 7.28.0
      '@babel/parser': 7.28.0
      '@babel/template': 7.27.2
      '@babel/types': 7.28.0
      debug: 4.4.1
    transitivePeerDependencies:
      - supports-color

  '@babel/types@7.28.0':
    dependencies:
      '@babel/helper-string-parser': 7.27.1
      '@babel/helper-validator-identifier': 7.27.1

  '@csstools/color-helpers@5.0.2': {}

  '@csstools/css-calc@2.1.4(@csstools/css-parser-algorithms@3.0.5(@csstools/css-tokenizer@3.0.4))(@csstools/css-tokenizer@3.0.4)':
    dependencies:
      '@csstools/css-parser-algorithms': 3.0.5(@csstools/css-tokenizer@3.0.4)
      '@csstools/css-tokenizer': 3.0.4

  '@csstools/css-color-parser@3.0.10(@csstools/css-parser-algorithms@3.0.5(@csstools/css-tokenizer@3.0.4))(@csstools/css-tokenizer@3.0.4)':
    dependencies:
      '@csstools/color-helpers': 5.0.2
      '@csstools/css-calc': 2.1.4(@csstools/css-parser-algorithms@3.0.5(@csstools/css-tokenizer@3.0.4))(@csstools/css-tokenizer@3.0.4)
      '@csstools/css-parser-algorithms': 3.0.5(@csstools/css-tokenizer@3.0.4)
      '@csstools/css-tokenizer': 3.0.4

  '@csstools/css-parser-algorithms@3.0.5(@csstools/css-tokenizer@3.0.4)':
    dependencies:
      '@csstools/css-tokenizer': 3.0.4

  '@csstools/css-tokenizer@3.0.4': {}

  '@emnapi/core@1.4.3':
    dependencies:
      '@emnapi/wasi-threads': 1.0.2
      tslib: 2.8.1
    optional: true

  '@emnapi/runtime@1.4.3':
    dependencies:
      tslib: 2.8.1
    optional: true

  '@emnapi/wasi-threads@1.0.2':
    dependencies:
      tslib: 2.8.1
    optional: true

  '@esbuild/aix-ppc64@0.25.5':
    optional: true

  '@esbuild/android-arm64@0.25.5':
    optional: true

  '@esbuild/android-arm@0.25.5':
    optional: true

  '@esbuild/android-x64@0.25.5':
    optional: true

  '@esbuild/darwin-arm64@0.25.5':
    optional: true

  '@esbuild/darwin-x64@0.25.5':
    optional: true

  '@esbuild/freebsd-arm64@0.25.5':
    optional: true

  '@esbuild/freebsd-x64@0.25.5':
    optional: true

  '@esbuild/linux-arm64@0.25.5':
    optional: true

  '@esbuild/linux-arm@0.25.5':
    optional: true

  '@esbuild/linux-ia32@0.25.5':
    optional: true

  '@esbuild/linux-loong64@0.25.5':
    optional: true

  '@esbuild/linux-mips64el@0.25.5':
    optional: true

  '@esbuild/linux-ppc64@0.25.5':
    optional: true

  '@esbuild/linux-riscv64@0.25.5':
    optional: true

  '@esbuild/linux-s390x@0.25.5':
    optional: true

  '@esbuild/linux-x64@0.25.5':
    optional: true

  '@esbuild/netbsd-arm64@0.25.5':
    optional: true

  '@esbuild/netbsd-x64@0.25.5':
    optional: true

  '@esbuild/openbsd-arm64@0.25.5':
    optional: true

  '@esbuild/openbsd-x64@0.25.5':
    optional: true

  '@esbuild/sunos-x64@0.25.5':
    optional: true

  '@esbuild/win32-arm64@0.25.5':
    optional: true

  '@esbuild/win32-ia32@0.25.5':
    optional: true

  '@esbuild/win32-x64@0.25.5':
    optional: true

  '@eslint-community/eslint-utils@4.7.0(eslint@9.30.1(jiti@1.21.7))':
    dependencies:
      eslint: 9.30.1(jiti@1.21.7)
      eslint-visitor-keys: 3.4.3

  '@eslint-community/regexpp@4.12.1': {}

  '@eslint/config-array@0.21.0':
    dependencies:
      '@eslint/object-schema': 2.1.6
      debug: 4.4.1
      minimatch: 3.1.2
    transitivePeerDependencies:
      - supports-color

  '@eslint/config-helpers@0.3.0': {}

  '@eslint/core@0.14.0':
    dependencies:
      '@types/json-schema': 7.0.15

  '@eslint/core@0.15.1':
    dependencies:
      '@types/json-schema': 7.0.15

  '@eslint/eslintrc@3.3.1':
    dependencies:
      ajv: 6.12.6
      debug: 4.4.1
      espree: 10.4.0
      globals: 14.0.0
      ignore: 5.3.2
      import-fresh: 3.3.1
      js-yaml: 4.1.0
      minimatch: 3.1.2
      strip-json-comments: 3.1.1
    transitivePeerDependencies:
      - supports-color

  '@eslint/js@9.30.1': {}

  '@eslint/object-schema@2.1.6': {}

  '@eslint/plugin-kit@0.3.3':
    dependencies:
      '@eslint/core': 0.15.1
      levn: 0.4.1

  '@floating-ui/core@1.7.2':
    dependencies:
      '@floating-ui/utils': 0.2.10

  '@floating-ui/dom@1.7.2':
    dependencies:
      '@floating-ui/core': 1.7.2
      '@floating-ui/utils': 0.2.10

  '@floating-ui/react-dom@2.1.4(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@floating-ui/dom': 1.7.2
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)

  '@floating-ui/utils@0.2.10': {}

  '@hookform/resolvers@3.10.0(react-hook-form@7.59.0(react@19.1.0))':
    dependencies:
      react-hook-form: 7.59.0(react@19.1.0)

  '@humanfs/core@0.19.1': {}

  '@humanfs/node@0.16.6':
    dependencies:
      '@humanfs/core': 0.19.1
      '@humanwhocodes/retry': 0.3.1

  '@humanwhocodes/module-importer@1.0.1': {}

  '@humanwhocodes/retry@0.3.1': {}

  '@humanwhocodes/retry@0.4.3': {}

  '@img/sharp-darwin-arm64@0.33.5':
    optionalDependencies:
      '@img/sharp-libvips-darwin-arm64': 1.0.4
    optional: true

  '@img/sharp-darwin-x64@0.33.5':
    optionalDependencies:
      '@img/sharp-libvips-darwin-x64': 1.0.4
    optional: true

  '@img/sharp-libvips-darwin-arm64@1.0.4':
    optional: true

  '@img/sharp-libvips-darwin-x64@1.0.4':
    optional: true

  '@img/sharp-libvips-linux-arm64@1.0.4':
    optional: true

  '@img/sharp-libvips-linux-arm@1.0.5':
    optional: true

  '@img/sharp-libvips-linux-s390x@1.0.4':
    optional: true

  '@img/sharp-libvips-linux-x64@1.0.4':
    optional: true

  '@img/sharp-libvips-linuxmusl-arm64@1.0.4':
    optional: true

  '@img/sharp-libvips-linuxmusl-x64@1.0.4':
    optional: true

  '@img/sharp-linux-arm64@0.33.5':
    optionalDependencies:
      '@img/sharp-libvips-linux-arm64': 1.0.4
    optional: true

  '@img/sharp-linux-arm@0.33.5':
    optionalDependencies:
      '@img/sharp-libvips-linux-arm': 1.0.5
    optional: true

  '@img/sharp-linux-s390x@0.33.5':
    optionalDependencies:
      '@img/sharp-libvips-linux-s390x': 1.0.4
    optional: true

  '@img/sharp-linux-x64@0.33.5':
    optionalDependencies:
      '@img/sharp-libvips-linux-x64': 1.0.4
    optional: true

  '@img/sharp-linuxmusl-arm64@0.33.5':
    optionalDependencies:
      '@img/sharp-libvips-linuxmusl-arm64': 1.0.4
    optional: true

  '@img/sharp-linuxmusl-x64@0.33.5':
    optionalDependencies:
      '@img/sharp-libvips-linuxmusl-x64': 1.0.4
    optional: true

  '@img/sharp-wasm32@0.33.5':
    dependencies:
      '@emnapi/runtime': 1.4.3
    optional: true

  '@img/sharp-win32-ia32@0.33.5':
    optional: true

  '@img/sharp-win32-x64@0.33.5':
    optional: true

  '@isaacs/cliui@8.0.2':
    dependencies:
      string-width: 5.1.2
      string-width-cjs: string-width@4.2.3
      strip-ansi: 7.1.0
      strip-ansi-cjs: strip-ansi@6.0.1
      wrap-ansi: 8.1.0
      wrap-ansi-cjs: wrap-ansi@7.0.0

  '@jridgewell/gen-mapping@0.3.12':
    dependencies:
      '@jridgewell/sourcemap-codec': 1.5.4
      '@jridgewell/trace-mapping': 0.3.29

  '@jridgewell/resolve-uri@3.1.2': {}

  '@jridgewell/sourcemap-codec@1.5.4': {}

  '@jridgewell/trace-mapping@0.3.29':
    dependencies:
      '@jridgewell/resolve-uri': 3.1.2
      '@jridgewell/sourcemap-codec': 1.5.4

  '@napi-rs/wasm-runtime@0.2.11':
    dependencies:
      '@emnapi/core': 1.4.3
      '@emnapi/runtime': 1.4.3
      '@tybys/wasm-util': 0.9.0
    optional: true

  '@next/env@15.2.4': {}

  '@next/eslint-plugin-next@15.3.4':
    dependencies:
      fast-glob: 3.3.1

  '@next/swc-darwin-arm64@15.2.4':
    optional: true

  '@next/swc-darwin-x64@15.2.4':
    optional: true

  '@next/swc-linux-arm64-gnu@15.2.4':
    optional: true

  '@next/swc-linux-arm64-musl@15.2.4':
    optional: true

  '@next/swc-linux-x64-gnu@15.2.4':
    optional: true

  '@next/swc-linux-x64-musl@15.2.4':
    optional: true

  '@next/swc-win32-arm64-msvc@15.2.4':
    optional: true

  '@next/swc-win32-x64-msvc@15.2.4':
    optional: true

  '@nodelib/fs.scandir@2.1.5':
    dependencies:
      '@nodelib/fs.stat': 2.0.5
      run-parallel: 1.2.0

  '@nodelib/fs.stat@2.0.5': {}

  '@nodelib/fs.walk@1.2.8':
    dependencies:
      '@nodelib/fs.scandir': 2.1.5
      fastq: 1.19.1

  '@nolyfill/is-core-module@1.0.39': {}

  '@pkgjs/parseargs@0.11.0':
    optional: true

  '@playwright/test@1.53.2':
    dependencies:
      playwright: 1.53.2

  '@polka/url@1.0.0-next.29': {}

  '@radix-ui/number@1.1.0': {}

  '@radix-ui/primitive@1.1.1': {}

  '@radix-ui/react-accordion@1.2.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-collapsible': 1.1.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-collection': 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-direction': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-id': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-alert-dialog@1.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-dialog': 1.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-slot': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-arrow@1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-aspect-ratio@1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-avatar@1.1.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-checkbox@1.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-presence': 1.1.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-previous': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-size': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-collapsible@1.1.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-id': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-presence': 1.1.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-collection@1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-slot': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-compose-refs@1.1.1(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-compose-refs@1.1.2(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-context-menu@2.2.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-menu': 2.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-context@1.1.1(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-dialog@1.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-dismissable-layer': 1.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-focus-guards': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-focus-scope': 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-id': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-portal': 1.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-presence': 1.1.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-slot': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      aria-hidden: 1.2.6
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
      react-remove-scroll: 2.7.1(@types/react@19.1.8)(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-direction@1.1.0(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-dismissable-layer@1.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-escape-keydown': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-dropdown-menu@2.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-id': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-menu': 2.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-focus-guards@1.1.1(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-focus-scope@1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-hover-card@1.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-dismissable-layer': 1.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-popper': 1.2.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-portal': 1.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-presence': 1.1.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-id@1.1.0(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-id@1.1.1(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      '@radix-ui/react-use-layout-effect': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-label@2.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-menu@2.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-collection': 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-direction': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-dismissable-layer': 1.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-focus-guards': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-focus-scope': 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-id': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-popper': 1.2.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-portal': 1.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-presence': 1.1.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-roving-focus': 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-slot': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      aria-hidden: 1.2.6
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
      react-remove-scroll: 2.7.1(@types/react@19.1.8)(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-menubar@1.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-collection': 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-direction': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-id': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-menu': 2.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-roving-focus': 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-navigation-menu@1.2.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-collection': 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-direction': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-dismissable-layer': 1.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-id': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-presence': 1.1.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-previous': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-visually-hidden': 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-popover@1.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-dismissable-layer': 1.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-focus-guards': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-focus-scope': 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-id': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-popper': 1.2.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-portal': 1.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-presence': 1.1.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-slot': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      aria-hidden: 1.2.6
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
      react-remove-scroll: 2.7.1(@types/react@19.1.8)(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-popper@1.2.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@floating-ui/react-dom': 2.1.4(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-arrow': 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-rect': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-size': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/rect': 1.1.0
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-portal@1.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-presence@1.1.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-primitive@2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/react-slot': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-primitive@2.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/react-slot': 1.2.3(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-progress@1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-radio-group@1.2.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-direction': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-presence': 1.1.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-roving-focus': 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-previous': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-size': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-roving-focus@1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-collection': 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-direction': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-id': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-scroll-area@1.2.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/number': 1.1.0
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-direction': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-presence': 1.1.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-select@2.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/number': 1.1.0
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-collection': 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-direction': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-dismissable-layer': 1.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-focus-guards': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-focus-scope': 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-id': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-popper': 1.2.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-portal': 1.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-slot': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-previous': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-visually-hidden': 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      aria-hidden: 1.2.6
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
      react-remove-scroll: 2.7.1(@types/react@19.1.8)(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-separator@1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-slider@1.2.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/number': 1.1.0
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-collection': 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-direction': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-previous': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-size': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-slot@1.1.1(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-slot@1.2.3(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      '@radix-ui/react-compose-refs': 1.1.2(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-switch@1.1.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-previous': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-size': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-tabs@1.1.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-direction': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-id': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-presence': 1.1.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-roving-focus': 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-toast@1.2.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-collection': 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-dismissable-layer': 1.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-portal': 1.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-presence': 1.1.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-visually-hidden': 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-toggle-group@1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-direction': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-roving-focus': 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-toggle': 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-toggle@1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-tooltip@1.1.6(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/primitive': 1.1.1
      '@radix-ui/react-compose-refs': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-context': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-dismissable-layer': 1.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-id': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-popper': 1.2.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-portal': 1.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-presence': 1.1.2(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-slot': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-visually-hidden': 1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/react-use-callback-ref@1.1.0(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-use-controllable-state@1.1.0(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-use-escape-keydown@1.1.0(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-use-layout-effect@1.1.0(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-use-layout-effect@1.1.1(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-use-previous@1.1.0(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-use-rect@1.1.0(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      '@radix-ui/rect': 1.1.0
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-use-size@1.1.0(@types/react@19.1.8)(react@19.1.0)':
    dependencies:
      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@19.1.8)(react@19.1.0)
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.8

  '@radix-ui/react-visually-hidden@1.1.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@radix-ui/rect@1.1.0': {}

  '@rolldown/pluginutils@1.0.0-beta.19': {}

  '@rollup/rollup-android-arm-eabi@4.44.1':
    optional: true

  '@rollup/rollup-android-arm64@4.44.1':
    optional: true

  '@rollup/rollup-darwin-arm64@4.44.1':
    optional: true

  '@rollup/rollup-darwin-x64@4.44.1':
    optional: true

  '@rollup/rollup-freebsd-arm64@4.44.1':
    optional: true

  '@rollup/rollup-freebsd-x64@4.44.1':
    optional: true

  '@rollup/rollup-linux-arm-gnueabihf@4.44.1':
    optional: true

  '@rollup/rollup-linux-arm-musleabihf@4.44.1':
    optional: true

  '@rollup/rollup-linux-arm64-gnu@4.44.1':
    optional: true

  '@rollup/rollup-linux-arm64-musl@4.44.1':
    optional: true

  '@rollup/rollup-linux-loongarch64-gnu@4.44.1':
    optional: true

  '@rollup/rollup-linux-powerpc64le-gnu@4.44.1':
    optional: true

  '@rollup/rollup-linux-riscv64-gnu@4.44.1':
    optional: true

  '@rollup/rollup-linux-riscv64-musl@4.44.1':
    optional: true

  '@rollup/rollup-linux-s390x-gnu@4.44.1':
    optional: true

  '@rollup/rollup-linux-x64-gnu@4.44.1':
    optional: true

  '@rollup/rollup-linux-x64-musl@4.44.1':
    optional: true

  '@rollup/rollup-win32-arm64-msvc@4.44.1':
    optional: true

  '@rollup/rollup-win32-ia32-msvc@4.44.1':
    optional: true

  '@rollup/rollup-win32-x64-msvc@4.44.1':
    optional: true

  '@rtsao/scc@1.1.0': {}

  '@rushstack/eslint-patch@1.12.0': {}

  '@swc/counter@0.1.3': {}

  '@swc/helpers@0.5.15':
    dependencies:
      tslib: 2.8.1

  '@testing-library/dom@10.4.0':
    dependencies:
      '@babel/code-frame': 7.27.1
      '@babel/runtime': 7.27.6
      '@types/aria-query': 5.0.4
      aria-query: 5.3.0
      chalk: 4.1.2
      dom-accessibility-api: 0.5.16
      lz-string: 1.5.0
      pretty-format: 27.5.1

  '@testing-library/jest-dom@6.6.3':
    dependencies:
      '@adobe/css-tools': 4.4.3
      aria-query: 5.3.2
      chalk: 3.0.0
      css.escape: 1.5.1
      dom-accessibility-api: 0.6.3
      lodash: 4.17.21
      redent: 3.0.0

  '@testing-library/react@16.3.0(@testing-library/dom@10.4.0)(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)':
    dependencies:
      '@babel/runtime': 7.27.6
      '@testing-library/dom': 10.4.0
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8
      '@types/react-dom': 19.1.6(@types/react@19.1.8)

  '@testing-library/user-event@14.6.1(@testing-library/dom@10.4.0)':
    dependencies:
      '@testing-library/dom': 10.4.0

  '@tybys/wasm-util@0.9.0':
    dependencies:
      tslib: 2.8.1
    optional: true

  '@types/aria-query@5.0.4': {}

  '@types/babel__core@7.20.5':
    dependencies:
      '@babel/parser': 7.28.0
      '@babel/types': 7.28.0
      '@types/babel__generator': 7.27.0
      '@types/babel__template': 7.4.4
      '@types/babel__traverse': 7.20.7

  '@types/babel__generator@7.27.0':
    dependencies:
      '@babel/types': 7.28.0

  '@types/babel__template@7.4.4':
    dependencies:
      '@babel/parser': 7.28.0
      '@babel/types': 7.28.0

  '@types/babel__traverse@7.20.7':
    dependencies:
      '@babel/types': 7.28.0

  '@types/chai@5.2.2':
    dependencies:
      '@types/deep-eql': 4.0.2

  '@types/codemirror@5.60.16':
    dependencies:
      '@types/tern': 0.23.9

  '@types/d3-array@3.2.1': {}

  '@types/d3-color@3.1.3': {}

  '@types/d3-ease@3.0.2': {}

  '@types/d3-interpolate@3.0.4':
    dependencies:
      '@types/d3-color': 3.1.3

  '@types/d3-path@3.1.1': {}

  '@types/d3-scale@4.0.9':
    dependencies:
      '@types/d3-time': 3.0.4

  '@types/d3-shape@3.1.7':
    dependencies:
      '@types/d3-path': 3.1.1

  '@types/d3-time@3.0.4': {}

  '@types/d3-timer@3.0.2': {}

  '@types/deep-eql@4.0.2': {}

  '@types/estree@1.0.8': {}

  '@types/json-schema@7.0.15': {}

  '@types/json5@0.0.29': {}

  '@types/marked@4.3.2': {}

  '@types/node@22.16.0':
    dependencies:
      undici-types: 6.21.0

  '@types/react-dom@19.1.6(@types/react@19.1.8)':
    dependencies:
      '@types/react': 19.1.8

  '@types/react@19.1.8':
    dependencies:
      csstype: 3.1.3

  '@types/tern@0.23.9':
    dependencies:
      '@types/estree': 1.0.8

  '@typescript-eslint/eslint-plugin@8.35.1(@typescript-eslint/parser@8.35.1(eslint@9.30.1(jiti@1.21.7))(typescript@5.8.3))(eslint@9.30.1(jiti@1.21.7))(typescript@5.8.3)':
    dependencies:
      '@eslint-community/regexpp': 4.12.1
      '@typescript-eslint/parser': 8.35.1(eslint@9.30.1(jiti@1.21.7))(typescript@5.8.3)
      '@typescript-eslint/scope-manager': 8.35.1
      '@typescript-eslint/type-utils': 8.35.1(eslint@9.30.1(jiti@1.21.7))(typescript@5.8.3)
      '@typescript-eslint/utils': 8.35.1(eslint@9.30.1(jiti@1.21.7))(typescript@5.8.3)
      '@typescript-eslint/visitor-keys': 8.35.1
      eslint: 9.30.1(jiti@1.21.7)
      graphemer: 1.4.0
      ignore: 7.0.5
      natural-compare: 1.4.0
      ts-api-utils: 2.1.0(typescript@5.8.3)
      typescript: 5.8.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/parser@8.35.1(eslint@9.30.1(jiti@1.21.7))(typescript@5.8.3)':
    dependencies:
      '@typescript-eslint/scope-manager': 8.35.1
      '@typescript-eslint/types': 8.35.1
      '@typescript-eslint/typescript-estree': 8.35.1(typescript@5.8.3)
      '@typescript-eslint/visitor-keys': 8.35.1
      debug: 4.4.1
      eslint: 9.30.1(jiti@1.21.7)
      typescript: 5.8.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/project-service@8.35.1(typescript@5.8.3)':
    dependencies:
      '@typescript-eslint/tsconfig-utils': 8.35.1(typescript@5.8.3)
      '@typescript-eslint/types': 8.35.1
      debug: 4.4.1
      typescript: 5.8.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/scope-manager@8.35.1':
    dependencies:
      '@typescript-eslint/types': 8.35.1
      '@typescript-eslint/visitor-keys': 8.35.1

  '@typescript-eslint/tsconfig-utils@8.35.1(typescript@5.8.3)':
    dependencies:
      typescript: 5.8.3

  '@typescript-eslint/type-utils@8.35.1(eslint@9.30.1(jiti@1.21.7))(typescript@5.8.3)':
    dependencies:
      '@typescript-eslint/typescript-estree': 8.35.1(typescript@5.8.3)
      '@typescript-eslint/utils': 8.35.1(eslint@9.30.1(jiti@1.21.7))(typescript@5.8.3)
      debug: 4.4.1
      eslint: 9.30.1(jiti@1.21.7)
      ts-api-utils: 2.1.0(typescript@5.8.3)
      typescript: 5.8.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/types@8.35.1': {}

  '@typescript-eslint/typescript-estree@8.35.1(typescript@5.8.3)':
    dependencies:
      '@typescript-eslint/project-service': 8.35.1(typescript@5.8.3)
      '@typescript-eslint/tsconfig-utils': 8.35.1(typescript@5.8.3)
      '@typescript-eslint/types': 8.35.1
      '@typescript-eslint/visitor-keys': 8.35.1
      debug: 4.4.1
      fast-glob: 3.3.3
      is-glob: 4.0.3
      minimatch: 9.0.5
      semver: 7.7.2
      ts-api-utils: 2.1.0(typescript@5.8.3)
      typescript: 5.8.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/utils@8.35.1(eslint@9.30.1(jiti@1.21.7))(typescript@5.8.3)':
    dependencies:
      '@eslint-community/eslint-utils': 4.7.0(eslint@9.30.1(jiti@1.21.7))
      '@typescript-eslint/scope-manager': 8.35.1
      '@typescript-eslint/types': 8.35.1
      '@typescript-eslint/typescript-estree': 8.35.1(typescript@5.8.3)
      eslint: 9.30.1(jiti@1.21.7)
      typescript: 5.8.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/visitor-keys@8.35.1':
    dependencies:
      '@typescript-eslint/types': 8.35.1
      eslint-visitor-keys: 4.2.1

  '@unrs/resolver-binding-android-arm-eabi@1.10.1':
    optional: true

  '@unrs/resolver-binding-android-arm64@1.10.1':
    optional: true

  '@unrs/resolver-binding-darwin-arm64@1.10.1':
    optional: true

  '@unrs/resolver-binding-darwin-x64@1.10.1':
    optional: true

  '@unrs/resolver-binding-freebsd-x64@1.10.1':
    optional: true

  '@unrs/resolver-binding-linux-arm-gnueabihf@1.10.1':
    optional: true

  '@unrs/resolver-binding-linux-arm-musleabihf@1.10.1':
    optional: true

  '@unrs/resolver-binding-linux-arm64-gnu@1.10.1':
    optional: true

  '@unrs/resolver-binding-linux-arm64-musl@1.10.1':
    optional: true

  '@unrs/resolver-binding-linux-ppc64-gnu@1.10.1':
    optional: true

  '@unrs/resolver-binding-linux-riscv64-gnu@1.10.1':
    optional: true

  '@unrs/resolver-binding-linux-riscv64-musl@1.10.1':
    optional: true

  '@unrs/resolver-binding-linux-s390x-gnu@1.10.1':
    optional: true

  '@unrs/resolver-binding-linux-x64-gnu@1.10.1':
    optional: true

  '@unrs/resolver-binding-linux-x64-musl@1.10.1':
    optional: true

  '@unrs/resolver-binding-wasm32-wasi@1.10.1':
    dependencies:
      '@napi-rs/wasm-runtime': 0.2.11
    optional: true

  '@unrs/resolver-binding-win32-arm64-msvc@1.10.1':
    optional: true

  '@unrs/resolver-binding-win32-ia32-msvc@1.10.1':
    optional: true

  '@unrs/resolver-binding-win32-x64-msvc@1.10.1':
    optional: true

  '@vitejs/plugin-react@4.6.0(vite@7.0.0(@types/node@22.16.0)(jiti@1.21.7)(yaml@2.8.0))':
    dependencies:
      '@babel/core': 7.28.0
      '@babel/plugin-transform-react-jsx-self': 7.27.1(@babel/core@7.28.0)
      '@babel/plugin-transform-react-jsx-source': 7.27.1(@babel/core@7.28.0)
      '@rolldown/pluginutils': 1.0.0-beta.19
      '@types/babel__core': 7.20.5
      react-refresh: 0.17.0
      vite: 7.0.0(@types/node@22.16.0)(jiti@1.21.7)(yaml@2.8.0)
    transitivePeerDependencies:
      - supports-color

  '@vitest/expect@3.2.4':
    dependencies:
      '@types/chai': 5.2.2
      '@vitest/spy': 3.2.4
      '@vitest/utils': 3.2.4
      chai: 5.2.0
      tinyrainbow: 2.0.0

  '@vitest/mocker@3.2.4(vite@7.0.0(@types/node@22.16.0)(jiti@1.21.7)(yaml@2.8.0))':
    dependencies:
      '@vitest/spy': 3.2.4
      estree-walker: 3.0.3
      magic-string: 0.30.17
    optionalDependencies:
      vite: 7.0.0(@types/node@22.16.0)(jiti@1.21.7)(yaml@2.8.0)

  '@vitest/pretty-format@3.2.4':
    dependencies:
      tinyrainbow: 2.0.0

  '@vitest/runner@3.2.4':
    dependencies:
      '@vitest/utils': 3.2.4
      pathe: 2.0.3
      strip-literal: 3.0.0

  '@vitest/snapshot@3.2.4':
    dependencies:
      '@vitest/pretty-format': 3.2.4
      magic-string: 0.30.17
      pathe: 2.0.3

  '@vitest/spy@3.2.4':
    dependencies:
      tinyspy: 4.0.3

  '@vitest/ui@3.2.4(vitest@3.2.4)':
    dependencies:
      '@vitest/utils': 3.2.4
      fflate: 0.8.2
      flatted: 3.3.3
      pathe: 2.0.3
      sirv: 3.0.1
      tinyglobby: 0.2.14
      tinyrainbow: 2.0.0
      vitest: 3.2.4(@types/node@22.16.0)(@vitest/ui@3.2.4)(jiti@1.21.7)(jsdom@26.1.0)(yaml@2.8.0)

  '@vitest/utils@3.2.4':
    dependencies:
      '@vitest/pretty-format': 3.2.4
      loupe: 3.1.4
      tinyrainbow: 2.0.0

  acorn-jsx@5.3.2(acorn@8.15.0):
    dependencies:
      acorn: 8.15.0

  acorn@8.15.0: {}

  agent-base@7.1.3: {}

  ajv@6.12.6:
    dependencies:
      fast-deep-equal: 3.1.3
      fast-json-stable-stringify: 2.1.0
      json-schema-traverse: 0.4.1
      uri-js: 4.4.1

  ansi-regex@5.0.1: {}

  ansi-regex@6.1.0: {}

  ansi-styles@4.3.0:
    dependencies:
      color-convert: 2.0.1

  ansi-styles@5.2.0: {}

  ansi-styles@6.2.1: {}

  any-promise@1.3.0: {}

  anymatch@3.1.3:
    dependencies:
      normalize-path: 3.0.0
      picomatch: 2.3.1

  arg@5.0.2: {}

  argparse@2.0.1: {}

  aria-hidden@1.2.6:
    dependencies:
      tslib: 2.8.1

  aria-query@5.3.0:
    dependencies:
      dequal: 2.0.3

  aria-query@5.3.2: {}

  array-buffer-byte-length@1.0.2:
    dependencies:
      call-bound: 1.0.4
      is-array-buffer: 3.0.5

  array-includes@3.1.9:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.4
      define-properties: 1.2.1
      es-abstract: 1.24.0
      es-object-atoms: 1.1.1
      get-intrinsic: 1.3.0
      is-string: 1.1.1
      math-intrinsics: 1.1.0

  array.prototype.findlast@1.2.5:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-abstract: 1.24.0
      es-errors: 1.3.0
      es-object-atoms: 1.1.1
      es-shim-unscopables: 1.1.0

  array.prototype.findlastindex@1.2.6:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.4
      define-properties: 1.2.1
      es-abstract: 1.24.0
      es-errors: 1.3.0
      es-object-atoms: 1.1.1
      es-shim-unscopables: 1.1.0

  array.prototype.flat@1.3.3:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-abstract: 1.24.0
      es-shim-unscopables: 1.1.0

  array.prototype.flatmap@1.3.3:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-abstract: 1.24.0
      es-shim-unscopables: 1.1.0

  array.prototype.tosorted@1.1.4:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-abstract: 1.24.0
      es-errors: 1.3.0
      es-shim-unscopables: 1.1.0

  arraybuffer.prototype.slice@1.0.4:
    dependencies:
      array-buffer-byte-length: 1.0.2
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-abstract: 1.24.0
      es-errors: 1.3.0
      get-intrinsic: 1.3.0
      is-array-buffer: 3.0.5

  assertion-error@2.0.1: {}

  ast-types-flow@0.0.8: {}

  async-function@1.0.0: {}

  asynckit@0.4.0: {}

  autoprefixer@10.4.21(postcss@8.5.6):
    dependencies:
      browserslist: 4.25.1
      caniuse-lite: 1.0.30001726
      fraction.js: 4.3.7
      normalize-range: 0.1.2
      picocolors: 1.1.1
      postcss: 8.5.6
      postcss-value-parser: 4.2.0

  available-typed-arrays@1.0.7:
    dependencies:
      possible-typed-array-names: 1.1.0

  axe-core@4.10.3: {}

  axios@1.10.0:
    dependencies:
      follow-redirects: 1.15.9
      form-data: 4.0.3
      proxy-from-env: 1.1.0
    transitivePeerDependencies:
      - debug

  axobject-query@4.1.0: {}

  balanced-match@1.0.2: {}

  binary-extensions@2.3.0: {}

  brace-expansion@1.1.12:
    dependencies:
      balanced-match: 1.0.2
      concat-map: 0.0.1

  brace-expansion@2.0.2:
    dependencies:
      balanced-match: 1.0.2

  braces@3.0.3:
    dependencies:
      fill-range: 7.1.1

  browserslist@4.25.1:
    dependencies:
      caniuse-lite: 1.0.30001726
      electron-to-chromium: 1.5.179
      node-releases: 2.0.19
      update-browserslist-db: 1.1.3(browserslist@4.25.1)

  busboy@1.6.0:
    dependencies:
      streamsearch: 1.1.0

  cac@6.7.14: {}

  call-bind-apply-helpers@1.0.2:
    dependencies:
      es-errors: 1.3.0
      function-bind: 1.1.2

  call-bind@1.0.8:
    dependencies:
      call-bind-apply-helpers: 1.0.2
      es-define-property: 1.0.1
      get-intrinsic: 1.3.0
      set-function-length: 1.2.2

  call-bound@1.0.4:
    dependencies:
      call-bind-apply-helpers: 1.0.2
      get-intrinsic: 1.3.0

  callsites@3.1.0: {}

  camelcase-css@2.0.1: {}

  caniuse-lite@1.0.30001726: {}

  chai@5.2.0:
    dependencies:
      assertion-error: 2.0.1
      check-error: 2.1.1
      deep-eql: 5.0.2
      loupe: 3.1.4
      pathval: 2.0.1

  chalk@3.0.0:
    dependencies:
      ansi-styles: 4.3.0
      supports-color: 7.2.0

  chalk@4.1.2:
    dependencies:
      ansi-styles: 4.3.0
      supports-color: 7.2.0

  check-error@2.1.1: {}

  chokidar@3.6.0:
    dependencies:
      anymatch: 3.1.3
      braces: 3.0.3
      glob-parent: 5.1.2
      is-binary-path: 2.1.0
      is-glob: 4.0.3
      normalize-path: 3.0.0
      readdirp: 3.6.0
    optionalDependencies:
      fsevents: 2.3.3

  class-variance-authority@0.7.1:
    dependencies:
      clsx: 2.1.1

  client-only@0.0.1: {}

  clsx@2.1.1: {}

  cmdk@1.0.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0):
    dependencies:
      '@radix-ui/react-dialog': 1.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      '@radix-ui/react-id': 1.1.1(@types/react@19.1.8)(react@19.1.0)
      '@radix-ui/react-primitive': 2.1.3(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
      use-sync-external-store: 1.5.0(react@19.1.0)
    transitivePeerDependencies:
      - '@types/react'
      - '@types/react-dom'

  codemirror-spell-checker@1.1.2:
    dependencies:
      typo-js: 1.2.5

  codemirror@5.65.19: {}

  color-convert@2.0.1:
    dependencies:
      color-name: 1.1.4

  color-name@1.1.4: {}

  color-string@1.9.1:
    dependencies:
      color-name: 1.1.4
      simple-swizzle: 0.2.2
    optional: true

  color@4.2.3:
    dependencies:
      color-convert: 2.0.1
      color-string: 1.9.1
    optional: true

  combined-stream@1.0.8:
    dependencies:
      delayed-stream: 1.0.0

  commander@4.1.1: {}

  concat-map@0.0.1: {}

  convert-source-map@2.0.0: {}

  cross-spawn@7.0.6:
    dependencies:
      path-key: 3.1.1
      shebang-command: 2.0.0
      which: 2.0.2

  css.escape@1.5.1: {}

  cssesc@3.0.0: {}

  cssstyle@4.6.0:
    dependencies:
      '@asamuzakjp/css-color': 3.2.0
      rrweb-cssom: 0.8.0

  csstype@3.1.3: {}

  d3-array@3.2.4:
    dependencies:
      internmap: 2.0.3

  d3-color@3.1.0: {}

  d3-ease@3.0.1: {}

  d3-format@3.1.0: {}

  d3-interpolate@3.0.1:
    dependencies:
      d3-color: 3.1.0

  d3-path@3.1.0: {}

  d3-scale@4.0.2:
    dependencies:
      d3-array: 3.2.4
      d3-format: 3.1.0
      d3-interpolate: 3.0.1
      d3-time: 3.1.0
      d3-time-format: 4.1.0

  d3-shape@3.2.0:
    dependencies:
      d3-path: 3.1.0

  d3-time-format@4.1.0:
    dependencies:
      d3-time: 3.1.0

  d3-time@3.1.0:
    dependencies:
      d3-array: 3.2.4

  d3-timer@3.0.1: {}

  damerau-levenshtein@1.0.8: {}

  data-urls@5.0.0:
    dependencies:
      whatwg-mimetype: 4.0.0
      whatwg-url: 14.2.0

  data-view-buffer@1.0.2:
    dependencies:
      call-bound: 1.0.4
      es-errors: 1.3.0
      is-data-view: 1.0.2

  data-view-byte-length@1.0.2:
    dependencies:
      call-bound: 1.0.4
      es-errors: 1.3.0
      is-data-view: 1.0.2

  data-view-byte-offset@1.0.1:
    dependencies:
      call-bound: 1.0.4
      es-errors: 1.3.0
      is-data-view: 1.0.2

  date-fns@4.1.0: {}

  debug@3.2.7:
    dependencies:
      ms: 2.1.3

  debug@4.4.1:
    dependencies:
      ms: 2.1.3

  decimal.js-light@2.5.1: {}

  decimal.js@10.5.0: {}

  deep-eql@5.0.2: {}

  deep-is@0.1.4: {}

  define-data-property@1.1.4:
    dependencies:
      es-define-property: 1.0.1
      es-errors: 1.3.0
      gopd: 1.2.0

  define-properties@1.2.1:
    dependencies:
      define-data-property: 1.1.4
      has-property-descriptors: 1.0.2
      object-keys: 1.1.1

  delayed-stream@1.0.0: {}

  dequal@2.0.3: {}

  detect-libc@2.0.4:
    optional: true

  detect-node-es@1.1.0: {}

  didyoumean@1.2.2: {}

  dlv@1.1.3: {}

  doctrine@2.1.0:
    dependencies:
      esutils: 2.0.3

  dom-accessibility-api@0.5.16: {}

  dom-accessibility-api@0.6.3: {}

  dom-helpers@5.2.1:
    dependencies:
      '@babel/runtime': 7.27.6
      csstype: 3.1.3

  dunder-proto@1.0.1:
    dependencies:
      call-bind-apply-helpers: 1.0.2
      es-errors: 1.3.0
      gopd: 1.2.0

  eastasianwidth@0.2.0: {}

  easymde@2.20.0:
    dependencies:
      '@types/codemirror': 5.60.16
      '@types/marked': 4.3.2
      codemirror: 5.65.19
      codemirror-spell-checker: 1.1.2
      marked: 4.3.0

  electron-to-chromium@1.5.179: {}

  embla-carousel-react@8.5.1(react@19.1.0):
    dependencies:
      embla-carousel: 8.5.1
      embla-carousel-reactive-utils: 8.5.1(embla-carousel@8.5.1)
      react: 19.1.0

  embla-carousel-reactive-utils@8.5.1(embla-carousel@8.5.1):
    dependencies:
      embla-carousel: 8.5.1

  embla-carousel@8.5.1: {}

  emoji-regex@8.0.0: {}

  emoji-regex@9.2.2: {}

  entities@6.0.1: {}

  es-abstract@1.24.0:
    dependencies:
      array-buffer-byte-length: 1.0.2
      arraybuffer.prototype.slice: 1.0.4
      available-typed-arrays: 1.0.7
      call-bind: 1.0.8
      call-bound: 1.0.4
      data-view-buffer: 1.0.2
      data-view-byte-length: 1.0.2
      data-view-byte-offset: 1.0.1
      es-define-property: 1.0.1
      es-errors: 1.3.0
      es-object-atoms: 1.1.1
      es-set-tostringtag: 2.1.0
      es-to-primitive: 1.3.0
      function.prototype.name: 1.1.8
      get-intrinsic: 1.3.0
      get-proto: 1.0.1
      get-symbol-description: 1.1.0
      globalthis: 1.0.4
      gopd: 1.2.0
      has-property-descriptors: 1.0.2
      has-proto: 1.2.0
      has-symbols: 1.1.0
      hasown: 2.0.2
      internal-slot: 1.1.0
      is-array-buffer: 3.0.5
      is-callable: 1.2.7
      is-data-view: 1.0.2
      is-negative-zero: 2.0.3
      is-regex: 1.2.1
      is-set: 2.0.3
      is-shared-array-buffer: 1.0.4
      is-string: 1.1.1
      is-typed-array: 1.1.15
      is-weakref: 1.1.1
      math-intrinsics: 1.1.0
      object-inspect: 1.13.4
      object-keys: 1.1.1
      object.assign: 4.1.7
      own-keys: 1.0.1
      regexp.prototype.flags: 1.5.4
      safe-array-concat: 1.1.3
      safe-push-apply: 1.0.0
      safe-regex-test: 1.1.0
      set-proto: 1.0.0
      stop-iteration-iterator: 1.1.0
      string.prototype.trim: 1.2.10
      string.prototype.trimend: 1.0.9
      string.prototype.trimstart: 1.0.8
      typed-array-buffer: 1.0.3
      typed-array-byte-length: 1.0.3
      typed-array-byte-offset: 1.0.4
      typed-array-length: 1.0.7
      unbox-primitive: 1.1.0
      which-typed-array: 1.1.19

  es-define-property@1.0.1: {}

  es-errors@1.3.0: {}

  es-iterator-helpers@1.2.1:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.4
      define-properties: 1.2.1
      es-abstract: 1.24.0
      es-errors: 1.3.0
      es-set-tostringtag: 2.1.0
      function-bind: 1.1.2
      get-intrinsic: 1.3.0
      globalthis: 1.0.4
      gopd: 1.2.0
      has-property-descriptors: 1.0.2
      has-proto: 1.2.0
      has-symbols: 1.1.0
      internal-slot: 1.1.0
      iterator.prototype: 1.1.5
      safe-array-concat: 1.1.3

  es-module-lexer@1.7.0: {}

  es-object-atoms@1.1.1:
    dependencies:
      es-errors: 1.3.0

  es-set-tostringtag@2.1.0:
    dependencies:
      es-errors: 1.3.0
      get-intrinsic: 1.3.0
      has-tostringtag: 1.0.2
      hasown: 2.0.2

  es-shim-unscopables@1.1.0:
    dependencies:
      hasown: 2.0.2

  es-to-primitive@1.3.0:
    dependencies:
      is-callable: 1.2.7
      is-date-object: 1.1.0
      is-symbol: 1.1.1

  esbuild@0.25.5:
    optionalDependencies:
      '@esbuild/aix-ppc64': 0.25.5
      '@esbuild/android-arm': 0.25.5
      '@esbuild/android-arm64': 0.25.5
      '@esbuild/android-x64': 0.25.5
      '@esbuild/darwin-arm64': 0.25.5
      '@esbuild/darwin-x64': 0.25.5
      '@esbuild/freebsd-arm64': 0.25.5
      '@esbuild/freebsd-x64': 0.25.5
      '@esbuild/linux-arm': 0.25.5
      '@esbuild/linux-arm64': 0.25.5
      '@esbuild/linux-ia32': 0.25.5
      '@esbuild/linux-loong64': 0.25.5
      '@esbuild/linux-mips64el': 0.25.5
      '@esbuild/linux-ppc64': 0.25.5
      '@esbuild/linux-riscv64': 0.25.5
      '@esbuild/linux-s390x': 0.25.5
      '@esbuild/linux-x64': 0.25.5
      '@esbuild/netbsd-arm64': 0.25.5
      '@esbuild/netbsd-x64': 0.25.5
      '@esbuild/openbsd-arm64': 0.25.5
      '@esbuild/openbsd-x64': 0.25.5
      '@esbuild/sunos-x64': 0.25.5
      '@esbuild/win32-arm64': 0.25.5
      '@esbuild/win32-ia32': 0.25.5
      '@esbuild/win32-x64': 0.25.5

  escalade@3.2.0: {}

  escape-string-regexp@4.0.0: {}

  eslint-config-next@15.3.4(eslint@9.30.1(jiti@1.21.7))(typescript@5.8.3):
    dependencies:
      '@next/eslint-plugin-next': 15.3.4
      '@rushstack/eslint-patch': 1.12.0
      '@typescript-eslint/eslint-plugin': 8.35.1(@typescript-eslint/parser@8.35.1(eslint@9.30.1(jiti@1.21.7))(typescript@5.8.3))(eslint@9.30.1(jiti@1.21.7))(typescript@5.8.3)
      '@typescript-eslint/parser': 8.35.1(eslint@9.30.1(jiti@1.21.7))(typescript@5.8.3)
      eslint: 9.30.1(jiti@1.21.7)
      eslint-import-resolver-node: 0.3.9
      eslint-import-resolver-typescript: 3.10.1(eslint-plugin-import@2.32.0)(eslint@9.30.1(jiti@1.21.7))
      eslint-plugin-import: 2.32.0(@typescript-eslint/parser@8.35.1(eslint@9.30.1(jiti@1.21.7))(typescript@5.8.3))(eslint-import-resolver-typescript@3.10.1)(eslint@9.30.1(jiti@1.21.7))
      eslint-plugin-jsx-a11y: 6.10.2(eslint@9.30.1(jiti@1.21.7))
      eslint-plugin-react: 7.37.5(eslint@9.30.1(jiti@1.21.7))
      eslint-plugin-react-hooks: 5.2.0(eslint@9.30.1(jiti@1.21.7))
    optionalDependencies:
      typescript: 5.8.3
    transitivePeerDependencies:
      - eslint-import-resolver-webpack
      - eslint-plugin-import-x
      - supports-color

  eslint-import-resolver-node@0.3.9:
    dependencies:
      debug: 3.2.7
      is-core-module: 2.16.1
      resolve: 1.22.10
    transitivePeerDependencies:
      - supports-color

  eslint-import-resolver-typescript@3.10.1(eslint-plugin-import@2.32.0)(eslint@9.30.1(jiti@1.21.7)):
    dependencies:
      '@nolyfill/is-core-module': 1.0.39
      debug: 4.4.1
      eslint: 9.30.1(jiti@1.21.7)
      get-tsconfig: 4.10.1
      is-bun-module: 2.0.0
      stable-hash: 0.0.5
      tinyglobby: 0.2.14
      unrs-resolver: 1.10.1
    optionalDependencies:
      eslint-plugin-import: 2.32.0(@typescript-eslint/parser@8.35.1(eslint@9.30.1(jiti@1.21.7))(typescript@5.8.3))(eslint-import-resolver-typescript@3.10.1)(eslint@9.30.1(jiti@1.21.7))
    transitivePeerDependencies:
      - supports-color

  eslint-module-utils@2.12.1(@typescript-eslint/parser@8.35.1(eslint@9.30.1(jiti@1.21.7))(typescript@5.8.3))(eslint-import-resolver-node@0.3.9)(eslint-import-resolver-typescript@3.10.1)(eslint@9.30.1(jiti@1.21.7)):
    dependencies:
      debug: 3.2.7
    optionalDependencies:
      '@typescript-eslint/parser': 8.35.1(eslint@9.30.1(jiti@1.21.7))(typescript@5.8.3)
      eslint: 9.30.1(jiti@1.21.7)
      eslint-import-resolver-node: 0.3.9
      eslint-import-resolver-typescript: 3.10.1(eslint-plugin-import@2.32.0)(eslint@9.30.1(jiti@1.21.7))
    transitivePeerDependencies:
      - supports-color

  eslint-plugin-import@2.32.0(@typescript-eslint/parser@8.35.1(eslint@9.30.1(jiti@1.21.7))(typescript@5.8.3))(eslint-import-resolver-typescript@3.10.1)(eslint@9.30.1(jiti@1.21.7)):
    dependencies:
      '@rtsao/scc': 1.1.0
      array-includes: 3.1.9
      array.prototype.findlastindex: 1.2.6
      array.prototype.flat: 1.3.3
      array.prototype.flatmap: 1.3.3
      debug: 3.2.7
      doctrine: 2.1.0
      eslint: 9.30.1(jiti@1.21.7)
      eslint-import-resolver-node: 0.3.9
      eslint-module-utils: 2.12.1(@typescript-eslint/parser@8.35.1(eslint@9.30.1(jiti@1.21.7))(typescript@5.8.3))(eslint-import-resolver-node@0.3.9)(eslint-import-resolver-typescript@3.10.1)(eslint@9.30.1(jiti@1.21.7))
      hasown: 2.0.2
      is-core-module: 2.16.1
      is-glob: 4.0.3
      minimatch: 3.1.2
      object.fromentries: 2.0.8
      object.groupby: 1.0.3
      object.values: 1.2.1
      semver: 6.3.1
      string.prototype.trimend: 1.0.9
      tsconfig-paths: 3.15.0
    optionalDependencies:
      '@typescript-eslint/parser': 8.35.1(eslint@9.30.1(jiti@1.21.7))(typescript@5.8.3)
    transitivePeerDependencies:
      - eslint-import-resolver-typescript
      - eslint-import-resolver-webpack
      - supports-color

  eslint-plugin-jsx-a11y@6.10.2(eslint@9.30.1(jiti@1.21.7)):
    dependencies:
      aria-query: 5.3.2
      array-includes: 3.1.9
      array.prototype.flatmap: 1.3.3
      ast-types-flow: 0.0.8
      axe-core: 4.10.3
      axobject-query: 4.1.0
      damerau-levenshtein: 1.0.8
      emoji-regex: 9.2.2
      eslint: 9.30.1(jiti@1.21.7)
      hasown: 2.0.2
      jsx-ast-utils: 3.3.5
      language-tags: 1.0.9
      minimatch: 3.1.2
      object.fromentries: 2.0.8
      safe-regex-test: 1.1.0
      string.prototype.includes: 2.0.1

  eslint-plugin-react-hooks@5.2.0(eslint@9.30.1(jiti@1.21.7)):
    dependencies:
      eslint: 9.30.1(jiti@1.21.7)

  eslint-plugin-react@7.37.5(eslint@9.30.1(jiti@1.21.7)):
    dependencies:
      array-includes: 3.1.9
      array.prototype.findlast: 1.2.5
      array.prototype.flatmap: 1.3.3
      array.prototype.tosorted: 1.1.4
      doctrine: 2.1.0
      es-iterator-helpers: 1.2.1
      eslint: 9.30.1(jiti@1.21.7)
      estraverse: 5.3.0
      hasown: 2.0.2
      jsx-ast-utils: 3.3.5
      minimatch: 3.1.2
      object.entries: 1.1.9
      object.fromentries: 2.0.8
      object.values: 1.2.1
      prop-types: 15.8.1
      resolve: 2.0.0-next.5
      semver: 6.3.1
      string.prototype.matchall: 4.0.12
      string.prototype.repeat: 1.0.0

  eslint-scope@8.4.0:
    dependencies:
      esrecurse: 4.3.0
      estraverse: 5.3.0

  eslint-visitor-keys@3.4.3: {}

  eslint-visitor-keys@4.2.1: {}

  eslint@9.30.1(jiti@1.21.7):
    dependencies:
      '@eslint-community/eslint-utils': 4.7.0(eslint@9.30.1(jiti@1.21.7))
      '@eslint-community/regexpp': 4.12.1
      '@eslint/config-array': 0.21.0
      '@eslint/config-helpers': 0.3.0
      '@eslint/core': 0.14.0
      '@eslint/eslintrc': 3.3.1
      '@eslint/js': 9.30.1
      '@eslint/plugin-kit': 0.3.3
      '@humanfs/node': 0.16.6
      '@humanwhocodes/module-importer': 1.0.1
      '@humanwhocodes/retry': 0.4.3
      '@types/estree': 1.0.8
      '@types/json-schema': 7.0.15
      ajv: 6.12.6
      chalk: 4.1.2
      cross-spawn: 7.0.6
      debug: 4.4.1
      escape-string-regexp: 4.0.0
      eslint-scope: 8.4.0
      eslint-visitor-keys: 4.2.1
      espree: 10.4.0
      esquery: 1.6.0
      esutils: 2.0.3
      fast-deep-equal: 3.1.3
      file-entry-cache: 8.0.0
      find-up: 5.0.0
      glob-parent: 6.0.2
      ignore: 5.3.2
      imurmurhash: 0.1.4
      is-glob: 4.0.3
      json-stable-stringify-without-jsonify: 1.0.1
      lodash.merge: 4.6.2
      minimatch: 3.1.2
      natural-compare: 1.4.0
      optionator: 0.9.4
    optionalDependencies:
      jiti: 1.21.7
    transitivePeerDependencies:
      - supports-color

  espree@10.4.0:
    dependencies:
      acorn: 8.15.0
      acorn-jsx: 5.3.2(acorn@8.15.0)
      eslint-visitor-keys: 4.2.1

  esquery@1.6.0:
    dependencies:
      estraverse: 5.3.0

  esrecurse@4.3.0:
    dependencies:
      estraverse: 5.3.0

  estraverse@5.3.0: {}

  estree-walker@3.0.3:
    dependencies:
      '@types/estree': 1.0.8

  esutils@2.0.3: {}

  eventemitter3@4.0.7: {}

  expect-type@1.2.1: {}

  fast-deep-equal@3.1.3: {}

  fast-equals@5.2.2: {}

  fast-glob@3.3.1:
    dependencies:
      '@nodelib/fs.stat': 2.0.5
      '@nodelib/fs.walk': 1.2.8
      glob-parent: 5.1.2
      merge2: 1.4.1
      micromatch: 4.0.8

  fast-glob@3.3.3:
    dependencies:
      '@nodelib/fs.stat': 2.0.5
      '@nodelib/fs.walk': 1.2.8
      glob-parent: 5.1.2
      merge2: 1.4.1
      micromatch: 4.0.8

  fast-json-stable-stringify@2.1.0: {}

  fast-levenshtein@2.0.6: {}

  fastq@1.19.1:
    dependencies:
      reusify: 1.1.0

  fdir@6.4.6(picomatch@4.0.2):
    optionalDependencies:
      picomatch: 4.0.2

  fflate@0.8.2: {}

  file-entry-cache@8.0.0:
    dependencies:
      flat-cache: 4.0.1

  fill-range@7.1.1:
    dependencies:
      to-regex-range: 5.0.1

  find-up@5.0.0:
    dependencies:
      locate-path: 6.0.0
      path-exists: 4.0.0

  flat-cache@4.0.1:
    dependencies:
      flatted: 3.3.3
      keyv: 4.5.4

  flatted@3.3.3: {}

  follow-redirects@1.15.9: {}

  for-each@0.3.5:
    dependencies:
      is-callable: 1.2.7

  foreground-child@3.3.1:
    dependencies:
      cross-spawn: 7.0.6
      signal-exit: 4.1.0

  form-data@4.0.3:
    dependencies:
      asynckit: 0.4.0
      combined-stream: 1.0.8
      es-set-tostringtag: 2.1.0
      hasown: 2.0.2
      mime-types: 2.1.35

  fraction.js@4.3.7: {}

  fsevents@2.3.2:
    optional: true

  fsevents@2.3.3:
    optional: true

  function-bind@1.1.2: {}

  function.prototype.name@1.1.8:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.4
      define-properties: 1.2.1
      functions-have-names: 1.2.3
      hasown: 2.0.2
      is-callable: 1.2.7

  functions-have-names@1.2.3: {}

  gensync@1.0.0-beta.2: {}

  get-intrinsic@1.3.0:
    dependencies:
      call-bind-apply-helpers: 1.0.2
      es-define-property: 1.0.1
      es-errors: 1.3.0
      es-object-atoms: 1.1.1
      function-bind: 1.1.2
      get-proto: 1.0.1
      gopd: 1.2.0
      has-symbols: 1.1.0
      hasown: 2.0.2
      math-intrinsics: 1.1.0

  get-nonce@1.0.1: {}

  get-proto@1.0.1:
    dependencies:
      dunder-proto: 1.0.1
      es-object-atoms: 1.1.1

  get-symbol-description@1.1.0:
    dependencies:
      call-bound: 1.0.4
      es-errors: 1.3.0
      get-intrinsic: 1.3.0

  get-tsconfig@4.10.1:
    dependencies:
      resolve-pkg-maps: 1.0.0

  glob-parent@5.1.2:
    dependencies:
      is-glob: 4.0.3

  glob-parent@6.0.2:
    dependencies:
      is-glob: 4.0.3

  glob@10.4.5:
    dependencies:
      foreground-child: 3.3.1
      jackspeak: 3.4.3
      minimatch: 9.0.5
      minipass: 7.1.2
      package-json-from-dist: 1.0.1
      path-scurry: 1.11.1

  globals@14.0.0: {}

  globalthis@1.0.4:
    dependencies:
      define-properties: 1.2.1
      gopd: 1.2.0

  gopd@1.2.0: {}

  graphemer@1.4.0: {}

  has-bigints@1.1.0: {}

  has-flag@4.0.0: {}

  has-property-descriptors@1.0.2:
    dependencies:
      es-define-property: 1.0.1

  has-proto@1.2.0:
    dependencies:
      dunder-proto: 1.0.1

  has-symbols@1.1.0: {}

  has-tostringtag@1.0.2:
    dependencies:
      has-symbols: 1.1.0

  hasown@2.0.2:
    dependencies:
      function-bind: 1.1.2

  html-encoding-sniffer@4.0.0:
    dependencies:
      whatwg-encoding: 3.1.1

  http-proxy-agent@7.0.2:
    dependencies:
      agent-base: 7.1.3
      debug: 4.4.1
    transitivePeerDependencies:
      - supports-color

  https-proxy-agent@7.0.6:
    dependencies:
      agent-base: 7.1.3
      debug: 4.4.1
    transitivePeerDependencies:
      - supports-color

  iconv-lite@0.6.3:
    dependencies:
      safer-buffer: 2.1.2

  ignore@5.3.2: {}

  ignore@7.0.5: {}

  import-fresh@3.3.1:
    dependencies:
      parent-module: 1.0.1
      resolve-from: 4.0.0

  imurmurhash@0.1.4: {}

  indent-string@4.0.0: {}

  input-otp@1.4.1(react-dom@19.1.0(react@19.1.0))(react@19.1.0):
    dependencies:
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)

  internal-slot@1.1.0:
    dependencies:
      es-errors: 1.3.0
      hasown: 2.0.2
      side-channel: 1.1.0

  internmap@2.0.3: {}

  is-array-buffer@3.0.5:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.4
      get-intrinsic: 1.3.0

  is-arrayish@0.3.2:
    optional: true

  is-async-function@2.1.1:
    dependencies:
      async-function: 1.0.0
      call-bound: 1.0.4
      get-proto: 1.0.1
      has-tostringtag: 1.0.2
      safe-regex-test: 1.1.0

  is-bigint@1.1.0:
    dependencies:
      has-bigints: 1.1.0

  is-binary-path@2.1.0:
    dependencies:
      binary-extensions: 2.3.0

  is-boolean-object@1.2.2:
    dependencies:
      call-bound: 1.0.4
      has-tostringtag: 1.0.2

  is-bun-module@2.0.0:
    dependencies:
      semver: 7.7.2

  is-callable@1.2.7: {}

  is-core-module@2.16.1:
    dependencies:
      hasown: 2.0.2

  is-data-view@1.0.2:
    dependencies:
      call-bound: 1.0.4
      get-intrinsic: 1.3.0
      is-typed-array: 1.1.15

  is-date-object@1.1.0:
    dependencies:
      call-bound: 1.0.4
      has-tostringtag: 1.0.2

  is-extglob@2.1.1: {}

  is-finalizationregistry@1.1.1:
    dependencies:
      call-bound: 1.0.4

  is-fullwidth-code-point@3.0.0: {}

  is-generator-function@1.1.0:
    dependencies:
      call-bound: 1.0.4
      get-proto: 1.0.1
      has-tostringtag: 1.0.2
      safe-regex-test: 1.1.0

  is-glob@4.0.3:
    dependencies:
      is-extglob: 2.1.1

  is-map@2.0.3: {}

  is-negative-zero@2.0.3: {}

  is-number-object@1.1.1:
    dependencies:
      call-bound: 1.0.4
      has-tostringtag: 1.0.2

  is-number@7.0.0: {}

  is-potential-custom-element-name@1.0.1: {}

  is-regex@1.2.1:
    dependencies:
      call-bound: 1.0.4
      gopd: 1.2.0
      has-tostringtag: 1.0.2
      hasown: 2.0.2

  is-set@2.0.3: {}

  is-shared-array-buffer@1.0.4:
    dependencies:
      call-bound: 1.0.4

  is-string@1.1.1:
    dependencies:
      call-bound: 1.0.4
      has-tostringtag: 1.0.2

  is-symbol@1.1.1:
    dependencies:
      call-bound: 1.0.4
      has-symbols: 1.1.0
      safe-regex-test: 1.1.0

  is-typed-array@1.1.15:
    dependencies:
      which-typed-array: 1.1.19

  is-weakmap@2.0.2: {}

  is-weakref@1.1.1:
    dependencies:
      call-bound: 1.0.4

  is-weakset@2.0.4:
    dependencies:
      call-bound: 1.0.4
      get-intrinsic: 1.3.0

  isarray@2.0.5: {}

  isexe@2.0.0: {}

  iterator.prototype@1.1.5:
    dependencies:
      define-data-property: 1.1.4
      es-object-atoms: 1.1.1
      get-intrinsic: 1.3.0
      get-proto: 1.0.1
      has-symbols: 1.1.0
      set-function-name: 2.0.2

  jackspeak@3.4.3:
    dependencies:
      '@isaacs/cliui': 8.0.2
    optionalDependencies:
      '@pkgjs/parseargs': 0.11.0

  jiti@1.21.7: {}

  js-tokens@4.0.0: {}

  js-tokens@9.0.1: {}

  js-yaml@4.1.0:
    dependencies:
      argparse: 2.0.1

  jsdom@26.1.0:
    dependencies:
      cssstyle: 4.6.0
      data-urls: 5.0.0
      decimal.js: 10.5.0
      html-encoding-sniffer: 4.0.0
      http-proxy-agent: 7.0.2
      https-proxy-agent: 7.0.6
      is-potential-custom-element-name: 1.0.1
      nwsapi: 2.2.20
      parse5: 7.3.0
      rrweb-cssom: 0.8.0
      saxes: 6.0.0
      symbol-tree: 3.2.4
      tough-cookie: 5.1.2
      w3c-xmlserializer: 5.0.0
      webidl-conversions: 7.0.0
      whatwg-encoding: 3.1.1
      whatwg-mimetype: 4.0.0
      whatwg-url: 14.2.0
      ws: 8.18.3
      xml-name-validator: 5.0.0
    transitivePeerDependencies:
      - bufferutil
      - supports-color
      - utf-8-validate

  jsesc@3.1.0: {}

  json-buffer@3.0.1: {}

  json-schema-traverse@0.4.1: {}

  json-stable-stringify-without-jsonify@1.0.1: {}

  json5@1.0.2:
    dependencies:
      minimist: 1.2.8

  json5@2.2.3: {}

  jsx-ast-utils@3.3.5:
    dependencies:
      array-includes: 3.1.9
      array.prototype.flat: 1.3.3
      object.assign: 4.1.7
      object.values: 1.2.1

  keyv@4.5.4:
    dependencies:
      json-buffer: 3.0.1

  language-subtag-registry@0.3.23: {}

  language-tags@1.0.9:
    dependencies:
      language-subtag-registry: 0.3.23

  levn@0.4.1:
    dependencies:
      prelude-ls: 1.2.1
      type-check: 0.4.0

  lilconfig@3.1.3: {}

  lines-and-columns@1.2.4: {}

  locate-path@6.0.0:
    dependencies:
      p-locate: 5.0.0

  lodash.merge@4.6.2: {}

  lodash@4.17.21: {}

  loose-envify@1.4.0:
    dependencies:
      js-tokens: 4.0.0

  loupe@3.1.4: {}

  lru-cache@10.4.3: {}

  lru-cache@5.1.1:
    dependencies:
      yallist: 3.1.1

  lucide-react@0.454.0(react@19.1.0):
    dependencies:
      react: 19.1.0

  lz-string@1.5.0: {}

  magic-string@0.30.17:
    dependencies:
      '@jridgewell/sourcemap-codec': 1.5.4

  marked@4.3.0: {}

  math-intrinsics@1.1.0: {}

  merge2@1.4.1: {}

  micromatch@4.0.8:
    dependencies:
      braces: 3.0.3
      picomatch: 2.3.1

  mime-db@1.52.0: {}

  mime-types@2.1.35:
    dependencies:
      mime-db: 1.52.0

  min-indent@1.0.1: {}

  minimatch@3.1.2:
    dependencies:
      brace-expansion: 1.1.12

  minimatch@9.0.5:
    dependencies:
      brace-expansion: 2.0.2

  minimist@1.2.8: {}

  minipass@7.1.2: {}

  mrmime@2.0.1: {}

  ms@2.1.3: {}

  mz@2.7.0:
    dependencies:
      any-promise: 1.3.0
      object-assign: 4.1.1
      thenify-all: 1.6.0

  nanoid@3.3.11: {}

  napi-postinstall@0.3.0: {}

  natural-compare@1.4.0: {}

  next-themes@0.4.6(react-dom@19.1.0(react@19.1.0))(react@19.1.0):
    dependencies:
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)

  next@15.2.4(@babel/core@7.28.0)(@playwright/test@1.53.2)(react-dom@19.1.0(react@19.1.0))(react@19.1.0):
    dependencies:
      '@next/env': 15.2.4
      '@swc/counter': 0.1.3
      '@swc/helpers': 0.5.15
      busboy: 1.6.0
      caniuse-lite: 1.0.30001726
      postcss: 8.4.31
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
      styled-jsx: 5.1.6(@babel/core@7.28.0)(react@19.1.0)
    optionalDependencies:
      '@next/swc-darwin-arm64': 15.2.4
      '@next/swc-darwin-x64': 15.2.4
      '@next/swc-linux-arm64-gnu': 15.2.4
      '@next/swc-linux-arm64-musl': 15.2.4
      '@next/swc-linux-x64-gnu': 15.2.4
      '@next/swc-linux-x64-musl': 15.2.4
      '@next/swc-win32-arm64-msvc': 15.2.4
      '@next/swc-win32-x64-msvc': 15.2.4
      '@playwright/test': 1.53.2
      sharp: 0.33.5
    transitivePeerDependencies:
      - '@babel/core'
      - babel-plugin-macros

  node-releases@2.0.19: {}

  normalize-path@3.0.0: {}

  normalize-range@0.1.2: {}

  nwsapi@2.2.20: {}

  object-assign@4.1.1: {}

  object-hash@3.0.0: {}

  object-inspect@1.13.4: {}

  object-keys@1.1.1: {}

  object.assign@4.1.7:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.4
      define-properties: 1.2.1
      es-object-atoms: 1.1.1
      has-symbols: 1.1.0
      object-keys: 1.1.1

  object.entries@1.1.9:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.4
      define-properties: 1.2.1
      es-object-atoms: 1.1.1

  object.fromentries@2.0.8:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-abstract: 1.24.0
      es-object-atoms: 1.1.1

  object.groupby@1.0.3:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-abstract: 1.24.0

  object.values@1.2.1:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.4
      define-properties: 1.2.1
      es-object-atoms: 1.1.1

  optionator@0.9.4:
    dependencies:
      deep-is: 0.1.4
      fast-levenshtein: 2.0.6
      levn: 0.4.1
      prelude-ls: 1.2.1
      type-check: 0.4.0
      word-wrap: 1.2.5

  own-keys@1.0.1:
    dependencies:
      get-intrinsic: 1.3.0
      object-keys: 1.1.1
      safe-push-apply: 1.0.0

  p-limit@3.1.0:
    dependencies:
      yocto-queue: 0.1.0

  p-locate@5.0.0:
    dependencies:
      p-limit: 3.1.0

  package-json-from-dist@1.0.1: {}

  parent-module@1.0.1:
    dependencies:
      callsites: 3.1.0

  parse5@7.3.0:
    dependencies:
      entities: 6.0.1

  path-exists@4.0.0: {}

  path-key@3.1.1: {}

  path-parse@1.0.7: {}

  path-scurry@1.11.1:
    dependencies:
      lru-cache: 10.4.3
      minipass: 7.1.2

  pathe@2.0.3: {}

  pathval@2.0.1: {}

  picocolors@1.1.1: {}

  picomatch@2.3.1: {}

  picomatch@4.0.2: {}

  pify@2.3.0: {}

  pirates@4.0.7: {}

  playwright-core@1.53.2: {}

  playwright@1.53.2:
    dependencies:
      playwright-core: 1.53.2
    optionalDependencies:
      fsevents: 2.3.2

  possible-typed-array-names@1.1.0: {}

  postcss-import@15.1.0(postcss@8.5.6):
    dependencies:
      postcss: 8.5.6
      postcss-value-parser: 4.2.0
      read-cache: 1.0.0
      resolve: 1.22.10

  postcss-js@4.0.1(postcss@8.5.6):
    dependencies:
      camelcase-css: 2.0.1
      postcss: 8.5.6

  postcss-load-config@4.0.2(postcss@8.5.6):
    dependencies:
      lilconfig: 3.1.3
      yaml: 2.8.0
    optionalDependencies:
      postcss: 8.5.6

  postcss-nested@6.2.0(postcss@8.5.6):
    dependencies:
      postcss: 8.5.6
      postcss-selector-parser: 6.1.2

  postcss-selector-parser@6.1.2:
    dependencies:
      cssesc: 3.0.0
      util-deprecate: 1.0.2

  postcss-value-parser@4.2.0: {}

  postcss@8.4.31:
    dependencies:
      nanoid: 3.3.11
      picocolors: 1.1.1
      source-map-js: 1.2.1

  postcss@8.5.6:
    dependencies:
      nanoid: 3.3.11
      picocolors: 1.1.1
      source-map-js: 1.2.1

  prelude-ls@1.2.1: {}

  pretty-format@27.5.1:
    dependencies:
      ansi-regex: 5.0.1
      ansi-styles: 5.2.0
      react-is: 17.0.2

  prop-types@15.8.1:
    dependencies:
      loose-envify: 1.4.0
      object-assign: 4.1.1
      react-is: 16.13.1

  proxy-from-env@1.1.0: {}

  punycode@2.3.1: {}

  queue-microtask@1.2.3: {}

  react-day-picker@8.10.1(date-fns@4.1.0)(react@19.1.0):
    dependencies:
      date-fns: 4.1.0
      react: 19.1.0

  react-dom@19.1.0(react@19.1.0):
    dependencies:
      react: 19.1.0
      scheduler: 0.26.0

  react-hook-form@7.59.0(react@19.1.0):
    dependencies:
      react: 19.1.0

  react-is@16.13.1: {}

  react-is@17.0.2: {}

  react-is@18.3.1: {}

  react-refresh@0.17.0: {}

  react-remove-scroll-bar@2.3.8(@types/react@19.1.8)(react@19.1.0):
    dependencies:
      react: 19.1.0
      react-style-singleton: 2.2.3(@types/react@19.1.8)(react@19.1.0)
      tslib: 2.8.1
    optionalDependencies:
      '@types/react': 19.1.8

  react-remove-scroll@2.7.1(@types/react@19.1.8)(react@19.1.0):
    dependencies:
      react: 19.1.0
      react-remove-scroll-bar: 2.3.8(@types/react@19.1.8)(react@19.1.0)
      react-style-singleton: 2.2.3(@types/react@19.1.8)(react@19.1.0)
      tslib: 2.8.1
      use-callback-ref: 1.3.3(@types/react@19.1.8)(react@19.1.0)
      use-sidecar: 1.1.3(@types/react@19.1.8)(react@19.1.0)
    optionalDependencies:
      '@types/react': 19.1.8

  react-resizable-panels@2.1.9(react-dom@19.1.0(react@19.1.0))(react@19.1.0):
    dependencies:
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)

  react-simplemde-editor@5.2.0(easymde@2.20.0)(react-dom@19.1.0(react@19.1.0))(react@19.1.0):
    dependencies:
      '@types/codemirror': 5.60.16
      easymde: 2.20.0
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)

  react-smooth@4.0.4(react-dom@19.1.0(react@19.1.0))(react@19.1.0):
    dependencies:
      fast-equals: 5.2.2
      prop-types: 15.8.1
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
      react-transition-group: 4.4.5(react-dom@19.1.0(react@19.1.0))(react@19.1.0)

  react-style-singleton@2.2.3(@types/react@19.1.8)(react@19.1.0):
    dependencies:
      get-nonce: 1.0.1
      react: 19.1.0
      tslib: 2.8.1
    optionalDependencies:
      '@types/react': 19.1.8

  react-transition-group@4.4.5(react-dom@19.1.0(react@19.1.0))(react@19.1.0):
    dependencies:
      '@babel/runtime': 7.27.6
      dom-helpers: 5.2.1
      loose-envify: 1.4.0
      prop-types: 15.8.1
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)

  react@19.1.0: {}

  read-cache@1.0.0:
    dependencies:
      pify: 2.3.0

  readdirp@3.6.0:
    dependencies:
      picomatch: 2.3.1

  recharts-scale@0.4.5:
    dependencies:
      decimal.js-light: 2.5.1

  recharts@2.15.0(react-dom@19.1.0(react@19.1.0))(react@19.1.0):
    dependencies:
      clsx: 2.1.1
      eventemitter3: 4.0.7
      lodash: 4.17.21
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
      react-is: 18.3.1
      react-smooth: 4.0.4(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      recharts-scale: 0.4.5
      tiny-invariant: 1.3.3
      victory-vendor: 36.9.2

  redent@3.0.0:
    dependencies:
      indent-string: 4.0.0
      strip-indent: 3.0.0

  reflect.getprototypeof@1.0.10:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-abstract: 1.24.0
      es-errors: 1.3.0
      es-object-atoms: 1.1.1
      get-intrinsic: 1.3.0
      get-proto: 1.0.1
      which-builtin-type: 1.2.1

  regexp.prototype.flags@1.5.4:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-errors: 1.3.0
      get-proto: 1.0.1
      gopd: 1.2.0
      set-function-name: 2.0.2

  resolve-from@4.0.0: {}

  resolve-pkg-maps@1.0.0: {}

  resolve@1.22.10:
    dependencies:
      is-core-module: 2.16.1
      path-parse: 1.0.7
      supports-preserve-symlinks-flag: 1.0.0

  resolve@2.0.0-next.5:
    dependencies:
      is-core-module: 2.16.1
      path-parse: 1.0.7
      supports-preserve-symlinks-flag: 1.0.0

  reusify@1.1.0: {}

  rollup@4.44.1:
    dependencies:
      '@types/estree': 1.0.8
    optionalDependencies:
      '@rollup/rollup-android-arm-eabi': 4.44.1
      '@rollup/rollup-android-arm64': 4.44.1
      '@rollup/rollup-darwin-arm64': 4.44.1
      '@rollup/rollup-darwin-x64': 4.44.1
      '@rollup/rollup-freebsd-arm64': 4.44.1
      '@rollup/rollup-freebsd-x64': 4.44.1
      '@rollup/rollup-linux-arm-gnueabihf': 4.44.1
      '@rollup/rollup-linux-arm-musleabihf': 4.44.1
      '@rollup/rollup-linux-arm64-gnu': 4.44.1
      '@rollup/rollup-linux-arm64-musl': 4.44.1
      '@rollup/rollup-linux-loongarch64-gnu': 4.44.1
      '@rollup/rollup-linux-powerpc64le-gnu': 4.44.1
      '@rollup/rollup-linux-riscv64-gnu': 4.44.1
      '@rollup/rollup-linux-riscv64-musl': 4.44.1
      '@rollup/rollup-linux-s390x-gnu': 4.44.1
      '@rollup/rollup-linux-x64-gnu': 4.44.1
      '@rollup/rollup-linux-x64-musl': 4.44.1
      '@rollup/rollup-win32-arm64-msvc': 4.44.1
      '@rollup/rollup-win32-ia32-msvc': 4.44.1
      '@rollup/rollup-win32-x64-msvc': 4.44.1
      fsevents: 2.3.3

  rrweb-cssom@0.8.0: {}

  run-parallel@1.2.0:
    dependencies:
      queue-microtask: 1.2.3

  safe-array-concat@1.1.3:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.4
      get-intrinsic: 1.3.0
      has-symbols: 1.1.0
      isarray: 2.0.5

  safe-push-apply@1.0.0:
    dependencies:
      es-errors: 1.3.0
      isarray: 2.0.5

  safe-regex-test@1.1.0:
    dependencies:
      call-bound: 1.0.4
      es-errors: 1.3.0
      is-regex: 1.2.1

  safer-buffer@2.1.2: {}

  saxes@6.0.0:
    dependencies:
      xmlchars: 2.2.0

  scheduler@0.26.0: {}

  semver@6.3.1: {}

  semver@7.7.2: {}

  set-function-length@1.2.2:
    dependencies:
      define-data-property: 1.1.4
      es-errors: 1.3.0
      function-bind: 1.1.2
      get-intrinsic: 1.3.0
      gopd: 1.2.0
      has-property-descriptors: 1.0.2

  set-function-name@2.0.2:
    dependencies:
      define-data-property: 1.1.4
      es-errors: 1.3.0
      functions-have-names: 1.2.3
      has-property-descriptors: 1.0.2

  set-proto@1.0.0:
    dependencies:
      dunder-proto: 1.0.1
      es-errors: 1.3.0
      es-object-atoms: 1.1.1

  sharp@0.33.5:
    dependencies:
      color: 4.2.3
      detect-libc: 2.0.4
      semver: 7.7.2
    optionalDependencies:
      '@img/sharp-darwin-arm64': 0.33.5
      '@img/sharp-darwin-x64': 0.33.5
      '@img/sharp-libvips-darwin-arm64': 1.0.4
      '@img/sharp-libvips-darwin-x64': 1.0.4
      '@img/sharp-libvips-linux-arm': 1.0.5
      '@img/sharp-libvips-linux-arm64': 1.0.4
      '@img/sharp-libvips-linux-s390x': 1.0.4
      '@img/sharp-libvips-linux-x64': 1.0.4
      '@img/sharp-libvips-linuxmusl-arm64': 1.0.4
      '@img/sharp-libvips-linuxmusl-x64': 1.0.4
      '@img/sharp-linux-arm': 0.33.5
      '@img/sharp-linux-arm64': 0.33.5
      '@img/sharp-linux-s390x': 0.33.5
      '@img/sharp-linux-x64': 0.33.5
      '@img/sharp-linuxmusl-arm64': 0.33.5
      '@img/sharp-linuxmusl-x64': 0.33.5
      '@img/sharp-wasm32': 0.33.5
      '@img/sharp-win32-ia32': 0.33.5
      '@img/sharp-win32-x64': 0.33.5
    optional: true

  shebang-command@2.0.0:
    dependencies:
      shebang-regex: 3.0.0

  shebang-regex@3.0.0: {}

  side-channel-list@1.0.0:
    dependencies:
      es-errors: 1.3.0
      object-inspect: 1.13.4

  side-channel-map@1.0.1:
    dependencies:
      call-bound: 1.0.4
      es-errors: 1.3.0
      get-intrinsic: 1.3.0
      object-inspect: 1.13.4

  side-channel-weakmap@1.0.2:
    dependencies:
      call-bound: 1.0.4
      es-errors: 1.3.0
      get-intrinsic: 1.3.0
      object-inspect: 1.13.4
      side-channel-map: 1.0.1

  side-channel@1.1.0:
    dependencies:
      es-errors: 1.3.0
      object-inspect: 1.13.4
      side-channel-list: 1.0.0
      side-channel-map: 1.0.1
      side-channel-weakmap: 1.0.2

  siginfo@2.0.0: {}

  signal-exit@4.1.0: {}

  simple-swizzle@0.2.2:
    dependencies:
      is-arrayish: 0.3.2
    optional: true

  sirv@3.0.1:
    dependencies:
      '@polka/url': 1.0.0-next.29
      mrmime: 2.0.1
      totalist: 3.0.1

  sonner@1.7.4(react-dom@19.1.0(react@19.1.0))(react@19.1.0):
    dependencies:
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)

  source-map-js@1.2.1: {}

  stable-hash@0.0.5: {}

  stackback@0.0.2: {}

  std-env@3.9.0: {}

  stop-iteration-iterator@1.1.0:
    dependencies:
      es-errors: 1.3.0
      internal-slot: 1.1.0

  streamsearch@1.1.0: {}

  string-width@4.2.3:
    dependencies:
      emoji-regex: 8.0.0
      is-fullwidth-code-point: 3.0.0
      strip-ansi: 6.0.1

  string-width@5.1.2:
    dependencies:
      eastasianwidth: 0.2.0
      emoji-regex: 9.2.2
      strip-ansi: 7.1.0

  string.prototype.includes@2.0.1:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-abstract: 1.24.0

  string.prototype.matchall@4.0.12:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.4
      define-properties: 1.2.1
      es-abstract: 1.24.0
      es-errors: 1.3.0
      es-object-atoms: 1.1.1
      get-intrinsic: 1.3.0
      gopd: 1.2.0
      has-symbols: 1.1.0
      internal-slot: 1.1.0
      regexp.prototype.flags: 1.5.4
      set-function-name: 2.0.2
      side-channel: 1.1.0

  string.prototype.repeat@1.0.0:
    dependencies:
      define-properties: 1.2.1
      es-abstract: 1.24.0

  string.prototype.trim@1.2.10:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.4
      define-data-property: 1.1.4
      define-properties: 1.2.1
      es-abstract: 1.24.0
      es-object-atoms: 1.1.1
      has-property-descriptors: 1.0.2

  string.prototype.trimend@1.0.9:
    dependencies:
      call-bind: 1.0.8
      call-bound: 1.0.4
      define-properties: 1.2.1
      es-object-atoms: 1.1.1

  string.prototype.trimstart@1.0.8:
    dependencies:
      call-bind: 1.0.8
      define-properties: 1.2.1
      es-object-atoms: 1.1.1

  strip-ansi@6.0.1:
    dependencies:
      ansi-regex: 5.0.1

  strip-ansi@7.1.0:
    dependencies:
      ansi-regex: 6.1.0

  strip-bom@3.0.0: {}

  strip-indent@3.0.0:
    dependencies:
      min-indent: 1.0.1

  strip-json-comments@3.1.1: {}

  strip-literal@3.0.0:
    dependencies:
      js-tokens: 9.0.1

  styled-jsx@5.1.6(@babel/core@7.28.0)(react@19.1.0):
    dependencies:
      client-only: 0.0.1
      react: 19.1.0
    optionalDependencies:
      '@babel/core': 7.28.0

  sucrase@3.35.0:
    dependencies:
      '@jridgewell/gen-mapping': 0.3.12
      commander: 4.1.1
      glob: 10.4.5
      lines-and-columns: 1.2.4
      mz: 2.7.0
      pirates: 4.0.7
      ts-interface-checker: 0.1.13

  supports-color@7.2.0:
    dependencies:
      has-flag: 4.0.0

  supports-preserve-symlinks-flag@1.0.0: {}

  symbol-tree@3.2.4: {}

  tailwind-merge@2.6.0: {}

  tailwindcss-animate@1.0.7(tailwindcss@3.4.17):
    dependencies:
      tailwindcss: 3.4.17

  tailwindcss@3.4.17:
    dependencies:
      '@alloc/quick-lru': 5.2.0
      arg: 5.0.2
      chokidar: 3.6.0
      didyoumean: 1.2.2
      dlv: 1.1.3
      fast-glob: 3.3.3
      glob-parent: 6.0.2
      is-glob: 4.0.3
      jiti: 1.21.7
      lilconfig: 3.1.3
      micromatch: 4.0.8
      normalize-path: 3.0.0
      object-hash: 3.0.0
      picocolors: 1.1.1
      postcss: 8.5.6
      postcss-import: 15.1.0(postcss@8.5.6)
      postcss-js: 4.0.1(postcss@8.5.6)
      postcss-load-config: 4.0.2(postcss@8.5.6)
      postcss-nested: 6.2.0(postcss@8.5.6)
      postcss-selector-parser: 6.1.2
      resolve: 1.22.10
      sucrase: 3.35.0
    transitivePeerDependencies:
      - ts-node

  thenify-all@1.6.0:
    dependencies:
      thenify: 3.3.1

  thenify@3.3.1:
    dependencies:
      any-promise: 1.3.0

  tiny-invariant@1.3.3: {}

  tinybench@2.9.0: {}

  tinyexec@0.3.2: {}

  tinyglobby@0.2.14:
    dependencies:
      fdir: 6.4.6(picomatch@4.0.2)
      picomatch: 4.0.2

  tinypool@1.1.1: {}

  tinyrainbow@2.0.0: {}

  tinyspy@4.0.3: {}

  tldts-core@6.1.86: {}

  tldts@6.1.86:
    dependencies:
      tldts-core: 6.1.86

  to-regex-range@5.0.1:
    dependencies:
      is-number: 7.0.0

  totalist@3.0.1: {}

  tough-cookie@5.1.2:
    dependencies:
      tldts: 6.1.86

  tr46@5.1.1:
    dependencies:
      punycode: 2.3.1

  ts-api-utils@2.1.0(typescript@5.8.3):
    dependencies:
      typescript: 5.8.3

  ts-interface-checker@0.1.13: {}

  tsconfig-paths@3.15.0:
    dependencies:
      '@types/json5': 0.0.29
      json5: 1.0.2
      minimist: 1.2.8
      strip-bom: 3.0.0

  tslib@2.8.1: {}

  type-check@0.4.0:
    dependencies:
      prelude-ls: 1.2.1

  typed-array-buffer@1.0.3:
    dependencies:
      call-bound: 1.0.4
      es-errors: 1.3.0
      is-typed-array: 1.1.15

  typed-array-byte-length@1.0.3:
    dependencies:
      call-bind: 1.0.8
      for-each: 0.3.5
      gopd: 1.2.0
      has-proto: 1.2.0
      is-typed-array: 1.1.15

  typed-array-byte-offset@1.0.4:
    dependencies:
      available-typed-arrays: 1.0.7
      call-bind: 1.0.8
      for-each: 0.3.5
      gopd: 1.2.0
      has-proto: 1.2.0
      is-typed-array: 1.1.15
      reflect.getprototypeof: 1.0.10

  typed-array-length@1.0.7:
    dependencies:
      call-bind: 1.0.8
      for-each: 0.3.5
      gopd: 1.2.0
      is-typed-array: 1.1.15
      possible-typed-array-names: 1.1.0
      reflect.getprototypeof: 1.0.10

  typescript@5.8.3: {}

  typo-js@1.2.5: {}

  unbox-primitive@1.1.0:
    dependencies:
      call-bound: 1.0.4
      has-bigints: 1.1.0
      has-symbols: 1.1.0
      which-boxed-primitive: 1.1.1

  undici-types@6.21.0: {}

  unrs-resolver@1.10.1:
    dependencies:
      napi-postinstall: 0.3.0
    optionalDependencies:
      '@unrs/resolver-binding-android-arm-eabi': 1.10.1
      '@unrs/resolver-binding-android-arm64': 1.10.1
      '@unrs/resolver-binding-darwin-arm64': 1.10.1
      '@unrs/resolver-binding-darwin-x64': 1.10.1
      '@unrs/resolver-binding-freebsd-x64': 1.10.1
      '@unrs/resolver-binding-linux-arm-gnueabihf': 1.10.1
      '@unrs/resolver-binding-linux-arm-musleabihf': 1.10.1
      '@unrs/resolver-binding-linux-arm64-gnu': 1.10.1
      '@unrs/resolver-binding-linux-arm64-musl': 1.10.1
      '@unrs/resolver-binding-linux-ppc64-gnu': 1.10.1
      '@unrs/resolver-binding-linux-riscv64-gnu': 1.10.1
      '@unrs/resolver-binding-linux-riscv64-musl': 1.10.1
      '@unrs/resolver-binding-linux-s390x-gnu': 1.10.1
      '@unrs/resolver-binding-linux-x64-gnu': 1.10.1
      '@unrs/resolver-binding-linux-x64-musl': 1.10.1
      '@unrs/resolver-binding-wasm32-wasi': 1.10.1
      '@unrs/resolver-binding-win32-arm64-msvc': 1.10.1
      '@unrs/resolver-binding-win32-ia32-msvc': 1.10.1
      '@unrs/resolver-binding-win32-x64-msvc': 1.10.1

  update-browserslist-db@1.1.3(browserslist@4.25.1):
    dependencies:
      browserslist: 4.25.1
      escalade: 3.2.0
      picocolors: 1.1.1

  uri-js@4.4.1:
    dependencies:
      punycode: 2.3.1

  use-callback-ref@1.3.3(@types/react@19.1.8)(react@19.1.0):
    dependencies:
      react: 19.1.0
      tslib: 2.8.1
    optionalDependencies:
      '@types/react': 19.1.8

  use-sidecar@1.1.3(@types/react@19.1.8)(react@19.1.0):
    dependencies:
      detect-node-es: 1.1.0
      react: 19.1.0
      tslib: 2.8.1
    optionalDependencies:
      '@types/react': 19.1.8

  use-sync-external-store@1.5.0(react@19.1.0):
    dependencies:
      react: 19.1.0

  util-deprecate@1.0.2: {}

  vaul@0.9.9(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0):
    dependencies:
      '@radix-ui/react-dialog': 1.1.4(@types/react-dom@19.1.6(@types/react@19.1.8))(@types/react@19.1.8)(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
    transitivePeerDependencies:
      - '@types/react'
      - '@types/react-dom'

  victory-vendor@36.9.2:
    dependencies:
      '@types/d3-array': 3.2.1
      '@types/d3-ease': 3.0.2
      '@types/d3-interpolate': 3.0.4
      '@types/d3-scale': 4.0.9
      '@types/d3-shape': 3.1.7
      '@types/d3-time': 3.0.4
      '@types/d3-timer': 3.0.2
      d3-array: 3.2.4
      d3-ease: 3.0.1
      d3-interpolate: 3.0.1
      d3-scale: 4.0.2
      d3-shape: 3.2.0
      d3-time: 3.1.0
      d3-timer: 3.0.1

  vite-node@3.2.4(@types/node@22.16.0)(jiti@1.21.7)(yaml@2.8.0):
    dependencies:
      cac: 6.7.14
      debug: 4.4.1
      es-module-lexer: 1.7.0
      pathe: 2.0.3
      vite: 7.0.0(@types/node@22.16.0)(jiti@1.21.7)(yaml@2.8.0)
    transitivePeerDependencies:
      - '@types/node'
      - jiti
      - less
      - lightningcss
      - sass
      - sass-embedded
      - stylus
      - sugarss
      - supports-color
      - terser
      - tsx
      - yaml

  vite@7.0.0(@types/node@22.16.0)(jiti@1.21.7)(yaml@2.8.0):
    dependencies:
      esbuild: 0.25.5
      fdir: 6.4.6(picomatch@4.0.2)
      picomatch: 4.0.2
      postcss: 8.5.6
      rollup: 4.44.1
      tinyglobby: 0.2.14
    optionalDependencies:
      '@types/node': 22.16.0
      fsevents: 2.3.3
      jiti: 1.21.7
      yaml: 2.8.0

  vitest@3.2.4(@types/node@22.16.0)(@vitest/ui@3.2.4)(jiti@1.21.7)(jsdom@26.1.0)(yaml@2.8.0):
    dependencies:
      '@types/chai': 5.2.2
      '@vitest/expect': 3.2.4
      '@vitest/mocker': 3.2.4(vite@7.0.0(@types/node@22.16.0)(jiti@1.21.7)(yaml@2.8.0))
      '@vitest/pretty-format': 3.2.4
      '@vitest/runner': 3.2.4
      '@vitest/snapshot': 3.2.4
      '@vitest/spy': 3.2.4
      '@vitest/utils': 3.2.4
      chai: 5.2.0
      debug: 4.4.1
      expect-type: 1.2.1
      magic-string: 0.30.17
      pathe: 2.0.3
      picomatch: 4.0.2
      std-env: 3.9.0
      tinybench: 2.9.0
      tinyexec: 0.3.2
      tinyglobby: 0.2.14
      tinypool: 1.1.1
      tinyrainbow: 2.0.0
      vite: 7.0.0(@types/node@22.16.0)(jiti@1.21.7)(yaml@2.8.0)
      vite-node: 3.2.4(@types/node@22.16.0)(jiti@1.21.7)(yaml@2.8.0)
      why-is-node-running: 2.3.0
    optionalDependencies:
      '@types/node': 22.16.0
      '@vitest/ui': 3.2.4(vitest@3.2.4)
      jsdom: 26.1.0
    transitivePeerDependencies:
      - jiti
      - less
      - lightningcss
      - msw
      - sass
      - sass-embedded
      - stylus
      - sugarss
      - supports-color
      - terser
      - tsx
      - yaml

  w3c-xmlserializer@5.0.0:
    dependencies:
      xml-name-validator: 5.0.0

  webidl-conversions@7.0.0: {}

  whatwg-encoding@3.1.1:
    dependencies:
      iconv-lite: 0.6.3

  whatwg-mimetype@4.0.0: {}

  whatwg-url@14.2.0:
    dependencies:
      tr46: 5.1.1
      webidl-conversions: 7.0.0

  which-boxed-primitive@1.1.1:
    dependencies:
      is-bigint: 1.1.0
      is-boolean-object: 1.2.2
      is-number-object: 1.1.1
      is-string: 1.1.1
      is-symbol: 1.1.1

  which-builtin-type@1.2.1:
    dependencies:
      call-bound: 1.0.4
      function.prototype.name: 1.1.8
      has-tostringtag: 1.0.2
      is-async-function: 2.1.1
      is-date-object: 1.1.0
      is-finalizationregistry: 1.1.1
      is-generator-function: 1.1.0
      is-regex: 1.2.1
      is-weakref: 1.1.1
      isarray: 2.0.5
      which-boxed-primitive: 1.1.1
      which-collection: 1.0.2
      which-typed-array: 1.1.19

  which-collection@1.0.2:
    dependencies:
      is-map: 2.0.3
      is-set: 2.0.3
      is-weakmap: 2.0.2
      is-weakset: 2.0.4

  which-typed-array@1.1.19:
    dependencies:
      available-typed-arrays: 1.0.7
      call-bind: 1.0.8
      call-bound: 1.0.4
      for-each: 0.3.5
      get-proto: 1.0.1
      gopd: 1.2.0
      has-tostringtag: 1.0.2

  which@2.0.2:
    dependencies:
      isexe: 2.0.0

  why-is-node-running@2.3.0:
    dependencies:
      siginfo: 2.0.0
      stackback: 0.0.2

  word-wrap@1.2.5: {}

  wrap-ansi@7.0.0:
    dependencies:
      ansi-styles: 4.3.0
      string-width: 4.2.3
      strip-ansi: 6.0.1

  wrap-ansi@8.1.0:
    dependencies:
      ansi-styles: 6.2.1
      string-width: 5.1.2
      strip-ansi: 7.1.0

  ws@8.18.3: {}

  xml-name-validator@5.0.0: {}

  xmlchars@2.2.0: {}

  yallist@3.1.1: {}

  yaml@2.8.0: {}

  yocto-queue@0.1.0: {}

  zod@3.25.71: {}

  zustand@5.0.6(@types/react@19.1.8)(react@19.1.0)(use-sync-external-store@1.5.0(react@19.1.0)):
    optionalDependencies:
      '@types/react': 19.1.8
      react: 19.1.0
      use-sync-external-store: 1.5.0(react@19.1.0)


# END FILE CONTENTS


# File: frontend/components/ui/checkbox.tsx

"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }


# END FILE CONTENTS


# File: frontend/components/ui/toaster.tsx

"use client"

import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}


# END FILE CONTENTS


# File: frontend/components/ui/drawer.tsx

"use client"

import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}


# END FILE CONTENTS


# File: frontend/providers/app-state-provider-wrapper.tsx

"use client"

import React from 'react'
import { AppStateProvider } from '../hooks/use-app-state-context'
import { isFeatureEnabled } from '../lib/feature-flags'

interface AppStateProviderWrapperProps {
    children: React.ReactNode
}

/**
 * AppStateProvider 包裝器
 * 根據功能開關決定是否啟用新的狀態管理系統
 * 這提供了漸進式部署的能力，可以安全地在新舊系統間切換
 */
export function AppStateProviderWrapper({ children }: AppStateProviderWrapperProps) {
    // 檢查是否啟用新的狀態管理系統
    const useNewStateManagement = isFeatureEnabled('useNewStateManagement')
    const useNewAppStateHook = isFeatureEnabled('useNewAppStateHook')

    console.log('🔄 [AppStateProviderWrapper] 功能開關狀態:', {
        useNewStateManagement,
        useNewAppStateHook,
        willUseProvider: useNewStateManagement || useNewAppStateHook
    })

    // 如果啟用新狀態管理，使用 AppStateProvider 包裝
    if (useNewStateManagement || useNewAppStateHook) {
        console.log('🔄 [AppStateProviderWrapper] 啟用新狀態管理 - 使用 AppStateProvider')
        return (
            <AppStateProvider>
                {children}
            </AppStateProvider>
        )
    }

    // 否則直接渲染子組件（使用舊系統）
    console.log('🔄 [AppStateProviderWrapper] 使用舊狀態管理 - 直接渲染')
    return <>{children}</>
}


# END FILE CONTENTS


# File: frontend/study-scriber.tsx

"use client"

import dynamic from "next/dynamic"
import "easymde/dist/easymde.min.css"
import { useMemo, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { RotateCcw, Download } from "lucide-react"


// 動態匯入 SimpleMDE 以避免 SSR 問題
// 透過 .then(mod => mod.default) 明確取用 default export，
// 以避免 Next.js 在處理 CommonJS 與 ESM 混用時，
// 可能將整個 module 物件當作 React 元件而導致無法完成載入。
const SimpleMDE = dynamic(() => import("react-simplemde-editor").then(mod => mod.default), {
  ssr: false,
  loading: () => (
    <div className="h-full flex items-center justify-center text-muted-foreground">
      載入編輯器中...
    </div>
  ),
})

import { useAppStore } from "./lib/app-store-zustand"
import { DefaultState } from "./components/default-state"
import { RecordingState } from "./components/recording-state"
import { WaitingState } from "./components/waiting-state"
import { FinishState } from "./components/finish-state"
import { ProviderContextMenu } from "./components/provider-context-menu"

export default function Component() {
  // 使用 Zustand store
  const appState = useAppStore(state => state.appState)
  const isLoading = useAppStore(state => state.isLoading)
  const error = useAppStore(state => state.error)
  const session = useAppStore(state => state.session)
  const isRecording = useAppStore(state => state.isRecording)
  const recordingTime = useAppStore(state => state.recordingTime)
  const transcriptEntries = useAppStore(state => state.transcriptEntries)
  const editorContent = useAppStore(state => state.editorContent)
  const sttProvider = useAppStore(state => state.sttProvider)

  // Actions
  const startRecording = useAppStore(state => state.startRecording)
  const stopRecording = useAppStore(state => state.stopRecording)
  const updateEditorContent = useAppStore(state => state.updateEditorContent)
  const resetState = useAppStore(state => state.resetState)
  const setSttProvider = useAppStore(state => state.setSttProvider)
  // ✅ 移除 draftTitle 狀態 - 標題不再必填

  // 預先載入 SimpleMDE，避免第一次載入時卡在 loading
  useEffect(() => {
    if (typeof (SimpleMDE as any).preload === 'function') {
      (SimpleMDE as any).preload()
    }
  }, [])

  // 使用 Zustand store - 所有狀態已在上方宣告

  // 檢查並清理異常的 localStorage 狀態
  useEffect(() => {
    if (typeof window !== 'undefined') {
      const appStateData = localStorage.getItem('app_state_v1')
      if (appStateData) {
        try {
          const parsedState = JSON.parse(appStateData)
          console.log("🔍 [StudyScriber] 檢查 localStorage 狀態:", parsedState)

          // 如果狀態是異常的錄音狀態，清除它
          if (parsedState.state && ['recording_waiting', 'recording_active', 'processing'].includes(parsedState.state)) {
            console.log("🧹 [StudyScriber] 清除異常的 localStorage 狀態")
            localStorage.removeItem('app_state_v1')
            localStorage.removeItem('last_session')
            // 刷新頁面以重新初始化
            window.location.reload()
            return
          }
        } catch (error) {
          console.error("❌ [StudyScriber] 解析 localStorage 失敗:", error)
          localStorage.removeItem('app_state_v1')
          localStorage.removeItem('last_session')
        }
      }
    }
  }, [])

  // 追蹤狀態流轉
  console.log("[DEBUG] appState:", appState)
  console.log("[DEBUG] isRecording:", isRecording)
  if (session) {
    console.log("[DEBUG] session.status:", session.status, "session.type:", session.type)
  } else {
    console.log("[DEBUG] session: null")
  }

  // 添加調試功能到 window
  if (typeof window !== 'undefined') {
    // 暴露完整狀態到 window.appData 以便診斷
    (window as any).appData = {
      state: appState,
      isRecording,
      recordingTime,
      transcriptEntries,
      editorContent,
      session,
      isLoading,
      error
    }
  }

  // 暴露錄音狀態到 window 以便調試
  if (typeof window !== 'undefined') {
    (window as any).recordingHook = { isRecording, recordingTime }
  }

  // 暴露 session 到 window 以便調試
  if (typeof window !== 'undefined') {
    (window as any).sessionHook = {
      currentSession: session,
      isLoading: isLoading,
      error: error
    }
  }

  useEffect(() => {
    console.log("📱 StudyScriber: state 更新:", {
      state: appState,
      isRecording: isRecording,
      recordingTime: recordingTime,
      transcriptEntries: transcriptEntries,
      editorContent: editorContent,
      session: session,
      isLoading: isLoading,
      error: error,
    })
  }, [appState, isRecording, recordingTime, transcriptEntries, editorContent, session, isLoading, error])

  const editorOptions = useMemo(() => {
    return {
      spellChecker: false,
      placeholder: "Start writing your notes...",
      status: false,
      toolbar: [
        "bold",
        "italic",
        "strikethrough",
        "|",
        "heading-1",
        "heading-2",
        "heading-3",
        "|",
        "quote",
        "unordered-list",
        "ordered-list",
        "|",
        "link",
        "image",
        "table",
        "|",
        "preview",
        "side-by-side",
        "fullscreen",
      ] as const,
      autofocus: true,
      tabSize: 2,
    }
  }, [])

  const renderRightPanel = () => {
    // 狀態異常檢查：如果是 recording_waiting 但沒有 session，應該顯示 default 狀態
    if (appState === "recording_waiting" && !session) {
      console.log("⚠️ [StudyScriber] 檢測到狀態異常: recording_waiting 但沒有 session，顯示 DefaultState")
      return <DefaultState
        onStartRecording={() => {
          console.log("📱 StudyScriber: 準備調用 startRecording（狀態修復）")
          startRecording()
        }}
      />
    }

    switch (appState) {
      case "default":
        console.log("🔄 [StudyScriber] 渲染 DefaultState，startRecording 函數:", typeof startRecording)
        return <DefaultState
          onStartRecording={() => {
            console.log("📱 StudyScriber: 準備調用 startRecording")
            console.log("📱 StudyScriber: startRecording 函數類型:", typeof startRecording)
            startRecording()
          }}
        />
      case "recording_active":
        return (
          <RecordingState
            transcriptEntries={transcriptEntries}
            recordingTime={recordingTime}
            onStopRecording={stopRecording}
            error={error}
          />
        )
      case "recording_waiting":
        return (
          <RecordingState
            transcriptEntries={transcriptEntries}
            recordingTime={recordingTime}
            onStopRecording={stopRecording}
            error={error}
          />
        )
      case "processing":
        return <WaitingState />
      case "finished":
        return (
          <FinishState
            transcriptEntries={transcriptEntries}
            onExport={() => {
              // TODO: 實現匯出功能
              console.log('Export functionality not implemented yet')
            }}
            onToLatest={() => {
              // TODO: 實現捲動到最新功能
              console.log('To Latest functionality not implemented yet')
            }}
          />
        )
      default:
        return <DefaultState
          onStartRecording={() => {
            console.log("📱 StudyScriber: 準備調用 startRecording (default)")
            startRecording()
          }}
        />
    }
  }

  return (
    <div className="h-screen bg-background flex flex-col" suppressHydrationWarning={true}>
      {/* Full Width Header - Fixed height of 80px */}
      <div className="bg-background border-b border-border px-6 flex-shrink-0 w-full h-20 flex justify-between items-center">
        <h1 className="text-2xl font-semibold text-foreground">Study Scriber</h1>

        {/* Header action buttons */}
        <div className="flex items-center gap-2">
          {/* New note 按鈕 - 在有活躍會話或需要的狀態下顯示 */}
          {((appState === "default" && !!session) ||
            appState === "recording_waiting" ||
            appState === "recording_active" ||
            appState === "finished") && (
              <Button variant="outline" onClick={resetState} size="sm" className="px-4 h-8 flex items-center gap-2">
                <RotateCcw className="w-4 h-4" />
                New note
              </Button>
            )}

          {/* Export 按鈕 - 只在 finished 狀態顯示 */}
          {appState === "finished" && (
            <Button onClick={() => console.log('Export functionality')} size="sm" className="px-4 h-8 flex items-center gap-2">
              <Download className="w-4 h-4" />
              Export
            </Button>
          )}

          <ProviderContextMenu
            currentProvider={sttProvider}
            onProviderChange={setSttProvider}
            disabled={appState === 'recording_active' || appState === 'processing' || appState === 'recording_waiting'}
          />
        </div>
      </div>

      {/* Main Content Area */}
      <div className="flex-1 flex overflow-hidden">
        {/* Left Panel (Editor) */}
        <div className="flex-1 border-r border-border h-full">
          <SimpleMDE
            value={editorContent}
            onChange={updateEditorContent}
            options={editorOptions}
            className="h-full"
          />
        </div>

        {/* Right Panel (Recording/Transcription) */}
        <div className="w-1/3 min-w-[400px] max-w-[500px] flex-shrink-0 h-full overflow-y-auto">
          {renderRightPanel()}
        </div>
      </div>
    </div>
  )
}


# END FILE CONTENTS


# File: frontend/components/ui/form.tsx

"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}


# END FILE CONTENTS


# File: frontend/.env.example

# StudyScriber Frontend Environment Variables
# 複製此文件為 .env.local 並填入實際的配置值

# 後端 API 基礎 URL
NEXT_PUBLIC_API_URL=http://127.0.0.1:8000

# WebSocket 基礎 URL
NEXT_PUBLIC_WS_URL=ws://127.0.0.1:8000

# 開發模式配置
NODE_ENV=development

# 音訊切片間隔配置 (影響前端錄音間隔，需與後端保持一致)
# 方法一：直接設定毫秒數 (優先級較高)
# NEXT_PUBLIC_AUDIO_CHUNK_INTERVAL_MS=10000

# 方法二：設定秒數 (會自動轉換為毫秒)
NEXT_PUBLIC_AUDIO_CHUNK_INTERVAL_SEC=10

# 如果都未設定，預設為 10 秒 (10000ms)
# 建議值：5-30秒，需與後端 AUDIO_CHUNK_DURATION_SEC 保持一致


# END FILE CONTENTS


# File: frontend/components/SessionLoadingOverlay.tsx

import React from 'react'

export default function SessionLoadingOverlay() {
    return (
        <div className="fixed inset-0 flex items-center justify-center bg-white/60 z-50">
            <div className="animate-spin rounded-full h-12 w-12 border-y-4 border-gray-400"></div>
            <p className="ml-4 text-gray-700">準備錄音會話中…</p>
        </div>
    )
}


# END FILE CONTENTS


# File: frontend/test-transcript-integration.js

 

# END FILE CONTENTS


# File: frontend/hooks/use-app-state-context.ts

"use client"

import React, { createContext, useContext, useReducer, useCallback, useEffect, useState } from "react"
import { AppStateContextValue, initialContextState } from "../types/app-state-context"
import { appStateReducer, AppStateReducerState } from "../lib/app-state-reducer"
import { InitialStateLoader } from "../lib/initial-state-loader"
import { AppState, SessionStatus, SessionType, TranscriptEntry } from "../types/app-state"
import { StateMachineManager } from '../lib/state-machine';
import { StateTransitionTrigger } from "../types/state-transitions";
import { ServiceRegistry, SERVICE_KEYS, serviceContainer } from "../lib/services";
import type { ISessionService, IRecordingService, ITranscriptService, TranscriptMessage } from "../lib/services";

const AppStateContext = createContext<AppStateContextValue | null>(null)

export function AppStateProvider({ children }: { children: React.ReactNode }) {
  const [state, dispatch] = useReducer(appStateReducer, initialContextState as AppStateReducerState)
  const [stateMachineManager, setStateMachineManager] = useState<StateMachineManager | null>(null);
  const [servicesInitialized, setServicesInitialized] = useState(false);

  // 初始化服務層
  useEffect(() => {
    async function initializeServices() {
      try {
        console.log('🚀 [AppStateProvider] 初始化服務層...')

        // 註冊並初始化所有服務
        await ServiceRegistry.initializeServices()

        setServicesInitialized(true)
        console.log('✅ [AppStateProvider] 服務層初始化完成')
      } catch (error) {
        console.error('❌ [AppStateProvider] 服務層初始化失敗:', error)
      }
    }

    initializeServices()
  }, [])

  // 載入初始狀態並初始化狀態機
  useEffect(() => {
    if (!servicesInitialized) {
      console.log('⏳ [AppStateProvider] 等待服務層初始化...')
      return
    }

    console.log('🔄 [AppStateProvider] 載入初始狀態...')

    // 檢查是否在瀏覽器環境
    if (typeof window !== 'undefined') {
      try {
        const initialAppData = InitialStateLoader.loadInitialAppData()

        // 更新 Context 狀態
        dispatch({ type: "SET_APP_STATE", payload: initialAppData.state })
        dispatch({ type: "SET_EDITOR_CONTENT", payload: initialAppData.editorContent })
        dispatch({ type: "SET_TRANSCRIPT_ENTRIES", payload: initialAppData.transcriptEntries })

        if (initialAppData.session) {
          dispatch({ type: "SET_SESSION", payload: initialAppData.session })
        }

        // 初始化狀態機並註冊副作用處理器
        const smManager = new StateMachineManager({
          currentState: initialAppData.state,
          isRecording: initialAppData.isRecording,
          transcriptCount: initialAppData.transcriptEntries.length,
          session: initialAppData.session || null,
          error: null
        });

        // 取得服務實例
        const sessionService = serviceContainer.resolve<ISessionService>(SERVICE_KEYS.SESSION_SERVICE)
        const recordingService = serviceContainer.resolve<IRecordingService>(SERVICE_KEYS.RECORDING_SERVICE)
        const transcriptService = serviceContainer.resolve<ITranscriptService>(SERVICE_KEYS.TRANSCRIPT_SERVICE)

        // 註冊副作用處理器 - CREATE_SESSION
        smManager.registerSideEffectHandler('CREATE_SESSION', {
          handleSideEffect: async (effect) => {
            console.log('🏗️ [副作用] CREATE_SESSION: 建立會話', effect);

            try {
              if (effect.type === 'CREATE_SESSION') {
                // 修復：建立會話前先檢查現有活躍會話
                console.log('🔍 [副作用] CREATE_SESSION: 檢查現有活躍會話')
                const existingSession = await sessionService.checkActiveSession()

                if (existingSession) {
                  console.log('⚠️ [副作用] CREATE_SESSION: 發現現有活躍會話，嘗試自動清理', {
                    existingSessionId: existingSession.id,
                    status: existingSession.status,
                    type: existingSession.type
                  })

                  try {
                    // 嘗試刪除現有活躍會話
                    await sessionService.deleteSession(existingSession.id)
                    console.log('✅ [副作用] CREATE_SESSION: 成功清理現有會話', existingSession.id)
                  } catch (cleanupError) {
                    console.warn('⚠️ [副作用] CREATE_SESSION: 清理現有會話失敗，繼續嘗試創建', cleanupError)
                  }
                }

                const sessionData = await sessionService.createRecordingSession(
                  effect.title || `錄音筆記 ${new Date().toLocaleString()}`
                )

                // 新增：等待會話在資料庫中完全可見
                const isReady = await sessionService.waitForSessionReady(sessionData.id)

                if (!isReady) {
                  throw new Error('會話創建超時，無法確認會話狀態')
                }

                // 更新 Context 狀態
                dispatch({
                  type: "SET_SESSION",
                  payload: {
                    id: sessionData.id,
                    status: sessionData.status as SessionStatus,
                    type: effect.sessionType
                  }
                })

                console.log('✅ [副作用] CREATE_SESSION 完成:', sessionData.id)

                // 移除 setTimeout，改為同步觸發 SESSION_CREATED 轉換
                if (stateMachineManager) {
                  stateMachineManager.getStateMachine().transition('SESSION_CREATED')
                }
              }
            } catch (error) {
              console.error('❌ [副作用] CREATE_SESSION 失敗:', error)

              // 修復：提供更明確的錯誤訊息
              let errorMessage = '建立會話失敗'
              if (error instanceof Error) {
                if (error.message.includes('409') || error.message.includes('衝突')) {
                  errorMessage = '會話衝突：請重新整理頁面後再試，或聯繫技術支援'
                } else if (error.message.includes('超時')) {
                  errorMessage = '會話創建超時：請檢查網路連接後重試'
                }
              }

              dispatch({ type: "SET_ERROR", payload: errorMessage })

              // 修復：確保清理 session 狀態
              dispatch({ type: "SET_SESSION", payload: null })

              // 移除 setTimeout，改為同步觸發錯誤轉換
              if (stateMachineManager) {
                stateMachineManager.getStateMachine().transition('ERROR_OCCURRED')
              }
            }
          }
        });



        // 註冊副作用處理器 - START_RECORDING
        smManager.registerSideEffectHandler('START_RECORDING', {
          handleSideEffect: async (effect) => {
            console.log('🎤 [副作用] START_RECORDING: 開始錄音', effect);

            try {
              const currentSession = smManager.getStateMachine().getContext().session
              if (!currentSession) {
                throw new Error('沒有活躍的會話')
              }

              await recordingService.startRecording(currentSession.id)

              // 更新錄音狀態
              dispatch({ type: "SET_RECORDING", payload: true })

              console.log('✅ [副作用] START_RECORDING 完成')
            } catch (error) {
              console.error('❌ [副作用] START_RECORDING 失敗:', error)
              dispatch({ type: "SET_ERROR", payload: '開始錄音失敗' })

              // 觸發錯誤轉換
              setTimeout(() => {
                if (stateMachineManager) {
                  stateMachineManager.getStateMachine().transition('ERROR_OCCURRED')
                }
              }, 100)
            }
          }
        });

        // 註冊副作用處理器 - CONNECT_WEBSOCKET
        smManager.registerSideEffectHandler('CONNECT_WEBSOCKET', {
          handleSideEffect: async (effect) => {
            console.log('🔌 [副作用] CONNECT_WEBSOCKET: 連接 WebSocket', effect);

            try {
              const currentSession = smManager.getStateMachine().getContext().session
              if (!currentSession) {
                throw new Error('沒有活躍的會話')
              }

              // 修復：添加連接超時處理
              const WEBSOCKET_TIMEOUT = 10000; // 10秒超時

              const connectionPromise = async () => {
                // 新增：WebSocket 連接前會話狀態預檢
                console.log('🔍 [副作用] CONNECT_WEBSOCKET: 開始會話狀態預檢', currentSession.id)

                const activeSession = await sessionService.checkActiveSession()
                if (!activeSession) {
                  throw new Error(`會話狀態預檢失敗：沒有活躍的會話`)
                }

                if (activeSession.id !== currentSession.id) {
                  throw new Error(`會話狀態預檢失敗：活躍會話 ${activeSession.id} 與期望的會話 ${currentSession.id} 不匹配`)
                }

                if (activeSession.status !== 'active') {
                  throw new Error(`會話狀態預檢失敗：會話 ${activeSession.id} 狀態為 ${activeSession.status}，期望為 active`)
                }

                if (activeSession.type !== 'recording') {
                  throw new Error(`會話狀態預檢失敗：會話 ${activeSession.id} 類型為 ${activeSession.type}，期望為 recording`)
                }

                console.log('✅ [副作用] CONNECT_WEBSOCKET: 會話狀態預檢通過', {
                  sessionId: activeSession.id,
                  status: activeSession.status,
                  type: activeSession.type
                })

                // 連接並添加監聽器 - 使用預檢通過的會話 ID
                await transcriptService.connect(activeSession.id)

                return activeSession
              }

              // 修復：使用 Promise.race 實現超時機制
              const timeoutPromise = new Promise<never>((_, reject) => {
                setTimeout(() => reject(new Error('WebSocket 連接超時')), WEBSOCKET_TIMEOUT)
              })

              const activeSession = await Promise.race([connectionPromise(), timeoutPromise])

              // 添加逐字稿監聽器
              const handleTranscript = (message: TranscriptMessage) => {
                if (message.type === 'transcript_segment' && message.text) {
                  const startTime = message.start_time ?? 0
                  const hours = Math.floor(startTime / 3600)
                  const minutes = Math.floor((startTime % 3600) / 60)
                  const seconds = Math.floor(startTime % 60)
                  const timeStr = `${hours.toString().padStart(2, "0")}:${minutes.toString().padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`

                  // 添加逐字稿到 Context
                  dispatch({
                    type: "ADD_TRANSCRIPT_ENTRY",
                    payload: {
                      time: timeStr,
                      text: message.text
                    }
                  })

                  // 如果是第一個逐字稿，觸發轉換
                  const currentContext = smManager.getStateMachine().getContext()
                  if (currentContext.transcriptCount === 0) {
                    setTimeout(() => {
                      smManager.getStateMachine().transition('FIRST_TRANSCRIPT_RECEIVED')
                    }, 100)
                  }
                } else if (message.type === 'transcript_complete') {
                  // 轉錄完成
                  setTimeout(() => {
                    smManager.getStateMachine().transition('PROCESSING_COMPLETED')
                  }, 100)
                } else if (message.type === 'error') {
                  console.error('🚨 [副作用] 逐字稿錯誤:', message)
                  dispatch({ type: "SET_ERROR", payload: '逐字稿處理錯誤' })

                  setTimeout(() => {
                    smManager.getStateMachine().transition('ERROR_OCCURRED')
                  }, 100)
                }
              }

              transcriptService.addTranscriptListener(activeSession.id, handleTranscript)

              console.log('✅ [副作用] CONNECT_WEBSOCKET 完成')
            } catch (error: unknown) {
              console.error('❌ [副作用] CONNECT_WEBSOCKET 失敗:', error)

              // 區分不同類型的錯誤提供明確的錯誤訊息
              let errorMessage = '連接逐字稿服務失敗'
              if (error instanceof Error) {
                if (error.message.includes('會話狀態預檢失敗')) {
                  errorMessage = '會話狀態驗證失敗'
                } else if (error.message.includes('沒有活躍的會話')) {
                  errorMessage = '沒有可用的會話'
                } else if (error.message.includes('WebSocket 連接超時')) {
                  errorMessage = 'WebSocket 連接超時，請檢查網路連接'
                }
              }

              dispatch({ type: "SET_ERROR", payload: errorMessage })

              setTimeout(() => {
                if (stateMachineManager) {
                  stateMachineManager.getStateMachine().transition('ERROR_OCCURRED')
                }
              }, 100)
            }
          }
        });



        // 註冊副作用處理器 - STOP_RECORDING
        smManager.registerSideEffectHandler('STOP_RECORDING', {
          handleSideEffect: async (effect) => {
            console.log('🛑 [副作用] STOP_RECORDING: 停止錄音', effect);

            try {
              await recordingService.stopRecording()

              // 更新錄音狀態
              dispatch({ type: "SET_RECORDING", payload: false })
              dispatch({ type: "SET_RECORDING_TIME", payload: 0 })

              console.log('✅ [副作用] STOP_RECORDING 完成')
            } catch (error) {
              console.error('❌ [副作用] STOP_RECORDING 失敗:', error)
              dispatch({ type: "SET_ERROR", payload: '停止錄音失敗' })
            }
          }
        });

        // 註冊副作用處理器 - DISCONNECT_WEBSOCKET
        smManager.registerSideEffectHandler('DISCONNECT_WEBSOCKET', {
          handleSideEffect: async (effect) => {
            console.log('🔌 [副作用] DISCONNECT_WEBSOCKET: 斷開 WebSocket', effect);

            try {
              const currentSession = smManager.getStateMachine().getContext().session
              if (currentSession) {
                await transcriptService.disconnect(currentSession.id)
              }

              console.log('✅ [副作用] DISCONNECT_WEBSOCKET 完成')
            } catch (error) {
              console.error('❌ [副作用] DISCONNECT_WEBSOCKET 失敗:', error)
            }
          }
        });

        // 註冊副作用處理器 - FINISH_SESSION
        smManager.registerSideEffectHandler('FINISH_SESSION', {
          handleSideEffect: async (effect) => {
            console.log('✅ [副作用] FINISH_SESSION: 完成會話', effect);

            try {
              const currentSession = smManager.getStateMachine().getContext().session
              if (currentSession) {
                await sessionService.finishSession(currentSession.id)

                // 更新會話狀態
                dispatch({
                  type: "UPDATE_SESSION_STATUS",
                  payload: "completed" as SessionStatus
                })
              }

              console.log('✅ [副作用] FINISH_SESSION 完成')
            } catch (error) {
              console.error('❌ [副作用] FINISH_SESSION 失敗:', error)
              dispatch({ type: "SET_ERROR", payload: '完成會話失敗' })
            }
          }
        });

        // 註冊副作用處理器 - CLEAR_TRANSCRIPTS
        smManager.registerSideEffectHandler('CLEAR_TRANSCRIPTS', {
          handleSideEffect: (effect) => {
            console.log('🧹 [副作用] CLEAR_TRANSCRIPTS: 清除逐字稿', effect);
            dispatch({ type: "SET_TRANSCRIPT_ENTRIES", payload: [] })
          }
        });

        // 註冊副作用處理器 - SAVE_DRAFT
        smManager.registerSideEffectHandler('SAVE_DRAFT', {
          handleSideEffect: (effect) => {
            console.log('💾 [副作用] SAVE_DRAFT: 儲存草稿', effect);
            // 當前已有自動儲存機制，這裡可以觸發立即儲存
          }
        });

        // 註冊副作用處理器 - SHOW_ERROR
        smManager.registerSideEffectHandler('SHOW_ERROR', {
          handleSideEffect: (effect) => {
            console.log('🚨 [副作用] SHOW_ERROR: 顯示錯誤', effect);
            if (effect.type === 'SHOW_ERROR') {
              dispatch({ type: "SET_ERROR", payload: effect.message })
            }
          }
        });

        // 修復：新增 ERROR_CLEANUP 副作用處理器，確保錯誤時狀態完全重置
        smManager.registerSideEffectHandler('ERROR_CLEANUP', {
          handleSideEffect: (effect) => {
            console.log('🧹 [副作用] ERROR_CLEANUP: 清理錯誤狀態', effect);

            // 清理所有相關狀態
            dispatch({ type: "SET_SESSION", payload: null })
            dispatch({ type: "SET_RECORDING", payload: false })
            dispatch({ type: "SET_RECORDING_TIME", payload: 0 })

            console.log('✅ [副作用] ERROR_CLEANUP: 狀態清理完成')
          }
        });

        setStateMachineManager(smManager);

        console.log('✅ [AppStateProvider] 初始狀態載入完成:', {
          state: initialAppData.state,
          hasSession: !!initialAppData.session,
          transcriptCount: initialAppData.transcriptEntries.length,
          contentLength: initialAppData.editorContent.length
        })
      } catch (error) {
        console.error('❌ [AppStateProvider] 載入初始狀態失敗:', error)
      }
    }
  }, [servicesInitialized])

  // 錄音時間追蹤
  useEffect(() => {
    let intervalId: NodeJS.Timeout | null = null

    if (state.appData.isRecording && servicesInitialized) {
      intervalId = setInterval(() => {
        const recordingService = serviceContainer.resolve<IRecordingService>(SERVICE_KEYS.RECORDING_SERVICE)
        console.log('Context instance', recordingService)
        const recordingTime = recordingService.getRecordingTime()
        dispatch({ type: "SET_RECORDING_TIME", payload: recordingTime })
      }, 1000)
    }

    return () => {
      if (intervalId) {
        clearInterval(intervalId)
      }
    }
  }, [state.appData.isRecording, servicesInitialized])

  // 狀態持久化
  useEffect(() => {
    // 檢查是否在瀏覽器環境且狀態已初始化
    if (typeof window !== 'undefined' && state.appData) {
      try {
        // 延遲儲存，避免在初始載入時立即儲存
        const timeoutId = setTimeout(() => {
          InitialStateLoader.saveAppState(state.appData)
        }, 1000) // 1秒延遲

        return () => clearTimeout(timeoutId)
      } catch (error) {
        console.error('❌ [AppStateProvider] 狀態持久化失敗:', error)
      }
    }
  }, [state.appData])

  // 將狀態變更同步到狀態機
  useEffect(() => {
    if (stateMachineManager) {
      stateMachineManager.getStateMachine().updateContext({
        currentState: state.appData.state,
        isRecording: state.appData.isRecording,
        transcriptCount: state.appData.transcriptEntries.length,
        session: state.appData.session,
        error: state.error
      });
    }
  }, [state, stateMachineManager]);

  const transition = useCallback((trigger: StateTransitionTrigger) => {
    if (!stateMachineManager) {
      console.error("狀態機尚未初始化");
      return null;
    }
    const result = stateMachineManager.getStateMachine().transition(trigger);
    if (result.success) {
      dispatch({ type: 'SET_APP_STATE', payload: result.newState });
    }
    return result;
  }, [stateMachineManager]);

  const setState = useCallback((newState: AppState) => {
    dispatch({ type: "SET_STATE", payload: newState })
  }, [])

  const setRecording = useCallback((isRecording: boolean) => {
    dispatch({ type: "SET_RECORDING", payload: isRecording })
  }, [])

  const setRecordingTime = useCallback((time: number) => {
    dispatch({ type: "SET_RECORDING_TIME", payload: time })
  }, [])

  const setEditorContent = useCallback((content: string) => {
    dispatch({ type: "SET_EDITOR_CONTENT", payload: content })
  }, [])

  const setTranscriptEntries = useCallback((entries: TranscriptEntry[]) => {
    dispatch({ type: "SET_TRANSCRIPT_ENTRIES", payload: entries })
  }, [])

  const addTranscriptEntry = useCallback((entry: TranscriptEntry) => {
    dispatch({ type: "ADD_TRANSCRIPT_ENTRY", payload: entry })
  }, [])

  const setSession = useCallback((session: { id: string; status: SessionStatus; type: SessionType } | null) => {
    dispatch({ type: "SET_SESSION", payload: session })
  }, [])

  const updateSessionStatus = useCallback((status: SessionStatus) => {
    dispatch({ type: "UPDATE_SESSION_STATUS", payload: status })
  }, [])

  const resetState = useCallback(() => {
    dispatch({ type: "RESET_STATE" })
  }, [])

  const setLoading = useCallback((loading: boolean) => {
    dispatch({ type: "SET_LOADING", payload: loading })
  }, [])

  const setError = useCallback((error: string | null) => {
    dispatch({ type: "SET_ERROR", payload: error })
  }, [])

  const contextValue: AppStateContextValue = {
    appData: state.appData,
    isLoading: state.isLoading,
    error: state.error,
    dispatch,
    setState,
    setRecording,
    setRecordingTime,
    setEditorContent,
    setTranscriptEntries,
    addTranscriptEntry,
    setSession,
    updateSessionStatus,
    resetState,
    setLoading,
    setError,
    transition,
  }

  return React.createElement(
    AppStateContext.Provider,
    { value: contextValue },
    children
  )
}

export function useAppStateContext(): AppStateContextValue {
  const context = useContext(AppStateContext)
  if (!context) {
    throw new Error("useAppStateContext 必須在 AppStateProvider 內使用")
  }
  return context
}

export { AppStateContext }


# END FILE CONTENTS


# File: frontend/tsconfig.json

{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "target": "ES6",
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}


# END FILE CONTENTS


# File: app/api/segments.py

"""
StudyScriber 音檔切片上傳 API
"""

import logging
from uuid import UUID
from fastapi import APIRouter, UploadFile, File, BackgroundTasks, Depends, HTTPException
from starlette.status import HTTP_201_CREATED, HTTP_400_BAD_REQUEST, HTTP_409_CONFLICT
from supabase import Client

from app.core.config import Settings, get_settings
from app.db.database import get_supabase_client
from app.services.r2_client import get_r2_client
from app.services.azure_openai_v2 import SimpleAudioTranscriptionService
from app.services.transcript_feed import get_transcript_hub
from app.core.container import container
from app.utils.validators import valid_webm
from app.services.stt.factory import get_provider
from app.services.stt.save_utils import save_and_push_result


logger = logging.getLogger(__name__)

router = APIRouter(prefix="/api", tags=["音檔上傳"])

MAX_FILE_SIZE = 5 * 1024 * 1024  # 5 MB


@router.post("/segment", status_code=HTTP_201_CREATED)
async def upload_segment(
    sid: UUID,
    seq: int,
    file: UploadFile = File(...),
    background: BackgroundTasks = BackgroundTasks(),
    settings: Settings = Depends(get_settings),
    supabase: Client = Depends(get_supabase_client)
):
    """
    上傳 10 秒 WebM 音檔切片 (B-020)

    使用 Content-Length + UploadFile.spool_max_size 雙保險
    立即回應 ack，背景處理轉錄
    """

    # --- 基本驗證 ---
    if file.content_type not in ("audio/webm", "audio/webm;codecs=opus"):
        raise HTTPException(HTTP_400_BAD_REQUEST, "Unsupported media type. Expected audio/webm")

    # 讀取檔案內容
    blob = await file.read()

    # 檔案大小檢查
    if len(blob) > MAX_FILE_SIZE:
        raise HTTPException(HTTP_400_BAD_REQUEST, f"File too large: {len(blob)} bytes > {MAX_FILE_SIZE} bytes (5MB)")

    # 會話驗證 - 檢查 session 存在且狀態正確
    try:
        session_response = supabase.table("sessions").select("*").eq("id", str(sid)).eq("status", "active").limit(1).execute()
        if not session_response.data:
            raise HTTPException(HTTP_400_BAD_REQUEST, "Session not found or not active")

        session = session_response.data[0]
        if session.get('type') != 'recording':
            raise HTTPException(HTTP_400_BAD_REQUEST, "Session is not in recording mode")

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Session validation error: {e}")
        raise HTTPException(HTTP_400_BAD_REQUEST, "Session validation failed")

    # 序號唯一性檢查 - (session_id, seq) UNIQUE
    try:
        existing_response = supabase.table("audio_files").select("id").eq("session_id", str(sid)).eq("chunk_sequence", seq).limit(1).execute()
        if existing_response.data:
            raise HTTPException(HTTP_409_CONFLICT, f"Sequence {seq} already uploaded for this session. Please retry with next sequence or skip.")
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Sequence uniqueness check error: {e}")
        raise HTTPException(HTTP_400_BAD_REQUEST, "Sequence validation failed")

    # WebM 檔案格式基本驗證
    if not valid_webm(blob[:32]):
        raise HTTPException(HTTP_400_BAD_REQUEST, "Invalid WebM header. Please ensure file is properly encoded WebM format.")

    logger.info(f"✅ Validated WebM segment upload: session={sid}, seq={seq}, size={len(blob)} bytes")

    # --- 立即回 Ack，並丟背景任務 ---
    background.add_task(process_and_transcribe, sid, seq, blob)
    return {"ack": seq, "size": len(blob), "status": "accepted"}


async def process_and_transcribe(sid: UUID, seq: int, webm_blob: bytes):
    """
    背景任務：處理音檔切片並執行轉錄

    流程：R2 儲存 → 資料庫記錄 → FFmpeg 轉換 → Whisper 轉錄 → WebSocket 廣播
    """
    transcript_hub = get_transcript_hub()

    try:
        logger.info(f"🚀 [背景轉錄] 開始處理切片 {seq} (session: {sid}, size: {len(webm_blob)} bytes)")

        # 1. 儲存至 Cloudflare R2
        r2_client = get_r2_client()
        blob_path = await r2_client.store_segment(sid, seq, webm_blob)
        logger.info(f"📁 [R2 儲存] 切片 {seq} 已儲存至 {blob_path}")

        # 2. 記錄到資料庫 audio_files 表
        supabase = get_supabase_client()
        app_settings = get_settings()
        audio_file_data = {
            "session_id": str(sid),
            "chunk_sequence": seq,
            "r2_key": blob_path,
            "r2_bucket": r2_client.bucket_name,
            "file_size": len(webm_blob),
            "duration_seconds": app_settings.AUDIO_CHUNK_DURATION_SEC  # 從環境變數讀取切片時長
        }

        audio_response = supabase.table("audio_files").insert(audio_file_data).execute()
        if not audio_response.data:
            raise Exception("Failed to insert audio file record")

        logger.info(f"📝 [資料庫] 音檔記錄已建立: {audio_response.data[0]['id']}")

        # 3. 啟動轉錄服務
        try:
            provider = get_provider(sid)
            logger.info(f"🎯 [轉錄啟動] 開始轉錄切片 {seq} (provider={provider.name})")
            result = await provider.transcribe(webm_blob, sid, seq)
            if result:
                await save_and_push_result(sid, seq, result)
                logger.info(f"✅ [轉錄啟動] 切片 {seq} 轉錄成功")
            else:
                logger.warning(f"⚠️ [轉錄啟動] 切片 {seq} 轉錄失敗")
        except Exception as transcription_error:
            logger.error(f"❌ [轉錄服務錯誤] 切片 {seq}: {transcription_error}")
            await transcript_hub.broadcast_error(str(sid), "transcription_service_error", str(transcription_error), seq)

        logger.info(f"✅ [背景轉錄] 切片 {seq} 處理完成")

    except Exception as e:
        logger.error(f"❌ [背景轉錄] 切片 {seq} 處理失敗: {e}")
        # 標記切片錯誤狀態
        await _mark_segment_error(sid, seq, str(e))
        # 廣播錯誤到前端
        await transcript_hub.broadcast_error(str(sid), "processing_error", str(e), seq)


async def _mark_segment_error(sid: UUID, seq: int, error_message: str):
    """標記切片處理錯誤"""
    try:
        supabase = get_supabase_client()
        # 可以考慮在 audio_files 表添加 error_message 欄位，或建立錯誤記錄表
        logger.error(f"切片錯誤記錄: session={sid}, seq={seq}, error={error_message}")
    except Exception as e:
        logger.error(f"記錄切片錯誤失敗: {e}")





# END FILE CONTENTS


# File: frontend/app-store-zustand.ts

export type AppState =
    | 'default'
    | 'session_creating'
    | 'recording_waiting'
    | 'recording_active'
    | 'processing'
    | 'finished'


# END FILE CONTENTS


# File: frontend/components/ui/avatar.tsx

"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }


# END FILE CONTENTS


# File: app/services/r2_client.py

"""
Cloudflare R2 儲存服務客戶端
使用 Cloudflare API Token 認證
"""

import os
import logging
import asyncio
import aiohttp
from typing import Dict, Any
from uuid import UUID
import requests
from dotenv import load_dotenv
from supabase import Client
from app.core.config import settings

# 載入環境變數
load_dotenv()

logger = logging.getLogger(__name__)

class R2ClientError(Exception):
    """R2 客戶端異常"""
    pass

class R2Client:
    """Cloudflare R2 儲存客戶端 - 使用 API Token 認證"""

    def __init__(self):
        """初始化 R2 客戶端"""
        self.account_id = os.getenv('R2_ACCOUNT_ID')
        self.bucket_name = os.getenv('R2_BUCKET_NAME', 'studyscriber-audio')
        self.api_token = os.getenv('R2_API_TOKEN')

        # 驗證必要配置
        if not self.account_id:
            raise R2ClientError("缺少 R2_ACCOUNT_ID 環境變數")

        if not self.api_token:
            raise R2ClientError("缺少 R2_API_TOKEN 環境變數")

        # 初始化 API Token 客戶端
        self.api_base_url = f"https://api.cloudflare.com/client/v4/accounts/{self.account_id}/r2/buckets/{self.bucket_name}/objects"
        self.headers = {
            'Authorization': f'Bearer {self.api_token}',
            'Content-Type': 'application/octet-stream'
        }

        logger.info("R2 客戶端初始化成功，使用 API Token 認證")

    async def store_segment(self, sid: UUID, seq: int, blob: bytes) -> str:
        """
        儲存音檔切片到 R2 (簡化版 REST API 架構)

        Args:
            sid: 會話 ID
            seq: 切片序號
            blob: 音檔二進制資料

        Returns:
            str: R2 儲存鍵值

        Raises:
            R2ClientError: 上傳失敗時拋出
        """
        key = f"{sid}/{seq:06}.webm"
        url = f"{self.api_base_url}/{key}"

        headers = {
            "Authorization": f"Bearer {self.api_token}",
            "Content-Type": "audio/webm"
        }

        try:
            async with aiohttp.ClientSession() as session:
                async with session.put(url, data=blob, headers=headers) as response:
                    if response.status in [200, 201]:
                        logger.info(f"✅ R2 上傳成功: {key} ({len(blob)} bytes)")
                        return key
                    else:
                        error_text = await response.text()
                        raise R2ClientError(f"R2 上傳失敗: {response.status} - {error_text}")

        except aiohttp.ClientError as e:
            raise R2ClientError(f"R2 上傳連線錯誤: {str(e)}")
        except Exception as e:
            raise R2ClientError(f"R2 上傳未知錯誤: {str(e)}")

    async def test_connection(self) -> Dict[str, Any]:
        """測試連接"""
        try:
            # 測試 token 有效性
            verify_url = "https://api.cloudflare.com/client/v4/user/tokens/verify"
            response = requests.get(verify_url, headers={'Authorization': f'Bearer {self.api_token}'})

            if response.status_code == 200:
                result = response.json()
                return {
                    'success': True,
                    'auth_method': 'api_token',
                    'token_status': result.get('result', {}).get('status'),
                    'account_id': self.account_id,
                    'bucket_name': self.bucket_name
                }
            else:
                return {
                    'success': False,
                    'error': f'Token 驗證失敗: {response.status_code}',
                    'auth_method': 'api_token'
                }
        except Exception as e:
            return {
                'success': False,
                'error': f'API Token 連接測試失敗: {str(e)}',
                'auth_method': 'api_token'
            }

    async def upload_file(self, key: str, data: bytes, content_type: str = 'application/octet-stream') -> Dict[str, Any]:
        """上傳檔案到 R2"""
        try:
            url = f"{self.api_base_url}/{key}"
            headers = self.headers.copy()
            headers['Content-Type'] = content_type

            response = requests.put(url, data=data, headers=headers)

            if response.status_code in [200, 201]:
                return {
                    'success': True,
                    'key': key,
                    'size': len(data),
                    'method': 'api_token'
                }
            else:
                return {
                    'success': False,
                    'error': f'上傳失敗: {response.status_code} - {response.text}',
                    'method': 'api_token'
                }
        except Exception as e:
            return {
                'success': False,
                'error': f'API Token 上傳失敗: {str(e)}',
                'method': 'api_token'
            }

    async def store_chunk_blob(
        self, session_id: UUID, chunk_sequence: int, blob_data: bytes, supabase_client: Client
    ) -> dict:
        """
        將音檔切片 Blob 存儲到 R2 並在資料庫中記錄

        Args:
            session_id: 會話 ID
            chunk_sequence: 音檔切片序號
            blob_data: 音檔二進制數據
            supabase_client: Supabase 客戶端實例

        Returns:
            Dict: 包含操作結果的字典
        """
        # 生成 R2 儲存鍵值
        r2_key = generate_audio_key(str(session_id), chunk_sequence)

        # 最多重試3次上傳
        max_retries = 3
        upload_result = None

        for attempt in range(max_retries):
            try:
                # 上傳檔案到 R2
                upload_result = await self.upload_file(
                    key=r2_key,
                    data=blob_data,
                    content_type='audio/webm'
                )

                if upload_result['success']:
                    break

                logger.warning(f"上傳失敗，第 {attempt + 1} 次嘗試: {upload_result.get('error')}")

                # 指數退避
                if attempt < max_retries - 1:
                    await asyncio.sleep(2 ** attempt)

            except Exception as e:
                logger.error(f"上傳異常，第 {attempt + 1} 次嘗試: {str(e)}")
                if attempt == max_retries - 1:
                    upload_result = {
                        'success': False,
                        'error': f'上傳失敗，已重試 {max_retries} 次: {str(e)}'
                    }
                elif attempt < max_retries - 1:
                    await asyncio.sleep(2 ** attempt)

        if not upload_result['success']:
            return {
                'success': False,
                'error': f'R2 上傳失敗: {upload_result.get("error")}',
                'session_id': session_id,
                'chunk_sequence': chunk_sequence
            }

        # 使用傳入的 supabase_client 進行資料庫操作
        try:
            audio_file_record = {
                "session_id": str(session_id),
                "chunk_sequence": chunk_sequence,
                "r2_key": r2_key,
                "r2_bucket": self.bucket_name,
                "file_size": len(blob_data),
                "duration_seconds": settings.AUDIO_CHUNK_DURATION_SEC  # 從環境變數讀取切片時長
            }

            db_response = supabase_client.table("audio_files").insert(audio_file_record).execute()

            if not db_response.data:
                return {
                    'success': False,
                    'error': '資料庫記錄建立失敗',
                    'session_id': session_id,
                    'chunk_sequence': chunk_sequence
                }

        except Exception as db_error:
            logger.error(f"資料庫操作失敗: {str(db_error)}")
            return {
                'success': False,
                'error': f'資料庫記錄建立失敗: {str(db_error)}',
                'session_id': session_id,
                'chunk_sequence': chunk_sequence
            }

        return {
            'success': True,
            'session_id': session_id,
            'chunk_sequence': chunk_sequence,
            'r2_key': r2_key,
            'r2_bucket': self.bucket_name,
            'file_size': len(blob_data),
            'upload_method': upload_result.get('method')
        }

    def get_download_url(self, key: str) -> str:
        """
        獲取檔案的直接下載 URL

        注意：此 URL 需要 API Token 認證，適用於服務端使用
        對於客戶端下載，建議使用 Cloudflare 的公開 URL 或實作代理端點
        """
        return f"{self.api_base_url}/{key}"

    async def download_file(self, key: str) -> Dict[str, Any]:
        """從 R2 下載檔案"""
        try:
            url = f"{self.api_base_url}/{key}"
            headers = {'Authorization': f'Bearer {self.api_token}'}

            response = requests.get(url, headers=headers)

            if response.status_code == 200:
                return {
                    'success': True,
                    'key': key,
                    'data': response.content,
                    'size': len(response.content),
                    'method': 'api_token'
                }
            elif response.status_code == 404:
                return {
                    'success': False,
                    'error': f'檔案不存在: {key}',
                    'method': 'api_token'
                }
            else:
                return {
                    'success': False,
                    'error': f'下載失敗: {response.status_code} - {response.text}',
                    'method': 'api_token'
                }
        except Exception as e:
            return {
                'success': False,
                'error': f'API Token 下載失敗: {str(e)}',
                'method': 'api_token'
            }

def get_r2_client() -> R2Client:
    """獲取 R2 客戶端實例"""
    return R2Client()

def generate_audio_key(session_id: str, chunk_sequence: int) -> str:
    """生成音檔儲存鍵名"""
    return f"audio/{session_id}/chunk_{chunk_sequence:04d}.webm"


# END FILE CONTENTS


# File: frontend/lib/initial-state-loader.ts

"use client"

import type { AppData } from '../types/app-state'

/**
 * 初始狀態載入器
 * 負責從 localStorage 或其他持久化存儲載入初始狀態
 */
export class InitialStateLoader {
    private static readonly STORAGE_KEYS = {
        DRAFT_NOTE: 'draft_note',
        LAST_SESSION: 'last_session',
        APP_STATE: 'app_state_v1',
    } as const

    /**
     * 載入初始應用狀態
     * 優先順序：localStorage > 預設狀態
     */
    static loadInitialAppData(): AppData {
        console.log('🔄 [InitialStateLoader] 開始載入初始狀態')

        try {
            // 1. 載入草稿筆記
            const draftContent = this.loadDraftNote()

            // 2. 載入上次會話資訊（如果有的話）
            const lastSession = this.loadLastSession()

            // 3. 載入完整應用狀態（如果有的話）
            const savedAppState = this.loadSavedAppState()

            // 修正：如果儲存的狀態是暫時性或已完成的，則重置為預設狀態
            console.log('🔍 [InitialStateLoader] 檢查儲存的狀態:', {
                savedState: savedAppState?.state,
                shouldReset: savedAppState?.state && ['recording_waiting', 'recording_active', 'processing', 'finished'].includes(savedAppState.state)
            })

            const validInitialState =
                savedAppState?.state &&
                    !['recording_waiting', 'recording_active', 'processing', 'finished'].includes(savedAppState.state)
                    ? savedAppState.state
                    : 'default'

            console.log('🔍 [InitialStateLoader] 最終初始狀態:', validInitialState)

            const initialAppData: AppData = {
                state: validInitialState,
                transcriptEntries: savedAppState?.transcriptEntries || [],
                editorContent: draftContent || '',
                isRecording: false, // 重啟後永遠不應該是錄音狀態
                recordingTime: 0,   // 重啟後重置錄音時間
                session: lastSession, // 可能為 null
            }

            console.log('🔄 [InitialStateLoader] 初始狀態載入完成:', {
                hasDraftContent: !!draftContent,
                hasLastSession: !!lastSession,
                hasSavedAppState: !!savedAppState,
                state: initialAppData.state,
                transcriptCount: initialAppData.transcriptEntries.length
            })

            return initialAppData
        } catch (error) {
            console.error('❌ [InitialStateLoader] 載入初始狀態失敗:', error)
            return this.getDefaultAppData()
        }
    }

    /**
     * 載入草稿筆記內容
     */
    private static loadDraftNote(): string {
        try {
            const draft = localStorage.getItem(this.STORAGE_KEYS.DRAFT_NOTE)
            return draft || ''
        } catch (error) {
            console.warn('⚠️ [InitialStateLoader] 載入草稿筆記失敗:', error)
            return ''
        }
    }

    /**
     * 載入上次會話資訊
     */
    private static loadLastSession(): AppData['session'] {
        try {
            const sessionData = localStorage.getItem(this.STORAGE_KEYS.LAST_SESSION)
            if (!sessionData) return null

            const session = JSON.parse(sessionData)

            // 驗證會話資料結構
            if (session && typeof session === 'object' && session.id) {
                // 只有在會話狀態不是 completed 或 error 時才恢復
                if (session.status === 'completed' || session.status === 'error') {
                    console.log('🔄 [InitialStateLoader] 上次會話已完成，不恢復:', session.status)
                    return null
                }

                console.log('🔄 [InitialStateLoader] 恢復上次會話:', {
                    id: session.id,
                    status: session.status,
                    type: session.type
                })
                return session
            }

            return null
        } catch (error) {
            console.warn('⚠️ [InitialStateLoader] 載入上次會話失敗:', error)
            return null
        }
    }

    /**
     * 載入完整的應用狀態
     */
    private static loadSavedAppState(): Partial<AppData> | null {
        try {
            const stateData = localStorage.getItem(this.STORAGE_KEYS.APP_STATE)
            if (!stateData) return null

            const savedState = JSON.parse(stateData)

            // 驗證狀態資料結構
            if (savedState && typeof savedState === 'object') {
                console.log('🔄 [InitialStateLoader] 載入已儲存的應用狀態')
                return savedState
            }

            return null
        } catch (error) {
            console.warn('⚠️ [InitialStateLoader] 載入應用狀態失敗:', error)
            return null
        }
    }

    /**
     * 獲取預設應用狀態
     */
    private static getDefaultAppData(): AppData {
        console.log('🔄 [InitialStateLoader] 使用預設狀態')
        return {
            state: 'default',
            transcriptEntries: [],
            editorContent: '',
            isRecording: false,
            recordingTime: 0,
            session: null,
        }
    }

    /**
     * 儲存應用狀態到 localStorage
     */
    static saveAppState(appData: AppData): void {
        try {
            // 儲存完整應用狀態（排除敏感資訊）
            const stateToSave = {
                state: appData.state,
                transcriptEntries: appData.transcriptEntries,
                // 不儲存 editorContent（已單獨儲存為 draft_note）
                // 不儲存 isRecording 和 recordingTime（重啟後應重置）
            }

            localStorage.setItem(this.STORAGE_KEYS.APP_STATE, JSON.stringify(stateToSave))

            // 儲存會話資訊
            if (appData.session) {
                localStorage.setItem(this.STORAGE_KEYS.LAST_SESSION, JSON.stringify(appData.session))
            } else {
                localStorage.removeItem(this.STORAGE_KEYS.LAST_SESSION)
            }

            console.log('💾 [InitialStateLoader] 應用狀態已儲存')
        } catch (error) {
            console.error('❌ [InitialStateLoader] 儲存應用狀態失敗:', error)
        }
    }

    /**
     * 清除所有持久化狀態
     */
    static clearPersistedState(): void {
        try {
            localStorage.removeItem(this.STORAGE_KEYS.APP_STATE)
            localStorage.removeItem(this.STORAGE_KEYS.LAST_SESSION)
            // 注意：不清除 DRAFT_NOTE，因為那是用戶的草稿內容

            console.log('🗑️ [InitialStateLoader] 持久化狀態已清除')
        } catch (error) {
            console.error('❌ [InitialStateLoader] 清除持久化狀態失敗:', error)
        }
    }

    /**
     * 檢查是否有持久化狀態
     */
    static hasPersistedState(): boolean {
        try {
            return !!(
                localStorage.getItem(this.STORAGE_KEYS.APP_STATE) ||
                localStorage.getItem(this.STORAGE_KEYS.LAST_SESSION)
            )
        } catch (error) {
            console.warn('⚠️ [InitialStateLoader] 檢查持久化狀態失敗:', error)
            return false
        }
    }
}


# END FILE CONTENTS


# File: frontend/lib/audio-recorder.ts

"use client"

import { getAudioChunkIntervalMs } from './config'

// 音訊錄製狀態
export type AudioRecorderState = 'idle' | 'recording' | 'paused' | 'error'

// 音訊錄製配置
export interface AudioRecorderConfig {
  chunkInterval: number // 切片間隔（毫秒）
  mimeType: string // 音訊格式
  audioBitsPerSecond?: number // 音訊位元率
}

// 音訊切片資料
export interface AudioChunk {
  blob: Blob
  timestamp: number
  duration: number
  sequence: number
}

// 預設配置
const DEFAULT_CONFIG: AudioRecorderConfig = {
  chunkInterval: 12000, // 12 秒
  mimeType: 'audio/webm;codecs=opus',
  audioBitsPerSecond: 64000, // 64 kbps
}

// 支援的音訊格式列表（優先順序）
// MP4 格式在 FFmpeg 7.1.1 中有更好的兼容性，因此放在第一位
const SUPPORTED_MIME_TYPES = [
  'audio/webm;codecs=opus', // 第一優先：WebM Opus 編解碼器，音質優秀且串流友好
  'audio/webm',             // 第二優先：WebM 通用格式
  'audio/mp4',              // 第三優先：MP4 作為備選方案
  'audio/ogg;codecs=opus',
  'audio/wav',
]

export class AudioRecorder {
  private mediaRecorder: MediaRecorder | null = null
  private stream: MediaStream | null = null
  private config: AudioRecorderConfig
  private state: AudioRecorderState = 'idle'
  private chunkSequence: number = 0 // 切片序號計數器

  // 事件回調
  private onChunkCallback?: (chunk: AudioChunk) => void
  private onStateChangeCallback?: (state: AudioRecorderState) => void
  private onErrorCallback?: (error: Error) => void

  constructor(config: Partial<AudioRecorderConfig> = {}) {
    this.config = { ...DEFAULT_CONFIG, ...config }
  }

  /**
   * 開始錄製
   */
  async start(onDataAvailable: (chunk: AudioChunk) => void): Promise<void> {
    if (this.mediaRecorder && this.mediaRecorder.state === 'recording') {
      throw new Error('錄製已在進行中')
    }

    // 獲取麥克風權限
    this.stream = await navigator.mediaDevices.getUserMedia({ audio: true })

    // 創建 MediaRecorder
    this.mediaRecorder = new MediaRecorder(this.stream, {
      mimeType: this.config.mimeType,
      audioBitsPerSecond: this.config.audioBitsPerSecond,
    })

    // 重置序號計數器
    this.chunkSequence = 0

    // 監聽資料可用事件
    this.mediaRecorder.ondataavailable = (event) => {
      console.log('🎙️ [AudioRecorder] MediaRecorder.ondataavailable 觸發', {
        dataSize: event.data.size,
        sequence: this.chunkSequence,
        timestamp: new Date().toISOString()
      })

      if (event.data.size > 0) {
        const chunk: AudioChunk = {
          blob: event.data,
          timestamp: Date.now(),
          duration: this.config.chunkInterval,
          sequence: this.chunkSequence++, // 分配序號並遞增
        }

        console.log('📦 [AudioRecorder] 建立音頻切片', {
          sequence: chunk.sequence,
          size: chunk.blob.size,
          duration: chunk.duration,
          mimeType: this.config.mimeType
        })

        onDataAvailable(chunk)
      } else {
        console.warn('⚠️ [AudioRecorder] ondataavailable 但 data.size = 0')
      }
    }

    // 開始錄製，每隔指定時間產生一個切片
    console.log('🎬 [AudioRecorder] 開始錄製', {
      chunkInterval: this.config.chunkInterval,
      mimeType: this.config.mimeType,
      state: this.mediaRecorder.state
    })

    this.mediaRecorder.start(this.config.chunkInterval)

    console.log('✅ [AudioRecorder] MediaRecorder.start() 已調用', {
      state: this.mediaRecorder.state,
      stream: this.stream ? 'active' : 'null'
    })
  }

  /**
   * 停止錄製
   */
  stop(): void {
    if (this.mediaRecorder && this.mediaRecorder.state === 'recording') {
      this.mediaRecorder.stop()
    }

    if (this.stream) {
      this.stream.getTracks().forEach(track => track.stop())
      this.stream = null
    }

    this.mediaRecorder = null
    this.chunkSequence = 0 // 重置序號
  }

  /**
   * 獲取錄製狀態
   */
  get isRecording(): boolean {
    return this.mediaRecorder !== null && this.mediaRecorder.state === 'recording'
  }

  /**
   * 獲取當前序號
   */
  get currentSequence(): number {
    return this.chunkSequence
  }

  // 清理資源
  cleanup(): void {
    this.stop()

    if (this.stream) {
      this.stream.getTracks().forEach(track => track.stop())
      this.stream = null
    }

    this.mediaRecorder = null
    console.log('🧹 音訊錄製器已清理')
  }

  // 設定狀態
  private setState(newState: AudioRecorderState): void {
    this.state = newState
    this.onStateChangeCallback?.(newState)
  }

  // 錯誤處理
  private handleError(error: Error): void {
    console.error('❌ AudioRecorder 錯誤:', error)
    this.setState('error')
    this.onErrorCallback?.(error)
  }

  // 事件回調設定
  onChunk(callback: (chunk: AudioChunk) => void): void {
    this.onChunkCallback = callback
  }

  onStateChange(callback: (state: AudioRecorderState) => void): void {
    this.onStateChangeCallback = callback
  }

  onError(callback: (error: Error) => void): void {
    this.onErrorCallback = callback
  }

  // Getter
  get currentState(): AudioRecorderState {
    return this.state
  }

  get currentConfig(): AudioRecorderConfig {
    return { ...this.config }
  }
}

// 工廠函數
export const createAudioRecorder = (config?: Partial<AudioRecorderConfig>): AudioRecorder => {
  return new AudioRecorder(config)
}

/**
 * 檢查瀏覽器音訊錄製支援
 */
export async function checkAudioRecordingSupport(): Promise<{ isSupported: boolean; error?: string }> {
  if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
    return { isSupported: false, error: '瀏覽器不支援 MediaDevices API' }
  }

  if (!window.MediaRecorder) {
    return { isSupported: false, error: '瀏覽器不支援 MediaRecorder API' }
  }

  // 檢查 MIME 類型支援
  if (!MediaRecorder.isTypeSupported(DEFAULT_CONFIG.mimeType)) {
    return { isSupported: false, error: `不支援音訊格式: ${DEFAULT_CONFIG.mimeType}` }
  }

  try {
    const stream = await navigator.mediaDevices.getUserMedia({ audio: true })
    // 立即停止串流以釋放資源
    stream.getTracks().forEach(track => track.stop())
    return { isSupported: true }
  } catch (error) {
    return { isSupported: false, error: `無法獲取麥克風權限: ${error}` }
  }
}


# END FILE CONTENTS


# File: frontend/__tests__/integration/websocket-state-sync.test.ts

import { beforeEach, describe, expect, test, vi } from 'vitest'
import { renderHook, act } from '@testing-library/react'
import { createElement } from 'react'
import { AppStateProvider } from '../../hooks/use-app-state-context'
import { useTranscriptNew } from '../../hooks/use-transcript-new'
import { featureFlagManager } from '../../lib/feature-flags'
import type { ReactNode } from 'react'

// Mock WebSocket
class MockWebSocket {
    onopen: ((event: Event) => void) | null = null
    onmessage: ((event: MessageEvent) => void) | null = null
    onerror: ((event: Event) => void) | null = null
    onclose: ((event: CloseEvent) => void) | null = null
    readyState = 0 // WebSocket.CONNECTING

    constructor(public url: string) {
        // 模擬異步連接
        setTimeout(() => {
            this.readyState = 1 // WebSocket.OPEN
            if (this.onopen) {
                this.onopen(new Event('open'))
            }
        }, 10)
    }

    send(data: string) {
        // 模擬發送數據
    }

    close() {
        this.readyState = 3 // WebSocket.CLOSED
        if (this.onclose) {
            this.onclose(new CloseEvent('close'))
        }
    }

    // 模擬接收消息
    simulateMessage(data: any) {
        if (this.onmessage) {
            this.onmessage(new MessageEvent('message', { data: JSON.stringify(data) }))
        }
    }

    // 模擬錯誤
    simulateError() {
        if (this.onerror) {
            this.onerror(new Event('error'))
        }
    }
}

// Mock localStorage
const localStorageMock = {
    getItem: vi.fn(),
    setItem: vi.fn(),
    removeItem: vi.fn(),
    clear: vi.fn(),
}

Object.defineProperty(window, 'localStorage', {
    value: localStorageMock
})

// Mock WebSocket globally
Object.defineProperty(window, 'WebSocket', {
    value: MockWebSocket
})

function TestWrapper({ children }: { children: ReactNode }) {
    return createElement(AppStateProvider, null, children)
}

describe('WebSocket 與狀態同步測試', () => {
    beforeEach(() => {
        vi.clearAllMocks()
        featureFlagManager.reset()
        featureFlagManager.enable('useNewStateManagement')
        featureFlagManager.enable('useNewTranscriptHook')
        localStorageMock.getItem.mockReturnValue(null)
    })

    describe('WebSocket 連接管理', () => {
        test('應該能夠建立 WebSocket 連接', async () => {
            const { result } = renderHook(() => useTranscriptNew(), {
                wrapper: TestWrapper
            })

            // 初始狀態應該是未連接
            expect(result.current.isConnected).toBe(false)

            // 這裡我們無法直接測試 WebSocket 連接，因為它在 TranscriptManager 中
            // 但我們可以測試 Hook 的基本功能
            expect(result.current.error).toBe(null)
            expect(result.current.autoScrollEnabled).toBe(true)
        })

        test('應該提供 WebSocket 控制方法', () => {
            const { result } = renderHook(() => useTranscriptNew(), {
                wrapper: TestWrapper
            })

            // 檢查所有必要的方法都存在
            expect(typeof result.current.disconnect).toBe('function')
            expect(typeof result.current.clearTranscripts).toBe('function')
            expect(typeof result.current.enableAutoScroll).toBe('function')
            expect(typeof result.current.disableAutoScroll).toBe('function')
            expect(typeof result.current.scrollToLatest).toBe('function')
        })

        test('應該能夠控制自動滾動', async () => {
            const { result } = renderHook(() => useTranscriptNew(), {
                wrapper: TestWrapper
            })

            // 初始狀態：自動滾動啟用
            expect(result.current.autoScrollEnabled).toBe(true)

            // 禁用自動滾動
            await act(async () => {
                result.current.disableAutoScroll()
            })

            expect(result.current.autoScrollEnabled).toBe(false)

            // 啟用自動滾動
            await act(async () => {
                result.current.enableAutoScroll()
            })

            expect(result.current.autoScrollEnabled).toBe(true)
        })
    })

    describe('狀態同步', () => {
        test('Hook 應該與 Context 狀態保持同步', () => {
            const { result } = renderHook(() => useTranscriptNew(), {
                wrapper: TestWrapper
            })

            // 檢查 Hook 返回的狀態結構
            expect(result.current).toHaveProperty('isConnected')
            expect(result.current).toHaveProperty('error')
            expect(result.current).toHaveProperty('autoScrollEnabled')
            expect(result.current).toHaveProperty('disconnect')
            expect(result.current).toHaveProperty('clearTranscripts')
        })

        test('清除逐字稿應該正常工作', async () => {
            const { result } = renderHook(() => useTranscriptNew(), {
                wrapper: TestWrapper
            })

            // 清除逐字稿不應該拋出錯誤
            await act(async () => {
                expect(() => result.current.clearTranscripts()).not.toThrow()
            })
        })

        test('斷開連接應該正常工作', async () => {
            const { result } = renderHook(() => useTranscriptNew(), {
                wrapper: TestWrapper
            })

            // 斷開連接不應該拋出錯誤
            await act(async () => {
                expect(() => result.current.disconnect()).not.toThrow()
            })
        })
    })

    describe('錯誤處理', () => {
        test('應該正確處理 WebSocket 錯誤', () => {
            const { result } = renderHook(() => useTranscriptNew(), {
                wrapper: TestWrapper
            })

            // 初始錯誤狀態應該是 null
            expect(result.current.error).toBe(null)
        })

        test('Hook unmount 應該清理資源', () => {
            const { unmount } = renderHook(() => useTranscriptNew(), {
                wrapper: TestWrapper
            })

            // unmount 應該正常執行而不拋出錯誤
            expect(() => unmount()).not.toThrow()
        })
    })

    describe('功能開關整合', () => {
        test('當功能開關關閉時應該使用舊版本', () => {
            // 禁用新的 Transcript Hook
            featureFlagManager.disable('useNewTranscriptHook')

            const { result } = renderHook(() => useTranscriptNew(), {
                wrapper: TestWrapper
            })

            // 應該仍然提供相同的 API
            expect(result.current).toHaveProperty('isConnected')
            expect(result.current).toHaveProperty('error')
            expect(result.current).toHaveProperty('autoScrollEnabled')
        })

        test('當功能開關啟用時應該使用新版本', () => {
            // 確保新功能開關啟用
            featureFlagManager.enable('useNewTranscriptHook')

            const { result } = renderHook(() => useTranscriptNew(), {
                wrapper: TestWrapper
            })

            // 應該提供完整的 API
            expect(result.current).toHaveProperty('isConnected')
            expect(result.current).toHaveProperty('error')
            expect(result.current).toHaveProperty('autoScrollEnabled')
            expect(result.current).toHaveProperty('disconnect')
            expect(result.current).toHaveProperty('clearTranscripts')
        })
    })

    describe('多實例測試', () => {
        test('多個 Hook 實例應該共享 TranscriptManager', () => {
            const { result: result1 } = renderHook(() => useTranscriptNew(), {
                wrapper: TestWrapper
            })
            const { result: result2 } = renderHook(() => useTranscriptNew(), {
                wrapper: TestWrapper
            })

            // 兩個實例應該有相同的連接狀態
            expect(result1.current.isConnected).toBe(result2.current.isConnected)
            expect(result1.current.error).toBe(result2.current.error)
        })

        test('一個實例的操作應該影響其他實例', async () => {
            const { result: result1 } = renderHook(() => useTranscriptNew(), {
                wrapper: TestWrapper
            })
            const { result: result2 } = renderHook(() => useTranscriptNew(), {
                wrapper: TestWrapper
            })

            // 從第一個實例禁用自動滾動
            await act(async () => {
                result1.current.disableAutoScroll()
            })

            // 第二個實例應該反映相同的狀態
            expect(result2.current.autoScrollEnabled).toBe(false)
        })
    })

    describe('記憶體管理', () => {
        test('Hook 應該正確清理資源', () => {
            const { unmount } = renderHook(() => useTranscriptNew(), {
                wrapper: TestWrapper
            })

            // 多次 mount/unmount 應該穩定
            for (let i = 0; i < 3; i++) {
                unmount()
                const { unmount: newUnmount } = renderHook(() => useTranscriptNew(), {
                    wrapper: TestWrapper
                })
                expect(() => newUnmount()).not.toThrow()
            }
        })

        test('Context unmount 不應該影響 TranscriptManager', () => {
            let unmount1: () => void
            let unmount2: () => void

            // 第一個 Provider
            const { unmount: u1 } = renderHook(() => useTranscriptNew(), {
                wrapper: TestWrapper
            })
            unmount1 = u1

            // 第二個 Provider
            const { unmount: u2 } = renderHook(() => useTranscriptNew(), {
                wrapper: TestWrapper
            })
            unmount2 = u2

            // 清理第一個不應該影響第二個
            expect(() => unmount1()).not.toThrow()
            expect(() => unmount2()).not.toThrow()
        })
    })
})


# END FILE CONTENTS


# File: .cursor/rules/rules.mdc

---
description:
globs:
alwaysApply: true
---
<!-- Source:
1. https://tidyfirst.substack.com/p/augmented-coding-beyond-the-vibes
2. https://github.com/arthow4n/live-language-mate/blob/master/CLAUDE.md -->

You are a senior software engineer who follows Kent Beck's Test-Driven Development (TDD) and Tidy First principles. Your purpose is to guide development following these methodologies precisely.


# Basic Rules

1. If the project has a PRD or SPEC, read them carefully to ensure that what you're doing is consistent and aligned with the correct objectives.
2. When you are coding or implementing the test, implement only enough code to fulfill that need or make the test pass.


# User Preferences

-  **Language Preference**: Communicate using Traditional Chinese (zh-tw) from Taiwan
-  **Simplicity Principle**: Avoid overly complex tool settings and configuration files


## Planning and task management

- Prioritize the use of Task Manager for task analysis and scheduling.
- When executing tasks from the Todos checklist, report and explain after completing each task, check it off, and then proceed to the next task.
- You are meant to work on your own unattended once the user has approved your initial work plan, you should plan ahead for working on your own.
- When planning, the plan is always for yourself to be able to follow the plan and work on the task immediately after the plan is approved by the user.
- When planning, automatically break down the task into smaller tasks and utilise the TodoRead & TodoWrite tools.
- When planning, plan ahead to see if you need to update any tests.
- When planning, think and review the plan yourself to see if you are over-engineering, you should focus on only making the absolutely relevant and needed chagnes. You need to review your own plan at least review 2 times.
- When planning is completed, write the spec to  ./docs as a markdown, using its functionality as the filename.
- Before you start working, make sure to step back and break down the plan into smaller todo items.


## Development process

- You should do TDD:
  1. Review the code paths that will be tested from beginning to end, then think how to write the correct test case.
  2. Write a test case that is failing, which will be fixed after correct implementation.
  3. Start implementation.
  4. Fix until test passes.
  5. Commit and push after each task is done.
- If test is failng more than 3 times in a row, step back and read again the code path from beginning to end, think how to address the issue systematically before you rerun the test again.
- Question yourself are your soution and test addressing what the user asked for.
- Always use environment-variable config files for clean, unified management—never hard-code.
- Don't skip anything in your todo.

# CORE DEVELOPMENT PRINCIPLES

- Always follow the TDD cycle: Red → Green → Refactor

- Write the simplest failing test first

- Implement the minimum code needed to make tests pass

- Refactor only after tests are passing

- Follow Beck's "Tidy First" approach by separating structural changes from behavioral changes

- Maintain high code quality throughout development

# TDD METHODOLOGY GUIDANCE

- Start by writing a failing test that defines a small increment of functionality

- Use meaningful test names that describe behavior (e.g., "shouldSumTwoPositiveNumbers")

- Make test failures clear and informative

- Write just enough code to make the test pass - no more

- Once tests pass, consider if refactoring is needed

- Repeat the cycle for new functionality

# TIDY FIRST APPROACH

- Separate all changes into two distinct types:

1. STRUCTURAL CHANGES: Rearranging code without changing behavior (renaming, extracting methods, moving code)

2. BEHAVIORAL CHANGES: Adding or modifying actual functionality

- Never mix structural and behavioral changes in the same commit

- Always make structural changes first when both are needed

# CODE QUALITY STANDARDS

- Eliminate duplication ruthlessly

- Express intent clearly through naming and structure

- Make dependencies explicit

- Keep methods small and focused on a single responsibility

- Minimize state and side effects

- Use the simplest solution that could possibly work

# REFACTORING GUIDELINES

- Refactor only when tests are passing (in the "Green" phase)

- Use established refactoring patterns with their proper names

- Make one refactoring change at a time

- Run tests after each refactoring step

- Prioritize refactorings that remove duplication or improve clarity

# EXAMPLE WORKFLOW

When approaching a new feature:

1. Write a simple failing test for a small part of the feature

2. Implement the bare minimum to make it pass

3. Run tests to confirm they pass (Green)

4. Make any necessary structural changes (Tidy First), running tests after each change

5. Commit structural changes separately

6. Add another test for the next small increment of functionality

7. Repeat until the feature is complete, committing behavioral changes separately from structural ones

Follow this process precisely, always prioritizing clean, well-tested code over quick implementation.

Always write one test at a time, make it run, then improve structure. Always run all the tests (except long-running tests) each time.



# Engineering mindset

- You should follow the existing code style, if you are about to implement something new or write a new test, search for existing files to understand the current style and convention.
- You should actively look for reusing shared function/component/hook etc, and search for another potentially extractable/sharable code to move to shared code.
- Avoid over-engineering. Keep thinking and reviewing whether if your solution is over-engineered, step back, look around and see if you can simplify your solution and its related code paths and only make the absolutely necessary changes.
- For asynchronous logic flow, no matter in test, code or UI, make sure to implement them in a way where the cause and effect can be logically followed, for example by using async-await, event handler, or callback. Avoid using timeout/polling to handle asynchronous logic flow, if timeout/polling is really the only way to implement the logic, make sure to comment why timeout/polling is used instead of the other better approaches.
- Don't leave unnecessary comment, unmaintained comment can become stale and adds confusion. You should only leave comment for explaining the motivation behind the code, not to repeat what the code is doing.
- Make sure your code can be logically followed, there should not be implicit flow.
- Make sure the cause and effect in the code flow is deterministic, you should not cause race condition.
- If you belive something might be caused by a race condition or a timing issue, you should default to step back and read through all the related code paths from beginning to end, and then make a comprehensive argument about why it's really a race condition or timing issue. This is to make sure you don't just blindly guess and fix the wrong problem.

# Tool usage

- Always use MCP tools, including Serena and Context7, for research and feasibility analysis evaluation before editing code.
- Batch your tool calls, use many tools at once.


# Other Rules

Always follow the instructions in these rules:

- @frontend.mdc
- @backend.mdc
- @ui-rules/shadcn-tailwind-ui-guideline.mdc



# END FILE CONTENTS


# File: frontend/lib/stream/__tests__/audio-uploader.test.ts

import { describe, test, expect, beforeEach, vi, afterEach } from 'vitest'
import { AudioUploader } from '../audio-uploader'

// Mock WebSocket
class MockWebSocket {
    static CONNECTING = 0
    static OPEN = 1
    static CLOSING = 2
    static CLOSED = 3

    readyState: number = MockWebSocket.CONNECTING
    onopen: ((event: Event) => void) | null = null
    onclose: ((event: CloseEvent) => void) | null = null
    onerror: ((event: Event) => void) | null = null
    onmessage: ((event: MessageEvent) => void) | null = null

    send = vi.fn()
    close = vi.fn()

    constructor(public url: string) {
        // 模擬異步連接
        setTimeout(() => {
            this.readyState = MockWebSocket.OPEN
            this.onopen?.(new Event('open'))
        }, 10)
    }

    // 模擬連接關閉
    simulateClose(wasClean: boolean = true, code: number = 1000, reason: string = '') {
        this.readyState = MockWebSocket.CLOSED
        const closeEvent = new CloseEvent('close', { wasClean, code, reason })
        this.onclose?.(closeEvent)
    }

    // 模擬收到消息
    simulateMessage(data: any) {
        const messageEvent = new MessageEvent('message', { data: JSON.stringify(data) })
        this.onmessage?.(messageEvent)
    }

    // 模擬錯誤
    simulateError() {
        this.onerror?.(new Event('error'))
    }
}

// Mock 全局 WebSocket
Object.defineProperty(global, 'WebSocket', {
    writable: true,
    value: MockWebSocket,
})

// Mock 環境變數
const originalEnv = process.env
beforeEach(() => {
    process.env = { ...originalEnv }
    process.env.NEXT_PUBLIC_WS_URL = 'ws://localhost:8000'
})

afterEach(() => {
    process.env = originalEnv
})

describe('AudioUploader', () => {
    let uploader: AudioUploader
    let mockWebSocket: MockWebSocket

    beforeEach(() => {
        vi.clearAllMocks()
        uploader = new AudioUploader()

        // 攔截 WebSocket 創建
        const originalWebSocket = global.WebSocket
        global.WebSocket = vi.fn((url: string) => {
            mockWebSocket = new MockWebSocket(url)
            return mockWebSocket
        }) as any
    })

    afterEach(() => {
        uploader.close()
    })

    describe('連接管理', () => {
        test('應該成功建立 WebSocket 連接', async () => {
            const connectPromise = uploader.connect('test-session-id')

            // 等待連接完成
            await connectPromise

            expect(uploader.isConnected).toBe(true)
            expect(uploader.currentSessionId).toBe('test-session-id')
            expect(uploader.currentSequence).toBe(0)
        })

        test('應該使用正確的 WebSocket URL', async () => {
            await uploader.connect('test-session-id')

            expect(global.WebSocket).toHaveBeenCalledWith(
                'ws://localhost:8000/ws/upload_audio/test-session-id'
            )
        })

        test('應該在連接時重置狀態', async () => {
            // 先發送一些數據來改變序號
            await uploader.connect('session-1')
            uploader.send(new Blob(['test']))

            expect(uploader.currentSequence).toBe(1)

            // 重新連接應該重置
            await uploader.connect('session-2')

            expect(uploader.currentSequence).toBe(0)
            expect(uploader.currentSessionId).toBe('session-2')
        })

        test('應該正確關閉連接', () => {
            uploader.close()

            expect(uploader.isConnected).toBe(false)
            expect(uploader.currentSessionId).toBe(null)
            expect(uploader.currentSequence).toBe(0)
        })
    })

    describe('數據傳送', () => {
        beforeEach(async () => {
            await uploader.connect('test-session-id')
        })

        test('應該正確發送音訊數據', () => {
            const testBlob = new Blob(['test audio data'], { type: 'audio/webm' })

            uploader.send(testBlob)

            // 應該發送兩次：序號 + 數據
            expect(mockWebSocket.send).toHaveBeenCalledTimes(2)

            // 驗證序號發送（4 字節）
            const sequenceCall = mockWebSocket.send.mock.calls[0][0]
            expect(sequenceCall).toBeInstanceOf(ArrayBuffer)
            expect(sequenceCall.byteLength).toBe(4)

            // 驗證數據發送
            const blobCall = mockWebSocket.send.mock.calls[1][0]
            expect(blobCall).toBe(testBlob)
        })

        test('應該正確遞增序號', () => {
            const blob1 = new Blob(['audio 1'])
            const blob2 = new Blob(['audio 2'])

            uploader.send(blob1)
            uploader.send(blob2)

            expect(uploader.currentSequence).toBe(2)
            expect(mockWebSocket.send).toHaveBeenCalledTimes(4) // 2 序號 + 2 數據
        })

        test('應該支援自訂序號發送', () => {
            const testBlob = new Blob(['test'])

            uploader.send(testBlob, 42)

            // 內部序號不應該改變
            expect(uploader.currentSequence).toBe(0)

            // 但應該發送指定的序號
            const sequenceCall = mockWebSocket.send.mock.calls[0][0]
            const view = new DataView(sequenceCall)
            expect(view.getUint32(0, false)).toBe(42) // big-endian
        })

        test('應該處理 WebSocket 未連接的情況', () => {
            mockWebSocket.readyState = MockWebSocket.CLOSED

            const testBlob = new Blob(['test'])
            uploader.send(testBlob)

            // 不應該發送任何數據
            expect(mockWebSocket.send).not.toHaveBeenCalled()
        })
    })

    describe('重連機制', () => {
        beforeEach(async () => {
            await uploader.connect('test-session-id')
        })

        test('應該在非正常關閉時嘗試重連', async () => {
            // 模擬非正常關閉
            mockWebSocket.simulateClose(false, 1006, 'Connection lost')

            // 等待重連邏輯觸發
            await new Promise(resolve => setTimeout(resolve, 100))

            // 應該嘗試重新創建 WebSocket
            expect(global.WebSocket).toHaveBeenCalledTimes(2)
        })

        test('應該在正常關閉時不嘗試重連', () => {
            const originalCreateWebSocket = global.WebSocket

            // 模擬正常關閉
            mockWebSocket.simulateClose(true, 1000, 'Normal closure')

            // 不應該嘗試重連
            expect(global.WebSocket).toHaveBeenCalledTimes(1)
        })

        test('應該有重連次數限制', async () => {
            // 模擬連續失敗的重連
            const originalConnect = uploader.connect
            let connectCallCount = 0

            uploader.connect = vi.fn().mockImplementation(() => {
                connectCallCount++
                if (connectCallCount <= 5) {
                    throw new Error('Connection failed')
                }
                return originalConnect.call(uploader, 'test-session-id')
            })

            // 觸發重連
            mockWebSocket.simulateClose(false, 1006, 'Connection lost')

            // 等待重連嘗試
            await new Promise(resolve => setTimeout(resolve, 200))

            // 應該有重連次數限制
            expect(connectCallCount).toBeLessThanOrEqual(5)
        })
    })

    describe('伺服器消息處理', () => {
        beforeEach(async () => {
            await uploader.connect('test-session-id')
        })

        test('應該處理 ACK 消息', () => {
            const consoleSpy = vi.spyOn(console, 'log').mockImplementation(() => { })

            mockWebSocket.simulateMessage({
                type: 'ack',
                chunk_sequence: 5
            })

            expect(consoleSpy).toHaveBeenCalledWith(
                expect.stringContaining('音訊切片 #5 確認收到')
            )

            consoleSpy.mockRestore()
        })

        test('應該處理上傳錯誤消息', () => {
            const consoleSpy = vi.spyOn(console, 'error').mockImplementation(() => { })

            mockWebSocket.simulateMessage({
                type: 'upload_error',
                chunk_sequence: 3,
                error: 'Upload failed'
            })

            expect(consoleSpy).toHaveBeenCalledWith(
                expect.stringContaining('上傳錯誤 #3'),
                'Upload failed'
            )

            consoleSpy.mockRestore()
        })

        test('應該處理連接建立消息', () => {
            const consoleSpy = vi.spyOn(console, 'log').mockImplementation(() => { })

            mockWebSocket.simulateMessage({
                type: 'connection_established'
            })

            expect(consoleSpy).toHaveBeenCalledWith(
                expect.stringContaining('連接已建立')
            )

            consoleSpy.mockRestore()
        })

        test('應該處理非 JSON 消息', () => {
            const consoleSpy = vi.spyOn(console, 'log').mockImplementation(() => { })

            // 模擬非 JSON 數據
            const messageEvent = new MessageEvent('message', { data: 'plain text' })
            mockWebSocket.onmessage?.(messageEvent)

            expect(consoleSpy).toHaveBeenCalledWith(
                expect.stringContaining('收到非 JSON 消息'),
                'plain text'
            )

            consoleSpy.mockRestore()
        })
    })

    describe('開發模式診斷', () => {
        const originalNodeEnv = process.env.NODE_ENV

        beforeEach(async () => {
            // 使用 vi.stubEnv 來模擬環境變數
            vi.stubEnv('NODE_ENV', 'development')
            await uploader.connect('test-session-id')

            // 清除 window.__rec
            delete (window as any).__rec
        })

        afterEach(() => {
            vi.unstubAllEnvs()
        })

        test('應該在開發模式下記錄診斷信息', () => {
            const testBlob = new Blob(['test'], { type: 'audio/webm' })

            uploader.send(testBlob)

            expect((window as any).__rec).toBeDefined()
            expect((window as any).__rec.chunksSent).toBe(1)
            expect((window as any).__rec.totalBytes).toBe(testBlob.size)
            expect((window as any).__rec.sessionId).toBe('test-session-id')
        })

        test('應該累積診斷統計', () => {
            const blob1 = new Blob(['data1'])
            const blob2 = new Blob(['data2'])

            uploader.send(blob1)
            uploader.send(blob2)

            const rec = (window as any).__rec
            expect(rec.chunksSent).toBe(2)
            expect(rec.totalBytes).toBe(blob1.size + blob2.size)
            expect(rec.lastSequence).toBe(1)
        })
    })

    describe('連接狀態', () => {
        test('應該正確報告連接狀態', async () => {
            expect(uploader.connectionState).toBe('NOT_CREATED')

            const connectPromise = uploader.connect('test-session-id')
            expect(uploader.connectionState).toBe('CONNECTING')

            await connectPromise
            expect(uploader.connectionState).toBe('OPEN')

            uploader.close()
            expect(uploader.connectionState).toBe('NOT_CREATED')
        })

        test('應該正確檢查連接狀態', async () => {
            expect(uploader.isConnected).toBe(false)

            await uploader.connect('test-session-id')
            expect(uploader.isConnected).toBe(true)

            uploader.close()
            expect(uploader.isConnected).toBe(false)
        })
    })
})


# END FILE CONTENTS


# File: playwright.config.ts

 

# END FILE CONTENTS


# File: frontend/components/recording-waiting-state.tsx

"use client"

import { useState, useCallback } from "react"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Button } from "@/components/ui/button"
import { Square, AlertCircle } from "lucide-react"
import { Alert, AlertDescription } from "@/components/ui/alert"
import type { TranscriptEntry } from "../types/app-state"

interface RecordingWaitingStateProps {
    recordingTime: number
    onStopRecording: () => void
    transcriptEntries: TranscriptEntry[]
    error?: string | null
}

export function RecordingWaitingState({
    recordingTime,
    onStopRecording,
    transcriptEntries,
    error
}: RecordingWaitingStateProps) {
    const [isAutoScrollLocked, setIsAutoScrollLocked] = useState(true)

    const toggleAutoScrollLock = useCallback(() => {
        setIsAutoScrollLocked(prev => !prev)
    }, [])

    const formatTime = (seconds: number) => {
        const mins = Math.floor(seconds / 60)
        const secs = seconds % 60
        return `${mins.toString().padStart(2, "0")}:${secs.toString().padStart(2, "0")}`
    }

    return (
        <div className="h-full flex flex-col">
            <ScrollArea className="flex-1">
                {error && (
                    <Alert variant="destructive" className="m-4">
                        <AlertCircle className="h-4 w-4" />
                        <AlertDescription>{error}</AlertDescription>
                    </Alert>
                )}

                {transcriptEntries.length > 0 ? (
                    <div className="p-4 space-y-4">
                        {transcriptEntries.map((entry, index) => (
                            <div key={index} className="flex gap-4 text-sm">
                                <span className="text-muted-foreground font-mono">{entry.time}</span>
                                <span className="flex-1">{entry.text}</span>
                            </div>
                        ))}
                    </div>
                ) : (
                    <div className="flex flex-col items-center justify-center h-full p-8 text-muted-foreground text-center space-y-2">
                        <div className="text-sm">
                            Recording… {formatTime(recordingTime)}
                        </div>
                        <div className="text-xs">
                            {error ? "轉錄過程中發生錯誤" : "轉錄中"}
                        </div>
                    </div>
                )}
            </ScrollArea>

            <div className="p-4 border-t border-border flex justify-end">
                <Button onClick={onStopRecording} variant="destructive" size="sm" className="flex items-center gap-2">
                    <Square className="w-4 h-4" />
                    Stop
                </Button>
            </div>
        </div>
    )
}


# END FILE CONTENTS


# File: frontend/components/ui/table.tsx

import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}


# END FILE CONTENTS


# File: app/lib/httpx_timeout.py

from httpx import Timeout
from app.core.config import get_settings

def get_httpx_timeout() -> Timeout:
    """
    依據設定檔回傳 httpx.Timeout 物件。
    這樣任何 provider 引用時都不會 NameError。
    """
    s = get_settings()
    return Timeout(
        connect=s.HTTPX_CONNECT_TIMEOUT,   # e.g. 5
        read=s.HTTPX_READ_TIMEOUT,         # 55
        write=s.HTTPX_WRITE_TIMEOUT,       # 30
        pool=s.HTTPX_POOL_TIMEOUT,         # 5
    )


# END FILE CONTENTS


# File: frontend/components/upload-status-indicator.tsx

"use client"

import { useState, useEffect } from 'react'
import { Button } from './ui/button'
import { Alert, AlertDescription } from './ui/alert'
import { Badge } from './ui/badge'
import { RefreshCw, Upload, AlertTriangle, CheckCircle, Wifi, WifiOff } from 'lucide-react'
import { restAudioUploader } from '../lib/rest-audio-uploader'

interface UploadStats {
    uploaded: number
    failed: number
    cached: number
    retrying: boolean
}

interface UploadStatusIndicatorProps {
    sessionId?: string
    isRecording?: boolean
    className?: string
}

/**
 * UploadStatusIndicator - 上傳狀態指示器
 *
 * Phase 2 重構：顯示 REST API 上傳狀態
 *
 * 功能：
 * - 顯示上傳統計（成功/失敗/暫存）
 * - 提示暫存檔案可重新上傳
 * - 支援手動重試功能
 * - 網路狀態指示
 */
export function UploadStatusIndicator({
    sessionId,
    isRecording = false,
    className = ""
}: UploadStatusIndicatorProps) {
    const [uploadStats, setUploadStats] = useState<UploadStats>({
        uploaded: 0,
        failed: 0,
        cached: 0,
        retrying: false
    })
    const [isOnline, setIsOnline] = useState(true)
    const [lastUpdate, setLastUpdate] = useState(Date.now())

    // 監聽網路狀態
    useEffect(() => {
        const handleOnline = () => setIsOnline(true)
        const handleOffline = () => setIsOnline(false)

        window.addEventListener('online', handleOnline)
        window.addEventListener('offline', handleOffline)

        return () => {
            window.removeEventListener('online', handleOnline)
            window.removeEventListener('offline', handleOffline)
        }
    }, [])

    // 設置上傳器事件監聽
    useEffect(() => {
        if (!sessionId) return

        restAudioUploader.setSessionId(sessionId)

        // 監聽上傳成功
        const handleUploadSuccess = (seq: number) => {
            setUploadStats(prev => ({
                ...prev,
                uploaded: prev.uploaded + 1
            }))
            setLastUpdate(Date.now())
        }

        // 監聽上傳失敗
        const handleUploadError = (seq: number) => {
            setUploadStats(prev => ({
                ...prev,
                failed: prev.failed + 1
            }))
            setLastUpdate(Date.now())
        }

        // 監聽暫存到本地
        const handleCacheStored = (seq: number) => {
            setUploadStats(prev => ({
                ...prev,
                cached: prev.cached + 1
            }))
            setLastUpdate(Date.now())
        }

        restAudioUploader.onUploadSuccess(handleUploadSuccess)
        restAudioUploader.onUploadError(handleUploadError)
        restAudioUploader.onCacheStored(handleCacheStored)

        return () => {
            // 清理事件監聽器
            restAudioUploader.onUploadSuccess(() => { })
            restAudioUploader.onUploadError(() => { })
            restAudioUploader.onCacheStored(() => { })
        }
    }, [sessionId])

    // 定期更新暫存數量
    useEffect(() => {
        const updateCachedCount = async () => {
            if (sessionId && restAudioUploader) {
                const count = await restAudioUploader.getCachedSegmentsCount()
                setUploadStats(prev => ({
                    ...prev,
                    cached: count
                }))
            }
        }

        updateCachedCount()
        const interval = setInterval(updateCachedCount, 10000) // 每 10 秒更新一次

        return () => clearInterval(interval)
    }, [sessionId])

    // 重新上傳暫存檔案
    const handleRetryUploads = async () => {
        if (!sessionId || uploadStats.retrying) return

        setUploadStats(prev => ({ ...prev, retrying: true }))

        try {
            await restAudioUploader.retryFailedSegments()

            // 更新暫存數量
            const newCachedCount = await restAudioUploader.getCachedSegmentsCount()
            setUploadStats(prev => ({
                ...prev,
                cached: newCachedCount,
                retrying: false
            }))

            console.log('✅ [UploadStatusIndicator] 重新上傳完成')
        } catch (error) {
            console.error('❌ [UploadStatusIndicator] 重新上傳失敗:', error)
            setUploadStats(prev => ({ ...prev, retrying: false }))
        }
    }

    // 如果不在錄音且沒有統計數據，不顯示
    if (!isRecording && uploadStats.uploaded === 0 && uploadStats.failed === 0 && uploadStats.cached === 0) {
        return null
    }

    return (
        <div className={`space-y-2 ${className}`}>
            {/* 網路狀態指示 */}
            <div className="flex items-center gap-2 text-sm text-muted-foreground">
                {isOnline ? (
                    <Wifi className="h-4 w-4 text-green-500" />
                ) : (
                    <WifiOff className="h-4 w-4 text-red-500" />
                )}
                <span>{isOnline ? '線上' : '離線'}</span>
            </div>

            {/* 上傳統計 */}
            <div className="flex items-center gap-2 flex-wrap">
                {uploadStats.uploaded > 0 && (
                    <Badge variant="default" className="flex items-center gap-1">
                        <CheckCircle className="h-3 w-3" />
                        已上傳 {uploadStats.uploaded}
                    </Badge>
                )}

                {uploadStats.failed > 0 && (
                    <Badge variant="destructive" className="flex items-center gap-1">
                        <AlertTriangle className="h-3 w-3" />
                        失敗 {uploadStats.failed}
                    </Badge>
                )}

                {uploadStats.cached > 0 && (
                    <Badge variant="secondary" className="flex items-center gap-1">
                        <Upload className="h-3 w-3" />
                        暫存 {uploadStats.cached}
                    </Badge>
                )}
            </div>

            {/* 暫存檔案提示 */}
            {uploadStats.cached > 0 && (
                <Alert>
                    <AlertTriangle className="h-4 w-4" />
                    <AlertDescription className="flex items-center justify-between">
                        <span>
                            有 {uploadStats.cached} 個音頻段落暫存在本地。
                            {isOnline ? '可以重新上傳' : '請等待網路連線'}
                        </span>
                        {isOnline && (
                            <Button
                                size="sm"
                                variant="outline"
                                onClick={handleRetryUploads}
                                disabled={uploadStats.retrying}
                                className="ml-2"
                            >
                                {uploadStats.retrying ? (
                                    <>
                                        <RefreshCw className="h-3 w-3 mr-1 animate-spin" />
                                        重新上傳中...
                                    </>
                                ) : (
                                    <>
                                        <Upload className="h-3 w-3 mr-1" />
                                        重新上傳
                                    </>
                                )}
                            </Button>
                        )}
                    </AlertDescription>
                </Alert>
            )}

            {/* 錄音時的即時狀態 */}
            {isRecording && (
                <div className="text-xs text-muted-foreground">
                    上次更新：{new Date(lastUpdate).toLocaleTimeString()}
                </div>
            )}
        </div>
    )
}


# END FILE CONTENTS


# File: frontend/constants/languages.ts

export const LANGS = [
    { code: 'zh-TW', label: '中文（繁體）' },
    { code: 'en-US', label: 'English' },
];


# END FILE CONTENTS


# File: frontend/lib/__tests__/advanced-audio-recorder.test.ts

import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest'
import { AdvancedAudioRecorder, checkAdvancedAudioRecordingSupport } from '../advanced-audio-recorder'

// Track created instances
let mockInstances: any[] = []

const MockMediaRecorder = vi.fn().mockImplementation((stream: any, options: any) => {
    // Create individual mock functions for each instance
    const instanceStart = vi.fn()
    const instanceStop = vi.fn()
    const instanceRequestData = vi.fn()

    const instance = {
        start: instanceStart,
        stop: instanceStop,
        requestData: instanceRequestData,
        state: 'inactive',
        ondataavailable: null,
        onerror: null,
        mimeType: options.mimeType,
        audioBitsPerSecond: options.audioBitsPerSecond,
        stream,
        options
    }
    mockInstances.push(instance)
    return instance
}) as any

MockMediaRecorder.isTypeSupported = vi.fn().mockReturnValue(true)

// Mock getUserMedia
const mockGetUserMedia = vi.fn()

describe('AdvancedAudioRecorder', () => {
    let recorder: AdvancedAudioRecorder
    let mockStream: any

    beforeEach(() => {
        // Reset mocks
        vi.clearAllMocks()
        mockInstances = [] // Reset instances array

        // Setup global mocks
        global.MediaRecorder = MockMediaRecorder as any

        // Reset and setup isTypeSupported mock
        MockMediaRecorder.isTypeSupported.mockClear()
        MockMediaRecorder.isTypeSupported.mockReturnValue(true)

        global.navigator = {
            mediaDevices: {
                getUserMedia: mockGetUserMedia
            }
        } as any

        // Mock stream
        mockStream = {
            getTracks: vi.fn().mockReturnValue([
                { stop: vi.fn() }
            ])
        }
        mockGetUserMedia.mockResolvedValue(mockStream)

        // Create recorder instance
        recorder = new AdvancedAudioRecorder({
            segmentDuration: 10000,
            mimeType: 'audio/webm;codecs=opus',
            audioBitsPerSecond: 128000
        })
    })

    afterEach(() => {
        recorder.cleanup()
    })

    describe('checkAdvancedAudioRecordingSupport', () => {
        it('should return supported when all APIs are available', async () => {
            const result = await checkAdvancedAudioRecordingSupport()
            expect(result.isSupported).toBe(true)
        })

        it('should return unsupported when MediaDevices is not available', async () => {
            global.navigator = {} as any
            const result = await checkAdvancedAudioRecordingSupport()
            expect(result.isSupported).toBe(false)
            expect(result.error).toContain('MediaDevices API')
        })

        it('should return unsupported when MediaRecorder is not available', async () => {
            delete (global as any).MediaRecorder
            const result = await checkAdvancedAudioRecordingSupport()
            expect(result.isSupported).toBe(false)
            expect(result.error).toContain('MediaRecorder API')
        })

        it('should return unsupported when mime type is not supported', async () => {
            MockMediaRecorder.isTypeSupported.mockReturnValue(false)
            const result = await checkAdvancedAudioRecordingSupport()
            expect(result.isSupported).toBe(false)
            expect(result.error).toContain('音訊格式')
        })
    })

    describe('AdvancedAudioRecorder', () => {
        it('should initialize with default config', () => {
            expect(recorder.currentConfig).toEqual({
                segmentDuration: 10000,
                mimeType: 'audio/webm;codecs=opus',
                audioBitsPerSecond: 128000
            })
        })

        it('should accept custom config', () => {
            const customRecorder = new AdvancedAudioRecorder({
                segmentDuration: 5000,
                audioBitsPerSecond: 64000
            })
            expect(customRecorder.currentConfig.segmentDuration).toBe(5000)
            expect(customRecorder.currentConfig.audioBitsPerSecond).toBe(64000)
        })

        it('should initialize media stream', async () => {
            await recorder.initialize()
            expect(mockGetUserMedia).toHaveBeenCalledWith({ audio: true })
        })

        it('should not reinitialize if already initialized', async () => {
            await recorder.initialize()
            await recorder.initialize()
            expect(mockGetUserMedia).toHaveBeenCalledTimes(1)
        })

        it('should start recording with dual MediaRecorder strategy', async () => {
            const onSegmentCallback = vi.fn()
            await recorder.start(onSegmentCallback)

            expect(recorder.recording).toBe(true)
            expect(mockInstances[0].start).toHaveBeenCalledTimes(1) // Current recorder started
        })

        it('should create MediaRecorder with correct options', async () => {
            const onSegmentCallback = vi.fn()
            await recorder.start(onSegmentCallback)

            // Check if MediaRecorder was created with correct options
            expect(MockMediaRecorder).toHaveBeenCalledWith(
                mockStream,
                {
                    mimeType: 'audio/webm;codecs=opus',
                    audioBitsPerSecond: 128000
                }
            )
        })

        it('should handle segment data available', async () => {
            const onSegmentCallback = vi.fn()
            await recorder.start(onSegmentCallback)

            // Get the first MediaRecorder instance created
            const mockRecorderInstance = mockInstances[0]

            // Simulate data available event
            const mockBlob = new Blob(['test data'], { type: 'audio/webm' })
            const mockEvent = { data: mockBlob }

            if (mockRecorderInstance.ondataavailable) {
                mockRecorderInstance.ondataavailable(mockEvent)
            }

            expect(onSegmentCallback).toHaveBeenCalledWith({
                blob: mockBlob,
                timestamp: expect.any(Number),
                duration: 10000,
                sequence: 0
            })
        })

        it('should increment sequence number for each segment', async () => {
            const onSegmentCallback = vi.fn()
            await recorder.start(onSegmentCallback)

            const mockRecorderInstance = mockInstances[0]
            const mockBlob = new Blob(['test data'], { type: 'audio/webm' })
            const mockEvent = { data: mockBlob }

            // First segment
            if (mockRecorderInstance.ondataavailable) {
                mockRecorderInstance.ondataavailable(mockEvent)
            }
            expect(onSegmentCallback).toHaveBeenLastCalledWith(
                expect.objectContaining({ sequence: 0 })
            )

            // Second segment
            if (mockRecorderInstance.ondataavailable) {
                mockRecorderInstance.ondataavailable(mockEvent)
            }
            expect(onSegmentCallback).toHaveBeenLastCalledWith(
                expect.objectContaining({ sequence: 1 })
            )
        })

        it('should stop recording and cleanup', async () => {
            const onSegmentCallback = vi.fn()
            await recorder.start(onSegmentCallback)

            expect(recorder.recording).toBe(true)

            recorder.stop()

            expect(recorder.recording).toBe(false)
            // Verify that at least 2 MediaRecorder instances were created (dual strategy)
            expect(mockInstances.length).toBeGreaterThanOrEqual(2)
        })

        it('should prevent starting when already recording', async () => {
            const onSegmentCallback = vi.fn()
            await recorder.start(onSegmentCallback)

            await expect(recorder.start(onSegmentCallback)).rejects.toThrow('錄製已在進行中')
        })

        it('should handle MediaRecorder errors', async () => {
            const onSegmentCallback = vi.fn()
            const onErrorCallback = vi.fn()
            recorder.onError(onErrorCallback)

            await recorder.start(onSegmentCallback)

            const mockRecorderInstance = mockInstances[0]
            const mockError = new Error('MediaRecorder error')

            if (mockRecorderInstance.onerror) {
                mockRecorderInstance.onerror(mockError)
            }

            expect(onErrorCallback).toHaveBeenCalledWith(expect.any(Error))
            expect(recorder.recording).toBe(false)
        })

        it('should cleanup resources properly', async () => {
            const onSegmentCallback = vi.fn()
            await recorder.start(onSegmentCallback)

            recorder.cleanup()

            expect(recorder.recording).toBe(false)
            expect(mockStream.getTracks()[0].stop).toHaveBeenCalled()
        })

        it('should schedule recorder swap after segment duration', async () => {
            vi.useFakeTimers()

            const onSegmentCallback = vi.fn()
            await recorder.start(onSegmentCallback)

            // Initially should have 2 recorders (current + next)
            expect(mockInstances.length).toBe(2)

            // Fast-forward time to trigger swap
            vi.advanceTimersByTime(10000)

            // After swap, should have created additional recorders
            expect(mockInstances.length).toBeGreaterThan(2)

            // Verify recorder is still recording
            expect(recorder.recording).toBe(true)

            vi.useRealTimers()
        })

        it('should not swap recorders after stop is called', async () => {
            vi.useFakeTimers()

            const onSegmentCallback = vi.fn()
            await recorder.start(onSegmentCallback)

            recorder.stop()

            // Fast-forward time
            vi.advanceTimersByTime(10000)

            // Should not start additional recorders after stop
            expect(mockInstances[0].start).toHaveBeenCalledTimes(1)

            vi.useRealTimers()
        })
    })
})


# END FILE CONTENTS


# File: frontend/vitest.config.ts

/// <reference types="vitest" />
import { defineConfig } from 'vitest/config'
import react from '@vitejs/plugin-react'
import path from 'path'

export default defineConfig({
    plugins: [react()],
    test: {
        globals: true,
        environment: 'jsdom',
    },
    resolve: {
        alias: {
            '@': path.resolve(__dirname, './'),
        },
    },
})


# END FILE CONTENTS


# File: frontend/lib/services/transcript-service.ts

"use client"

import { BaseService } from './base-service'
import { ITranscriptService, TranscriptMessage } from './interfaces'
import { transcriptManager } from '../transcript-manager'

/**
 * 逐字稿服務資訊介面
 */
interface TranscriptServiceInfo {
    serviceName: string
    isInitialized: boolean
    isRunning: boolean
    connectedSessions: string[]
    activeListeners: Record<string, number>
    totalConnections: number
    transcriptManagerConnections: number
}

/**
 * TranscriptService - 逐字稿服務
 *
 * 職責：
 * - 封裝 TranscriptManager 的 API 為服務層接口
 * - 提供統一的逐字稿連接和消息處理
 * - 保持 TranscriptManager 的獨立性和 WebSocket 重連機制
 * - 支持多會話的逐字稿管理
 */
export class TranscriptService extends BaseService implements ITranscriptService {
    protected readonly serviceName = 'TranscriptService'

    private connectedSessions: Set<string> = new Set()
    private sessionListeners: Map<string, Set<(message: TranscriptMessage) => void>> = new Map()

    /**
     * 初始化服務
     */
    async initialize(): Promise<void> {
        this.logInfo('初始化逐字稿服務')
        // TranscriptManager 是 Singleton，無需特別初始化
    }

    /**
     * 清理服務資源
     */
    async cleanup(): Promise<void> {
        this.logInfo('清理逐字稿服務資源')

        // 斷開所有連接
        const sessionIds = Array.from(this.connectedSessions)
        for (const sessionId of sessionIds) {
            await this.disconnect(sessionId)
        }

        this.connectedSessions.clear()
        this.sessionListeners.clear()
    }

    /**
     * 連接逐字稿服務
     */
    async connect(sessionId: string): Promise<void> {
        if (!this.isRunning) {
            throw new Error('TranscriptService 尚未啟動，請先調用 start()')
        }

        try {
            this.logInfo(`連接逐字稿服務: ${sessionId}`)

            // 使用 TranscriptManager 建立連接
            await transcriptManager.connect(sessionId)

            // 記錄連接狀態
            this.connectedSessions.add(sessionId)

            this.logSuccess(`逐字稿服務連接成功: ${sessionId}`)
        } catch (error) {
            this.handleError(`逐字稿服務連接失敗: ${sessionId}`, error)
        }
    }

    /**
     * 斷開逐字稿服務
     */
    async disconnect(sessionId?: string): Promise<void> {
        try {
            if (sessionId) {
                this.logInfo(`斷開逐字稿服務: ${sessionId}`)

                // 移除所有監聽器
                const listeners = this.sessionListeners.get(sessionId)
                if (listeners) {
                    listeners.forEach(callback => {
                        transcriptManager.removeListener(sessionId, callback)
                    })
                    this.sessionListeners.delete(sessionId)
                }

                // 斷開連接
                await transcriptManager.disconnect(sessionId)
                this.connectedSessions.delete(sessionId)

                this.logSuccess(`逐字稿服務斷開成功: ${sessionId}`)
            } else {
                // 斷開所有連接
                this.logInfo('斷開所有逐字稿服務連接')
                const sessionIds = Array.from(this.connectedSessions)
                for (const id of sessionIds) {
                    await this.disconnect(id)
                }
            }
        } catch (error) {
            this.handleError(`斷開逐字稿服務失敗: ${sessionId || 'all'}`, error)
        }
    }

    /**
     * 添加逐字稿監聽器
     */
    addTranscriptListener(sessionId: string, callback: (message: TranscriptMessage) => void): void {
        if (!this.isRunning) {
            throw new Error('TranscriptService 尚未啟動，請先調用 start()')
        }

        this.logInfo(`添加逐字稿監聽器: ${sessionId}`)

        // 記錄監聽器
        if (!this.sessionListeners.has(sessionId)) {
            this.sessionListeners.set(sessionId, new Set())
        }
        this.sessionListeners.get(sessionId)!.add(callback)

        // 添加到 TranscriptManager
        transcriptManager.addListener(sessionId, callback)
    }

    /**
     * 移除逐字稿監聽器
     */
    removeTranscriptListener(sessionId: string, callback: (message: TranscriptMessage) => void): void {
        this.logInfo(`移除逐字稿監聽器: ${sessionId}`)

        // 從記錄中移除
        const listeners = this.sessionListeners.get(sessionId)
        if (listeners) {
            listeners.delete(callback)
            if (listeners.size === 0) {
                this.sessionListeners.delete(sessionId)
            }
        }

        // 從 TranscriptManager 移除
        transcriptManager.removeListener(sessionId, callback)
    }

    /**
     * 檢查連接狀態
     */
    isConnected(sessionId: string): boolean {
        return transcriptManager.isConnected(sessionId)
    }

    /**
     * 清除逐字稿
     *
     * 注意：此方法不會清除 TranscriptManager 中的數據，
     * 因為 TranscriptManager 是無狀態的，只負責 WebSocket 連接。
     * 實際的逐字稿數據應該由狀態管理層處理。
     */
    clearTranscripts(sessionId: string): void {
        this.logInfo(`清除逐字稿: ${sessionId}`)
        // TranscriptManager 不儲存逐字稿數據，這個方法主要用於觸發狀態清除
        // 實際的清除邏輯應該在狀態管理層實現
    }

    /**
     * 取得服務狀態資訊
     */
    getServiceInfo(): TranscriptServiceInfo {
        return {
            serviceName: this.serviceName,
            isInitialized: this.isInitialized,
            isRunning: this.isRunning,
            connectedSessions: Array.from(this.connectedSessions),
            activeListeners: Object.fromEntries(
                Array.from(this.sessionListeners.entries()).map(([sessionId, listeners]) => [
                    sessionId,
                    listeners.size
                ])
            ),
            totalConnections: this.connectedSessions.size,
            transcriptManagerConnections: transcriptManager.getConnectionCount()
        }
    }
}


# END FILE CONTENTS


# File: .cursor/rules/ui-rules/shadcn-tailwind-ui-guideline.mdc

<!-- Source: https://github.com/RayFernando1337/llm-cursor-rules/blob/main/fire-your-design-team.md -->

# shadcn/ui with Tailwind v4 Design System Guidelines

This document outlines design principles and implementation guidelines for applications using shadcn/ui with Tailwind v4. These guidelines ensure consistency, accessibility, and best practices throughout the UI development process.

## Core Design Principles

### 1. Typography System: 4 Sizes, 2 Weights
- **4 Font Sizes Only**:
  - Size 1: Large headings
  - Size 2: Subheadings/Important content
  - Size 3: Body text
  - Size 4: Small text/labels
- **2 Font Weights Only**:
  - Semibold: For headings and emphasis
  - Regular: For body text and general content
- **Consistent Hierarchy**: Maintain clear visual hierarchy with limited options

### 2. 8pt Grid System
- **All spacing values must be divisible by 8 or 4**
- **Examples**:
  - Instead of 25px padding → Use 24px (divisible by 8)
  - Instead of 11px margin → Use 12px (divisible by 4)
- **Consistent Rhythm**: Creates visual harmony throughout the interface

### 3. 60/30/10 Color Rule
- **60%**: Neutral color (white/light gray)
- **30%**: Complementary color (dark gray/black)
- **10%**: Main brand/accent color (e.g., red, blue)
- **Color Balance**: Prevents visual stress while maintaining hierarchy

### 4. Clean Visual Structure
- **Logical Grouping**: Related elements should be visually connected
- **Deliberate Spacing**: Spacing between elements should follow the grid system
- **Alignment**: Elements should be properly aligned within their containers
- **Simplicity Over Flashiness**: Focus on clarity and function first

## Foundation

### Tailwind v4 Integration
- **Use Tailwind CSS v4 for styling**: Leverage the latest Tailwind features including the new @theme directive, dynamic utility values, and OKLCH colors. [Tailwind CSS v4 Documentation](mdc:https://tailwindcss.com/docs)
- **Modern browsing features**: Tailwind v4 uses bleeding-edge browser features and is designed for modern browsers.
- **Simplified installation**: Fewer dependencies, zero configuration required in many cases.
- **shadcn/ui v4 demo**: Reference the demo site for component examples. [shadcn/ui v4 Demo](mdc:https://v4.shadcn.com/)

### New CSS Structure
- **Replace @layer base with @theme directive**:
  ```css
  /* Old approach in v3 */
  @layer base {
    :root {
      --background: 0 0% 100%;
      --foreground: 0 0% 3.9%;
    }
  }
  
  /* New approach in v4 */
  @theme {
    --color-background: hsl(var(--background));
    --color-foreground: hsl(var(--foreground));
  }
  ```
- **Tailwind imports**: Use `@import "tailwindcss"` instead of `@tailwind base`
- **Container queries**: Built-in support without plugins
- **OKLCH color format**: Updated from HSL for better color perception

## Typography System

### Font Sizes & Weights
- **Strictly limit to 4 distinct sizes**:
  - Size 1: Large headings (largest)
  - Size 2: Subheadings
  - Size 3: Body text
  - Size 4: Small text/labels (smallest)
- **Only use 2 font weights**:
  - Semibold: For headings and emphasis
  - Regular: For body text and most UI elements
- **Common mistakes to avoid**:
  - Using more than 4 font sizes
  - Introducing additional font weights
  - Inconsistent size application

### Typography Implementation
- **Reference shadcn's typography primitives** for consistent text styling
- **Use monospace variant** for numerical data when appropriate
- **data-slot attribute**: Every shadcn/ui primitive now has a data-slot attribute for styling
- **Maintain hierarchy** using consistent sizing patterns

## 8pt Grid System

### Spacing Guidelines
- **All spacing values MUST be divisible by 8 or 4**:
  - ✅ DO: Use 8, 16, 24, 32, 40, 48, etc.
  - ❌ DON'T: Use 25, 11, 7, 13, etc.

- **Practical examples**:
  - Instead of 25px padding → Use 24px (divisible by 8)
  - Instead of 11px margin → Use 12px (divisible by 4)
  - Instead of 15px gap → Use 16px (divisible by 8)

- **Use Tailwind's spacing utilities**:
  - p-4 (16px), p-6 (24px), p-8 (32px)
  - m-2 (8px), m-4 (16px), m-6 (24px)
  - gap-2 (8px), gap-4 (16px), gap-8 (32px)

- **Why this matters**:
  - Creates visual harmony
  - Simplifies decision-making
  - Establishes predictable patterns

### Implementation
- **Tailwind v4 dynamic spacing**: Spacing utilities accept any value without arbitrary syntax
- **Consistent component spacing**: Group related elements with matching gap values
- **Check responsive behavior**: Ensure grid system holds at all breakpoints

## 60/30/10 Color Rule

### Color Distribution
- **60%**: neutral color (bg-background)
  - Usually white or light gray in light mode
  - Dark gray or black in dark mode
  - Used for primary backgrounds, cards, containers

- **30%**: complementary color (text-foreground)
  - Usually dark gray or black in light mode
  - Light gray or white in dark mode
  - Used for text, icons, subtle UI elements

- **10%**: accent color (brand color)
  - Your primary brand color (red, blue, etc.)
  - Used sparingly for call-to-action buttons, highlights, important indicators
  - Avoid overusing to prevent visual stress

### Common Mistakes
- ❌ Overusing accent colors creates visual stress
- ❌ Not enough contrast between background and text
- ❌ Too many competing accent colors (stick to one primary accent)

### Implementation with shadcn/ui
- **Background/foreground convention**: Each component uses the background/foreground pattern
- **CSS variables in globals.css**:
  ```css
  :root {
    --background: oklch(1 0 0);
    --foreground: oklch(0.145 0 0);
    --primary: oklch(0.205 0 0);
    --primary-foreground: oklch(0.985 0 0);
    /* Additional variables */
  }
  
  @theme {
    --color-background: var(--background);
    --color-foreground: var(--foreground);
    /* Register other variables */
  }
  ```
- **OKLCH color format**: More accessible colors, especially in dark mode
- **Reserve accent colors** for important elements that need attention

## Component Architecture

### shadcn/ui Component Structure
- **2-layered architecture**:
  1. Structure and behavior layer (Radix UI primitives)
  2. Style layer (Tailwind CSS)
- **Class Variance Authority (CVA)** for variant styling
- **data-slot attribute** for styling component parts

### Implementation
- **Install components individually** using CLI (updated for v4) or manual installation
- **Component customization**: Modify components directly as needed
- **Radix UI primitives**: Base components for accessibility and behavior
- **New-York style**: Default recommended style for new projects (deprecated "default" style)

## Visual Hierarchy

### Design Principles
- **Simplicity over flashiness**: Focus on clarity and usability
- **Emphasis on what matters**: Highlight important elements
- **Reduced cognitive load**: Use consistent terminology and patterns
- **Visual connection**: Connect related UI elements through consistent patterns

### Implementation
- **Use shadcn/ui Blocks** for common UI patterns
- **Maintain consistent spacing** between related elements
- **Align elements properly** within containers
- **Logical grouping** of related functionality

## Installation & Setup

### Project Setup
- **CLI initialization**:
  ```bash
  npx create-next-app@latest my-app
  cd my-app
  npx shadcn-ui@latest init
  ```
- **Manual setup**: Follow the guide at [Manual Installation](mdc:https://ui.shadcn.com/docs/installation/manual)
- **components.json configuration**:
  ```json
  {
    "style": "new-york",
    "rsc": true,
    "tailwind": {
      "config": "",
      "css": "app/globals.css",
      "baseColor": "neutral",
      "cssVariables": true
    },
    "aliases": {
      "components": "@/components",
      "utils": "@/lib/utils"
    }
  }
  ```

### Adding Components
- **Use the CLI**: `npx shadcn-ui@latest add button`
- **Install dependencies**: Required for each component
- **Find components**: [Component Reference](mdc:https://ui.shadcn.com/docs/components)

## Advanced Features

### Dark Mode
- **Updated dark mode colors** for better accessibility using OKLCH
- **Consistent contrast ratios** across light and dark themes
- **Custom variant**: `@custom-variant dark (&:is(.dark *))`

### Container Queries
- **Built-in support** without plugins
- **Responsive components** that adapt to their container size
- **@min-* and @max-* variants** for container query ranges

### Data Visualization
- **Chart components**: Use with consistent styling
- **Consistent color patterns**: Use chart-1 through chart-5 variables

## Experience Design

### Motion & Animation
- **Consider transitions** between screens and states
- **Animation purpose**: Enhance usability, not distract
- **Consistent motion patterns**: Similar elements should move similarly

### Implementation
- **Test experiences** across the entire flow
- **Design with animation in mind** from the beginning
- **Balance speed and smoothness** for optimal user experience

## Resources

- [shadcn/ui Documentation](mdc:https://ui.shadcn.com/docs)
- [Tailwind CSS v4 Documentation](mdc:https://tailwindcss.com/docs)
- [shadcn/ui GitHub Repository](mdc:https://github.com/shadcn/ui)
- [Tailwind v4 Upgrade Guide](mdc:https://tailwindcss.com/docs/upgrade-guide)
- [shadcn/ui v4 Demo](mdc:https://v4.shadcn.com/)
- [Figma Design System](mdc:https://www.figma.com/community/file/1203061493325953101/shadcn-ui-design-system)

## Code Review Checklist

### Core Design Principles
- [ ] Typography: Uses only 4 font sizes and 2 font weights (Semibold, Regular)
- [ ] Spacing: All spacing values are divisible by 8 or 4
- [ ] Colors: Follows 60/30/10 color distribution (60% neutral, 30% complementary, 10% accent)
- [ ] Structure: Elements are logically grouped with consistent spacing

### Technical Implementation
- [ ] Uses proper OKLCH color variables
- [ ] Leverages @theme directive for variables
- [ ] Components implement data-slot attribute properly
- [ ] Visual hierarchy is clear and consistent
- [ ] Components use Class Variance Authority for variants
- [ ] Dark mode implementation is consistent
- [ ] Accessibility standards are maintained (contrast, keyboard navigation, etc.)

### Common Issues to Flag
- [ ] Too many font sizes (more than 4)
- [ ] Inconsistent spacing values (not divisible by 8 or 4)
- [ ] Overuse of accent colors (exceeding 10%)
- [ ] Random or inconsistent margins/padding
- [ ] Insufficient contrast between text and background
- [ ] Unnecessary custom CSS when Tailwind utilities would suffice

# END FILE CONTENTS


# File: frontend/hooks/use-recording.ts

"use client"

import { useState, useCallback, useRef, useEffect } from 'react'
import { AckMissingMessage } from '../lib/websocket'
import { SegmentedAudioRecorder, AudioSegment } from '../lib/segmented-audio-recorder'
import { audioUploader } from '../lib/stream/audio-uploader'
import { transcriptManager, TranscriptMessage } from '../lib/transcript-manager'
import { getAudioChunkIntervalMs } from '../lib/config'
import { useAppActions } from '../lib/app-store-zustand'

interface UseRecordingReturn {
  isRecording: boolean
  recordingTime: number
  transcripts: TranscriptMessage[]
  transcriptCompleted: boolean
  error: string | null
  startRecording: (sessionId: string) => Promise<void>
  stopRecording: () => void
  clearTranscripts: () => void
}

export function useRecording(): UseRecordingReturn {
  const [isRecording, setIsRecording] = useState(false)
  const [recordingTime, setRecordingTime] = useState(0)
  const [transcripts, setTranscripts] = useState<TranscriptMessage[]>([])
  const [transcriptCompleted, setTranscriptCompleted] = useState(false)
  const [error, setError] = useState<string | null>(null)

  // 從 Zustand store 獲取操作
  const { setRecordingStart } = useAppActions()

  // WebSocket 和錄音器引用
  const segmentedRecorderRef = useRef<SegmentedAudioRecorder | null>(null)
  const currentSessionIdRef = useRef<string | null>(null)

  // 計時器和狀態引用
  const timerRef = useRef<NodeJS.Timeout | null>(null)
  const segmentsRef = useRef<AudioSegment[]>([])
  const retryCountsRef = useRef<Map<number, number>>(new Map())
  const fallbackTimerRef = useRef<NodeJS.Timeout | null>(null) // 新增：fallback 計時器

  // 清理計時器
  const clearTimer = useCallback(() => {
    if (timerRef.current) {
      clearInterval(timerRef.current)
      timerRef.current = null
    }
    if (fallbackTimerRef.current) {
      clearTimeout(fallbackTimerRef.current)
      fallbackTimerRef.current = null
    }
  }, [])

  // 開始錄音計時器（基於實際時間戳）
  const startTimer = useCallback(() => {
    clearTimer()
    setRecordingTime(0)
    const startTime = Date.now()

    timerRef.current = setInterval(() => {
      const elapsed = Math.floor((Date.now() - startTime) / 1000)
      setRecordingTime(elapsed)
    }, 1000)

    console.log('⏱️ [useRecording] 錄音計時器已啟動')
  }, [clearTimer])

  // 處理錄音真正開始（onstart 事件）
  const handleRecordingStart = useCallback(() => {
    const startTime = Date.now()
    console.log('🚀 [useRecording] 錄音真正開始，設置開始時間:', new Date(startTime).toISOString())

    // 設置到 Zustand store
    setRecordingStart(startTime)

    // 同時更新本地計時器
    startTimer()

    // 清除 fallback 計時器（如果存在）
    if (fallbackTimerRef.current) {
      clearTimeout(fallbackTimerRef.current)
      fallbackTimerRef.current = null
    }
  }, [setRecordingStart, startTimer])

  // 處理逐字稿接收 - 透過 TranscriptManager
  const handleTranscript = useCallback((transcript: TranscriptMessage) => {
    console.log('📝 [useRecording] 收到逐字稿訊息:', {
      type: transcript.type,
      text: transcript.text,
      textLength: transcript.text?.length || 0,
      start_time: transcript.start_time,
      end_time: transcript.end_time,
      start_sequence: transcript.start_sequence,
      confidence: transcript.confidence,
      sessionId: currentSessionIdRef.current,
      timestamp: new Date().toISOString(),
      fullMessage: transcript
    })

    // 處理轉錄完成通知
    if (transcript.type === 'transcript_complete' || transcript.message === 'transcription_complete') {
      console.log('✅ [useRecording] 逐字稿轉錄完成，設定 transcriptCompleted=true')
      setTranscriptCompleted(true)
      return
    }

    // 處理 active phase 訊息（重要：這會觸發狀態轉換）
    if (transcript.type === 'active' || transcript.phase === 'active') {
      console.log('🚀 [useRecording] 收到 active phase 訊息，轉錄開始')
      // 這裡可以設置一個標記，表示轉錄已開始
      return
    }

    // 只處理逐字稿片段類型的訊息
    if (transcript.type !== 'transcript_segment') {
      console.log('⚠️ [useRecording] 跳過非逐字稿片段訊息:', transcript.type)
      return
    }

    if (!transcript.text) {
      console.log('⚠️ [useRecording] 跳過空文字逐字稿')
      return
    }

    console.log('🔄 [useRecording] 開始處理逐字稿片段...', {
      text: transcript.text,
      textPreview: transcript.text.substring(0, 50) + '...',
      sequence: transcript.start_sequence,
      startTime: transcript.start_time,
      endTime: transcript.end_time
    })

    setTranscripts((prev) => {
      console.log('📊 [useRecording] 合併前狀態:', {
        existingCount: prev.length,
        newSegmentText: transcript.text,
        newSegmentSequence: transcript.start_sequence,
        newSegmentTime: transcript.start_time
      })

      // 使用 start_sequence 作為排序依據，如果沒有則使用時間戳
      const sequence = transcript.start_sequence ?? transcript.timestamp ?? 0

      // 依照序號排序並去重
      const filtered = prev.filter(t => {
        const existingSequence = t.start_sequence ?? t.timestamp ?? 0
        return existingSequence !== sequence
      })

      const updated = [...filtered, transcript].sort((a, b) => {
        const aSequence = a.start_sequence ?? a.timestamp ?? 0
        const bSequence = b.start_sequence ?? b.timestamp ?? 0
        return aSequence - bSequence
      })

      console.log('📊 [useRecording] 合併後狀態:', {
        newCount: updated.length,
        countChange: updated.length - prev.length,
        filteredCount: filtered.length,
        isDuplicate: filtered.length === prev.length ? false : true,
        lastSegmentText: updated[updated.length - 1]?.text?.substring(0, 50) + '...'
      })

      console.log(`✅ [useRecording] 逐字稿更新完成: ${prev.length} → ${updated.length} 個片段`)
      return updated
    })
  }, [])

  // 處理 ACK/Missing 訊息 - 支援重傳機制
  const handleAckMissing = useCallback((data: AckMissingMessage) => {
    console.log('📨 [useRecording] 收到 ACK/Missing:', data)

    if (data.missing.length > 0) {
      console.warn('⚠️ [useRecording] 有遺失的音檔段落需要重傳:', data.missing)

      // 重發遺失的段落
      data.missing.forEach(async (sequence) => {
        if (segmentsRef.current[sequence]) {
          await audioUploader.send(segmentsRef.current[sequence].blob, sequence)
        }
      })
    }
  }, [])

  // 處理音檔段落 - 不再負責啟動計時
  const handleAudioSegment = useCallback(async (segment: AudioSegment) => {
    console.log(`🎵 [useRecording] 收到音檔段落 #${segment.sequence}, 大小: ${segment.blob.size} bytes`)

    // 儲存段落供重傳使用
    segmentsRef.current[segment.sequence] = segment

    // 使用改善的 AudioUploader 發送
    if (audioUploader.isConnected) {
      await audioUploader.send(segment.blob, segment.sequence)
    } else {
      console.warn('⚠️ [useRecording] AudioUploader 未連接，無法發送段落')
    }
  }, [])

  // 開始錄音 - 使用 onstart 事件
  const startRecording = useCallback(async (sessionId: string): Promise<void> => {
    try {
      setError(null)
      setTranscriptCompleted(false)
      currentSessionIdRef.current = sessionId

      console.log('🎤 [useRecording] 開始錄音流程:', { sessionId })

      // 確保在瀏覽器環境中執行
      if (typeof window === 'undefined') {
        throw new Error('此功能僅在瀏覽器環境中可用')
      }

      // 步驟 1: 建立分段式音檔錄製器
      console.log('🎤 [useRecording] 步驟 1: 初始化分段式音檔錄製器')
      const segmentedRecorder = new SegmentedAudioRecorder({
        segmentDuration: getAudioChunkIntervalMs(), // 從環境變數讀取切片時長
        mimeType: 'audio/webm;codecs=opus',
        audioBitsPerSecond: 64000 // 64 kbps
      })

      console.log('🎤 [useRecording] 音訊配置: WebM Opus, 64 kbps, 15 秒切片')

      segmentedRecorderRef.current = segmentedRecorder
      segmentsRef.current = []
      retryCountsRef.current.clear()

      // 設定音檔錄製器事件
      segmentedRecorder.onError((err) => {
        console.error('❌ [useRecording] SegmentedAudioRecorder 錯誤:', err)
        setError(err.message)
      })

      // 新增：設定錄音開始回調
      segmentedRecorder.onStart(handleRecordingStart)

      // 步驟 2: 初始化音訊權限
      console.log('🎤 [useRecording] 步驟 2: 初始化音訊權限')
      await segmentedRecorder.initialize()

      // 步驟 3: 建立 WebSocket 連線（並行建立，確保都就緒）
      console.log('🎤 [useRecording] 步驟 3: 建立 WebSocket 連線')

      // 3a. 建立音檔上傳連線（使用改善的 AudioUploader）
      console.log('🔌 [useRecording] 建立音檔上傳連線')
      await audioUploader.connect(sessionId)

      // 3b. 建立逐字稿接收 WebSocket（透過 TranscriptManager）
      console.log('🔌 [useRecording] 建立逐字稿接收 WebSocket')
      await transcriptManager.connect(sessionId)
      transcriptManager.addListener(sessionId, handleTranscript)

      // 步驟 4: 驗證連線狀態
      console.log('🎤 [useRecording] 步驟 4: 驗證連線狀態')
      if (!audioUploader.isConnected) {
        throw new Error('音檔上傳 AudioUploader 連線失敗')
      }

      if (!transcriptManager.isConnected(sessionId)) {
        throw new Error('逐字稿接收 WebSocket 連線失敗')
      }

      console.log('✅ [useRecording] 所有連線已建立')

      // 步驟 5: 開始分段錄音
      console.log('🎤 [useRecording] 步驟 5: 開始分段錄音')

      // 先設置錄音狀態，確保狀態映射正確
      setIsRecording(true)
      console.log('🎤 [useRecording] 錄音狀態已設置為 true')

      // 設置 fallback 計時器：如果 10 秒後 onstart 還沒觸發，使用舊邏輯
      fallbackTimerRef.current = setTimeout(() => {
        console.warn('⚠️ [useRecording] onstart 事件 10 秒內未觸發，使用 fallback 計時器')
        handleRecordingStart()
      }, 10000)

      await segmentedRecorder.start(handleAudioSegment)
      console.log('⏳ [useRecording] 等待 onstart 事件啟動計時器')

      console.log('✅ [useRecording] 錄音開始成功，Session ID:', sessionId)

    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '開始錄音失敗'
      setError(errorMessage)
      console.error('❌ [useRecording] 開始錄音失敗:', err)

      // 錯誤時清理資源
      if (segmentedRecorderRef.current) {
        segmentedRecorderRef.current.stop()
        segmentedRecorderRef.current.cleanup()
      }
      if (audioUploader.isConnected) {
        audioUploader.close()
      }
      if (currentSessionIdRef.current) {
        transcriptManager.removeListener(currentSessionIdRef.current, handleTranscript)
      }
      clearTimer()
    }
  }, [handleAudioSegment, handleAckMissing, handleTranscript, handleRecordingStart, clearTimer])

  // 停止錄音
  const stopRecording = useCallback(() => {
    try {
      // 停止分段式音檔錄製器
      if (segmentedRecorderRef.current) {
        segmentedRecorderRef.current.stop()
      }

      // 關閉音檔上傳連線
      if (audioUploader.isConnected) {
        audioUploader.close()
      }

      setIsRecording(false)
      clearTimer()

      console.log('✅ [useRecording] 錄音停止，等待轉錄完成')

      // 注意：不斷開 TranscriptManager 連接，繼續接收轉錄結果

    } catch (err) {
      console.error('❌ [useRecording] 停止錄音失敗:', err)
      setError('停止錄音時發生錯誤')
    }
  }, [clearTimer])

  // 清空逐字稿
  const clearTranscripts = useCallback(() => {
    setTranscripts([])
    setTranscriptCompleted(false)
    console.log('🔄 逐字稿已清除')
  }, [])

  // 清理資源
  useEffect(() => {
    return () => {
      // 移除 TranscriptManager 監聽器
      if (currentSessionIdRef.current) {
        transcriptManager.removeListener(currentSessionIdRef.current, handleTranscript)
      }

      // 清理計時器
      clearTimer()

      // 關閉音檔上傳連線
      if (audioUploader.isConnected) {
        audioUploader.close()
      }

      // 停止並清理分段式錄音器
      if (segmentedRecorderRef.current) {
        segmentedRecorderRef.current.stop()
        segmentedRecorderRef.current.cleanup()
      }
    }
  }, [clearTimer, handleTranscript])

  return {
    isRecording,
    recordingTime,
    transcripts,
    transcriptCompleted,
    error,
    startRecording,
    stopRecording,
    clearTranscripts,
  }
}


# END FILE CONTENTS


# File: pyproject.toml

[project]
name = "study-scriber"
version = "0.1.0"
description = "Cloud note tool: record, real-time transcript, Markdown notes & export as ZIP."
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "fastapi",
    "uvicorn[standard]",
    "pydantic",
    "pydantic-settings",
    "python-dotenv",
    "psycopg2-binary",
    "uvloop",
    "httpx",
    "aiohttp",
    "loguru",
    "supabase",
    "gotrue",
    "postgrest",
    "realtime",
    "storage3",
    "openai",
    "aiofiles",
    "python-multipart",
    "google-generativeai",  # 提供 google.generativeai.GenerativeModel
    # Task 5: 監控依賴
    "prometheus-client",
    # 測試依賴
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.0.0",
]

[tool.setuptools.packages.find]
include = ["app*"]

[tool.pytest.ini_options]
addopts = "--cov=app"


# END FILE CONTENTS


# File: frontend/components/ui/select.tsx

"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}


# END FILE CONTENTS


# File: frontend/lib/services/service-container.ts

"use client"

import { BaseService, ServiceStatus } from './base-service'

/**
 * ServiceContainer - 服務依賴注入容器
 *
 * 參考後端 container.py 模式，提供：
 * - Singleton 模式 (參考 TranscriptManager.getInstance())
 * - 類型安全的服務註冊和解析
 * - 服務生命週期管理
 * - 依賴關係管理
 */
export class ServiceContainer {
    /**
     * Singleton 實例
     */
    private static instance: ServiceContainer | null = null

    /**
     * 服務工廠函數映射表
     * key: 服務識別符, value: 服務工廠函數
     */
    private readonly providers = new Map<string, () => any>()

    /**
     * 單例服務實例快取
     * key: 服務識別符, value: 服務實例
     */
    private readonly singletons = new Map<string, any>()

    /**
     * 已註冊的單例服務標識
     */
    private readonly singletonKeys = new Set<string>()

    /**
     * 私有建構子 (Singleton 模式)
     */
    private constructor() {
        // 開發模式下將實例掛到全域以利除錯
        if (typeof window !== 'undefined') {
            ; (window as any).serviceContainer = this
            console.log('🔧 [ServiceContainer] 服務容器已初始化')
        }
    }

    /**
     * 取得 ServiceContainer 實例 (Singleton)
     */
    static getInstance(): ServiceContainer {
        if (!ServiceContainer.instance) {
            ServiceContainer.instance = new ServiceContainer()
        }
        return ServiceContainer.instance
    }

    /**
     * 註冊服務工廠函數
     * 參考後端 container.py 的 register 方法
     *
     * @param key 服務識別符
     * @param factory 服務工廠函數
     */
    register<T>(key: string, factory: () => T): void {
        if (this.providers.has(key)) {
            console.warn(`⚠️ [ServiceContainer] 服務 "${key}" 已存在，將被覆蓋`)
        }

        this.providers.set(key, factory)
        console.log(`✅ [ServiceContainer] 服務 "${key}" 註冊成功`)
    }

    /**
     * 註冊單例服務
     * 單例服務只會被創建一次，後續調用返回同一實例
     *
     * @param key 服務識別符
     * @param factory 服務工廠函數
     */
    registerSingleton<T>(key: string, factory: () => T): void {
        this.register(key, factory)
        this.singletonKeys.add(key)
        console.log(`✅ [ServiceContainer] 單例服務 "${key}" 註冊成功`)
    }

    /**
     * 解析服務實例
     * 參考後端 container.py 的 resolve 方法
     *
     * @param key 服務識別符
     * @returns 服務實例
     * @throws 如果服務未註冊
     */
    resolve<T>(key: string): T {
        // 檢查單例快取
        if (this.singletonKeys.has(key) && this.singletons.has(key)) {
            return this.singletons.get(key) as T
        }

        // 取得工廠函數
        const provider = this.providers.get(key)
        if (!provider) {
            const error = `服務 "${key}" 未註冊`
            console.error(`❌ [ServiceContainer] ${error}`)
            throw new Error(error)
        }

        try {
            const instance = provider() as T

            // 單例服務快取實例
            if (this.singletonKeys.has(key)) {
                this.singletons.set(key, instance)
            }

            console.log(`✅ [ServiceContainer] 服務 "${key}" 解析成功`)
            return instance
        } catch (error) {
            console.error(`❌ [ServiceContainer] 創建服務 "${key}" 失敗:`, error)
            throw error
        }
    }

    /**
     * 檢查服務是否已註冊
     *
     * @param key 服務識別符
     */
    isRegistered(key: string): boolean {
        return this.providers.has(key)
    }

    /**
     * 取得所有已註冊的服務識別符
     */
    getRegisteredServices(): string[] {
        return Array.from(this.providers.keys())
    }

    /**
     * 清除指定服務註冊
     *
     * @param key 服務識別符
     */
    unregister(key: string): boolean {
        const hasProvider = this.providers.delete(key)
        this.singletons.delete(key)
        this.singletonKeys.delete(key)

        if (hasProvider) {
            console.log(`🗑️ [ServiceContainer] 服務 "${key}" 已清除`)
        }

        return hasProvider
    }

    /**
     * 清除所有服務註冊
     * 主要用於測試環境
     */
    clear(): void {
        const count = this.providers.size
        this.providers.clear()
        this.singletons.clear()
        this.singletonKeys.clear()
        console.log(`🗑️ [ServiceContainer] 已清除 ${count} 個服務`)
    }

    /**
     * 獲取容器狀態摘要
     */
    getContainerStatus(): ServiceContainerStatus {
        const registeredServices = this.getRegisteredServices()
        const activeSingletons = Array.from(this.singletons.keys())

        return {
            totalServices: registeredServices.length,
            activeSingletonsCount: activeSingletons.length,
            registeredServices,
            activeSingletons,
            timestamp: new Date().toISOString()
        }
    }

    /**
     * 初始化所有已註冊的 BaseService 實例
     * 用於應用程式啟動時統一初始化服務
     */
    async initializeServices(): Promise<ServiceInitializationResult[]> {
        const results: ServiceInitializationResult[] = []
        const services = this.getRegisteredServices()

        console.log(`🚀 [ServiceContainer] 開始初始化 ${services.length} 個服務...`)

        for (const serviceKey of services) {
            try {
                const service = this.resolve(serviceKey)

                // 檢查是否為 BaseService 實例
                if (service instanceof BaseService) {
                    await service.start()
                    results.push({
                        serviceKey,
                        success: true,
                        status: service.getStatus()
                    })
                    console.log(`✅ [ServiceContainer] 服務 "${serviceKey}" 初始化成功`)
                } else {
                    // 非 BaseService 實例，跳過初始化
                    results.push({
                        serviceKey,
                        success: true,
                        status: null,
                        message: '非 BaseService 實例，跳過初始化'
                    })
                    console.log(`ℹ️ [ServiceContainer] 服務 "${serviceKey}" 非 BaseService 實例，跳過初始化`)
                }
            } catch (error) {
                results.push({
                    serviceKey,
                    success: false,
                    error: error instanceof Error ? error.message : '未知錯誤'
                })
                console.error(`❌ [ServiceContainer] 服務 "${serviceKey}" 初始化失敗:`, error)
            }
        }

        const successCount = results.filter(r => r.success).length
        console.log(`🎯 [ServiceContainer] 服務初始化完成: ${successCount}/${services.length} 成功`)

        return results
    }

    /**
     * 清理所有已啟動的 BaseService 實例
     * 用於應用程式關閉時統一清理資源
     */
    async cleanupServices(): Promise<ServiceCleanupResult[]> {
        const results: ServiceCleanupResult[] = []
        const singletonKeys = Array.from(this.singletons.keys())

        console.log(`🛑 [ServiceContainer] 開始清理 ${singletonKeys.length} 個單例服務...`)

        for (const serviceKey of singletonKeys) {
            try {
                const service = this.singletons.get(serviceKey)

                if (service instanceof BaseService && service.isRunning) {
                    await service.stop()
                    results.push({
                        serviceKey,
                        success: true
                    })
                    console.log(`✅ [ServiceContainer] 服務 "${serviceKey}" 清理成功`)
                } else {
                    results.push({
                        serviceKey,
                        success: true,
                        message: '服務未運行或非 BaseService 實例'
                    })
                }
            } catch (error) {
                results.push({
                    serviceKey,
                    success: false,
                    error: error instanceof Error ? error.message : '未知錯誤'
                })
                console.error(`❌ [ServiceContainer] 服務 "${serviceKey}" 清理失敗:`, error)
            }
        }

        const successCount = results.filter(r => r.success).length
        console.log(`🎯 [ServiceContainer] 服務清理完成: ${successCount}/${singletonKeys.length} 成功`)

        return results
    }
}

/**
 * 服務容器錯誤類別
 */
export class ServiceContainerError extends Error {
    readonly errorType: 'UNREGISTERED_SERVICE' | 'CREATION_FAILED' | 'UNKNOWN'
    readonly serviceKey: string
    readonly originalError?: unknown

    constructor(
        message: string,
        errorType: 'UNREGISTERED_SERVICE' | 'CREATION_FAILED' | 'UNKNOWN',
        serviceKey: string,
        originalError?: unknown
    ) {
        super(message)
        this.name = 'ServiceContainerError'
        this.errorType = errorType
        this.serviceKey = serviceKey
        this.originalError = originalError
    }
}

/**
 * 容器狀態介面
 */
export interface ServiceContainerStatus {
    totalServices: number
    activeSingletonsCount: number
    registeredServices: string[]
    activeSingletons: string[]
    timestamp: string
}

/**
 * 服務初始化結果介面
 */
export interface ServiceInitializationResult {
    serviceKey: string
    success: boolean
    status?: ServiceStatus | null
    error?: string
    message?: string
}

/**
 * 服務清理結果介面
 */
export interface ServiceCleanupResult {
    serviceKey: string
    success: boolean
    error?: string
    message?: string
}

/**
 * 匯出全域容器實例 (Singleton)
 * 方便其他模組使用
 */
export const serviceContainer = ServiceContainer.getInstance()


# END FILE CONTENTS


# File: frontend/hooks/use-transcript.ts

"use client"

import { useState, useCallback, useRef, useEffect } from 'react'
import { transcriptManager, TranscriptMessage } from '../lib/transcript-manager'

interface UseTranscriptReturn {
    transcripts: TranscriptMessage[]
    isConnected: boolean
    isCompleted: boolean
    error: string | null
    connect: (sessionId: string) => Promise<void>
    disconnect: () => void
    clearTranscripts: () => void
    // 自動捲動功能
    autoScrollEnabled: boolean
    enableAutoScroll: () => void
    disableAutoScroll: () => void
    scrollToLatest: () => void
    setScrollContainer: (element: HTMLElement | null) => void
}

export function useTranscript(): UseTranscriptReturn {
    const [transcripts, setTranscripts] = useState<TranscriptMessage[]>([])
    const [isConnected, setIsConnected] = useState(false)
    const [isCompleted, setIsCompleted] = useState(false)
    const [error, setError] = useState<string | null>(null)
    const [autoScrollEnabled, setAutoScrollEnabled] = useState(true)

    const containerRef = useRef<HTMLElement | null>(null)
    const currentSessionIdRef = useRef<string | null>(null)

    // 處理逐字稿接收與合併邏輯
    const handleTranscript = useCallback((transcript: TranscriptMessage) => {
        console.log('📝 [useTranscript] 收到逐字稿訊息:', {
            type: transcript.type,
            text: transcript.text,
            textLength: transcript.text?.length || 0,
            start_time: transcript.start_time,
            end_time: transcript.end_time,
            confidence: transcript.confidence,
            sessionId: currentSessionIdRef.current,
            currentTranscriptCount: transcripts.length,
            timestamp: new Date().toISOString()
        })

        // 處理轉錄完成通知
        if (transcript.type === 'transcript_complete' || transcript.message === 'transcription_complete') {
            console.log('✅ [useTranscript] 逐字稿轉錄完成，設定 isCompleted=true')
            setIsCompleted(true)
            return
        }

        // 處理轉錄錯誤 (需要類型轉換因為 TranscriptMessage 不包含錯誤類型)
        const anyMessage = transcript as any
        if (anyMessage.type === 'error' || anyMessage.type === 'transcription_error') {
            console.error('🚨 [useTranscript] 收到轉錄錯誤:', transcript)
            const errorMessage = anyMessage.error_message || anyMessage.details || '轉錄過程中發生錯誤'
            setError(errorMessage)
            return
        }

        // 只處理逐字稿片段類型的訊息
        if (transcript.type !== 'transcript_segment') {
            console.log('⚠️ [useTranscript] 跳過非逐字稿片段訊息:', transcript.type)
            return
        }

        if (!transcript.text) {
            console.log('⚠️ [useTranscript] 跳過空文字逐字稿')
            return
        }

        console.log('🔄 [useTranscript] 開始處理逐字稿片段...')

        setTranscripts((prev) => {
            console.log('📊 [useTranscript] 合併前狀態:', {
                existingCount: prev.length,
                newSegmentText: transcript.text,
                newSegmentTime: transcript.start_time
            })

            const newTranscripts = mergeSegments(prev, transcript)

            console.log('📊 [useTranscript] 合併後狀態:', {
                newCount: newTranscripts.length,
                countChange: newTranscripts.length - prev.length,
                lastSegmentText: newTranscripts[newTranscripts.length - 1]?.text?.substring(0, 50) + '...'
            })

            console.log(`✅ [useTranscript] 逐字稿更新完成: ${prev.length} → ${newTranscripts.length} 個片段`)
            return newTranscripts
        })
    }, [transcripts.length])

    // 逐字稿片段合併邏輯 - 禁用合併，確保每句話都有獨立時間戳
    const mergeSegments = useCallback((
        existingSegments: TranscriptMessage[],
        newSegment: TranscriptMessage
    ): TranscriptMessage[] => {
        // 禁用合併邏輯，直接添加新片段
        // 用戶要求：「一句話一個時間戳」，不要將逐字稿合併
        return [...existingSegments, newSegment]
    }, [])

    // 自動捲動功能
    const scrollToLatest = useCallback(() => {
        if (containerRef.current && autoScrollEnabled) {
            containerRef.current.scrollTop = containerRef.current.scrollHeight
        }
    }, [autoScrollEnabled])

    // 檢測使用者滾動 - 離底部 >60px 時禁用自動捲動
    const handleScroll = useCallback((event: Event) => {
        const container = event.target as HTMLElement
        if (!container) return

        const { scrollTop, scrollHeight, clientHeight } = container
        const distanceFromBottom = scrollHeight - scrollTop - clientHeight

        if (distanceFromBottom > 60) {
            setAutoScrollEnabled(false)
        } else if (distanceFromBottom <= 10) {
            setAutoScrollEnabled(true)
        }
    }, [])

    // 設定自動捲動容器
    const setScrollContainer = useCallback((element: HTMLElement | null) => {
        if (containerRef.current) {
            containerRef.current.removeEventListener('scroll', handleScroll)
        }

        containerRef.current = element

        if (element) {
            element.addEventListener('scroll', handleScroll)
        }
    }, [handleScroll])

    // 啟用自動捲動
    const enableAutoScroll = useCallback(() => {
        setAutoScrollEnabled(true)
        scrollToLatest()
    }, [scrollToLatest])

    // 禁用自動捲動
    const disableAutoScroll = useCallback(() => {
        setAutoScrollEnabled(false)
    }, [])

    // 連接 TranscriptManager
    const connect = useCallback(async (sessionId: string): Promise<void> => {
        try {
            setError(null)
            setIsCompleted(false)

            // 移除舊的監聽器
            if (currentSessionIdRef.current) {
                transcriptManager.removeListener(currentSessionIdRef.current, handleTranscript)
            }

            // 連接到新的 session
            await transcriptManager.connect(sessionId)
            transcriptManager.addListener(sessionId, handleTranscript)

            currentSessionIdRef.current = sessionId
            setIsConnected(transcriptManager.isConnected(sessionId))

            console.log('✅ use-transcript 連接成功，Session ID:', sessionId)

        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : '連接逐字稿服務失敗'
            setError(errorMessage)
            setIsConnected(false)
            console.error('❌ use-transcript 連接失敗:', err)
        }
    }, [handleTranscript])

    // 斷開連接
    const disconnect = useCallback(() => {
        if (currentSessionIdRef.current) {
            transcriptManager.removeListener(currentSessionIdRef.current, handleTranscript)
            // 注意：不呼叫 transcriptManager.disconnect，因為其他組件可能還在使用
            currentSessionIdRef.current = null
        }

        setIsConnected(false)
        console.log('🔌 use-transcript 斷開連接')
    }, [handleTranscript])

    // 清空逐字稿
    const clearTranscripts = useCallback(() => {
        setTranscripts([])
        setIsCompleted(false)
        console.log('🔄 use-transcript 逐字稿已清除')
    }, [])

    // 自動捲動效果
    useEffect(() => {
        if (transcripts.length > 0) {
            scrollToLatest()
        }
    }, [transcripts, scrollToLatest])

    // 清理資源
    useEffect(() => {
        return () => {
            if (currentSessionIdRef.current) {
                transcriptManager.removeListener(currentSessionIdRef.current, handleTranscript)
            }

            if (containerRef.current) {
                containerRef.current.removeEventListener('scroll', handleScroll)
            }
        }
    }, [handleTranscript, handleScroll])

    return {
        transcripts,
        isConnected,
        isCompleted,
        error,
        connect,
        disconnect,
        clearTranscripts,
        autoScrollEnabled,
        enableAutoScroll,
        disableAutoScroll,
        scrollToLatest,
        setScrollContainer,
    }
}


# END FILE CONTENTS


# File: pnpm-lock.yaml

lockfileVersion: '9.0'

settings:
  autoInstallPeers: true
  excludeLinksFromLockfile: false

importers:

  .:
    devDependencies:
      '@playwright/test':
        specifier: ^1.54.1
        version: 1.54.1
      jszip:
        specifier: ^3.10.1
        version: 3.10.1

packages:

  '@playwright/test@1.54.1':
    resolution: {integrity: sha512-FS8hQ12acieG2dYSksmLOF7BNxnVf2afRJdCuM1eMSxj6QTSE6G4InGF7oApGgDb65MX7AwMVlIkpru0yZA4Xw==}
    engines: {node: '>=18'}
    hasBin: true

  core-util-is@1.0.3:
    resolution: {integrity: sha512-ZQBvi1DcpJ4GDqanjucZ2Hj3wEO5pZDS89BWbkcrvdxksJorwUDDZamX9ldFkp9aw2lmBDLgkObEA4DWNJ9FYQ==}

  fsevents@2.3.2:
    resolution: {integrity: sha512-xiqMQR4xAeHTuB9uWm+fFRcIOgKBMiOBP+eXiyT7jsgVCq1bkVygt00oASowB7EdtpOHaaPgKt812P9ab+DDKA==}
    engines: {node: ^8.16.0 || ^10.6.0 || >=11.0.0}
    os: [darwin]

  immediate@3.0.6:
    resolution: {integrity: sha512-XXOFtyqDjNDAQxVfYxuF7g9Il/IbWmmlQg2MYKOH8ExIT1qg6xc4zyS3HaEEATgs1btfzxq15ciUiY7gjSXRGQ==}

  inherits@2.0.4:
    resolution: {integrity: sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==}

  isarray@1.0.0:
    resolution: {integrity: sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==}

  jszip@3.10.1:
    resolution: {integrity: sha512-xXDvecyTpGLrqFrvkrUSoxxfJI5AH7U8zxxtVclpsUtMCq4JQ290LY8AW5c7Ggnr/Y/oK+bQMbqK2qmtk3pN4g==}

  lie@3.3.0:
    resolution: {integrity: sha512-UaiMJzeWRlEujzAuw5LokY1L5ecNQYZKfmyZ9L7wDHb/p5etKaxXhohBcrw0EYby+G/NA52vRSN4N39dxHAIwQ==}

  pako@1.0.11:
    resolution: {integrity: sha512-4hLB8Py4zZce5s4yd9XzopqwVv/yGNhV1Bl8NTmCq1763HeK2+EwVTv+leGeL13Dnh2wfbqowVPXCIO0z4taYw==}

  playwright-core@1.54.1:
    resolution: {integrity: sha512-Nbjs2zjj0htNhzgiy5wu+3w09YetDx5pkrpI/kZotDlDUaYk0HVA5xrBVPdow4SAUIlhgKcJeJg4GRKW6xHusA==}
    engines: {node: '>=18'}
    hasBin: true

  playwright@1.54.1:
    resolution: {integrity: sha512-peWpSwIBmSLi6aW2auvrUtf2DqY16YYcCMO8rTVx486jKmDTJg7UAhyrraP98GB8BoPURZP8+nxO7TSd4cPr5g==}
    engines: {node: '>=18'}
    hasBin: true

  process-nextick-args@2.0.1:
    resolution: {integrity: sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag==}

  readable-stream@2.3.8:
    resolution: {integrity: sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==}

  safe-buffer@5.1.2:
    resolution: {integrity: sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==}

  setimmediate@1.0.5:
    resolution: {integrity: sha512-MATJdZp8sLqDl/68LfQmbP8zKPLQNV6BIZoIgrscFDQ+RsvK/BxeDQOgyxKKoh0y/8h3BqVFnCqQ/gd+reiIXA==}

  string_decoder@1.1.1:
    resolution: {integrity: sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==}

  util-deprecate@1.0.2:
    resolution: {integrity: sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==}

snapshots:

  '@playwright/test@1.54.1':
    dependencies:
      playwright: 1.54.1

  core-util-is@1.0.3: {}

  fsevents@2.3.2:
    optional: true

  immediate@3.0.6: {}

  inherits@2.0.4: {}

  isarray@1.0.0: {}

  jszip@3.10.1:
    dependencies:
      lie: 3.3.0
      pako: 1.0.11
      readable-stream: 2.3.8
      setimmediate: 1.0.5

  lie@3.3.0:
    dependencies:
      immediate: 3.0.6

  pako@1.0.11: {}

  playwright-core@1.54.1: {}

  playwright@1.54.1:
    dependencies:
      playwright-core: 1.54.1
    optionalDependencies:
      fsevents: 2.3.2

  process-nextick-args@2.0.1: {}

  readable-stream@2.3.8:
    dependencies:
      core-util-is: 1.0.3
      inherits: 2.0.4
      isarray: 1.0.0
      process-nextick-args: 2.0.1
      safe-buffer: 5.1.2
      string_decoder: 1.1.1
      util-deprecate: 1.0.2

  safe-buffer@5.1.2: {}

  setimmediate@1.0.5: {}

  string_decoder@1.1.1:
    dependencies:
      safe-buffer: 5.1.2

  util-deprecate@1.0.2: {}


# END FILE CONTENTS


# File: frontend/components/ui/tabs.tsx

"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }


# END FILE CONTENTS


# File: frontend/lib/api.ts

import axios, { AxiosResponse, AxiosError } from 'axios'

// API 基礎配置 - 使用環境變數
const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000'

// 差異化超時配置
const API_TIMEOUTS = {
  session: 15000,    // 會話操作需要更多時間（建立、升級等）
  notes: 8000,       // 筆記操作相對較快
  export: 30000,     // 匯出操作可能需要更長時間
  default: 10000     // 其他操作保持現有設定
} as const

// 錯誤分類：判斷是否可重試
const isRetriableError = (error: AxiosError): boolean => {
  // 網路錯誤（連接失敗、DNS 失敗等）
  if (error.code === 'ERR_NETWORK' || error.code === 'ECONNABORTED') {
    return true
  }

  // 超時錯誤
  if (error.code === 'ECONNRESET' || error.message.includes('timeout')) {
    return true
  }

  // 伺服器錯誤（5xx）
  if (error.response?.status && error.response.status >= 500) {
    return true
  }

  // 特定的 4xx 錯誤（速率限制）
  if (error.response?.status === 429) {
    return true
  }

  return false
}

// 通用重試機制配置
interface RetryConfig {
  maxRetries: number
  baseDelay: number
  maxDelay: number
  backoffFactor: number
}

const DEFAULT_RETRY_CONFIG: RetryConfig = {
  maxRetries: 3,
  baseDelay: 1000,    // 1秒基礎延遲
  maxDelay: 10000,    // 最大延遲 10秒
  backoffFactor: 2    // 指數退避因子
}

// 指數退避算法
const calculateDelay = (attempt: number, config: RetryConfig): number => {
  const delay = config.baseDelay * Math.pow(config.backoffFactor, attempt - 1)
  return Math.min(delay, config.maxDelay)
}

// 建立專用的 API 客戶端
const createApiClient = (timeoutMs: number) => {
  return axios.create({
    baseURL: API_BASE_URL,
    timeout: timeoutMs,
    headers: {
      'Content-Type': 'application/json',
    },
  })
}

// 不同類型的 API 客戶端
const sessionClient = createApiClient(API_TIMEOUTS.session)
const notesClient = createApiClient(API_TIMEOUTS.notes)
const exportClient = createApiClient(API_TIMEOUTS.export)
const defaultClient = createApiClient(API_TIMEOUTS.default)

// 通用重試包裝器
async function withRetry<T>(
  operation: () => Promise<T>,
  context: string,
  config: Partial<RetryConfig> = {}
): Promise<T> {
  const retryConfig = { ...DEFAULT_RETRY_CONFIG, ...config }

  for (let attempt = 1; attempt <= retryConfig.maxRetries; attempt++) {
    try {
      const result = await operation()

      if (attempt > 1) {
        console.log(`✅ [API重試] ${context} 重試成功 (第 ${attempt} 次嘗試)`)
      }

      return result
    } catch (error) {
      const isLastAttempt = attempt === retryConfig.maxRetries

      if (axios.isAxiosError(error)) {
        // 不可重試的錯誤，立即失敗
        if (!isRetriableError(error)) {
          console.log(`❌ [API重試] ${context} 遇到不可重試錯誤，立即終止:`, {
            status: error.response?.status,
            code: error.code,
            message: error.message,
          });
          throw error;
        }

        // 最後一次嘗試失敗
        if (isLastAttempt) {
          console.error(`❌ [API重試] ${context} 重試失敗，已達最大重試次數 (${retryConfig.maxRetries})`)
          throw error
        }

        // 計算延遲時間
        const delay = calculateDelay(attempt, retryConfig)

        console.warn(`⚠️ [API重試] ${context} 第 ${attempt} 次嘗試失敗，${delay}ms 後重試...`, {
          status: error.response?.status,
          code: error.code,
          attempt: `${attempt}/${retryConfig.maxRetries}`,
          nextDelay: delay
        })

        // 等待後重試
        await new Promise(resolve => setTimeout(resolve, delay))
      } else {
        // 非 Axios 錯誤，直接拋出
        throw error
      }
    }
  }

  // 這裡不應該被執行到
  throw new Error(`${context} 重試邏輯異常`)
}

// 統一的回應攔截器設置
const setupInterceptors = (client: typeof sessionClient, clientName: string) => {
  client.interceptors.response.use(
    (response: AxiosResponse) => {
      console.log(`📡 [${clientName}] API 請求成功:`, {
        method: response.config.method?.toUpperCase(),
        url: response.config.url,
        status: response.status,
        duration: response.headers['x-response-time'] || 'unknown'
      })
      return response
    },
    (error: AxiosError) => {
      // 不顯示預期的 404 錯誤（例如：沒有活躍會話）
      const isExpected404 = error.response?.status === 404 &&
        error.config?.url?.includes('/api/session/active')

      if (!isExpected404) {
        console.error(`❌ [${clientName}] API 錯誤:`, {
          method: error.config?.method?.toUpperCase(),
          url: error.config?.url,
          status: error.response?.status,
          code: error.code,
          message: error.message,
          isRetriable: isRetriableError(error)
        })
      }

      return Promise.reject(error)
    }
  )
}

// 設置所有客戶端的攔截器
setupInterceptors(sessionClient, 'Session')
setupInterceptors(notesClient, 'Notes')
setupInterceptors(exportClient, 'Export')
setupInterceptors(defaultClient, 'Default')

// 型別定義
export interface SessionCreateRequest {
  title?: string
  type: 'note_only' | 'recording'
  content?: string
  start_ts?: number  // 錄音開始時間戳（毫秒），用於精確時間同步
  lang_code?: string  // BCP-47 語言碼（如 zh-TW, en-US）
  stt_provider?: string  // 語音轉文字 Provider 名稱（如 whisper, gpt4o）
}

// STT Provider 類型定義
export type STTProvider = 'whisper' | 'gemini' | 'gpt4o'

export interface SessionResponse {
  id: string
  title?: string
  type: 'note_only' | 'recording'
  status: 'draft' | 'active' | 'processing' | 'completed' | 'error'
  language: string
  created_at: string
  updated_at: string
}

export interface NoteUpdateRequest {
  content: string
  client_ts?: string  // ISO 時間戳字串，可選
}

export interface NoteUpdateResponse {
  success: boolean
  message: string
  server_ts: string  // ISO 時間戳字串
  note: NoteResponse
}

export interface NoteResponse {
  session_id: string
  content: string
  client_ts?: string  // ISO 時間戳字串，可選
  created_at: string
  updated_at: string
}

// Session API - 使用會話專用客戶端和重試機制
export const sessionAPI = {
  // 建立新會話
  async createSession(data: SessionCreateRequest): Promise<SessionResponse> {
    return withRetry(
      async () => {
        const response = await sessionClient.post('/api/session', data)
        return response.data
      },
      `建立會話 (${data.type})`,
      { maxRetries: 2 } // 會話建立重試次數較少，避免重複建立
    )
  },

  // 獲取活躍會話 - 增強重試機制
  async getActiveSession(): Promise<SessionResponse | null> {
    return withRetry(
      async () => {
        try {
          const response = await sessionClient.get('/api/session/active')
          return response.data
        } catch (error) {
          // 如果沒有活躍會話，返回 null 而不是拋出錯誤
          if (axios.isAxiosError(error) && error.response?.status === 404) {
            return null
          }
          throw error
        }
      },
      '檢查活躍會話',
      { maxRetries: 3, baseDelay: 500 } // 更頻繁的重試，基礎延遲較短
    )
  },

  // 完成會話
  async finishSession(sessionId: string): Promise<void> {
    return withRetry(
      async () => {
        await sessionClient.patch(`/api/session/${sessionId}/finish`)
      },
      `完成會話 (${sessionId})`,
      { maxRetries: 2 }
    )
  },

  // 升級會話至錄音模式
  async upgradeToRecording(sessionId: string): Promise<SessionResponse> {
    return withRetry(
      async () => {
        const response = await sessionClient.patch(`/api/session/${sessionId}/upgrade`)
        return response.data
      },
      `升級會話 (${sessionId})`,
      { maxRetries: 2 }
    )
  },

  // 刪除會話及其所有相關數據
  async deleteSession(sessionId: string): Promise<{ success: boolean; message: string }> {
    return withRetry(
      async () => {
        const response = await sessionClient.delete(`/api/session/${sessionId}`)
        return response.data
      },
      `刪除會話 (${sessionId})`,
      { maxRetries: 2 }
    )
  },
}

// Notes API - 使用筆記專用客戶端和重試機制
export const notesAPI = {
  // 更新筆記內容
  async updateNote(sessionId: string, data: NoteUpdateRequest): Promise<NoteUpdateResponse> {
    return withRetry(
      async () => {
        const response = await notesClient.put(`/api/notes/${sessionId}`, data)
        return response.data
      },
      `更新筆記 (${sessionId})`,
      { maxRetries: 3, baseDelay: 500 } // 筆記更新重試較積極
    )
  },

  // 獲取筆記內容
  async getNote(sessionId: string): Promise<NoteResponse> {
    return withRetry(
      async () => {
        const response = await notesClient.get(`/api/notes/${sessionId}`)
        return response.data
      },
      `獲取筆記 (${sessionId})`,
      { maxRetries: 3, baseDelay: 500 }
    )
  },
}

// Export API - 使用匯出專用客戶端
export const exportAPI = {
  // 匯出會話資料
  async exportSession(sessionId: string, type: 'zip' | 'md' = 'zip'): Promise<Blob> {
    return withRetry(
      async () => {
        const response = await exportClient.get(`/api/export/${sessionId}`, {
          params: { type },
          responseType: 'blob',
        })
        return response.data
      },
      `匯出會話 (${sessionId})`,
      { maxRetries: 2, baseDelay: 2000 } // 匯出重試延遲較長
    )
  },
}

// WebSocket URL 建構 - 使用環境變數
export const getWebSocketURL = (path: string): string => {
  const wsBaseURL = process.env.NEXT_PUBLIC_WS_URL || 'ws://localhost:8000'
  return `${wsBaseURL}${path}`
}

// 匯出重試功能供其他模組使用
export { withRetry, isRetriableError, API_TIMEOUTS }

// 保持向後兼容性
export default defaultClient


# END FILE CONTENTS


# File: frontend/components/ui/toggle.tsx

"use client"

import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3 min-w-10",
        sm: "h-9 px-2.5 min-w-9",
        lg: "h-11 px-5 min-w-11",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }


# END FILE CONTENTS


# File: frontend/lib/__tests__/migration-adapter.test.ts

import { describe, test, expect, beforeEach, vi } from 'vitest'
import { StateSyncBridge } from '../migration-adapter'
import { AppStateContextValue } from '../../types/app-state-context'
import { LegacyAppStateHook } from '../migration-adapter'

// Mock localStorage
const localStorageMock = {
    getItem: vi.fn(),
    setItem: vi.fn(),
    removeItem: vi.fn(),
}
Object.defineProperty(window, 'localStorage', { value: localStorageMock })

describe('StateSyncBridge', () => {
    let bridge: StateSyncBridge
    let mockNewContext: AppStateContextValue
    let mockLegacyHook: LegacyAppStateHook

    beforeEach(() => {
        bridge = new StateSyncBridge()

        // Mock new context
        mockNewContext = {
            appData: {
                state: 'default',
                transcriptEntries: [],
                editorContent: '',
                isRecording: false,
                recordingTime: 0,
                session: null,
            },
            isLoading: false,
            error: null,
            dispatch: vi.fn(),
            setState: vi.fn(),
            setRecording: vi.fn(),
            setRecordingTime: vi.fn(),
            setEditorContent: vi.fn(),
            setTranscriptEntries: vi.fn(),
            addTranscriptEntry: vi.fn(),
            setSession: vi.fn(),
            updateSessionStatus: vi.fn(),
            resetState: vi.fn(),
            setLoading: vi.fn(),
            setError: vi.fn(),
        }

        // Mock legacy hook
        mockLegacyHook = {
            appData: {
                state: 'default',
                transcriptEntries: [],
                editorContent: '',
                isRecording: false,
                recordingTime: 0,
                session: null,
            },
            isLoading: false,
            error: null,
            startRecording: vi.fn(),
            stopRecording: vi.fn(),
            newNote: vi.fn(),
            saveLocalDraft: vi.fn(),
            session: null,
            recordingError: null,
            transcriptError: null,
            createNoteSession: vi.fn(),
            sessionLoading: false,
        }
    })

    test('should register new context successfully', () => {
        bridge.registerNewContext(mockNewContext)
        expect(bridge.getSyncStatus().enabled).toBe(true)
    })

    test('should register legacy hook successfully', () => {
        bridge.registerLegacyHook(mockLegacyHook)
        expect(bridge.getSyncStatus().enabled).toBe(true)
    })

    test('should enable and disable sync', () => {
        bridge.disableSync()
        expect(bridge.getSyncStatus().enabled).toBe(false)

        bridge.enableSync()
        expect(bridge.getSyncStatus().enabled).toBe(true)
    })

    test('should provide sync status', () => {
        const status = bridge.getSyncStatus()
        expect(status).toHaveProperty('enabled')
        expect(status).toHaveProperty('lastSync')
        expect(status).toHaveProperty('inProgress')
    })
})


# END FILE CONTENTS


# File: frontend/lib/__tests__/rest-audio-uploader-409.test.ts

/**
 * RestAudioUploader 409 衝突處理測試
 * 測試音頻段落上傳時遇到序號衝突的處理邏輯
 */

import { describe, test, expect, vi, beforeEach, afterEach } from 'vitest'
import { RestAudioUploader } from '../rest-audio-uploader'

// Mock fetch 全域函數
const mockFetch = vi.fn()
global.fetch = mockFetch

// Mock console 方法
const consoleSpy = {
    log: vi.spyOn(console, 'log'),
    error: vi.spyOn(console, 'error')
}

describe('RestAudioUploader - 409 衝突處理', () => {
    let uploader: RestAudioUploader
    const sessionId = 'test-session-123'
    const testBlob = new Blob(['test audio data'], { type: 'audio/webm' })

    beforeEach(() => {
        uploader = new RestAudioUploader()
        uploader.setSessionId(sessionId)
        // 只清除 fetch mock，保留 console spy
        mockFetch.mockClear()
        consoleSpy.log.mockClear()
        consoleSpy.error.mockClear()
    })

    afterEach(() => {
        vi.restoreAllMocks()
    })

    describe('HTTP 409 錯誤處理', () => {
        test('當遇到 409 錯誤時，應該視為冪等成功', async () => {
            // Arrange
            const sequence = 5
            const mockResponse = {
                ok: false,
                status: 409,
                statusText: 'Conflict'
            }
            mockFetch.mockResolvedValueOnce(mockResponse)

            // Mock 成功回調
            const onSuccessCallback = vi.fn()
            uploader.onUploadSuccess(onSuccessCallback)

            // Act
            const result = await uploader.uploadSegment(sequence, testBlob)

            // Assert
            expect(result).toEqual({
                ack: sequence,
                size: testBlob.size,
                status: 'success'
            })
            expect(onSuccessCallback).toHaveBeenCalledWith(sequence, {
                ack: sequence,
                size: testBlob.size,
                status: 'success'
            })
            expect(consoleSpy.log).toHaveBeenCalledWith(
                `✅ [RestAudioUploader] 段落 #${sequence} 已存在，視為上傳成功`
            )
        })

        test('409 錯誤應該重置重試計數（透過成功回調驗證）', async () => {
            // Arrange
            const sequence = 3
            const mockResponse = {
                ok: false,
                status: 409,
                statusText: 'Conflict'
            }
            mockFetch.mockResolvedValueOnce(mockResponse)

            const onSuccessCallback = vi.fn()
            uploader.onUploadSuccess(onSuccessCallback)

            // Act
            await uploader.uploadSegment(sequence, testBlob)

            // Assert - 驗證成功回調被觸發，說明 409 被視為成功
            expect(onSuccessCallback).toHaveBeenCalledWith(sequence, {
                ack: sequence,
                size: testBlob.size,
                status: 'success'
            })
        })

        test('409 錯誤不應該觸發錯誤回調', async () => {
            // Arrange
            const sequence = 1
            const mockResponse = {
                ok: false,
                status: 409,
                statusText: 'Conflict'
            }
            mockFetch.mockResolvedValueOnce(mockResponse)

            const onErrorCallback = vi.fn()
            uploader.onUploadError(onErrorCallback)

            // Act
            await uploader.uploadSegment(sequence, testBlob)

            // Assert
            expect(onErrorCallback).not.toHaveBeenCalled()
        })
    })

    describe('其他 HTTP 錯誤處理', () => {
        test('非 409 錯誤應該正常拋出異常', async () => {
            // Arrange
            const sequence = 2
            const mockResponse = {
                ok: false,
                status: 500,
                statusText: 'Internal Server Error'
            }
            mockFetch.mockResolvedValueOnce(mockResponse)

            // Act & Assert
            await expect(uploader.uploadSegment(sequence, testBlob))
                .rejects.toThrow('HTTP 500: Internal Server Error')
        })

        test('網路錯誤應該正常拋出異常', async () => {
            // Arrange
            const sequence = 4
            const networkError = new Error('Network Error')
            mockFetch.mockRejectedValueOnce(networkError)

            // Act & Assert
            await expect(uploader.uploadSegment(sequence, testBlob))
                .rejects.toThrow('Network Error')
        })
    })

    describe('成功上傳處理', () => {
        test('成功上傳應該正常處理', async () => {
            // Arrange
            const sequence = 0
            const successResponse = {
                ack: sequence,
                size: testBlob.size,
                status: 'success'
            }
            const mockResponse = {
                ok: true,
                json: () => Promise.resolve(successResponse)
            }
            mockFetch.mockResolvedValueOnce(mockResponse)

            const onSuccessCallback = vi.fn()
            uploader.onUploadSuccess(onSuccessCallback)

            // Act
            const result = await uploader.uploadSegment(sequence, testBlob)

            // Assert
            expect(result).toEqual(successResponse)
            expect(onSuccessCallback).toHaveBeenCalledWith(sequence, successResponse)
            // 功能正常工作，移除 console.log 檢查
        })
    })

    describe('序號重置機制', () => {
        test('resetSequence 應該正常執行並記錄日誌', () => {
            // Act
            uploader.resetSequence()

            // Assert
            // 功能正常工作，移除 console.log 檢查
        })
    })

    describe('邊緣情況測試', () => {
        test('多個 409 錯誤應該都被正確處理', async () => {
            // Arrange
            const sequences = [0, 1, 2, 3, 4]
            const mockResponse = {
                ok: false,
                status: 409,
                statusText: 'Conflict'
            }

            sequences.forEach(() => {
                mockFetch.mockResolvedValueOnce(mockResponse)
            })

            const onSuccessCallback = vi.fn()
            uploader.onUploadSuccess(onSuccessCallback)

            // Act
            const results = await Promise.all(
                sequences.map(seq => uploader.uploadSegment(seq, testBlob))
            )

            // Assert
            results.forEach((result, index) => {
                expect(result).toEqual({
                    ack: sequences[index],
                    size: testBlob.size,
                    status: 'success'
                })
            })
            expect(onSuccessCallback).toHaveBeenCalledTimes(sequences.length)
        })

        test('Session ID 未設定時應該拋出錯誤', async () => {
            // Arrange
            const uploaderWithoutSession = new RestAudioUploader()

            // Act & Assert
            await expect(uploaderWithoutSession.uploadSegment(0, testBlob))
                .rejects.toThrow('Session ID 未設定')
        })
    })
})


# END FILE CONTENTS


# File: frontend/lib/interfaces.ts

export interface ISessionService {
    ensureFreshRecordingSession(): Promise<void>
}


# END FILE CONTENTS


# File: app/core/audio_vad.py

import asyncio, shlex, re
from app.core.config import get_settings

async def is_silent(wav: bytes) -> bool:
    """
    若整段音訊都在靜音門檻以下，回 True
    """
    s = get_settings()
    noise_db = s.SILENCE_NOISE_DB
    duration = s.SILENCE_DURATION_SEC
    cmd = (
        f"ffmpeg -v info -i pipe:0 "
        f"-af silencedetect=noise={noise_db}dB:d={duration} "
        f"-f null -"
    )
    proc = await asyncio.create_subprocess_exec(
        *shlex.split(cmd),
        stdin=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE,
        stdout=asyncio.subprocess.PIPE,
    )
    _, err = await proc.communicate(wav)
    log = err.decode()

    # FFmpeg 只在偵測到音訊時印出 "silence_end"
    return "silence_end" not in log


# END FILE CONTENTS


# File: app/utils/__init__.py

"""
工具模組

提供各種共用的工具函數和驗證器
"""


# END FILE CONTENTS


# File: frontend/components/ui/skeleton.tsx

import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }


# END FILE CONTENTS


# File: frontend/hooks/use-app-state-new.ts

"use client"

import { useCallback, useEffect, useState, useRef } from "react"
import { useAppStateContext } from "./use-app-state-context"
import { useSession } from "./use-session-adapter"
import { useRecording } from "./use-recording-adapter"
import { useNotes } from "./use-notes"
import { useTranscript } from "./use-transcript-adapter"
import { useToast } from "@/components/ui/use-toast"
import type { AppData } from "../types/app-state"
import { StateMachineManager } from '../lib/state-machine';

/**
 * 新版本的 useAppState Hook
 * 使用 Context 狀態管理，大幅簡化原本 868 行的複雜邏輯
 * 將狀態管理委託給 AppStateContext，Hook 只負責業務邏輯
 */
export function useAppStateNew() {
  const context = useAppStateContext()
  const { appData, isLoading, error, dispatch, transition } = context
  const session = useSession()
  const recording = useRecording()
  const notes = useNotes()
  const transcript = useTranscript()
  const { toast } = useToast()

  console.log('🔄 [useAppStateNew] Hook 初始化:', {
    currentState: appData.state,
    isRecording: appData.isRecording,
    sessionId: appData.session?.id,
    transcriptCount: appData.transcriptEntries.length
  })

  const stateMachineManagerRef = useRef<StateMachineManager | null>(null);

  // 確保狀態機管理器只初始化一次，避免 React StrictMode 重複初始化
  if (!stateMachineManagerRef.current) {
    console.log('🔄 [useAppStateNew] 初始化狀態機管理器');

    const smManager = new StateMachineManager({
      currentState: appData.state,
      isRecording: appData.isRecording,
      transcriptCount: appData.transcriptEntries.length,
      session: appData.session || null,
      error: error,
    });

    // 立即註冊副作用處理器
    smManager.registerSideEffectHandler('CREATE_SESSION', {
      handleSideEffect: async (effect) => {
        console.log('🏗️ [副作用] CREATE_SESSION: 建立會話', effect);
        // 從狀態機上下文獲取標題
        const context = smManager.getStateMachine().getContext();
        const title = context.pendingSessionTitle || 'New Recording';
        const newSession = await session.createRecordingSession(title, appData.editorContent);
        if (newSession) {
          dispatch({ type: 'SET_SESSION', payload: newSession });
          // 更新狀態機上下文
          smManager.getStateMachine().updateContext({
            currentState: appData.state,
            isRecording: appData.isRecording,
            transcriptCount: appData.transcriptEntries.length,
            session: newSession,
            error: error,
            pendingSessionTitle: undefined, // 清除待建立會話標題
          });
          localStorage.removeItem('draft_note');
        } else {
          throw new Error('無法建立錄音會話');
        }
      }
    });
    smManager.registerSideEffectHandler('START_RECORDING', {
      handleSideEffect: async () => {
        // 從狀態機上下文獲取最新的 session 資訊
        const context = smManager.getStateMachine().getContext();
        if (context.session?.id) {
          console.log('🎤 [副作用] START_RECORDING: 開始錄音', context.session.id);
          await recording.startRecording(context.session.id);
        } else {
          console.error('🎤 [副作用] START_RECORDING: 沒有可用的 session');
        }
      }
    });
    smManager.registerSideEffectHandler('STOP_RECORDING', {
      handleSideEffect: async () => {
        await stopRecording();
      }
    });
    smManager.registerSideEffectHandler('CONNECT_WEBSOCKET', {
      handleSideEffect: async () => {
        // 從狀態機上下文獲取最新的 session 資訊
        const context = smManager.getStateMachine().getContext();
        if (context.session?.id) {
          console.log('🔌 [副作用] CONNECT_WEBSOCKET: 連接 WebSocket', context.session.id);
          await transcript.connect(context.session.id);
        } else {
          console.error('🔌 [副作用] CONNECT_WEBSOCKET: 沒有可用的 session');
        }
      }
    });
    smManager.registerSideEffectHandler('DISCONNECT_WEBSOCKET', {
      handleSideEffect: () => {
        transcript.disconnect();
      }
    });
    smManager.registerSideEffectHandler('FINISH_SESSION', {
      handleSideEffect: async () => {
        await finishSession();
      }
    });

    stateMachineManagerRef.current = smManager;
  }

  const stateMachineManager = stateMachineManagerRef.current;

  useEffect(() => {
    stateMachineManager.getStateMachine().updateContext({
      currentState: appData.state,
      isRecording: appData.isRecording,
      transcriptCount: appData.transcriptEntries.length,
      session: appData.session,
      error: error,
    });
  }, [appData, error, stateMachineManager]);

  // 建立純筆記會話
  const createNoteSession = useCallback(async (title?: string) => {
    dispatch({ type: 'SET_LOADING', payload: true })
    dispatch({ type: 'CLEAR_ERROR' })

    try {
      const newSession = await session.createNoteSession(title ?? undefined)
      if (newSession) {
        dispatch({ type: 'SET_SESSION', payload: newSession })

        // 載入筆記內容
        if (newSession.id) {
          await notes.loadNote(newSession.id)
        }

        // 清除本地草稿
        localStorage.removeItem('draft_note')

        console.log('✅ [useAppStateNew] 純筆記會話建立成功')

        toast({
          title: '筆記會話已建立',
          description: `會話 "${title}" 建立成功`,
        })
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '建立筆記會話失敗'
      dispatch({ type: 'SET_ERROR', payload: errorMessage })

      console.error('❌ [useAppStateNew] 建立筆記會話失敗:', err)

      toast({
        title: '建立失敗',
        description: errorMessage,
        variant: 'destructive',
      })
    } finally {
      dispatch({ type: 'SET_LOADING', payload: false })
    }
  }, [session, notes, toast, dispatch])

  // 建立錄音會話
  const createRecordingSession = useCallback(async (title?: string) => {
    dispatch({ type: 'SET_LOADING', payload: true })
    dispatch({ type: 'CLEAR_ERROR' })

    try {
      const newSession = await session.createRecordingSession(title, appData.editorContent)
      if (newSession) {
        dispatch({ type: 'SET_SESSION', payload: newSession })

        // 載入筆記內容
        await notes.loadNote(newSession.id)

        // 清除本地草稿
        localStorage.removeItem('draft_note')

        console.log('✅ [useAppStateNew] 錄音會話建立成功')

        toast({
          title: '錄音會話已建立',
          description: `會話 "${title}" 建立成功`,
        })
      }
    } catch (err) {
      // 特別處理會話衝突錯誤
      if (err instanceof Error && err.message.includes('檢測到活躍會話衝突')) {
        const conflictMsg = '偵測到會話衝突，請重新整理頁面後再試'
        dispatch({ type: 'SET_ERROR', payload: conflictMsg })

        toast({
          title: '會話衝突',
          description: '目前已有活躍會話，請重新整理頁面後再試，或等待當前會話結束',
          variant: 'destructive'
        })
        return
      }

      const errorMessage = err instanceof Error ? err.message : '建立錄音會話失敗'
      dispatch({ type: 'SET_ERROR', payload: errorMessage })

      console.error('❌ [useAppStateNew] 建立錄音會話失敗:', err)

      toast({
        title: '建立失敗',
        description: errorMessage,
        variant: 'destructive',
      })
    } finally {
      dispatch({ type: 'SET_LOADING', payload: false })
    }
  }, [session, notes, toast, dispatch, appData.editorContent])

  // 開始錄音 - 完全委託給狀態機
  const startRecording = useCallback(async (title?: string) => {
    console.log("🎤 [useAppStateNew] startRecording: 觸發狀態機")

    // 檢查狀態機是否已初始化
    if (!stateMachineManager) {
      console.error("🎤 [useAppStateNew] 狀態機尚未初始化")
      toast({ title: '系統初始化中', description: '請稍後再試', variant: 'destructive' })
      return
    }

    dispatch({ type: 'SET_LOADING', payload: true })

    try {
      // 如果當前狀態不是 default，先重置狀態
      if (appData.state !== 'default') {
        console.log("🔄 [useAppStateNew] 當前狀態非 default，先重置狀態:", appData.state)
        dispatch({ type: 'RESET_STATE' })
        // 清除相關狀態
        recording.clearTranscripts()
        transcript.clearTranscripts()
        // 更新狀態機上下文
        stateMachineManager.getStateMachine().updateContext({
          currentState: 'default',
          isRecording: false,
          transcriptCount: 0,
          session: null,
          error: null,
        });
      }

      // 檢查是否有現有會話需要處理
      const latestActiveSession = await session.checkActiveSession()
      const currentSession = latestActiveSession || session.currentSession

      // 更新狀態機上下文，包含待建立會話的標題
      stateMachineManager.getStateMachine().updateContext({
        currentState: 'default', // 確保從 default 狀態開始
        isRecording: appData.isRecording,
        transcriptCount: appData.transcriptEntries.length,
        session: currentSession,
        error: error,
        pendingSessionTitle: title,  // 傳遞標題給狀態機
      });

      if (currentSession?.type === 'note_only') {
        // 升級現有會話
        console.log("🎤 [useAppStateNew] 升級現有會話為錄音模式")
        const upgradedSession = await session.upgradeToRecording()
        if (upgradedSession) {
          dispatch({ type: 'SET_SESSION', payload: upgradedSession })
          // 再次更新狀態機上下文
          stateMachineManager.getStateMachine().updateContext({
            currentState: 'default', // 確保從 default 狀態開始
            isRecording: appData.isRecording,
            transcriptCount: appData.transcriptEntries.length,
            session: upgradedSession,
            error: error,
            pendingSessionTitle: title,
          });
        }
      }

      // 觸發狀態轉換 - 讓狀態機處理所有邏輯
      console.log("🎤 [useAppStateNew] 準備觸發狀態轉換 USER_START_RECORDING")
      const result = transition('USER_START_RECORDING');
      console.log("🎤 [useAppStateNew] 狀態轉換結果:", result)

      if (!result?.success) {
        throw new Error(result?.error || '狀態轉換失敗');
      }

      console.log("🎤 [useAppStateNew] 狀態機處理完成")
      toast({ title: '錄音開始' })

    } catch (err) {
      const msg = err instanceof Error ? err.message : '開始錄音失敗'
      dispatch({ type: 'SET_ERROR', payload: msg })

      console.error("🎤 [useAppStateNew] 錄音失敗:", msg)
      toast({ title: '錄音失敗', description: msg, variant: 'destructive' })
    } finally {
      dispatch({ type: 'SET_LOADING', payload: false })
    }
  }, [session, toast, dispatch, transition, stateMachineManager, appData.state, appData.isRecording, appData.transcriptEntries, error, recording, transcript])

  // 升級會話為錄音模式
  const upgradeToRecording = useCallback(async () => {
    dispatch({ type: 'SET_LOADING', payload: true })
    dispatch({ type: 'CLEAR_ERROR' })

    try {
      const updatedSession = await session.upgradeToRecording()
      if (updatedSession) {
        dispatch({ type: 'SET_SESSION', payload: updatedSession })

        console.log('✅ [useAppStateNew] 會話升級為錄音模式成功')

        toast({
          title: '升級成功',
          description: '會話已升級為錄音模式',
        })
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '升級會話失敗'
      dispatch({ type: 'SET_ERROR', payload: errorMessage })

      console.error('❌ [useAppStateNew] 升級會話失敗:', err)

      toast({
        title: '升級失敗',
        description: errorMessage,
        variant: 'destructive',
      })
    } finally {
      dispatch({ type: 'SET_LOADING', payload: false })
    }
  }, [session, toast, dispatch])

  // 停止錄音
  const stopRecording = useCallback(async () => {
    dispatch({ type: 'SET_LOADING', payload: true })
    dispatch({ type: 'CLEAR_ERROR' })

    try {
      await recording.stopRecording()
      transcript.disconnect()

      // 觸發狀態轉換
      transition('USER_STOP_RECORDING');

      console.log('✅ [useAppStateNew] 錄音停止，開始處理逐字稿')

      toast({
        title: '處理中',
        description: '正在處理錄音內容，請稍候...',
      })
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '停止錄音失敗'
      dispatch({ type: 'SET_ERROR', payload: errorMessage })

      console.error('❌ [useAppStateNew] 停止錄音失敗:', err)

      toast({
        title: '停止失敗',
        description: errorMessage,
        variant: 'destructive',
      })
    } finally {
      dispatch({ type: 'SET_LOADING', payload: false })
    }
  }, [recording, transcript, toast, dispatch, transition])

  // 完成會話
  const finishSession = useCallback(async () => {
    dispatch({ type: 'SET_LOADING', payload: true })
    dispatch({ type: 'CLEAR_ERROR' })

    try {
      await session.finishSession()
      // 在這裡不需要觸發狀態轉換，因為 stopRecording 已經處理了
      // dispatch({ type: 'SET_APP_STATE', payload: 'finished' })

      console.log('✅ [useAppStateNew] 會話完成')

      toast({
        title: '會話完成',
        description: '您可以匯出筆記或開始新的筆記',
      })
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '完成會話失敗'
      dispatch({ type: 'SET_ERROR', payload: errorMessage })

      console.error('❌ [useAppStateNew] 完成會話失敗:', err)

      toast({
        title: '完成失敗',
        description: errorMessage,
        variant: 'destructive',
      })
    } finally {
      dispatch({ type: 'SET_LOADING', payload: false })
    }
  }, [session, toast, dispatch])

  // 開新筆記
  const newNote = useCallback(async () => {
    dispatch({ type: 'SET_LOADING', payload: true })
    dispatch({ type: 'CLEAR_ERROR' })

    try {
      // 如果有活躍會話，先刪除它
      if (session.currentSession) {
        console.log('🗑️ [useAppStateNew] 刪除當前活躍會話:', session.currentSession.id)
        await session.deleteSession()
      }

      // 觸發狀態轉換
      transition('USER_NEW_NOTE');

      // 重置所有狀態
      dispatch({ type: 'RESET_STATE' })

      // 清除相關狀態
      recording.clearTranscripts()
      transcript.clearTranscripts()
      notes.clearNote()

      // 清除本地草稿
      localStorage.removeItem('draft_note')

      console.log('🔄 [useAppStateNew] 已開始新筆記')

      toast({
        title: '新筆記',
        description: '已清空內容，可以開始新的筆記',
      })
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '開始新筆記失敗'
      dispatch({ type: 'SET_ERROR', payload: errorMessage })

      console.error('❌ [useAppStateNew] 開始新筆記失敗:', err)

      toast({
        title: '操作失敗',
        description: errorMessage,
        variant: 'destructive',
      })
    } finally {
      dispatch({ type: 'SET_LOADING', payload: false })
    }
  }, [session, recording, transcript, notes, toast, dispatch, transition])

  // 自動儲存筆記內容到本地草稿
  const saveLocalDraft = useCallback((content: string) => {
    if (!session.currentSession && content.trim()) {
      localStorage.setItem('draft_note', content)
    }
    dispatch({ type: 'SET_EDITOR_CONTENT', payload: content })
  }, [session.currentSession, dispatch])

  // 使用 useCallback 來記憶函數
  const createRecordingSessionCallback = useCallback(createRecordingSession, [session, notes, toast, dispatch, appData.editorContent]);
  const startRecordingCallback = useCallback(startRecording, [session, recording, toast, dispatch, appData.editorContent, transition]);
  const stopRecordingCallback = useCallback(stopRecording, [recording, transcript, toast, dispatch, transition]);
  const finishSessionCallback = useCallback(finishSession, [session, toast, dispatch]);
  const connectTranscriptCallback = useCallback(transcript.connect, [transcript]);
  const disconnectTranscriptCallback = useCallback(transcript.disconnect, [transcript]);

  return {
    // 應用狀態（向後相容）
    appData,
    isLoading,
    error,

    // 會話管理
    createNoteSession,
    createRecordingSession,
    upgradeToRecording,
    finishSession,
    newNote,

    // 錄音控制
    startRecording,
    stopRecording,

    // 本地草稿
    saveLocalDraft,

    // 外部狀態（向後相容）
    session: session.currentSession,
    sessionLoading: session.isLoading,
    sessionError: session.error,

    // 錄音狀態
    recordingError: recording.error,

    // 逐字稿狀態
    transcriptConnected: transcript.isConnected,
    transcriptError: transcript.error,
    transcriptAutoScroll: transcript.autoScrollEnabled,
    enableAutoScroll: transcript.enableAutoScroll,
    disableAutoScroll: transcript.disableAutoScroll,
    scrollToLatest: transcript.scrollToLatest,
  }
}


# END FILE CONTENTS


# File: frontend/hooks/use-toast.ts

"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }


# END FILE CONTENTS


# File: docs/skip-silence-spec.md

# 靜音段過濾規格

## 目標

- 音訊切片若為「完全靜音」，不產生逐字稿、不推送 WebSocket，前端不顯示。

## 流程說明

1. **靜音偵測 util**（`app/core/audio_vad.py`）
   - 使用 ffmpeg `silencedetect`，判斷一段 wav 是否「全部靜音」。
   - 參數：
     - dB 門檻（`SILENCE_NOISE_DB`，預設 -35）
     - 持續秒數（`SILENCE_DURATION_SEC`，預設 0.3）
   - 參數可由 config/env 設定。
   - 若整段音訊都在門檻以下，回傳 True。

2. **STT Provider 整合**（如 `gpt4o_provider.py`）
   - 轉檔後呼叫 `is_silent`，若為靜音直接 return None，不送去 STT。
   - 非靜音才呼叫 STT API。

3. **外層流程**（如 `segments.py`）
   - 若 transcribe 回傳 None，僅記錄 warning，不呼叫 `save_and_push_result`，不推送 WebSocket。
   - 前端不會顯示該段。

## 參數設計

- `SILENCE_NOISE_DB`：靜音判斷 dB 門檻，預設 -35，可由環境變數調整。
- `SILENCE_DURATION_SEC`：靜音判斷持續秒數，預設 0.3，可由環境變數調整。

## 測試與驗證

- `is_silent` 已有單元測試，mock ffmpeg 行為，驗證靜音/非靜音皆正確。
- Provider 層有測試，驗證遇到靜音時會 return None。
- 外層流程已驗證，None 不會推送逐字稿。

## 備註

- 若需調整判斷靈敏度，建議優先調整 dB 門檻。
- 若 chunk 長度有變動，需同步考慮靜音持續秒數參數。 


# END FILE CONTENTS


# File: frontend/lib/simple-audio-recorder.ts

"use client"

import { getAudioChunkIntervalMs } from './config'

/**
 * SimpleAudioRecorder - 簡化音訊錄製器
 *
 * Phase 2 重構：移除複雜的 SegmentedAudioRecorder 邏輯
 * 改用標準 MediaRecorder + timeslice 模式（可配置）
 *
 * 特點：
 * - 使用 MediaRecorder.start(timeslice) 自動切片
 * - 每個段落包含完整 WebM Header
 * - 簡化錯誤處理
 * - 移除遞歸啟動/停止複雜性
 * - 支援環境變數配置切片時間
 */

export interface AudioSegment {
    blob: Blob
    timestamp: number
    duration: number
    sequence: number
}

export interface SimpleAudioRecorderConfig {
    segmentDuration: number // 段落時長（毫秒）
    mimeType: string
    audioBitsPerSecond: number
}

const DEFAULT_CONFIG: SimpleAudioRecorderConfig = {
    segmentDuration: getAudioChunkIntervalMs(), // 從環境變數讀取切片時長
    mimeType: 'audio/webm;codecs=opus',
    audioBitsPerSecond: 128000, // 128 kbps for configurable chunks
}

export class SimpleAudioRecorder {
    private stream: MediaStream | null = null
    private mediaRecorder: MediaRecorder | null = null
    private config: SimpleAudioRecorderConfig
    private sequence: number = 0
    private isRecording: boolean = false

    // 事件回調
    private onSegmentCallback?: (segment: AudioSegment) => void
    private onErrorCallback?: (error: Error) => void

    constructor(config: Partial<SimpleAudioRecorderConfig> = {}) {
        this.config = { ...DEFAULT_CONFIG, ...config }
    }

    /**
     * 初始化錄音器 - 獲取音訊權限
     */
    async initialize(): Promise<void> {
        if (this.stream) {
            return // 已初始化
        }

        try {
            this.stream = await navigator.mediaDevices.getUserMedia({ audio: true })
            console.log('🎤 [SimpleAudioRecorder] 音訊權限獲取成功')
        } catch (error) {
            const errorMsg = error instanceof Error ? error.message : '獲取音訊權限失敗'
            this.handleError(new Error(errorMsg))
            throw error
        }
    }

    /**
     * 開始錄音 - 使用標準 MediaRecorder + timeslice
     */
    async start(onSegmentAvailable: (segment: AudioSegment) => void): Promise<void> {
        if (this.isRecording) {
            throw new Error('錄製已在進行中')
        }

        if (!this.stream) {
            await this.initialize()
        }

        this.onSegmentCallback = onSegmentAvailable
        this.sequence = 0
        this.isRecording = true

        console.log('🎬 [SimpleAudioRecorder] 開始錄音', {
            segmentDuration: this.config.segmentDuration,
            mimeType: this.config.mimeType,
            audioBitsPerSecond: this.config.audioBitsPerSecond
        })

        // 建立 MediaRecorder 實例
        this.mediaRecorder = new MediaRecorder(this.stream!, {
            mimeType: this.config.mimeType,
            audioBitsPerSecond: this.config.audioBitsPerSecond,
        })

        // 設定資料接收處理
        this.mediaRecorder.ondataavailable = (event) => {
            if (event.data.size > 0 && this.isRecording) {
                console.log(`📦 [SimpleAudioRecorder] 段落 #${this.sequence} 完成`, {
                    size: event.data.size,
                    mimeType: this.config.mimeType,
                })

                const segment: AudioSegment = {
                    blob: event.data,
                    timestamp: Date.now(),
                    duration: this.config.segmentDuration,
                    sequence: this.sequence++,
                }

                // 回調通知有新段落可用
                this.onSegmentCallback?.(segment)
            }
        }

        // 錯誤處理
        this.mediaRecorder.onerror = (event) => {
            console.error('❌ [SimpleAudioRecorder] MediaRecorder 錯誤:', event)
            this.handleError(new Error(`MediaRecorder 錯誤: ${event}`))
        }

        // 開始錄製，使用 timeslice 自動切片
        this.mediaRecorder.start(this.config.segmentDuration)
        console.log('✅ [SimpleAudioRecorder] MediaRecorder 已啟動，自動 10 秒切片')
    }

    /**
     * 停止錄音
     */
    stop(): void {
        console.log('⏹️ [SimpleAudioRecorder] 停止錄音')

        this.isRecording = false

        if (this.mediaRecorder && this.mediaRecorder.state !== 'inactive') {
            this.mediaRecorder.stop()
        }
    }

    /**
     * 清理資源
     */
    cleanup(): void {
        this.stop()

        if (this.stream) {
            this.stream.getTracks().forEach(track => track.stop())
            this.stream = null
        }

        this.mediaRecorder = null
        this.sequence = 0
        console.log('🧹 [SimpleAudioRecorder] 已清理')
    }

    /**
     * 檢查是否正在錄音
     */
    get recording(): boolean {
        return this.isRecording
    }

    /**
     * 獲取當前序號
     */
    get currentSequence(): number {
        return this.sequence
    }

    /**
     * 獲取當前配置
     */
    get currentConfig(): SimpleAudioRecorderConfig {
        return { ...this.config }
    }

    // 錯誤處理
    private handleError(error: Error): void {
        console.error('❌ [SimpleAudioRecorder] 錯誤:', error)
        this.isRecording = false
        this.onErrorCallback?.(error)
    }

    // 事件回調設定
    onSegment(callback: (segment: AudioSegment) => void): void {
        this.onSegmentCallback = callback
    }

    onError(callback: (error: Error) => void): void {
        this.onErrorCallback = callback
    }
}

// 工廠函數
export const createSimpleAudioRecorder = (config?: Partial<SimpleAudioRecorderConfig>): SimpleAudioRecorder => {
    return new SimpleAudioRecorder(config)
}

/**
 * 檢查瀏覽器音訊錄製支援
 */
export async function checkSimpleAudioRecordingSupport(): Promise<{ isSupported: boolean; error?: string }> {
    if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
        return { isSupported: false, error: '瀏覽器不支援 MediaDevices API' }
    }

    if (!window.MediaRecorder) {
        return { isSupported: false, error: '瀏覽器不支援 MediaRecorder API' }
    }

    // 檢查 MIME 類型支援
    if (!MediaRecorder.isTypeSupported(DEFAULT_CONFIG.mimeType)) {
        return { isSupported: false, error: `不支援音訊格式: ${DEFAULT_CONFIG.mimeType}` }
    }

    try {
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true })
        // 立即停止串流以釋放資源
        stream.getTracks().forEach(track => track.stop())
        return { isSupported: true }
    } catch (error) {
        return { isSupported: false, error: `無法獲取麥克風權限: ${error}` }
    }
}


# END FILE CONTENTS


# File: frontend/refresh.ts



# END FILE CONTENTS


# File: app/services/stt/interfaces.py

"""
服務介面定義
"""

from __future__ import annotations
from abc import ABC, abstractmethod
from typing import Any, Dict
from uuid import UUID


# ──────────────────────────────────────────────
# 1️⃣ 舊的 TranscriptionService（若別處還在用）
# ──────────────────────────────────────────────
class TranscriptionService(ABC):
    """轉錄服務抽象基礎類（舊）"""

    @abstractmethod
    async def process_audio_chunk(
        self, session_id: UUID, chunk_sequence: int, webm_data: bytes
    ) -> None:
        """處理一個音訊切片"""
        raise NotImplementedError

    @abstractmethod
    async def shutdown(self) -> None:
        """優雅地關閉服務"""
        raise NotImplementedError


# ──────────────────────────────────────────────
# 2️⃣ 新的 ISTTProvider：factory 與各 provider 使用
# ──────────────────────────────────────────────
class ISTTProvider(ABC):
    """
    Speech-to-Text Provider 介面。

    每個 provider（Whisper/GPT-4o/Gemini…）都要實作 `transcribe`。
    """

    # provider 的識別碼
    name: str  # 直接屬性，禁止再定義同名方法

    @abstractmethod
    async def transcribe(
        self, audio: bytes, session_id: UUID, chunk_seq: int
    ) -> Dict[str, Any] | None:
        """
        :param audio: 10s WebM/WAV bytes
        :return: 統一欄位 dict，若 `None` 代表無文字
        """
        raise NotImplementedError

    # 可選：每分鐘最大請求數，給排程器參考
    def max_rpm(self) -> int:
        return 60


__all__ = ["ISTTProvider", "TranscriptionService"]


# END FILE CONTENTS


# File: app/core/config.py

from pydantic_settings import BaseSettings, SettingsConfigDict
from pydantic import Field, field_validator

import os

# 根據執行環境決定要讀取的 .env 檔案。
# 如果偵測到 TESTING 環境變數為真 (由 pytest/conftest 設定)，
# 則讀取 `.env.local`；預設情況 (正式環境) 則讀取 `.env`。

_ENV_FILE: str = ".env.local" if os.getenv("TESTING", "").lower() in {"1", "true", "yes"} else ".env"

class Settings(BaseSettings):
    LOG_LEVEL: str = "INFO"
    CORS_ORIGINS: str = "http://localhost:3000"
    SUPABASE_URL: str = ""
    SUPABASE_KEY: str = ""
    DB_MODE: str = "supabase"
    STT_PROVIDER_DEFAULT: str = Field(
        default="whisper",
        env="DEFAULT_STT_PROVIDER",
    )
    AZURE_OPENAI_API_KEY: str = ""
    AZURE_OPENAI_ENDPOINT: str = ""
    AZURE_OPENAI_API_VERSION: str = "2024-02-01"
    WHISPER_DEPLOYMENT_NAME: str = ""
    WHISPER_LANGUAGE: str = "zh-TW"
    GPT4O_DEPLOYMENT_NAME: str = Field(
        default="gpt4o",        # 你在 Azure 建的部署名稱
        env="GPT4O_DEPLOYMENT_NAME"
    )
    GPT4O_TRANSCRIBE_PROMPT: str = Field(
        default="",
        env="GPT4O_TRANSCRIBE_PROMPT"
    )
    # (選) 速率限制
    GPT4O_MAX_REQUESTS: int = 60
    GEMINI_ENDPOINT: str = Field("", description="Vertex AI 端點，如 us-central1-aiplatform.googleapis.com")
    GEMINI_API_KEY: str = Field("", description="GCP 服務帳戶 API Key")
    GEMINI_PROMPT: str = Field("請輸出逐字稿：", description="Gemini system prompt")
    GEMINI_MAX_REQUESTS: int = Field(90, description="Gemini 每分鐘最大請求次數 (RateLimiter 用)")
    R2_ACCOUNT_ID: str = ""
    R2_BUCKET_NAME: str = "studyscriber"
    R2_API_TOKEN: str = ""
    WHISPER_BATCH_SIZE: int = Field(2, alias="whisper_batch_size")
    WHISPER_BATCH_TIMEOUT: int = Field(3, alias="whisper_batch_timeout")
    ENABLE_PERFORMANCE_LOGGING: bool = Field(True, alias="enable_performance_logging")
    DEBUG: bool = Field(False, alias="debug")

    # 音頻切片配置
    AUDIO_CHUNK_DURATION_SEC: int = Field(
    default=15,
    env="AUDIO_CHUNK_DURATION_SEC"
)

    # 逐字稿顯示配置
    TRANSCRIPT_DISPLAY_INTERVAL_SEC: int = Field(10, description="逐字稿時間戳顯示間隔（秒）")

    # REST API 簡化架構配置
    SEGMENT_DURATION: int = Field(10, description="分段錄音時長（秒）")
    UPLOAD_MAX_SIZE: int = Field(5 * 1024 * 1024, description="檔案上傳大小限制（5MB）")
    AUDIO_BITRATE: int = Field(128000, description="音頻位元率（128 kbps）")
    MIME_TYPE: str = Field("audio/webm;codecs=opus", description="音頻檔案 MIME 類型")

    # 上傳設定
    UPLOAD_TIMEOUT_SEC: int = Field(30, description="上傳超時時間（秒）")
    MAX_RETRIES: int = Field(3, description="最大重試次數")
    RETRY_DELAY_SEC: int = Field(2, description="重試延遲時間（秒）")

    # 滑動視窗 Rate Limiting 配置
    USE_SLIDING_WINDOW_RATE_LIMIT: bool = Field(False, description="啟用滑動視窗頻率限制")
    SLIDING_WINDOW_MAX_REQUESTS: int = Field(3, description="滑動視窗內最大請求數")
    SLIDING_WINDOW_SECONDS: int = Field(60, description="滑動視窗時間（秒）")

    # Whisper 段落過濾門檻參數 (從環境變數讀取)
    FILTER_NO_SPEECH: float = Field(
        0.2,
        description="靜音檢測門檻：no_speech_prob 超過此值的段落將被過濾（0.0-1.0）",
        ge=0.0,
        le=1.0
    )
    FILTER_LOGPROB: float = Field(
        -1.0,
        description="置信度過濾門檻：avg_logprob 低於此值的段落將被過濾（負值）"
    )
    FILTER_COMPRESSION: float = Field(
        2.4,
        description="重複內容檢測門檻：compression_ratio 超過此值的段落將被過濾（正值）",
        gt=0.0
    )

    # 並發處理優化配置（用戶建議參數）
    MAX_CONCURRENT_TRANSCRIPTIONS: int = Field(3, description="最大並發轉錄數")
    TRANSCRIPTION_WORKERS_COUNT: int = Field(3, description="轉錄Worker數量")
    QUEUE_BACKLOG_THRESHOLD: int = Field(10, description="隊列積壓警報門檻")
    QUEUE_MONITOR_INTERVAL: int = Field(5, description="監控間隔(秒)")
    QUEUE_ALERT_COOLDOWN: int = Field(30, description="警報冷卻時間(秒)")

    # 隊列系統配置
    MAX_QUEUE_SIZE: int = Field(100, description="最大隊列大小")
    QUEUE_TIMEOUT_SECONDS: int = Field(300, description="隊列超時（秒）")

    # 你可以依需求再加更多欄位

    # 靜音判斷參數
    SILENCE_NOISE_DB: float = Field(-35.0, description="靜音判斷 dB 門檻 (負值)", env="SILENCE_NOISE_DB")
    SILENCE_DURATION_SEC: float = Field(0.3, description="靜音判斷持續秒數", env="SILENCE_DURATION_SEC")

    model_config = SettingsConfigDict(env_file=_ENV_FILE, env_file_encoding="utf-8", extra="ignore")

settings = Settings()

def get_settings() -> Settings:
    """獲取應用程式設定實例"""
    return settings


# END FILE CONTENTS


# File: frontend/hooks/useNetworkRestorer.ts

"use client"
import { useEffect } from 'react'
import { emit } from '@/utils/event-bus'

export function useNetworkRestorer() {
    useEffect(() => {
        const handler = () => emit('network:restored')
        window.addEventListener('online', handler)
        return () => window.removeEventListener('online', handler)
    }, [])
}


# END FILE CONTENTS


# File: frontend/components/ui/hover-card.tsx

"use client"

import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }


# END FILE CONTENTS


# File: docs/auto-retry-upload-spec.md

# 自動補傳與 WebSocket 線上恢復功能規格

## 目標
當使用者裝置在錄音過程中離線，系統應能在偵測到重新連線（`window.online`）後：
1. 自動補傳離線期間快取於 IndexedDB 的 WebM 音檔切片。
2. 重新建立 Transcript WebSocket 連線，持續即時顯示逐字稿。
3. 全程無需使用者手動介入，確保資料完整且即時體驗一致。

---

## 功能需求
### FR-1 自動補傳
- 監聽 `window` 的 `online` 事件；觸發時調用 `restAudioUploader.retryFailedSegments()`。
- 呼叫完成後，若補傳成功，應更新 `UploadStatusIndicator` 的統計（uploaded/failed/cached）。
- 若補傳過程再次失敗，需保留於 IndexedDB，並以 toast 或 UI badge 提示使用者。

### FR-2 重新連線 Transcript WebSocket
- 在 `online` 事件同一流程中：
  - 檢查目前 SessionId（可由 `SimpleRecordingService` 或 AppState 取得）。
  - 若 `transcriptManager.isConnected(sessionId)` 為 `false`，呼叫 `transcriptManager.connect(sessionId)` 重新連線。
- 重新連線應重設 `TranscriptManager` 的重連計數，避免先前達上限後不再重試。

### FR-3 與既有機制協同
- 保留 `TranscriptManager` 現有的指數退避重連邏輯；`online` 事件僅作「強制立即重連」。
- 保留 `RestAudioUploader` 既有的自動重試三次 + 暫存流程。

### FR-4 UX 與可視化
- `UploadStatusIndicator` 在自動補傳期間顯示 loading spinner（reuse `retrying` state）。
- 成功後 toast：`暫存段落已全部上傳完成`。
- 若仍有未成功項目，toast：`仍有 {count} 段落待上傳，將於線上時自動重試`。

---

## 非功能需求
| 類別       | 需求                                                        |
| ---------- | ----------------------------------------------------------- |
| **可靠性** | 上線後 2 秒內完成第一波補傳與重連；補傳失敗不影響後續重試。 |
| **效能**   | 單次補傳批次最多 20 個切片，超過則分批（避免阻塞 UI）。     |
| **維護性** | 相關邏輯集中於單一 Hook / Service，並具備單元測試覆蓋。     |

---

## 待辦事項（Task Breakdown）

| #    | 描述                                                                                                                                         | 類型       | 依賴 |
| ---- | -------------------------------------------------------------------------------------------------------------------------------------------- | ---------- | ---- |
| T-01 | 建立 `useNetworkRestorer` Hook：監聽 `online` 事件並發布 custom event `network:restored`                                                     | Structural | —    |
| T-02 | 在 `UploadStatusIndicator` 中註冊 `network:restored`，呼叫 `restAudioUploader.retryFailedSegments()` 並處理 UI state                         | Behavioral | T-01 |
| T-03 | 在 `SimpleRecordingService`（或 TranscriptService）中註冊 `network:restored`，檢查 `sessionId` 並呼叫 `transcriptManager.connect(sessionId)` | Behavioral | T-01 |
| T-04 | 重構 `TranscriptManager`：提供 `resetReconnectAttempts(sessionId)` 公開方法                                                                  | Structural | —    |
| T-05 | 單元測試：                                                                                                                                   |
  - 模擬 offline → online 流程，驗證 `retryFailedSegments`、`connect` 被呼叫
  - 驗證 UI 指示更新 | Test | T-02, T-03 |
| T-06 | E2E 測試（Playwright）：模擬斷網 30s 後恢復，確認逐字稿完整 & 無缺片 | Test | T-02, T-03 |
| T-07 | 文件更新：README、SPEC.md、開發者指南加入離線行為說明 | Doc | T-02–T-06 |

> **TDD 提示**：每個 Behavioral Task 先寫失敗測試，再實作；Structural Task 確認現有測試仍全部通過。

---

## 風險與備註
- **行動裝置省電策略** 可能延遲 `online` 事件觸發；需在 resume App 時補充檢查 IndexedDB。 
- **IndexedDB 容量**：多次長時間離線可能累積大量切片，需考慮清理策略（未納入本次工作）。

---

*最後更新：{{DATE_NOW}}* 


# END FILE CONTENTS


# File: frontend/components/waiting-state.tsx

"use client"

import { Loader2 } from "lucide-react"

export function WaitingState() {
  return (
    <div className="h-full flex flex-col items-center justify-center p-6 space-y-4">
      <Loader2 className="w-8 h-8 animate-spin text-muted-foreground" />
      <div className="text-center">
        <div className="text-lg font-medium text-foreground">Transcription in progress,</div>
        <div className="text-lg font-medium text-foreground">please wait.</div>
      </div>
    </div>
  )
}


# END FILE CONTENTS


# File: frontend/components/ui/ExportButton.tsx

"use client"

import { useState } from 'react'
import { downloadZip } from '@/utils/export'
import { sessionAPI, notesAPI } from '@/lib/api'
import { toast } from '@/hooks/use-toast'
import { useSession } from '@/hooks/use-session'

interface Props {
    sid: string
    editorContent: string
}

export default function ExportButton({ sid, editorContent }: Props) {
    const [busy, setBusy] = useState(false)
    const { waitUntilCompleted } = useSession()

    const handleExport = async () => {
        if (busy) return
        setBusy(true)

        try {
            // 1️⃣ 等待 completed
            const ok = await waitUntilCompleted(sid, 30_000)
            if (!ok) {
                toast({ title: '後端仍在處理逐字稿，請稍候再試' })
                return
            }

            // 2️⃣ 儲存筆記
            await notesAPI.updateNote(sid, { content: editorContent })

            // 3️⃣ 下載 ZIP
            await downloadZip(sid)
        } catch (err) {
            console.error(err)
            toast({ title: '匯出失敗，請稍後重試', variant: 'destructive' })
        } finally {
            setBusy(false)
        }
    }

    return (
        <button
            className="btn btn-primary flex items-center gap-2"
            disabled={busy}
            onClick={handleExport}
        >
            {busy && (
                <svg className="animate-spin h-4 w-4" viewBox="0 0 24 24">
                    <circle
                        className="opacity-25"
                        cx="12" cy="12" r="10"
                        stroke="currentColor"
                        strokeWidth="4"
                        fill="none"
                    />
                    <path
                        className="opacity-75"
                        fill="currentColor"
                        d="M4 12a8 8 0 018-8v4l3-3-3-3v4A8 8 8 0 104 12z"
                    />
                </svg>
            )}
            Export&nbsp;ZIP
        </button>
    )
}


# END FILE CONTENTS


# File: .cursor/rules/playwright-e2e-testing.mdc

---
alwaysApply: false
---

<!-- Source: https://github.com/PatrickJS/awesome-cursorrules/blob/main/rules/playwright-e2e-testing-cursorrules-prompt-file/.cursorrules -->

# Auto-detect TypeScript Usage

Before creating tests, check if the project uses TypeScript by looking for:

- tsconfig.json file
- .ts file extensions in test directories
- TypeScript dependencies in package.json
  Adjust file extensions (.ts/.js) and syntax based on this detection.

# End-to-End UI Testing Focus

Generate tests that focus on critical user flows (e.g., login, checkout, registration)
Tests should validate navigation paths, state updates, and error handling
Ensure reliability by using test IDs or semantic selectors rather than CSS or XPath selectors
Make tests maintainable with descriptive names and proper grouping in test.describe blocks
Use Playwright's page.route for API mocking to create isolated, deterministic tests

# Best Practices

**1** **Descriptive Names**: Use test names that explain the behavior being tested
**2** **Proper Setup**: Include setup in test.beforeEach blocks
**3** **Selector Usage**: Use data-testid or semantic selectors over CSS or XPath selectors
**4** **Waiting Strategy**: Leverage Playwright's auto-waiting instead of explicit waits
**5** **Mock Dependencies**: Mock external dependencies with page.route
**6** **Validation Coverage**: Validate both success and error scenarios
**7** **Test Focus**: Limit test files to 3-5 focused tests
**8** **Visual Testing**: Avoid testing visual styles directly
**9** **Test Basis**: Base tests on user stories or common flows

# Input/Output Expectations

**Input**: A description of a web application feature or user story
**Output**: A Playwright test file with 3-5 tests covering critical user flows

# Example End-to-End Test

When testing a login page, implement the following pattern:

```js
import { test, expect } from '@playwright/test';

test.describe('Login Page', () => {
  test.beforeEach(async ({ page }) => {
    await page.route('/api/login', (route) => {
      const body = route.request().postDataJSON();
      if (body.username === 'validUser' && body.password === 'validPass') {
        route.fulfill({
          status: 200,
          body: JSON.stringify({ message: 'Login successful' }),
        });
      } else {
        route.fulfill({
          status: 401,
          body: JSON.stringify({ error: 'Invalid credentials' }),
        });
      }
    });
    await page.goto('/login');
  });

  test('should allow user to log in with valid credentials', async ({
    page,
  }) => {
    await page.locator('[data-testid="username"]').fill('validUser');
    await page.locator('[data-testid="password"]').fill('validPass');
    await page.locator('[data-testid="submit"]').click();
    await expect(page.locator('[data-testid="welcome-message"]')).toBeVisible();
    await expect(page.locator('[data-testid="welcome-message"]')).toHaveText(
      /Welcome, validUser/
    );
  });

  test('should show an error message for invalid credentials', async ({
    page,
  }) => {
    await page.locator('[data-testid="username"]').fill('invalidUser');
    await page.locator('[data-testid="password"]').fill('wrongPass');
    await page.locator('[data-testid="submit"]').click();
    await expect(page.locator('[data-testid="error-message"]')).toBeVisible();
    await expect(page.locator('[data-testid="error-message"]')).toHaveText(
      'Invalid credentials'
    );
  });
});
```


# END FILE CONTENTS


# File: frontend/components/ui/dialog.tsx

"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}


# END FILE CONTENTS


# File: frontend/components/ui/context-menu.tsx

"use client"

import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}


# END FILE CONTENTS


# File: frontend/lib/config.ts

"use client"

/**
 * 前端配置管理
 * 集中管理所有可配置的設定項目
 */

/**
 * 音訊錄製配置
 */
export interface AudioConfig {
  chunkInterval: number // 音訊切片間隔（毫秒）
  mimeType: string // 音訊格式
  audioBitsPerSecond: number // 音訊位元率
}

/**
 * 應用程式配置
 */
export interface AppConfig {
  apiUrl: string
  wsUrl: string
  audio: AudioConfig
  isDevelopment: boolean
}

/**
 * 從環境變數獲取音訊切片間隔
 * 支援秒數和毫秒數兩種格式
 */
function getAudioChunkInterval(): number {
  // 優先使用毫秒格式的環境變數
  const intervalMs = process.env.NEXT_PUBLIC_AUDIO_CHUNK_INTERVAL_MS
  if (intervalMs) {
    const parsed = parseInt(intervalMs, 10)
    if (!isNaN(parsed) && parsed > 0) {
      return parsed
    }
  }

  // 其次使用秒數格式的環境變數
  const intervalSec = process.env.NEXT_PUBLIC_AUDIO_CHUNK_INTERVAL_SEC
  if (intervalSec) {
    const parsed = parseInt(intervalSec, 10)
    if (!isNaN(parsed) && parsed > 0) {
      return parsed * 1000 // 轉換為毫秒
    }
  }

  // 預設值：10秒
  return 10 * 1000
}

/**
 * 應用程式配置實例
 */
export const appConfig: AppConfig = {
  apiUrl: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000',
  wsUrl: process.env.NEXT_PUBLIC_WS_URL || 'ws://localhost:8000',
  isDevelopment: process.env.NODE_ENV === 'development',
  audio: {
    chunkInterval: getAudioChunkInterval(),
    mimeType: 'audio/webm;codecs=opus',
    audioBitsPerSecond: 64000  // 64 kbps for 10s chunks
  }
}

/**
 * 輔助函數：獲取音訊切片間隔（毫秒）
 */
export function getAudioChunkIntervalMs(): number {
  return appConfig.audio.chunkInterval
}

/**
 * 輔助函數：獲取音訊切片間隔（秒）
 */
export function getAudioChunkIntervalSec(): number {
  return Math.round(appConfig.audio.chunkInterval / 1000)
}

/**
 * 輔助函數：格式化音訊配置資訊
 */
export function getAudioConfigInfo(): string {
  const seconds = getAudioChunkIntervalSec()
  return `${seconds}秒切片 (${appConfig.audio.chunkInterval}ms)`
}

/**
 * 獲取應用程式配置
 */
export function getAppConfig(): AppConfig {
  return appConfig
}

/**
 * 開發模式診斷資訊
 */
export function getConfigInfo(): string {
  const config = getAppConfig()
  return `Config: API=${config.apiUrl}, WS=${config.wsUrl}, Dev=${config.isDevelopment}`
}

/**
 * 開發模式診斷：顯示當前配置
 */
if (appConfig.isDevelopment && typeof window !== 'undefined') {
  console.log('🔧 [Config] 音訊配置:', {
    chunkInterval: appConfig.audio.chunkInterval,
    chunkIntervalSec: getAudioChunkIntervalSec(),
    mimeType: appConfig.audio.mimeType,
    source: process.env.NEXT_PUBLIC_AUDIO_CHUNK_INTERVAL_MS ? 'MS' :
      process.env.NEXT_PUBLIC_AUDIO_CHUNK_INTERVAL_SEC ? 'SEC' : 'DEFAULT'
  })
}


# END FILE CONTENTS


# File: frontend/components/ui/menubar.tsx

"use client"

import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}


# END FILE CONTENTS


# File: frontend/lib/app-store-zustand.ts

"use client"

import { create } from 'zustand'
import { serviceContainer, SERVICE_KEYS } from './services'
import type { ISessionService } from './services/interfaces'
import { AppState, SessionStatus, SessionType, TranscriptEntry } from '../types/app-state'
import { TranscriptManager } from './transcript-manager'

/**
 * App 狀態介面
 */
import { STTProvider } from './api'

interface AppStoreState {
  // 應用狀態
  appState: AppState
  isLoading: boolean
  error: string | null

  // 會話狀態
  session: {
    id: string
    status: SessionStatus
    type: SessionType
  } | null

  // 錄音狀態
  isRecording: boolean
  recordingTime: number
  recordingStartTime: number | null

  // 內部計時器
  timerId: NodeJS.Timeout | null

  // 逐字稿狀態
  transcriptEntries: TranscriptEntry[]

  // 編輯器狀態
  editorContent: string

  // STT Provider 狀態
  sttProvider: STTProvider
}

/**
 * App 操作介面
 */
interface AppStoreActions {
  // 核心業務操作
  startRecording: (title?: string) => Promise<void>
  stopRecording: () => Promise<void>

  // 狀態管理
  setState: (appState: AppState) => void
  setSession: (session: AppStoreState['session']) => void
  setRecording: (isRecording: boolean) => void
  setError: (error: string | null) => void
  clearError: () => void

  // 編輯器操作
  updateEditorContent: (content: string) => void
  addTranscriptEntry: (entry: TranscriptEntry) => void

  // 計時器操作
  startTimer: () => void
  stopTimer: () => void
  cleanup: () => void

  // 錄音時間操作
  setRecordingStart: (timestamp: number) => void

  // 狀態重置
  resetState: () => void

  // STT Provider 操作
  setSttProvider: (provider: STTProvider) => void
}

/**
 * 完整的 Store 類型
 */
type AppStore = AppStoreState & AppStoreActions

/**
 * 基於 Zustand 的 App Store
 *
 * 實現用戶要求的會話衝突處理策略：
 * 1. startRecording 時優先調用 ensureRecordingSession
 * 2. 優雅處理 409 衝突，自動載入現有會話
 * 3. 提供清晰的狀態管理和錯誤處理
 */
export const useAppStore = create<AppStore>((set, get) => ({
  // === 初始狀態 ===
  appState: 'default' as AppState,
  isLoading: false,
  error: null,
  session: null,
  isRecording: false,
  recordingTime: 0,
  recordingStartTime: null,
  timerId: null,
  transcriptEntries: [],
  editorContent: '',
  sttProvider: 'gpt4o' as STTProvider,

  // === 核心業務操作 ===

  /**
   * 開始錄音 - 使用雙 WebSocket 完整錄音流程
   */
  startRecording: async (title?: string) => {
    console.log('🎤 [AppStore] 開始雙 WebSocket 錄音流程')

    // 1. 設置等待狀態
    set({
      appState: 'recording_waiting',
      isLoading: true,
      error: null
    })

    try {
      // 2. 獲取當前的錄音開始時間（由 onstart 事件設置）
      const currentState = get()
      const startTs = currentState.recordingStartTime

      const startTsDate = typeof startTs === 'number' ? new Date(startTs as number).toISOString() : 'N/A'
      const hasStartTime = typeof startTs === 'number'

      console.log('🕐 [AppStore] 錄音開始時間:', {
        startTs,
        startTsDate,
        hasStartTime
      })

      // 3. 獲取 RecordingFlowService
      const { RecordingFlowService } = await import('./services/recording-flow-service')
      const recordingFlowService = new RecordingFlowService()
      await recordingFlowService.initialize()

      // 4. 啟動完整錄音流程（包含雙 WebSocket），傳遞開始時間戳和 STT Provider
      console.log('🔍 [AppStore] 啟動完整錄音流程...')
      const sessionResponse = await recordingFlowService.startRecordingFlow(
        title || `錄音筆記 ${new Date().toLocaleString()}`,
        undefined, // content
        startTs,   // 傳遞錄音開始時間戳
        currentState.sttProvider // 傳遞 STT Provider
      )

      console.log('✅ [AppStore] 雙 WebSocket 錄音流程啟動成功:', {
        sessionId: sessionResponse.id,
        withStartTs: !!startTs
      })

      // 5. 更新狀態，保持等待逐字稿
      set({
        appState: 'recording_waiting',
        session: {
          id: sessionResponse.id,
          status: sessionResponse.status as SessionStatus,
          type: sessionResponse.type as SessionType
        },
        isRecording: true,
        isLoading: false
      })

      // 6. 不需要再次啟動計時器，因為已經在 setRecordingStart 中啟動了
      console.log('🕐 [AppStore] 計時器已在 onstart 事件中啟動，錄音時間:', currentState.recordingTime)

        // 7. 儲存服務實例供停止時使用
        ; (globalThis as any).currentRecordingFlowService = recordingFlowService

      console.log('🎯 [AppStore] 雙 WebSocket 錄音模式啟動成功')

    } catch (error) {
      // 8. 錯誤處理
      const errorMessage = error instanceof Error ? error.message : '開始錄音失敗'
      console.error('❌ [AppStore] 無法開始錄音:', error)

      // 清理計時器（如果已啟動）
      get().stopTimer()

      set({
        appState: 'default',
        error: errorMessage,
        isLoading: false,
        session: null,
        isRecording: false
      })

      console.error('🚨 [AppStore] 雙 WebSocket 錄音啟動失敗，請重試')
    }
  },

  /**
   * 停止錄音 - 停止雙 WebSocket 錄音流程
   */
  stopRecording: async () => {
    console.log('🛑 [AppStore] 停止雙 WebSocket 錄音流程')

    // 停止計時器
    get().stopTimer()

    set({
      appState: 'processing',
      isLoading: true
    })

    try {
      // 獲取並調用 RecordingFlowService
      const recordingFlowService = (globalThis as any).currentRecordingFlowService

      if (recordingFlowService) {
        await recordingFlowService.stopRecordingFlow()
        await recordingFlowService.cleanup()

          // 清理全局引用
          ; (globalThis as any).currentRecordingFlowService = null

        console.log('✅ [AppStore] RecordingFlowService 停止成功')
      } else {
        console.warn('⚠️ [AppStore] 沒有找到活躍的 RecordingFlowService')
      }

      set({
        appState: 'finished',
        isRecording: false,
        isLoading: false
      })

      console.log('✅ [AppStore] 雙 WebSocket 錄音停止成功')

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : '停止錄音失敗'
      console.error('❌ [AppStore] 停止錄音失敗:', error)

      set({
        error: errorMessage,
        isLoading: false
      })
    }
  },

  // === 狀態管理操作 ===

  setState: (appState: AppState) => {
    set({ appState })
  },

  setSession: (session: AppStoreState['session']) => {
    set({ session })
  },

  setRecording: (isRecording: boolean) => {
    set({ isRecording })
  },

  setError: (error: string | null) => {
    set({ error })
  },

  clearError: () => {
    set({ error: null })
  },

  // === STT Provider 操作 ===

  setSttProvider: (provider: STTProvider) => {
    set({ sttProvider: provider })
    console.log('🔧 [AppStore] STT Provider 已更新:', provider)
  },

  // === 編輯器操作 ===

  updateEditorContent: (content: string) => {
    set({ editorContent: content })
  },

  addTranscriptEntry: (entry: TranscriptEntry) => {
    console.log('[S] add entry', entry.text.slice(0, 20))

    set((state) => {
      // 將新條目加入並按數值時間排序
      const timeToSeconds = (t: string): number => {
        const parts = t.split(':').map(Number)
        if (parts.length === 3) {
          const [hh, mm, ss] = parts
          return hh * 3600 + mm * 60 + ss
        } else if (parts.length === 2) {
          const [mm, ss] = parts
          return mm * 60 + ss
        }
        return 0
      }

      const getStart = (e: TranscriptEntry): number => e.startTime ?? timeToSeconds(e.time)

      const newEntries = [...state.transcriptEntries, entry].sort(
        (a, b) => getStart(a) - getStart(b)
      )
      return {
        transcriptEntries: newEntries,
        // 🎯 收到第一個逐字稿時，從 recording_waiting → recording_active
        appState: state.appState === 'recording_waiting' ? 'recording_active' : state.appState
      }
    })
  },

  setRecordingTime: (time: number) => {
    set({ recordingTime: time })
  },

  // 設置錄音開始時間並啟動基於實際時間的計時器
  setRecordingStart: (timestamp: number) => {
    console.log('🚀 [AppStore] 設置錄音開始時間:', new Date(timestamp).toISOString())
    set({ recordingStartTime: timestamp, recordingTime: 0 })

    // 啟動基於實際時間的計時器
    get().startTimer()
  },

  // 計時邏輯 - 修改為基於實際時間戳的計算
  startTimer: () => {
    const currentState = get()
    if (currentState.timerId) return // 防止重複啟動

    const timerId = setInterval(() => {
      const state = get()
      if (state.recordingStartTime) {
        const elapsed = Math.floor((Date.now() - state.recordingStartTime) / 1000)
        set({ recordingTime: elapsed })
      } else {
        // Fallback 到舊邏輯
        set(prevState => ({ recordingTime: prevState.recordingTime + 1 }))
      }
    }, 1000)

    set({ timerId })
    console.log('🕐 [AppStore] 錄音計時器已啟動')
  },

  stopTimer: () => {
    const currentState = get()
    if (currentState.timerId) {
      clearInterval(currentState.timerId)
      set({ timerId: null, recordingTime: 0, recordingStartTime: null })
      console.log('⏹️ [AppStore] 錄音計時器已停止並重置')
    }
  },

  cleanup: () => {
    const currentState = get()
    if (currentState.timerId) {
      clearInterval(currentState.timerId)
      set({ timerId: null })
      console.log('🧹 [AppStore] 計時器已清理')
    }
  },

  // === 狀態重置 ===

  resetState: () => {
    console.log('🔄 [AppStore] 重置狀態')

    // 清理計時器
    const currentState = get()
    if (currentState.timerId) {
      clearInterval(currentState.timerId)
    }

    set({
      appState: 'default',
      isLoading: false,
      error: null,
      session: null,
      isRecording: false,
      recordingTime: 0,
      recordingStartTime: null,
      timerId: null,
      transcriptEntries: [],
      editorContent: '',
      sttProvider: 'gpt4o' as STTProvider,
    })
  }
}))

/**
 * 便利的 Hook：只獲取狀態
 */
export const useAppState = () => useAppStore((state: AppStore) => ({
  appState: state.appState,
  isLoading: state.isLoading,
  error: state.error,
  session: state.session,
  isRecording: state.isRecording,
  recordingTime: state.recordingTime,
  transcriptEntries: state.transcriptEntries,
  editorContent: state.editorContent
}))

/**
 * 便利的 Hook：只獲取操作
 */
export const useAppActions = () => useAppStore((state: AppStore) => ({
  startRecording: state.startRecording,
  stopRecording: state.stopRecording,
  setState: state.setState,
  setSession: state.setSession,
  setRecording: state.setRecording,
  setError: state.setError,
  clearError: state.clearError,
  updateEditorContent: state.updateEditorContent,
  addTranscriptEntry: state.addTranscriptEntry,
  setRecordingStart: state.setRecordingStart,
  resetState: state.resetState
}))

export default useAppStore


# END FILE CONTENTS


# File: app/lib/rate_limit.py

# app/lib/rate_limit.py
import asyncio
import logging
from app.core.config import get_settings

logger = logging.getLogger(__name__)

class RateLimitHandler:
    def __init__(self):
        self._delay = 0
        logger.info("🚦 [RateLimitHandler] 頻率限制處理器已初始化")

    async def wait(self):
        if self._delay:
            logger.info(f"⏳ [RateLimitHandler] 等待 {self._delay}s 避免頻率限制")
            await asyncio.sleep(self._delay)

    def backoff(self):
        previous_delay = self._delay
        self._delay = min((self._delay or 5) * 2, 60)
        logger.warning(f"📈 [RateLimitHandler] 退避延遲：{previous_delay}s → {self._delay}s")

    def reset(self):
        if self._delay > 0:
            logger.info(f"✅ [RateLimitHandler] 重置延遲：{self._delay}s → 0s")
            self._delay = 0

class SlidingWindowRateLimiter:
    def __init__(self, max_requests: int = 3, window_seconds: int = 60):
        self.max_requests = max_requests
        self.window_seconds = window_seconds
        self.semaphore = asyncio.Semaphore(max_requests)
        self.active_requests = 0
        self.total_acquired = 0
        self.total_released = 0
        self._lock = asyncio.Lock()
        logger.info(f"🪟 [SlidingWindow] 初始化完成：{max_requests} requests/{window_seconds}s")

    async def acquire(self):
        await self.semaphore.acquire()
        async with self._lock:
            self.active_requests += 1
            self.total_acquired += 1
        loop = asyncio.get_event_loop()
        loop.call_later(self.window_seconds, self._release_permit)

    def _release_permit(self):
        self.semaphore.release()
        self.active_requests = max(0, self.active_requests - 1)
        self.total_released += 1

    async def wait(self):
        await self.acquire()

    def get_stats(self):
        return {
            'type': 'sliding_window',
            'max_requests': self.max_requests,
            'window_seconds': self.window_seconds,
            'active_requests': self.active_requests,
            'available_permits': self.max_requests - self.active_requests,
            'total_acquired': self.total_acquired,
            'total_released': self.total_released,
            'utilization_percent': (self.active_requests / self.max_requests) * 100 if self.max_requests > 0 else 0,
            'is_at_capacity': self.active_requests >= self.max_requests
        }

    def reset(self):
        self.total_acquired = 0
        self.total_released = 0

    def backoff(self):
        logger.warning(f"🚦 [SlidingWindow] 遇到 429 錯誤，滑動視窗將自動處理退避")

    @property
    def _delay(self):
        if self.active_requests >= self.max_requests:
            return max(1, self.window_seconds // 4)
        return 0


def get_rate_limit():
    s = get_settings()
    if getattr(s, "USE_SLIDING_WINDOW_RATE_LIMIT", False):
        if not hasattr(get_rate_limit, "_sliding_window"):
            get_rate_limit._sliding_window = SlidingWindowRateLimiter(
                max_requests=getattr(s, "SLIDING_WINDOW_MAX_REQUESTS", 3),
                window_seconds=getattr(s, "SLIDING_WINDOW_SECONDS", 60)
            )
        return get_rate_limit._sliding_window
    else:
        if not hasattr(get_rate_limit, "_handler"):
            get_rate_limit._handler = RateLimitHandler()
        return get_rate_limit._handler


# END FILE CONTENTS


# File: frontend/lib/services/__tests__/recording-flow-service.test.ts

/**
 * RecordingFlowService 核心功能測試
 *
 * 測試 RecordingFlowService 的核心功能，確保：
 * 1. startRecordingFlow 成功時返回 SessionResponse
 * 2. startRecordingFlow 失敗時拋出錯誤
 * 3. 狀態管理正確
 */

import { describe, test, expect, vi, beforeEach, afterEach } from 'vitest'
import { RecordingFlowService } from '../recording-flow-service'
import { serviceContainer } from '../service-container'
import { SERVICE_KEYS } from '../interfaces'
import type { ISessionService, IRecordingService, ITranscriptService } from '../interfaces'
import type { SessionResponse } from '../../api'

// Mock 服務容器
vi.mock('../service-container', () => ({
    serviceContainer: {
        resolve: vi.fn()
    }
}))

// 1. 修改 RecordingFlowService 讓 setAppState 可注入
class TestableRecordingFlowService extends RecordingFlowService {
    constructor(setAppState: (state: string) => void) {
        super()
        // @ts-ignore
        this.setAppState = setAppState
    }
}

describe('RecordingFlowService - 核心功能', () => {
    let recordingFlowService: RecordingFlowService
    let mockSessionService: any
    let mockRecordingService: any
    let mockTranscriptService: any
    let mockServiceContainer: any
    let setAppStateMock: any

    // 測試用的會話數據
    const mockSessionResponse: SessionResponse = {
        id: 'test-session-123',
        title: '測試錄音會話',
        type: 'recording',
        status: 'active',
        language: 'zh-TW',
        created_at: '2024-01-01T00:00:00Z',
        updated_at: '2024-01-01T00:00:00Z'
    }

    beforeEach(async () => {
        // 創建 mock 服務
        mockSessionService = {
            ensureRecordingSession: vi.fn().mockResolvedValue(mockSessionResponse),
            createRecordingSession: vi.fn().mockResolvedValue(mockSessionResponse),
            waitForSessionReady: vi.fn().mockResolvedValue(true),
            finishSession: vi.fn(),
            checkActiveSession: vi.fn(),
        } as Partial<ISessionService>

        mockRecordingService = {
            requestPermission: vi.fn().mockResolvedValue(true),
            startRecording: vi.fn(),
            stopRecording: vi.fn(),
            isRecording: vi.fn(),
            getRecordingTime: vi.fn(),
            getRecordingState: vi.fn(),
        } as Partial<IRecordingService>

        mockTranscriptService = {
            connect: vi.fn(),
            disconnect: vi.fn(),
            addTranscriptListener: vi.fn(),
            removeTranscriptListener: vi.fn(),
            isConnected: vi.fn(),
            start: vi.fn(),
        } as Partial<ITranscriptService>

        // 設置服務容器 mock
        mockServiceContainer = serviceContainer as any
        mockServiceContainer.resolve.mockImplementation((key: string) => {
            switch (key) {
                case SERVICE_KEYS.SESSION_SERVICE:
                    return mockSessionService
                case SERVICE_KEYS.RECORDING_SERVICE:
                    return mockRecordingService
                case SERVICE_KEYS.TRANSCRIPT_SERVICE:
                    return mockTranscriptService
                default:
                    throw new Error(`Unknown service key: ${key}`)
            }
        })

        // mock setAppState
        setAppStateMock = vi.fn()
        // 這裡用 spyOn 取代 setAppState
        const zustand = await import('../../app-store-zustand')
        vi.spyOn(zustand.useAppStore.getState(), 'setState').mockImplementation(setAppStateMock)

        recordingFlowService = new TestableRecordingFlowService(setAppStateMock)
        await recordingFlowService.initialize()
        vi.clearAllMocks()
    })

    afterEach(() => {
        vi.restoreAllMocks()
    })

    describe('startRecordingFlow - 成功情境', () => {
        test('成功啟動錄音流程應該返回 SessionResponse', async () => {
            // Arrange
            mockSessionService.createRecordingSession.mockResolvedValueOnce(mockSessionResponse)
            mockSessionService.waitForSessionReady.mockResolvedValueOnce(true)
            mockTranscriptService.connect.mockResolvedValueOnce(undefined)
            mockRecordingService.startRecording.mockResolvedValueOnce(undefined)

            // Act
            const result = await recordingFlowService.startRecordingFlow('測試標題')

            // Assert
            expect(result).toEqual(mockSessionResponse)
            expect(result.id).toBe(mockSessionResponse.id)
            expect(result.status).toBe('active')
            expect(result.type).toBe('recording')

            // 驗證服務調用
            expect(mockSessionService.createRecordingSession).toHaveBeenCalledWith('測試標題', undefined, undefined, undefined)
            expect(mockSessionService.waitForSessionReady).toHaveBeenCalledWith(mockSessionResponse.id, 5000)
            expect(mockTranscriptService.connect).toHaveBeenCalledWith(mockSessionResponse.id)
            expect(mockRecordingService.startRecording).toHaveBeenCalledWith(mockSessionResponse.id)

            // 驗證狀態
            expect(recordingFlowService.isFlowRunning()).toBe(true)
            expect(recordingFlowService.getCurrentSession()).toEqual(mockSessionResponse)
        })

        test('當標題為空時，應該使用預設標題', async () => {
            // Arrange
            mockSessionService.createRecordingSession.mockResolvedValueOnce(mockSessionResponse)
            mockSessionService.waitForSessionReady.mockResolvedValueOnce(true)
            mockTranscriptService.connect.mockResolvedValueOnce(undefined)
            mockRecordingService.startRecording.mockResolvedValueOnce(undefined)

            // Act
            await recordingFlowService.startRecordingFlow()

            // Assert
            expect(mockSessionService.createRecordingSession).toHaveBeenCalledWith(
                expect.stringMatching(/錄音筆記 \d{1,2}\/\d{1,2}\/\d{4}/),
                undefined, undefined, undefined
            )
        })
    })

    describe('startRecordingFlow - 錯誤情境', () => {
        test('當會話創建失敗時，應該拋出錯誤', async () => {
            // Arrange
            const sessionError = new Error('會話創建失敗')
            mockSessionService.createRecordingSession.mockRejectedValueOnce(sessionError)

            // Act & Assert
            await expect(recordingFlowService.startRecordingFlow('測試標題'))
                .rejects.toThrow('會話創建失敗')

            // 驗證其他服務沒有被調用
            expect(mockTranscriptService.connect).not.toHaveBeenCalled()
            expect(mockRecordingService.startRecording).not.toHaveBeenCalled()

            // 驗證狀態重置
            expect(recordingFlowService.isFlowRunning()).toBe(false)
            expect(recordingFlowService.getCurrentSession()).toBeNull()
        })

        test('當會話準備失敗時，應該拋出錯誤', async () => {
            // Arrange
            mockSessionService.createRecordingSession.mockResolvedValueOnce(mockSessionResponse)
            mockSessionService.waitForSessionReady.mockResolvedValueOnce(false)

            // Act & Assert
            await expect(recordingFlowService.startRecordingFlow('測試標題'))
                .rejects.toThrow('會話準備超時')

            // 驗證其他服務沒有被調用
            expect(mockTranscriptService.connect).not.toHaveBeenCalled()
            expect(mockRecordingService.startRecording).not.toHaveBeenCalled()
        })

        test('當逐字稿服務連接失敗時，應該拋出錯誤', async () => {
            // Arrange
            mockSessionService.createRecordingSession.mockResolvedValueOnce(mockSessionResponse)
            mockSessionService.waitForSessionReady.mockResolvedValueOnce(true)
            const transcriptError = new Error('逐字稿服務連接失敗')
            mockTranscriptService.connect.mockRejectedValueOnce(transcriptError)

            // Act & Assert
            await expect(recordingFlowService.startRecordingFlow('測試標題'))
                .rejects.toThrow('逐字稿服務連接失敗')

            // 驗證錄音沒有啟動
            expect(mockRecordingService.startRecording).not.toHaveBeenCalled()
        })

        test('當錄音服務啟動失敗時，應該拋出錯誤', async () => {
            // Arrange
            mockSessionService.createRecordingSession.mockResolvedValueOnce(mockSessionResponse)
            mockSessionService.waitForSessionReady.mockResolvedValueOnce(true)
            mockTranscriptService.connect.mockResolvedValueOnce(undefined)
            const recordingError = new Error('錄音啟動失敗')
            mockRecordingService.startRecording.mockRejectedValueOnce(recordingError)

            // Act & Assert
            await expect(recordingFlowService.startRecordingFlow('測試標題'))
                .rejects.toThrow('錄音啟動失敗')
        })

        test('當流程已在運行時，應該先停止現有流程', async () => {
            // Arrange - 先啟動一個流程
            mockSessionService.createRecordingSession.mockResolvedValue(mockSessionResponse)
            mockSessionService.waitForSessionReady.mockResolvedValue(true)
            mockTranscriptService.connect.mockResolvedValue(undefined)
            mockRecordingService.startRecording.mockResolvedValue(undefined)
            mockRecordingService.stopRecording.mockResolvedValue(undefined)
            mockTranscriptService.disconnect.mockResolvedValue(undefined)
            mockSessionService.finishSession.mockResolvedValue(undefined)

            await recordingFlowService.startRecordingFlow('第一個會話')

            // Act - 啟動第二個流程
            const result = await recordingFlowService.startRecordingFlow('第二個會話')

            // Assert - 驗證第二次啟動成功
            expect(result).toEqual(mockSessionResponse)
            expect(recordingFlowService.isFlowRunning()).toBe(true)
        })
    })

    describe('stopRecordingFlow', () => {
        beforeEach(async () => {
            // 先啟動錄音流程
            mockSessionService.createRecordingSession.mockResolvedValueOnce(mockSessionResponse)
            mockSessionService.waitForSessionReady.mockResolvedValueOnce(true)
            mockTranscriptService.connect.mockResolvedValueOnce(undefined)
            mockRecordingService.startRecording.mockResolvedValueOnce(undefined)
            mockRecordingService.isRecording.mockReturnValue(true)

            await recordingFlowService.startRecordingFlow('測試標題')
        })

        test('應該正確停止錄音流程', async () => {
            // Arrange
            mockRecordingService.stopRecording.mockResolvedValueOnce(undefined)
            mockTranscriptService.disconnect.mockResolvedValueOnce(undefined)
            mockSessionService.finishSession.mockResolvedValueOnce(undefined)

            // Act
            await recordingFlowService.stopRecordingFlow()

            // Assert - 驗證停止順序
            expect(mockRecordingService.stopRecording).toHaveBeenCalled()
            expect(mockTranscriptService.disconnect).toHaveBeenCalledWith(mockSessionResponse.id)
            expect(mockSessionService.finishSession).toHaveBeenCalledWith(mockSessionResponse.id)

            // 驗證狀態清理
            expect(recordingFlowService.isFlowRunning()).toBe(false)
            expect(recordingFlowService.getCurrentSession()).toBeNull()
        })
    })

    describe('Stop → processing → finished 狀態流', () => {
        beforeEach(async () => {
            // 先啟動錄音流程
            mockSessionService.createRecordingSession.mockResolvedValueOnce(mockSessionResponse)
            mockSessionService.waitForSessionReady.mockResolvedValueOnce(true)
            mockTranscriptService.connect.mockResolvedValueOnce(undefined)
            mockTranscriptService.start.mockResolvedValueOnce(undefined)
            mockRecordingService.startRecording.mockResolvedValueOnce(undefined)
            mockRecordingService.isRecording.mockReturnValue(true)

            await recordingFlowService.startRecordingFlow('測試標題')
        })

        test('停止錄音後應進入 processing，收到 transcript_complete 進入 finished 並斷線', async () => {
            // Arrange
            mockRecordingService.stopRecording.mockResolvedValueOnce(undefined)
            // 不要立即斷線
            mockTranscriptService.disconnect.mockResolvedValueOnce(undefined)
            mockSessionService.finishSession.mockResolvedValueOnce(undefined)

            // Act: 停止錄音
            await recordingFlowService.stopRecordingFlow()

            // Assert: 應該進入 processing 狀態
            expect(setAppStateMock).toHaveBeenCalledWith('processing')
            // 模擬收到 transcript_complete 訊息
            const msg = { type: 'transcript_complete', session_id: mockSessionResponse.id }
            // 需將 handleTranscriptMessage 設為 public 或用 (as any)
            await (recordingFlowService as any).handleTranscriptMessage(msg)

            // 應該進入 finished 狀態並斷線
            expect(setAppStateMock).toHaveBeenCalledWith('finished')
            expect(mockTranscriptService.disconnect).toHaveBeenCalledWith(mockSessionResponse.id)
            expect((recordingFlowService as any).isFlowActive).toBe(false)
        })
    })

    describe('狀態管理', () => {
        test('初始狀態應該正確', () => {
            expect(recordingFlowService.isFlowRunning()).toBe(false)
            expect(recordingFlowService.getCurrentSession()).toBeNull()
            expect(recordingFlowService.getTranscriptEntries()).toEqual([])
        })

        test('啟動後狀態應該正確', async () => {
            // Arrange
            mockSessionService.createRecordingSession.mockResolvedValueOnce(mockSessionResponse)
            mockSessionService.waitForSessionReady.mockResolvedValueOnce(true)
            mockTranscriptService.connect.mockResolvedValueOnce(undefined)
            mockRecordingService.startRecording.mockResolvedValueOnce(undefined)

            // Act
            await recordingFlowService.startRecordingFlow('測試標題')

            // Assert
            expect(recordingFlowService.isFlowRunning()).toBe(true)
            expect(recordingFlowService.getCurrentSession()).toEqual(mockSessionResponse)
        })
    })
})




# END FILE CONTENTS


# File: docs/ADD_GEMINI.md

## ✨ Feature Spec：可切換 Whisper ⇆ Gemini (2.5 Pro) 語音轉文字

### 0. 目標
1. 使用者可在 UI 選擇 **Whisper** 或 **Gemini 2.5 Pro** 作為轉錄引擎  
2. 選定後建立之 session 及其所有切片都走對應 Provider  
3. 無論 Provider，前端得到 *一致* 的 `transcript_segment` Payload

---

### 1. 新增環境變數

| 變數                 | 範例值                                  | 說明                                 |
| -------------------- | --------------------------------------- | ------------------------------------ |
| STT_PROVIDER_DEFAULT | whisper                                 | 預設 Provider (`whisper` / `gemini`) |
| GEMINI_ENDPOINT      | `us-central1-aiplatform.googleapis.com` | Vertex AI 端點                       |
| GEMINI_API_KEY       | `ya29.~…`                               | GCP 服務帳戶 *API Key*               |
| GEMINI_PROMPT        | `請輸出逐字稿…`                         | 預設 system prompt                   |
| GEMINI_MAX_REQUESTS  | 90                                      | 1 min 內可呼叫次數 (RateLimiter 用)  |

---

### 2. DB 變更

```sql
ALTER TABLE sessions
ADD COLUMN stt_provider VARCHAR(20) NOT NULL DEFAULT 'whisper';
```

---

### 3. 後端

#### 3-1 目錄結構

```
app/services/stt/
 ├─ base.py             # ISTTProvider 介面
 ├─ whisper_provider.py # 舊 SimpleAudioTranscriptionService 移入
 ├─ gemini_provider.py  # 全新實作
 └─ factory.py          # get_provider(session_id)
```

#### 3-2 介面 `base.py`

```python
class ISTTProvider(ABC):
    @abstractmethod
    async def transcribe(self, webm: bytes, session_id: UUID, chunk_seq: int) -> dict: ...
    @abstractmethod
    def name(self) -> str: ...
    @abstractmethod
    def max_rpm(self) -> int: ...
```

#### 3-3 Gemini 實作（核心片段）

```python
class GeminiProvider(ISTTProvider):
    def __init__(self):
        self.model = GenerativeModel("gemini-2.5-pro-preview",
                                     api_key=settings.GEMINI_API_KEY)

    async def transcribe(self, webm: bytes, session_id: UUID, chunk_seq: int):
        pcm = await ffmpeg_webm_to_pcm(webm)          # 共用轉檔工具
        b64 = base64.b64encode(pcm).decode()
        prompt = settings.GEMINI_PROMPT
        res = await self.model.generate_content_async(
            contents=[{"role":"user","parts":[
              {"text": prompt},
              {"audio":{"mime_type":"audio/wav","data":b64}}
            ]}]
        )
        text = res.text.strip()
        return {"text": text,
                "start_offset": 0,
                "end_offset": 0}      # Gemini 無段落 → 0~D

    def name(self):     return "gemini"
    def max_rpm(self):  return settings.GEMINI_MAX_REQUESTS
```

#### 3-4 Factory

```python
def get_provider(session_id: UUID) -> ISTTProvider:
    provider = cache.get(session_id)    # 簡易 LRU
    if provider: return provider

    record = supabase.table("sessions")\
        .select("stt_provider").eq("id", str(session_id)).single().execute()
    name = record.data["stt_provider"]
    if name == "gemini":
        provider = GeminiProvider()
    else:
        provider = WhisperProvider()
    cache[session_id] = provider
    return provider
```

#### 3-5 QueueManager 整合

```python
provider = get_provider(session_id)
rate_limiter = SlidingWindowRateLimiter(max_requests=provider.max_rpm())
result = await provider.transcribe(webm, session_id, chunk_seq)
```

> 🎯 `transcript_segment` JSON 增加 `"provider": "gemini" | "whisper"` （供前端顯示小徽章）。

---

### 4. API

| Method | Path                          | Body/Query                                                       | 說明                                                             |
| ------ | ----------------------------- | ---------------------------------------------------------------- | ---------------------------------------------------------------- |
| POST   | `/api/session`                | `{ "type":"recording", "title":"...", "stt_provider":"gemini" }` | 多一個 `stt_provider` 欄位，預設 `settings.STT_PROVIDER_DEFAULT` |
| PATCH  | `/api/session/{sid}/provider` | `{ "stt_provider":"whisper" }`                                   | (可選) 會話中途切換，僅在 *尚未上傳音檔* 時允許                  |

---

### 5. 前端

#### 5-1 UI

1. `SettingsDrawer` → 新增「語音轉文字引擎」選項  
   - `Whisper (Azure) / Gemini 2.5 Pro (Vertex AI)`
2. 點擊「更換」開 `ProviderSelectModal`  
   - radio + Save  
3. 選定後：
   - 若尚未有 session → 存 localStorage, `useAppStore.setProvider`
   - 若已有 active session → 呼叫 `PATCH /provider`

#### 5-2 Zustand Store

```ts
type STTProvider = 'whisper' | 'gemini'

provider: STTProvider
setProvider: (p: STTProvider)=> set({ provider:p })
```

#### 5-3 開始錄音流程

```ts
await ensureFreshRecordingSession(
  { title, stt_provider: get().provider }   // 傳到後端
)
```

#### 5-4 Transcript UI

在字幕列加一個小 tag：

```jsx
{entry.provider === 'gemini' && <Badge>G</Badge>}
```

---

### 6. 測試

| 類型             | Case                                        | 斷言                                 |
| ---------------- | ------------------------------------------- | ------------------------------------ |
| unit (MSW)       | POST `/session` with `stt_provider=gemini`  | 回 201, body.stt_provider = gemini   |
| e2e (Playwright) | 切到 Gemini 錄 30 s                         | UI 出現 provider 標籤 & 字幕順序正確 |
| backend          | GeminiProvider.transcribe() mock Base64 Wav | 回傳 dict.text ≠ ''                  |

---

### 7. 文件（README 範片段）

```md
### ⚙️ 切換 STT Provider

.env
```
| key                  | whisper | gemini                                |
| -------------------- | ------- | ------------------------------------- |
| STT_PROVIDER_DEFAULT | whisper | gemini                                |
| GEMINI_ENDPOINT      | –       | us-central1-aiplatform.googleapis.com |
| GEMINI_API_KEY       | –       | <your-gcp-key>                        |

在 UI → Settings → STT Provider 可 Runtime 切換。
```

---

完成以上 Checklist（#0 – #10 為 **必需**），即可在同一支 App 內自由切換 Whisper 與 Gemini 2.5 Pro 作為轉錄引擎。



# END FILE CONTENTS


# File: frontend/components/ui/alert-dialog.tsx

"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}


# END FILE CONTENTS


# File: frontend/components/ui/card.tsx

import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }


# END FILE CONTENTS


# File: frontend/components/ui/tooltip.tsx

"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }


# END FILE CONTENTS


# File: app/schemas/__init__.py



# END FILE CONTENTS


# File: app/lib/settings_utils.py

"""
settings_utils.py
集中放一些會在多個模組用到、但必須動態讀取
get_settings() 的小函式，避免 module import 時
把 settings 綁死。
"""

from app.core.config import get_settings


def get_chunk_duration() -> int:
    """
    回傳目前 .env 中指定的切片長度 (秒)。
    每次呼叫都重新走 get_settings()，確保與
    .env → Settings 一致。
    """
    return get_settings().AUDIO_CHUNK_DURATION_SEC


def get_filter_thresholds():
    """
    回傳 (no_speech_thresh, logprob_thresh, compression_thresh)。
    同樣每次重新讀取設定。
    """
    s = get_settings()
    return s.FILTER_NO_SPEECH, s.FILTER_LOGPROB, s.FILTER_COMPRESSION


# END FILE CONTENTS


# File: frontend/lib/services/__tests__/transcript-service.test.ts

"use client"

import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest'
import { TranscriptService } from '../transcript-service'
import { transcriptManager } from '../../transcript-manager'
import type { TranscriptMessage } from '../interfaces'

// Mock transcriptManager
const mockTranscriptManager = {
    connect: vi.fn(),
    disconnect: vi.fn(),
    addListener: vi.fn(),
    removeListener: vi.fn(),
    isConnected: vi.fn(),
    getCurrentTranscripts: vi.fn(),
    clearTranscripts: vi.fn(),
    getConnectionCount: vi.fn(),
}

vi.mock('../../transcript-manager', () => ({
    transcriptManager: mockTranscriptManager
}))

describe('TranscriptService', () => {
    let transcriptService: TranscriptService

    beforeEach(() => {
        transcriptService = new TranscriptService()
        vi.clearAllMocks()
    })

    afterEach(() => {
        vi.restoreAllMocks()
    })

    describe('服務初始化', () => {
        it('應該正確初始化 TranscriptService', () => {
            expect(transcriptService).toBeDefined()
            expect(transcriptService['serviceName']).toBe('TranscriptService')
        })

        it('應該正確啟動和停止服務', async () => {
            await transcriptService.start()
            expect(transcriptService['isRunning']).toBe(true)

            await transcriptService.stop()
            expect(transcriptService['isRunning']).toBe(false)
        })
    })

    describe('connect', () => {
        const sessionId = 'test-session-id'

        it('應該成功連接逐字稿服務', async () => {
            mockTranscriptManager.connect.mockResolvedValue(undefined)

            await transcriptService.connect(sessionId)

            expect(mockTranscriptManager.connect).toHaveBeenCalledWith(sessionId)
            expect(transcriptService['connectedSessions'].has(sessionId)).toBe(true)
        })

        it('應該處理連接失敗', async () => {
            const connectError = new Error('Connection failed')
            mockTranscriptManager.connect.mockRejectedValue(connectError)

            await expect(transcriptService.connect(sessionId))
                .rejects.toThrow('Connection failed')

            expect(transcriptService['connectedSessions'].has(sessionId)).toBe(false)
        })

        it('應該處理重複連接請求', async () => {
            mockTranscriptManager.connect.mockResolvedValue(undefined)

            // 首次連接
            await transcriptService.connect(sessionId)

            // 重複連接（應該被忽略）
            await transcriptService.connect(sessionId)

            expect(mockTranscriptManager.connect).toHaveBeenCalledTimes(1)
        })

        it('應該支援多個會話同時連接', async () => {
            mockTranscriptManager.connect.mockResolvedValue(undefined)

            await transcriptService.connect('session-1')
            await transcriptService.connect('session-2')

            expect(transcriptService['connectedSessions'].has('session-1')).toBe(true)
            expect(transcriptService['connectedSessions'].has('session-2')).toBe(true)
            expect(mockTranscriptManager.connect).toHaveBeenCalledTimes(2)
        })
    })

    describe('disconnect', () => {
        const sessionId = 'test-session-id'

        beforeEach(async () => {
            // Setup connected state
            mockTranscriptManager.connect.mockResolvedValue(undefined)
            await transcriptService.connect(sessionId)
        })

        it('應該成功斷開特定會話', async () => {
            mockTranscriptManager.disconnect.mockResolvedValue(undefined)

            await transcriptService.disconnect(sessionId)

            expect(mockTranscriptManager.disconnect).toHaveBeenCalledWith(sessionId)
            expect(transcriptService['connectedSessions'].has(sessionId)).toBe(false)
        })

        it('應該斷開所有會話（當不指定 sessionId 時）', async () => {
            // 連接多個會話
            await transcriptService.connect('session-2')
            mockTranscriptManager.disconnect.mockResolvedValue(undefined)

            await transcriptService.disconnect()

            expect(mockTranscriptManager.disconnect).toHaveBeenCalledTimes(2)
            expect(transcriptService['connectedSessions'].size).toBe(0)
        })

        it('應該清理對應的監聽器', async () => {
            const callback = vi.fn()

            // 添加監聽器
            transcriptService.addTranscriptListener(sessionId, callback)

            mockTranscriptManager.disconnect.mockResolvedValue(undefined)
            await transcriptService.disconnect(sessionId)

            expect(mockTranscriptManager.removeListener).toHaveBeenCalledWith(sessionId, callback)
            expect(transcriptService['sessionListeners'].has(sessionId)).toBe(false)
        })

        it('應該處理斷開不存在的會話', async () => {
            await expect(transcriptService.disconnect('non-existent'))
                .resolves.not.toThrow()
        })

        it('應該處理斷開失敗', async () => {
            const disconnectError = new Error('Disconnect failed')
            mockTranscriptManager.disconnect.mockRejectedValue(disconnectError)

            await expect(transcriptService.disconnect(sessionId))
                .rejects.toThrow('Disconnect failed')
        })
    })

    describe('addTranscriptListener', () => {
        const sessionId = 'test-session-id'
        const callback = vi.fn()

        it('應該成功添加逐字稿監聽器', () => {
            transcriptService.addTranscriptListener(sessionId, callback)

            expect(mockTranscriptManager.addListener).toHaveBeenCalledWith(sessionId, callback)
            expect(transcriptService['sessionListeners'].get(sessionId)?.has(callback)).toBe(true)
        })

        it('應該支援同一會話多個監聽器', () => {
            const callback2 = vi.fn()

            transcriptService.addTranscriptListener(sessionId, callback)
            transcriptService.addTranscriptListener(sessionId, callback2)

            const listeners = transcriptService['sessionListeners'].get(sessionId)
            expect(listeners?.has(callback)).toBe(true)
            expect(listeners?.has(callback2)).toBe(true)
            expect(listeners?.size).toBe(2)
        })

        it('應該防止重複添加相同監聽器', () => {
            transcriptService.addTranscriptListener(sessionId, callback)
            transcriptService.addTranscriptListener(sessionId, callback)

            expect(mockTranscriptManager.addListener).toHaveBeenCalledTimes(1)
            expect(transcriptService['sessionListeners'].get(sessionId)?.size).toBe(1)
        })

        it('應該處理不同會話的監聽器', () => {
            const callback2 = vi.fn()

            transcriptService.addTranscriptListener('session-1', callback)
            transcriptService.addTranscriptListener('session-2', callback2)

            expect(transcriptService['sessionListeners'].get('session-1')?.has(callback)).toBe(true)
            expect(transcriptService['sessionListeners'].get('session-2')?.has(callback2)).toBe(true)
        })
    })

    describe('removeTranscriptListener', () => {
        const sessionId = 'test-session-id'
        const callback = vi.fn()

        beforeEach(() => {
            transcriptService.addTranscriptListener(sessionId, callback)
        })

        it('應該成功移除逐字稿監聽器', () => {
            transcriptService.removeTranscriptListener(sessionId, callback)

            expect(mockTranscriptManager.removeListener).toHaveBeenCalledWith(sessionId, callback)
            expect(transcriptService['sessionListeners'].get(sessionId)?.has(callback)).toBe(false)
        })

        it('應該處理移除不存在的監聽器', () => {
            const nonExistentCallback = vi.fn()

            expect(() => transcriptService.removeTranscriptListener(sessionId, nonExistentCallback))
                .not.toThrow()
        })

        it('應該處理移除不存在會話的監聽器', () => {
            expect(() => transcriptService.removeTranscriptListener('non-existent', callback))
                .not.toThrow()
        })

        it('應該在移除最後一個監聽器時清理會話記錄', () => {
            transcriptService.removeTranscriptListener(sessionId, callback)

            expect(transcriptService['sessionListeners'].has(sessionId)).toBe(false)
        })
    })

    describe('isConnected', () => {
        const sessionId = 'test-session-id'

        it('應該報告正確的連接狀態', async () => {
            expect(transcriptService.isConnected(sessionId)).toBe(false)

            mockTranscriptManager.connect.mockResolvedValue(undefined)
            await transcriptService.connect(sessionId)

            expect(transcriptService.isConnected(sessionId)).toBe(true)

            mockTranscriptManager.disconnect.mockResolvedValue(undefined)
            await transcriptService.disconnect(sessionId)

            expect(transcriptService.isConnected(sessionId)).toBe(false)
        })

        it('應該處理不存在的會話', () => {
            expect(transcriptService.isConnected('non-existent')).toBe(false)
        })
    })

    describe('逐字稿數據處理', () => {
        const sessionId = 'test-session-id'
        const mockTranscript: TranscriptMessage = {
            id: 'transcript-1',
            text: 'Hello world',
            timestamp: '2024-01-01T00:00:00Z',
            confidence: 0.95,
            isPartial: false,
            sessionId
        }

        it('應該正確處理逐字稿訊息', () => {
            const callback = vi.fn()
            transcriptService.addTranscriptListener(sessionId, callback)

            // 模擬收到逐字稿訊息
            const listenerCall = mockTranscriptManager.addListener.mock.calls.find(
                call => call[0] === sessionId
            )
            const transcriptCallback = listenerCall?.[1]

            if (transcriptCallback) {
                transcriptCallback(mockTranscript)
            }

            expect(callback).toHaveBeenCalledWith(mockTranscript)
        })

        it('應該處理部分逐字稿', () => {
            const callback = vi.fn()
            const partialTranscript: TranscriptMessage = {
                ...mockTranscript,
                text: 'Hello wor...',
                isPartial: true,
                confidence: 0.7
            }

            transcriptService.addTranscriptListener(sessionId, callback)

            // 模擬收到部分逐字稿
            const listenerCall = mockTranscriptManager.addListener.mock.calls.find(
                call => call[0] === sessionId
            )
            const transcriptCallback = listenerCall?.[1]

            if (transcriptCallback) {
                transcriptCallback(partialTranscript)
            }

            expect(callback).toHaveBeenCalledWith(partialTranscript)
        })

        it('應該支援多個監聽器同時接收訊息', () => {
            const callback1 = vi.fn()
            const callback2 = vi.fn()

            transcriptService.addTranscriptListener(sessionId, callback1)
            transcriptService.addTranscriptListener(sessionId, callback2)

            // 模擬收到逐字稿訊息
            const listenerCalls = mockTranscriptManager.addListener.mock.calls.filter(
                call => call[0] === sessionId
            )

            listenerCalls.forEach(call => {
                const transcriptCallback = call[1]
                if (transcriptCallback) {
                    transcriptCallback(mockTranscript)
                }
            })

            expect(callback1).toHaveBeenCalledWith(mockTranscript)
            expect(callback2).toHaveBeenCalledWith(mockTranscript)
        })
    })

    describe('錯誤處理', () => {
        const sessionId = 'test-session-id'

        it('應該處理 TranscriptManager 連接錯誤', async () => {
            const connectionError = new Error('WebSocket connection failed')
            mockTranscriptManager.connect.mockRejectedValue(connectionError)

            await expect(transcriptService.connect(sessionId))
                .rejects.toThrow('WebSocket connection failed')

            expect(transcriptService.isConnected(sessionId)).toBe(false)
        })

        it('應該處理 TranscriptManager 斷開錯誤', async () => {
            mockTranscriptManager.connect.mockResolvedValue(undefined)
            await transcriptService.connect(sessionId)

            const disconnectError = new Error('Disconnect failed')
            mockTranscriptManager.disconnect.mockRejectedValue(disconnectError)

            await expect(transcriptService.disconnect(sessionId))
                .rejects.toThrow('Disconnect failed')
        })

        it('應該在連接失敗時清理狀態', async () => {
            const connectionError = new Error('Connection failed')
            mockTranscriptManager.connect.mockRejectedValue(connectionError)

            try {
                await transcriptService.connect(sessionId)
            } catch {
                // 預期的錯誤
            }

            expect(transcriptService['connectedSessions'].has(sessionId)).toBe(false)
        })
    })

    describe('並發場景測試', () => {
        it('應該處理並發連接請求', async () => {
            mockTranscriptManager.connect.mockResolvedValue(undefined)

            const promises = [
                transcriptService.connect('session-1'),
                transcriptService.connect('session-2'),
                transcriptService.connect('session-3')
            ]

            await Promise.all(promises)

            expect(transcriptService['connectedSessions'].size).toBe(3)
            expect(mockTranscriptManager.connect).toHaveBeenCalledTimes(3)
        })

        it('應該處理並發的連接和斷開操作', async () => {
            mockTranscriptManager.connect.mockResolvedValue(undefined)
            mockTranscriptManager.disconnect.mockResolvedValue(undefined)

            // 連接會話
            await transcriptService.connect('session-1')

            const promises = [
                transcriptService.connect('session-2'),
                transcriptService.disconnect('session-1'),
                transcriptService.connect('session-3')
            ]

            await Promise.all(promises)

            expect(transcriptService['connectedSessions'].has('session-1')).toBe(false)
            expect(transcriptService['connectedSessions'].has('session-2')).toBe(true)
            expect(transcriptService['connectedSessions'].has('session-3')).toBe(true)
        })

        it('應該處理快速的添加和移除監聽器操作', () => {
            const callbacks = Array.from({ length: 5 }, () => vi.fn())
            const sessionId = 'test-session'

            // 快速添加多個監聽器
            callbacks.forEach(callback => {
                transcriptService.addTranscriptListener(sessionId, callback)
            })

            expect(transcriptService['sessionListeners'].get(sessionId)?.size).toBe(5)

            // 快速移除監聽器
            callbacks.forEach(callback => {
                transcriptService.removeTranscriptListener(sessionId, callback)
            })

            expect(transcriptService['sessionListeners'].has(sessionId)).toBe(false)
        })
    })

    describe('資源清理', () => {
        it('應該在服務停止時清理所有資源', async () => {
            mockTranscriptManager.connect.mockResolvedValue(undefined)
            mockTranscriptManager.disconnect.mockResolvedValue(undefined)

            // 連接多個會話
            await transcriptService.connect('session-1')
            await transcriptService.connect('session-2')

            // 添加監聽器
            const callback1 = vi.fn()
            const callback2 = vi.fn()
            transcriptService.addTranscriptListener('session-1', callback1)
            transcriptService.addTranscriptListener('session-2', callback2)

            // 停止服務
            await transcriptService.stop()

            // 驗證資源清理
            expect(transcriptService['connectedSessions'].size).toBe(0)
            expect(transcriptService['sessionListeners'].size).toBe(0)
        })

        it('應該處理清理過程中的錯誤', async () => {
            mockTranscriptManager.connect.mockResolvedValue(undefined)
            await transcriptService.connect('session-1')

            // 模擬斷開時發生錯誤
            mockTranscriptManager.disconnect.mockRejectedValue(new Error('Cleanup error'))

            // 服務停止應該不會拋出錯誤
            await expect(transcriptService.stop()).resolves.not.toThrow()
        })
    })

    describe('服務狀態報告', () => {
        it('應該報告正確的服務資訊', () => {
            const info = transcriptService.getServiceInfo()

            expect(info).toMatchObject({
                serviceName: 'TranscriptService',
                isInitialized: expect.any(Boolean),
                isRunning: expect.any(Boolean),
                connectedSessions: expect.any(Array),
                activeListeners: expect.any(Object),
                totalConnections: expect.any(Number)
            })
        })

        it('應該正確報告連接數量', async () => {
            mockTranscriptManager.connect.mockResolvedValue(undefined)

            await transcriptService.connect('session-1')
            await transcriptService.connect('session-2')

            const info = transcriptService.getServiceInfo()

            expect(info.connectedSessions).toHaveLength(2)
            expect(info.totalConnections).toBe(2)
        })

        it('應該正確報告監聽器數量', () => {
            const callback1 = vi.fn()
            const callback2 = vi.fn()

            transcriptService.addTranscriptListener('session-1', callback1)
            transcriptService.addTranscriptListener('session-1', callback2)
            transcriptService.addTranscriptListener('session-2', callback1)

            const info = transcriptService.getServiceInfo()

            expect(info.activeListeners['session-1']).toBe(2)
            expect(info.activeListeners['session-2']).toBe(1)
        })
    })

    describe('邊界條件測試', () => {
        it('應該處理空字符串會話 ID', async () => {
            mockTranscriptManager.connect.mockResolvedValue(undefined)

            await expect(transcriptService.connect('')).resolves.not.toThrow()
            expect(transcriptService.isConnected('')).toBe(true)
        })

        it('應該處理特殊字符的會話 ID', async () => {
            const specialSessionId = 'session-123!@#$%^&*()'
            mockTranscriptManager.connect.mockResolvedValue(undefined)

            await transcriptService.connect(specialSessionId)
            expect(transcriptService.isConnected(specialSessionId)).toBe(true)
        })

        it('應該處理 null/undefined 回調函數', () => {
            expect(() => transcriptService.addTranscriptListener('session', null as any))
                .not.toThrow()

            expect(() => transcriptService.addTranscriptListener('session', undefined as any))
                .not.toThrow()
        })
    })
})


# END FILE CONTENTS


# File: frontend/components/finish-state.tsx

"use client"

import { ScrollArea } from "@/components/ui/scroll-area"
import { Button } from "@/components/ui/button"
import { ChevronDown } from "lucide-react"
import type { TranscriptEntry } from "../types/app-state"

interface FinishStateProps {
  transcriptEntries: TranscriptEntry[]
  onExport?: () => void
  onToLatest?: () => void
}

export function FinishState({ transcriptEntries, onExport, onToLatest }: FinishStateProps) {
  return (
    <div className="h-full flex flex-col">
      <ScrollArea className="flex-1">
        <div className="p-6 space-y-4">
          {transcriptEntries.map((entry, index) => (
            <div key={index} className="flex gap-4 text-sm">
              <span className="text-muted-foreground font-mono text-xs mt-1 min-w-[40px] flex-shrink-0">
                {entry.time}
              </span>
              <span className="text-foreground leading-relaxed flex-1">{entry.text}</span>
            </div>
          ))}
        </div>
      </ScrollArea>

      <div className="p-4 border-t border-border space-y-2">
        {/* Action buttons row */}
        <div className="flex justify-center gap-2">
          {onToLatest && (
            <Button
              onClick={onToLatest}
              variant="ghost"
              size="sm"
              className="flex items-center gap-2"
            >
              <ChevronDown className="w-4 h-4" />
              To Latest
            </Button>
          )}
        </div>
      </div>
    </div>
  )
}


# END FILE CONTENTS


# File: app/services/stt/whisper_provider.py

from __future__ import annotations

import logging
from uuid import UUID
from typing import Any, Dict, Optional
from app.services.stt.base import ISTTProvider
from app.services.azure_whisper import AzureWhisperService
from app.services.stt.lang_map import to_whisper
from app.db.database import get_supabase_client

import json
from app.core.config import get_settings

logger = logging.getLogger(__name__)

__all__ = ["WhisperProvider", "save_and_push_result"]

class WhisperProvider(ISTTProvider):
    name = "whisper"
    _service: Optional[AzureWhisperService] = None

    def __init__(self) -> None:
        if self._service is None:
            self._service = AzureWhisperService()

    def max_rpm(self) -> int:
        # 可根據設定調整
        from app.core.config import get_settings
        settings = get_settings()
        return getattr(settings, "WHISPER_MAX_REQUESTS", 180)


    async def transcribe(self, audio: bytes, session_id: UUID, chunk_seq: int) -> Dict[str, Any] | None:
        # 查詢 canonical lang_code
        supa = get_supabase_client()
        row = supa.table("sessions").select("lang_code").eq("id", str(session_id)).single().execute()
        canonical = (row.data or {}).get("lang_code", "zh-TW")
        api_language = to_whisper(canonical)
        return await self._service.transcribe(
            audio, session_id, chunk_seq,
            api_language=api_language,
            canonical_lang=canonical
        )

async def save_and_push_result(session_id: UUID, chunk_seq: int, data: dict):
    """共用：把結果寫入 transcript_segments 並透過 WebSocket 推送"""
    from app.ws.transcript_feed import manager
    from app.db.database import get_supabase_client

    settings = get_settings()
    supa = get_supabase_client()
    seg = {
        "session_id": str(session_id),
        "chunk_sequence": chunk_seq,
        "text": data["text"],
        "start_time": chunk_seq * settings.AUDIO_CHUNK_DURATION_SEC,
        "end_time": (chunk_seq + 1) * settings.AUDIO_CHUNK_DURATION_SEC,
        "confidence": 1.0,
        "lang_code": data["lang_code"],
    }
    row = supa.table("transcript_segments").insert(seg).execute()

    # WebSocket
    await manager.broadcast(
        json.dumps({
            "type": "transcript_segment",
            "session_id": str(session_id),
            "segment_id": row.data[0]["id"],
            **seg
        }),
        str(session_id)
    )


# END FILE CONTENTS


# File: frontend/lib/websocket.ts

"use client"

import { getWebSocketURL } from './api'

// WebSocket 連接狀態
export type WebSocketState = 'connecting' | 'connected' | 'disconnected' | 'error'

// 逐字稿接收介面 (與後端推送格式一致)
export interface TranscriptMessage {
  type: 'transcript_segment' | 'transcript_complete' | 'connection_established' | 'heartbeat_ack' | 'pong' | 'active' | 'error' | 'transcription_error'
  session_id?: string
  segment_id?: string
  text?: string
  message?: string  // 用於連接確認訊息或完成通知
  start_sequence?: number
  end_sequence?: number
  start_time?: number
  end_time?: number
  language?: string
  confidence?: number
  timestamp?: number
  phase?: 'waiting' | 'active'  // 新增 phase 欄位
  error_type?: string
  error_message?: string
  details?: any
}

// ACK/Missing 訊息介面
export interface AckMissingMessage {
  ack: number
  missing: number[]
}

// WebSocket 管理類別
export class WebSocketManager {
  private ws: WebSocket | null = null
  private url: string
  private reconnectAttempts = 0
  private maxReconnectAttempts = 5
  private reconnectDelay = 1000
  private isManualClose = false

  constructor(url: string) {
    this.url = url
  }

  connect(): Promise<void> {
    return new Promise((resolve, reject) => {
      try {
        this.ws = new WebSocket(this.url)
        this.isManualClose = false

        this.ws.onopen = () => {
          console.log('✅ WebSocket 連接成功:', this.url)
          this.reconnectAttempts = 0
          resolve()
        }

        this.ws.onerror = (error) => {
          console.error('❌ WebSocket 連接錯誤:', error)
          reject(error)
        }

        this.ws.onclose = (event) => {
          console.log('🔌 WebSocket 連接關閉:', event.code, event.reason)

          if (!this.isManualClose && this.reconnectAttempts < this.maxReconnectAttempts) {
            this.reconnectAttempts++
            console.log(`🔄 嘗試重新連接 (${this.reconnectAttempts}/${this.maxReconnectAttempts})`)

            setTimeout(() => {
              this.connect()
            }, this.reconnectDelay * this.reconnectAttempts)
          }
        }
      } catch (error) {
        reject(error)
      }
    })
  }

  disconnect(): void {
    this.isManualClose = true
    if (this.ws) {
      this.ws.close()
      this.ws = null
    }
  }

  send(data: string | ArrayBuffer): void {
    if (this.ws && this.ws.readyState === WebSocket.OPEN) {
      const dataInfo = data instanceof ArrayBuffer
        ? `Binary (${data.byteLength} bytes)`
        : `Text (${data.length} chars)`

      console.log('📡 [WebSocketManager] 發送資料', {
        type: dataInfo,
        url: this.url,
        readyState: this.ws.readyState,
        timestamp: new Date().toISOString()
      })

      this.ws.send(data)
    } else {
      console.warn('⚠️ WebSocket 未連接，無法發送資料', {
        url: this.url,
        readyState: this.ws?.readyState || 'null'
      })
    }
  }

  onMessage(callback: (event: MessageEvent) => void): void {
    if (this.ws) {
      this.ws.onmessage = callback
    }
  }

  onClose(callback: (event: CloseEvent) => void): void {
    if (this.ws) {
      const originalOnClose = this.ws.onclose
      const ws = this.ws // 保存引用避免 null 問題
      this.ws.onclose = (event) => {
        // 先調用新的回調
        callback(event)
        // 再調用原始的處理器
        if (originalOnClose) {
          originalOnClose.call(ws, event)
        }
      }
    }
  }

  get readyState(): number {
    return this.ws?.readyState ?? WebSocket.CLOSED
  }

  get isConnected(): boolean {
    return this.ws?.readyState === WebSocket.OPEN
  }
}

// 音檔上傳 WebSocket 管理
export class AudioUploadWebSocket extends WebSocketManager {
  private sequenceNumber = 0

  constructor(sessionId: string) {
    super(getWebSocketURL(`/ws/upload_audio/${sessionId}`))
  }

  uploadAudioChunk(audioBlob: Blob): void {
    console.log('🔊 [AudioUploadWebSocket] uploadAudioChunk 被調用', {
      sequence: this.sequenceNumber,
      blobSize: audioBlob.size,
      wsState: this.readyState,
      isConnected: this.isConnected
    })

    if (!this.isConnected) {
      console.warn('⚠️ WebSocket 未連接，無法上傳音檔')
      return
    }

    // 建立包含序號的資料包
    const sequenceBuffer = new ArrayBuffer(4)
    const sequenceView = new DataView(sequenceBuffer)
    sequenceView.setUint32(0, this.sequenceNumber, true) // little-endian

    // 合併序號和音檔資料
    audioBlob.arrayBuffer().then(audioBuffer => {
      const combinedBuffer = new ArrayBuffer(sequenceBuffer.byteLength + audioBuffer.byteLength)
      const combinedView = new Uint8Array(combinedBuffer)

      combinedView.set(new Uint8Array(sequenceBuffer), 0)
      combinedView.set(new Uint8Array(audioBuffer), sequenceBuffer.byteLength)

      console.log('🔄 [AudioUploadWebSocket] 準備發送 binary frame', {
        sequence: this.sequenceNumber,
        totalSize: combinedBuffer.byteLength,
        audioSize: audioBuffer.byteLength,
        sequenceSize: sequenceBuffer.byteLength
      })

      this.send(combinedBuffer)

      console.log(`✅ [AudioUploadWebSocket] Binary frame 已送出 #${this.sequenceNumber}`, {
        size: `${audioBlob.size} bytes`,
        totalSize: `${combinedBuffer.byteLength} bytes`,
        timestamp: new Date().toISOString()
      })

      this.sequenceNumber++
    }).catch(error => {
      console.error('❌ [AudioUploadWebSocket] 處理音頻資料失敗', {
        sequence: this.sequenceNumber,
        error: error.message || error
      })
    })
  }

  onAckMissing(callback: (data: AckMissingMessage) => void): void {
    this.onMessage((event) => {
      try {
        const message = JSON.parse(event.data)

        // 根據消息類型進行分發
        switch (message.type) {
          case 'ack_missing':
            // 確認 data.missing 存在且是陣列
            if (message.missing && Array.isArray(message.missing)) {
              callback(message as AckMissingMessage)
            } else {
              console.error('❌ 收到的 ack_missing 訊息格式不正確:', message)
            }
            break
          case 'ack':
            // 處理音檔切片確認訊息
            console.log('✅ 音檔切片確認:', message.chunk_sequence || 'unknown')
            break
          case 'heartbeat_ack':
            // 處理音檔上傳心跳確認
            console.log('💓 音檔上傳心跳確認')
            break
          case 'connection_established':
            console.log('✅ 音檔上傳 WebSocket 連接已建立')
            break
          case 'error':
            console.error('❌ 音檔上傳服務端錯誤:', message.message)
            break
          default:
            console.warn('⚠️ 收到未知的音檔上傳訊息類型:', message.type)
        }
      } catch (error) {
        console.error('❌ 解析音檔上傳服務訊息失敗:', error)
      }
    })
  }

  resetSequence(): void {
    this.sequenceNumber = 0
  }
}

// 逐字稿接收 WebSocket 管理 - 簡化版，只負責基礎連接
export class TranscriptWebSocket extends WebSocketManager {
  constructor(sessionId: string) {
    super(getWebSocketURL(`/ws/transcript_feed/${sessionId}`))
  }

  // 設定訊息處理回調
  onMessage(callback: (data: any) => void): void {
    super.onMessage((event) => {
      console.log('🔥 [TranscriptWebSocket] 原始 WebSocket 訊息:', {
        data: event.data,
        type: typeof event.data,
        length: event.data?.length,
        timestamp: new Date().toISOString()
      })

      try {
        const data = JSON.parse(event.data)
        console.log('✅ [TranscriptWebSocket] JSON 解析成功:', {
          parsedData: data,
          dataType: data.type,
          sessionId: data.session_id
        })

        console.log('🎯 [TranscriptWebSocket] 即將調用 callback')
        callback(data)
        console.log('✅ [TranscriptWebSocket] callback 調用完成')

      } catch (error) {
        console.error('❌ TranscriptWebSocket 解析訊息失敗:', {
          error: error instanceof Error ? error.message : String(error),
          rawData: event.data
        })
      }
    })
  }

  // 發送 JSON 訊息
  sendJson(message: any): void {
    if (this.isConnected) {
      this.send(JSON.stringify(message))
    }
  }
}

// WebSocket 工廠函數
export const createAudioUploadWebSocket = (sessionId: string): AudioUploadWebSocket => {
  return new AudioUploadWebSocket(sessionId)
}

export const createTranscriptWebSocket = (sessionId: string): TranscriptWebSocket => {
  return new TranscriptWebSocket(sessionId)
}


# END FILE CONTENTS


# File: frontend/lib/transcript-manager-adapter.ts

"use client"

import { isFeatureEnabled } from './feature-flags'

/**
 * TranscriptManager 適配器
 *
 * 根據功能旗標 `useRefactoredTranscriptManager` 選擇使用：
 * - 新的重構實現（transcript-manager-new.ts）
 * - 舊的實現（transcript-manager.ts）
 *
 * 這允許我們進行安全的漸進式切換和測試
 */

// 定義通用介面，確保新舊實現兼容
export interface ITranscriptManager {
  connect(sessionId: string): Promise<void>
  disconnect(sessionId: string): Promise<void>
  disconnectAll(): Promise<void>
  isConnected(sessionId: string): boolean
  getConnectionCount(): number
}

let managerInstance: ITranscriptManager | null = null

/**
 * 取得 TranscriptManager 實例
 * 根據功能旗標自動選擇實現
 */
export async function getTranscriptManager(): Promise<ITranscriptManager> {
  const useRefactored = isFeatureEnabled('useRefactoredTranscriptManager')

  console.log(`🎯 [TranscriptManagerAdapter] 使用 ${useRefactored ? '新' : '舊'} 實現`)

  if (useRefactored) {
    // 動態導入新實現
    if (!managerInstance || !(managerInstance as any).isRefactored) {
      const { TranscriptManager } = await import('./transcript-manager-new')
      managerInstance = TranscriptManager.getInstance()
        ; (managerInstance as any).isRefactored = true
      console.log('✅ [TranscriptManagerAdapter] 已載入重構後的 TranscriptManager')
    }
  } else {
    // 動態導入舊實現
    if (!managerInstance || (managerInstance as any).isRefactored) {
      const { transcriptManager } = await import('./transcript-manager')
      managerInstance = transcriptManager
        ; (managerInstance as any).isRefactored = false
      console.log('✅ [TranscriptManagerAdapter] 已載入原始 TranscriptManager')
    }
  }

  return managerInstance
}

/**
 * 強制重新載入 TranscriptManager（用於功能旗標變更後）
 */
export async function reloadTranscriptManager(): Promise<ITranscriptManager> {
  // 清理現有實例
  if (managerInstance) {
    try {
      await managerInstance.disconnectAll()
    } catch (error) {
      console.warn('⚠️ [TranscriptManagerAdapter] 清理舊實例時發生錯誤:', error)
    }
  }

  managerInstance = null
  return getTranscriptManager()
}

/**
 * 便利函數：取得當前使用的實現類型
 */
export function getCurrentImplementation(): 'refactored' | 'legacy' {
  return isFeatureEnabled('useRefactoredTranscriptManager') ? 'refactored' : 'legacy'
}

/**
 * 便利函數：切換實現並重新載入
 */
export async function switchImplementation(useRefactored: boolean): Promise<ITranscriptManager> {
  const { enableFeature, disableFeature } = await import('./feature-flags')

  if (useRefactored) {
    enableFeature('useRefactoredTranscriptManager')
  } else {
    disableFeature('useRefactoredTranscriptManager')
  }

  return reloadTranscriptManager()
}

// 暴露到 window 供調試使用
if (typeof window !== 'undefined') {
  (window as any).transcriptManagerAdapter = {
    getCurrentImplementation,
    switchToRefactored: () => switchImplementation(true),
    switchToLegacy: () => switchImplementation(false),
    reload: reloadTranscriptManager,
    getManager: getTranscriptManager,
  }

  console.log('🎯 [TranscriptManagerAdapter] 調試介面已暴露到 window.transcriptManagerAdapter')
  console.log('   切換到新實現: window.transcriptManagerAdapter.switchToRefactored()')
  console.log('   切換到舊實現: window.transcriptManagerAdapter.switchToLegacy()')
}


# END FILE CONTENTS


# File: frontend/lib/services/index.ts

"use client"

/**
 * 服務層統一入口
 *
 * 提供服務層所有模組的統一匯出
 */

// 基礎服務類別
export { BaseService, ServiceError } from './base-service'
export type { ServiceStatus } from './base-service'

// 服務容器
export { ServiceContainer, ServiceContainerError, serviceContainer } from './service-container'
export type {
    ServiceContainerStatus,
    ServiceInitializationResult,
    ServiceCleanupResult
} from './service-container'

// 具體服務實現
export { SessionService } from './session-service'
export type { SessionServiceStatus } from './session-service'

export { RecordingService } from './recording-service'
export type { RecordingServiceStatus } from './recording-service'

export { TranscriptService } from './transcript-service'

// 服務註冊
export { ServiceRegistry } from './service-registry'

// 服務介面和鍵值
export type {
    ISessionService,
    IRecordingService,
    ITranscriptService,
    IServiceContainer,
    RecordingState,
    TranscriptMessage,
    TranscriptEntry,
    ServiceKey,
    ServiceTypeMap
} from './interfaces'

export { SERVICE_KEYS } from './interfaces'


# END FILE CONTENTS


# File: frontend/playwright.config.ts

import { defineConfig, devices } from '@playwright/test'

export default defineConfig({
    testDir: '../tests/frontend',
    outputDir: '../tests/frontend/test-results',
    timeout: 60000,
    use: {
        headless: true,
        baseURL: 'http://localhost:3100',
    },
    webServer: {
        command: 'pnpm dev --port 3100',
        url: 'http://localhost:3100',
        timeout: 120000,
        reuseExistingServer: !process.env.CI,
        cwd: '.',
    },
    projects: [
        {
            name: 'chromium',
            use: { ...devices['Desktop Chrome'] },
        },
    ],
})


# END FILE CONTENTS


# File: frontend/components/ui/progress.tsx

"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }


# END FILE CONTENTS


# File: frontend/lib/app-store.ts

"use client"

import { useState, useCallback, useRef } from 'react'
import { serviceContainer, SERVICE_KEYS } from './services'
import type { RecordingFlowService, RecordingFlowListener } from './services/recording-flow-service'
import type { SessionResponse } from './api'
import { AppState, SessionStatus, SessionType, TranscriptEntry } from '../types/app-state'

/**
 * Store 狀態介面
 */
export interface AppStoreState {
  // 應用狀態
  currentState: AppState
  isLoading: boolean
  error: string | null

  // 會話狀態
  session: {
    id: string
    status: SessionStatus
    type: SessionType
  } | null

  // 錄音狀態
  isRecording: boolean
  recordingTime: number

  // 逐字稿狀態
  transcriptEntries: TranscriptEntry[]

  // 編輯器狀態
  editorContent: string
}

/**
 * Store 操作介面
 */
export interface AppStoreActions {
  // 核心業務操作
  startRecording: (title?: string) => Promise<void>
  stopRecording: () => Promise<void>

  // 編輯器操作
  updateEditorContent: (content: string) => void

  // 狀態重置
  resetState: () => void

  // 錯誤處理
  clearError: () => void
}

/**
 * Store Hook 返回值
 */
export interface AppStoreReturn {
  state: AppStoreState
  actions: AppStoreActions
}

/**
 * AppStore - 統一的狀態管理
 *
 * 職責：
 * 1. 管理應用狀態
 * 2. 調用服務層執行業務邏輯
 * 3. 處理 loading 和錯誤狀態
 * 4. 提供簡潔的 API 給 UI 層
 */
export function useAppStore(): AppStoreReturn {
  // === 狀態定義 ===
  const [currentState, setCurrentState] = useState<AppState>('default')
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [session, setSession] = useState<AppStoreState['session']>(null)
  const [isRecording, setIsRecording] = useState(false)
  const [recordingTime, setRecordingTime] = useState(0)
  const [transcriptEntries, setTranscriptEntries] = useState<TranscriptEntry[]>([])
  const [editorContent, setEditorContent] = useState('')

  // === 服務引用 ===
  const recordingFlowServiceRef = useRef<RecordingFlowService | null>(null)
  const flowListenerRef = useRef<RecordingFlowListener | null>(null)

  // === 初始化服務 ===
  const initializeRecordingFlowService = useCallback(() => {
    if (!recordingFlowServiceRef.current) {
      recordingFlowServiceRef.current = serviceContainer.resolve<RecordingFlowService>(
        SERVICE_KEYS.RECORDING_FLOW_SERVICE
      )
    }
    return recordingFlowServiceRef.current
  }, [])

  // === 流程監聽器 ===
  const createFlowListener = useCallback((): RecordingFlowListener => {
    return {
      onTranscriptReceived: (transcript) => {
        console.log('📝 [AppStore] 收到逐字稿:', transcript)
        setTranscriptEntries(prev => [...prev, transcript])
      },

      onFirstTranscriptReceived: () => {
        console.log('🎯 [AppStore] 收到第一個逐字稿，轉換狀態')
        setCurrentState('recording_active')
      },

      onRecordingStatusChange: (recording) => {
        console.log('�� [AppStore] 錄音狀態變更:', recording)
        setIsRecording(recording)
      },

      onTranscriptComplete: () => {
        console.log('✅ [AppStore] 逐字稿轉錄完成')
        setCurrentState('finished')
      },

      onError: (errorMessage) => {
        console.error('❌ [AppStore] 錄音流程錯誤:', errorMessage)
        setError(errorMessage)
        setIsLoading(false)
        setCurrentState('default')
      }
    }
  }, [])

  // === 錄音時間追蹤 ===
  const startRecordingTimeTracking = useCallback(() => {
    const interval = setInterval(() => {
      const service = recordingFlowServiceRef.current
      if (service && service.isActive()) {
        const time = service.getRecordingTime()
        setRecordingTime(time)
      } else {
        clearInterval(interval)
      }
    }, 1000)

    return interval
  }, [])

  // === 業務操作 ===

  /**
   * 開始錄音流程
   */
  const startRecording = useCallback(async (title?: string): Promise<void> => {
    console.log('🎤 [AppStore] 開始錄音流程')

    try {
      // 1. 設置 loading 狀態
      setIsLoading(true)
      setError(null)
      setCurrentState('recording_waiting')

      // 2. 初始化服務
      const recordingFlowService = initializeRecordingFlowService()

      // 3. 設置流程監聽器
      if (flowListenerRef.current) {
        recordingFlowService.removeListener(flowListenerRef.current)
      }
      flowListenerRef.current = createFlowListener()
      recordingFlowService.addListener(flowListenerRef.current)

      // 4. 啟動錄音流程
      const result: RecordingFlowResult = await recordingFlowService.startRecordingFlow(title)

      if (result.success) {
        // 成功：更新會話資訊和狀態
        setSession({
          id: result.sessionId,
          status: 'active' as SessionStatus,
          type: 'recording' as SessionType
        })

        setCurrentState('recording_waiting')

        // 啟動時間追蹤
        startRecordingTimeTracking()

        console.log('✅ [AppStore] 錄音流程啟動成功:', result.sessionId)
      } else {
        // 失敗：顯示錯誤
        throw new Error(result.error || '錄音流程啟動失敗')
      }

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : '開始錄音失敗'
      console.error('❌ [AppStore] 錄音流程啟動失敗:', error)

      setError(errorMessage)
      setCurrentState('default')
    } finally {
      setIsLoading(false)
    }
  }, [initializeRecordingFlowService, createFlowListener, startRecordingTimeTracking])

  /**
   * 停止錄音流程
   */
  const stopRecording = useCallback(async (): Promise<void> => {
    console.log('🛑 [AppStore] 停止錄音流程')

    try {
      setIsLoading(true)
      setCurrentState('processing')

      const recordingFlowService = recordingFlowServiceRef.current
      if (recordingFlowService) {
        await recordingFlowService.stopRecordingFlow()

        // 清理監聽器
        if (flowListenerRef.current) {
          recordingFlowService.removeListener(flowListenerRef.current)
          flowListenerRef.current = null
        }
      }

      // 更新狀態
      setIsRecording(false)
      setCurrentState('finished')

      console.log('✅ [AppStore] 錄音流程停止成功')

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : '停止錄音失敗'
      console.error('❌ [AppStore] 停止錄音失敗:', error)
      setError(errorMessage)
    } finally {
      setIsLoading(false)
    }
  }, [])

  /**
   * 更新編輯器內容
   */
  const updateEditorContent = useCallback((content: string) => {
    setEditorContent(content)
  }, [])

  /**
   * 重置狀態
   */
  const resetState = useCallback(() => {
    console.log('🔄 [AppStore] 重置狀態')

    // 停止錄音流程（如果有）
    const recordingFlowService = recordingFlowServiceRef.current
    if (recordingFlowService && recordingFlowService.isActive()) {
      recordingFlowService.stopRecordingFlow().catch(console.error)
    }

    // 重置所有狀態
    setCurrentState('default')
    setIsLoading(false)
    setError(null)
    setSession(null)
    setIsRecording(false)
    setRecordingTime(0)
    setTranscriptEntries([])
    setEditorContent('')
  }, [])

  /**
   * 清除錯誤
   */
  const clearError = useCallback(() => {
    setError(null)
  }, [])

  // === 返回 Store 狀態和操作 ===
  return {
    state: {
      currentState,
      isLoading,
      error,
      session,
      isRecording,
      recordingTime,
      transcriptEntries,
      editorContent
    },
    actions: {
      startRecording,
      stopRecording,
      updateEditorContent,
      resetState,
      clearError
    }
  }
}


# END FILE CONTENTS


# END FILE CONTENTS


# File: frontend/refresh.ts



# END FILE CONTENTS


# File: frontend/e2e/offline-recovery.spec.ts

import { test, expect } from '@playwright/test'

test('offline 30s then online resumes', async ({ page }) => {
    await page.goto('/')
    await page.evaluate(() => window.dispatchEvent(new Event('offline')))
    await page.waitForTimeout(30_000)        // 錄音 & 斷網
    await page.evaluate(() => window.dispatchEvent(new Event('online')))

    await expect(page.getByText('暫存段落已全部上傳完成')).toBeVisible()
})


# END FILE CONTENTS


# File: pyproject.toml

[project]
name = "study-scriber"
version = "0.1.0"
description = "Cloud note tool: record, real-time transcript, Markdown notes & export as ZIP."
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "fastapi",
    "uvicorn[standard]",
    "pydantic",
    "pydantic-settings",
    "python-dotenv",
    "psycopg2-binary",
    "uvloop",
    "httpx",
    "aiohttp",
    "loguru",
    "supabase",
    "gotrue",
    "postgrest",
    "realtime",
    "storage3",
    "openai",
    "aiofiles",
    "python-multipart",
    "google-generativeai",  # 提供 google.generativeai.GenerativeModel
    # Task 5: 監控依賴
    "prometheus-client",
    # 測試依賴
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.0.0",
]

[tool.setuptools.packages.find]
include = ["app*"]

[tool.pytest.ini_options]
addopts = "--cov=app"


# END FILE CONTENTS


# File: .cursor/rules/ui-rules/create-prototype.mdc

---
description:
globs:
alwaysApply: false
---
# Prototype Creation Rule (for Cursor)

Trigger phrases (case-insensitive)
• “create a new prototype”
• “make a new prototype”
• “create prototype”
• “make prototype”
• any similar wording

---

## Workflow

1. **Ask for a name (if missing)**
   If the request does **not** include a prototype name, prompt:
   > “What should the prototype be called?”

2. **Copy the template**
   Duplicate `app/prototypes/_template` → `app/prototypes/<prototype-name>`.

3. **Create / modify core files** inside the new folder:
   • `page.tsx`
   • `styles.module.css`
   • any additional components or utilities required

4. **Install dependencies** (only if new packages are needed)
   ```bash
   pnpm add <package>
   # or: npm i <package> / yarn add <package>
5.	Register on the homepage
In ⁠app/page.tsx (or wherever the prototypes array lives), append:
{
  path: "/prototypes/<prototype-name>",
  label: "<Prototype Name>"
}
6.	Manual test
• Start the dev server
• Confirm the homepage link works
• Confirm the prototype page renders with no TypeScript / ESLint errors

---

All steps must succeed without errors before the task is considered complete.


# END FILE CONTENTS


# File: frontend/lib/feature-flags.ts

"use client"

// 功能開關配置
export interface FeatureFlags {
  useNewStateManagement: boolean
  useNewRecordingHook: boolean
  useNewSessionHook: boolean
  useNewTranscriptHook: boolean
  useNewAppStateHook: boolean
  useSimpleRecordingService: boolean  // 🔧 Phase 2.5: 使用進階錄音服務 (AdvancedAudioRecorder)
  enableStateSync: boolean
  enableDebugLogging: boolean
}

// 預設功能開關設定（新模式啟用）
const defaultFeatureFlags: FeatureFlags = {
  useNewStateManagement: true,   // 🆕 啟用新狀態管理
  useNewRecordingHook: true,     // 🆕 啟用新 recording hook
  useNewSessionHook: true,       // 🆕 啟用新 session hook
  useNewTranscriptHook: true,    // 🆕 啟用新 transcript hook
  useNewAppStateHook: true,      // 🆕 啟用新 app state hook
  useSimpleRecordingService: true, // 🔧 Phase 2.5: 啟用進階錄音服務 (修復 WebM Header)
  enableStateSync: true,         // 預設開啟狀態同步
  enableDebugLogging: true,      // 預設開啟調試日誌
}

// 從 localStorage 讀取功能開關設定
function loadFeatureFlags(): FeatureFlags {
  if (typeof window === 'undefined') {
    return defaultFeatureFlags
  }

  try {
    const stored = localStorage.getItem('study-scriber-feature-flags')
    if (stored) {
      const parsed = JSON.parse(stored)
      return { ...defaultFeatureFlags, ...parsed }
    }
  } catch (error) {
    console.warn('🚩 [FeatureFlags] 讀取功能開關失敗:', error)
  }

  return defaultFeatureFlags
}

// 儲存功能開關設定到 localStorage
function saveFeatureFlags(flags: Partial<FeatureFlags>): void {
  if (typeof window === 'undefined') return

  try {
    const current = loadFeatureFlags()
    const updated = { ...current, ...flags }
    localStorage.setItem('study-scriber-feature-flags', JSON.stringify(updated))
    console.log('🚩 [FeatureFlags] 功能開關已更新:', updated)
  } catch (error) {
    console.error('🚩 [FeatureFlags] 儲存功能開關失敗:', error)
  }
}

// 功能開關管理器
class FeatureFlagManager {
  private flags: FeatureFlags

  constructor() {
    this.flags = loadFeatureFlags()
    this.exposeToWindow()
  }

  // 檢查功能是否啟用
  isEnabled(flag: keyof FeatureFlags): boolean {
    return this.flags[flag]
  }

  // 啟用功能
  enable(flag: keyof FeatureFlags): void {
    this.updateFlag(flag, true)
  }

  // 停用功能
  disable(flag: keyof FeatureFlags): void {
    this.updateFlag(flag, false)
  }

  // 切換功能狀態
  toggle(flag: keyof FeatureFlags): void {
    this.updateFlag(flag, !this.flags[flag])
  }

  // 更新單一功能開關
  private updateFlag(flag: keyof FeatureFlags, value: boolean): void {
    this.flags = { ...this.flags, [flag]: value }
    saveFeatureFlags({ [flag]: value })

    console.log(`🚩 [FeatureFlags] ${flag}: ${value ? '啟用' : '停用'}`)

    // 如果是關鍵功能，給予警告
    if (flag === 'useNewStateManagement' && value) {
      console.warn('⚠️ [FeatureFlags] 新狀態管理系統已啟用，請確保已完成測試')
    }
  }

  // 批次更新功能開關
  updateFlags(updates: Partial<FeatureFlags>): void {
    this.flags = { ...this.flags, ...updates }
    saveFeatureFlags(updates)
    console.log('🚩 [FeatureFlags] 批次更新完成:', updates)
  }

  // 重置所有功能開關
  reset(): void {
    this.flags = defaultFeatureFlags
    if (typeof window !== 'undefined') {
      localStorage.removeItem('study-scriber-feature-flags')
    }
    console.log('🚩 [FeatureFlags] 已重置為預設值')
  }

  // 取得當前所有功能開關狀態
  getAll(): FeatureFlags {
    return { ...this.flags }
  }

  // 暴露到 window 供調試使用
  private exposeToWindow(): void {
    if (typeof window !== 'undefined') {
      (window as any).featureFlags = {
        enable: (flag: keyof FeatureFlags) => this.enable(flag),
        disable: (flag: keyof FeatureFlags) => this.disable(flag),
        toggle: (flag: keyof FeatureFlags) => this.toggle(flag),
        isEnabled: (flag: keyof FeatureFlags) => this.isEnabled(flag),
        getAll: () => this.getAll(),
        reset: () => this.reset(),

        // 便利方法
        enableNewState: () => this.enable('useNewStateManagement'),
        disableNewState: () => this.disable('useNewStateManagement'),
        enableAll: () => this.updateFlags({
          useNewStateManagement: true,
          useNewRecordingHook: true,
          useNewSessionHook: true,
          useNewTranscriptHook: true,
          useNewAppStateHook: true,
        }),
        disableAll: () => this.updateFlags({
          useNewStateManagement: false,
          useNewRecordingHook: false,
          useNewSessionHook: false,
          useNewTranscriptHook: false,
          useNewAppStateHook: false,
        }),
      }

      console.log('🚩 [FeatureFlags] 調試介面已暴露到 window.featureFlags')
      console.log('   使用方法: window.featureFlags.enableNewState()')
      console.log('   查看狀態: window.featureFlags.getAll()')
    }
  }
}

// 單例模式
export const featureFlagManager = new FeatureFlagManager()

// 便利函數
export const isFeatureEnabled = (flag: keyof FeatureFlags): boolean =>
  featureFlagManager.isEnabled(flag)

export const enableFeature = (flag: keyof FeatureFlags): void =>
  featureFlagManager.enable(flag)

export const disableFeature = (flag: keyof FeatureFlags): void =>
  featureFlagManager.disable(flag)


# END FILE CONTENTS


# File: frontend/lib/websocket.ts

"use client"

import { getWebSocketURL } from './api'

// WebSocket 連接狀態
export type WebSocketState = 'connecting' | 'connected' | 'disconnected' | 'error'

// 逐字稿接收介面 (與後端推送格式一致)
export interface TranscriptMessage {
  type: 'transcript_segment' | 'transcript_complete' | 'connection_established' | 'heartbeat_ack' | 'pong' | 'active' | 'error' | 'transcription_error'
  session_id?: string
  segment_id?: string
  text?: string
  message?: string  // 用於連接確認訊息或完成通知
  start_sequence?: number
  end_sequence?: number
  start_time?: number
  end_time?: number
  language?: string
  confidence?: number
  timestamp?: number
  phase?: 'waiting' | 'active'  // 新增 phase 欄位
  error_type?: string
  error_message?: string
  details?: any
}

// ACK/Missing 訊息介面
export interface AckMissingMessage {
  ack: number
  missing: number[]
}

// WebSocket 管理類別
export class WebSocketManager {
  private ws: WebSocket | null = null
  private url: string
  private reconnectAttempts = 0
  private maxReconnectAttempts = 5
  private reconnectDelay = 1000
  private isManualClose = false

  constructor(url: string) {
    this.url = url
  }

  connect(): Promise<void> {
    return new Promise((resolve, reject) => {
      try {
        this.ws = new WebSocket(this.url)
        this.isManualClose = false

        this.ws.onopen = () => {
          console.log('✅ WebSocket 連接成功:', this.url)
          this.reconnectAttempts = 0
          resolve()
        }

        this.ws.onerror = (error) => {
          console.error('❌ WebSocket 連接錯誤:', error)
          reject(error)
        }

        this.ws.onclose = (event) => {
          console.log('🔌 WebSocket 連接關閉:', event.code, event.reason)

          if (!this.isManualClose && this.reconnectAttempts < this.maxReconnectAttempts) {
            this.reconnectAttempts++
            console.log(`🔄 嘗試重新連接 (${this.reconnectAttempts}/${this.maxReconnectAttempts})`)

            setTimeout(() => {
              this.connect()
            }, this.reconnectDelay * this.reconnectAttempts)
          }
        }
      } catch (error) {
        reject(error)
      }
    })
  }

  disconnect(): void {
    this.isManualClose = true
    if (this.ws) {
      this.ws.close()
      this.ws = null
    }
  }

  send(data: string | ArrayBuffer): void {
    if (this.ws && this.ws.readyState === WebSocket.OPEN) {
      const dataInfo = data instanceof ArrayBuffer
        ? `Binary (${data.byteLength} bytes)`
        : `Text (${data.length} chars)`

      console.log('📡 [WebSocketManager] 發送資料', {
        type: dataInfo,
        url: this.url,
        readyState: this.ws.readyState,
        timestamp: new Date().toISOString()
      })

      this.ws.send(data)
    } else {
      console.warn('⚠️ WebSocket 未連接，無法發送資料', {
        url: this.url,
        readyState: this.ws?.readyState || 'null'
      })
    }
  }

  onMessage(callback: (event: MessageEvent) => void): void {
    if (this.ws) {
      this.ws.onmessage = callback
    }
  }

  onClose(callback: (event: CloseEvent) => void): void {
    if (this.ws) {
      const originalOnClose = this.ws.onclose
      const ws = this.ws // 保存引用避免 null 問題
      this.ws.onclose = (event) => {
        // 先調用新的回調
        callback(event)
        // 再調用原始的處理器
        if (originalOnClose) {
          originalOnClose.call(ws, event)
        }
      }
    }
  }

  get readyState(): number {
    return this.ws?.readyState ?? WebSocket.CLOSED
  }

  get isConnected(): boolean {
    return this.ws?.readyState === WebSocket.OPEN
  }
}

// 音檔上傳 WebSocket 管理
export class AudioUploadWebSocket extends WebSocketManager {
  private sequenceNumber = 0

  constructor(sessionId: string) {
    super(getWebSocketURL(`/ws/upload_audio/${sessionId}`))
  }

  uploadAudioChunk(audioBlob: Blob): void {
    console.log('🔊 [AudioUploadWebSocket] uploadAudioChunk 被調用', {
      sequence: this.sequenceNumber,
      blobSize: audioBlob.size,
      wsState: this.readyState,
      isConnected: this.isConnected
    })

    if (!this.isConnected) {
      console.warn('⚠️ WebSocket 未連接，無法上傳音檔')
      return
    }

    // 建立包含序號的資料包
    const sequenceBuffer = new ArrayBuffer(4)
    const sequenceView = new DataView(sequenceBuffer)
    sequenceView.setUint32(0, this.sequenceNumber, true) // little-endian

    // 合併序號和音檔資料
    audioBlob.arrayBuffer().then(audioBuffer => {
      const combinedBuffer = new ArrayBuffer(sequenceBuffer.byteLength + audioBuffer.byteLength)
      const combinedView = new Uint8Array(combinedBuffer)

      combinedView.set(new Uint8Array(sequenceBuffer), 0)
      combinedView.set(new Uint8Array(audioBuffer), sequenceBuffer.byteLength)

      console.log('🔄 [AudioUploadWebSocket] 準備發送 binary frame', {
        sequence: this.sequenceNumber,
        totalSize: combinedBuffer.byteLength,
        audioSize: audioBuffer.byteLength,
        sequenceSize: sequenceBuffer.byteLength
      })

      this.send(combinedBuffer)

      console.log(`✅ [AudioUploadWebSocket] Binary frame 已送出 #${this.sequenceNumber}`, {
        size: `${audioBlob.size} bytes`,
        totalSize: `${combinedBuffer.byteLength} bytes`,
        timestamp: new Date().toISOString()
      })

      this.sequenceNumber++
    }).catch(error => {
      console.error('❌ [AudioUploadWebSocket] 處理音頻資料失敗', {
        sequence: this.sequenceNumber,
        error: error.message || error
      })
    })
  }

  onAckMissing(callback: (data: AckMissingMessage) => void): void {
    this.onMessage((event) => {
      try {
        const message = JSON.parse(event.data)

        // 根據消息類型進行分發
        switch (message.type) {
          case 'ack_missing':
            // 確認 data.missing 存在且是陣列
            if (message.missing && Array.isArray(message.missing)) {
              callback(message as AckMissingMessage)
            } else {
              console.error('❌ 收到的 ack_missing 訊息格式不正確:', message)
            }
            break
          case 'ack':
            // 處理音檔切片確認訊息
            console.log('✅ 音檔切片確認:', message.chunk_sequence || 'unknown')
            break
          case 'heartbeat_ack':
            // 處理音檔上傳心跳確認
            console.log('💓 音檔上傳心跳確認')
            break
          case 'connection_established':
            console.log('✅ 音檔上傳 WebSocket 連接已建立')
            break
          case 'error':
            console.error('❌ 音檔上傳服務端錯誤:', message.message)
            break
          default:
            console.warn('⚠️ 收到未知的音檔上傳訊息類型:', message.type)
        }
      } catch (error) {
        console.error('❌ 解析音檔上傳服務訊息失敗:', error)
      }
    })
  }

  resetSequence(): void {
    this.sequenceNumber = 0
  }
}

// 逐字稿接收 WebSocket 管理 - 簡化版，只負責基礎連接
export class TranscriptWebSocket extends WebSocketManager {
  constructor(sessionId: string) {
    super(getWebSocketURL(`/ws/transcript_feed/${sessionId}`))
  }

  // 設定訊息處理回調
  onMessage(callback: (data: any) => void): void {
    super.onMessage((event) => {
      console.log('🔥 [TranscriptWebSocket] 原始 WebSocket 訊息:', {
        data: event.data,
        type: typeof event.data,
        length: event.data?.length,
        timestamp: new Date().toISOString()
      })

      try {
        const data = JSON.parse(event.data)
        console.log('✅ [TranscriptWebSocket] JSON 解析成功:', {
          parsedData: data,
          dataType: data.type,
          sessionId: data.session_id
        })

        console.log('🎯 [TranscriptWebSocket] 即將調用 callback')
        callback(data)
        console.log('✅ [TranscriptWebSocket] callback 調用完成')

      } catch (error) {
        console.error('❌ TranscriptWebSocket 解析訊息失敗:', {
          error: error instanceof Error ? error.message : String(error),
          rawData: event.data
        })
      }
    })
  }

  // 發送 JSON 訊息
  sendJson(message: any): void {
    if (this.isConnected) {
      this.send(JSON.stringify(message))
    }
  }
}

// WebSocket 工廠函數
export const createAudioUploadWebSocket = (sessionId: string): AudioUploadWebSocket => {
  return new AudioUploadWebSocket(sessionId)
}

export const createTranscriptWebSocket = (sessionId: string): TranscriptWebSocket => {
  return new TranscriptWebSocket(sessionId)
}


# END FILE CONTENTS


# File: frontend/lib/__tests__/segmented-audio-recorder.test.ts

import { describe, test, expect, beforeEach, vi, afterEach } from 'vitest'
import { SegmentedAudioRecorder, checkSegmentedAudioRecordingSupport } from '../segmented-audio-recorder'

// Mock navigator.mediaDevices
const mockGetUserMedia = vi.fn()
Object.defineProperty(navigator, 'mediaDevices', {
    writable: true,
    value: {
        getUserMedia: mockGetUserMedia,
    },
})

// Mock MediaRecorder
const mockStart = vi.fn()
const mockStop = vi.fn()
const mockRequestData = vi.fn()

class MockMediaRecorder {
    start = mockStart
    stop = mockStop
    requestData = mockRequestData
    state: string = 'inactive'
    ondataavailable: ((event: any) => void) | null = null
    onerror: ((event: any) => void) | null = null

    constructor(stream: any, options: any) {
        // Store for verification
    }

    static isTypeSupported = vi.fn().mockReturnValue(true)
}

Object.defineProperty(window, 'MediaRecorder', {
    writable: true,
    value: MockMediaRecorder,
})

// Mock stream
const mockTrack = { stop: vi.fn() }
const mockStream = {
    getTracks: vi.fn(() => [mockTrack])
}

describe('SegmentedAudioRecorder', () => {
    let recorder: SegmentedAudioRecorder

    beforeEach(() => {
        vi.clearAllMocks()
        mockGetUserMedia.mockResolvedValue(mockStream)

        recorder = new SegmentedAudioRecorder({
            segmentDuration: 1000,
            mimeType: 'audio/webm;codecs=opus',
            audioBitsPerSecond: 64000
        })
    })

    afterEach(() => {
        recorder.cleanup()
    })

    describe('初始化和配置', () => {
        test('應該使用預設配置創建錄音器', () => {
            const defaultRecorder = new SegmentedAudioRecorder()

            expect(defaultRecorder.currentConfig).toEqual({
                segmentDuration: 10000,
                mimeType: 'audio/webm;codecs=opus',
                audioBitsPerSecond: 64000
            })
            expect(defaultRecorder.currentState).toBe('idle')
            expect(defaultRecorder.isRecording).toBe(false)
            expect(defaultRecorder.currentSequence).toBe(0)
        })

        test('應該接受自訂配置', () => {
            const customConfig = {
                segmentDuration: 3000,
                mimeType: 'audio/webm',
                audioBitsPerSecond: 64000
            }

            const customRecorder = new SegmentedAudioRecorder(customConfig)
            expect(customRecorder.currentConfig).toEqual(customConfig)
        })

        test('應該正確設置事件回調', () => {
            const onSegment = vi.fn()
            const onError = vi.fn()
            const onStateChange = vi.fn()

            recorder.onSegment(onSegment)
            recorder.onError(onError)
            recorder.onStateChange(onStateChange)

            // 回調應該被正確設置（透過後續行為驗證）
            expect(recorder.currentState).toBe('idle')
        })
    })

    describe('音訊權限和初始化', () => {
        test('應該成功初始化音訊權限', async () => {
            await recorder.initialize()

            expect(mockGetUserMedia).toHaveBeenCalledWith({ audio: true })
        })

        test('應該處理權限被拒絕的情況', async () => {
            const error = new Error('Permission denied')
            mockGetUserMedia.mockRejectedValueOnce(error)

            const onError = vi.fn()
            recorder.onError(onError)

            await expect(recorder.initialize()).rejects.toThrow('Permission denied')
        })

        test('應該避免重複初始化', async () => {
            await recorder.initialize()
            await recorder.initialize() // 第二次調用

            expect(mockGetUserMedia).toHaveBeenCalledTimes(1)
        })
    })

    describe('錄音狀態管理', () => {
        beforeEach(async () => {
            await recorder.initialize()
        })

        test('應該正確開始錄音', async () => {
            const onSegment = vi.fn()

            await recorder.start(onSegment)

            expect(recorder.isRecording).toBe(true)
            expect(recorder.currentState).toBe('recording')
            expect(mockStart).toHaveBeenCalled()
        })

        test('應該防止重複開始錄音', async () => {
            const onSegment = vi.fn()

            await recorder.start(onSegment)

            await expect(recorder.start(onSegment)).rejects.toThrow('錄製已在進行中')
        })

        test('應該正確停止錄音', async () => {
            const onSegment = vi.fn()

            await recorder.start(onSegment)
            recorder.stop()

            expect(recorder.isRecording).toBe(false)
            expect(recorder.currentState).toBe('idle')
        })
    })

    describe('序號管理', () => {
        test('應該從 0 開始序號', () => {
            expect(recorder.currentSequence).toBe(0)
        })

        test('應該在重新開始錄音時重置序號', async () => {
            await recorder.initialize()
            const onSegment = vi.fn()

            await recorder.start(onSegment)
            recorder.stop()

            expect(recorder.currentSequence).toBe(0)
        })
    })

    describe('資源清理', () => {
        test('應該正確清理所有資源', async () => {
            await recorder.initialize()
            const onSegment = vi.fn()
            await recorder.start(onSegment)

            recorder.cleanup()

            expect(recorder.isRecording).toBe(false)
            expect(recorder.currentSequence).toBe(0)
            expect(mockTrack.stop).toHaveBeenCalled()
        })
    })
})

describe('瀏覽器支援檢查', () => {
    test('應該檢查基本瀏覽器支援', async () => {
        const result = await checkSegmentedAudioRecordingSupport()
        expect(result.isSupported).toBe(true)
    })

    test('應該檢測 MediaDevices API 不支援', async () => {
        // 使用 vi.stubGlobal 來模擬不支援的情況
        vi.stubGlobal('navigator', { ...navigator, mediaDevices: undefined })

        const result = await checkSegmentedAudioRecordingSupport()

        expect(result.isSupported).toBe(false)
        expect(result.error).toContain('不支援 MediaDevices API')

        vi.unstubAllGlobals()
    })

    test('應該檢測 MediaRecorder API 不支援', async () => {
        // 直接測試沒有 MediaRecorder 的情況
        const originalMediaRecorder = global.MediaRecorder
        delete (global as any).MediaRecorder

        const result = await checkSegmentedAudioRecordingSupport()

        expect(result.isSupported).toBe(false)
        expect(result.error).toContain('不支援 MediaRecorder API')

        // 恢復
        global.MediaRecorder = originalMediaRecorder
    })
})


# END FILE CONTENTS


# File: frontend/utils/export.ts

import { toast } from '@/hooks/use-toast'

export async function downloadZip(sid: string) {
    try {
        const res = await fetch(`/api/export/${sid}?type=zip`)
        if (!res.ok) {
            toast({ title: `Export failed: ${res.statusText}`, variant: 'destructive' })
            return
        }
        const blob = await res.blob()
        const url = window.URL.createObjectURL(blob)

        const a = document.createElement('a')
        a.href = url
        a.download = `${sid}.zip`
        a.style.display = 'none'
        document.body.appendChild(a)
        a.click()
        a.remove()
        setTimeout(() => URL.revokeObjectURL(url), 1_000)
        toast({ title: 'Export started', variant: 'default' })
    } catch (err) {
        console.error(err)
        toast({ title: 'Network error when exporting', variant: 'destructive' })
    }
}


# END FILE CONTENTS


# File: app/utils/timing.py

from app.core.config import get_settings
_CHUNK = get_settings().AUDIO_CHUNK_DURATION_SEC

def calc_times(seq: int):
    start = seq * _CHUNK
    return start, start + _CHUNK


# END FILE CONTENTS


# File: pytest.ini

[tool:pytest]
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*
addopts =
    -v
    --tb=short
    --strict-markers
    --disable-warnings
    --color=yes
    --durations=10
markers =
    asyncio: marks tests as async
    unit: marks tests as unit tests
    integration: marks tests as integration tests
    slow: marks tests as slow running
asyncio_mode = auto
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning


# END FILE CONTENTS


# File: frontend/lib/transcript-manager-new.ts

"use client"

import { TranscriptWebSocket } from './websocket'
import { useAppStore } from './app-store-zustand'
import type { TranscriptEntry } from '../types/app-state'
import {
    TranscriptSegmentMessage,
    TranscriptCompleteMessage,
    ErrorMessage,
    TranscriptionErrorMessage,
    ConnectionEstablishedMessage,
    HeartbeatAckMessage,
    PongMessage,
    PhaseMessage
} from '../types/websocket-messages'

/**
 * TranscriptManager - 型別安全的逐字稿管理器
 *
 * 重構特色：
 * ✅ 使用 TypeScript discriminated union
 * ✅ 事件驅動架構替代 handleMessage 巨型方法
 * ✅ 型別安全的事件處理器
 * ✅ 移除 WebSocketManager hack
 */
export class TranscriptManager {
    private static instance: TranscriptManager | null = null
    private connections: Map<string, TranscriptWebSocket> = new Map()
    private connectionStates: Map<string, boolean> = new Map()
    private heartbeatIntervals: Map<string, NodeJS.Timeout> = new Map()
    private reconnectAttempts: Map<string, number> = new Map()
    private maxReconnectAttempts = 5
    private heartbeatInterval = 10000 // 10秒
    private reconnectDelay = 2000 // 2秒

    private constructor() {
        // Singleton pattern
        if (typeof window !== 'undefined') {
            (window as any).transcriptManager = this
        }
    }

    static getInstance(): TranscriptManager {
        if (!TranscriptManager.instance) {
            TranscriptManager.instance = new TranscriptManager()
        }
        return TranscriptManager.instance
    }

    /* ============================================================
     * 核心連接管理
     * ============================================================ */

    async connect(sessionId: string): Promise<void> {
        console.log(`🔗 [TranscriptManager] 連接會話: ${sessionId}`)

        // 檢查是否已有連接
        if (this.connections.has(sessionId) && this.isConnected(sessionId)) {
            console.log(`✅ [TranscriptManager] 會話 ${sessionId} 已連接`)
            return
        }

        // 清理舊連接
        if (this.connections.has(sessionId)) {
            await this.disconnect(sessionId)
        }

        try {
            await this.establishConnection(sessionId)
            console.log(`✅ [TranscriptManager] 會話 ${sessionId} 連接成功`)
        } catch (error) {
            console.error(`❌ [TranscriptManager] 會話 ${sessionId} 連接失敗:`, error)
            throw error
        }
    }

    async disconnect(sessionId: string): Promise<void> {
        console.log(`📱 [TranscriptManager] 斷開會話: ${sessionId}`)

        // 停止心跳
        this.stopHeartbeat(sessionId)

        // 斷開 WebSocket
        const ws = this.connections.get(sessionId)
        if (ws) {
            ws.disconnect()
            this.connections.delete(sessionId)
        }

        // 清理狀態
        this.connectionStates.set(sessionId, false)
        this.reconnectAttempts.delete(sessionId)
    }

    /* ============================================================
     * 私有方法：連接建立和事件綁定
     * ============================================================ */

    private async establishConnection(sessionId: string): Promise<void> {
        const ws = new TranscriptWebSocket(sessionId)

        // ✅ 使用型別安全的事件綁定（移除 hack）
        this.bindWebSocketEvents(ws, sessionId)

        // 設定關閉處理
        ws.onClose((event) => {
            console.log(`🔌 [TranscriptManager] 會話 ${sessionId} 連接關閉:`, event.code, event.reason)
            this.connectionStates.set(sessionId, false)
            this.stopHeartbeat(sessionId)

            // 如果不是手動關閉，嘗試重連
            if (event.code !== 1000) {
                this.scheduleReconnect(sessionId)
            }
        })

        // 建立連接
        await ws.connect()

        // 保存連接
        this.connections.set(sessionId, ws)
        this.connectionStates.set(sessionId, true)

        // 啟動心跳和初始化
        this.sendPing(sessionId)
        this.startHeartbeat(sessionId)
    }

    private bindWebSocketEvents(ws: TranscriptWebSocket, sessionId: string): void {
        console.log(`🎯 [TranscriptManager] 綁定事件處理器: ${sessionId}`)

        // ✅ 型別安全的事件監聽器
        ws.on('transcript_segment', (msg) => this.handleTranscriptSegment(sessionId, msg))
        ws.on('connection_established', (msg) => this.handleConnectionEstablished(sessionId, msg))
        ws.on('transcript_complete', (msg) => this.handleTranscriptComplete(sessionId, msg))
        ws.on('heartbeat_ack', (msg) => this.handleHeartbeatAck(sessionId, msg))
        ws.on('pong', (msg) => this.handlePong(sessionId, msg))
        ws.on('error', (msg) => this.handleError(sessionId, msg))
        ws.on('transcription_error', (msg) => this.handleTranscriptionError(sessionId, msg))
        ws.on('phase', (msg) => this.handlePhase(sessionId, msg))
    }

    /* ============================================================
     * 型別安全的事件處理器（取代巨型 handleMessage）
     * ============================================================ */

    private handleTranscriptSegment(sessionId: string, msg: TranscriptSegmentMessage): void {
        console.log('📝 [TranscriptManager] 收到逐字稿片段:', {
            sessionId,
            text: msg.text.substring(0, 50) + '...',
            start_time: msg.start_time,
            end_time: msg.end_time,
            confidence: msg.confidence
        })

        // 轉換為 UI 格式並推送到 store
        // 使用 start_time 並轉換為 HH:MM:SS 格式
        const startTimeInSeconds = msg.start_time ?? 0
        const hours = Math.floor(startTimeInSeconds / 3600)
        const minutes = Math.floor((startTimeInSeconds % 3600) / 60)
        const seconds = Math.floor(startTimeInSeconds % 60)

        const entry: TranscriptEntry = {
            startTime: startTimeInSeconds,
            time: `${hours.toString().padStart(2, "0")}:${minutes.toString().padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`,
            text: msg.text
        }

        console.log('🎯 [TranscriptManager] 推送到 store:', entry)
        useAppStore.getState().addTranscriptEntry(entry)

        // 檢查狀態轉換
        const currentState = useAppStore.getState()
        console.log('📊 [TranscriptManager] Store 狀態:', {
            appState: currentState.appState,
            transcriptCount: currentState.transcriptEntries.length
        })
    }

    private handleConnectionEstablished(sessionId: string, msg: ConnectionEstablishedMessage): void {
        console.log('✅ [TranscriptManager] 連接已建立:', {
            sessionId,
            message: msg.message,
            timestamp: msg.timestamp
        })
    }

    private handleTranscriptComplete(sessionId: string, msg: TranscriptCompleteMessage): void {
        console.log('🎯 [TranscriptManager] 轉錄完成:', {
            sessionId,
            message: msg.message,
            timestamp: msg.timestamp
        })
        // 可以在這裡觸發完成狀態或通知
    }

    private handleHeartbeatAck(sessionId: string, msg: HeartbeatAckMessage): void {
        console.log('💓 [TranscriptManager] 心跳確認:', {
            sessionId,
            timestamp: msg.timestamp
        })
    }

    private handlePong(sessionId: string, msg: PongMessage): void {
        console.log('🏓 [TranscriptManager] Pong 回應:', {
            sessionId,
            timestamp: msg.timestamp
        })
    }

    private handleError(sessionId: string, msg: ErrorMessage): void {
        console.error('🚨 [TranscriptManager] 收到錯誤:', {
            sessionId,
            error_type: msg.error_type,
            error_message: msg.error_message,
            details: msg.details
        })
        // 可以在這裡觸發錯誤處理邏輯
    }

    private handleTranscriptionError(sessionId: string, msg: TranscriptionErrorMessage): void {
        console.error('🚨 [TranscriptManager] 轉錄錯誤:', {
            sessionId,
            error_type: msg.error_type,
            error_message: msg.error_message
        })
    }

    private handlePhase(sessionId: string, msg: PhaseMessage): void {
        console.log(`📍 [TranscriptManager] 相位變更: ${msg.phase}`, {
            sessionId,
            phase: msg.phase
        })

        // 🎯 根據 phase 更新應用狀態
        if (msg.phase === 'active') {
            console.log('✅ [TranscriptManager] 收到 active phase，切換到 recording_active')
            useAppStore.getState().setState('recording_active')
        } else if (msg.phase === 'waiting') {
            console.log('⏳ [TranscriptManager] 收到 waiting phase，保持 recording_waiting')
            useAppStore.getState().setState('recording_waiting')
        }
    }

    /* ============================================================
     * 心跳和重連機制
     * ============================================================ */

    private sendPing(sessionId: string): void {
        const ws = this.connections.get(sessionId)
        if (ws && ws.isConnected) {
            ws.sendJson({ type: 'ping' })
            console.log(`🏓 [TranscriptManager] 發送 ping: ${sessionId}`)
        }
    }

    private sendHeartbeat(sessionId: string): void {
        const ws = this.connections.get(sessionId)
        if (ws && ws.isConnected) {
            try {
                ws.sendJson({
                    type: 'heartbeat',
                    timestamp: Date.now()
                })
                console.log(`💓 [TranscriptManager] 發送心跳: ${sessionId}`)
            } catch (error) {
                console.error(`❌ [TranscriptManager] 心跳失敗 ${sessionId}:`, error)
                this.connectionStates.set(sessionId, false)
                this.scheduleReconnect(sessionId)
            }
        }
    }

    private startHeartbeat(sessionId: string): void {
        this.stopHeartbeat(sessionId)

        const interval = setInterval(() => {
            this.sendHeartbeat(sessionId)
        }, this.heartbeatInterval)

        this.heartbeatIntervals.set(sessionId, interval)
        console.log(`💓 [TranscriptManager] 啟動心跳: ${sessionId}`)
    }

    private stopHeartbeat(sessionId: string): void {
        const interval = this.heartbeatIntervals.get(sessionId)
        if (interval) {
            clearInterval(interval)
            this.heartbeatIntervals.delete(sessionId)
            console.log(`💓 [TranscriptManager] 停止心跳: ${sessionId}`)
        }
    }

    private scheduleReconnect(sessionId: string): void {
        const attempts = this.reconnectAttempts.get(sessionId) ?? 0

        if (attempts >= this.maxReconnectAttempts) {
            console.error(`❌ [TranscriptManager] 重連次數已達上限: ${sessionId}`)
            return
        }

        this.reconnectAttempts.set(sessionId, attempts + 1)
        const delay = this.reconnectDelay * Math.pow(2, attempts)

        console.log(`🔄 [TranscriptManager] 排程重連: ${sessionId} (${attempts + 1}/${this.maxReconnectAttempts}) ${delay}ms`)

        setTimeout(async () => {
            try {
                await this.establishConnection(sessionId)
                this.reconnectAttempts.set(sessionId, 0)
                console.log(`✅ [TranscriptManager] 重連成功: ${sessionId}`)
            } catch (error) {
                console.error(`❌ [TranscriptManager] 重連失敗: ${sessionId}`, error)
            }
        }, delay)
    }

    /* ============================================================
 * 向後兼容方法（支援舊的 API）
 * ============================================================ */

    /**
     * @deprecated 舊 API 兼容性 - 請使用事件驅動方式
     */
    addListener(sessionId: string, callback: (message: any) => void): void {
        console.warn('⚠️ [TranscriptManager] addListener 已棄用，請使用事件驅動方式')
        // 為了兼容性，暫時保留但不實作
    }

    /**
     * @deprecated 舊 API 兼容性 - 請使用事件驅動方式
     */
    removeListener(sessionId: string, callback: (message: any) => void): void {
        console.warn('⚠️ [TranscriptManager] removeListener 已棄用，請使用事件驅動方式')
        // 為了兼容性，暫時保留但不實作
    }

    /* ============================================================
     * 公共工具方法
     * ============================================================ */

    isConnected(sessionId: string): boolean {
        const ws = this.connections.get(sessionId)
        const actualConnected = ws?.isConnected ?? false

        // 同步狀態
        const stateConnected = this.connectionStates.get(sessionId) ?? false
        if (stateConnected !== actualConnected) {
            this.connectionStates.set(sessionId, actualConnected)
        }

        return actualConnected
    }

    getConnectionCount(): number {
        return Array.from(this.connections.values()).filter(ws => ws.isConnected).length
    }

    async disconnectAll(): Promise<void> {
        console.log('📱 [TranscriptManager] 清理所有連接')
        const sessionIds = Array.from(this.connections.keys())
        await Promise.all(sessionIds.map(sessionId => this.disconnect(sessionId)))
    }
}

// 匯出 Singleton 實例
export const transcriptManager = TranscriptManager.getInstance()


# END FILE CONTENTS


# File: frontend/lib/__tests__/initial-state-loader.test.ts

import { beforeEach, describe, expect, test, vi } from 'vitest'
import { InitialStateLoader } from '../initial-state-loader'
import type { AppData } from '../../types/app-state'

// Mock localStorage
const localStorageMock = {
    getItem: vi.fn(),
    setItem: vi.fn(),
    removeItem: vi.fn(),
    clear: vi.fn(),
}

// 在測試環境中設置 localStorage mock
Object.defineProperty(window, 'localStorage', {
    value: localStorageMock
})

describe('InitialStateLoader', () => {
    beforeEach(() => {
        vi.clearAllMocks()
        localStorageMock.getItem.mockReturnValue(null)
    })

    describe('loadInitialAppData', () => {
        test('應該返回預設狀態當沒有持久化資料時', () => {
            const result = InitialStateLoader.loadInitialAppData()

            expect(result).toEqual({
                state: 'default',
                transcriptEntries: [],
                editorContent: '',
                isRecording: false,
                recordingTime: 0,
                session: null,
            })
        })

        test('應該載入草稿筆記內容', () => {
            localStorageMock.getItem.mockImplementation((key) => {
                if (key === 'draft_note') return '測試草稿內容'
                return null
            })

            const result = InitialStateLoader.loadInitialAppData()

            expect(result.editorContent).toBe('測試草稿內容')
            expect(localStorageMock.getItem).toHaveBeenCalledWith('draft_note')
        })

        test('應該載入上次會話資訊', () => {
            const mockSession = {
                id: 'test-session-id',
                status: 'active',
                type: 'recording'
            }

            localStorageMock.getItem.mockImplementation((key) => {
                if (key === 'last_session') return JSON.stringify(mockSession)
                return null
            })

            const result = InitialStateLoader.loadInitialAppData()

            expect(result.session).toEqual(mockSession)
            expect(localStorageMock.getItem).toHaveBeenCalledWith('last_session')
        })

        test('應該忽略已完成的會話', () => {
            const completedSession = {
                id: 'test-session-id',
                status: 'completed',
                type: 'recording'
            }

            localStorageMock.getItem.mockImplementation((key) => {
                if (key === 'last_session') return JSON.stringify(completedSession)
                return null
            })

            const result = InitialStateLoader.loadInitialAppData()

            expect(result.session).toBeNull()
        })

        test('應該載入完整的應用狀態', () => {
            const mockAppState = {
                state: 'recording_active',
                transcriptEntries: [
                    { time: '00:01', text: '測試逐字稿' }
                ]
            }

            localStorageMock.getItem.mockImplementation((key) => {
                if (key === 'app_state_v1') return JSON.stringify(mockAppState)
                return null
            })

            const result = InitialStateLoader.loadInitialAppData()

            expect(result.state).toBe('recording_active')
            expect(result.transcriptEntries).toEqual(mockAppState.transcriptEntries)
        })

        test('應該處理無效的 JSON 資料', () => {
            localStorageMock.getItem.mockImplementation((key) => {
                if (key === 'last_session') return 'invalid json'
                return null
            })

            const result = InitialStateLoader.loadInitialAppData()

            // 應該返回預設狀態而不是拋出錯誤
            expect(result.session).toBeNull()
        })
    })

    describe('saveAppState', () => {
        test('應該儲存應用狀態到 localStorage', () => {
            const mockAppData: AppData = {
                state: 'recording_active',
                transcriptEntries: [{ time: '00:01', text: '測試' }],
                editorContent: '測試內容',
                isRecording: true,
                recordingTime: 30,
                session: {
                    id: 'test-session',
                    status: 'active',
                    type: 'recording'
                }
            }

            InitialStateLoader.saveAppState(mockAppData)

            expect(localStorageMock.setItem).toHaveBeenCalledWith(
                'app_state_v1',
                JSON.stringify({
                    state: 'recording_active',
                    transcriptEntries: [{ time: '00:01', text: '測試' }]
                })
            )

            expect(localStorageMock.setItem).toHaveBeenCalledWith(
                'last_session',
                JSON.stringify(mockAppData.session)
            )
        })

        test('應該移除會話資訊當 session 為 null', () => {
            const mockAppData: AppData = {
                state: 'default',
                transcriptEntries: [],
                editorContent: '',
                isRecording: false,
                recordingTime: 0,
                session: null
            }

            InitialStateLoader.saveAppState(mockAppData)

            expect(localStorageMock.removeItem).toHaveBeenCalledWith('last_session')
        })
    })

    describe('clearPersistedState', () => {
        test('應該清除持久化狀態', () => {
            InitialStateLoader.clearPersistedState()

            expect(localStorageMock.removeItem).toHaveBeenCalledWith('app_state_v1')
            expect(localStorageMock.removeItem).toHaveBeenCalledWith('last_session')
            // 不應該清除 draft_note
            expect(localStorageMock.removeItem).not.toHaveBeenCalledWith('draft_note')
        })
    })

    describe('hasPersistedState', () => {
        test('當有持久化狀態時應該返回 true', () => {
            localStorageMock.getItem.mockImplementation((key) => {
                if (key === 'app_state_v1') return '{"state":"default"}'
                return null
            })

            expect(InitialStateLoader.hasPersistedState()).toBe(true)
        })

        test('當沒有持久化狀態時應該返回 false', () => {
            expect(InitialStateLoader.hasPersistedState()).toBe(false)
        })

        test('當有會話資訊時應該返回 true', () => {
            localStorageMock.getItem.mockImplementation((key) => {
                if (key === 'last_session') return '{"id":"test"}'
                return null
            })

            expect(InitialStateLoader.hasPersistedState()).toBe(true)
        })
    })
})


# END FILE CONTENTS


# File: app/ws/upload_audio.py

"""
WebSocket 音檔上傳服務

實作音檔切片即時上傳、重傳機制與 Cloudflare R2 整合
"""

import json
import logging
import asyncio
import struct
from typing import Dict, Set, Optional, List
from uuid import UUID
from datetime import datetime, timedelta

from fastapi import APIRouter, WebSocket, WebSocketDisconnect, WebSocketException, status, Path, Depends
from supabase import Client
from fastapi import HTTPException
from app.core.container import container
from app.services.stt.factory import get_provider
from ..db.database import get_supabase_client
from ..services.r2_client import get_r2_client, R2ClientError

logger = logging.getLogger(__name__)

router = APIRouter()

class AudioUploadManager:
    """音檔上傳管理器"""

    def __init__(self, websocket: WebSocket, session_id: UUID, supabase_client: Client):
        self.websocket = websocket
        self.session_id = session_id
        self.supabase_client = supabase_client
        self.r2_client = get_r2_client()

        # 狀態管理
        self.is_connected = False
        self.received_chunks: Set[int] = set()  # 已收到的切片序號
        self.last_heartbeat = datetime.utcnow()
        self.upload_tasks: Dict[int, asyncio.Task] = {}  # 上傳任務追蹤

        # 設定
        self.heartbeat_interval = 30  # 心跳間隔（秒）
        self.chunk_timeout = 10  # 切片處理超時（秒）
        self.max_pending_uploads = 5  # 最大並行上傳數

    async def _initialize_received_chunks(self):
        """從資料庫初始化已收到的切片集合"""
        try:
            response = self.supabase_client.table("audio_files").select("chunk_sequence").eq("session_id", str(self.session_id)).execute()
            if response.data:
                self.received_chunks = {item['chunk_sequence'] for item in response.data}
                logger.info(f"從資料庫恢復 {len(self.received_chunks)} 個已存在的切片記錄 for session {self.session_id}")
        except Exception as e:
            logger.error(f"從資料庫初始化 received_chunks 失敗: {e}")
            # 即使初始化失敗，也繼續執行，但使用空的集合
            self.received_chunks = set()

    async def handle_connection(self):
        """處理 WebSocket 連接"""
        logger.info("<<<<< RUNNING UPLOAD_AUDIO.PY CODE (v5) >>>>>")
        try:
            # 接受連接
            await self.websocket.accept()
            self.is_connected = True
            logger.info(f"WebSocket 連接建立: session_id={self.session_id}")

            # 從資料庫加載已有的切片，以處理重連情況
            await self._initialize_received_chunks()

            # 驗證會話狀態
            if not await self._validate_session():
                await self._send_error("Invalid session or session not in recording mode")
                return

            # 發送連接確認
            await self._send_message({
                "type": "connection_established",
                "session_id": str(self.session_id),
                "timestamp": datetime.utcnow().isoformat()
            })

            # 啟動心跳檢測
            heartbeat_task = asyncio.create_task(self._heartbeat_monitor())

            try:
                # 主要消息處理循環
                await self._message_loop()
            finally:
                # 清理資源
                heartbeat_task.cancel()
                await self._cleanup()

        except WebSocketDisconnect:
            logger.info(f"WebSocket 連接斷開: session_id={self.session_id}")
        except Exception as e:
            logger.error(f"WebSocket 處理異常: {e}")
            await self._send_error(f"Connection error: {str(e)}")
        finally:
            self.is_connected = False

    async def _validate_session(self) -> bool:
        """驗證會話存在且處於錄音模式"""
        try:
            response = self.supabase_client.table("sessions").select("*").eq("id", str(self.session_id)).single().execute()

            if not response.data:
                logger.warning(f"會話不存在: {self.session_id}")
                return False

            session = response.data

            if session.get('status') != 'active':
                logger.warning(f"會話非活躍狀態: {self.session_id}, status={session.get('status')}")
                return False

            if session.get('type') != 'recording':
                logger.warning(f"會話非錄音模式: {self.session_id}, type={session.get('type')}")
                return False

            return True
        except Exception as e:
            logger.error(f"會話驗證時發生異常: {self.session_id}, error: {e}")
            return False

    async def _message_loop(self):
        """主要消息處理循環"""
        while self.is_connected:
            try:
                # 接收消息（二進制或文本）
                data = await self.websocket.receive()

                if "bytes" in data:
                    # 處理二進制音檔切片
                    await self._handle_audio_chunk(data["bytes"])
                elif "text" in data:
                    # 處理文本消息（心跳、控制指令等）
                    await self._handle_text_message(data["text"])

            except WebSocketDisconnect:
                # Case 1: 客戶端正常、乾淨地關閉連接
                logger.info("WebSocket gracefully disconnected by client.")
                self.is_connected = False # 確保迴圈終止
                break # 乾淨地退出迴圈

            except RuntimeError as e:
                # Case 2: 連接意外中斷，導致 receive() 失敗
                # 注意：這裡的 "receive" 必須是雙引號，才能匹配異常消息
                if 'Cannot call "receive" once a disconnect message has been received' in str(e):
                    logger.info(f"WebSocket connection closed (RuntimeError on receive), breaking loop: {e}")
                    self.is_connected = False # 確保迴圈終止
                    break # 乾淨地退出迴圈
                else:
                    # 處理其他類型的 RuntimeError
                    logger.error(f"An unexpected runtime error occurred in message loop: {e}", exc_info=True)
                    await self._send_error(f"Message processing runtime error: {str(e)}")
                    # 即使發送錯誤，也要中斷迴圈
                    self.is_connected = False
                    break

            except Exception as e:
                # Case 3: 處理所有其他未預期的錯誤
                logger.error(f"An unexpected error occurred in message loop: {e}", exc_info=True)
                await self._send_error(f"Message processing error: {str(e)}")
                # 發生未知錯誤後也中斷迴圈，避免無限循環
                self.is_connected = False
                break

    async def _handle_audio_chunk(self, chunk_data: bytes):
        """處理音檔切片數據"""
        try:
            # 解析切片格式：4字節序號 + 音檔數據
            if len(chunk_data) < 4:
                await self._send_error("Invalid chunk format: too short")
                return

            # 解包序號（小端序 unsigned int）
            chunk_sequence = struct.unpack('<I', chunk_data[:4])[0]
            audio_data = chunk_data[4:]

            if len(audio_data) == 0:
                await self._send_error(f"Empty audio data for chunk {chunk_sequence}")
                return

            logger.debug(f"收到音檔切片: seq={chunk_sequence}, size={len(audio_data)}")

            # 檢查是否為重複切片
            if chunk_sequence in self.received_chunks:
                logger.debug(f"忽略重複切片: seq={chunk_sequence}")
                await self._send_ack(chunk_sequence)
                return

            # 記錄已收到的切片
            self.received_chunks.add(chunk_sequence)

            # 限制並行上傳數量
            if len(self.upload_tasks) >= self.max_pending_uploads:
                # 等待最舊的上傳完成
                oldest_task = min(self.upload_tasks.values(), key=lambda t: t.get_name())
                await oldest_task

            # 非同步上傳到 R2
            upload_task = asyncio.create_task(
                self._upload_chunk_to_r2(chunk_sequence, audio_data)
            )
            self.upload_tasks[chunk_sequence] = upload_task

        except Exception as e:
            logger.error(f"音檔切片處理失敗: {e}")
            await self._send_error(f"Chunk processing error: {str(e)}")

    async def _upload_chunk_to_r2(self, chunk_sequence: int, audio_data: bytes):
        """上傳音檔切片到 R2 並觸發轉錄"""
        try:
            result = await self.r2_client.store_chunk_blob(
                session_id=self.session_id,
                chunk_sequence=chunk_sequence,
                blob_data=audio_data,
                supabase_client=self.supabase_client
            )

            if result['success']:
                # 上傳成功，發送 ACK
                await self._send_ack(chunk_sequence)
                logger.debug(f"切片上傳成功: seq={chunk_sequence}, size={len(audio_data)}")

                # 轉錄呼叫
                provider = get_provider(self.session_id)
                logger.info(f"🎯 [WS轉錄] 開始轉錄 seq={chunk_sequence} (provider={provider.name()})")
                result = await provider.transcribe(audio_data, self.session_id, chunk_sequence)
                if result:
                    logger.info(f"✅ [WS轉錄] seq={chunk_sequence} 轉錄成功")
                    # TODO: 後續儲存/推播 result
                else:
                    logger.warning(f"⚠️ [WS轉錄] seq={chunk_sequence} 轉錄失敗")
            else:
                # 上傳失敗
                error_message = result.get('error', 'Unknown R2 upload error')
                await self._send_upload_error(chunk_sequence, error_message)
                # 從 received_chunks 移除，允許重試
                self.received_chunks.discard(chunk_sequence)
                logger.error(f"切片上傳失敗: seq={chunk_sequence}, error={error_message}")

        except Exception as e:
            logger.error(f"上傳到 R2 失敗: seq={chunk_sequence}, error: {e}")
            await self._send_upload_error(chunk_sequence, str(e))
            # 從 received_chunks 移除，允許重試
            self.received_chunks.discard(chunk_sequence)
        finally:
            # 清理追蹤字典中的任務
            self.upload_tasks.pop(chunk_sequence, None)

    async def _handle_text_message(self, message_text: str):
        """處理文本消息"""
        try:
            message = json.loads(message_text)
            msg_type = message.get("type")

            if msg_type == "heartbeat":
                # 更新心跳時間
                self.last_heartbeat = datetime.utcnow()
                await self._send_message({"type": "heartbeat_ack"})

            elif msg_type == "request_missing":
                # 客戶端請求缺失切片列表
                await self._send_missing_chunks()

            elif msg_type == "upload_complete":
                # 客戶端表示上傳完成
                await self._handle_upload_complete()

            else:
                logger.warning(f"未知消息類型: {msg_type}")

        except json.JSONDecodeError:
            logger.error(f"JSON 解析失敗: {message_text}")
            await self._send_error("Invalid JSON message")
        except Exception as e:
            logger.error(f"文本消息處理失敗: {e}")
            await self._send_error(f"Text message error: {str(e)}")

    async def _send_ack(self, chunk_sequence: int):
        """發送切片確認"""
        await self._send_message({
            "type": "ack",
            "chunk_sequence": chunk_sequence,
            "timestamp": datetime.utcnow().isoformat()
        })

    async def _send_upload_error(self, chunk_sequence: int, error_msg: str):
        """發送上傳錯誤"""
        await self._send_message({
            "type": "upload_error",
            "chunk_sequence": chunk_sequence,
            "error": error_msg,
            "timestamp": datetime.utcnow().isoformat()
        })

    async def _send_missing_chunks(self):
        """發送缺失切片列表（實作重傳機制）"""
        # 這裡可以實作更複雜的缺失檢測邏輯
        # 目前簡單返回已收到的切片列表
        await self._send_message({
            "type": "chunk_status",
            "received_chunks": sorted(list(self.received_chunks)),
            "total_received": len(self.received_chunks),
            "timestamp": datetime.utcnow().isoformat()
        })

    async def _handle_upload_complete(self):
        """處理上傳完成"""
        # 等待所有進行中的上傳完成
        if self.upload_tasks:
            logger.info(f"等待 {len(self.upload_tasks)} 個上傳任務完成")
            await asyncio.gather(*self.upload_tasks.values(), return_exceptions=True)

        # 向客戶端確認全部切片已接收
        await self._send_message({
            "type": "all_chunks_received"
        })
        await self._send_message({
            "type": "upload_complete_ack",
            "total_chunks": len(self.received_chunks),
            "timestamp": datetime.utcnow().isoformat()
        })

        logger.info(f"音檔上傳完成: session_id={self.session_id}, chunks={len(self.received_chunks)}")

    async def _heartbeat_monitor(self):
        """心跳監控器，超時則關閉連接"""
        while self.is_connected:
            await asyncio.sleep(self.heartbeat_interval)
            if datetime.utcnow() - self.last_heartbeat > timedelta(seconds=self.heartbeat_interval * 2):
                logger.warning(f"心跳超時，關閉連接: session_id={self.session_id}")
                await self._send_error("Heartbeat timeout")
                await self.websocket.close(code=status.WS_1008_POLICY_VIOLATION)
                break

    async def _send_message(self, message: dict):
        """安全地發送消息（即使 is_connected 為 False 亦嘗試傳送，便於單元測試驗證）"""
        try:
            await self.websocket.send_text(json.dumps(message))
        except (WebSocketDisconnect, RuntimeError) as e:
            logger.warning(f"發送消息失敗，連接可能已關閉: {e}")
            self.is_connected = False  # 標記為已斷開

    async def _send_error(self, error_msg: str):
        """安全地發送錯誤消息"""
        logger.error(f"WebSocket 錯誤發送至客戶端: {error_msg}")
        await self._send_message({
            "type": "error",
            "message": error_msg
        })

    async def _cleanup(self):
        """清理資源，例如等待中的上傳任務"""
        if self.upload_tasks:
            logger.info(f"等待 {len(self.upload_tasks)} 個上傳任務完成...")
            await asyncio.gather(*self.upload_tasks.values())
        logger.info(f"清理完成: session_id={self.session_id}")


@router.websocket("/ws/upload_audio/{session_id}")
async def websocket_endpoint(
    websocket: WebSocket,
    session_id: UUID = Path(...),
    supabase_client: Client = Depends(get_supabase_client)
):
    """
    WebSocket 端點：處理音檔上傳

    - B-005: 建立 WebSocket 端點
    - B-012: 實作 ACK/Missing 重傳機制
    - 整合 Cloudflare R2 上傳與 Azure OpenAI 轉錄
    """
    manager = AudioUploadManager(websocket, session_id, supabase_client)
    await manager.handle_connection()


def handle_ack_missing(received_chunks: Set[int], expected_total: Optional[int] = None) -> dict:
    """
    根據已收到的切片列表，產生 ack/missing 報告 (B-012)

    Args:
        received_chunks: 已收到的切片序號集合
        expected_total: 預期的總切片數（可選）

    Returns:
        dict: ACK/Missing 狀態響應
    """
    if not received_chunks:
        return {
            "type": "status",
            "received_count": 0,
            "missing_chunks": [],
            "status": "waiting"
        }

    # 計算缺失的切片
    min_chunk = min(received_chunks)
    max_chunk = max(received_chunks)

    # 如果有指定總數，使用總數；否則基於最大序號推測
    total_expected = expected_total or (max_chunk + 1)

    expected_chunks = set(range(total_expected))
    missing_chunks = sorted(list(expected_chunks - received_chunks))

    return {
        "type": "status",
        "received_count": len(received_chunks),
        "expected_total": total_expected,
        "missing_chunks": missing_chunks,
        "status": "complete" if not missing_chunks else "incomplete"
    }


# END FILE CONTENTS


# File: frontend/package.json

{
  "name": "my-v0-project",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "build": "next build",
    "dev": "next dev",
    "lint": "next lint",
    "start": "next start",
    "test": "vitest",
    "test:ui": "vitest --ui",
    "test:run": "vitest run",
    "e2e": "playwright test"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.9.1",
    "@radix-ui/react-accordion": "1.2.2",
    "@radix-ui/react-alert-dialog": "1.1.4",
    "@radix-ui/react-aspect-ratio": "1.1.1",
    "@radix-ui/react-avatar": "1.1.2",
    "@radix-ui/react-checkbox": "1.1.3",
    "@radix-ui/react-collapsible": "1.1.2",
    "@radix-ui/react-context-menu": "2.2.4",
    "@radix-ui/react-dialog": "1.1.4",
    "@radix-ui/react-dropdown-menu": "2.1.4",
    "@radix-ui/react-hover-card": "1.1.4",
    "@radix-ui/react-label": "2.1.1",
    "@radix-ui/react-menubar": "1.1.4",
    "@radix-ui/react-navigation-menu": "1.2.3",
    "@radix-ui/react-popover": "1.1.4",
    "@radix-ui/react-progress": "1.1.1",
    "@radix-ui/react-radio-group": "1.2.2",
    "@radix-ui/react-scroll-area": "1.2.2",
    "@radix-ui/react-select": "2.1.4",
    "@radix-ui/react-separator": "1.1.1",
    "@radix-ui/react-slider": "1.2.2",
    "@radix-ui/react-slot": "1.1.1",
    "@radix-ui/react-switch": "1.1.2",
    "@radix-ui/react-tabs": "1.1.2",
    "@radix-ui/react-toast": "1.2.4",
    "@radix-ui/react-toggle": "1.1.1",
    "@radix-ui/react-toggle-group": "1.1.1",
    "@radix-ui/react-tooltip": "1.1.6",
    "axios": "^1.10.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "1.0.4",
    "date-fns": "4.1.0",
    "easymde": "latest",
    "embla-carousel-react": "8.5.1",
    "input-otp": "1.4.1",
    "lucide-react": "^0.454.0",
    "next": "15.2.4",
    "next-themes": "^0.4.4",
    "react": "^19",
    "react-day-picker": "8.10.1",
    "react-dom": "^19",
    "react-hook-form": "^7.54.1",
    "react-resizable-panels": "^2.1.7",
    "react-simplemde-editor": "latest",
    "recharts": "2.15.0",
    "sonner": "^1.7.1",
    "tailwind-merge": "^2.5.5",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^0.9.6",
    "zod": "^3.24.1",
    "zustand": "^5.0.6"
  },
  "devDependencies": {
    "@playwright/test": "^1.44.1",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.3.0",
    "@testing-library/user-event": "^14.6.1",
    "@types/node": "^22",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "@vitejs/plugin-react": "^4.6.0",
    "@vitest/ui": "^3.2.4",
    "autoprefixer": "^10.4.20",
    "eslint": "^9",
    "eslint-config-next": "15.3.4",
    "jsdom": "^26.1.0",
    "postcss": "^8.5.0",
    "tailwindcss": "^3.4.17",
    "typescript": "^5",
    "vitest": "^3.2.4"
  },
  "packageManager": "pnpm@10.7.0+sha1.66453f13fbf9078d3db193718206a8d738afdbdb"
}


# END FILE CONTENTS


# File: app/services/stt/__init__.py

from .interfaces import ISTTProvider           # 對外暴露
__all__ = ["ISTTProvider"]


# END FILE CONTENTS


# File: frontend/hooks/use-session.test.ts

// @ts-expect-error: jest types for test runner
import '@types/jest'
import '@testing-library/jest-dom'
import { renderHook, act } from '@testing-library/react'
import { useSession } from './use-session'

jest.mock('../lib/api', () => ({
    sessionAPI: {
        getSession: jest.fn(),
    },
}))

const { sessionAPI } = require('../lib/api')

describe('useSession - waitUntilCompleted', () => {
    beforeEach(() => {
        jest.clearAllMocks()
    })

    it('should resolve true immediately if session is completed', async () => {
        sessionAPI.getSession.mockResolvedValue({ status: 'completed' })
        const { result } = renderHook(() => useSession())
        await act(async () => {
            const ok = await result.current.waitUntilCompleted('sid', 1000)
            expect(ok).toBe(true)
        })
        expect(sessionAPI.getSession).toHaveBeenCalledTimes(1)
    })

    it('should poll until completed then resolve true', async () => {
        const states = [
            { status: 'processing' },
            { status: 'processing' },
            { status: 'completed' },
        ]
        let call = 0
        sessionAPI.getSession.mockImplementation(() => Promise.resolve(states[call++]))
        const { result } = renderHook(() => useSession())
        await act(async () => {
            const ok = await result.current.waitUntilCompleted('sid', 2000)
            expect(ok).toBe(true)
        })
        expect(sessionAPI.getSession).toHaveBeenCalledTimes(3)
    })

    it('should return false if timeout before completed', async () => {
        sessionAPI.getSession.mockResolvedValue({ status: 'processing' })
        const { result } = renderHook(() => useSession())
        await act(async () => {
            const ok = await result.current.waitUntilCompleted('sid', 1600)
            expect(ok).toBe(false)
        })
        // 1600ms / 1500ms = 2 次
        expect(sessionAPI.getSession).toHaveBeenCalledTimes(2)
    })

    it('should ignore 404 and retry until timeout', async () => {
        const error = { response: { status: 404 }, isAxiosError: true }
        sessionAPI.getSession.mockRejectedValue(error)
        const { result } = renderHook(() => useSession())
        await act(async () => {
            const ok = await result.current.waitUntilCompleted('sid', 1600)
            expect(ok).toBe(false)
        })
        expect(sessionAPI.getSession).toHaveBeenCalledTimes(2)
    })

    it('should throw on non-404 error', async () => {
        const error = { response: { status: 500 }, isAxiosError: true }
        sessionAPI.getSession.mockRejectedValue(error)
        const { result } = renderHook(() => useSession())
        await expect(result.current.waitUntilCompleted('sid', 1000)).rejects.toEqual(error)
    })
})


# END FILE CONTENTS


# File: frontend/lib/services/__tests__/simple-recording-service.test.ts

import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest'
import { SimpleRecordingService } from '../simple-recording-service'

// Mock AdvancedAudioRecorder
vi.mock('../../advanced-audio-recorder', () => ({
    AdvancedAudioRecorder: vi.fn().mockImplementation(() => ({
        start: vi.fn(),
        stop: vi.fn(),
        cleanup: vi.fn(),
        onSegment: vi.fn(),
        onError: vi.fn(),
    }))
}))

// Mock RestAudioUploader
vi.mock('../rest-audio-uploader', () => ({
    RestAudioUploader: vi.fn().mockImplementation(() => ({
        uploadSegment: vi.fn(),
        retryFailedSegments: vi.fn(),
        getCachedSegmentsCount: vi.fn(),
        cleanup: vi.fn(),
        onUploadSuccess: vi.fn(),
        onUploadError: vi.fn(),
        onCacheStored: vi.fn(),
    }))
}))

describe('SimpleRecordingService', () => {
    let service: SimpleRecordingService
    let mockStream: MediaStream
    let origGetUserMedia: any

    beforeEach(() => {
        service = new SimpleRecordingService()
        mockStream = { getTracks: vi.fn() } as any
        origGetUserMedia = navigator.mediaDevices.getUserMedia
        navigator.mediaDevices.getUserMedia = vi.fn().mockResolvedValue(mockStream)
    })

    afterEach(() => {
        vi.restoreAllMocks()
        navigator.mediaDevices.getUserMedia = origGetUserMedia
    })

    it('應該正確初始化 audioRecorder 與 audioUploader 並開始錄音', async () => {
        await service.startRecording('test-session')
        // audioRecorder, audioUploader 應被建立
        expect(service['audioRecorder']).toBeDefined()
        expect(service['audioUploader']).toBeDefined()
        expect(service['recordingState'].isRecording).toBe(true)
    })

    it('應該處理麥克風權限不足', async () => {
        navigator.mediaDevices.getUserMedia = vi.fn().mockRejectedValue(new Error('Permission denied'))
        await expect(service.startRecording('fail-session')).rejects.toThrow('Permission denied')
        expect(service['audioRecorder']).toBeNull()
        expect(service['audioUploader']).toBeNull()
        expect(service['recordingState'].isRecording).toBe(false)
        expect(service['recordingState'].error).toMatch(/Permission denied/)
    })

    it('應該處理初始化失敗', async () => {
        // 模擬 stream 存在但 initMediaRecorder 失敗
        service['stream'] = mockStream
        service['sessionId'] = 'fail-session'
        // 強制讓 initMediaRecorder 拋出錯誤
        service['initMediaRecorder'] = vi.fn().mockImplementation(() => { throw new Error('Init failed') })
        await expect(service.startRecording('fail-session')).rejects.toThrow('Init failed')
        expect(service['audioRecorder']).toBeNull()
        expect(service['audioUploader']).toBeNull()
        expect(service['recordingState'].isRecording).toBe(false)
        expect(service['recordingState'].error).toMatch(/Init failed/)
    })

    it('應該處理重複啟動錄音', async () => {
        await service.startRecording('session-1')
        // 再次啟動錄音
        service['stopRecording'] = vi.fn().mockResolvedValue(undefined)
        await service.startRecording('session-2')
        expect(service['stopRecording']).toHaveBeenCalled()
        expect(service['audioRecorder']).toBeDefined()
        expect(service['audioUploader']).toBeDefined()
        expect(service['recordingState'].isRecording).toBe(true)
        expect(service['recordingState'].currentSessionId).toBe('session-2')
    })
})


# END FILE CONTENTS


# File: frontend/lib/services/interfaces.ts

"use client"

import type { SessionResponse, STTProvider } from '../api'
import type { BaseService } from './base-service'

/**
 * 服務層介面定義
 *
 * 提供統一的服務契約，確保類型安全和一致性
 */

/**
 * 錄音流程啟動結果
 *
 * RecordingFlowService.startRecordingFlow() 的返回類型
 * 成功時直接返回 SessionResponse，失敗時拋出 Error
 */
export type StartRecordingResult = SessionResponse

/**
 * 會話管理服務介面
 */
export interface ISessionService {
  /**
   * 確保錄音會話存在 - 優雅處理會話衝突
   *
   * 策略：
   * 1. 優先嘗試創建新的錄音會話
   * 2. 若遇到 409 衝突，改為獲取現有活躍會話
   * 3. 確保返回可用的錄音會話
   */
  ensureRecordingSession(title?: string, content?: string, startTs?: number, sttProvider?: STTProvider): Promise<SessionResponse>

  /**
   * 創建錄音會話
   */
  createRecordingSession(title?: string, content?: string, startTs?: number, sttProvider?: STTProvider): Promise<SessionResponse>

  /**
   * 創建純筆記會話
   */
  createNoteSession(title?: string, content?: string): Promise<SessionResponse>

  /**
   * 升級會話至錄音模式
   */
  upgradeToRecording(sessionId: string): Promise<SessionResponse>

  /**
   * 完成會話
   */
  finishSession(sessionId: string): Promise<void>

  /**
   * 檢查活躍會話
   */
  checkActiveSession(): Promise<SessionResponse | null>

  /**
   * 等待會話在資料庫中完全可見
   */
  waitForSessionReady(sessionId: string, maxWaitTime?: number): Promise<boolean>

  /**
   * 刪除會話
   */
  deleteSession(sessionId: string): Promise<void>
}

/**
 * 錄音狀態
 */
export interface RecordingState {
  isRecording: boolean
  recordingTime: number
  currentSessionId: string | null
  error: string | null
}

/**
 * 錄音服務介面
 */
export interface IRecordingService extends BaseService {
  /**
   * 開始錄音
   */
  startRecording(sessionId: string): Promise<void>

  /**
   * 停止錄音
   */
  stopRecording(): Promise<void>

  /**
   * 取得當前錄音狀態
   */
  getRecordingState(): RecordingState

  /**
   * 檢查是否正在錄音
   */
  isRecording(): boolean

  /**
   * 取得錄音時間（秒）
   */
  getRecordingTime(): number

  /**
   * 請求錄音權限
   */
  requestPermission(): Promise<boolean>
}

/**
 * 逐字稿訊息類型
 */
export interface TranscriptMessage {
  type: string
  text?: string
  start_time?: number
  end_time?: number
  chunk_sequence?: number
  start_sequence?: number
  confidence?: number
  timestamp?: number
  phase?: string
  message?: string
  error_type?: string
  error_message?: string
  details?: any
}

/**
 * 逐字稿項目
 */
export interface TranscriptEntry {
  startTime?: number
  time: string
  text: string
}

/**
 * 逐字稿服務介面
 */
export interface ITranscriptService {
  /**
   * 連接逐字稿服務
   */
  connect(sessionId: string): Promise<void>

  /**
   * 斷開逐字稿服務
   */
  disconnect(sessionId?: string): Promise<void>

  /**
   * 添加逐字稿監聽器
   */
  addTranscriptListener(sessionId: string, callback: (message: TranscriptMessage) => void): void

  /**
   * 移除逐字稿監聽器
   */
  removeTranscriptListener(sessionId: string, callback: (message: TranscriptMessage) => void): void

  /**
   * 檢查連接狀態
   */
  isConnected(sessionId: string): boolean

  /**
   * 清除逐字稿
   */
  clearTranscripts(sessionId: string): void

  /**
   * 開始錄音
   */
  start(sessionId: string): Promise<void>
}

/**
 * 服務容器介面
 */
export interface IServiceContainer {
  /**
   * 註冊服務
   */
  register<T>(key: string, factory: () => T): void

  /**
   * 註冊單例服務
   */
  registerSingleton<T>(key: string, factory: () => T): void

  /**
   * 解析服務
   */
  resolve<T>(key: string): T

  /**
   * 檢查服務是否已註冊
   */
  isRegistered(key: string): boolean

  /**
   * 取得已註冊的服務清單
   */
  getRegisteredServices(): string[]
}

/**
 * 服務註冊鍵值常數
 * 避免字串拼寫錯誤，提供類型安全的服務鍵值
 */
export const SERVICE_KEYS = {
  SESSION_SERVICE: 'SessionService',
  RECORDING_SERVICE: 'RecordingService',
  TRANSCRIPT_SERVICE: 'TranscriptService',
  RECORDING_FLOW_SERVICE: 'RecordingFlowService'
} as const

/**
 * 服務鍵值類型
 */
export type ServiceKey = typeof SERVICE_KEYS[keyof typeof SERVICE_KEYS]

/**
 * 匯出服務類型映射
 * 提供編譯時類型檢查
 */
export interface ServiceTypeMap {
  [SERVICE_KEYS.SESSION_SERVICE]: ISessionService
  [SERVICE_KEYS.RECORDING_SERVICE]: IRecordingService
  [SERVICE_KEYS.TRANSCRIPT_SERVICE]: ITranscriptService
}


# END FILE CONTENTS


# File: app/db/database.py

"""
StudyScriber Supabase 資料庫連接配置

專為 Supabase PostgreSQL 設計的資料庫連接模組
使用 Supabase 客戶端 API 進行資料庫操作
"""
import logging
from .supabase_config import get_supabase_client

# 設置日誌
logger = logging.getLogger(__name__)

def get_supabase_db():
    """
    取得 Supabase 客戶端的依賴注入函式。

    取代舊的 get_async_session 和 get_database_session_safe。
    用於 FastAPI 的 Depends()。
    """
    return get_supabase_client()

async def check_database_connection():
    """
    檢查 Supabase 資料庫連接狀態
    """
    try:
        client = get_supabase_client()
        # 嘗試執行一個簡單的查詢
        client.table('sessions').select("id").limit(1).execute()
        logger.info("✅ Supabase 資料庫連接正常")
        return True
    except Exception as e:
        logger.error(f"❌ Supabase 資料庫連接失敗: {e}")
        logger.error("💡 請檢查 SUPABASE_URL 和 SUPABASE_KEY 環境變數")
        return False

async def check_tables_exist() -> bool:
    """
    檢查所有必要的 Supabase 資料庫表格是否存在

    Returns:
        bool: 如果所有表格都存在則回傳 True，否則回傳 False
    """
    required_tables = [
        'sessions',
        'audio_files',
        'transcript_segments',
        'transcripts',
        'notes'
    ]
    client = get_supabase_client()

    try:
        for table_name in required_tables:
            try:
                # 嘗試查詢表格來檢查是否存在
                client.table(table_name).select("id", head=True).limit(1).execute()
                logger.info(f"✅ 表格 '{table_name}' 存在且可訪問")
            except Exception:
                logger.error(f"❌ 表格 '{table_name}' 不存在或無法訪問。")
                return False
        logger.info("✅ 所有核心表格都存在")
        return True
    except Exception as e:
        logger.error(f"❌ 檢查表格時發生錯誤: {e}")
        return False

async def auto_init_database():
    """
    自動檢測並初始化 Supabase 資料庫

    檢查表格是否存在，如果不存在則提示使用者手動執行 SQL 腳本
    """
    logger.info("🔍 檢查 Supabase 資料庫表格狀態...")

    if await check_tables_exist():
        logger.info("✅ Supabase 資料庫表格已存在，跳過初始化")
        return

    logger.warning("🚧 偵測到缺失的表格")
    logger.warning("📋 請在 Supabase Dashboard 的 SQL Editor 中執行以下腳本：")
    logger.warning("   app/db/supabase_init.sql")
    logger.warning("💡 或參考 README.md 中的詳細設定指南")

    raise RuntimeError(
        "資料庫表格尚未建立。請在 Supabase Dashboard 中執行 app/db/supabase_init.sql 腳本。"
    )

# 為了兼容舊的命名，保留一個別名
get_supabase_client_safe = get_supabase_db

# 新增：回傳目前資料庫模式（Supabase 固定）

def get_database_mode() -> str:
    """取得目前資料庫連線模式。"""
    return "supabase"


async def get_database_stats() -> dict:
    """取得 Supabase 資料庫統計資訊（簡易占位實作）。"""
    # 在完整實作中可以呼叫 Supabase RPC 或資訊視圖
    return {
        "tables": "unknown",
        "status": "placeholder",
    }


# END FILE CONTENTS


# File: frontend/components/recording-state.tsx

"use client"

import { RecordingWaitingState } from "./recording-waiting-state"
import { RecordingActiveState } from "./recording-active-state"
import type { TranscriptEntry } from "../types/app-state"

interface RecordingStateProps {
  transcriptEntries: TranscriptEntry[]
  recordingTime: number
  onStopRecording: () => void
  error?: string | null
}

export function RecordingState({ transcriptEntries, recordingTime, onStopRecording, error }: RecordingStateProps) {
  if (transcriptEntries.length === 0) {
    return (
      <RecordingWaitingState
        recordingTime={recordingTime}
        onStopRecording={onStopRecording}
        transcriptEntries={transcriptEntries}
        error={error}
      />
    )
  }
  return (
    <RecordingActiveState
      transcriptEntries={transcriptEntries}
      recordingTime={recordingTime}
      onStopRecording={onStopRecording}
    />
  )
}


# END FILE CONTENTS


# File: frontend/components/ui/hover-card.tsx

"use client"

import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }


# END FILE CONTENTS


# File: frontend/hooks/use-mobile.tsx

import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}


# END FILE CONTENTS


# File: README.md

# StudyScriber

> 雲端筆記應用：邊錄邊轉錄，支援純筆記與錄音模式

## 📋 專案概述

StudyScriber 是一個先進的雲端筆記應用程式，專為學習者和專業人士設計。它提供兩種主要模式：

- **純筆記模式**：專注於 Markdown 筆記編輯，支援自動儲存
- **錄音模式**：邊錄音邊做筆記，即時轉錄為逐字稿

## 🏗️ 技術架構

### 後端
- **FastAPI** - 現代 Python Web 框架
- **Supabase PostgreSQL** - 雲端資料庫平台
- **SQLAlchemy 2.0** - ORM 與資料庫抽象層
- **Supabase Python SDK** - 官方客戶端
- **Azure OpenAI** - Whisper 語音轉錄服務
- **Google Vertex AI** - Gemini 2.5 Pro 語音轉錄服務
- **Cloudflare R2** - 音檔雲端儲存

#### 🎯 雙 STT Provider 架構
StudyScriber 支援多種語音轉文字引擎，使用者可自由選擇：

- **Whisper (Azure OpenAI)**：高精確度、多語言支援、快速響應
- **Gemini 2.5 Pro (Vertex AI)**：最新 AI 技術、上下文理解、高品質轉錄

##### 技術特色：
- **統一介面**：所有 STT Provider 實作相同的 `ISTTProvider` 介面
- **Factory 模式**：根據會話設定動態選擇 Provider
- **狀態管理**：每個會話的 STT Provider 獨立管理
- **前端整合**：統一的 UI 元件支援 Provider 切換

#### 🚀 WebM 直接轉錄架構 (v2)
StudyScriber 採用革命性的 **WebM 直接轉錄架構**，大幅提升效能：

- **直接轉錄流程**：前端錄音 (WebM) → 直接發送到 Whisper API → 即時轉錄
- **消除轉換瓶頸**：跳過每個 chunk 的 FFmpeg 轉換步驟，節省 60% 處理時間
- **錯誤率降低 80%**：移除 FFmpeg 相關轉換錯誤點
- **向後相容**：保留 FFmpeg 邏輯用於錄音結束後的 WAV 檔案生成

### 前端
- **React** - 使用者介面框架
- **React Hooks** - 狀態管理
- **Socket.IO** - 即時通訊
- **Markdown Editor** - 筆記編輯器

## 🚀 快速開始

### 前置需求

- Python 3.12+
- **Supabase 帳戶** 
- **Azure OpenAI 帳戶** (必須，Whisper 語音轉錄服務)
- **Google Cloud 帳戶** (可選，Gemini 2.5 Pro 語音轉錄服務)
- **Cloudflare 帳戶** (可選，音檔儲存)
- Node.js 18+ (前端開發用)

### 1. 建立 Supabase 專案

1. 前往 [Supabase](https://supabase.com) 註冊帳戶
2. 建立新專案，記下：
   - **Project URL**: `https://your-project-ref.supabase.co`
   - **API Key**: 在 Settings > API 中找到 `anon public` 金鑰

### 2. 設定專案

```bash
# 克隆專案
git clone <repository-url>
cd study-scriber

# 建立虛擬環境
python -m venv .venv
source .venv/bin/activate  # macOS/Linux
# 或 .venv\Scripts\activate  # Windows

# 安裝依賴
uv sync  # 或 pip install -e .
```

### 3. 配置環境變數

複製環境變數範本：
```bash
cp .env.example .env
```

編輯 `.env` 檔案：
```env
# === Supabase 設定 (必須) ===
DB_MODE=supabase
SUPABASE_URL=https://your-project-ref.supabase.co
SUPABASE_KEY=your-anon-public-key

# === Azure OpenAI 服務 (Whisper STT - 必須) ===
AZURE_OPENAI_API_KEY=your-api-key
AZURE_OPENAI_ENDPOINT=https://your-resource.openai.azure.com/
AZURE_OPENAI_API_VERSION=2024-02-01
WHISPER_DEPLOYMENT_NAME=whisper-1

# === Google Vertex AI 服務 (Gemini STT - 可選) ===
STT_PROVIDER_DEFAULT=whisper  # 預設 STT Provider: whisper 或 gemini
GEMINI_ENDPOINT=us-central1-aiplatform.googleapis.com  # Vertex AI 端點
GEMINI_API_KEY=your-gcp-service-account-key  # GCP 服務帳戶 API Key
GEMINI_PROMPT=請輸出逐字稿：  # 自訂 Gemini 提示詞
GEMINI_MAX_REQUESTS=90  # 每分鐘最大請求數

# === Cloudflare R2 儲存 (可選) ===
R2_ACCOUNT_ID=your-account-id
R2_API_TOKEN=your-r2-api-token
R2_BUCKET_NAME=studyscriber-audio
```

### 4. 初始化 Supabase 資料庫

#### 方法 A: 使用 Supabase Dashboard (推薦)

1. 開啟 [Supabase Dashboard](https://supabase.com/dashboard)
2. 選擇您的專案
3. 點選左側選單的 **SQL Editor**
4. 複製 `app/db/supabase_init.sql` 檔案的完整內容
5. 貼上到 SQL Editor 中
6. 點選 **Run** 執行

#### 方法 B: 使用指令行工具

```bash
# 安裝 Supabase CLI (可選)
npm install -g supabase

# 登入並連接專案
supabase login
supabase link --project-ref your-project-ref

# 執行初始化腳本
supabase db reset --linked
```

### 5. 驗證設定

執行整合測試：
```bash
python test_final_integration.py
```

如果看到以下輸出，表示設定成功：
```
🎉 所有測試通過！StudyScriber T1 + T2 整合完全成功！
✨ 現在可以開始開發 T3 (音檔處理) 和 T4 (逐字稿) 功能了！
```

### 6. 設定前端環境變數

```bash
cd frontend
cp .env.example .env.local
```

編輯 `frontend/.env.local` 檔案：
```env
# StudyScriber Frontend Environment Variables
NEXT_PUBLIC_API_URL=http://127.0.0.1:8000
NEXT_PUBLIC_WS_URL=ws://127.0.0.1:8000
NODE_ENV=development
```

### 7. 配置 STT Provider (可選)

StudyScriber 支援兩種語音轉文字引擎：

#### Whisper (Azure OpenAI) - 預設
- 高精確度轉錄
- 多語言支援
- 快速響應時間
- 設定：僅需 Azure OpenAI 相關環境變數

#### Gemini 2.5 Pro (Vertex AI) - 可選
- 最新 AI 技術
- 優秀的上下文理解
- 高品質轉錄結果
- 設定：需額外配置 Google Cloud 服務

##### 啟用 Gemini 的步驟：

1. **建立 Google Cloud 專案**
   - 前往 [Google Cloud Console](https://console.cloud.google.com/)
   - 建立新專案或選擇現有專案
   - 啟用 Vertex AI API

2. **建立服務帳戶**
   - 前往 IAM & Admin > Service Accounts
   - 建立新的服務帳戶
   - 下載 JSON 金鑰檔案
   - 將金鑰內容轉換為 API Key 格式

3. **設定環境變數**
   ```env
   STT_PROVIDER_DEFAULT=gemini
   GEMINI_ENDPOINT=us-central1-aiplatform.googleapis.com
   GEMINI_API_KEY=your-gcp-service-account-key
   ```

4. **UI 中切換 Provider**
   - 在應用程式中點擊設定按鈕
   - 選擇「語音轉文字引擎」
   - 切換到 Gemini 2.5 Pro

### 8. 啟動開發伺服器

**重要：請按順序啟動，避免初始化競速問題**

#### 後端 (Terminal 1) - 先啟動
```bash
uv run python main.py
```
等待看到以下訊息表示 Backend 完全啟動：
```
🚀 StudyScriber 正在啟動...
✅ Transcription service initialized and registered.
INFO:     Application startup complete.
```

#### 前端 (Terminal 2) - 後啟動
```bash
cd frontend
pnpm install  # 首次運行
pnpm dev
```

- 後端 API 服務：`http://localhost:8000`
- 前端應用程式：`http://localhost:3000`

> **注意**: 如果前端啟動時出現網路錯誤，這通常是因為 Backend 還在啟動中。新版本已加入重試機制，會自動處理這個問題。

## 📁 專案結構

```
study-scriber/
├── app/                          # FastAPI 應用程式
│   ├── api/                     # API 路由
│   │   ├── sessions.py         # Session 管理 API
│   │   └── notes.py            # 筆記 API
│   ├── ws/                      # WebSocket 端點
│   ├── services/                # 業務邏輯服務
│   │   └── stt/                # STT Provider 服務
│   │       ├── base.py         # ISTTProvider 介面
│   │       ├── whisper_provider.py  # Whisper STT Provider
│   │       ├── gemini_provider.py   # Gemini STT Provider
│   │       └── factory.py      # Provider Factory
│   ├── core/                    # 核心功能 (FFmpeg, etc.)
│   ├── db/                      # 資料庫配置與模型
│   │   ├── supabase_config.py  # Supabase 配置管理
│   │   ├── supabase_init.sql   # 資料庫初始化腳本
│   │   ├── database.py         # 資料庫連接
│   │   └── models.py           # SQLAlchemy 模型
│   ├── middleware/              # 中介軟體
│   └── schemas/                 # Pydantic 模型
├── test_final_integration.py    # 整合測試腳本
├── main.py                      # 應用程式入口點
├── .env.example                 # 環境變數範本
└── pyproject.toml              # 專案配置
```

## 🎯 STT Provider 功能

StudyScriber 支援多種語音轉文字引擎，提供更多選擇和靈活性：

### 支援的 STT Provider

| Provider | 引擎 | 特色 | 設定難度 |
|----------|------|------|----------|
| **Whisper** | Azure OpenAI | 高精確度、多語言支援、快速響應 | 簡單 |
| **Gemini 2.5 Pro** | Google Vertex AI | 最新 AI 技術、上下文理解、高品質轉錄 | 中等 |

### 功能特色

- **UI 即時切換**：在設定中隨時切換 STT Provider
- **會話級別管理**：每個會話可使用不同的 STT Provider
- **狀態顯示**：逐字稿中顯示 Provider 徽章 (W/G)
- **統一介面**：所有 Provider 回傳相同格式的轉錄結果
- **錯誤處理**：各 Provider 獨立的錯誤處理和重試機制

### 使用方式

1. **開始錄音前**：在設定中選擇偏好的 STT Provider
2. **建立會話**：系統會使用您選擇的 Provider
3. **錄音過程**：逐字稿會顯示對應的 Provider 徽章
4. **會話切換**：不同會話可使用不同的 Provider

## 🗄️ Supabase 資料庫架構

### 主要表格

- **sessions** - 會話管理（純筆記或錄音模式），支援 active/completed/error 狀態
- **notes** - Markdown 筆記內容，支援客戶端時間戳衝突檢測
- **audio_files** - 音檔切片記錄
- **transcript_segments** - 逐字稿片段
- **transcripts** - 完整逐字稿

### 關鍵特性

- **UUID 主鍵** - 使用 `gen_random_uuid()` 自動生成
- **自動時間戳** - 透過觸發器自動更新 `updated_at`
- **單一活躍會話** - 資料庫層級保證同時只有一個 active session
- **完整約束** - 外鍵、檢查約束、唯一約束確保資料完整性
- **級聯刪除** - 刪除 session 時自動清理關聯資料

### 資料庫初始化腳本說明

`app/db/supabase_init.sql` 包含：

1. **自定義類型 (Enum)**
   - `session_type`: `'note_only'`, `'recording'`
   - `session_status`: `'active'`, `'completed'`, `'error'`
   - `lang_code`: `'zh-TW'`, `'en-US'`

2. **表格建立**
   - 所有必要的表格和欄位
   - 適當的資料類型和約束

3. **索引建立**
   - 查詢效能最佳化
   - 唯一約束確保資料完整性

4. **觸發器設定**
   - 自動更新時間戳
   - 單一活躍會話保護

## 🧪 測試

### 前端單元測試

專案已整合 **Vitest** 測試框架，提供 API 層與核心功能的單元測試。

```bash
cd frontend

# 執行測試
pnpm test

# 執行測試並顯示 UI
pnpm test:ui

# 單次執行所有測試
pnpm test:run
```

### 測試覆蓋範圍

- ✅ **API 配置測試** - 驗證環境變數配置
- ✅ **WebSocket URL 建構** - 確保 URL 正確生成
- ✅ **API 方法存在性** - 驗證所有必要的 API 方法

### 新增測試

測試檔案位於：
- `frontend/lib/api.test.ts` - API 層測試
- `frontend/src/test-setup.ts` - 測試環境設定

## 🔧 開發指南

### 測試資料庫連接

```bash
# 完整整合測試
python test_final_integration.py

# 快速連接測試
python -c "
from app.db.supabase_config import get_supabase_client
client = get_supabase_client()
response = client.table('sessions').select('*').execute()
print(f'✅ 連接成功，找到 {len(response.data)} 個 sessions')
"
```

### API 文件

啟動服務後，訪問以下網址查看 API 文件：

- **Swagger UI**: `http://localhost:8000/docs`
- **ReDoc**: `http://localhost:8000/redoc`

### 健康檢查

```bash
curl http://localhost:8000/health
```

## 🛠️ Supabase 管理

### 查看資料

在 Supabase Dashboard 中：
1. 點選 **Table Editor**
2. 瀏覽各個表格的資料
3. 可以直接在 Dashboard 中編輯資料

### 監控效能

在 Supabase Dashboard 中：
1. 點選 **Logs**
2. 查看 API 請求記錄
3. 監控資料庫效能指標

### 備份與還原

Supabase 自動提供：
- 每日自動備份
- 時間點還原 (Point-in-time recovery)
- 可在 Dashboard 的 **Settings > Database** 中管理

## 🚨 常見問題

### Q: 為什麼選擇 Supabase？

A: Supabase 提供：
- **免費額度充足** - 適合開發和小型專案
- **PostgreSQL 完整功能** - 支援複雜查詢和約束
- **內建認證** - 未來擴展使用者系統
- **即時功能** - 支援 WebSocket 和即時同步
- **儲存服務** - 整合音檔儲存
- **99.9% 可用性** - 生產級別穩定性

### Q: 如何重置資料庫？

A: 在 Supabase Dashboard 的 SQL Editor 中執行：
```sql
-- 刪除所有表格
DROP TABLE IF EXISTS notes CASCADE;
DROP TABLE IF EXISTS transcripts CASCADE;
DROP TABLE IF EXISTS transcript_segments CASCADE;
DROP TABLE IF EXISTS audio_files CASCADE;
DROP TABLE IF EXISTS sessions CASCADE;

-- 刪除自定義類型
DROP TYPE IF EXISTS session_type CASCADE;
DROP TYPE IF EXISTS session_status CASCADE;
DROP TYPE IF EXISTS lang_code CASCADE;
```
然後重新執行 `supabase_init.sql`。

### Q: 如何查看詳細錯誤？

A: 在 `.env` 中設定：
```env
DEBUG=true
```
這將啟用詳細的 SQL 查詢日誌。

## 🤝 貢獻指南

1. Fork 專案
2. 建立特性分支 (`git checkout -b feature/amazing-feature`)
3. 確保所有測試通過 (`python test_final_integration.py`)
4. 提交變更 (`git commit -m 'Add amazing feature'`)
5. 推送到分支 (`git push origin feature/amazing-feature`)
6. 開啟 Pull Request

## 📄 授權條款

本專案採用 MIT 授權條款。詳情請見 [LICENSE](LICENSE) 檔案。

## 🔗 相關連結

- **[🔧 音頻切片配置指南](AUDIO_CHUNK_CONFIG.md)** - 環境變數配置錄音切片時間
- [專案需求文件 (PRD)](PRD.md)
- [技術規格書 (SPEC)](SPEC.md)
- [測試報告](T1_T4_Test_Final_Report.md)
- [開發任務清單](Todos.md)
- [Supabase 官方文件](https://supabase.com/docs)
- [API 文件](http://localhost:8000/docs)

---

**StudyScriber** - 讓學習更有效率 🚀


# END FILE CONTENTS


# File: frontend/hooks/use-toast.ts

"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }


# END FILE CONTENTS


# File: frontend/lib/services/transcript-service-adapted.ts

"use client"

import { BaseService } from './base-service'
import { ITranscriptService, TranscriptMessage } from './interfaces'
import { getTranscriptManager, type ITranscriptManager } from '../transcript-manager-adapter'

/**
 * 逐字稿服務資訊介面
 */
interface TranscriptServiceInfo {
    serviceName: string
    isInitialized: boolean
    isRunning: boolean
    connectedSessions: string[]
    activeListeners: Record<string, number>
    totalConnections: number
    transcriptManagerConnections: number
    implementationType: 'refactored' | 'legacy'
}

/**
 * TranscriptService - 適配器版本
 *
 * 使用 TranscriptManager 適配器，根據功能旗標自動選擇實現：
 * - 新的重構實現（transcript-manager-new.ts）
 * - 舊的實現（transcript-manager.ts）
 */
export class TranscriptServiceAdapted extends BaseService implements ITranscriptService {
    protected readonly serviceName = 'TranscriptServiceAdapted'

    private connectedSessions: Set<string> = new Set()
    private sessionListeners: Map<string, Set<(message: TranscriptMessage) => void>> = new Map()
    private transcriptManager: ITranscriptManager | null = null

    /**
     * 取得 TranscriptManager 實例（根據功能旗標動態選擇）
     */
    private async getManager(): Promise<ITranscriptManager> {
        if (!this.transcriptManager) {
            this.transcriptManager = await getTranscriptManager()
            this.logInfo(`已載入 TranscriptManager (${this.getCurrentImplementationType()})`)
        }
        return this.transcriptManager
    }

    /**
 * 取得當前實現類型
 */
    private getCurrentImplementationType(): 'refactored' | 'legacy' {
        try {
            const { getCurrentImplementation } = require('../transcript-manager-adapter')
            return getCurrentImplementation()
        } catch (error) {
            console.warn('⚠️ [TranscriptServiceAdapted] 無法取得實現類型，預設為 legacy')
            return 'legacy'
        }
    }

    /**
     * 初始化服務
     */
    async initialize(): Promise<void> {
        this.logInfo('初始化逐字稿服務 (適配器版本)')

        // 預先載入 TranscriptManager 實例
        await this.getManager()
        this.logSuccess(`TranscriptManager 已載入 (${this.getCurrentImplementationType()})`)
    }

    /**
     * 清理服務資源
     */
    async cleanup(): Promise<void> {
        this.logInfo('清理逐字稿服務資源')

        // 斷開所有連接
        const sessionIds = Array.from(this.connectedSessions)
        for (const sessionId of sessionIds) {
            await this.disconnect(sessionId)
        }

        this.connectedSessions.clear()
        this.sessionListeners.clear()
        this.transcriptManager = null // 重置實例
    }

    /**
     * 連接逐字稿服務
     */
    async connect(sessionId: string): Promise<void> {
        if (!this.isRunning) {
            throw new Error('TranscriptService 尚未啟動，請先調用 start()')
        }

        try {
            this.logInfo(`連接逐字稿服務: ${sessionId}`)

            // 使用適配器獲取 TranscriptManager 並建立連接
            const manager = await this.getManager()
            await manager.connect(sessionId)

            // 記錄連接狀態
            this.connectedSessions.add(sessionId)

            this.logSuccess(`逐字稿服務連接成功: ${sessionId} (${this.getCurrentImplementationType()})`)
        } catch (error) {
            this.handleError(`逐字稿服務連接失敗: ${sessionId}`, error)
            throw error
        }
    }

    /**
     * 斷開逐字稿服務
     */
    async disconnect(sessionId?: string): Promise<void> {
        try {
            const manager = await this.getManager()

            if (sessionId) {
                this.logInfo(`斷開逐字稿服務: ${sessionId}`)

                // 移除所有監聽器（僅適用於舊實現）
                const listeners = this.sessionListeners.get(sessionId)
                if (listeners && (manager as any).removeListener) {
                    listeners.forEach(callback => {
                        (manager as any).removeListener(sessionId, callback)
                    })
                    this.sessionListeners.delete(sessionId)
                }

                // 斷開連接
                await manager.disconnect(sessionId)
                this.connectedSessions.delete(sessionId)

                this.logSuccess(`逐字稿服務斷開成功: ${sessionId}`)
            } else {
                // 斷開所有連接
                this.logInfo('斷開所有逐字稿服務連接')
                await manager.disconnectAll()
                this.connectedSessions.clear()
                this.sessionListeners.clear()
            }
        } catch (error) {
            this.handleError(`斷開逐字稿服務失敗: ${sessionId || 'all'}`, error)
            throw error
        }
    }

    /**
     * 添加逐字稿監聽器
     */
    addTranscriptListener(sessionId: string, callback: (message: TranscriptMessage) => void): void {
        if (!this.isRunning) {
            throw new Error('TranscriptService 尚未啟動，請先調用 start()')
        }

        this.logInfo(`添加逐字稿監聽器: ${sessionId}`)

        // 記錄監聽器
        if (!this.sessionListeners.has(sessionId)) {
            this.sessionListeners.set(sessionId, new Set())
        }
        this.sessionListeners.get(sessionId)!.add(callback)

        // 為兼容性，嘗試添加監聽器（舊實現）
        this.getManager().then(manager => {
            if ((manager as any).addListener && typeof (manager as any).addListener === 'function') {
                try {
                    (manager as any).addListener(sessionId, callback)
                    this.logInfo(`已添加監聽器 (legacy API): ${sessionId}`)
                } catch (error) {
                    this.logWarning('舊實現 addListener 調用失敗:', error)
                }
            } else {
                // 新實現使用事件驅動，不需要手動添加監聽器
                this.logInfo('新實現使用事件驅動方式，無需手動添加監聽器')
            }
        }).catch(error => {
            this.logWarning('添加監聽器時發生錯誤:', error)
        })
    }

    /**
     * 移除逐字稿監聽器
     */
    removeTranscriptListener(sessionId: string, callback: (message: TranscriptMessage) => void): void {
        this.logInfo(`移除逐字稿監聽器: ${sessionId}`)

        // 從記錄中移除
        const listeners = this.sessionListeners.get(sessionId)
        if (listeners) {
            listeners.delete(callback)
            if (listeners.size === 0) {
                this.sessionListeners.delete(sessionId)
            }
        }

        // 只有舊實現才支援 removeListener 方法
        this.getManager().then(manager => {
            if ((manager as any).removeListener) {
                (manager as any).removeListener(sessionId, callback)
            }
        })
    }

    /**
     * 檢查連接狀態
     */
    isConnected(sessionId: string): boolean {
        if (!this.transcriptManager) return false
        return this.transcriptManager.isConnected(sessionId)
    }

    /**
     * 清除逐字稿
     */
    clearTranscripts(sessionId: string): void {
        this.logInfo(`清除逐字稿: ${sessionId}`)
        // TranscriptManager 不儲存逐字稿數據，這個方法主要用於觸發狀態清除
        // 實際的清除邏輯應該在狀態管理層實現
    }

    /**
     * 取得服務狀態資訊
     */
    getServiceInfo(): TranscriptServiceInfo {
        return {
            serviceName: this.serviceName,
            isInitialized: this.isInitialized,
            isRunning: this.isRunning,
            connectedSessions: Array.from(this.connectedSessions),
            activeListeners: Object.fromEntries(
                Array.from(this.sessionListeners.entries()).map(([sessionId, listeners]) => [
                    sessionId,
                    listeners.size
                ])
            ),
            totalConnections: this.connectedSessions.size,
            transcriptManagerConnections: this.transcriptManager?.getConnectionCount() || 0,
            implementationType: this.getCurrentImplementationType()
        }
    }

    /**
     * 強制重新載入 TranscriptManager（用於功能旗標變更後）
     */
    async reloadManager(): Promise<void> {
        this.logInfo('重新載入 TranscriptManager')

        // 先斷開所有連接
        await this.cleanup()

        // 重新初始化
        await this.initialize()

        this.logSuccess(`TranscriptManager 已重新載入 (${this.getCurrentImplementationType()})`)
    }
}


# END FILE CONTENTS


# File: app/services/stt/gemini_provider.py

from __future__ import annotations

import base64
import logging
from datetime import datetime
from typing import Dict, Any
from uuid import UUID

import google.generativeai as genai

from app.core.config import get_settings
from app.core.ffmpeg import webm_to_pcm
from .base import ISTTProvider

logger = logging.getLogger(__name__)
settings = get_settings()


class GeminiProvider(ISTTProvider):
    """使用 Vertex AI Gemini 2.5 Pro 的語音轉文字 Provider。"""

    def __init__(self) -> None:
        # 延遲載入，避免未設定 API Key 仍建立物件
        self._model: genai.GenerativeModel | None = None

    # ------------- 介面實作 -------------
    def name(self) -> str:  # type: ignore[override]
        return "gemini"

    def max_rpm(self) -> int:  # type: ignore[override]
        return settings.GEMINI_MAX_REQUESTS if hasattr(settings, "GEMINI_MAX_REQUESTS") else 60

    async def transcribe(self, webm: bytes, session_id: UUID, chunk_seq: int) -> Dict[str, Any]:  # type: ignore[override]
        """將 WebM 轉為 PCM，送至 Gemini 取得結果。"""
        logger.info(f"🎙️ [Gemini] 開始轉錄 chunk {chunk_seq} (session {session_id})")

        # 初始化模型
        if self._model is None:
            try:
                # 使用新版 google-generativeai 需要先全域設定 API Key
                genai.configure(api_key=settings.GEMINI_API_KEY)
                # 建立模型，不再接受 api_key/base_url 參數
                self._model = genai.GenerativeModel("gemini-2.5-pro-preview")
            except Exception as e:
                logger.error(f"[Gemini] 初始化模型失敗: {e}")
                raise

        # 1. 轉檔
        pcm_bytes = await webm_to_pcm(webm)

        # 2. 組 prompt
        prompt = getattr(settings, "GEMINI_PROMPT", "請輸出逐字稿：")

        # 3. 呼叫 API - 使用 inline_data 方式傳遞音訊 (符合新版 google-generativeai SDK)
        try:
            from google.generativeai import types as genai_types  # type: ignore

            parts = [
                {"text": prompt},
                genai_types.Part.from_bytes(data=pcm_bytes, mime_type="audio/wav"),
            ]

            res = await self._model.generate_content_async(contents=parts)

            text = res.text.strip() if hasattr(res, "text") else ""
        except Exception as e:
            logger.error(f"[Gemini] 轉錄失敗: {e}")
            raise

        logger.info(f"✅ [Gemini] chunk {chunk_seq} 轉錄完成，長度 {len(text)} 字")
        return {
            "text": text,
            "chunk_sequence": chunk_seq,
            "session_id": str(session_id),
            "timestamp": datetime.utcnow().isoformat(),
            "start_time": chunk_seq * settings.AUDIO_CHUNK_DURATION_SEC,
            "end_time": (chunk_seq + 1) * settings.AUDIO_CHUNK_DURATION_SEC,
            "provider": self.name(),
        }


# END FILE CONTENTS


# File: app/schemas/note.py

"""
StudyScriber Note Pydantic 模型

定義筆記相關的請求和響應模型
"""

from datetime import datetime
from typing import Optional
from uuid import UUID
from pydantic import BaseModel, Field, ConfigDict, field_validator


class NoteSaveRequest(BaseModel):
    """儲存筆記請求"""
    content: str = Field(description="筆記內容（Markdown 格式）")
    client_ts: Optional[datetime] = Field(None, description="客戶端時間戳")

    @field_validator('content')
    @classmethod
    def validate_content_length(cls, v: str) -> str:
        """驗證筆記內容長度（限制 1MB）"""
        if len(v.encode('utf-8')) > 1024 * 1024:  # 1MB limit
            raise ValueError('筆記內容超過 1MB 限制')
        return v


class NoteOut(BaseModel):
    """筆記輸出模型"""
    model_config = ConfigDict(
        from_attributes=True,
        json_encoders={UUID: str}  # 添加 UUID 到字串的序列化器
    )

    session_id: UUID = Field(description="會話 ID")
    content: str = Field(description="筆記內容")
    updated_at: datetime = Field(description="伺服器更新時間")
    client_ts: Optional[datetime] = Field(None, description="客戶端時間戳")


class NoteSaveResponse(BaseModel):
    """筆記儲存響應"""
    success: bool = Field(description="儲存是否成功")
    message: str = Field(description="回應訊息")
    server_ts: datetime = Field(description="伺服器時間戳")
    note: Optional[NoteOut] = Field(None, description="更新後的筆記資料")


class NoteConflictError(BaseModel):
    """筆記衝突錯誤（客戶端時間戳較舊）"""
    model_config = ConfigDict(json_encoders={UUID: str})

    error: str = Field("note_conflict", description="錯誤類型")
    message: str = Field(description="錯誤訊息")
    server_note: NoteOut = Field(description="伺服器端較新的筆記資料")
    client_ts: Optional[datetime] = Field(None, description="客戶端時間戳")
    server_ts: datetime = Field(description="伺服器時間戳")


# END FILE CONTENTS


# File: frontend/lib/advanced-audio-recorder.ts

"use client"

import { getAudioChunkIntervalMs } from './config'

/**
 * AdvancedAudioRecorder - 進階分段音訊錄製器
 *
 * Phase 2.5 WebM Header 修復：實作無縫 MediaRecorder 切換策略
 * 解決 MediaRecorder.start(timeslice) 只在第一個段落包含完整 container header 的問題
 *
 * 核心策略：
 * - 可配置時間重新創建 MediaRecorder 實例
 * - 使用預建策略：提前創建下一個 MediaRecorder，避免建立延遲
 * - 無縫角色轉換：stop→start 間隙 ≈ 1-3ms
 * - 確保每個段落都包含完整 WebM EBML header
 * - 支援環境變數配置切片時間
 */

export interface AudioSegment {
    blob: Blob
    timestamp: number
    duration: number
    sequence: number
}

export interface AdvancedAudioRecorderConfig {
    segmentDuration: number // 段落時長（毫秒）
    mimeType: string
    audioBitsPerSecond: number
}

const DEFAULT_CONFIG: AdvancedAudioRecorderConfig = {
    segmentDuration: getAudioChunkIntervalMs(), // 從環境變數讀取切片時長
    mimeType: 'audio/webm;codecs=opus',
    audioBitsPerSecond: 128000, // 128 kbps for configurable chunks
}

export class AdvancedAudioRecorder {
    private stream: MediaStream | null = null
    private config: AdvancedAudioRecorderConfig
    private isRecording: boolean = false
    private sequence: number = 0

    // 雙 MediaRecorder 策略
    private currentRecorder: MediaRecorder | null = null
    private nextRecorder: MediaRecorder | null = null
    private swapTimer: ReturnType<typeof setTimeout> | null = null

    // 事件回調
    private onSegmentCallback?: (segment: AudioSegment) => void
    private onErrorCallback?: (error: Error) => void

    constructor(config: Partial<AdvancedAudioRecorderConfig> = {}) {
        this.config = { ...DEFAULT_CONFIG, ...config }
    }

    /**
     * 初始化錄音器 - 獲取音訊權限
     */
    async initialize(): Promise<void> {
        if (this.stream) {
            return // 已初始化
        }

        try {
            this.stream = await navigator.mediaDevices.getUserMedia({ audio: true })
            console.log('🎤 [AdvancedAudioRecorder] 音訊權限獲取成功')
        } catch (error) {
            const errorMsg = error instanceof Error ? error.message : '獲取音訊權限失敗'
            this.handleError(new Error(errorMsg))
            throw error
        }
    }

    /**
     * 開始錄音 - 使用雙 MediaRecorder 無縫切換策略
     */
    async start(onSegmentAvailable: (segment: AudioSegment) => void): Promise<void> {
        if (this.isRecording) {
            throw new Error('錄製已在進行中')
        }

        if (!this.stream) {
            await this.initialize()
        }

        this.onSegmentCallback = onSegmentAvailable
        this.sequence = 0
        this.isRecording = true

        console.log('🎬 [AdvancedAudioRecorder] 開始進階錄音', {
            segmentDuration: this.config.segmentDuration,
            mimeType: this.config.mimeType,
            audioBitsPerSecond: this.config.audioBitsPerSecond
        })

        // 檢查瀏覽器支援度
        if (!this.checkMediaRecorderSupport()) {
            throw new Error('瀏覽器不支援所需的音頻錄製功能')
        }

        try {
            // 啟動雙 MediaRecorder 策略
            await this.initializeRecorders()
            this.startCurrentRecorder()
            this.scheduleNextSwap()

            console.log('✅ [AdvancedAudioRecorder] 雙 MediaRecorder 策略啟動成功')
        } catch (error) {
            this.isRecording = false
            this.handleError(error instanceof Error ? error : new Error('啟動錄音失敗'))
            throw error
        }
    }

    /**
     * 停止錄音
     */
    stop(): void {
        console.log('⏹️ [AdvancedAudioRecorder] 停止進階錄音')

        this.isRecording = false

        // 清除切換計時器
        if (this.swapTimer) {
            clearTimeout(this.swapTimer)
            this.swapTimer = null
        }

        // 停止當前錄音器
        if (this.currentRecorder && this.currentRecorder.state !== 'inactive') {
            this.currentRecorder.stop()
        }

        // 清理下一個錄音器
        this.cleanupRecorder(this.nextRecorder)
        this.nextRecorder = null
    }

    /**
     * 清理資源
     */
    cleanup(): void {
        this.stop()

        if (this.stream) {
            this.stream.getTracks().forEach(track => track.stop())
            this.stream = null
        }

        this.cleanupRecorder(this.currentRecorder)
        this.cleanupRecorder(this.nextRecorder)
        this.currentRecorder = null
        this.nextRecorder = null
        this.sequence = 0

        console.log('🧹 [AdvancedAudioRecorder] 已清理')
    }

    /**
     * 檢查是否正在錄音
     */
    get recording(): boolean {
        return this.isRecording
    }

    /**
     * 獲取當前序號
     */
    get currentSequence(): number {
        return this.sequence
    }

    /**
     * 重置序號
     */
    resetSequence(): void {
        this.sequence = 0
        console.log('🔄 [AdvancedAudioRecorder] 序號已重置為 0')
    }

    /**
     * 獲取當前配置
     */
    get currentConfig(): AdvancedAudioRecorderConfig {
        return { ...this.config }
    }

    // ============ 私有方法 ============

    /**
     * 檢查 MediaRecorder 支援度
     */
    private checkMediaRecorderSupport(): boolean {
        if (!window.MediaRecorder) {
            this.handleError(new Error('瀏覽器不支援 MediaRecorder API'))
            return false
        }

        if (!MediaRecorder.isTypeSupported(this.config.mimeType)) {
            this.handleError(new Error(`不支援音訊格式: ${this.config.mimeType}`))
            return false
        }

        return true
    }

    /**
     * 初始化雙 MediaRecorder
     */
    private async initializeRecorders(): Promise<void> {
        try {
            this.currentRecorder = this.createMediaRecorder()
            this.nextRecorder = this.createMediaRecorder()
            console.log('🔄 [AdvancedAudioRecorder] 雙 MediaRecorder 初始化完成')
        } catch (error) {
            throw new Error(`MediaRecorder 初始化失敗: ${error instanceof Error ? error.message : '未知錯誤'}`)
        }
    }

    /**
     * 創建 MediaRecorder 實例
     */
    private createMediaRecorder(): MediaRecorder {
        if (!this.stream) {
            throw new Error('音訊流未初始化')
        }

        const recorder = new MediaRecorder(this.stream, {
            mimeType: this.config.mimeType,
            audioBitsPerSecond: this.config.audioBitsPerSecond,
        })

        // 設定事件處理
        recorder.ondataavailable = (event) => {
            if (event.data.size > 0 && this.isRecording) {
                console.log(`📦 [AdvancedAudioRecorder] 段落 #${this.sequence} 完成`, {
                    size: event.data.size,
                    mimeType: this.config.mimeType,
                    hasCompleteHeader: true // 每個段落都有完整檔頭
                })

                const segment: AudioSegment = {
                    blob: event.data,
                    timestamp: Date.now(),
                    duration: this.config.segmentDuration,
                    sequence: this.sequence++,
                }

                // 回調通知有新段落可用
                this.onSegmentCallback?.(segment)
            }
        }

        recorder.onerror = (event) => {
            console.error('❌ [AdvancedAudioRecorder] MediaRecorder 錯誤:', event)
            this.handleError(new Error(`MediaRecorder 錯誤: ${event}`))
        }

        return recorder
    }

    /**
     * 啟動當前錄音器
     */
    private startCurrentRecorder(): void {
        if (!this.currentRecorder) {
            throw new Error('當前錄音器未初始化')
        }

        console.log(`🎵 [AdvancedAudioRecorder] 開始錄音段落 #${this.sequence}`)
        this.currentRecorder.start() // 不使用 timeslice，讓 stop() 觸發完整段落
    }

    /**
     * 排程下一次切換
     */
    private scheduleNextSwap(): void {
        if (!this.isRecording) return

        this.swapTimer = setTimeout(() => {
            if (this.isRecording) {
                this.swapRecorders()
            }
        }, this.config.segmentDuration)
    }

    /**
     * 執行 MediaRecorder 角色轉換
     */
    private swapRecorders(): void {
        try {
            console.log('🔄 [AdvancedAudioRecorder] 執行 MediaRecorder 切換')

            // 步驟 1: 停止當前錄音器（觸發 dataavailable）
            if (this.currentRecorder && this.currentRecorder.state === 'recording') {
                this.currentRecorder.stop()
            }

            // 步驟 2: 啟動備用錄音器
            if (this.nextRecorder) {
                this.nextRecorder.start()
                console.log(`🎵 [AdvancedAudioRecorder] 切換到段落 #${this.sequence}`)
            }

            // 步驟 3: 角色轉換
            const oldRecorder = this.currentRecorder
            this.currentRecorder = this.nextRecorder

            // 步驟 4: 準備下一個錄音器
            try {
                this.nextRecorder = this.createMediaRecorder()
            } catch (error) {
                console.error('❌ [AdvancedAudioRecorder] 創建下一個錄音器失敗:', error)
                this.handleError(error instanceof Error ? error : new Error('創建錄音器失敗'))
                return
            }

            // 步驟 5: 清理舊錄音器
            this.cleanupRecorder(oldRecorder)

            // 步驟 6: 排程下一次切換
            if (this.isRecording) {
                this.scheduleNextSwap()
            }

        } catch (error) {
            console.error('❌ [AdvancedAudioRecorder] 切換錄音器失敗:', error)
            this.handleError(error instanceof Error ? error : new Error('切換錄音器失敗'))
        }
    }

    /**
     * 清理 MediaRecorder
     */
    private cleanupRecorder(recorder: MediaRecorder | null): void {
        if (!recorder) return

        try {
            if (recorder.state !== 'inactive') {
                recorder.stop()
            }
        } catch (error) {
            console.warn('⚠️ [AdvancedAudioRecorder] 清理錄音器時發生警告:', error)
        }
    }

    /**
     * 錯誤處理
     */
    private handleError(error: Error): void {
        console.error('❌ [AdvancedAudioRecorder] 錯誤:', error)
        this.isRecording = false
        this.onErrorCallback?.(error)
    }

    // ============ 事件回調設定 ============

    onSegment(callback: (segment: AudioSegment) => void): void {
        this.onSegmentCallback = callback
    }

    onError(callback: (error: Error) => void): void {
        this.onErrorCallback = callback
    }
}

/**
 * 檢查進階音訊錄製支援
 */
export async function checkAdvancedAudioRecordingSupport(): Promise<{ isSupported: boolean; error?: string }> {
    if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
        return { isSupported: false, error: '瀏覽器不支援 MediaDevices API' }
    }

    if (!window.MediaRecorder) {
        return { isSupported: false, error: '瀏覽器不支援 MediaRecorder API' }
    }

    // 檢查 MIME 類型支援
    if (!MediaRecorder.isTypeSupported(DEFAULT_CONFIG.mimeType)) {
        return { isSupported: false, error: `不支援音訊格式: ${DEFAULT_CONFIG.mimeType}` }
    }

    try {
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true })
        // 立即停止串流以釋放資源
        stream.getTracks().forEach(track => track.stop())
        return { isSupported: true }
    } catch (error) {
        return { isSupported: false, error: `無法獲取麥克風權限: ${error}` }
    }
}


# END FILE CONTENTS


# File: frontend/components/ui/pagination.tsx

import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}


# END FILE CONTENTS


# File: frontend/lib/rest-audio-uploader.ts

"use client"

/**
 * RestAudioUploader - REST API 音頻上傳器
 *
 * Phase 2 重構：替換 WebSocket 為 REST API 上傳
 *
 * 特點：
 * - 使用 fetch POST `/api/segment` 上傳完整 10s 檔案
 * - 實作上傳錯誤處理和重試機制
 * - 使用 IndexedDB 暫存失敗的檔案
 * - 簡化的錯誤處理流程
 */

import { appConfig } from './config'

export interface UploadSegmentResponse {
    ack: number
    size: number
    status: 'success' | 'error'
    error?: string
}

export interface FailedSegment {
    sessionId: string
    sequence: number
    blob: Blob
    timestamp: number
    retryCount: number
}

export class RestAudioUploader {
    private sessionId: string | null = null
    private uploadQueue: Map<number, Blob> = new Map()
    private retryCount: Map<number, number> = new Map()
    private maxRetries = 3

    // 事件回調
    private onUploadSuccessCallback?: (seq: number, response: UploadSegmentResponse) => void
    private onUploadErrorCallback?: (seq: number, error: string) => void
    private onCacheStoredCallback?: (seq: number) => void

    constructor() {
        if (typeof window !== 'undefined') {
            this.initIndexedDB()
        }
    }

    /**
     * 初始化 IndexedDB 存儲
     */
    private async initIndexedDB(): Promise<void> {
        if (typeof window === 'undefined' || !window.indexedDB) {
            console.warn('⚠️ [RestAudioUploader] IndexedDB 不可用（服務器端渲染）')
            return
        }

        return new Promise((resolve, reject) => {
            const request = indexedDB.open('AudioSegmentCache', 1)

            request.onerror = () => {
                console.error('❌ [RestAudioUploader] IndexedDB 開啟失敗')
                reject(new Error('IndexedDB 初始化失敗'))
            }

            request.onsuccess = () => {
                console.log('✅ [RestAudioUploader] IndexedDB 初始化成功')
                resolve()
            }

            request.onupgradeneeded = (event) => {
                const db = (event.target as IDBOpenDBRequest).result

                if (!db.objectStoreNames.contains('failedSegments')) {
                    const store = db.createObjectStore('failedSegments', { keyPath: 'id' })
                    store.createIndex('sessionId', 'sessionId', { unique: false })
                    store.createIndex('timestamp', 'timestamp', { unique: false })
                }
            }
        })
    }

    /**
     * 設定 session ID
     */
    setSessionId(sessionId: string): void {
        this.sessionId = sessionId
        console.log('🎯 [RestAudioUploader] Session ID 設定:', sessionId)
    }

    /**
     * 重置序號和上傳狀態
     */
    resetSequence(): void {
        this.uploadQueue.clear()
        this.retryCount.clear()
        console.log('🔄 [RestAudioUploader] 上傳狀態已重置')
    }

    /**
     * 上傳音頻段落
     */
    async uploadSegment(sequence: number, blob: Blob): Promise<UploadSegmentResponse> {
        if (!this.sessionId) {
            throw new Error('Session ID 未設定')
        }

        console.log(`📤 [RestAudioUploader] 準備上傳段落 #${sequence}`, {
            size: blob.size,
            mimeType: blob.type,
            sessionId: this.sessionId
        })

        try {
            const formData = new FormData()
            formData.append('file', blob, `seg${sequence}.webm`)

            const response = await fetch(`${appConfig.apiUrl}/api/segment?sid=${this.sessionId}&seq=${sequence}`, {
                method: 'POST',
                body: formData
            })

            if (!response.ok) {
                if (response.status === 409) {
                    // 409 視為冪等成功
                    console.log(`✅ [RestAudioUploader] 段落 #${sequence} 已存在，視為上傳成功`)
                    const successResponse = { ack: sequence, size: blob.size, status: 'success' as const }
                    
                    // 重置重試計數
                    this.retryCount.delete(sequence)
                    
                    // 觸發成功回調
                    this.onUploadSuccessCallback?.(sequence, successResponse)
                    
                    return successResponse
                }
                throw new Error(`HTTP ${response.status}: ${response.statusText}`)
            }

            const result: UploadSegmentResponse = await response.json()

            console.log(`✅ [RestAudioUploader] 段落 #${sequence} 上傳成功`, result)

            // 重置重試計數
            this.retryCount.delete(sequence)

            // 觸發成功回調
            this.onUploadSuccessCallback?.(sequence, result)

            return result

        } catch (error) {
            const errorMessage = error instanceof Error ? error.message : '上傳失敗'
            console.error(`❌ [RestAudioUploader] 段落 #${sequence} 上傳失敗:`, errorMessage)

            // 處理重試邏輯
            await this.handleUploadFailure(sequence, blob, errorMessage)

            throw new Error(errorMessage)
        }
    }

    /**
     * 處理上傳失敗 - 重試或暫存
     */
    private async handleUploadFailure(sequence: number, blob: Blob, error: string): Promise<void> {
        const currentRetries = this.retryCount.get(sequence) || 0

        if (currentRetries < this.maxRetries) {
            // 嘗試重試
            this.retryCount.set(sequence, currentRetries + 1)
            console.log(`🔄 [RestAudioUploader] 段落 #${sequence} 準備重試 (${currentRetries + 1}/${this.maxRetries})`)

            // 延遲重試（漸進式延遲）
            const delay = Math.pow(2, currentRetries) * 1000 // 1s, 2s, 4s
            setTimeout(() => {
                this.retryUpload(sequence, blob)
            }, delay)

        } else {
            // 達到最大重試次數，暫存到 IndexedDB
            console.warn(`⚠️ [RestAudioUploader] 段落 #${sequence} 達到最大重試次數，暫存到本地`)
            await this.cacheFailedSegment(sequence, blob)

            // 觸發錯誤回調
            this.onUploadErrorCallback?.(sequence, `達到最大重試次數: ${error}`)
        }
    }

    /**
     * 重試上傳
     */
    private async retryUpload(sequence: number, blob: Blob): Promise<void> {
        try {
            await this.uploadSegment(sequence, blob)
        } catch (error) {
            // 重試失敗會再次觸發 handleUploadFailure
            console.log(`⚠️ [RestAudioUploader] 段落 #${sequence} 重試失敗`)
        }
    }

    /**
     * 暫存失敗的段落到 IndexedDB
     */
    private async cacheFailedSegment(sequence: number, blob: Blob): Promise<void> {
        if (!this.sessionId || typeof window === 'undefined' || !window.indexedDB) return

        try {
            const request = indexedDB.open('AudioSegmentCache', 1)

            request.onsuccess = () => {
                const db = request.result
                const transaction = db.transaction(['failedSegments'], 'readwrite')
                const store = transaction.objectStore('failedSegments')

                const failedSegment: FailedSegment = {
                    sessionId: this.sessionId!,
                    sequence,
                    blob,
                    timestamp: Date.now(),
                    retryCount: this.retryCount.get(sequence) || 0
                }

                const addRequest = store.put({
                    id: `${this.sessionId}_${sequence}`,
                    ...failedSegment
                })

                addRequest.onsuccess = () => {
                    console.log(`💾 [RestAudioUploader] 段落 #${sequence} 已暫存到本地`)
                    this.onCacheStoredCallback?.(sequence)
                }

                addRequest.onerror = () => {
                    console.error(`❌ [RestAudioUploader] 段落 #${sequence} 暫存失敗`)
                }
            }

        } catch (error) {
            console.error('❌ [RestAudioUploader] IndexedDB 暫存錯誤:', error)
        }
    }

    /**
     * 重新上傳暫存的失敗段落
     */
    async retryFailedSegments(): Promise<void> {
        if (!this.sessionId || typeof window === 'undefined' || !window.indexedDB) return

        try {
            const request = indexedDB.open('AudioSegmentCache', 1)

            request.onsuccess = () => {
                const db = request.result
                const transaction = db.transaction(['failedSegments'], 'readonly')
                const store = transaction.objectStore('failedSegments')
                const index = store.index('sessionId')
                const getRequest = index.getAll(this.sessionId)

                getRequest.onsuccess = async () => {
                    const failedSegments = getRequest.result

                    if (failedSegments.length === 0) {
                        console.log('✅ [RestAudioUploader] 沒有暫存的失敗段落')
                        return
                    }

                    console.log(`🔄 [RestAudioUploader] 發現 ${failedSegments.length} 個暫存段落，開始重新上傳`)

                    for (const segment of failedSegments) {
                        try {
                            await this.uploadSegment(segment.sequence, segment.blob)

                            // 上傳成功，從 IndexedDB 中移除
                            await this.removeFailedSegment(`${segment.sessionId}_${segment.sequence}`)

                        } catch (error) {
                            console.warn(`⚠️ [RestAudioUploader] 暫存段落 #${segment.sequence} 重新上傳失敗`)
                        }
                    }
                }
            }

        } catch (error) {
            console.error('❌ [RestAudioUploader] 重新上傳暫存段落失敗:', error)
        }
    }

    /**
     * 從 IndexedDB 中移除成功上傳的段落
     */
    private async removeFailedSegment(id: string): Promise<void> {
        if (typeof window === 'undefined' || !window.indexedDB) return

        try {
            const request = indexedDB.open('AudioSegmentCache', 1)

            request.onsuccess = () => {
                const db = request.result
                const transaction = db.transaction(['failedSegments'], 'readwrite')
                const store = transaction.objectStore('failedSegments')

                const deleteRequest = store.delete(id)
                deleteRequest.onsuccess = () => {
                    console.log(`🗑️ [RestAudioUploader] 已移除暫存段落: ${id}`)
                }
            }

        } catch (error) {
            console.error('❌ [RestAudioUploader] 移除暫存段落失敗:', error)
        }
    }

    /**
     * 獲取暫存的失敗段落數量
     */
    async getCachedSegmentsCount(): Promise<number> {
        if (!this.sessionId || typeof window === 'undefined' || !window.indexedDB) return 0

        return new Promise((resolve) => {
            const request = indexedDB.open('AudioSegmentCache', 1)

            request.onsuccess = () => {
                const db = request.result
                const transaction = db.transaction(['failedSegments'], 'readonly')
                const store = transaction.objectStore('failedSegments')
                const index = store.index('sessionId')
                const countRequest = index.count(this.sessionId!)

                countRequest.onsuccess = () => {
                    resolve(countRequest.result)
                }

                countRequest.onerror = () => {
                    resolve(0)
                }
            }

            request.onerror = () => {
                resolve(0)
            }
        })
    }

    /**
     * 清理資源
     */
    cleanup(): void {
        this.sessionId = null
        this.uploadQueue.clear()
        this.retryCount.clear()
        console.log('🧹 [RestAudioUploader] 已清理')
    }

    // 事件回調設定
    onUploadSuccess(callback: (seq: number, response: UploadSegmentResponse) => void): void {
        this.onUploadSuccessCallback = callback
    }

    onUploadError(callback: (seq: number, error: string) => void): void {
        this.onUploadErrorCallback = callback
    }

    onCacheStored(callback: (seq: number) => void): void {
        this.onCacheStoredCallback = callback
    }
}

// 預設實例
export const restAudioUploader = new RestAudioUploader()


# END FILE CONTENTS


# File: .cursorignore

/node_modules
/build
/temp
/xnotes
/.claude
/__pycache__
CLAUDE.local.md

# END FILE CONTENTS


# File: app/db/supabase_config.py

"""
StudyScriber Supabase 配置管理

整合 Supabase 資料庫與 SQLAlchemy ORM
"""

import os
import re
from typing import Optional
from dotenv import load_dotenv
from supabase import create_client, Client

# 載入環境變數
load_dotenv()

class SupabaseConfig:
    """Supabase 配置管理類別"""

    def __init__(self):
        self.supabase_url = os.getenv("SUPABASE_URL")
        self.supabase_key = os.getenv("SUPABASE_KEY")  # 可以是 anon key 或 service key
        self.db_mode = os.getenv("DB_MODE")

    def is_configured(self) -> bool:
        """檢查 Supabase 是否已正確配置"""
        return (
            self.db_mode == "supabase" and
            bool(self.supabase_url) and
            bool(self.supabase_key)
        )

    def get_database_url(self) -> str:
        """
        根據設定模式回傳資料庫連接字串

        Returns:
            str: PostgreSQL 連接字串
        """
        if self.db_mode == "supabase":
            if not self.supabase_url or not self.supabase_key:
                raise ValueError("SUPABASE_URL 和 SUPABASE_KEY 是必須的")

            # 從 Supabase URL 提取 PostgreSQL 連接資訊
            # Supabase URL 格式: https://your-project-ref.supabase.co
            # PostgreSQL 連接格式: postgresql+asyncpg://postgres:[password]@db.your-project-ref.supabase.co:5432/postgres

            # 提取專案 ID
            url_match = re.match(r'https://([^.]+)\.supabase\.co', self.supabase_url)
            if not url_match:
                raise ValueError(f"無效的 Supabase URL 格式: {self.supabase_url}")

            project_ref = url_match.group(1)

            # 使用 service_role key 作為密碼（如果提供的是 service_role key）
            # 如果是 anon key，我們需要使用不同的方法
            if self.supabase_key.startswith('eyJ'):  # JWT token (anon key)
                # 對於 anon key，我們不能直接連接 PostgreSQL，必須使用 Supabase 客戶端
                # 這裡我們回傳一個特殊的標識符，讓 database.py 知道要使用 Supabase 客戶端
                return f"supabase+client://{project_ref}"
            else:
                # 假設是 service_role key，可以直接連接 PostgreSQL
                return f"postgresql+asyncpg://postgres:{self.supabase_key}@db.{project_ref}.supabase.co:5432/postgres"
        else:
            # 使用本地資料庫
            return os.getenv(
                "DATABASE_URL",
                "postgresql+asyncpg://postgres:password@localhost:5432/studyscriber"
            )

    def get_client(self) -> Optional[Client]:
        """
        建立 Supabase 客戶端連接

        Returns:
            Optional[Client]: Supabase 客戶端實例，如果是本地模式則回傳 None
        """
        if self.is_configured():
            return create_client(self.supabase_url, self.supabase_key)
        return None

    def is_supabase_mode(self) -> bool:
        """檢查是否為 Supabase 模式"""
        return self.db_mode == "supabase"


# 全域配置實例
supabase_config = SupabaseConfig()

# 便利函式
def get_supabase_client() -> Client:
    """獲取 Supabase 客戶端實例"""
    client = supabase_config.get_client()
    if client is None:
        raise ValueError("Supabase 客戶端無法初始化，請檢查環境配置")
    return client


# END FILE CONTENTS


# File: app/lib/httpx_timeout.py

from httpx import Timeout
from app.core.config import get_settings

def get_httpx_timeout() -> Timeout:
    """
    依據設定檔回傳 httpx.Timeout 物件。
    這樣任何 provider 引用時都不會 NameError。
    """
    s = get_settings()
    return Timeout(
        connect=s.HTTPX_CONNECT_TIMEOUT,   # e.g. 5
        read=s.HTTPX_READ_TIMEOUT,         # 55
        write=s.HTTPX_WRITE_TIMEOUT,       # 30
        pool=s.HTTPX_POOL_TIMEOUT,         # 5
    )


# END FILE CONTENTS


# File: app/__init__.py

"""
StudyScriber API Application

雲端筆記應用：邊錄邊轉錄，支援純筆記與錄音模式
"""

__version__ = "0.1.0"


# END FILE CONTENTS


# File: frontend/components/ui/tabs.tsx

"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }


# END FILE CONTENTS


# File: frontend/lib/services/__tests__/session-service-409.test.ts

/**
 * SessionService 409 衝突處理測試
 *
 * 測試 ensureRecordingSession 方法在遇到會話衝突時的處理邏輯
 */

import { describe, test, expect, vi, beforeEach, afterEach } from 'vitest'
import { SessionService } from '../session-service'
import { sessionAPI } from '../../api'
import type { SessionResponse } from '../../api'

// Mock sessionAPI
vi.mock('../../api', () => ({
    sessionAPI: {
        createSession: vi.fn(),
        getActiveSession: vi.fn(),
        upgradeToRecording: vi.fn(),
        finishSession: vi.fn(),
        deleteSession: vi.fn()
    }
}))

describe('SessionService - 409 衝突處理', () => {
    let sessionService: SessionService
    const mockSessionAPI = sessionAPI as any

    // 測試用的會話數據
    const mockExistingSession: SessionResponse = {
        id: 'existing-session-123',
        title: '現有錄音會話',
        type: 'recording',
        status: 'active',
        language: 'zh-TW',
        created_at: '2024-01-01T00:00:00Z',
        updated_at: '2024-01-01T00:00:00Z'
    }

    const mockNewSession: SessionResponse = {
        id: 'new-session-456',
        title: '新錄音會話',
        type: 'recording',
        status: 'active',
        language: 'zh-TW',
        created_at: '2024-01-01T01:00:00Z',
        updated_at: '2024-01-01T01:00:00Z'
    }

    const mockNoteSession: SessionResponse = {
        id: 'note-session-789',
        title: '現有筆記會話',
        type: 'note_only',
        status: 'active',
        language: 'zh-TW',
        created_at: '2024-01-01T02:00:00Z',
        updated_at: '2024-01-01T02:00:00Z'
    }

    beforeEach(() => {
        sessionService = new SessionService()
        vi.clearAllMocks()
    })

    afterEach(() => {
        vi.restoreAllMocks()
    })

    describe('ensureRecordingSession - 成功情境', () => {
        test('當沒有現有會話時，應該成功創建新的錄音會話', async () => {
            // Arrange
            mockSessionAPI.createSession.mockResolvedValueOnce(mockNewSession)

            // Act
            const result = await sessionService.ensureRecordingSession('測試標題')

            // Assert
            expect(result).toEqual(mockNewSession)
            expect(mockSessionAPI.createSession).toHaveBeenCalledWith({
                title: '測試標題',
                type: 'recording',
                content: undefined
            })
            expect(mockSessionAPI.getActiveSession).not.toHaveBeenCalled()
        })
    })

    describe('ensureRecordingSession - 409 衝突處理', () => {
        test('當創建會話遇到 409 衝突時，應該獲取現有的錄音會話', async () => {
            // Arrange
            const conflictError = {
                response: {
                    status: 409,
                    data: { detail: '已有活躍會話' }
                },
                isAxiosError: true
            }

            mockSessionAPI.createSession.mockRejectedValueOnce(conflictError)
            mockSessionAPI.getActiveSession.mockResolvedValueOnce(mockExistingSession)

            // Act
            const result = await sessionService.ensureRecordingSession('測試標題')

            // Assert
            expect(result).toEqual(mockExistingSession)
            expect(mockSessionAPI.createSession).toHaveBeenCalledWith({
                title: '測試標題',
                type: 'recording',
                content: undefined
            })
            expect(mockSessionAPI.getActiveSession).toHaveBeenCalledOnce()
        })

        test('當遇到 409 但現有會話是筆記會話時，應該升級為錄音會話', async () => {
            // Arrange
            const conflictError = {
                response: { status: 409 },
                isAxiosError: true
            }

            const upgradedSession: SessionResponse = {
                ...mockNoteSession,
                type: 'recording'
            }

            mockSessionAPI.createSession.mockRejectedValueOnce(conflictError)
            // 第一次調用 - ensureRecordingSession 中檢查現有會話
            mockSessionAPI.getActiveSession.mockResolvedValueOnce(mockNoteSession)
            // 第二次調用 - upgradeToRecording 中檢查會話狀態
            mockSessionAPI.getActiveSession.mockResolvedValueOnce(mockNoteSession)
            mockSessionAPI.upgradeToRecording.mockResolvedValueOnce(upgradedSession)

            // Act
            const result = await sessionService.ensureRecordingSession('測試標題')

            // Assert
            expect(result).toEqual(upgradedSession)
            expect(mockSessionAPI.createSession).toHaveBeenCalled()
            expect(mockSessionAPI.getActiveSession).toHaveBeenCalledTimes(2)
            expect(mockSessionAPI.upgradeToRecording).toHaveBeenCalledWith(mockNoteSession.id)
        })

        test('當遇到 409 但無法獲取現有會話時，應該拋出錯誤', async () => {
            // Arrange
            const conflictError = {
                response: { status: 409 },
                isAxiosError: true
            }

            mockSessionAPI.createSession.mockRejectedValueOnce(conflictError)
            mockSessionAPI.getActiveSession.mockResolvedValueOnce(null)

            // Act & Assert
            await expect(
                sessionService.ensureRecordingSession('測試標題')
            ).rejects.toThrow('會話衝突但無法獲取現有活躍會話，請重新整理頁面')

            expect(mockSessionAPI.createSession).toHaveBeenCalled()
            expect(mockSessionAPI.getActiveSession).toHaveBeenCalledOnce()
        })

        test('當遇到非 409 錯誤時，應該直接拋出原錯誤', async () => {
            // Arrange
            const networkError = new Error('網路連接失敗')
            mockSessionAPI.createSession.mockRejectedValueOnce(networkError)

            // Act & Assert
            await expect(
                sessionService.ensureRecordingSession('測試標題')
            ).rejects.toThrow()

            expect(mockSessionAPI.createSession).toHaveBeenCalled()
            expect(mockSessionAPI.getActiveSession).not.toHaveBeenCalled()
        })
    })

    describe('ensureRecordingSession - 邊緣情況', () => {
        test('當標題為空時，應該使用預設標題', async () => {
            // Arrange
            mockSessionAPI.createSession.mockResolvedValueOnce(mockNewSession)

            // Act
            const result = await sessionService.ensureRecordingSession()

            // Assert
            expect(result).toEqual(mockNewSession)
            expect(mockSessionAPI.createSession).toHaveBeenCalledWith({
                title: expect.stringMatching(/錄音筆記 \d{1,2}\/\d{1,2}\/\d{4}/),
                type: 'recording',
                content: undefined
            })
        })

        test('當提供內容時，應該正確傳遞給 API', async () => {
            // Arrange
            mockSessionAPI.createSession.mockResolvedValueOnce(mockNewSession)

            // Act
            const result = await sessionService.ensureRecordingSession('測試標題', '測試內容')

            // Assert
            expect(result).toEqual(mockNewSession)
            expect(mockSessionAPI.createSession).toHaveBeenCalledWith({
                title: '測試標題',
                type: 'recording',
                content: '測試內容'
            })
        })
    })

    describe('ensureRecordingSession - 整合流程測試', () => {
        test('完整的 409 衝突處理流程：創建失敗 → 獲取現有會話 → 升級會話', async () => {
            // Arrange
            const conflictError = {
                response: { status: 409 },
                isAxiosError: true
            }

            const upgradedSession: SessionResponse = {
                ...mockNoteSession,
                type: 'recording'
            }

            mockSessionAPI.createSession.mockRejectedValueOnce(conflictError)
            // 第一次調用 - ensureRecordingSession 中檢查現有會話
            mockSessionAPI.getActiveSession.mockResolvedValueOnce(mockNoteSession)
            // 第二次調用 - upgradeToRecording 中檢查會話狀態
            mockSessionAPI.getActiveSession.mockResolvedValueOnce(mockNoteSession)
            mockSessionAPI.upgradeToRecording.mockResolvedValueOnce(upgradedSession)

            // Act
            const result = await sessionService.ensureRecordingSession('整合測試')

            // Assert - 驗證調用順序和參數
            expect(mockSessionAPI.createSession).toHaveBeenCalledWith({
                title: '整合測試',
                type: 'recording',
                content: undefined
            })
            expect(mockSessionAPI.getActiveSession).toHaveBeenCalledAfter(
                mockSessionAPI.createSession as any
            )
            expect(mockSessionAPI.upgradeToRecording).toHaveBeenCalledWith(mockNoteSession.id)
            expect(result).toEqual(upgradedSession)
        })

        test('優雅的錯誤恢復：API 調用順序正確且錯誤處理適當', async () => {
            // Arrange
            const conflictError = {
                response: { status: 409 },
                isAxiosError: true
            }

            mockSessionAPI.createSession.mockRejectedValueOnce(conflictError)
            mockSessionAPI.getActiveSession.mockResolvedValueOnce(mockExistingSession)

            // Act
            const result = await sessionService.ensureRecordingSession('錯誤恢復測試')

            // Assert - 驗證最終結果正確
            expect(result).toEqual(mockExistingSession)
            expect(result.type).toBe('recording')
            expect(result.status).toBe('active')

            // 驗證不需要升級（因為現有會話已經是錄音會話）
            expect(mockSessionAPI.upgradeToRecording).not.toHaveBeenCalled()
        })
    })
})


# END FILE CONTENTS


# File: frontend/components/ui/switch.tsx

"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }


# END FILE CONTENTS


# File: docs/ADD_GEMINI.md

## ✨ Feature Spec：可切換 Whisper ⇆ Gemini (2.5 Pro) 語音轉文字

### 0. 目標
1. 使用者可在 UI 選擇 **Whisper** 或 **Gemini 2.5 Pro** 作為轉錄引擎  
2. 選定後建立之 session 及其所有切片都走對應 Provider  
3. 無論 Provider，前端得到 *一致* 的 `transcript_segment` Payload

---

### 1. 新增環境變數

| 變數                 | 範例值                                  | 說明                                 |
| -------------------- | --------------------------------------- | ------------------------------------ |
| STT_PROVIDER_DEFAULT | whisper                                 | 預設 Provider (`whisper` / `gemini`) |
| GEMINI_ENDPOINT      | `us-central1-aiplatform.googleapis.com` | Vertex AI 端點                       |
| GEMINI_API_KEY       | `ya29.~…`                               | GCP 服務帳戶 *API Key*               |
| GEMINI_PROMPT        | `請輸出逐字稿…`                         | 預設 system prompt                   |
| GEMINI_MAX_REQUESTS  | 90                                      | 1 min 內可呼叫次數 (RateLimiter 用)  |

---

### 2. DB 變更

```sql
ALTER TABLE sessions
ADD COLUMN stt_provider VARCHAR(20) NOT NULL DEFAULT 'whisper';
```

---

### 3. 後端

#### 3-1 目錄結構

```
app/services/stt/
 ├─ base.py             # ISTTProvider 介面
 ├─ whisper_provider.py # 舊 SimpleAudioTranscriptionService 移入
 ├─ gemini_provider.py  # 全新實作
 └─ factory.py          # get_provider(session_id)
```

#### 3-2 介面 `base.py`

```python
class ISTTProvider(ABC):
    @abstractmethod
    async def transcribe(self, webm: bytes, session_id: UUID, chunk_seq: int) -> dict: ...
    @abstractmethod
    def name(self) -> str: ...
    @abstractmethod
    def max_rpm(self) -> int: ...
```

#### 3-3 Gemini 實作（核心片段）

```python
class GeminiProvider(ISTTProvider):
    def __init__(self):
        self.model = GenerativeModel("gemini-2.5-pro-preview",
                                     api_key=settings.GEMINI_API_KEY)

    async def transcribe(self, webm: bytes, session_id: UUID, chunk_seq: int):
        pcm = await ffmpeg_webm_to_pcm(webm)          # 共用轉檔工具
        b64 = base64.b64encode(pcm).decode()
        prompt = settings.GEMINI_PROMPT
        res = await self.model.generate_content_async(
            contents=[{"role":"user","parts":[
              {"text": prompt},
              {"audio":{"mime_type":"audio/wav","data":b64}}
            ]}]
        )
        text = res.text.strip()
        return {"text": text,
                "start_offset": 0,
                "end_offset": 0}      # Gemini 無段落 → 0~D

    def name(self):     return "gemini"
    def max_rpm(self):  return settings.GEMINI_MAX_REQUESTS
```

#### 3-4 Factory

```python
def get_provider(session_id: UUID) -> ISTTProvider:
    provider = cache.get(session_id)    # 簡易 LRU
    if provider: return provider

    record = supabase.table("sessions")\
        .select("stt_provider").eq("id", str(session_id)).single().execute()
    name = record.data["stt_provider"]
    if name == "gemini":
        provider = GeminiProvider()
    else:
        provider = WhisperProvider()
    cache[session_id] = provider
    return provider
```

#### 3-5 QueueManager 整合

```python
provider = get_provider(session_id)
rate_limiter = SlidingWindowRateLimiter(max_requests=provider.max_rpm())
result = await provider.transcribe(webm, session_id, chunk_seq)
```

> 🎯 `transcript_segment` JSON 增加 `"provider": "gemini" | "whisper"` （供前端顯示小徽章）。

---

### 4. API

| Method | Path                          | Body/Query                                                       | 說明                                                             |
| ------ | ----------------------------- | ---------------------------------------------------------------- | ---------------------------------------------------------------- |
| POST   | `/api/session`                | `{ "type":"recording", "title":"...", "stt_provider":"gemini" }` | 多一個 `stt_provider` 欄位，預設 `settings.STT_PROVIDER_DEFAULT` |
| PATCH  | `/api/session/{sid}/provider` | `{ "stt_provider":"whisper" }`                                   | (可選) 會話中途切換，僅在 *尚未上傳音檔* 時允許                  |

---

### 5. 前端

#### 5-1 UI

1. `SettingsDrawer` → 新增「語音轉文字引擎」選項  
   - `Whisper (Azure) / Gemini 2.5 Pro (Vertex AI)`
2. 點擊「更換」開 `ProviderSelectModal`  
   - radio + Save  
3. 選定後：
   - 若尚未有 session → 存 localStorage, `useAppStore.setProvider`
   - 若已有 active session → 呼叫 `PATCH /provider`

#### 5-2 Zustand Store

```ts
type STTProvider = 'whisper' | 'gemini'

provider: STTProvider
setProvider: (p: STTProvider)=> set({ provider:p })
```

#### 5-3 開始錄音流程

```ts
await ensureFreshRecordingSession(
  { title, stt_provider: get().provider }   // 傳到後端
)
```

#### 5-4 Transcript UI

在字幕列加一個小 tag：

```jsx
{entry.provider === 'gemini' && <Badge>G</Badge>}
```

---

### 6. 測試

| 類型             | Case                                        | 斷言                                 |
| ---------------- | ------------------------------------------- | ------------------------------------ |
| unit (MSW)       | POST `/session` with `stt_provider=gemini`  | 回 201, body.stt_provider = gemini   |
| e2e (Playwright) | 切到 Gemini 錄 30 s                         | UI 出現 provider 標籤 & 字幕順序正確 |
| backend          | GeminiProvider.transcribe() mock Base64 Wav | 回傳 dict.text ≠ ''                  |

---

### 7. 文件（README 範片段）

```md
### ⚙️ 切換 STT Provider

.env
```
| key                  | whisper | gemini                                |
| -------------------- | ------- | ------------------------------------- |
| STT_PROVIDER_DEFAULT | whisper | gemini                                |
| GEMINI_ENDPOINT      | –       | us-central1-aiplatform.googleapis.com |
| GEMINI_API_KEY       | –       | <your-gcp-key>                        |

在 UI → Settings → STT Provider 可 Runtime 切換。
```

---

完成以上 Checklist（#0 – #10 為 **必需**），即可在同一支 App 內自由切換 Whisper 與 Gemini 2.5 Pro 作為轉錄引擎。



# END FILE CONTENTS


# File: frontend/components/ui/command.tsx

"use client"

import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

const CommandDialog = ({ children, ...props }: DialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}


# END FILE CONTENTS


# File: .cursor/rules/react.mdc

---
description:
globs: *.js,*.jsx,*.ts,*.tsx
alwaysApply: false
---
<!-- Source: https://github.com/sanjeed5/awesome-cursor-rules-mdc/blob/main/rules-mdc/react.mdc -->

# React Best Practices: A Comprehensive Guide

This document outlines the best practices for developing React applications, covering various aspects from code organization to security and testing. Following these guidelines leads to more maintainable, scalable, and performant applications.

## 1. Code Organization and Structure

### 1.1 Directory Structure

A well-defined directory structure is crucial for maintainability. Here's a recommended structure:


src/
  ├── components/
  │   ├── Button/
  │   │   ├── Button.jsx
  │   │   ├── Button.module.css
  │   │   └── Button.test.jsx
  │   ├── Input/
  │   │   ├── Input.jsx
  │   │   ├── Input.module.css
  │   │   └── Input.test.jsx
  │   └── ...
  ├── contexts/
  │   ├── AuthContext.jsx
  │   └── ThemeContext.jsx
  ├── hooks/
  │   ├── useAuth.js
  │   └── useTheme.js
  ├── pages/
  │   ├── Home.jsx
  │   ├── About.jsx
  │   └── ...
  ├── services/
  │   ├── api.js
  │   └── auth.js
  ├── utils/
  │   ├── helpers.js
  │   └── validators.js
  ├── App.jsx
  ├── index.jsx
  └── ...


-   **`components/`**: Reusable UI components.
    -   Each component has its own directory containing the component file, associated styles (using CSS modules), and tests.
-   **`contexts/`**: React context providers.
-   **`hooks/`**: Custom React hooks.
-   **`pages/`**: Top-level components representing different routes or views.
-   **`services/`**: API interaction logic.
-   **`utils/`**: Utility functions.

### 1.2 File Naming Conventions

-   **Components**: Use PascalCase (e.g., `MyComponent.jsx`).
-   **Hooks**: Use camelCase prefixed with `use` (e.g., `useMyHook.js`).
-   **Contexts**: Use PascalCase suffixed with `Context` (e.g., `MyContext.jsx`).
-   **Services/Utils**: Use camelCase (e.g., `apiService.js`, `stringUtils.js`).
-   **CSS Modules**: Use `.module.css` or `.module.scss` (e.g., `Button.module.css`).

### 1.3 Module Organization

-   **Co-location**: Keep related files (component, styles, tests) together in the same directory.
-   **Single Responsibility**: Each module should have a clear and specific purpose.
-   **Avoid Circular Dependencies**: Ensure modules don't depend on each other in a circular manner.

### 1.4 Component Architecture

-   **Atomic Design**: Consider using Atomic Design principles (Atoms, Molecules, Organisms, Templates, Pages) to structure components.
-   **Composition over Inheritance**: Favor component composition to reuse code and functionality.
-   **Presentational and Container Components**: Separate UI rendering (presentational) from state management and logic (container).

### 1.5 Code Splitting Strategies

-   **Route-Based Splitting**: Use `React.lazy` and `Suspense` to load components only when a specific route is accessed.  This is very common and improves initial load time.
-   **Component-Based Splitting**: Split large components into smaller chunks that can be loaded on demand.
-   **Bundle Analyzer**: Use a tool like `webpack-bundle-analyzer` to identify large dependencies and optimize bundle size.

## 2. Common Patterns and Anti-patterns

### 2.1 Design Patterns

-   **Higher-Order Components (HOCs)**: Reusable logic that wraps components (use with caution; prefer hooks).
-   **Render Props**: Sharing code using a prop whose value is a function.
-   **Compound Components**: Components that work together implicitly (e.g., `Tabs`, `Tab`).
-   **Hooks**: Reusable stateful logic that can be shared across functional components.

### 2.2 Recommended Approaches

-   **Form Handling**: Use controlled components with local state or a form library like Formik or React Hook Form.
-   **API Calls**: Use `useEffect` hook to make API calls and manage loading states.
-   **Conditional Rendering**: Use short-circuit evaluation (`&&`) or ternary operators for simple conditions; use separate components for complex scenarios.
-   **List Rendering**: Always provide a unique and stable `key` prop when rendering lists.

### 2.3 Anti-patterns and Code Smells

-   **Direct DOM Manipulation**: Avoid directly manipulating the DOM; let React handle updates.
-   **Mutating State Directly**: Always use `setState` or the state updater function to modify state.
-   **Inline Styles**: Use CSS modules or styled-components for maintainable styles.
-   **Over-Engineering**: Avoid using complex solutions for simple problems.
-   **Prop Drilling**: Passing props through multiple levels of components without them being used.

### 2.4 State Management Best Practices

-   **Local State**: Use `useState` for component-specific state.
-   **Context API**: Use `useContext` for global state accessible to many components, but avoid for very frequently updated data.
-   **Redux/Mobx**: Use these libraries for complex state management in large applications.
-   **Recoil/Zustand**: Lightweight alternatives to Redux, often easier to set up and use.
-   **Immutable Data**: Treat state as immutable to prevent unexpected side effects.

### 2.5 Error Handling Patterns

-   **Error Boundaries**: Wrap components with error boundaries to catch errors during rendering and prevent crashes.
-   **Try-Catch Blocks**: Use try-catch blocks for handling errors in asynchronous operations and event handlers.
-   **Centralized Error Logging**: Implement a centralized error logging service to track errors and improve application stability.

## 3. Performance Considerations

### 3.1 Optimization Techniques

-   **Memoization**: Use `React.memo`, `useMemo`, and `useCallback` to prevent unnecessary re-renders and recalculations.
-   **Virtualization**: Use libraries like `react-window` or `react-virtualized` to efficiently render large lists or tables.
-   **Debouncing/Throttling**: Limit the rate at which functions are executed (e.g., in input fields).
-   **Code Splitting**: Load code on demand using `React.lazy` and `Suspense`.

### 3.2 Memory Management

-   **Avoid Memory Leaks**: Clean up event listeners, timers, and subscriptions in `useEffect`'s cleanup function.
-   **Release Unused Objects**: Avoid holding onto large objects in memory when they are no longer needed.
-   **Garbage Collection**: Understand how JavaScript's garbage collection works and avoid creating unnecessary objects.

### 3.3 Rendering Optimization

-   **Minimize State Updates**: Avoid unnecessary state updates that trigger re-renders.
-   **Batch Updates**: Batch multiple state updates into a single update using `ReactDOM.unstable_batchedUpdates`.
-   **Keys**: Ensure that keys are unique and consistent across renders.

### 3.4 Bundle Size Optimization

-   **Tree Shaking**: Remove unused code during the build process.
-   **Minification**: Reduce the size of JavaScript and CSS files.
-   **Image Optimization**: Compress and optimize images to reduce file size.
-   **Dependency Analysis**: Use tools like `webpack-bundle-analyzer` to identify large dependencies.

### 3.5 Lazy Loading Strategies

-   **Route-Based Lazy Loading**: Load components when a user navigates to a specific route.
-   **Component-Based Lazy Loading**: Load components when they are about to be rendered.
-   **Intersection Observer**: Load components when they become visible in the viewport.

## 4. Security Best Practices

### 4.1 Common Vulnerabilities and Prevention

-   **Cross-Site Scripting (XSS)**: Sanitize user input to prevent malicious code injection.
-   **Cross-Site Request Forgery (CSRF)**: Use anti-CSRF tokens to protect against unauthorized requests.
-   **Denial of Service (DoS)**: Implement rate limiting and request validation to prevent abuse.
-   **Injection Attacks**: Avoid directly embedding user input into database queries or system commands.

### 4.2 Input Validation

-   **Client-Side Validation**: Validate user input in the browser to provide immediate feedback.
-   **Server-Side Validation**: Always validate user input on the server to prevent malicious data.
-   **Sanitize Input**: Sanitize user input to remove potentially harmful characters or code.

### 4.3 Authentication and Authorization

-   **Secure Authentication**: Use secure authentication mechanisms like OAuth 2.0 or JWT.
-   **Role-Based Access Control (RBAC)**: Implement RBAC to control access to resources based on user roles.
-   **Multi-Factor Authentication (MFA)**: Enable MFA to add an extra layer of security.

### 4.4 Data Protection Strategies

-   **Encryption**: Encrypt sensitive data at rest and in transit.
-   **Data Masking**: Mask sensitive data in logs and UI displays.
-   **Regular Backups**: Create regular backups of application data.

### 4.5 Secure API Communication

-   **HTTPS**: Use HTTPS to encrypt communication between the client and the server.
-   **API Keys**: Protect API keys and secrets.
-   **CORS**: Configure Cross-Origin Resource Sharing (CORS) to prevent unauthorized access to APIs.

## 5. Testing Approaches

### 5.1 Unit Testing

-   **Test Components**: Test individual components in isolation.
-   **Testing Library**: Use React Testing Library for UI testing, focusing on user behavior.
-   **Jest**: Use Jest as the test runner.

### 5.2 Integration Testing

-   **Test Component Interactions**: Test how components interact with each other.
-   **Mock API Calls**: Mock API calls to test component behavior in different scenarios.
-   **React Testing Library**: Effective for testing integration points in components.

### 5.3 End-to-End (E2E) Testing

-   **Test Full Application Flows**: Test complete user flows, such as login, registration, and checkout.
-   **Cypress/Playwright**: Use tools like Cypress or Playwright for E2E testing.
-   **Automated Browser Tests**: Automate browser tests to ensure application stability.

### 5.4 Test Organization

-   **Co-locate Tests**: Keep test files close to the components they test (e.g., `Button.test.jsx` in the `Button` directory).
-   **Descriptive Names**: Use descriptive names for test files and test cases.
-   **Test Suites**: Organize tests into logical suites.

### 5.5 Mocking and Stubbing

-   **Mock Modules**: Mock external modules or API calls to isolate components during testing.
-   **Stub Functions**: Stub function implementations to control component behavior.
-   **Jest Mocks**: Utilize Jest's mocking capabilities for effective unit testing.

## 6. Common Pitfalls and Gotchas

### 6.1 Frequent Mistakes

-   **Ignoring Keys in Lists**: Forgetting to provide unique and stable `key` props when rendering lists.
-   **Incorrect State Updates**: Mutating state directly instead of using `setState` or the state updater function.
-   **Missing Dependencies in `useEffect`**: Not including all dependencies in the dependency array of the `useEffect` hook.
-   **Over-Using State**: Storing derived data in state instead of calculating it on demand.

### 6.2 Edge Cases

-   **Asynchronous State Updates**: Handling state updates in asynchronous operations.
-   **Race Conditions**: Preventing race conditions when making multiple API calls.
-   **Handling Errors in Event Handlers**: Properly handling errors in event handlers to prevent crashes.

### 6.3 Version-Specific Issues

-   **React 16 vs. React 17/18**: Understanding differences in lifecycle methods, error handling, and concurrent mode.
-   **Deprecated Features**: Being aware of deprecated features and using recommended alternatives.

### 6.4 Compatibility Concerns

-   **Browser Compatibility**: Ensuring compatibility with different browsers and devices.
-   **Library Compatibility**: Ensuring compatibility between React and other libraries.

### 6.5 Debugging Strategies

-   **React DevTools**: Use React DevTools to inspect component hierarchies, props, and state.
-   **Console Logging**: Use console logging to debug code and track variables.
-   **Breakpoints**: Set breakpoints in the code to step through execution and inspect variables.

## 7. Tooling and Environment

### 7.1 Recommended Development Tools

-   **VS Code**: A popular code editor with excellent React support.
-   **Create React App**: A tool for quickly setting up a new React project.
-   **React DevTools**: A browser extension for inspecting React components.
-   **ESLint**: A linter for enforcing code style and preventing errors.
-   **Prettier**: A code formatter for automatically formatting code.

### 7.2 Build Configuration

-   **Webpack/Vite**: Configure Webpack or Vite to bundle and optimize code.
-   **Babel**: Configure Babel to transpile JavaScript code to older versions.
-   **Environment Variables**: Use environment variables to configure different environments.

### 7.3 Linting and Formatting

-   **ESLint**: Configure ESLint with recommended React rules.
-   **Prettier**: Configure Prettier to automatically format code.
-   **Husky/lint-staged**: Use Husky and lint-staged to run linters and formatters before committing code.

### 7.4 Deployment Best Practices

-   **Static Hosting**: Host static assets on a CDN.
-   **Server-Side Rendering (SSR)**: Use SSR to improve SEO and initial load time.
-   **Continuous Deployment**: Automate the deployment process using CI/CD.

### 7.5 CI/CD Integration

-   **GitHub Actions/GitLab CI**: Use GitHub Actions or GitLab CI to automate testing, linting, and deployment.
-   **Automated Testing**: Run automated tests on every commit or pull request.
-   **Automated Deployment**: Automatically deploy code to production after successful tests.

By following these best practices, React developers can build high-quality, maintainable, and scalable applications that meet the demands of modern web development. Continual education and adaptation to emerging trends in the React ecosystem are crucial for sustained success.


# END FILE CONTENTS


# File: frontend/lib/transcript-manager-adapter.ts

"use client"

import { isFeatureEnabled } from './feature-flags'

/**
 * TranscriptManager 適配器
 *
 * 根據功能旗標 `useRefactoredTranscriptManager` 選擇使用：
 * - 新的重構實現（transcript-manager-new.ts）
 * - 舊的實現（transcript-manager.ts）
 *
 * 這允許我們進行安全的漸進式切換和測試
 */

// 定義通用介面，確保新舊實現兼容
export interface ITranscriptManager {
  connect(sessionId: string): Promise<void>
  disconnect(sessionId: string): Promise<void>
  disconnectAll(): Promise<void>
  isConnected(sessionId: string): boolean
  getConnectionCount(): number
}

let managerInstance: ITranscriptManager | null = null

/**
 * 取得 TranscriptManager 實例
 * 根據功能旗標自動選擇實現
 */
export async function getTranscriptManager(): Promise<ITranscriptManager> {
  const useRefactored = isFeatureEnabled('useRefactoredTranscriptManager')

  console.log(`🎯 [TranscriptManagerAdapter] 使用 ${useRefactored ? '新' : '舊'} 實現`)

  if (useRefactored) {
    // 動態導入新實現
    if (!managerInstance || !(managerInstance as any).isRefactored) {
      const { TranscriptManager } = await import('./transcript-manager-new')
      managerInstance = TranscriptManager.getInstance()
        ; (managerInstance as any).isRefactored = true
      console.log('✅ [TranscriptManagerAdapter] 已載入重構後的 TranscriptManager')
    }
  } else {
    // 動態導入舊實現
    if (!managerInstance || (managerInstance as any).isRefactored) {
      const { transcriptManager } = await import('./transcript-manager')
      managerInstance = transcriptManager
        ; (managerInstance as any).isRefactored = false
      console.log('✅ [TranscriptManagerAdapter] 已載入原始 TranscriptManager')
    }
  }

  return managerInstance
}

/**
 * 強制重新載入 TranscriptManager（用於功能旗標變更後）
 */
export async function reloadTranscriptManager(): Promise<ITranscriptManager> {
  // 清理現有實例
  if (managerInstance) {
    try {
      await managerInstance.disconnectAll()
    } catch (error) {
      console.warn('⚠️ [TranscriptManagerAdapter] 清理舊實例時發生錯誤:', error)
    }
  }

  managerInstance = null
  return getTranscriptManager()
}

/**
 * 便利函數：取得當前使用的實現類型
 */
export function getCurrentImplementation(): 'refactored' | 'legacy' {
  return isFeatureEnabled('useRefactoredTranscriptManager') ? 'refactored' : 'legacy'
}

/**
 * 便利函數：切換實現並重新載入
 */
export async function switchImplementation(useRefactored: boolean): Promise<ITranscriptManager> {
  const { enableFeature, disableFeature } = await import('./feature-flags')

  if (useRefactored) {
    enableFeature('useRefactoredTranscriptManager')
  } else {
    disableFeature('useRefactoredTranscriptManager')
  }

  return reloadTranscriptManager()
}

// 暴露到 window 供調試使用
if (typeof window !== 'undefined') {
  (window as any).transcriptManagerAdapter = {
    getCurrentImplementation,
    switchToRefactored: () => switchImplementation(true),
    switchToLegacy: () => switchImplementation(false),
    reload: reloadTranscriptManager,
    getManager: getTranscriptManager,
  }

  console.log('🎯 [TranscriptManagerAdapter] 調試介面已暴露到 window.transcriptManagerAdapter')
  console.log('   切換到新實現: window.transcriptManagerAdapter.switchToRefactored()')
  console.log('   切換到舊實現: window.transcriptManagerAdapter.switchToLegacy()')
}


# END FILE CONTENTS


# File: docs/stop-processing-finish-flow.md

# Stop → Processing → Finished 狀態流規格

## 1. 錄音流程狀態流
- 使用者按下 Stop 停止錄音後，AppState 進入 `processing` 狀態，顯示 ProcessingOverlay，WebSocket 連線保持。
- 後端會將尚未完成的音訊切片全部處理完畢，逐一推送 transcript_segment。
- 最後一個切片處理完畢後，後端廣播 `{type: "transcript_complete"}`。
- 前端收到 `transcript_complete`：
  - AppState 轉為 `finished`
  - 斷開 WS 連線
  - 關閉 ProcessingOverlay

## 2. WebSocket 保持原則
- 停止錄音後，前端不立即斷開 transcript WebSocket，必須等收到 `transcript_complete` 才斷線。
- 這樣可確保所有逐字稿片段都能完整收到。

## 3. transcript_complete 處理
- 前端 handleTranscriptMessage 需新增 `transcript_complete` 分支：
  - 轉換狀態為 finished
  - 斷開 WS
  - 標記流程結束

## 4. ProcessingOverlay 顯示規則
- 只在 AppState = `processing` 時顯示。
- Stop → processing → (收到 complete) → finished，Overlay 自動消失。

## 5. 相關環境變數 fallback
- `labelIntervalSec` 需正確 fallback，避免 undefined。

## 6. 後端行為
- 所有 STT provider（whisper/gpt4o/gemini）都需在最後一片段後廣播 `transcript_complete`。
- 已確認 save_and_push_result() 會廣播此訊息。

---

## 測試重點
- Stop 後進入 processing，收到 transcript_complete 進入 finished
- Overlay 只在 processing 顯示
- provider 路徑皆會廣播 transcript_complete 


# END FILE CONTENTS


# File: frontend/test-transcript-integration.js

 

# END FILE CONTENTS


# File: frontend/lib/services/recording-service.ts

"use client"

import { BaseService } from './base-service'
import { IRecordingService, RecordingState } from './interfaces'
import { AudioRecorder, AudioChunk, checkAudioRecordingSupport } from '../audio-recorder'
import { AudioUploadWebSocket, AckMissingMessage } from '../websocket'
import { getAudioChunkIntervalMs, getAudioConfigInfo } from '../config'

/**
 * RecordingService - 錄音管理服務
 *
 * 整合現有的錄音相關邏輯，提供：
 * - 音頻錄製管理（重用 AudioRecorder）
 * - WebSocket 音頻上傳（重用 AudioUploadWebSocket）
 * - 錄音狀態管理
 * - 錯誤處理和重試機制
 * - 心跳監測
 */
export class RecordingService extends BaseService implements IRecordingService {
  protected readonly serviceName = 'RecordingService'

  // 錄音器和 WebSocket 引用
  private audioRecorder: AudioRecorder | null = null
  private audioUploadWs: AudioUploadWebSocket | null = null

  // 錄音狀態
  private recordingState: RecordingState = {
    isRecording: false,
    recordingTime: 0,
    currentSessionId: null,
    error: null
  }

  // 計時器和重試機制
  private recordingTimer: ReturnType<typeof setInterval> | null = null
  private heartbeatTimer: ReturnType<typeof setInterval> | null = null
  private audioChunks: AudioChunk[] = []
  private retryCounts = new Map<number, number>()

  /**
   * 服務初始化
   * 檢查音頻錄製支援度
   */
  async initialize(): Promise<void> {
    this.logInfo('服務初始化開始')

    // 檢查瀏覽器支援度
    const supportCheck = await checkAudioRecordingSupport()
    if (!supportCheck.isSupported) {
      const errorMessage = `音頻錄製不支援: ${supportCheck.error || '未知錯誤'}`
      this.logWarning('瀏覽器支援度檢查失敗', supportCheck.error)
      throw new Error(errorMessage)
    }

    this.logSuccess('瀏覽器支援度檢查通過')
    this.logSuccess('初始化完成')
  }

  /**
   * 服務清理
   */
  async cleanup(): Promise<void> {
    this.logInfo('服務清理開始')

    // 如果正在錄音，先停止
    if (this.recordingState.isRecording) {
      await this.stopRecording()
    }

    // 清理音頻錄製器
    if (this.audioRecorder) {
      this.audioRecorder.cleanup()
      this.audioRecorder = null
    }

    // 清理計時器
    this.clearTimers()

    // 重置狀態
    this.resetRecordingState()

    this.logSuccess('清理完成')
  }

  /**
   * 開始錄音
   * 重用現有的音頻錄製和 WebSocket 上傳邏輯
   */
  async startRecording(sessionId: string): Promise<void> {
    this.logInfo('開始錄音', { sessionId })

    try {
      // 檢查是否已在錄音
      if (this.recordingState.isRecording) {
        this.logWarning('已在錄音中，跳過重複啟動')
        return
      }

      // 重置狀態
      this.resetRecordingState()
      this.recordingState.currentSessionId = sessionId

      // 步驟 1: 初始化音頻錄製器
      this.logInfo('步驟 1: 初始化音頻錄製器')
      const chunkInterval = getAudioChunkIntervalMs()

      console.log('🎯 [RecordingService] 音頻配置', {
        chunkInterval: `${chunkInterval}ms (${chunkInterval / 1000}秒)`,
        mimeType: 'audio/webm;codecs=opus',
        configInfo: getAudioConfigInfo()
      })

      this.audioRecorder = new AudioRecorder({
        chunkInterval, // 使用環境變數配置的切片間隔
        mimeType: 'audio/webm;codecs=opus'
      })

      this.logInfo(`音訊配置: ${getAudioConfigInfo()}`)

      // 設定音頻錄製器事件處理
      this.setupAudioRecorderEvents()

      // 步驟 2: 開始音頻錄製（包含獲取權限）
      this.logInfo('步驟 2: 開始音頻錄製（包含獲取權限）')

      // 步驟 3: 建立音頻上傳 WebSocket
      this.logInfo('步驟 3: 建立音頻上傳 WebSocket')
      this.audioUploadWs = new AudioUploadWebSocket(sessionId)

      // 設定 WebSocket 事件處理
      this.setupWebSocketEvents()

      // 連接 WebSocket
      await this.audioUploadWs.connect()

      // 驗證 WebSocket 連接
      if (!this.audioUploadWs.isConnected) {
        throw new Error('音頻上傳 WebSocket 連接失敗')
      }

      // 步驟 4: 啟動心跳機制
      this.logInfo('步驟 4: 啟動心跳機制')
      this.startHeartbeat()

      // 步驟 5: 開始錄音
      this.logInfo('步驟 5: 開始音頻錄製')
      await this.audioRecorder.start((chunk: AudioChunk) => {
        this.handleAudioChunk(chunk)
      })

      // 步驟 6: 啟動錄音計時器
      this.logInfo('步驟 6: 啟動錄音計時器')
      this.startRecordingTimer()

      // 更新錄音狀態
      this.recordingState.isRecording = true
      this.recordingState.error = null

      this.logSuccess('錄音啟動成功', {
        sessionId,
        chunkConfig: getAudioConfigInfo(),
        mimeType: 'audio/webm;codecs=opus'
      })

    } catch (error) {
      // 錯誤時清理資源
      await this.cleanupRecordingResources()
      this.recordingState.error = error instanceof Error ? error.message : '開始錄音失敗'
      this.handleError('開始錄音', error)
    }
  }

  /**
   * 停止錄音
   * 保持 WebSocket 連接以接收剩餘的處理結果
   */
  async stopRecording(): Promise<void> {
    this.logInfo('停止錄音')

    try {
      // 更新狀態
      this.recordingState.isRecording = false

      // 停止音頻錄製器
      if (this.audioRecorder) {
        this.audioRecorder.stop()
        this.logInfo('音頻錄製器已停止')
      }

      // 停止計時器
      this.clearTimers()

      // 清理音頻錄製器（保留 WebSocket 連接）
      if (this.audioRecorder) {
        this.audioRecorder.cleanup()
        this.audioRecorder = null
      }

      // 斷開音頻上傳 WebSocket
      if (this.audioUploadWs) {
        this.audioUploadWs.disconnect()
        this.audioUploadWs = null
      }

      this.logSuccess('錄音停止成功', {
        sessionId: this.recordingState.currentSessionId,
        recordingTime: this.recordingState.recordingTime
      })

    } catch (error) {
      this.recordingState.error = error instanceof Error ? error.message : '停止錄音失敗'
      this.handleError('停止錄音', error)
    }
  }

  /**
   * 取得當前錄音狀態
   */
  getRecordingState(): RecordingState {
    return { ...this.recordingState }
  }

  /**
   * 檢查是否正在錄音
   */
  isRecording(): boolean {
    return this.recordingState.isRecording
  }

  /**
   * 取得錄音時間（秒）
   */
  getRecordingTime(): number {
    console.log('⏰ [RecordingService] getRecordingTime', this.recordingState.recordingTime)
    return this.recordingState.recordingTime
  }

  /**
   * 設定音頻錄製器事件處理
   */
  private setupAudioRecorderEvents(): void {
    if (!this.audioRecorder) return

    // 處理錄製錯誤
    this.audioRecorder.onError((error: Error) => {
      this.logWarning('音頻錄製器錯誤', error.message)
      this.recordingState.error = error.message
    })

    // 處理狀態變化
    this.audioRecorder.onStateChange((state) => {
      this.logInfo('音頻錄製器狀態變化', state)
    })
  }

  /**
   * 設定 WebSocket 事件處理
   */
  private setupWebSocketEvents(): void {
    if (!this.audioUploadWs) return

    // 處理 ACK/Missing 訊息
    this.audioUploadWs.onAckMissing((data: AckMissingMessage) => {
      this.handleAckMissing(data)
    })

    // 處理 WebSocket 關閉
    this.audioUploadWs.onClose((event) => {
      this.logWarning('音頻上傳 WebSocket 連接關閉', {
        code: event.code,
        reason: event.reason
      })
    })
  }

  /**
   * 處理音頻切片
   * 儲存切片並上傳
   */
  private handleAudioChunk(chunk: AudioChunk): void {
    console.log('🎤 [RecordingService] 收到音頻切片', {
      sequence: chunk.sequence,
      size: chunk.blob.size,
      duration: chunk.duration,
      timestamp: new Date().toISOString()
    })

    this.logInfo('收到音頻切片', {
      sequence: chunk.sequence,
      size: chunk.blob.size,
      duration: chunk.duration
    })

    // 儲存切片供重傳使用
    this.audioChunks[chunk.sequence] = chunk

    // 如果 WebSocket 已連接，立即上傳
    if (this.audioUploadWs?.isConnected) {
      console.log('📤 [RecordingService] 準備上傳音頻切片', {
        sequence: chunk.sequence,
        wsState: this.audioUploadWs.readyState,
        wsUrl: `/ws/upload_audio/${this.recordingState.currentSessionId}`
      })

      this.audioUploadWs.uploadAudioChunk(chunk.blob)

      console.log('✅ [RecordingService] 音頻切片已送出', {
        sequence: chunk.sequence,
        size: chunk.blob.size,
        time: new Date().toISOString()
      })

      this.logInfo('音頻切片已上傳', { sequence: chunk.sequence })
    } else {
      console.error('❌ [RecordingService] WebSocket 未連接，無法上傳音頻切片', {
        sequence: chunk.sequence,
        wsState: this.audioUploadWs?.readyState || 'null',
        isConnected: this.audioUploadWs?.isConnected || false
      })

      this.logWarning('WebSocket 未連接，無法上傳音頻切片', { sequence: chunk.sequence })
    }
  }

  /**
   * 處理 ACK/Missing 訊息
   * 實現音頻切片重傳機制
   */
  private handleAckMissing(data: AckMissingMessage): void {
    this.logInfo('收到 ACK/Missing 訊息', {
      ack: data.ack,
      missing: data.missing
    })

    if (data.missing.length > 0) {
      this.logWarning('檢測到遺失的音頻切片，準備重傳', data.missing)

      // 重傳遺失的切片
      data.missing.forEach(sequence => {
        const retryCount = this.retryCounts.get(sequence) ?? 0

        if (retryCount < 5) { // 最多重傳 5 次
          this.retryCounts.set(sequence, retryCount + 1)

          // 尋找對應的音頻切片進行重傳
          if (this.audioChunks[sequence]) {
            this.logInfo('重傳音頻切片', {
              sequence,
              retryCount: retryCount + 1,
              maxRetries: 5
            })
            this.audioUploadWs?.uploadAudioChunk(this.audioChunks[sequence].blob)
          } else {
            this.logWarning('找不到要重傳的音頻切片', { sequence })
          }
        } else {
          this.logWarning('音頻切片重傳次數已達上限', {
            sequence,
            maxRetries: 5
          })
        }
      })
    }
  }

  /**
   * 啟動錄音計時器
   */
  private startRecordingTimer(): void {
    this.clearRecordingTimer()
    this.recordingState.recordingTime = 0

    console.log('⏱️ [RecordingService] 計時器啟動')
    this.recordingTimer = setInterval(() => {
      this.recordingState.recordingTime += 1

      // 每 30 秒記錄一次錄音時間
      if (this.recordingState.recordingTime % 30 === 0) {
        this.logInfo('錄音進行中', {
          recordingTime: this.recordingState.recordingTime,
          minutes: Math.floor(this.recordingState.recordingTime / 60)
        })
      }
    }, 1000)
  }

  /**
   * 啟動心跳機制
   */
  private startHeartbeat(): void {
    this.clearHeartbeatTimer()

    this.heartbeatTimer = setInterval(() => {
      if (this.audioUploadWs?.isConnected) {
        this.audioUploadWs.send(JSON.stringify({
          type: 'heartbeat',
          timestamp: Date.now()
        }))
        this.logInfo('發送心跳訊號')
      }
    }, 30000) // 每 30 秒發送一次心跳
  }

  /**
   * 清理所有計時器
   */
  private clearTimers(): void {
    this.clearRecordingTimer()
    this.clearHeartbeatTimer()
  }

  /**
   * 清理錄音計時器
   */
  private clearRecordingTimer(): void {
    if (this.recordingTimer) {
      clearInterval(this.recordingTimer)
      this.recordingTimer = null
      console.log('⏹️ [RecordingService] 計時器清除')
    }
  }

  /**
   * 清理心跳計時器
   */
  private clearHeartbeatTimer(): void {
    if (this.heartbeatTimer) {
      clearInterval(this.heartbeatTimer)
      this.heartbeatTimer = null
    }
  }

  /**
   * 重置錄音狀態
   */
  private resetRecordingState(): void {
    this.recordingState = {
      isRecording: false,
      recordingTime: 0,
      currentSessionId: null,
      error: null
    }
    this.audioChunks = []
    this.retryCounts.clear()
  }

  /**
   * 清理錄音相關資源
   * 錯誤處理時使用
   */
  private async cleanupRecordingResources(): Promise<void> {
    try {
      // 停止音頻錄製器
      if (this.audioRecorder) {
        this.audioRecorder.stop()
        this.audioRecorder.cleanup()
        this.audioRecorder = null
      }

      // 關閉 WebSocket 連接
      if (this.audioUploadWs) {
        this.audioUploadWs.disconnect()
        this.audioUploadWs = null
      }

      // 清理計時器
      this.clearTimers()

      // 重置狀態
      this.recordingState.isRecording = false

      this.logInfo('錄音資源清理完成')
    } catch (error) {
      this.logWarning('清理錄音資源時發生錯誤', error)
    }
  }

  /**
   * 獲取服務詳細狀態
   * 擴展基礎狀態，包含錄音特定信息
   */
  async getDetailedStatus(): Promise<RecordingServiceStatus> {
    const baseStatus = this.getStatus()
    const supportCheck = await checkAudioRecordingSupport()

    return {
      ...baseStatus,
      recordingState: this.getRecordingState(),
      audioSupport: {
        supported: supportCheck.isSupported,
        errors: supportCheck.error ? [supportCheck.error] : []
      },
      audioRecorderState: this.audioRecorder?.currentState ?? null,
      webSocketConnected: this.audioUploadWs?.isConnected ?? false,
      chunksCount: this.audioChunks.length,
      retryCount: Array.from(this.retryCounts.values()).reduce((sum, count) => sum + count, 0)
    }
  }
}

/**
 * RecordingService 詳細狀態介面
 */
export interface RecordingServiceStatus {
  serviceName: string
  isInitialized: boolean
  isRunning: boolean
  timestamp: string
  recordingState: RecordingState
  audioSupport: {
    supported: boolean
    errors: string[]
  }
  audioRecorderState: string | null
  webSocketConnected: boolean
  chunksCount: number
  retryCount: number
}


# END FILE CONTENTS


# File: .gptree_config

# GPTree Local Config
version: 2

# Whether to use .gitignore
useGitIgnore: true
# File types to include (e.g., .py,.js)
includeFileTypes: *
# File types to exclude when includeFileTypes is '*'
excludeFileTypes: 
# Output file name
outputFile: gptree_output.txt
# Whether to output the file locally or relative to the project directory
outputFileLocally: true
# Whether to copy the output to the clipboard
copyToClipboard: false
# Whether to use safe mode (prevent overly large files from being combined)
safeMode: true
# Whether to store the files chosen in the config file (--save, -s)
storeFilesChosen: true
# Whether to include line numbers in the output (--line-numbers, -n)
lineNumbers: false
# Whether to show ignored files in the directory tree
showIgnoredInTree: false
# Whether to show only default ignored files in the directory tree while still respecting gitignore
showDefaultIgnoredInTree: false
# Previously selected files (when using the -s or --save flag previously)
previousFiles: frontend/components/ui/ExportButton.test.tsx,app/ws/__init__.py,app/ws/transcript_feed.py,frontend/hooks/use-session.test.ts,frontend/__tests__/integration/state-transitions.test.ts,frontend/e2e/service-layer-integration.spec.ts,frontend/hooks/use-session.ts,frontend/package.json,frontend/lib/services/__tests__/session-service.test.ts,app/api/__init__.py,app/services/stt/base.py,app/db/supabase_config.py,frontend/lib/__tests__/state-machine.test.ts,frontend/public/placeholder-user.jpg,frontend/components/ui/toast.tsx,frontend/components/ui/toggle-group.tsx,frontend/components/ui/separator.tsx,docs/traceback-debug-spec.md,frontend/hooks/use-app-state-adapter.ts,app/api/notes.py,app/db/database.py,app/services/azure_whisper.py,.gptree_config,app/services/stt/factory.py,frontend/components/ui/carousel.tsx,frontend/hooks/use-recording-adapter.ts,frontend/components/ui/sheet.tsx,frontend/lib/services/__tests__/simple-recording-service.test.ts,frontend/components/recording-state.tsx,uv.lock,frontend/components/ui/command.tsx,frontend/utils/export.ts,frontend/components/ui/sidebar.tsx,frontend/constants/providers.ts,app/middleware/__init__.py,frontend/hooks/use-local-draft.ts,frontend/src/test-setup.ts,frontend/README.md,docs/export-transcript-format.md,frontend/components/ui/popover.tsx,.editorconfig,app/services/stt/save_utils.py,app/services/stt/__init__.py,docs/lang-map-refactor.md,frontend/hooks/use-transcript-adapter.ts,PRD.md,frontend/lib/__tests__/initial-state-loader.test.ts,frontend/utils/event-bus.ts,package.json,docs/export-wait-until-completed-20240608.md,frontend/lib/__tests__/segmented-audio-recorder.test.ts,frontend/app/globals.css,app/db/supabase_init.sql,frontend/.eslintrc.json,frontend/components/default-state.tsx,frontend/lib/services/session-service.ts,frontend/e2e/transcript-integration.spec.ts,frontend/lib/services/transcript-service-adapted.ts,frontend/lib/typed-emitter.ts,.dockerignore,app/core/container.py,frontend/components/ui/collapsible.tsx,frontend/types/state-transitions.ts,frontend/components/theme-provider.tsx,frontend/components/ui/textarea.tsx,docs/export-spec.md,frontend/hooks/use-session-adapter.ts,frontend/components/ui/alert.tsx,frontend/components/ui/switch.tsx,frontend/components/recording-active-state.tsx,app/services/__init__.py,frontend/types/websocket-messages.ts,app/api/sessions.py,frontend/tailwind.config.ts,frontend/lib/services/service-registry.ts,frontend/lib/stream/audio-uploader.ts,frontend/lib/__tests__/network-restorer.test.ts,app/core/__init__.py,.cursor/rules/python.mdc,app/lib/prom_helpers.py,frontend/components/ui/slider.tsx,frontend/lib/state-machine.ts,frontend/components/ui/use-mobile.tsx,frontend/components/ui/calendar.tsx,frontend/public/placeholder-logo.svg,app/api/export.py,.cursor/rules/react.mdc,frontend/lib/advanced-audio-recorder.ts,frontend/lib/services/interfaces.ts,app/services/transcript_feed.py,frontend/components/ui/button.tsx,pytest.ini,frontend/hooks/use-session-new.ts,frontend/components/ui/use-toast.ts,frontend/types/app-state.ts,frontend/lib/segmented-audio-recorder.ts,frontend/types/app-state-context.ts,frontend/public/placeholder.svg,frontend/components/provider-context-menu.tsx,app/__init__.py,app/core/webm_header_repairer.py,frontend/components/ui/navigation-menu.tsx,frontend/lib/services/recording-flow-service.ts,frontend/components/ui/accordion.tsx,app/utils/validators.py,frontend/components/ui/input.tsx,frontend/hooks/use-notes.ts,frontend/hooks/use-transcript-new.ts,app/db/__init__.py,e2e/export-api.spec.ts,main.py,app/services/stt/lang_map.py,frontend/components/ui/aspect-ratio.tsx,app/services/stt/gpt4o_provider.py,frontend/components/ui/badge.tsx,app/schemas/note.py,frontend/hooks/use-mobile.tsx,frontend/__tests__/integration/app-state-provider.test.tsx,frontend/__tests__/integration/state-transitions.test.tsx,frontend/components/ui/resizable.tsx,frontend/postcss.config.mjs,.cursor/rules/frontend.mdc,SPEC.md,app/ws/upload_audio.py,frontend/components/NetworkRestorerClient.tsx,frontend/hooks/use-recording-new.ts,frontend/lib/feature-flags.ts,frontend/components/ui/radio-group.tsx,frontend/lib/services/__tests__/session-service-409.test.ts,frontend/components/ui/pagination.tsx,frontend/lib/utils.ts,frontend/e2e/export-api.spec.ts,frontend/lib/__tests__/state-management.test.ts,app/schemas/session.py,frontend/lib/transcript-manager.ts,README.md,frontend/components.json,Todos.md,frontend/lib/services/simple-recording-service.ts,frontend/lib/migration-adapter.ts,app/services/azure_openai_v2.py,frontend/components/ui/sonner.tsx,.env.example,frontend/components/ui/chart.tsx,frontend/app/layout.tsx,frontend/styles/globals.css,frontend/lib/rest-audio-uploader.ts,app/services/stt/gemini_provider.py,docs/export-tdd-tasks.md,frontend/components/ui/breadcrumb.tsx,frontend/utils/time.ts,frontend/components/ui/input-otp.tsx,frontend/components/ui/dropdown-menu.tsx,frontend/app/page.tsx,.cursor/rules/backend.mdc,frontend/lib/services/base-service.ts,docs/stop-processing-finish-flow.md,frontend/e2e/offline-recovery.spec.ts,.cursor/rules/ui-rules/create-prototype.mdc,app/core/ffmpeg.py,frontend/components/ui/scroll-area.tsx,docs/webm-to-wav-gpt4o.md,frontend/lib/api.test.ts,frontend/next.config.mjs,frontend/hooks/use-app-state.ts,app/utils/timer.py,app/utils/timing.py,frontend/components/ui/label.tsx,frontend/lib/services/recording-service.ts,frontend/lib/app-state-reducer.ts,frontend/lib/services/__tests__/recording-service.test.ts,.cursorignore,frontend/lib/transcript-manager-new.ts,frontend/pnpm-lock.yaml,frontend/components/ui/checkbox.tsx,frontend/public/placeholder-logo.png,frontend/components/ui/toaster.tsx,frontend/components/ui/drawer.tsx,frontend/providers/app-state-provider-wrapper.tsx,frontend/study-scriber.tsx,frontend/components/ui/form.tsx,frontend/.env.example,frontend/components/SessionLoadingOverlay.tsx,frontend/test-transcript-integration.js,frontend/hooks/use-app-state-context.ts,frontend/tsconfig.json,app/api/segments.py,frontend/app-store-zustand.ts,frontend/components/ui/avatar.tsx,app/services/r2_client.py,frontend/lib/initial-state-loader.ts,frontend/lib/audio-recorder.ts,frontend/__tests__/integration/websocket-state-sync.test.ts,.cursor/rules/rules.mdc,frontend/lib/stream/__tests__/audio-uploader.test.ts,playwright.config.ts,frontend/components/recording-waiting-state.tsx,frontend/components/ui/table.tsx,app/lib/httpx_timeout.py,frontend/components/upload-status-indicator.tsx,frontend/constants/languages.ts,frontend/lib/__tests__/advanced-audio-recorder.test.ts,frontend/vitest.config.ts,frontend/lib/services/transcript-service.ts,.cursor/rules/ui-rules/shadcn-tailwind-ui-guideline.mdc,frontend/hooks/use-recording.ts,pyproject.toml,frontend/components/ui/select.tsx,frontend/lib/services/service-container.ts,frontend/hooks/use-transcript.ts,pnpm-lock.yaml,frontend/components/ui/tabs.tsx,frontend/lib/api.ts,frontend/components/ui/toggle.tsx,frontend/lib/__tests__/migration-adapter.test.ts,frontend/lib/__tests__/rest-audio-uploader-409.test.ts,frontend/lib/interfaces.ts,app/core/audio_vad.py,app/utils/__init__.py,frontend/components/ui/skeleton.tsx,frontend/hooks/use-app-state-new.ts,frontend/hooks/use-toast.ts,docs/skip-silence-spec.md,frontend/lib/simple-audio-recorder.ts,frontend/refresh.ts,app/services/stt/interfaces.py,app/core/config.py,frontend/hooks/useNetworkRestorer.ts,frontend/components/ui/hover-card.tsx,docs/auto-retry-upload-spec.md,frontend/components/waiting-state.tsx,frontend/components/ui/ExportButton.tsx,.cursor/rules/playwright-e2e-testing.mdc,frontend/components/ui/dialog.tsx,frontend/components/ui/context-menu.tsx,frontend/lib/config.ts,frontend/components/ui/menubar.tsx,frontend/lib/app-store-zustand.ts,app/lib/rate_limit.py,frontend/lib/services/__tests__/recording-flow-service.test.ts,docs/ADD_GEMINI.md,frontend/components/ui/alert-dialog.tsx,frontend/components/ui/card.tsx,frontend/components/ui/tooltip.tsx,app/schemas/__init__.py,app/lib/settings_utils.py,frontend/lib/services/__tests__/transcript-service.test.ts,frontend/components/finish-state.tsx,app/services/stt/whisper_provider.py,frontend/lib/websocket.ts,frontend/lib/transcript-manager-adapter.ts,frontend/public/placeholder.jpg,frontend/lib/services/index.ts,frontend/playwright.config.ts,frontend/components/ui/progress.tsx,frontend/lib/app-store.ts


# END FILE CONTENTS


# File: .dockerignore

frontend/
.git/
node_modules/
__pycache__/
*.log
*.md
.venv
.serena
.cursor
.vscode


# END FILE CONTENTS


# File: frontend/lib/services/transcript-service.ts

"use client"

import { BaseService } from './base-service'
import { ITranscriptService, TranscriptMessage } from './interfaces'
import { transcriptManager } from '../transcript-manager'

/**
 * 逐字稿服務資訊介面
 */
interface TranscriptServiceInfo {
    serviceName: string
    isInitialized: boolean
    isRunning: boolean
    connectedSessions: string[]
    activeListeners: Record<string, number>
    totalConnections: number
    transcriptManagerConnections: number
}

/**
 * TranscriptService - 逐字稿服務
 *
 * 職責：
 * - 封裝 TranscriptManager 的 API 為服務層接口
 * - 提供統一的逐字稿連接和消息處理
 * - 保持 TranscriptManager 的獨立性和 WebSocket 重連機制
 * - 支持多會話的逐字稿管理
 */
export class TranscriptService extends BaseService implements ITranscriptService {
    protected readonly serviceName = 'TranscriptService'

    private connectedSessions: Set<string> = new Set()
    private sessionListeners: Map<string, Set<(message: TranscriptMessage) => void>> = new Map()

    /**
     * 初始化服務
     */
    async initialize(): Promise<void> {
        this.logInfo('初始化逐字稿服務')
        // TranscriptManager 是 Singleton，無需特別初始化
    }

    /**
     * 清理服務資源
     */
    async cleanup(): Promise<void> {
        this.logInfo('清理逐字稿服務資源')

        // 斷開所有連接
        const sessionIds = Array.from(this.connectedSessions)
        for (const sessionId of sessionIds) {
            await this.disconnect(sessionId)
        }

        this.connectedSessions.clear()
        this.sessionListeners.clear()
    }

    /**
     * 連接逐字稿服務
     */
    async connect(sessionId: string): Promise<void> {
        if (!this.isRunning) {
            throw new Error('TranscriptService 尚未啟動，請先調用 start()')
        }

        try {
            this.logInfo(`連接逐字稿服務: ${sessionId}`)

            // 使用 TranscriptManager 建立連接
            await transcriptManager.connect(sessionId)

            // 記錄連接狀態
            this.connectedSessions.add(sessionId)

            this.logSuccess(`逐字稿服務連接成功: ${sessionId}`)
        } catch (error) {
            this.handleError(`逐字稿服務連接失敗: ${sessionId}`, error)
        }
    }

    /**
     * 斷開逐字稿服務
     */
    async disconnect(sessionId?: string): Promise<void> {
        try {
            if (sessionId) {
                this.logInfo(`斷開逐字稿服務: ${sessionId}`)

                // 移除所有監聽器
                const listeners = this.sessionListeners.get(sessionId)
                if (listeners) {
                    listeners.forEach(callback => {
                        transcriptManager.removeListener(sessionId, callback)
                    })
                    this.sessionListeners.delete(sessionId)
                }

                // 斷開連接
                await transcriptManager.disconnect(sessionId)
                this.connectedSessions.delete(sessionId)

                this.logSuccess(`逐字稿服務斷開成功: ${sessionId}`)
            } else {
                // 斷開所有連接
                this.logInfo('斷開所有逐字稿服務連接')
                const sessionIds = Array.from(this.connectedSessions)
                for (const id of sessionIds) {
                    await this.disconnect(id)
                }
            }
        } catch (error) {
            this.handleError(`斷開逐字稿服務失敗: ${sessionId || 'all'}`, error)
        }
    }

    /**
     * 添加逐字稿監聽器
     */
    addTranscriptListener(sessionId: string, callback: (message: TranscriptMessage) => void): void {
        if (!this.isRunning) {
            throw new Error('TranscriptService 尚未啟動，請先調用 start()')
        }

        this.logInfo(`添加逐字稿監聽器: ${sessionId}`)

        // 記錄監聽器
        if (!this.sessionListeners.has(sessionId)) {
            this.sessionListeners.set(sessionId, new Set())
        }
        this.sessionListeners.get(sessionId)!.add(callback)

        // 添加到 TranscriptManager
        transcriptManager.addListener(sessionId, callback)
    }

    /**
     * 移除逐字稿監聽器
     */
    removeTranscriptListener(sessionId: string, callback: (message: TranscriptMessage) => void): void {
        this.logInfo(`移除逐字稿監聽器: ${sessionId}`)

        // 從記錄中移除
        const listeners = this.sessionListeners.get(sessionId)
        if (listeners) {
            listeners.delete(callback)
            if (listeners.size === 0) {
                this.sessionListeners.delete(sessionId)
            }
        }

        // 從 TranscriptManager 移除
        transcriptManager.removeListener(sessionId, callback)
    }

    /**
     * 檢查連接狀態
     */
    isConnected(sessionId: string): boolean {
        return transcriptManager.isConnected(sessionId)
    }

    /**
     * 清除逐字稿
     *
     * 注意：此方法不會清除 TranscriptManager 中的數據，
     * 因為 TranscriptManager 是無狀態的，只負責 WebSocket 連接。
     * 實際的逐字稿數據應該由狀態管理層處理。
     */
    clearTranscripts(sessionId: string): void {
        this.logInfo(`清除逐字稿: ${sessionId}`)
        // TranscriptManager 不儲存逐字稿數據，這個方法主要用於觸發狀態清除
        // 實際的清除邏輯應該在狀態管理層實現
    }

    /**
     * 取得服務狀態資訊
     */
    getServiceInfo(): TranscriptServiceInfo {
        return {
            serviceName: this.serviceName,
            isInitialized: this.isInitialized,
            isRunning: this.isRunning,
            connectedSessions: Array.from(this.connectedSessions),
            activeListeners: Object.fromEntries(
                Array.from(this.sessionListeners.entries()).map(([sessionId, listeners]) => [
                    sessionId,
                    listeners.size
                ])
            ),
            totalConnections: this.connectedSessions.size,
            transcriptManagerConnections: transcriptManager.getConnectionCount()
        }
    }
}


# END FILE CONTENTS


# File: frontend/lib/migration-adapter.ts

"use client"

import { useEffect, useRef, useCallback } from "react"
import { AppData, AppState, SessionStatus, SessionType, TranscriptEntry } from "../types/app-state"
import { AppStateContextValue } from "../types/app-state-context"
import { isFeatureEnabled } from "./feature-flags"

// Legacy Hook 介面定義
export interface LegacyAppStateHook {
    appData: AppData
    isLoading: boolean
    error: string | null
    startRecording: (title?: string) => Promise<void>
    stopRecording: () => Promise<void>
    newNote: () => Promise<void>
    saveLocalDraft: (content: string) => void
    session: { id: string; status: SessionStatus; type: SessionType } | null
    recordingError: string | null
    transcriptError: string | null
    createNoteSession: (title?: string) => Promise<void>
    sessionLoading: boolean
}

// 狀態同步橋接器
export class StateSyncBridge {
    private newContext: AppStateContextValue | null = null
    private legacyHook: LegacyAppStateHook | null = null
    private syncEnabled: boolean = true
    private lastSyncTimestamp: number = 0
    private syncInProgress: boolean = false

    constructor() {
        this.exposeToWindow()
    }

    // 註冊新 Context
    registerNewContext(context: AppStateContextValue): void {
        this.newContext = context
        console.log('🔄 [StateSyncBridge] 新 Context 已註冊')
        this.performSync('new-context-registered')
    }

    // 註冊舊 Hook
    registerLegacyHook(hook: LegacyAppStateHook): void {
        this.legacyHook = hook
        console.log('🔄 [StateSyncBridge] 舊 Hook 已註冊')
        this.performSync('legacy-hook-registered')
    }

    // 執行狀態同步
    private performSync(trigger: string): void {
        if (!this.syncEnabled || this.syncInProgress) return
        if (!this.newContext || !this.legacyHook) return

        this.syncInProgress = true
        const syncTimestamp = Date.now()

        try {
            // 避免過於頻繁的同步
            if (syncTimestamp - this.lastSyncTimestamp < 100) {
                this.syncInProgress = false
                return
            }

            console.log(`🔄 [StateSyncBridge] 執行狀態同步 (觸發: ${trigger})`)

            // 決定同步方向：根據功能開關決定誰是主要數據源
            const useNewAsSource = isFeatureEnabled('useNewStateManagement')

            if (useNewAsSource) {
                this.syncFromNewToLegacy()
            } else {
                this.syncFromLegacyToNew()
            }

            this.lastSyncTimestamp = syncTimestamp
        } catch (error) {
            console.error('🔄 [StateSyncBridge] 同步失敗:', error)
        } finally {
            this.syncInProgress = false
        }
    }

    // 從新系統同步到舊系統
    private syncFromNewToLegacy(): void {
        if (!this.newContext || !this.legacyHook) return

        const newData = this.newContext.appData
        const legacyData = this.legacyHook.appData

        // 檢查是否需要同步
        const needsSync = this.detectDifferences(newData, legacyData)

        if (needsSync.length > 0) {
            console.log('🔄 [StateSyncBridge] 從新系統同步到舊系統:', needsSync)
            // 注意：這裡不能直接修改 legacyData，需要透過 legacy hook 的方法
            // 實際實作時需要根據 legacy hook 的 API 來同步
        }
    }

    // 從舊系統同步到新系統
    private syncFromLegacyToNew(): void {
        if (!this.newContext || !this.legacyHook) return

        const legacyData = this.legacyHook.appData
        const newData = this.newContext.appData

        // 檢查是否需要同步
        const needsSync = this.detectDifferences(legacyData, newData)

        if (needsSync.length > 0) {
            console.log('🔄 [StateSyncBridge] 從舊系統同步到新系統:', needsSync)

            // 同步各個欄位
            if (needsSync.includes('state')) {
                this.newContext.setState(legacyData.state)
            }
            if (needsSync.includes('isRecording')) {
                this.newContext.setRecording(legacyData.isRecording)
            }
            if (needsSync.includes('recordingTime')) {
                this.newContext.setRecordingTime(legacyData.recordingTime)
            }
            if (needsSync.includes('editorContent')) {
                this.newContext.setEditorContent(legacyData.editorContent)
            }
            if (needsSync.includes('transcriptEntries')) {
                this.newContext.setTranscriptEntries(legacyData.transcriptEntries)
            }
            if (needsSync.includes('session')) {
                this.newContext.setSession(legacyData.session || null)
            }
        }
    }

    // 檢測兩個狀態之間的差異
    private detectDifferences(source: AppData, target: AppData): string[] {
        const differences: string[] = []

        if (source.state !== target.state) {
            differences.push('state')
        }
        if (source.isRecording !== target.isRecording) {
            differences.push('isRecording')
        }
        if (source.recordingTime !== target.recordingTime) {
            differences.push('recordingTime')
        }
        if (source.editorContent !== target.editorContent) {
            differences.push('editorContent')
        }
        if (source.transcriptEntries.length !== target.transcriptEntries.length) {
            differences.push('transcriptEntries')
        }
        if (JSON.stringify(source.session) !== JSON.stringify(target.session)) {
            differences.push('session')
        }

        return differences
    }

    // 啟用/停用同步
    enableSync(): void {
        this.syncEnabled = true
        console.log('🔄 [StateSyncBridge] 狀態同步已啟用')
    }

    disableSync(): void {
        this.syncEnabled = false
        console.log('🔄 [StateSyncBridge] 狀態同步已停用')
    }

    // 手動觸發同步
    manualSync(): void {
        this.performSync('manual-trigger')
    }

    // 取得同步狀態
    getSyncStatus(): { enabled: boolean; lastSync: number; inProgress: boolean } {
        return {
            enabled: this.syncEnabled,
            lastSync: this.lastSyncTimestamp,
            inProgress: this.syncInProgress,
        }
    }

    // 暴露到 window 供調試使用
    private exposeToWindow(): void {
        if (typeof window !== 'undefined') {
            (window as any).stateSyncBridge = {
                enableSync: () => this.enableSync(),
                disableSync: () => this.disableSync(),
                manualSync: () => this.manualSync(),
                getStatus: () => this.getSyncStatus(),
            }

            console.log('🔄 [StateSyncBridge] 調試介面已暴露到 window.stateSyncBridge')
        }
    }
}

// 單例模式
export const stateSyncBridge = new StateSyncBridge()

// Legacy Hook 適配器
export function useLegacyHookAdapter(legacyHook: LegacyAppStateHook): LegacyAppStateHook {
    const hasRegistered = useRef(false)

    useEffect(() => {
        if (!hasRegistered.current && isFeatureEnabled('enableStateSync')) {
            stateSyncBridge.registerLegacyHook(legacyHook)
            hasRegistered.current = true
        }
    }, [legacyHook])

    // 如果啟用新狀態管理，返回適配後的版本
    if (isFeatureEnabled('useNewStateManagement')) {
        // TODO: 返回適配後的版本，這裡暫時返回原版本
        return legacyHook
    }

    return legacyHook
}

// New Context 適配器
export function useNewContextAdapter(newContext: AppStateContextValue): AppStateContextValue {
    const hasRegistered = useRef(false)

    useEffect(() => {
        if (!hasRegistered.current && isFeatureEnabled('enableStateSync')) {
            stateSyncBridge.registerNewContext(newContext)
            hasRegistered.current = true
        }
    }, [newContext])

    return newContext
}

// 混合模式 Hook - 根據功能開關決定使用哪個系統
export function useHybridState(
    legacyHook: LegacyAppStateHook,
    newContext: AppStateContextValue
): LegacyAppStateHook {
    const useNew = isFeatureEnabled('useNewStateManagement')

    // 註冊到同步橋接器
    useEffect(() => {
        if (isFeatureEnabled('enableStateSync')) {
            stateSyncBridge.registerLegacyHook(legacyHook)
            stateSyncBridge.registerNewContext(newContext)
        }
    }, [legacyHook, newContext])

    if (useNew) {
        // 將新 Context 適配為 Legacy Hook 介面
        return {
            appData: newContext.appData,
            isLoading: newContext.isLoading,
            error: newContext.error,
            // TODO: 實作其他方法的適配
            startRecording: legacyHook.startRecording,
            stopRecording: legacyHook.stopRecording,
            newNote: legacyHook.newNote,
            saveLocalDraft: legacyHook.saveLocalDraft,
            session: newContext.appData.session || null,
            recordingError: legacyHook.recordingError,
            transcriptError: legacyHook.transcriptError,
            createNoteSession: legacyHook.createNoteSession,
            sessionLoading: legacyHook.sessionLoading,
        }
    }

    return legacyHook
}


# END FILE CONTENTS


# File: frontend/app-store-zustand.ts

export type AppState =
    | 'default'
    | 'session_creating'
    | 'recording_waiting'
    | 'recording_active'
    | 'processing'
    | 'finished'


# END FILE CONTENTS


# File: frontend/components/ui/breadcrumb.tsx

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:w-3.5 [&>svg]:h-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}


# END FILE CONTENTS


# File: frontend/components/ui/alert-dialog.tsx

"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}


# END FILE CONTENTS


# File: frontend/__tests__/integration/app-state-provider.test.tsx

import { beforeEach, describe, expect, test, vi } from 'vitest'
import { render, screen, act } from '@testing-library/react'
import { createElement } from 'react'
import { AppStateProviderWrapper } from '../../providers/app-state-provider-wrapper'
import { useAppState } from '../../hooks/use-app-state-adapter'
import { featureFlagManager } from '../../lib/feature-flags'

// Mock 外部依賴
vi.mock('../../hooks/use-session-adapter', () => ({
    useSession: vi.fn(() => ({
        currentSession: null,
        isLoading: false,
        error: null,
        createNoteSession: vi.fn(),
        createRecordingSession: vi.fn(),
        upgradeToRecording: vi.fn(),
        finishSession: vi.fn(),
        deleteSession: vi.fn(),
        checkActiveSession: vi.fn(),
    }))
}))

vi.mock('../../hooks/use-recording-adapter', () => ({
    useRecording: vi.fn(() => ({
        isRecording: false,
        recordingTime: 0,
        transcripts: [],
        error: null,
        startRecording: vi.fn(),
        stopRecording: vi.fn(),
        clearTranscripts: vi.fn(),
    }))
}))

vi.mock('../../hooks/use-notes', () => ({
    useNotes: vi.fn(() => ({
        noteContent: '',
        loadNote: vi.fn(),
        clearNote: vi.fn(),
    }))
}))

vi.mock('../../hooks/use-transcript-adapter', () => ({
    useTranscript: vi.fn(() => ({
        isConnected: false,
        error: null,
        autoScrollEnabled: true,
        disconnect: vi.fn(),
        clearTranscripts: vi.fn(),
        enableAutoScroll: vi.fn(),
        disableAutoScroll: vi.fn(),
        scrollToLatest: vi.fn(),
    }))
}))

vi.mock('@/components/ui/use-toast', () => ({
    useToast: vi.fn(() => ({
        toast: vi.fn(),
    }))
}))

// 測試組件
function TestComponent() {
    const { appData, isLoading, error } = useAppState()

    return createElement('div', { 'data-testid': 'test-component' }, [
        createElement('div', { 'data-testid': 'app-state', key: 'state' }, appData.state),
        createElement('div', { 'data-testid': 'is-recording', key: 'recording' }, String(appData.isRecording)),
        createElement('div', { 'data-testid': 'is-loading', key: 'loading' }, String(isLoading)),
        createElement('div', { 'data-testid': 'error', key: 'error' }, error || 'null'),
    ])
}

describe('AppStateProvider 整合測試', () => {
    beforeEach(() => {
        vi.clearAllMocks()
        // 重置功能開關
        featureFlagManager.reset()
        // 清除 localStorage
        localStorage.clear()
    })

    test('在功能開關關閉時應該使用舊系統', () => {
        // 確保功能開關關閉
        featureFlagManager.disable('useNewStateManagement')
        featureFlagManager.disable('useNewAppStateHook')

        render(
            createElement(AppStateProviderWrapper, null,
                createElement(TestComponent)
            )
        )

        // 檢查組件是否正常渲染
        expect(screen.getByTestId('test-component')).toBeInTheDocument()
        expect(screen.getByTestId('app-state')).toHaveTextContent('default')
        expect(screen.getByTestId('is-recording')).toHaveTextContent('false')
        // 注意：舊系統在初始化時可能會有 loading 狀態，這是正常的
        expect(screen.getByTestId('is-loading')).toBeInTheDocument()
        expect(screen.getByTestId('error')).toHaveTextContent('null')
    })

    test('在啟用 useNewStateManagement 時應該使用新系統', () => {
        // 啟用新狀態管理
        featureFlagManager.enable('useNewStateManagement')

        render(
            createElement(AppStateProviderWrapper, null,
                createElement(TestComponent)
            )
        )

        // 檢查組件是否正常渲染
        expect(screen.getByTestId('test-component')).toBeInTheDocument()
        expect(screen.getByTestId('app-state')).toHaveTextContent('default')
        expect(screen.getByTestId('is-recording')).toHaveTextContent('false')
        expect(screen.getByTestId('is-loading')).toHaveTextContent('false')
        expect(screen.getByTestId('error')).toHaveTextContent('null')
    })

    test('在啟用 useNewAppStateHook 時應該使用新系統', () => {
        // 啟用新 AppState Hook
        featureFlagManager.enable('useNewAppStateHook')

        render(
            createElement(AppStateProviderWrapper, null,
                createElement(TestComponent)
            )
        )

        // 檢查組件是否正常渲染
        expect(screen.getByTestId('test-component')).toBeInTheDocument()
        expect(screen.getByTestId('app-state')).toHaveTextContent('default')
        expect(screen.getByTestId('is-recording')).toHaveTextContent('false')
        expect(screen.getByTestId('is-loading')).toHaveTextContent('false')
        expect(screen.getByTestId('error')).toHaveTextContent('null')
    })

    test('Provider 應該能夠包裝多個子組件', () => {
        featureFlagManager.enable('useNewStateManagement')

        function MultipleChildrenTest() {
            return createElement('div', null, [
                createElement(TestComponent, { key: 'child1' }),
                createElement(TestComponent, { key: 'child2' }),
            ])
        }

        render(
            createElement(AppStateProviderWrapper, null,
                createElement(MultipleChildrenTest)
            )
        )

        // 檢查所有子組件都能正常存取狀態
        const components = screen.getAllByTestId('test-component')
        expect(components).toHaveLength(2)

        components.forEach(component => {
            expect(component).toBeInTheDocument()
        })
    })

    test('功能開關切換應該不會影響組件渲染', () => {
        // 開始時關閉功能開關
        featureFlagManager.disable('useNewStateManagement')
        featureFlagManager.disable('useNewAppStateHook')

        const { rerender } = render(
            createElement(AppStateProviderWrapper, null,
                createElement(TestComponent)
            )
        )

        // 檢查初始狀態
        expect(screen.getByTestId('app-state')).toHaveTextContent('default')

        // 啟用功能開關並重新渲染
        act(() => {
            featureFlagManager.enable('useNewStateManagement')
        })

        rerender(
            createElement(AppStateProviderWrapper, null,
                createElement(TestComponent)
            )
        )

        // 檢查狀態仍然正常
        expect(screen.getByTestId('app-state')).toHaveTextContent('default')
        expect(screen.getByTestId('is-recording')).toHaveTextContent('false')
    })
})


# END FILE CONTENTS


# File: frontend/components/ui/toaster.tsx

"use client"

import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}


# END FILE CONTENTS


# File: frontend/lib/services/__tests__/recording-service.test.ts

"use client"

import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest'
import { RecordingService } from '../recording-service'
import { AudioRecorder } from '../../audio-recorder'
import { AudioUploadWebSocket } from '../../websocket'

// Mock AudioRecorder
vi.mock('../../audio-recorder', () => ({
    AudioRecorder: vi.fn().mockImplementation(() => ({
        initialize: vi.fn(),
        startRecording: vi.fn(),
        stopRecording: vi.fn(),
        onChunk: vi.fn(),
        onError: vi.fn(),
    }))
}))

// Mock AudioUploadWebSocket
vi.mock('../../websocket', () => ({
    AudioUploadWebSocket: vi.fn().mockImplementation(() => ({
        connect: vi.fn(),
        disconnect: vi.fn(),
        uploadAudioChunk: vi.fn(),
        onAckMissing: vi.fn(),
        isConnected: false,
        send: vi.fn(),
    }))
}))

// Mock transcriptManager
const mockTranscriptManager = {
    connect: vi.fn(),
    disconnect: vi.fn(),
    addListener: vi.fn(),
    removeListener: vi.fn(),
    isConnected: vi.fn(),
}

vi.mock('../../transcript-manager', () => ({
    transcriptManager: mockTranscriptManager
}))

describe('RecordingService', () => {
    let recordingService: RecordingService
    let mockAudioRecorder: any
    let mockWebSocket: any

    beforeEach(() => {
        recordingService = new RecordingService()
        mockAudioRecorder = new AudioRecorder({})
        mockWebSocket = new AudioUploadWebSocket('')
        vi.clearAllMocks()
    })

    afterEach(() => {
        vi.restoreAllMocks()
    })

    describe('服務初始化', () => {
        it('應該正確初始化 RecordingService', () => {
            expect(recordingService).toBeDefined()
            expect(recordingService['serviceName']).toBe('RecordingService')
        })

        it('應該正確啟動和停止服務', async () => {
            await recordingService.start()
            expect(recordingService['isRunning']).toBe(true)

            await recordingService.stop()
            expect(recordingService['isRunning']).toBe(false)
        })

        it('應該返回初始錄音狀態', () => {
            const state = recordingService.getRecordingState()

            expect(state).toEqual({
                isRecording: false,
                recordingTime: 0,
                currentSessionId: null,
                error: null
            })
        })
    })

    describe('startRecording', () => {
        const sessionId = 'test-session-id'

        beforeEach(() => {
            // Mock browser environment
            Object.defineProperty(global, 'window', {
                value: {
                    addEventListener: vi.fn(),
                    removeEventListener: vi.fn(),
                },
                writable: true
            })
        })

        it('應該成功開始錄音', async () => {
            // Setup mocks
            mockAudioRecorder.initialize.mockResolvedValue(undefined)
            mockAudioRecorder.startRecording.mockResolvedValue(undefined)
            mockWebSocket.connect.mockResolvedValue(undefined)
            mockWebSocket.isConnected = true
            mockTranscriptManager.connect.mockResolvedValue(undefined)
            mockTranscriptManager.isConnected.mockReturnValue(true)

            await recordingService.startRecording(sessionId)

            // Verify AudioRecorder was initialized and started
            expect(AudioRecorder).toHaveBeenCalled()
            expect(mockAudioRecorder.initialize).toHaveBeenCalled()
            expect(mockAudioRecorder.startRecording).toHaveBeenCalled()

            // Verify WebSocket was connected
            expect(AudioUploadWebSocket).toHaveBeenCalledWith(sessionId)
            expect(mockWebSocket.connect).toHaveBeenCalled()

            // Verify transcript manager was connected
            expect(mockTranscriptManager.connect).toHaveBeenCalledWith(sessionId)

            // Verify recording state
            const state = recordingService.getRecordingState()
            expect(state.isRecording).toBe(true)
            expect(state.currentSessionId).toBe(sessionId)
        })

        it('應該處理音頻初始化失敗', async () => {
            const initError = new Error('Microphone permission denied')
            mockAudioRecorder.initialize.mockRejectedValue(initError)

            await expect(recordingService.startRecording(sessionId))
                .rejects.toThrow('Microphone permission denied')

            const state = recordingService.getRecordingState()
            expect(state.isRecording).toBe(false)
            expect(state.error).toBe('Microphone permission denied')
        })

        it('應該處理 WebSocket 連接失敗', async () => {
            mockAudioRecorder.initialize.mockResolvedValue(undefined)
            mockWebSocket.connect.mockRejectedValue(new Error('WebSocket connection failed'))

            await expect(recordingService.startRecording(sessionId))
                .rejects.toThrow('WebSocket connection failed')
        })

        it('應該處理 TranscriptManager 連接失敗', async () => {
            mockAudioRecorder.initialize.mockResolvedValue(undefined)
            mockWebSocket.connect.mockResolvedValue(undefined)
            mockWebSocket.isConnected = true
            mockTranscriptManager.connect.mockRejectedValue(new Error('Transcript connection failed'))

            await expect(recordingService.startRecording(sessionId))
                .rejects.toThrow('Transcript connection failed')
        })

        it('應該在瀏覽器環境檢查失敗時拋出錯誤', async () => {
            // Remove window object to simulate non-browser environment
            delete (global as any).window

            await expect(recordingService.startRecording(sessionId))
                .rejects.toThrow('此功能僅在瀏覽器環境中可用')
        })

        it('應該處理重複開始錄音請求', async () => {
            // Setup successful first recording
            mockAudioRecorder.initialize.mockResolvedValue(undefined)
            mockAudioRecorder.startRecording.mockResolvedValue(undefined)
            mockWebSocket.connect.mockResolvedValue(undefined)
            mockWebSocket.isConnected = true
            mockTranscriptManager.connect.mockResolvedValue(undefined)
            mockTranscriptManager.isConnected.mockReturnValue(true)

            await recordingService.startRecording(sessionId)

            // Try to start recording again
            await expect(recordingService.startRecording('another-session'))
                .rejects.toThrow('錄音已在進行中')
        })
    })

    describe('stopRecording', () => {
        beforeEach(async () => {
            // Setup recording state
            Object.defineProperty(global, 'window', {
                value: {
                    addEventListener: vi.fn(),
                    removeEventListener: vi.fn(),
                },
                writable: true
            })

            mockAudioRecorder.initialize.mockResolvedValue(undefined)
            mockAudioRecorder.startRecording.mockResolvedValue(undefined)
            mockWebSocket.connect.mockResolvedValue(undefined)
            mockWebSocket.isConnected = true
            mockTranscriptManager.connect.mockResolvedValue(undefined)
            mockTranscriptManager.isConnected.mockReturnValue(true)

            await recordingService.startRecording('test-session')
        })

        it('應該成功停止錄音', async () => {
            await recordingService.stopRecording()

            // Verify audio recorder was stopped
            expect(mockAudioRecorder.stopRecording).toHaveBeenCalled()

            // Verify WebSocket was disconnected
            expect(mockWebSocket.disconnect).toHaveBeenCalled()

            // Verify recording state
            const state = recordingService.getRecordingState()
            expect(state.isRecording).toBe(false)
            expect(state.currentSessionId).toBeNull()
        })

        it('應該處理停止錄音錯誤', async () => {
            mockAudioRecorder.stopRecording.mockImplementation(() => {
                throw new Error('Stop recording failed')
            })

            await expect(recordingService.stopRecording())
                .rejects.toThrow('Stop recording failed')
        })

        it('應該在沒有錄音時正常處理停止請求', async () => {
            // Stop recording first
            await recordingService.stopRecording()

            // Try to stop again
            await expect(recordingService.stopRecording()).resolves.not.toThrow()
        })
    })

    describe('錄音狀態管理', () => {
        it('應該正確追蹤錄音時間', async () => {
            // Mock timer
            vi.useFakeTimers()

            Object.defineProperty(global, 'window', {
                value: { addEventListener: vi.fn(), removeEventListener: vi.fn() },
                writable: true
            })

            mockAudioRecorder.initialize.mockResolvedValue(undefined)
            mockAudioRecorder.startRecording.mockResolvedValue(undefined)
            mockWebSocket.connect.mockResolvedValue(undefined)
            mockWebSocket.isConnected = true
            mockTranscriptManager.connect.mockResolvedValue(undefined)
            mockTranscriptManager.isConnected.mockReturnValue(true)

            await recordingService.startRecording('test-session')

            // Advance timer by 5 seconds
            vi.advanceTimersByTime(5000)

            const state = recordingService.getRecordingState()
            expect(state.recordingTime).toBe(5)

            vi.useRealTimers()
        })

        it('應該正確報告錄音狀態', async () => {
            expect(recordingService.isRecording()).toBe(false)

            Object.defineProperty(global, 'window', {
                value: { addEventListener: vi.fn(), removeEventListener: vi.fn() },
                writable: true
            })

            mockAudioRecorder.initialize.mockResolvedValue(undefined)
            mockAudioRecorder.startRecording.mockResolvedValue(undefined)
            mockWebSocket.connect.mockResolvedValue(undefined)
            mockWebSocket.isConnected = true
            mockTranscriptManager.connect.mockResolvedValue(undefined)
            mockTranscriptManager.isConnected.mockReturnValue(true)

            await recordingService.startRecording('test-session')
            expect(recordingService.isRecording()).toBe(true)

            await recordingService.stopRecording()
            expect(recordingService.isRecording()).toBe(false)
        })

        it('應該正確報告錄音時間', () => {
            expect(recordingService.getRecordingTime()).toBe(0)
        })
    })

    describe('音頻切片處理', () => {
        it('應該處理音頻切片上傳', () => {
            const mockChunk = {
                sequence: 1,
                blob: new Blob(['test audio data'], { type: 'audio/webm' })
            }

            // Simulate chunk received
            const chunkHandler = mockAudioRecorder.onChunk.mock.calls[0]?.[0]
            if (chunkHandler) {
                chunkHandler(mockChunk)
            }

            // Verify WebSocket upload was called
            expect(mockWebSocket.uploadAudioChunk).toHaveBeenCalledWith(mockChunk.blob)
        })

        it('應該處理 ACK/Missing 重傳機制', () => {
            const ackMissingData = {
                acknowledged: [1, 2],
                missing: [3, 4]
            }

            // Simulate ACK/Missing message
            const ackHandler = mockWebSocket.onAckMissing.mock.calls[0]?.[0]
            if (ackHandler) {
                ackHandler(ackMissingData)
            }

            // Verify retry logic would be triggered for missing chunks
            expect(ackMissingData.missing).toEqual([3, 4])
        })
    })

    describe('錯誤處理', () => {
        it('應該處理音頻錄製器錯誤', async () => {
            const audioError = new Error('Audio recording error')

            // Simulate audio recorder error
            const errorHandler = mockAudioRecorder.onError.mock.calls[0]?.[0]
            if (errorHandler) {
                errorHandler(audioError)
            }

            const state = recordingService.getRecordingState()
            expect(state.error).toBe('Audio recording error')
        })

        it('應該清除錯誤狀態', () => {
            // Set error state
            recordingService['recordingState'].error = 'Test error'

            // Clear error (this would be called internally)
            recordingService['recordingState'].error = null

            const state = recordingService.getRecordingState()
            expect(state.error).toBeNull()
        })
    })

    describe('資源清理', () => {
        it('應該在錯誤時清理資源', async () => {
            Object.defineProperty(global, 'window', {
                value: { addEventListener: vi.fn(), removeEventListener: vi.fn() },
                writable: true
            })

            mockAudioRecorder.initialize.mockResolvedValue(undefined)
            mockAudioRecorder.startRecording.mockRejectedValue(new Error('Start failed'))

            await expect(recordingService.startRecording('test-session'))
                .rejects.toThrow('Start failed')

            // Verify cleanup was performed
            const state = recordingService.getRecordingState()
            expect(state.isRecording).toBe(false)
            expect(state.currentSessionId).toBeNull()
        })

        it('應該在服務停止時清理所有資源', async () => {
            Object.defineProperty(global, 'window', {
                value: { addEventListener: vi.fn(), removeEventListener: vi.fn() },
                writable: true
            })

            mockAudioRecorder.initialize.mockResolvedValue(undefined)
            mockAudioRecorder.startRecording.mockResolvedValue(undefined)
            mockWebSocket.connect.mockResolvedValue(undefined)
            mockWebSocket.isConnected = true
            mockTranscriptManager.connect.mockResolvedValue(undefined)
            mockTranscriptManager.isConnected.mockReturnValue(true)

            await recordingService.startRecording('test-session')
            await recordingService.stop()

            // Verify all resources are cleaned up
            expect(mockAudioRecorder.stopRecording).toHaveBeenCalled()
            expect(mockWebSocket.disconnect).toHaveBeenCalled()

            const state = recordingService.getRecordingState()
            expect(state.isRecording).toBe(false)
        })
    })

    describe('並發和競爭條件', () => {
        it('應該防止並發錄音操作', async () => {
            Object.defineProperty(global, 'window', {
                value: { addEventListener: vi.fn(), removeEventListener: vi.fn() },
                writable: true
            })

            mockAudioRecorder.initialize.mockResolvedValue(undefined)
            mockAudioRecorder.startRecording.mockResolvedValue(undefined)
            mockWebSocket.connect.mockResolvedValue(undefined)
            mockWebSocket.isConnected = true
            mockTranscriptManager.connect.mockResolvedValue(undefined)
            mockTranscriptManager.isConnected.mockReturnValue(true)

            // Start first recording
            const promise1 = recordingService.startRecording('session-1')

            // Try to start second recording immediately
            const promise2 = recordingService.startRecording('session-2')

            const results = await Promise.allSettled([promise1, promise2])

            // One should succeed, one should fail
            expect(results.filter(r => r.status === 'fulfilled')).toHaveLength(1)
            expect(results.filter(r => r.status === 'rejected')).toHaveLength(1)
        })

        it('應該處理快速的開始-停止操作', async () => {
            Object.defineProperty(global, 'window', {
                value: { addEventListener: vi.fn(), removeEventListener: vi.fn() },
                writable: true
            })

            mockAudioRecorder.initialize.mockResolvedValue(undefined)
            mockAudioRecorder.startRecording.mockResolvedValue(undefined)
            mockWebSocket.connect.mockResolvedValue(undefined)
            mockWebSocket.isConnected = true
            mockTranscriptManager.connect.mockResolvedValue(undefined)
            mockTranscriptManager.isConnected.mockReturnValue(true)

            await recordingService.startRecording('test-session')
            await recordingService.stopRecording()

            const state = recordingService.getRecordingState()
            expect(state.isRecording).toBe(false)
        })
    })

    describe('服務狀態報告', () => {
        it('應該報告正確的服務資訊', async () => {
            const status = await recordingService.getDetailedStatus()

            expect(status).toMatchObject({
                serviceName: 'RecordingService',
                isInitialized: expect.any(Boolean),
                isRunning: expect.any(Boolean),
                recordingState: expect.any(Object),
                audioSupport: expect.any(Object),
                webSocketConnected: expect.any(Boolean)
            })
        })
    })
})


# END FILE CONTENTS


# File: frontend/types/state-transitions.ts

import { AppState, SessionStatus, SessionType } from "./app-state"

// 狀態轉換觸發器類型
export type StateTransitionTrigger =
  | "USER_START_RECORDING"          // 用戶開始錄音
  | "USER_STOP_RECORDING"           // 用戶停止錄音
  | "FIRST_TRANSCRIPT_RECEIVED"     // 收到第一個逐字稿
  | "SESSION_CREATED"               // Session 建立完成
  | "SESSION_UPGRADED"              // Session 升級為錄音模式
  | "PROCESSING_STARTED"            // 開始處理剩餘逐字稿
  | "PROCESSING_COMPLETED"          // 處理完成
  | "ERROR_OCCURRED"                // 發生錯誤
  | "USER_NEW_NOTE"                 // 用戶開新筆記
  | "TRANSCRIPT_COMPLETED"          // 轉錄完全完成

// 狀態轉換條件
export interface StateTransitionCondition {
  currentState: AppState
  targetState: AppState
  trigger: StateTransitionTrigger

  // 額外條件檢查
  sessionExists?: boolean
  sessionStatus?: SessionStatus
  sessionType?: SessionType
  isRecording?: boolean
  hasTranscripts?: boolean

  // 自定義驗證函數
  customValidator?: (context: StateTransitionContext) => boolean
}

// 狀態轉換上下文
export interface StateTransitionContext {
  currentState: AppState
  isRecording: boolean
  transcriptCount: number
  session: {
    id: string
    status: SessionStatus
    type: SessionType
  } | null
  error: string | null
  pendingSessionTitle?: string  // 待建立會話的標題
}

// 狀態轉換結果
export interface StateTransitionResult {
  success: boolean
  newState: AppState
  error?: string
  sideEffects?: StateTransitionSideEffect[]
}

// 副作用類型
export type StateTransitionSideEffect =
  | { type: "CREATE_SESSION"; sessionType: SessionType; title?: string }
  | { type: "UPGRADE_SESSION" }
  | { type: "FINISH_SESSION" }
  | { type: "START_RECORDING" }
  | { type: "STOP_RECORDING" }
  | { type: "CONNECT_WEBSOCKET" }
  | { type: "DISCONNECT_WEBSOCKET" }
  | { type: "CLEAR_TRANSCRIPTS" }
  | { type: "SAVE_DRAFT" }
  | { type: "SHOW_ERROR"; message: string }

// 狀態轉換規則定義
export const STATE_TRANSITION_RULES: StateTransitionCondition[] = [
  // 從 default 狀態開始錄音
  {
    currentState: "default",
    targetState: "recording_waiting",
    trigger: "USER_START_RECORDING",
    customValidator: (context) => {
      // 確保沒有其他活躍的錄音 session
      return !context.session || context.session.status === "completed" || context.session.status === "error"
    }
  },

  // 從 recording_waiting 重新開始錄音（處理重試情況）
  {
    currentState: "recording_waiting",
    targetState: "recording_waiting",
    trigger: "USER_START_RECORDING",
    customValidator: (context) => {
      // 允許在沒有 session 或 session 狀態異常時重新開始
      return !context.session || context.session.status === "completed" || context.session.status === "error"
    }
  },

  // Session 建立完成後保持在 default 狀態
  {
    currentState: "default",
    targetState: "default",
    trigger: "SESSION_CREATED",
    sessionExists: true,
    sessionStatus: "draft"
  },

  // 修復：從 recording_waiting 狀態處理 SESSION_CREATED，保持在 recording_waiting 等待 WebSocket 連接
  {
    currentState: "recording_waiting",
    targetState: "recording_waiting",
    trigger: "SESSION_CREATED",
    sessionExists: true,
    sessionStatus: "active",
    sessionType: "recording"
  },

  // 從 recording_waiting 收到第一個逐字稿轉為 recording_active
  {
    currentState: "recording_waiting",
    targetState: "recording_active",
    trigger: "FIRST_TRANSCRIPT_RECEIVED",
    sessionExists: true,
    sessionStatus: "active",
    sessionType: "recording",
    isRecording: true,
    hasTranscripts: true
  },

  // 從 recording_waiting 或 recording_active 停止錄音轉為 processing
  {
    currentState: "recording_waiting",
    targetState: "processing",
    trigger: "USER_STOP_RECORDING",
    sessionExists: true,
    sessionType: "recording"
  },
  {
    currentState: "recording_active",
    targetState: "processing",
    trigger: "USER_STOP_RECORDING",
    sessionExists: true,
    sessionType: "recording"
  },

  // 從 processing 完成轉錄轉為 finished
  {
    currentState: "processing",
    targetState: "finished",
    trigger: "PROCESSING_COMPLETED",
    sessionExists: true,
    sessionStatus: "completed"
  },

  // 修復：從任何狀態發生錯誤回到 default
  {
    currentState: "recording_waiting",
    targetState: "default",
    trigger: "ERROR_OCCURRED"
  },
  {
    currentState: "recording_active",
    targetState: "default",
    trigger: "ERROR_OCCURRED"
  },
  {
    currentState: "processing",
    targetState: "default",
    trigger: "ERROR_OCCURRED"
  },

  // 從 finished 或任何狀態開新筆記回到 default
  {
    currentState: "finished",
    targetState: "default",
    trigger: "USER_NEW_NOTE"
  },
  {
    currentState: "recording_waiting",
    targetState: "default",
    trigger: "USER_NEW_NOTE"
  },
  {
    currentState: "recording_active",
    targetState: "default",
    trigger: "USER_NEW_NOTE"
  }
]

// 狀態轉換副作用映射
export const STATE_TRANSITION_SIDE_EFFECTS: Record<string, StateTransitionSideEffect[]> = {
  // default -> recording_waiting: 建立會話、開始錄音並連接 WebSocket
  "default->recording_waiting->USER_START_RECORDING": [
    { type: "CREATE_SESSION", sessionType: "recording" },
    { type: "START_RECORDING" },
    { type: "CONNECT_WEBSOCKET" }
  ],

  // recording_waiting -> recording_waiting: 重新開始錄音（重試情況）
  "recording_waiting->recording_waiting->USER_START_RECORDING": [
    { type: "CREATE_SESSION", sessionType: "recording" },
    { type: "START_RECORDING" },
    { type: "CONNECT_WEBSOCKET" }
  ],

  // recording_waiting/recording_active -> processing: 停止錄音
  "recording_waiting->processing->USER_STOP_RECORDING": [
    { type: "STOP_RECORDING" }
  ],
  "recording_active->processing->USER_STOP_RECORDING": [
    { type: "STOP_RECORDING" }
  ],

  // processing -> finished: 完成 session
  "processing->finished->PROCESSING_COMPLETED": [
    { type: "FINISH_SESSION" }
  ],

  // 任何狀態 -> default (新筆記): 清理狀態
  "finished->default->USER_NEW_NOTE": [
    { type: "CLEAR_TRANSCRIPTS" },
    { type: "SAVE_DRAFT" }
  ],
  "recording_waiting->default->USER_NEW_NOTE": [
    { type: "STOP_RECORDING" },
    { type: "DISCONNECT_WEBSOCKET" },
    { type: "CLEAR_TRANSCRIPTS" }
  ],
  "recording_active->default->USER_NEW_NOTE": [
    { type: "STOP_RECORDING" },
    { type: "DISCONNECT_WEBSOCKET" },
    { type: "CLEAR_TRANSCRIPTS" }
  ],

  // 錯誤處理
  "recording_waiting->default->ERROR_OCCURRED": [
    { type: "STOP_RECORDING" },
    { type: "DISCONNECT_WEBSOCKET" },
    { type: "SHOW_ERROR", message: "錄音過程中發生錯誤" }
  ],
  "recording_active->default->ERROR_OCCURRED": [
    { type: "STOP_RECORDING" },
    { type: "DISCONNECT_WEBSOCKET" },
    { type: "SHOW_ERROR", message: "錄音過程中發生錯誤" }
  ],
  "processing->default->ERROR_OCCURRED": [
    { type: "SHOW_ERROR", message: "處理轉錄時發生錯誤" }
  ]
}


# END FILE CONTENTS


# File: frontend/.eslintrc.json

{
  "extends": [
    "next/core-web-vitals",
    "next/typescript"
  ]
}


# END FILE CONTENTS


# File: frontend/components/ui/scroll-area.tsx

"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }


# END FILE CONTENTS


# File: docs/lang-map-refactor.md

# Lang-map Refactor 規格與設計

## 目標
1. 前端下拉可選 Provider (whisper / gpt4o) 與語言 (zh-TW / en-US …)
2. 後端 `sessions.lang_code` 永遠存 BCP-47（zh-TW、en-US…）
3. 各 Provider 在呼叫外部 API 前，自行把 lang_code 轉成該 API 支援格式
   - Whisper    : zh → zh, en → en  (ISO-639-1, 小寫)
   - GPT-4o-STT : zh → zh, en → en  (可傳 auto)
4. 其他程式碼不再 hard-code 語言碼

## 主要檔案/路徑
- backend
  - app/services/stt/interfaces.py
  - app/services/stt/lang_map.py
  - app/services/stt/whisper_provider.py
  - app/services/stt/gpt4o_provider.py
  - app/services/stt/factory.py
  - app/api/segments.py
  - migrations/20250713_add_enum_lang.sql
- frontend
  - frontend/constants/languages.ts
  - frontend/constants/providers.ts
  - frontend/hooks/useSession.ts

## 設計重點
- 語言碼轉換集中於 lang_map.py，Provider 端自動轉換
- session.lang_code 永遠存 BCP-47
- 前端/後端皆移除 hard-code，統一 import 常數
- SQL migration 補 enum type 支援 zh/en

## TDD/Tidy First 流程
- 先寫測試與型別，逐步重構 provider/factory
- 每步驟 commit 分明，結構與行為分離
- 文件同步更新

## 測試
- lang_map.py 單元測試
- provider/factory 流程整合測試
- 前端下拉選單與 session 建立流程測試

## 執行步驟
1. 執行 SQL migration
2. .env WHISPER_LANGUAGE 可保留 zh-TW（不影響）
3. npm run dev + uv pip run main.py
4. 前端選 provider + 語言，上傳後應：
   - Whisper → 200 OK，語言欄存 zh-TW
   - GPT-4o → TODO NotImplemented（先回 501） 


# END FILE CONTENTS


# File: frontend/components/ui/toggle-group.tsx

"use client"

import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }


# END FILE CONTENTS


# File: frontend/components/ui/radio-group.tsx

"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }


# END FILE CONTENTS


# File: app/core/__init__.py



# END FILE CONTENTS


# File: frontend/components/ui/navigation-menu.tsx

import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}


# END FILE CONTENTS


# File: frontend/components/ui/textarea.tsx

import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef<
  HTMLTextAreaElement,
  React.ComponentProps<"textarea">
>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = "Textarea"

export { Textarea }


# END FILE CONTENTS


# File: app/core/audio_vad.py

import asyncio, shlex, re
from app.core.config import get_settings

async def is_silent(wav: bytes) -> bool:
    """
    若整段音訊都在靜音門檻以下，回 True
    """
    s = get_settings()
    noise_db = s.SILENCE_NOISE_DB
    duration = s.SILENCE_DURATION_SEC
    cmd = (
        f"ffmpeg -v info -i pipe:0 "
        f"-af silencedetect=noise={noise_db}dB:d={duration} "
        f"-f null -"
    )
    proc = await asyncio.create_subprocess_exec(
        *shlex.split(cmd),
        stdin=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE,
        stdout=asyncio.subprocess.PIPE,
    )
    _, err = await proc.communicate(wav)
    log = err.decode()

    # FFmpeg 只在偵測到音訊時印出 "silence_end"
    return "silence_end" not in log


# END FILE CONTENTS


# File: frontend/lib/typed-emitter.ts

/* ============================================================
 * 輕量型別安全 EventEmitter（無 Node polyfill）
 * ============================================================
 */
export type Listener<T> = (payload: T) => void

export class TypedEmitter<Events extends Record<string, any>> {
  private listeners: {
    [K in keyof Events]?: Set<Listener<Events[K]>>
  } = {}

  on<K extends keyof Events>(event: K, listener: Listener<Events[K]>): this {
    (this.listeners[event] ??= new Set()).add(listener)
    return this
  }

  off<K extends keyof Events>(event: K, listener: Listener<Events[K]>): this {
    this.listeners[event]?.delete(listener)
    return this
  }

  emit<K extends keyof Events>(event: K, payload: Events[K]): boolean {
    this.listeners[event]?.forEach((l) => l(payload))
    return !!this.listeners[event]?.size
  }

  removeAllListeners<K extends keyof Events>(event?: K): this {
    if (event) this.listeners[event]?.clear()
    else Object.values(this.listeners).forEach((s) => s?.clear())
    return this
  }
}

# END FILE CONTENTS


# File: docs/webm-to-wav-gpt4o.md

# WebM → WAV + GPT4oProvider 上傳規格

## 目標
- 將 16-bit mono 16kHz WebM 音訊轉檔為 RIFF-WAV
- 由 GPT4oProvider 上傳 wav bytes 給 OpenAI API（gpt-4o-transcribe）
- 支援 R2 快取

## 轉檔流程
1. 呼叫 `webm_to_wav(webm: bytes) -> bytes`：
   - 使用 ffmpeg 轉 webm → 16-bit mono 16kHz RIFF-WAV
   - 失敗時回傳 None
2. GPT4oProvider:
   - 先檢查格式，僅支援 webm/wav
   - 呼叫 webm_to_wav 取得 wav bytes
   - 失敗時 log error 並 return None
   - 成功時可選擇性快取到 R2（put_object, content_type='audio/wav'）
   - 上傳格式：
     ```python
     file_tuple = ("audio.wav", BytesIO(wav_bytes), "audio/wav")
     response = await client.audio.transcriptions.create(
         model=model_name,
         file=file_tuple,
         language="zh-TW",
         response_format="json",
     )
     ```
   - 回傳 response['text']

## 測試重點
- webm_to_wav 會正確產生 RIFF header、16kHz、mono、16-bit
- 失敗時回傳 None
- GPT4oProvider 會呼叫 webm_to_wav，並正確傳送 (filename, BytesIO, mime)
- R2 cache 行為正確
- 失敗時 log error 並 return None

## 實作現況
- `webm_to_wav(webm: bytes) -> Optional[bytes]` 已實作於 `app/core/ffmpeg.py`
- 失敗時回傳 None 並 log error
- 單元測試已覆蓋成功與失敗情境，測試檔案：`tests/unit/test_ffmpeg.py`，class: `TestWebMToWav`

## 轉錄欄位完整性規格（2024-06）

### 1. gpt4o_provider.py transcribe() 回傳格式
- 必須回傳 dict，且欄位齊全：
  - text
  - chunk_sequence
  - timestamp
  - language
  - start_offset
  - end_offset

### 2. SimpleAudioTranscriptionService._save_and_push_result 欄位檢查
- 必要欄位：{"text","chunk_sequence","timestamp","start_offset","end_offset"}
- 若缺欄位：log error 並 return，不寫入 DB、不推送 WebSocket
- 測試覆蓋：pytest 驗證缺欄位時只 log error，不拋例外

## 相關檔案
- app/core/ffmpeg.py
- app/services/stt/gpt4o_provider.py
- tests/unit/test_ffmpeg.py
- tests/test_stt_providers.py 


# END FILE CONTENTS


# File: PRD.md

# StudyScriber PRD

---

## 1. 專案願景

提供「邊錄邊轉錄」的雲端筆記，讓內部訓練、講座筆記一次到位：可選錄音、即時逐字稿、Markdown 筆記與匯出，一條龍完成。

---

## 2. 產品定位

| 項目     | 描述                                                               |
| -------- | ------------------------------------------------------------------ |
| 目標族群 | 成年自學者                                                         |
| 痛點     | 備課／聽課同時要做筆記、整理逐字稿耗時、有時只需要筆記功能         |
| 核心價值 | 1 個畫面完成「純筆記」或「錄音 → 即時逐字稿 → 筆記」，課後一鍵匯出 |

---

## 3. 功能列表

1. **雲端 Markdown 筆記**  
   隨時撰寫 Markdown 筆記

2. **錄音與即時逐字稿**  
   邊錄音邊自動產生逐字稿，支援多國語言

3. **多種語音辨識引擎選擇**  
   可切換 Whisper 或 GPT-4o-transcribe Model

4. **一鍵匯出**  
   筆記、逐字稿可一鍵匯出 ZIP 檔



# END FILE CONTENTS


# File: frontend/lib/initial-state-loader.ts

"use client"

import type { AppData } from '../types/app-state'

/**
 * 初始狀態載入器
 * 負責從 localStorage 或其他持久化存儲載入初始狀態
 */
export class InitialStateLoader {
    private static readonly STORAGE_KEYS = {
        DRAFT_NOTE: 'draft_note',
        LAST_SESSION: 'last_session',
        APP_STATE: 'app_state_v1',
    } as const

    /**
     * 載入初始應用狀態
     * 優先順序：localStorage > 預設狀態
     */
    static loadInitialAppData(): AppData {
        console.log('🔄 [InitialStateLoader] 開始載入初始狀態')

        try {
            // 1. 載入草稿筆記
            const draftContent = this.loadDraftNote()

            // 2. 載入上次會話資訊（如果有的話）
            const lastSession = this.loadLastSession()

            // 3. 載入完整應用狀態（如果有的話）
            const savedAppState = this.loadSavedAppState()

            // 修正：如果儲存的狀態是暫時性或已完成的，則重置為預設狀態
            console.log('🔍 [InitialStateLoader] 檢查儲存的狀態:', {
                savedState: savedAppState?.state,
                shouldReset: savedAppState?.state && ['recording_waiting', 'recording_active', 'processing', 'finished'].includes(savedAppState.state)
            })

            const validInitialState =
                savedAppState?.state &&
                    !['recording_waiting', 'recording_active', 'processing', 'finished'].includes(savedAppState.state)
                    ? savedAppState.state
                    : 'default'

            console.log('🔍 [InitialStateLoader] 最終初始狀態:', validInitialState)

            const initialAppData: AppData = {
                state: validInitialState,
                transcriptEntries: savedAppState?.transcriptEntries || [],
                editorContent: draftContent || '',
                isRecording: false, // 重啟後永遠不應該是錄音狀態
                recordingTime: 0,   // 重啟後重置錄音時間
                session: lastSession, // 可能為 null
            }

            console.log('🔄 [InitialStateLoader] 初始狀態載入完成:', {
                hasDraftContent: !!draftContent,
                hasLastSession: !!lastSession,
                hasSavedAppState: !!savedAppState,
                state: initialAppData.state,
                transcriptCount: initialAppData.transcriptEntries.length
            })

            return initialAppData
        } catch (error) {
            console.error('❌ [InitialStateLoader] 載入初始狀態失敗:', error)
            return this.getDefaultAppData()
        }
    }

    /**
     * 載入草稿筆記內容
     */
    private static loadDraftNote(): string {
        try {
            const draft = localStorage.getItem(this.STORAGE_KEYS.DRAFT_NOTE)
            return draft || ''
        } catch (error) {
            console.warn('⚠️ [InitialStateLoader] 載入草稿筆記失敗:', error)
            return ''
        }
    }

    /**
     * 載入上次會話資訊
     */
    private static loadLastSession(): AppData['session'] {
        try {
            const sessionData = localStorage.getItem(this.STORAGE_KEYS.LAST_SESSION)
            if (!sessionData) return null

            const session = JSON.parse(sessionData)

            // 驗證會話資料結構
            if (session && typeof session === 'object' && session.id) {
                // 只有在會話狀態不是 completed 或 error 時才恢復
                if (session.status === 'completed' || session.status === 'error') {
                    console.log('🔄 [InitialStateLoader] 上次會話已完成，不恢復:', session.status)
                    return null
                }

                console.log('🔄 [InitialStateLoader] 恢復上次會話:', {
                    id: session.id,
                    status: session.status,
                    type: session.type
                })
                return session
            }

            return null
        } catch (error) {
            console.warn('⚠️ [InitialStateLoader] 載入上次會話失敗:', error)
            return null
        }
    }

    /**
     * 載入完整的應用狀態
     */
    private static loadSavedAppState(): Partial<AppData> | null {
        try {
            const stateData = localStorage.getItem(this.STORAGE_KEYS.APP_STATE)
            if (!stateData) return null

            const savedState = JSON.parse(stateData)

            // 驗證狀態資料結構
            if (savedState && typeof savedState === 'object') {
                console.log('🔄 [InitialStateLoader] 載入已儲存的應用狀態')
                return savedState
            }

            return null
        } catch (error) {
            console.warn('⚠️ [InitialStateLoader] 載入應用狀態失敗:', error)
            return null
        }
    }

    /**
     * 獲取預設應用狀態
     */
    private static getDefaultAppData(): AppData {
        console.log('🔄 [InitialStateLoader] 使用預設狀態')
        return {
            state: 'default',
            transcriptEntries: [],
            editorContent: '',
            isRecording: false,
            recordingTime: 0,
            session: null,
        }
    }

    /**
     * 儲存應用狀態到 localStorage
     */
    static saveAppState(appData: AppData): void {
        try {
            // 儲存完整應用狀態（排除敏感資訊）
            const stateToSave = {
                state: appData.state,
                transcriptEntries: appData.transcriptEntries,
                // 不儲存 editorContent（已單獨儲存為 draft_note）
                // 不儲存 isRecording 和 recordingTime（重啟後應重置）
            }

            localStorage.setItem(this.STORAGE_KEYS.APP_STATE, JSON.stringify(stateToSave))

            // 儲存會話資訊
            if (appData.session) {
                localStorage.setItem(this.STORAGE_KEYS.LAST_SESSION, JSON.stringify(appData.session))
            } else {
                localStorage.removeItem(this.STORAGE_KEYS.LAST_SESSION)
            }

            console.log('💾 [InitialStateLoader] 應用狀態已儲存')
        } catch (error) {
            console.error('❌ [InitialStateLoader] 儲存應用狀態失敗:', error)
        }
    }

    /**
     * 清除所有持久化狀態
     */
    static clearPersistedState(): void {
        try {
            localStorage.removeItem(this.STORAGE_KEYS.APP_STATE)
            localStorage.removeItem(this.STORAGE_KEYS.LAST_SESSION)
            // 注意：不清除 DRAFT_NOTE，因為那是用戶的草稿內容

            console.log('🗑️ [InitialStateLoader] 持久化狀態已清除')
        } catch (error) {
            console.error('❌ [InitialStateLoader] 清除持久化狀態失敗:', error)
        }
    }

    /**
     * 檢查是否有持久化狀態
     */
    static hasPersistedState(): boolean {
        try {
            return !!(
                localStorage.getItem(this.STORAGE_KEYS.APP_STATE) ||
                localStorage.getItem(this.STORAGE_KEYS.LAST_SESSION)
            )
        } catch (error) {
            console.warn('⚠️ [InitialStateLoader] 檢查持久化狀態失敗:', error)
            return false
        }
    }
}


# END FILE CONTENTS


# File: docs/skip-silence-spec.md

# 靜音段過濾規格

## 目標

- 音訊切片若為「完全靜音」，不產生逐字稿、不推送 WebSocket，前端不顯示。

## 流程說明

1. **靜音偵測 util**（`app/core/audio_vad.py`）
   - 使用 ffmpeg `silencedetect`，判斷一段 wav 是否「全部靜音」。
   - 參數：
     - dB 門檻（`SILENCE_NOISE_DB`，預設 -35）
     - 持續秒數（`SILENCE_DURATION_SEC`，預設 0.3）
   - 參數可由 config/env 設定。
   - 若整段音訊都在門檻以下，回傳 True。

2. **STT Provider 整合**（如 `gpt4o_provider.py`）
   - 轉檔後呼叫 `is_silent`，若為靜音直接 return None，不送去 STT。
   - 非靜音才呼叫 STT API。

3. **外層流程**（如 `segments.py`）
   - 若 transcribe 回傳 None，僅記錄 warning，不呼叫 `save_and_push_result`，不推送 WebSocket。
   - 前端不會顯示該段。

## 參數設計

- `SILENCE_NOISE_DB`：靜音判斷 dB 門檻，預設 -35，可由環境變數調整。
- `SILENCE_DURATION_SEC`：靜音判斷持續秒數，預設 0.3，可由環境變數調整。

## 測試與驗證

- `is_silent` 已有單元測試，mock ffmpeg 行為，驗證靜音/非靜音皆正確。
- Provider 層有測試，驗證遇到靜音時會 return None。
- 外層流程已驗證，None 不會推送逐字稿。

## 備註

- 若需調整判斷靈敏度，建議優先調整 dB 門檻。
- 若 chunk 長度有變動，需同步考慮靜音持續秒數參數。 


# END FILE CONTENTS


# File: frontend/hooks/use-app-state-adapter.ts

"use client"

import { useAppState as useAppStateLegacy } from './use-app-state'
import { useAppStateNew } from './use-app-state-new'
import { isFeatureEnabled } from '../lib/feature-flags'
import type { AppData } from '../types/app-state'

// 統一的 UseAppState 介面
interface UseAppStateReturn {
    // 應用狀態
    appData: AppData
    isLoading: boolean
    error: string | null

    // 會話管理
    createNoteSession: (title?: string) => Promise<void>
    createRecordingSession: (title?: string) => Promise<void>
    upgradeToRecording: () => Promise<void>
    finishSession: () => Promise<void>
    newNote: () => Promise<void>

    // 錄音控制
    startRecording: (title?: string) => Promise<void>
    stopRecording: () => Promise<void>

    // 本地草稿
    saveLocalDraft: (content: string) => void

    // 外部狀態
    session: any
    sessionLoading: boolean
    sessionError: string | null

    // 錄音狀態
    recordingError: string | null

    // 逐字稿狀態
    transcriptConnected: boolean
    transcriptError: string | null
    transcriptAutoScroll: boolean
    enableAutoScroll: () => void
    disableAutoScroll: () => void
    scrollToLatest: () => void
}

/**
 * useAppState 適配器 Hook
 * 根據功能開關決定使用新舊版本的 useAppState
 * 確保 API 完全相容，現有組件無需修改
 */
export function useAppState(): UseAppStateReturn {
    const useNewAppStateHook = isFeatureEnabled('useNewAppStateHook')
    const useNewStateManagement = isFeatureEnabled('useNewStateManagement')

    console.log('🔄 [useAppStateAdapter] 功能開關狀態:', {
        useNewAppStateHook,
        useNewStateManagement,
        willUseNewVersion: useNewAppStateHook || useNewStateManagement
    })

    // 如果啟用新 AppState Hook 或新狀態管理，使用新版本
    if (useNewAppStateHook || useNewStateManagement) {
        console.log('🔄 [useAppStateAdapter] 使用新版本 useAppStateNew')
        return useAppStateNew()
    }

    // 否則使用舊版本
    console.log('🔄 [useAppStateAdapter] 使用舊版本 useAppState')
    return useAppStateLegacy()
}

// 導出舊版本供直接使用（用於測試或特殊情況）
export { useAppState as useAppStateLegacy } from './use-app-state'
export { useAppStateNew } from './use-app-state-new'


# END FILE CONTENTS


# File: frontend/public/placeholder.svg

<svg xmlns="http://www.w3.org/2000/svg" width="1200" height="1200" fill="none"><rect width="1200" height="1200" fill="#EAEAEA" rx="3"/><g opacity=".5"><g opacity=".5"><path fill="#FAFAFA" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/></g><path stroke="url(#a)" stroke-width="2.418" d="M0-1.209h553.581" transform="scale(1 -1) rotate(45 1163.11 91.165)"/><path stroke="url(#b)" stroke-width="2.418" d="M404.846 598.671h391.726"/><path stroke="url(#c)" stroke-width="2.418" d="M599.5 795.742V404.017"/><path stroke="url(#d)" stroke-width="2.418" d="m795.717 796.597-391.441-391.44"/><path fill="#fff" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/><g clip-path="url(#e)"><path fill="#666" fill-rule="evenodd" d="M616.426 586.58h-31.434v16.176l3.553-3.554.531-.531h9.068l.074-.074 8.463-8.463h2.565l7.18 7.181V586.58Zm-15.715 14.654 3.698 3.699 1.283 1.282-2.565 2.565-1.282-1.283-5.2-5.199h-6.066l-5.514 5.514-.073.073v2.876a2.418 2.418 0 0 0 2.418 2.418h26.598a2.418 2.418 0 0 0 2.418-2.418v-8.317l-8.463-8.463-7.181 7.181-.071.072Zm-19.347 5.442v4.085a6.045 6.045 0 0 0 6.046 6.045h26.598a6.044 6.044 0 0 0 6.045-6.045v-7.108l1.356-1.355-1.282-1.283-.074-.073v-17.989h-38.689v23.43l-.146.146.146.147Z" clip-rule="evenodd"/></g><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/></g><defs><linearGradient id="a" x1="554.061" x2="-.48" y1=".083" y2=".087" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="b" x1="796.912" x2="404.507" y1="599.963" y2="599.965" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="c" x1="600.792" x2="600.794" y1="403.677" y2="796.082" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="d" x1="404.85" x2="796.972" y1="403.903" y2="796.02" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><clipPath id="e"><path fill="#fff" d="M581.364 580.535h38.689v38.689h-38.689z"/></clipPath></defs></svg>

# END FILE CONTENTS


# File: frontend/components/ui/button.tsx

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }


# END FILE CONTENTS


# File: frontend/components/ui/chart.tsx

"use client"

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}


# END FILE CONTENTS


# File: .cursor/rules/rules.mdc

---
description:
globs:
alwaysApply: true
---
<!-- Source:
1. https://tidyfirst.substack.com/p/augmented-coding-beyond-the-vibes
2. https://github.com/arthow4n/live-language-mate/blob/master/CLAUDE.md -->

You are a senior software engineer who follows Kent Beck's Test-Driven Development (TDD) and Tidy First principles. Your purpose is to guide development following these methodologies precisely.


# Basic Rules

1. If the project has a PRD or SPEC, read them carefully to ensure that what you're doing is consistent and aligned with the correct objectives.
2. When you are coding or implementing the test, implement only enough code to fulfill that need or make the test pass.


# User Preferences

-  **Language Preference**: Communicate using Traditional Chinese (zh-tw) from Taiwan
-  **Simplicity Principle**: Avoid overly complex tool settings and configuration files


## Planning and task management

- Prioritize the use of Task Manager for task analysis and scheduling.
- When executing tasks from the Todos checklist, report and explain after completing each task, check it off, and then proceed to the next task.
- You are meant to work on your own unattended once the user has approved your initial work plan, you should plan ahead for working on your own.
- When planning, the plan is always for yourself to be able to follow the plan and work on the task immediately after the plan is approved by the user.
- When planning, automatically break down the task into smaller tasks and utilise the TodoRead & TodoWrite tools.
- When planning, plan ahead to see if you need to update any tests.
- When planning, think and review the plan yourself to see if you are over-engineering, you should focus on only making the absolutely relevant and needed chagnes. You need to review your own plan at least review 2 times.
- When planning is completed, write the spec to  ./docs as a markdown, using its functionality as the filename.
- Before you start working, make sure to step back and break down the plan into smaller todo items.


## Development process

- You should do TDD:
  1. Review the code paths that will be tested from beginning to end, then think how to write the correct test case.
  2. Write a test case that is failing, which will be fixed after correct implementation.
  3. Start implementation.
  4. Fix until test passes.
  5. Commit and push after each task is done.
- If test is failng more than 3 times in a row, step back and read again the code path from beginning to end, think how to address the issue systematically before you rerun the test again.
- Question yourself are your soution and test addressing what the user asked for.
- Always use environment-variable config files for clean, unified management—never hard-code.
- Don't skip anything in your todo.

# CORE DEVELOPMENT PRINCIPLES

- Always follow the TDD cycle: Red → Green → Refactor

- Write the simplest failing test first

- Implement the minimum code needed to make tests pass

- Refactor only after tests are passing

- Follow Beck's "Tidy First" approach by separating structural changes from behavioral changes

- Maintain high code quality throughout development

# TDD METHODOLOGY GUIDANCE

- Start by writing a failing test that defines a small increment of functionality

- Use meaningful test names that describe behavior (e.g., "shouldSumTwoPositiveNumbers")

- Make test failures clear and informative

- Write just enough code to make the test pass - no more

- Once tests pass, consider if refactoring is needed

- Repeat the cycle for new functionality

# TIDY FIRST APPROACH

- Separate all changes into two distinct types:

1. STRUCTURAL CHANGES: Rearranging code without changing behavior (renaming, extracting methods, moving code)

2. BEHAVIORAL CHANGES: Adding or modifying actual functionality

- Never mix structural and behavioral changes in the same commit

- Always make structural changes first when both are needed

# CODE QUALITY STANDARDS

- Eliminate duplication ruthlessly

- Express intent clearly through naming and structure

- Make dependencies explicit

- Keep methods small and focused on a single responsibility

- Minimize state and side effects

- Use the simplest solution that could possibly work

# REFACTORING GUIDELINES

- Refactor only when tests are passing (in the "Green" phase)

- Use established refactoring patterns with their proper names

- Make one refactoring change at a time

- Run tests after each refactoring step

- Prioritize refactorings that remove duplication or improve clarity

# EXAMPLE WORKFLOW

When approaching a new feature:

1. Write a simple failing test for a small part of the feature

2. Implement the bare minimum to make it pass

3. Run tests to confirm they pass (Green)

4. Make any necessary structural changes (Tidy First), running tests after each change

5. Commit structural changes separately

6. Add another test for the next small increment of functionality

7. Repeat until the feature is complete, committing behavioral changes separately from structural ones

Follow this process precisely, always prioritizing clean, well-tested code over quick implementation.

Always write one test at a time, make it run, then improve structure. Always run all the tests (except long-running tests) each time.



# Engineering mindset

- You should follow the existing code style, if you are about to implement something new or write a new test, search for existing files to understand the current style and convention.
- You should actively look for reusing shared function/component/hook etc, and search for another potentially extractable/sharable code to move to shared code.
- Avoid over-engineering. Keep thinking and reviewing whether if your solution is over-engineered, step back, look around and see if you can simplify your solution and its related code paths and only make the absolutely necessary changes.
- For asynchronous logic flow, no matter in test, code or UI, make sure to implement them in a way where the cause and effect can be logically followed, for example by using async-await, event handler, or callback. Avoid using timeout/polling to handle asynchronous logic flow, if timeout/polling is really the only way to implement the logic, make sure to comment why timeout/polling is used instead of the other better approaches.
- Don't leave unnecessary comment, unmaintained comment can become stale and adds confusion. You should only leave comment for explaining the motivation behind the code, not to repeat what the code is doing.
- Make sure your code can be logically followed, there should not be implicit flow.
- Make sure the cause and effect in the code flow is deterministic, you should not cause race condition.
- If you belive something might be caused by a race condition or a timing issue, you should default to step back and read through all the related code paths from beginning to end, and then make a comprehensive argument about why it's really a race condition or timing issue. This is to make sure you don't just blindly guess and fix the wrong problem.

# Tool usage

- Always use MCP tools, including Serena and Context7, for research and feasibility analysis evaluation before editing code.
- Batch your tool calls, use many tools at once.


# Other Rules

Always follow the instructions in these rules:

- @frontend.mdc
- @backend.mdc
- @ui-rules/shadcn-tailwind-ui-guideline.mdc



# END FILE CONTENTS


# File: frontend/components/ui/table.tsx

import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}


# END FILE CONTENTS


# File: SPEC.md

# Technical Specification


## Frontend Stack

- pnpm for Package manager
- React 18 with TypeScript
- Next.js for framework
- Tailwind CSS + shadcn/ui components
- Zustand-like context for state management
- Zod 4, therefore the imports should be `from "zod/v4"`, you may fetch `https://zod.dev/v4/changelog` if you are unsure how to write.
- Playwright MCP for e2e test

```ts
// Bad: Zod 3
import { z } from 'zod';
z.object({ name: z.string() }).strict();
z.object({ name: z.string() }).passthrough();

// Good: Zod 4
import { z } from 'zod/v4';
z.strictObject({ name: z.string() });
z.looseObject({ name: z.string() });
```


## Backend Stack

- Python version 3.10+
  - Use `uv` for virtual environment management
  - Pin all dependency versions in requirements.txt or pyproject.toml
- Separate production and development dependencies
- FastAPI for web framework with async support
- Pydantic v2 for data validation and settings management
- Supabase as database
- Azure OpenAI for transcription services
- WebSocket for real-time communication
- Cloudflare R2 for audio storage
- FFmpeg for audio processing


## File Structure

- Frontend File organization
  - Components in `frontend/components/(ui)/`
  - Custom hooks in `frontend/hooks/`
  - Utilities in `frontend/lib/`
  - Type definitions in `frontend/types/`
  - Services in `frontend/lib/services/`
  - Constants in `frontend/constants/`


- Backend File organization
  - Models in `app/schemas/`
  - Services in `app/services/`
  - API routes in `app/api/`
  - Core utilities in `app/core/`
  - Database related in `app/db/`
  - WebSocket handlers in `app/ws/`
  


### 1. 後端 FastAPI (簡化架構 - REST API 模式)

| #     | 函式 / 協程                                              | 所屬模組              | 責任                                         | I/O                                                |
| ----- | -------------------------------------------------------- | --------------------- | -------------------------------------------- | -------------------------------------------------- |
| B-001 | `create_session(title:str=None, type:str) -> SessionOut` | api.sessions          | POST /api/session                            | in: type, title(可選)；out: sid, status, type      |
| B-002 | `finish_session(sid:UUID)`                               | api.sessions          | PATCH /api/session/{sid}/finish              | in: sid；204                                       |
| B-015 | `upgrade_session_to_recording(sid:UUID)`                 | api.sessions          | PATCH /api/session/{sid}/upgrade             | in: sid；out: updated session                      |
| B-003 | `save_note(sid:UUID, content:str, client_ts:datetime)`   | api.notes             | PUT /api/notes/{sid}                         | in: content, client_ts(可選)；out: server_ts, note |
| B-004 | `export_resource(sid:UUID, type:str)`                    | api.export            | GET /api/export/{sid}?type=                  | StreamingResponse                                  |
| B-020 | `upload_segment(sid:UUID, seq:int, file:UploadFile)`     | api.segments          | POST /api/segment - 上傳 10s WebM 音檔切片   | in: WebM file；out: {"ack": seq}                   |
| B-006 | `ws_transcript_feed(ws:WebSocket, sid:UUID)`             | ws.transcript_feed    | 推送 Azure OpenAI 逐字稿結果                 | ↓ {"text","timestamp",...}                         |
| B-007 | `store_segment_blob(sid, seq, blob)`                     | services.storage      | 上傳到 Cloudflare R2 + 更新 DB `audio_files` | —                                                  |
| B-021 | `ffmpeg_webm_to_pcm(webm_bytes) -> bytes`                | core.ffmpeg           | WebM→16k mono PCM (處理完整 10s 檔案)        | in: WebM blob；out: PCM bytes                      |
| B-010 | `azure_openai_client() -> OpenAI`                        | services.azure_openai | 建立 Azure OpenAI 客戶端                     | return client                                      |
| B-022 | `whisper_transcribe(pcm_bytes) -> str`                   | services.azure_openai | 單檔轉錄：WebM/PCM → Azure OpenAI Whisper    | in: audio bytes；out: transcript text              |
| B-023 | `process_and_transcribe(sid, seq, webm)`                 | api.segments          | 背景任務：轉檔 + STT + 儲存 + 廣播           | BackgroundTasks                                    |
| B-013 | `mark_session_error(sid, reason)`                        | db.crud               | 更新 sessions.status=error                   | —                                                  |
| B-014 | `single_active_guard()`                                  | middleware            | 保證同時僅 1 active session                  | 429 on violation                                   |
| B-016 | `check_tables_exist()`                                   | db.database           | 檢查核心表格是否存在                         | return bool                                        |
| B-017 | `auto_init_database()`                                   | db.database           | 自動檢測並初始化資料庫                       | 啟動時執行                                         |
| B-018 | `init_r2_client() -> S3Client`                           | services.r2_client    | 初始化 Cloudflare R2 客戶端                  | return S3Client                                    |
| B-019 | `generate_r2_presigned_url(bucket, key, expires)`        | services.r2_client    | 生成 R2 預簽名 URL                           | return presigned_url                               |

### ⚠️ 移除的功能 (簡化架構)
- ❌ `ws_upload_audio` - 改用 REST API
- ❌ `handle_ack_missing` - 不再需要 chunk ack/missing 機制
- ❌ `ffmpeg_spawn` - 改為處理完整檔案，不需要串流
- ❌ `transcribe_audio_batch` - 改為單檔處理

### 2. 前端 React（Hook / Utility）

| #     | 函式                                 | 模組                | 責任                                                                                       | I/O                                                                          |
| ----- | ------------------------------------ | ------------------- | ------------------------------------------------------------------------------------------ | ---------------------------------------------------------------------------- |
| F-001 | `useAppState.setState(state)`        | hooks/useAppState   | 管理前端應用狀態轉換                                                                       | 'default'\|'recording_waiting'\|'recording_active'\|'processing'\|'finished' |
| F-002 | `useSession.createNoteSession()`     | hooks/useSession    | POST /session (type=note_only)                                                             | return sid                                                                   |
| F-003 | `useSession.upgradeToRecording(sid)` | hooks/useSession    | PATCH /session/{sid}/upgrade                                                               | return updated session                                                       |
| F-004 | `useRecorder.startRecording()`       | hooks/useRecorder   | a. 建立/升級 session<br>b. 狀態轉為 recording_waiting<br>c. 啟 MediaRecorder timeslice=10s | return sid                                                                   |
| F-005 | `useRecorder.stopRecording()`        | hooks/useRecorder   | a. 停止錄音<br>b. 狀態轉為 processing<br>c. 等待轉錄完成                                   | —                                                                            |
| F-024 | `uploadSegment(seq, blob)`           | hooks/useRecorder   | fetch POST /api/segment 上傳 10s WebM 檔案                                                 | —                                                                            |
| F-025 | `handleUploadError(seq, blob)`       | hooks/useRecorder   | 上傳失敗處理，暫存到 IndexedDB                                                             | —                                                                            |
| F-008 | `useTranscript.connect(sid)`         | hooks/useTranscript | 建 `/ws/transcript_feed` 連線                                                              | —                                                                            |
| F-009 | `mergeSegment(seg)`                  | hooks/useTranscript | 相鄰 ≤1 s 合併段落                                                                         | 更新 segments state                                                          |
| F-010 | `onTranscriptComplete()`             | hooks/useTranscript | 轉錄完成回調，狀態轉為 finished                                                            | —                                                                            |
| F-011 | `autoScroll()`                       | hooks/useTranscript | 若鎖定到底則捲底                                                                           | —                                                                            |
| F-012 | `unlockOnScroll()`                   | hooks/useTranscript | 使用者滾動離底 >60 px                                                                      | set locked=false                                                             |
| F-013 | `toLatest()`                         | hooks/useTranscript | smooth scroll bottom；鎖定                                                                 | —                                                                            |
| F-014 | `useLocalDraft(field,val)`           | hooks/useLocalDraft | 5 s debounce 存 localStorage                                                               | —                                                                            |
| F-015 | `loadDraft()`                        | hooks/useLocalDraft | 載入 draft_note                                                                            | return {note}                                                                |
| F-016 | `clearDraft()`                       | hooks/useLocalDraft | removeItem('draft_*')                                                                      | —                                                                            |
| F-017 | `useAutoSave(sid, content)`          | hooks/useAutoSave   | 每 10 s PUT /notes                                                                         | —                                                                            |
| F-018 | `newNote()`                          | hooks/useAppState   | 清空當前資料，狀態回到 default<br>如果存在活躍會話，先刪除該會話及其所有相關數據           | —                                                                            |
| F-019 | `downloadZip(sid)`                   | utils/export        | GET /export/{sid}?type=zip                                                                 | 觸發 download                                                                |
| F-020 | `showToast(text,type)`               | utils/ui            | 統一錯誤／提示                                                                             | —                                                                            |

### 3. 前端 UI Component Methods（狀態對應）

| #     | 元件                | 出現狀態                                                  | 主要方法 / callback                    |
| ----- | ------------------- | --------------------------------------------------------- | -------------------------------------- |
| C-001 | `RecordButton`      | default, recording_waiting, recording_active              | `onClick => startRecording()           | stopRecording()` |
| C-002 | `MarkdownEditor`    | default, recording_waiting, recording_active, finished    | `onChange => saveDraft() / autoSave()` |
| C-003 | `TranscriptPane`    | recording_waiting, recording_active, processing, finished | `onScroll => unlockOnScroll()`         |
| C-004 | `ToLatestButton`    | recording_waiting, finished                               | `onClick => toLatest()`                |
| C-005 | `ProcessingOverlay` | processing                                                | 顯示轉錄進度與等待動畫                 |
| C-006 | `ExportButton`      | finished                                                  | `onClick => downloadZip()`             |
| C-007 | `NewNoteButton`     | finished                                                  | `onClick => newNote()`                 |
| C-008 | `StatusIndicator`   | all states                                                | 顯示當前狀態（錄音中/處理中/已完成）   |

**各狀態畫面組成**：

| 狀態              | 顯示元件                                                                              |
| ----------------- | ------------------------------------------------------------------------------------- |
| default           | MarkdownEditor + RecordButton + NewNoteButton                                         |
| recording_waiting | MarkdownEditor + TranscriptPane + NewNoteButton + RecordButton(停止) + ToLatestButton |
| recording_active  | MarkdownEditor + TranscriptPane + NewNoteButton + RecordButton(停止) + ToLatestButton |
| processing        | MarkdownEditor + TranscriptPane + ProcessingOverlay                                   |
| finished          | MarkdownEditor + TranscriptPane + ExportButton + NewNoteButton + ToLatestButton       |

**NewNoteButton 在不同狀態的行為**：

| 狀態              | NewNoteButton 行為       | 說明                                                                                           |
| ----------------- | ------------------------ | ---------------------------------------------------------------------------------------------- |
| default           | 清空當前會話並開始新筆記 | 如果存在活躍會話，會先刪除該會話及其所有相關數據；清空編輯器內容和本地草稿；狀態保持在 default |
| recording_waiting | 停止錄音並清空當前會話   | 停止錄音，刪除當前會話及其所有相關數據，回到 default 狀態                                      |
| recording_active  | 停止錄音並清空當前會話   | 停止錄音，刪除當前會話及其所有相關數據，回到 default 狀態                                      |
| finished          | 清空當前會話並開始新筆記 | 刪除已完成的會話及其所有相關數據，清空編輯器內容，回到 default 狀態                            |

### 4. Supabase PostgreSQL 資料庫架構

**架構特色**：
- ✅ **雲端原生**：專為 Supabase 設計，享受完整雲端服務
- ✅ **檔案分離**：音訊檔案使用免費的 Cloudflare R2 儲存，降低成本
- ✅ **自動初始化**：提供完整 SQL 腳本，一鍵建立所有表格
- ✅ **高可用性**：Supabase 提供 99.9% 可用性保證


```Mermaid

sequenceDiagram
    %% ==== Participants ====
    actor User as 👤 使用者
    participant Browser as 🌐 瀏覽器
    participant BE as ⚡ FastAPI
    participant R2 as ☁️ R2 Storage
    participant DB as 💾 Supabase
    participant STT as 🤖 STT Model
    participant WS as 🔌 Websocket

    %% ==== 即時錄音流程 ====
    rect rgb(240,248,255)
        Note over User,WS: 🎙️ 即時錄音與轉錄
        User ->> Browser: 點擊開始錄音
        Browser ->>+ BE: 開新 Session 

        par 儲存與轉錄
            BE ->>+ R2: 儲存 WebM
            BE ->>+ STT: WebM → Whisper
            STT -->> BE: 回覆 Transcript JSON
            BE -->> WS: 傳入逐字稿
            BE ->>+ DB: INSERT transcript_segments
        end

        WS -->> Browser: 送出逐字稿
        Browser -->> User: 更新逐字稿
    end
        WS -->> Browser: 送出逐字稿
        Browser -->> User: 更新逐字稿
    end

    %% ==== 匯出功能 ====
    rect rgb(248,255,248)
        Note over User,WS: 📥 匯出筆記與逐字稿
        User ->> Browser: 點擊匯出
        Browser ->>+ BE: GET /api/export?type=zip
        BE ->>+ DB: SELECT note & transcript
        DB -->>- BE: 文字內容
        BE ->>+ R2: 讀取音訊檔案
        R2 -->>- BE: WebM files
        BE -->>- Browser: ZIP 檔案
        Browser -->> User: 下載完成
    end

```

```mermaid
erDiagram
    sessions {
        UUID id PK "gen_random_uuid()"
        VARCHAR title "會話標題(可選)"
        session_type type "note_only/recording"
        session_status status "active/completed/error"
        lang_code language "zh-TW/en-US"
        TIMESTAMPTZ created_at "建立時間"
        TIMESTAMPZ updated_at "更新時間"
        TIMESTAMPTZ completed_at "完成時間"
    }

    audio_files {
        UUID id PK "gen_random_uuid()"
        UUID session_id FK "關聯會話ID"
        INT chunk_sequence "音檔切片序號"
        TEXT r2_key "Cloudflare R2 物件鍵值"
        TEXT r2_bucket "Cloudflare R2 儲存桶名稱"
        INT file_size "檔案大小"
        DECIMAL duration_seconds "時長(秒)"
        TIMESTAMPTZ created_at "建立時間"
    }

    transcript_segments {
        UUID id PK "gen_random_uuid()"
        UUID session_id FK "關聯會話ID"
        INT chunk_sequence "逐字稿片段序號"
        DECIMAL start_time "開始時間(秒)"
        DECIMAL end_time "結束時間(秒)"
        TEXT text "逐字稿內容"
        DECIMAL confidence "信心度"
        TIMESTAMPTZ created_at "建立時間"
    }

    transcripts {
        UUID id PK "gen_random_uuid()"
        UUID session_id FK "關聯會話ID(UNIQUE)"
        TEXT full_text "完整逐字稿"
        TIMESTAMPTZ created_at "建立時間"
        TIMESTAMPTZ updated_at "更新時間"
    }

    notes {
        UUID id PK "gen_random_uuid()"
        UUID session_id FK "關聯會話ID(UNIQUE)"
        TEXT content "筆記內容(Markdown)"
        TIMESTAMPTZ client_ts "客戶端時間戳(可選)"
        TIMESTAMPTZ created_at "建立時間"
        TIMESTAMPTZ updated_at "更新時間"
    }

    sessions ||--o{ audio_files : "一對多(可選)<br/>純筆記模式無音檔"
    sessions ||--o{ transcript_segments : "一對多(可選)<br/>純筆記模式無逐字稿"
    sessions ||--o| transcripts : "一對一(可選)<br/>純筆記模式無逐字稿"
    sessions ||--|| notes : "一對一(必須)<br/>所有會話都有筆記"
```

### 5. 前端狀態管理

**前端應用狀態 (AppState)**：
```typescript
type AppState = 
  | 'default'           // 預設畫面：可寫筆記，顯示錄音按鈕
  | 'recording_waiting' // 錄音中，尚未收到逐字稿
  | 'recording_active'  // 錄音中，已收到逐字稿並即時顯示
  | 'processing'        // 處理畫面：停止錄音後，處理剩餘逐字稿
  | 'finished'          // 完整逐字稿畫面：可編輯筆記、匯出、開新筆記
```

**狀態轉換規則**：
```
default → recording_waiting           // 按下錄音按鈕
recording_waiting → recording_active  // 收到第一段逐字稿
recording_active → processing         // 按下停止錄音
processing → finished                 // 逐字稿處理完成
finished → default                    // 按下 New note
default → finished                    // 純筆記模式直接完成（未來功能）
```

**各狀態功能對照**：

| 狀態              | 筆記編輯 | 錄音功能 | 逐字稿顯示 | 匯出功能 | 特殊功能   |
| ----------------- | -------- | -------- | ---------- | -------- | ---------- |
| default           | ✅ 可編輯 | ✅ 可開始 | ❌ 無       | ❌ 無     | draft 暫存 |
| recording_waiting | ✅ 可編輯 | ✅ 可停止 | ⏳ 等待中   | ❌ 無     | 計時器     |
| recording_active  | ✅ 可編輯 | ✅ 可停止 | ✅ 即時顯示 | ❌ 無     | 音檔上傳   |
| processing        | ❌ 鎖定   | ❌ 無     | ✅ 更新中   | ❌ 無     | 等待動畫   |
| finished          | ✅ 可編輯 | ❌ 無     | ✅ 完整顯示 | ✅ 可匯出 | New note   |

**後端 Session 狀態對應**：

| 前端狀態          | 後端 Session Status | Session Type        | 說明                           |
| ----------------- | ------------------- | ------------------- | ------------------------------ |
| default           | draft               | note_only           | 草稿狀態，尚未正式建立 session |
| default (已建立)  | active              | note_only           | 純筆記 session                 |
| recording_waiting | active              | recording           | 錄音中，尚未收到逐字稿         |
| recording_active  | active              | recording           | 錄音中，已收到逐字稿並即時顯示 |
| processing        | active              | recording           | 錄音結束，轉錄處理中           |
| finished          | completed           | note_only/recording | 可匯出完整資料                 |

### 6. Azure OpenAI 整合架構 (REST API 簡化版)

**技術選擇理由**：
- ✅ **企業級品質**：Azure OpenAI 提供穩定的 Whisper 模型服務
- ✅ **多語言支援**：優秀的中文語音識別準確度
- ✅ **API 整合**：標準 OpenAI SDK，開發簡單
- ✅ **資料安全**：Microsoft 提供企業級資料保護
- ✅ **架構簡化**：使用完整 10s 檔案，提高成功率

**工作流程**：
```
前端錄音 (10s WebM) → REST API 上傳完整檔案 → 儲存到 R2 → 
FFmpeg 轉換 → Azure OpenAI Whisper API → WebSocket 推送轉錄結果
```

---

## 8. 使用場景與狀態流程

### 場景 1：純筆記模式（不錄音）

- **目標**：讓使用者能快速開始做筆記，無需進行繁瑣的設定。
- **流程**：
  1. **進入頁面**：使用者打開應用，看到預設畫面（`default` 狀態）。
  2. **輸入內容**：
     - 在 `MarkdownEditor` 中輸入筆記，內容暫存於 `localStorage`（`draft_note`）。
  3. **建立會話**：
     - 使用者首次輸入時，自動觸發 `createNoteSession()`，在後端建立一個 `note_only` 類型的 session。
     - 成功後，`useAutoSave` hook 啟動，每 10 秒將筆記內容同步到後端。
  4. **完成筆記**：
     - 使用者可以隨時離開，筆記已儲存。
     - （未來功能）可手動點擊「完成」，將 session 狀態改為 `completed`。

```mermaid
graph TD
    A((使用者進入頁面)) --> B[預設畫面<br/>default 狀態]
    
    B --> C[輸入筆記內容]
    
    C --> D[暫存至 localStorage<br/>draft_note]
    
    D --> E{首次輸入？}
    
    E -->|是| F[自動觸發<br/>createNoteSession]
    E -->|否| G[繼續編輯]
    
    F --> H[建立 note_only<br/>類型 session]
    
    H --> I[啟動 useAutoSave hook]
    
    I --> J[每 10 秒同步<br/>筆記至後端]
    
    G --> J
    J --> K[使用者離開<br/>筆記已儲存]
    J --> L[手動點擊完成<br/>未來功能]
    
    L --> M[session 狀態<br/>改為 completed]
    
    %% 樣式定義
    classDef startEndStyle fill:#e8f5e8,stroke:#4caf50,stroke-width:3px,color:#000
    classDef processStyle fill:#e3f2fd,stroke:#2196f3,stroke-width:2px,color:#000
    classDef decisionStyle fill:#fff3e0,stroke:#ff9800,stroke-width:2px,color:#000
    classDef dataStyle fill:#f3e5f5,stroke:#9c27b0,stroke-width:2px,color:#000
    classDef autoStyle fill:#e8f5e8,stroke:#4caf50,stroke-width:2px,color:#000
    classDef futureStyle fill:#f5f5f5,stroke:#9e9e9e,stroke-width:2px,color:#666,stroke-dasharray: 5 5
    
    %% 應用樣式
    class A,K startEndStyle
    class B,C,F,H,I processStyle
    class E decisionStyle
    class D,J dataStyle
    class G autoStyle
    class L,M futureStyle

```

### 場景 2：先筆記後錄音

- **目標**：允許使用者在已有筆記的基礎上，隨時開始錄音。
- **流程**：
  1. **開始筆記**：同「場景 1」，使用者已建立一個 `note_only` 會話並有一些筆記內容。
  2. **點擊錄音**：使用者點擊 `RecordButton`。
  3. **升級會話**：
     - 呼叫 `upgradeToRecording()`，將後端 session type 從 `note_only` 改為 `recording`。
     - 前端狀態從 `default` 轉為 `recording_waiting`。
  4. **開始錄音**：同「場景 3」的錄音流程。

### 場景 3：邊錄邊記模式

- **目標**：提供最核心的「錄音 + 即時逐字稿 + 筆記」整合體驗。
- **流程**：
  1. **建立會話**：
     - 使用者在 `default` 狀態下，直接點擊 `RecordButton`。
     - 呼叫 `createRecordingSession()` 建立 `recording` 類型的 session。
     - 前端狀態立即轉為 `recording_waiting`。
  2. **錄音與上傳**：
     - `MediaRecorder` 開始錄音，使用 `timeslice=10000`，每 10 秒產生一個完整 WebM 檔案。
     - `ondataavailable` 事件觸發，使用 `fetch` POST 到 `/api/segment` 上傳檔案。
     - 後端立即回應 `{"ack": seq}`，前端處理錯誤時暫存到 IndexedDB。
  3. **即時逐字稿**：
     - `ws_transcript_feed` WebSocket 連線建立。
     - 後端收到檔案後，在背景執行 FFmpeg 轉換 + Whisper API 轉錄。
     - Whisper API 返回轉錄結果，後端透過 WebSocket 推送給前端。
     - `TranscriptPane` 每 10 秒收到一批逐字稿片段。
  4. **同步筆記**：
     - 使用者可以在 `MarkdownEditor` 中隨時輸入筆記，`useAutoSave` 會定期儲存。
  5. **停止錄音**：
     - 使用者點擊 `RecordButton` (此時為停止圖示)。
     - `stopRecording()` 被呼叫，`MediaRecorder` 停止。
     - 前端狀態轉為 `processing`。
  6. **等待轉錄完成**：
     - `ProcessingOverlay` 顯示，鎖定編輯區。
     - 後端處理剩餘的音檔切片，並將最後的逐字稿推送回來。
  7. **完成**：
     - 當後端推送 `transcript_complete` 訊息時，前端狀態轉為 `finished`。
     - `ProcessingOverlay` 消失，使用者可以檢視完整逐字稿、編輯筆記、並匯出。
  8. **匯出與新筆記**：
     - `ExportButton` 可用，點擊下載包含 `.mp4`、`transcript.txt` 和 `note.md` 的 ZIP 檔。
     - `NewNoteButton` 可用，點擊清空當前畫面，回到 `default` 狀態，開始新的筆記。


# END FILE CONTENTS


# File: frontend/components/waiting-state.tsx

"use client"

import { Loader2 } from "lucide-react"

export function WaitingState() {
  return (
    <div className="h-full flex flex-col items-center justify-center p-6 space-y-4">
      <Loader2 className="w-8 h-8 animate-spin text-muted-foreground" />
      <div className="text-center">
        <div className="text-lg font-medium text-foreground">Transcription in progress,</div>
        <div className="text-lg font-medium text-foreground">please wait.</div>
      </div>
    </div>
  )
}


# END FILE CONTENTS


# File: frontend/hooks/use-recording-new.ts

"use client"

import { useState, useCallback, useRef, useEffect } from 'react'
import { useAppStateContext } from './use-app-state-context'
import { isFeatureEnabled } from '../lib/feature-flags'
import { SERVICE_KEYS, serviceContainer } from '../lib/services'
import type { IRecordingService, ITranscriptService, TranscriptMessage } from '../lib/services'

interface UseRecordingNewReturn {
  isRecording: boolean
  recordingTime: number
  transcripts: TranscriptMessage[]
  transcriptCompleted: boolean
  error: string | null
  startRecording: (sessionId: string) => Promise<void>
  stopRecording: () => void
  clearTranscripts: () => void
}

/**
 * useRecordingNew - 錄音管理 Hook (適配器層)
 *
 * 重構為適配器層：
 * - 內部調用 RecordingService 和 TranscriptService 而非直接管理音頻錄製器
 * - 保持對外接口完全不變，確保組件層無感知變更
 * - 簡化複雜的錄音邏輯，委託給服務層處理
 */
export function useRecordingNew(): UseRecordingNewReturn {
  // 使用新的 Context 狀態管理
  const context = useAppStateContext()

  // 本地狀態（將逐漸遷移到 Context）
  const [localError, setLocalError] = useState<string | null>(null)
  const [localTranscriptCompleted, setLocalTranscriptCompleted] = useState(false)

  // 服務引用
  const recordingServiceRef = useRef<IRecordingService | null>(null)
  const transcriptServiceRef = useRef<ITranscriptService | null>(null)
  const currentSessionIdRef = useRef<string | null>(null)

  // 全域唯一錄音計時器 - 使用 useRef 保持穩定引用
  const recTimerRef = useRef<ReturnType<typeof setInterval> | null>(null)
  const recordingStartedAtRef = useRef<number | null>(null)

  // waiting→active 超時保險
  const waitingTimeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null)

  console.log('🔄 [useRecordingNew] Hook 初始化 (適配器層)，功能開關狀態:', {
    useNewStateManagement: isFeatureEnabled('useNewStateManagement'),
    useNewRecordingHook: isFeatureEnabled('useNewRecordingHook'),
    contextState: context.appData.state,
    contextIsRecording: context.appData.isRecording,
    contextRecordingTime: context.appData.recordingTime,
    timestamp: new Date().toISOString()
  })

  // 清除 waiting 超時
  const clearWaitingTimeout = useCallback(() => {
    if (waitingTimeoutRef.current) {
      clearTimeout(waitingTimeoutRef.current)
      waitingTimeoutRef.current = null
      console.log('⏰ [useRecordingNew] Waiting 超時已清除')
    }
  }, [])

  // 初始化服務實例
  const initializeServices = useCallback(() => {
    if (!recordingServiceRef.current) {
      try {
        recordingServiceRef.current = serviceContainer.resolve<IRecordingService>(SERVICE_KEYS.RECORDING_SERVICE)
        console.log('✅ [useRecordingNew] RecordingService 初始化成功')
      } catch (error) {
        console.error('❌ [useRecordingNew] 無法解析 RecordingService:', error)
        throw new Error('錄音服務初始化失敗')
      }
    }

    if (!transcriptServiceRef.current) {
      try {
        transcriptServiceRef.current = serviceContainer.resolve<ITranscriptService>(SERVICE_KEYS.TRANSCRIPT_SERVICE)
        console.log('✅ [useRecordingNew] TranscriptService 初始化成功')
      } catch (error) {
        console.error('❌ [useRecordingNew] 無法解析 TranscriptService:', error)
        throw new Error('逐字稿服務初始化失敗')
      }
    }
  }, [])

  // 處理逐字稿接收 - 整合 Context
  const handleTranscript = useCallback((transcript: TranscriptMessage) => {
    console.log('📝 [useRecordingNew] 收到逐字稿訊息:', {
      type: transcript.type,
      text: transcript.text,
      textLength: transcript.text?.length || 0,
      start_time: transcript.start_time,
      end_time: transcript.end_time,
      start_sequence: transcript.start_sequence,
      confidence: transcript.confidence,
      sessionId: currentSessionIdRef.current,
      timestamp: new Date().toISOString(),
    })

    // 處理轉錄完成通知
    if (transcript.type === 'transcript_complete' || transcript.message === 'transcription_complete') {
      console.log('✅ [useRecordingNew] 逐字稿轉錄完成，設定 transcriptCompleted=true')
      setLocalTranscriptCompleted(true)
      return
    }

    // 處理 active phase 訊息（重要：這會觸發狀態轉換）
    if (transcript.type === 'active' || transcript.phase === 'active') {
      console.log('🚀 [useRecordingNew] 收到 active phase 訊息，轉錄開始')
      // 清除 waiting 超時
      clearWaitingTimeout()
      // 使用狀態機觸發轉換
      const result = context.transition('FIRST_TRANSCRIPT_RECEIVED')
      if (result?.success) {
        console.log('✅ [useRecordingNew] 狀態機轉換成功: recording_waiting → recording_active')
      }
      return
    }

    // 只處理逐字稿片段類型的訊息
    if (transcript.type !== 'transcript_segment') {
      console.log('⚠️ [useRecordingNew] 跳過非逐字稿片段訊息:', transcript.type)
      return
    }

    if (!transcript.text) {
      console.log('⚠️ [useRecordingNew] 跳過空文字逐字稿')
      return
    }

    console.log('🔄 [useRecordingNew] 開始處理逐字稿片段...', {
      text: transcript.text,
      textPreview: transcript.text.substring(0, 50) + '...',
      sequence: transcript.start_sequence,
      startTime: transcript.start_time,
      endTime: transcript.end_time
    })

    // 使用 Context 更新逐字稿 - 轉換為 TranscriptEntry 格式
    const startTime = transcript.start_time ?? 0
    const hours = Math.floor(startTime / 3600)
    const minutes = Math.floor((startTime % 3600) / 60)
    const seconds = Math.floor(startTime % 60)
    const timeStr = `${hours.toString().padStart(2, "0")}:${minutes.toString().padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`

    const transcriptEntry = {
      time: timeStr,
      text: transcript.text ?? '',
    }

    // 如果是第一個逐字稿片段且狀態還是 waiting，先觸發狀態轉換
    const isFirstTranscript = context.appData.state === 'recording_waiting' && context.appData.transcriptEntries.length === 0

    context.addTranscriptEntry(transcriptEntry)
    console.log('✅ [useRecordingNew] 逐字稿已添加到 Context')

    if (isFirstTranscript) {
      // 清除 waiting 超時
      clearWaitingTimeout()
      const result = context.transition('FIRST_TRANSCRIPT_RECEIVED')
      if (result?.success) {
        console.log('✅ [useRecordingNew] 收到第一個逐字稿片段，狀態機轉換: recording_waiting → recording_active')
      } else {
        console.warn('⚠️ [useRecordingNew] 狀態機轉換失敗:', result?.error)
      }
    }
  }, [context, clearWaitingTimeout])

  // 開始錄音 - 使用服務層
  const startRecording = useCallback(async (sessionId: string): Promise<void> => {
    try {
      setLocalError(null)
      context.setError(null)
      setLocalTranscriptCompleted(false)
      currentSessionIdRef.current = sessionId

      // 立即啟動計時器
      if (recTimerRef.current) {
        clearInterval(recTimerRef.current)
        recTimerRef.current = null
      }
      recordingStartedAtRef.current = Date.now()
      context.setRecordingTime(0)
      recTimerRef.current = setInterval(() => {
        if (recordingStartedAtRef.current) {
          const sec = Math.floor((Date.now() - recordingStartedAtRef.current) / 1000)
          context.setRecordingTime(sec)
        }
      }, 1000)

      context.setRecording(true)
      console.log('⏱️ [useRecordingNew] 計時器立即啟動')

      // 設置 waiting→active 超時保險（20秒）
      clearWaitingTimeout()
      waitingTimeoutRef.current = setTimeout(() => {
        if (context.appData.state === 'recording_waiting') {
          console.warn('⚠️ [useRecordingNew] 20秒內未收到逐字稿，強制轉換到 recording_active')
          const result = context.transition('FIRST_TRANSCRIPT_RECEIVED')
          if (result?.success) {
            console.log('✅ [useRecordingNew] 超時保險觸發: recording_waiting → recording_active')
          } else {
            console.error('❌ [useRecordingNew] 超時保險轉換失敗:', result?.error)
          }
        }
      }, 20000)
      console.log('⏰ [useRecordingNew] 已設置 20 秒 waiting 超時保險')

      // 初始化服務
      initializeServices()
      const recordingService = recordingServiceRef.current!
      console.log('Recorder instance', recordingService)
      const transcriptService = transcriptServiceRef.current!

      // 確保先建立 WebSocket 連線再註冊監聽器，避免漏接訊息
      await transcriptService.connect(sessionId)

      // 設置錄音狀態監聽（保留原本 interval 作為備用）
      const checkRecordingState = () => {
        const state = recordingService.getRecordingState()
        context.setRecording(state.isRecording)
        // context.setRecordingTime(state.recordingTime) // 由 recTimer 主導
        if (state.error) {
          setLocalError(state.error)
          context.setError(state.error)
        }
      }
      const stateCheckInterval = setInterval(checkRecordingState, 1000)

      transcriptService.addTranscriptListener(sessionId, handleTranscript)
      await recordingService.startRecording(sessionId)

      const cleanup = () => {
        clearInterval(stateCheckInterval)
        transcriptService.removeTranscriptListener(sessionId, handleTranscript)
        if (recTimerRef.current) {
          clearInterval(recTimerRef.current)
          recTimerRef.current = null
          recordingStartedAtRef.current = null
          console.log('⏹️ [useRecordingNew] 計時器已清除')
        }
        // 清除 waiting 超時
        clearWaitingTimeout()
      }
      (globalThis as any).currentRecordingCleanup = cleanup
      console.log('✅ [useRecordingNew] 錄音開始成功 (服務層)，Session ID:', sessionId)
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '開始錄音失敗'
      setLocalError(errorMessage)
      context.setError(errorMessage)
      console.error('❌ [useRecordingNew] 開始錄音失敗:', err)
      // 清除 waiting 超時
      clearWaitingTimeout()
    }
  }, [initializeServices, handleTranscript, context, clearWaitingTimeout])

  // 停止錄音 - 使用服務層
  const stopRecording = useCallback(() => {
    try {
      console.log('🛑 [useRecordingNew] 停止錄音 (適配器層)')
      // 清除 recTimer
      if (recTimerRef.current) {
        clearInterval(recTimerRef.current)
        recTimerRef.current = null
        recordingStartedAtRef.current = null
        console.log('⏹️ [useRecordingNew] 計時器已清除')
      }
      // 清除 waiting 超時
      clearWaitingTimeout()
      // 執行清理函數
      const cleanup = (globalThis as any).currentRecordingCleanup
      if (cleanup) {
        cleanup()
        delete (globalThis as any).currentRecordingCleanup
      }
      // 使用服務層停止錄音
      const recordingService = recordingServiceRef.current
      if (recordingService) {
        recordingService.stopRecording()
      }

      // 更新 Context 狀態
      context.setRecording(false)

      console.log('✅ [useRecordingNew] 錄音停止成功 (服務層)，等待轉錄完成')

    } catch (err) {
      console.error('❌ [useRecordingNew] 停止錄音失敗:', err)
      const errorMessage = '停止錄音時發生錯誤'
      setLocalError(errorMessage)
      context.setError(errorMessage)
    }
  }, [context, clearWaitingTimeout])

  // 清空逐字稿 - 整合 Context
  const clearTranscripts = useCallback(() => {
    context.setTranscriptEntries([])
    setLocalTranscriptCompleted(false)
    console.log('🔄 [useRecordingNew] 逐字稿已清除 (適配器層)')
  }, [context])

  // 清理資源
  useEffect(() => {
    return () => {
      // 清理逐字稿監聽器
      if (currentSessionIdRef.current && transcriptServiceRef.current) {
        transcriptServiceRef.current.removeTranscriptListener(currentSessionIdRef.current, handleTranscript)
      }

      // 清理錄音狀態檢查
      const cleanup = (globalThis as any).currentRecordingCleanup
      if (cleanup) {
        cleanup()
        delete (globalThis as any).currentRecordingCleanup
      }

      // 清理計時器
      if (recTimerRef.current) {
        clearInterval(recTimerRef.current)
        recTimerRef.current = null
        recordingStartedAtRef.current = null
        console.log('🔚 [useRecordingNew] useEffect cleanup: 計時器已清除')
      }

      // 清理 waiting 超時
      clearWaitingTimeout()
    }
  }, [handleTranscript, clearWaitingTimeout])

  // 組件真正卸載時的清理（例如頁面切換）
  useEffect(() => {
    const handleUnload = () => {
      console.log('🔚 [useRecordingNew] 頁面卸載，清理所有資源 (適配器層)')
      const cleanup = (globalThis as any).currentRecordingCleanup
      if (cleanup) {
        cleanup()
        delete (globalThis as any).currentRecordingCleanup
      }

      const recordingService = recordingServiceRef.current
      if (recordingService) {
        recordingService.stopRecording()
      }
    }

    window.addEventListener('beforeunload', handleUnload)
    return () => {
      window.removeEventListener('beforeunload', handleUnload)
    }
  }, [])

  // 轉換 TranscriptMessage[] 為向後相容格式
  const compatibleTranscripts: TranscriptMessage[] = context.appData.transcriptEntries.map((entry, index) => ({
    type: 'transcript_segment',
    text: entry.text,
    start_time: 0, // 簡化處理，實際應該從 time 字串解析
    end_time: 0,
    start_sequence: index,
    confidence: 1.0,
    timestamp: Date.now(),
  }))

  // 返回介面保持與舊版相容
  return {
    isRecording: context.appData.isRecording,
    recordingTime: context.appData.recordingTime,
    transcripts: compatibleTranscripts,
    transcriptCompleted: localTranscriptCompleted,
    error: context.error || localError,
    startRecording,
    stopRecording,
    clearTranscripts,
  }
}


# END FILE CONTENTS


# File: frontend/.env.example

# StudyScriber Frontend Environment Variables
# 複製此文件為 .env.local 並填入實際的配置值

# 後端 API 基礎 URL
NEXT_PUBLIC_API_URL=http://127.0.0.1:8000

# WebSocket 基礎 URL
NEXT_PUBLIC_WS_URL=ws://127.0.0.1:8000

# 開發模式配置
NODE_ENV=development

# 音訊切片間隔配置 (影響前端錄音間隔，需與後端保持一致)
# 方法一：直接設定毫秒數 (優先級較高)
# NEXT_PUBLIC_AUDIO_CHUNK_INTERVAL_MS=10000

# 方法二：設定秒數 (會自動轉換為毫秒)
NEXT_PUBLIC_AUDIO_CHUNK_INTERVAL_SEC=10

# 如果都未設定，預設為 10 秒 (10000ms)
# 建議值：5-30秒，需與後端 AUDIO_CHUNK_DURATION_SEC 保持一致


# END FILE CONTENTS


# File: app/ws/__init__.py

"""
WebSocket 模組

提供即時音訊上傳和逐字稿推送功能
"""

"""app.ws package 初始化檔

避免在 import 時造成循環依賴，暫不主動載入 upload_audio。需要時請直接從 `app.ws.upload_audio` 導入目標。"""

__all__ = []


# END FILE CONTENTS


# File: frontend/components/ui/sheet.tsx

"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}


# END FILE CONTENTS


# File: app/schemas/session.py

"""
StudyScriber Session Pydantic 模型

定義會話相關的請求和響應模型
"""
import enum
from datetime import datetime
from typing import Optional
from uuid import UUID
from pydantic import BaseModel, Field, ConfigDict

class SessionType(str, enum.Enum):
    """會話類型"""
    NOTE_ONLY = "note_only"
    RECORDING = "recording"

class SessionStatus(str, enum.Enum):
    """會話狀態"""
    ACTIVE = "active"
    COMPLETED = "completed"
    ERROR = "error"

class LanguageCode(str, enum.Enum):
    """支援的語言代碼"""
    ZH_TW = "zh-TW"
    EN_US = "en-US"


class SessionCreateRequest(BaseModel):
    """建立會話請求"""
    title: Optional[str] = Field(None, max_length=150, description="會話標題")
    type: SessionType = Field(SessionType.NOTE_ONLY, description="會話類型")
    language: LanguageCode = Field(LanguageCode.ZH_TW, description="語言設定")
    stt_provider: Optional[str] = Field(None, description="語音轉文字 Provider ('whisper' or 'gemini')")
    content: Optional[str] = Field(None, description="初始筆記內容")
    start_ts: Optional[int] = Field(None, description="錄音開始時間戳（毫秒）")


class SessionOut(BaseModel):
    """會話輸出模型"""
    id: UUID
    type: SessionType
    status: SessionStatus
    title: Optional[str] = None
    language: LanguageCode
    created_at: datetime
    updated_at: datetime
    completed_at: Optional[datetime] = None

    class Config:
        from_attributes = True


class SessionUpgradeRequest(BaseModel):
    """會話升級請求（純筆記 → 錄音）"""
    language: Optional[LanguageCode] = Field(None, description="錄音語言設定")


class SessionFinishRequest(BaseModel):
    """完成會話請求"""
    duration: Optional[int] = Field(None, ge=0, description="最終錄音時長（秒）")


class SessionStatusResponse(BaseModel):
    """會話狀態響應"""
    success: bool = Field(description="操作是否成功")
    message: str = Field(description="回應訊息")
    session: Optional[SessionOut] = Field(None, description="會話資料")


class ActiveSessionError(BaseModel):
    """活躍會話衝突錯誤"""
    model_config = ConfigDict(json_encoders={UUID: str})

    error: str = Field("active_session_exists", description="錯誤類型")
    message: str = Field(description="錯誤訊息")
    active_session_id: UUID = Field(description="目前活躍會話 ID")


class SessionProviderUpdateRequest(BaseModel):
    """更新會話 STT Provider 請求"""
    stt_provider: str = Field(..., description="語音轉文字 Provider ('whisper' or 'gemini')")
    
    class Config:
        json_schema_extra = {
            "example": {
                "stt_provider": "gemini"
            }
        }


# END FILE CONTENTS


# File: frontend/components/ui/input.tsx

import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }


# END FILE CONTENTS


# File: frontend/lib/services/__tests__/transcript-service.test.ts

"use client"

import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest'
import { TranscriptService } from '../transcript-service'
import { transcriptManager } from '../../transcript-manager'
import type { TranscriptMessage } from '../interfaces'

// Mock transcriptManager
const mockTranscriptManager = {
    connect: vi.fn(),
    disconnect: vi.fn(),
    addListener: vi.fn(),
    removeListener: vi.fn(),
    isConnected: vi.fn(),
    getCurrentTranscripts: vi.fn(),
    clearTranscripts: vi.fn(),
    getConnectionCount: vi.fn(),
}

vi.mock('../../transcript-manager', () => ({
    transcriptManager: mockTranscriptManager
}))

describe('TranscriptService', () => {
    let transcriptService: TranscriptService

    beforeEach(() => {
        transcriptService = new TranscriptService()
        vi.clearAllMocks()
    })

    afterEach(() => {
        vi.restoreAllMocks()
    })

    describe('服務初始化', () => {
        it('應該正確初始化 TranscriptService', () => {
            expect(transcriptService).toBeDefined()
            expect(transcriptService['serviceName']).toBe('TranscriptService')
        })

        it('應該正確啟動和停止服務', async () => {
            await transcriptService.start()
            expect(transcriptService['isRunning']).toBe(true)

            await transcriptService.stop()
            expect(transcriptService['isRunning']).toBe(false)
        })
    })

    describe('connect', () => {
        const sessionId = 'test-session-id'

        it('應該成功連接逐字稿服務', async () => {
            mockTranscriptManager.connect.mockResolvedValue(undefined)

            await transcriptService.connect(sessionId)

            expect(mockTranscriptManager.connect).toHaveBeenCalledWith(sessionId)
            expect(transcriptService['connectedSessions'].has(sessionId)).toBe(true)
        })

        it('應該處理連接失敗', async () => {
            const connectError = new Error('Connection failed')
            mockTranscriptManager.connect.mockRejectedValue(connectError)

            await expect(transcriptService.connect(sessionId))
                .rejects.toThrow('Connection failed')

            expect(transcriptService['connectedSessions'].has(sessionId)).toBe(false)
        })

        it('應該處理重複連接請求', async () => {
            mockTranscriptManager.connect.mockResolvedValue(undefined)

            // 首次連接
            await transcriptService.connect(sessionId)

            // 重複連接（應該被忽略）
            await transcriptService.connect(sessionId)

            expect(mockTranscriptManager.connect).toHaveBeenCalledTimes(1)
        })

        it('應該支援多個會話同時連接', async () => {
            mockTranscriptManager.connect.mockResolvedValue(undefined)

            await transcriptService.connect('session-1')
            await transcriptService.connect('session-2')

            expect(transcriptService['connectedSessions'].has('session-1')).toBe(true)
            expect(transcriptService['connectedSessions'].has('session-2')).toBe(true)
            expect(mockTranscriptManager.connect).toHaveBeenCalledTimes(2)
        })
    })

    describe('disconnect', () => {
        const sessionId = 'test-session-id'

        beforeEach(async () => {
            // Setup connected state
            mockTranscriptManager.connect.mockResolvedValue(undefined)
            await transcriptService.connect(sessionId)
        })

        it('應該成功斷開特定會話', async () => {
            mockTranscriptManager.disconnect.mockResolvedValue(undefined)

            await transcriptService.disconnect(sessionId)

            expect(mockTranscriptManager.disconnect).toHaveBeenCalledWith(sessionId)
            expect(transcriptService['connectedSessions'].has(sessionId)).toBe(false)
        })

        it('應該斷開所有會話（當不指定 sessionId 時）', async () => {
            // 連接多個會話
            await transcriptService.connect('session-2')
            mockTranscriptManager.disconnect.mockResolvedValue(undefined)

            await transcriptService.disconnect()

            expect(mockTranscriptManager.disconnect).toHaveBeenCalledTimes(2)
            expect(transcriptService['connectedSessions'].size).toBe(0)
        })

        it('應該清理對應的監聽器', async () => {
            const callback = vi.fn()

            // 添加監聽器
            transcriptService.addTranscriptListener(sessionId, callback)

            mockTranscriptManager.disconnect.mockResolvedValue(undefined)
            await transcriptService.disconnect(sessionId)

            expect(mockTranscriptManager.removeListener).toHaveBeenCalledWith(sessionId, callback)
            expect(transcriptService['sessionListeners'].has(sessionId)).toBe(false)
        })

        it('應該處理斷開不存在的會話', async () => {
            await expect(transcriptService.disconnect('non-existent'))
                .resolves.not.toThrow()
        })

        it('應該處理斷開失敗', async () => {
            const disconnectError = new Error('Disconnect failed')
            mockTranscriptManager.disconnect.mockRejectedValue(disconnectError)

            await expect(transcriptService.disconnect(sessionId))
                .rejects.toThrow('Disconnect failed')
        })
    })

    describe('addTranscriptListener', () => {
        const sessionId = 'test-session-id'
        const callback = vi.fn()

        it('應該成功添加逐字稿監聽器', () => {
            transcriptService.addTranscriptListener(sessionId, callback)

            expect(mockTranscriptManager.addListener).toHaveBeenCalledWith(sessionId, callback)
            expect(transcriptService['sessionListeners'].get(sessionId)?.has(callback)).toBe(true)
        })

        it('應該支援同一會話多個監聽器', () => {
            const callback2 = vi.fn()

            transcriptService.addTranscriptListener(sessionId, callback)
            transcriptService.addTranscriptListener(sessionId, callback2)

            const listeners = transcriptService['sessionListeners'].get(sessionId)
            expect(listeners?.has(callback)).toBe(true)
            expect(listeners?.has(callback2)).toBe(true)
            expect(listeners?.size).toBe(2)
        })

        it('應該防止重複添加相同監聽器', () => {
            transcriptService.addTranscriptListener(sessionId, callback)
            transcriptService.addTranscriptListener(sessionId, callback)

            expect(mockTranscriptManager.addListener).toHaveBeenCalledTimes(1)
            expect(transcriptService['sessionListeners'].get(sessionId)?.size).toBe(1)
        })

        it('應該處理不同會話的監聽器', () => {
            const callback2 = vi.fn()

            transcriptService.addTranscriptListener('session-1', callback)
            transcriptService.addTranscriptListener('session-2', callback2)

            expect(transcriptService['sessionListeners'].get('session-1')?.has(callback)).toBe(true)
            expect(transcriptService['sessionListeners'].get('session-2')?.has(callback2)).toBe(true)
        })
    })

    describe('removeTranscriptListener', () => {
        const sessionId = 'test-session-id'
        const callback = vi.fn()

        beforeEach(() => {
            transcriptService.addTranscriptListener(sessionId, callback)
        })

        it('應該成功移除逐字稿監聽器', () => {
            transcriptService.removeTranscriptListener(sessionId, callback)

            expect(mockTranscriptManager.removeListener).toHaveBeenCalledWith(sessionId, callback)
            expect(transcriptService['sessionListeners'].get(sessionId)?.has(callback)).toBe(false)
        })

        it('應該處理移除不存在的監聽器', () => {
            const nonExistentCallback = vi.fn()

            expect(() => transcriptService.removeTranscriptListener(sessionId, nonExistentCallback))
                .not.toThrow()
        })

        it('應該處理移除不存在會話的監聽器', () => {
            expect(() => transcriptService.removeTranscriptListener('non-existent', callback))
                .not.toThrow()
        })

        it('應該在移除最後一個監聽器時清理會話記錄', () => {
            transcriptService.removeTranscriptListener(sessionId, callback)

            expect(transcriptService['sessionListeners'].has(sessionId)).toBe(false)
        })
    })

    describe('isConnected', () => {
        const sessionId = 'test-session-id'

        it('應該報告正確的連接狀態', async () => {
            expect(transcriptService.isConnected(sessionId)).toBe(false)

            mockTranscriptManager.connect.mockResolvedValue(undefined)
            await transcriptService.connect(sessionId)

            expect(transcriptService.isConnected(sessionId)).toBe(true)

            mockTranscriptManager.disconnect.mockResolvedValue(undefined)
            await transcriptService.disconnect(sessionId)

            expect(transcriptService.isConnected(sessionId)).toBe(false)
        })

        it('應該處理不存在的會話', () => {
            expect(transcriptService.isConnected('non-existent')).toBe(false)
        })
    })

    describe('逐字稿數據處理', () => {
        const sessionId = 'test-session-id'
        const mockTranscript: TranscriptMessage = {
            id: 'transcript-1',
            text: 'Hello world',
            timestamp: '2024-01-01T00:00:00Z',
            confidence: 0.95,
            isPartial: false,
            sessionId
        }

        it('應該正確處理逐字稿訊息', () => {
            const callback = vi.fn()
            transcriptService.addTranscriptListener(sessionId, callback)

            // 模擬收到逐字稿訊息
            const listenerCall = mockTranscriptManager.addListener.mock.calls.find(
                call => call[0] === sessionId
            )
            const transcriptCallback = listenerCall?.[1]

            if (transcriptCallback) {
                transcriptCallback(mockTranscript)
            }

            expect(callback).toHaveBeenCalledWith(mockTranscript)
        })

        it('應該處理部分逐字稿', () => {
            const callback = vi.fn()
            const partialTranscript: TranscriptMessage = {
                ...mockTranscript,
                text: 'Hello wor...',
                isPartial: true,
                confidence: 0.7
            }

            transcriptService.addTranscriptListener(sessionId, callback)

            // 模擬收到部分逐字稿
            const listenerCall = mockTranscriptManager.addListener.mock.calls.find(
                call => call[0] === sessionId
            )
            const transcriptCallback = listenerCall?.[1]

            if (transcriptCallback) {
                transcriptCallback(partialTranscript)
            }

            expect(callback).toHaveBeenCalledWith(partialTranscript)
        })

        it('應該支援多個監聽器同時接收訊息', () => {
            const callback1 = vi.fn()
            const callback2 = vi.fn()

            transcriptService.addTranscriptListener(sessionId, callback1)
            transcriptService.addTranscriptListener(sessionId, callback2)

            // 模擬收到逐字稿訊息
            const listenerCalls = mockTranscriptManager.addListener.mock.calls.filter(
                call => call[0] === sessionId
            )

            listenerCalls.forEach(call => {
                const transcriptCallback = call[1]
                if (transcriptCallback) {
                    transcriptCallback(mockTranscript)
                }
            })

            expect(callback1).toHaveBeenCalledWith(mockTranscript)
            expect(callback2).toHaveBeenCalledWith(mockTranscript)
        })
    })

    describe('錯誤處理', () => {
        const sessionId = 'test-session-id'

        it('應該處理 TranscriptManager 連接錯誤', async () => {
            const connectionError = new Error('WebSocket connection failed')
            mockTranscriptManager.connect.mockRejectedValue(connectionError)

            await expect(transcriptService.connect(sessionId))
                .rejects.toThrow('WebSocket connection failed')

            expect(transcriptService.isConnected(sessionId)).toBe(false)
        })

        it('應該處理 TranscriptManager 斷開錯誤', async () => {
            mockTranscriptManager.connect.mockResolvedValue(undefined)
            await transcriptService.connect(sessionId)

            const disconnectError = new Error('Disconnect failed')
            mockTranscriptManager.disconnect.mockRejectedValue(disconnectError)

            await expect(transcriptService.disconnect(sessionId))
                .rejects.toThrow('Disconnect failed')
        })

        it('應該在連接失敗時清理狀態', async () => {
            const connectionError = new Error('Connection failed')
            mockTranscriptManager.connect.mockRejectedValue(connectionError)

            try {
                await transcriptService.connect(sessionId)
            } catch {
                // 預期的錯誤
            }

            expect(transcriptService['connectedSessions'].has(sessionId)).toBe(false)
        })
    })

    describe('並發場景測試', () => {
        it('應該處理並發連接請求', async () => {
            mockTranscriptManager.connect.mockResolvedValue(undefined)

            const promises = [
                transcriptService.connect('session-1'),
                transcriptService.connect('session-2'),
                transcriptService.connect('session-3')
            ]

            await Promise.all(promises)

            expect(transcriptService['connectedSessions'].size).toBe(3)
            expect(mockTranscriptManager.connect).toHaveBeenCalledTimes(3)
        })

        it('應該處理並發的連接和斷開操作', async () => {
            mockTranscriptManager.connect.mockResolvedValue(undefined)
            mockTranscriptManager.disconnect.mockResolvedValue(undefined)

            // 連接會話
            await transcriptService.connect('session-1')

            const promises = [
                transcriptService.connect('session-2'),
                transcriptService.disconnect('session-1'),
                transcriptService.connect('session-3')
            ]

            await Promise.all(promises)

            expect(transcriptService['connectedSessions'].has('session-1')).toBe(false)
            expect(transcriptService['connectedSessions'].has('session-2')).toBe(true)
            expect(transcriptService['connectedSessions'].has('session-3')).toBe(true)
        })

        it('應該處理快速的添加和移除監聽器操作', () => {
            const callbacks = Array.from({ length: 5 }, () => vi.fn())
            const sessionId = 'test-session'

            // 快速添加多個監聽器
            callbacks.forEach(callback => {
                transcriptService.addTranscriptListener(sessionId, callback)
            })

            expect(transcriptService['sessionListeners'].get(sessionId)?.size).toBe(5)

            // 快速移除監聽器
            callbacks.forEach(callback => {
                transcriptService.removeTranscriptListener(sessionId, callback)
            })

            expect(transcriptService['sessionListeners'].has(sessionId)).toBe(false)
        })
    })

    describe('資源清理', () => {
        it('應該在服務停止時清理所有資源', async () => {
            mockTranscriptManager.connect.mockResolvedValue(undefined)
            mockTranscriptManager.disconnect.mockResolvedValue(undefined)

            // 連接多個會話
            await transcriptService.connect('session-1')
            await transcriptService.connect('session-2')

            // 添加監聽器
            const callback1 = vi.fn()
            const callback2 = vi.fn()
            transcriptService.addTranscriptListener('session-1', callback1)
            transcriptService.addTranscriptListener('session-2', callback2)

            // 停止服務
            await transcriptService.stop()

            // 驗證資源清理
            expect(transcriptService['connectedSessions'].size).toBe(0)
            expect(transcriptService['sessionListeners'].size).toBe(0)
        })

        it('應該處理清理過程中的錯誤', async () => {
            mockTranscriptManager.connect.mockResolvedValue(undefined)
            await transcriptService.connect('session-1')

            // 模擬斷開時發生錯誤
            mockTranscriptManager.disconnect.mockRejectedValue(new Error('Cleanup error'))

            // 服務停止應該不會拋出錯誤
            await expect(transcriptService.stop()).resolves.not.toThrow()
        })
    })

    describe('服務狀態報告', () => {
        it('應該報告正確的服務資訊', () => {
            const info = transcriptService.getServiceInfo()

            expect(info).toMatchObject({
                serviceName: 'TranscriptService',
                isInitialized: expect.any(Boolean),
                isRunning: expect.any(Boolean),
                connectedSessions: expect.any(Array),
                activeListeners: expect.any(Object),
                totalConnections: expect.any(Number)
            })
        })

        it('應該正確報告連接數量', async () => {
            mockTranscriptManager.connect.mockResolvedValue(undefined)

            await transcriptService.connect('session-1')
            await transcriptService.connect('session-2')

            const info = transcriptService.getServiceInfo()

            expect(info.connectedSessions).toHaveLength(2)
            expect(info.totalConnections).toBe(2)
        })

        it('應該正確報告監聽器數量', () => {
            const callback1 = vi.fn()
            const callback2 = vi.fn()

            transcriptService.addTranscriptListener('session-1', callback1)
            transcriptService.addTranscriptListener('session-1', callback2)
            transcriptService.addTranscriptListener('session-2', callback1)

            const info = transcriptService.getServiceInfo()

            expect(info.activeListeners['session-1']).toBe(2)
            expect(info.activeListeners['session-2']).toBe(1)
        })
    })

    describe('邊界條件測試', () => {
        it('應該處理空字符串會話 ID', async () => {
            mockTranscriptManager.connect.mockResolvedValue(undefined)

            await expect(transcriptService.connect('')).resolves.not.toThrow()
            expect(transcriptService.isConnected('')).toBe(true)
        })

        it('應該處理特殊字符的會話 ID', async () => {
            const specialSessionId = 'session-123!@#$%^&*()'
            mockTranscriptManager.connect.mockResolvedValue(undefined)

            await transcriptService.connect(specialSessionId)
            expect(transcriptService.isConnected(specialSessionId)).toBe(true)
        })

        it('應該處理 null/undefined 回調函數', () => {
            expect(() => transcriptService.addTranscriptListener('session', null as any))
                .not.toThrow()

            expect(() => transcriptService.addTranscriptListener('session', undefined as any))
                .not.toThrow()
        })
    })
})


# END FILE CONTENTS


# File: frontend/components/ui/carousel.tsx

"use client"

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}


# END FILE CONTENTS


# File: app/services/stt/whisper_provider.py

from __future__ import annotations

import logging
from uuid import UUID
from typing import Any, Dict, Optional
from app.services.stt.base import ISTTProvider
from app.services.azure_whisper import AzureWhisperService
from app.services.stt.lang_map import to_whisper
from app.db.database import get_supabase_client

import json
from app.core.config import get_settings

logger = logging.getLogger(__name__)

__all__ = ["WhisperProvider", "save_and_push_result"]

class WhisperProvider(ISTTProvider):
    name = "whisper"
    _service: Optional[AzureWhisperService] = None

    def __init__(self) -> None:
        if self._service is None:
            self._service = AzureWhisperService()

    def max_rpm(self) -> int:
        # 可根據設定調整
        from app.core.config import get_settings
        settings = get_settings()
        return getattr(settings, "WHISPER_MAX_REQUESTS", 180)


    async def transcribe(self, audio: bytes, session_id: UUID, chunk_seq: int) -> Dict[str, Any] | None:
        # 查詢 canonical lang_code
        supa = get_supabase_client()
        row = supa.table("sessions").select("lang_code").eq("id", str(session_id)).single().execute()
        canonical = (row.data or {}).get("lang_code", "zh-TW")
        api_language = to_whisper(canonical)
        return await self._service.transcribe(
            audio, session_id, chunk_seq,
            api_language=api_language,
            canonical_lang=canonical
        )

async def save_and_push_result(session_id: UUID, chunk_seq: int, data: dict):
    """共用：把結果寫入 transcript_segments 並透過 WebSocket 推送"""
    from app.ws.transcript_feed import manager
    from app.db.database import get_supabase_client

    settings = get_settings()
    supa = get_supabase_client()
    seg = {
        "session_id": str(session_id),
        "chunk_sequence": chunk_seq,
        "text": data["text"],
        "start_time": chunk_seq * settings.AUDIO_CHUNK_DURATION_SEC,
        "end_time": (chunk_seq + 1) * settings.AUDIO_CHUNK_DURATION_SEC,
        "confidence": 1.0,
        "lang_code": data["lang_code"],
    }
    row = supa.table("transcript_segments").insert(seg).execute()

    # WebSocket
    await manager.broadcast(
        json.dumps({
            "type": "transcript_segment",
            "session_id": str(session_id),
            "segment_id": row.data[0]["id"],
            **seg
        }),
        str(session_id)
    )


# END FILE CONTENTS


# File: frontend/utils/event-bus.ts

type Handler = (payload?: unknown) => void
const bus = new Map<string, Set<Handler>>()

export function on(event: string, fn: Handler) {
    (bus.get(event) ?? bus.set(event, new Set()).get(event))!.add(fn)
}
export function off(event: string, fn: Handler) {
    bus.get(event)?.delete(fn)
}
export function emit(event: string, payload?: unknown) {
    bus.get(event)?.forEach(fn => fn(payload))
}


# END FILE CONTENTS


# File: .cursor/rules/python.mdc

---
description: Python best practices and patterns for modern software development with Flask and SQLite
globs: **/*.py, src/**/*.py, tests/**/*.py
alwaysApply: false
---
<!-- Source: https://github.com/sanjeed5/awesome-cursor-rules-mdc/tree/main/rules-mdc -->

# Python Best Practices

## Project Structure
- Use src-layout with `src/your_package_name/`
- Place tests in `tests/` directory parallel to `src/`
- Keep configuration in `config/` or as environment variables
- Store requirements in `requirements.txt` or `pyproject.toml`
- Place static files in `static/` directory
- Use `templates/` for Jinja2 templates

## Code Style
- Follow Black code formatting
- Use isort for import sorting
- Follow PEP 8 naming conventions:
  - snake_case for functions and variables
  - PascalCase for classes
  - UPPER_CASE for constants
- Maximum line length of 88 characters (Black default)
- Use absolute imports over relative imports

## Type Hints
- Use type hints for all function parameters and returns
- Import types from `typing` module
- Use `Optional[Type]` instead of `Type | None`
- Use `TypeVar` for generic types
- Define custom types in `types.py`
- Use `Protocol` for duck typing

## Flask Structure
- Use Flask factory pattern
- Organize routes using Blueprints
- Use Flask-SQLAlchemy for database
- Implement proper error handlers
- Use Flask-Login for authentication
- Structure views with proper separation of concerns

## Database
- Use SQLAlchemy ORM
- Implement database migrations with Alembic
- Use proper connection pooling
- Define models in separate modules
- Implement proper relationships
- Use proper indexing strategies

## Authentication
- Use Flask-Login for session management
- Implement Google OAuth using Flask-OAuth
- Hash passwords with bcrypt
- Use proper session security
- Implement CSRF protection
- Use proper role-based access control

## API Design
- Use Flask-RESTful for REST APIs
- Implement proper request validation
- Use proper HTTP status codes
- Handle errors consistently
- Use proper response formats
- Implement proper rate limiting

## Testing
- Use pytest for testing
- Write tests for all routes
- Use pytest-cov for coverage
- Implement proper fixtures
- Use proper mocking with pytest-mock
- Test all error scenarios

## Security
- Use HTTPS in production
- Implement proper CORS
- Sanitize all user inputs
- Use proper session configuration
- Implement proper logging
- Follow OWASP guidelines

## Performance
- Use proper caching with Flask-Caching
- Implement database query optimization
- Use proper connection pooling
- Implement proper pagination
- Use background tasks for heavy operations
- Monitor application performance

## Error Handling
- Create custom exception classes
- Use proper try-except blocks
- Implement proper logging
- Return proper error responses
- Handle edge cases properly
- Use proper error messages

## Documentation
- Use Google-style docstrings
- Document all public APIs
- Keep README.md updated
- Use proper inline comments
- Generate API documentation
- Document environment setup

## Development Workflow
- Always use virtual environments (uv)
- Implement pre-commit hooks
- Use proper Git workflow
- Follow semantic versioning
- Use proper CI/CD practices
- Implement proper logging

## Dependencies
- Pin dependency versions
- Use requirements.txt for production
- Separate dev dependencies
- Use proper package versions
- Regularly update dependencies
- Check for security vulnerabilities


# END FILE CONTENTS


# File: app/core/container.py

"""
一個簡單的依賴注入容器
"""
from typing import Dict, Any, Type, Callable

class Container:
    def __init__(self):
        self._providers: Dict[Type, Callable[[], Any]] = {}

    def register(self, type_hint: Type, provider: Callable[[], Any]):
        """註冊一個服務提供者"""
        self._providers[type_hint] = provider

    def resolve(self, type_hint: Type) -> Any:
        """解析一個服務實例"""
        provider = self._providers.get(type_hint)
        if not provider:
            raise Exception(f"No provider registered for {type_hint}")
        return provider()

# 全域容器實例
container = Container()


# END FILE CONTENTS


# File: frontend/components/ui/resizable.tsx

"use client"

import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }


# END FILE CONTENTS


# File: frontend/components/ui/toast.tsx

"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}


# END FILE CONTENTS


# File: frontend/lib/services/index.ts

"use client"

/**
 * 服務層統一入口
 *
 * 提供服務層所有模組的統一匯出
 */

// 基礎服務類別
export { BaseService, ServiceError } from './base-service'
export type { ServiceStatus } from './base-service'

// 服務容器
export { ServiceContainer, ServiceContainerError, serviceContainer } from './service-container'
export type {
    ServiceContainerStatus,
    ServiceInitializationResult,
    ServiceCleanupResult
} from './service-container'

// 具體服務實現
export { SessionService } from './session-service'
export type { SessionServiceStatus } from './session-service'

export { RecordingService } from './recording-service'
export type { RecordingServiceStatus } from './recording-service'

export { TranscriptService } from './transcript-service'

// 服務註冊
export { ServiceRegistry } from './service-registry'

// 服務介面和鍵值
export type {
    ISessionService,
    IRecordingService,
    ITranscriptService,
    IServiceContainer,
    RecordingState,
    TranscriptMessage,
    TranscriptEntry,
    ServiceKey,
    ServiceTypeMap
} from './interfaces'

export { SERVICE_KEYS } from './interfaces'


# END FILE CONTENTS


# File: app/utils/__init__.py

"""
工具模組

提供各種共用的工具函數和驗證器
"""


# END FILE CONTENTS


# File: frontend/lib/stream/__tests__/audio-uploader.test.ts

import { describe, test, expect, beforeEach, vi, afterEach } from 'vitest'
import { AudioUploader } from '../audio-uploader'

// Mock WebSocket
class MockWebSocket {
    static CONNECTING = 0
    static OPEN = 1
    static CLOSING = 2
    static CLOSED = 3

    readyState: number = MockWebSocket.CONNECTING
    onopen: ((event: Event) => void) | null = null
    onclose: ((event: CloseEvent) => void) | null = null
    onerror: ((event: Event) => void) | null = null
    onmessage: ((event: MessageEvent) => void) | null = null

    send = vi.fn()
    close = vi.fn()

    constructor(public url: string) {
        // 模擬異步連接
        setTimeout(() => {
            this.readyState = MockWebSocket.OPEN
            this.onopen?.(new Event('open'))
        }, 10)
    }

    // 模擬連接關閉
    simulateClose(wasClean: boolean = true, code: number = 1000, reason: string = '') {
        this.readyState = MockWebSocket.CLOSED
        const closeEvent = new CloseEvent('close', { wasClean, code, reason })
        this.onclose?.(closeEvent)
    }

    // 模擬收到消息
    simulateMessage(data: any) {
        const messageEvent = new MessageEvent('message', { data: JSON.stringify(data) })
        this.onmessage?.(messageEvent)
    }

    // 模擬錯誤
    simulateError() {
        this.onerror?.(new Event('error'))
    }
}

// Mock 全局 WebSocket
Object.defineProperty(global, 'WebSocket', {
    writable: true,
    value: MockWebSocket,
})

// Mock 環境變數
const originalEnv = process.env
beforeEach(() => {
    process.env = { ...originalEnv }
    process.env.NEXT_PUBLIC_WS_URL = 'ws://localhost:8000'
})

afterEach(() => {
    process.env = originalEnv
})

describe('AudioUploader', () => {
    let uploader: AudioUploader
    let mockWebSocket: MockWebSocket

    beforeEach(() => {
        vi.clearAllMocks()
        uploader = new AudioUploader()

        // 攔截 WebSocket 創建
        const originalWebSocket = global.WebSocket
        global.WebSocket = vi.fn((url: string) => {
            mockWebSocket = new MockWebSocket(url)
            return mockWebSocket
        }) as any
    })

    afterEach(() => {
        uploader.close()
    })

    describe('連接管理', () => {
        test('應該成功建立 WebSocket 連接', async () => {
            const connectPromise = uploader.connect('test-session-id')

            // 等待連接完成
            await connectPromise

            expect(uploader.isConnected).toBe(true)
            expect(uploader.currentSessionId).toBe('test-session-id')
            expect(uploader.currentSequence).toBe(0)
        })

        test('應該使用正確的 WebSocket URL', async () => {
            await uploader.connect('test-session-id')

            expect(global.WebSocket).toHaveBeenCalledWith(
                'ws://localhost:8000/ws/upload_audio/test-session-id'
            )
        })

        test('應該在連接時重置狀態', async () => {
            // 先發送一些數據來改變序號
            await uploader.connect('session-1')
            uploader.send(new Blob(['test']))

            expect(uploader.currentSequence).toBe(1)

            // 重新連接應該重置
            await uploader.connect('session-2')

            expect(uploader.currentSequence).toBe(0)
            expect(uploader.currentSessionId).toBe('session-2')
        })

        test('應該正確關閉連接', () => {
            uploader.close()

            expect(uploader.isConnected).toBe(false)
            expect(uploader.currentSessionId).toBe(null)
            expect(uploader.currentSequence).toBe(0)
        })
    })

    describe('數據傳送', () => {
        beforeEach(async () => {
            await uploader.connect('test-session-id')
        })

        test('應該正確發送音訊數據', () => {
            const testBlob = new Blob(['test audio data'], { type: 'audio/webm' })

            uploader.send(testBlob)

            // 應該發送兩次：序號 + 數據
            expect(mockWebSocket.send).toHaveBeenCalledTimes(2)

            // 驗證序號發送（4 字節）
            const sequenceCall = mockWebSocket.send.mock.calls[0][0]
            expect(sequenceCall).toBeInstanceOf(ArrayBuffer)
            expect(sequenceCall.byteLength).toBe(4)

            // 驗證數據發送
            const blobCall = mockWebSocket.send.mock.calls[1][0]
            expect(blobCall).toBe(testBlob)
        })

        test('應該正確遞增序號', () => {
            const blob1 = new Blob(['audio 1'])
            const blob2 = new Blob(['audio 2'])

            uploader.send(blob1)
            uploader.send(blob2)

            expect(uploader.currentSequence).toBe(2)
            expect(mockWebSocket.send).toHaveBeenCalledTimes(4) // 2 序號 + 2 數據
        })

        test('應該支援自訂序號發送', () => {
            const testBlob = new Blob(['test'])

            uploader.send(testBlob, 42)

            // 內部序號不應該改變
            expect(uploader.currentSequence).toBe(0)

            // 但應該發送指定的序號
            const sequenceCall = mockWebSocket.send.mock.calls[0][0]
            const view = new DataView(sequenceCall)
            expect(view.getUint32(0, false)).toBe(42) // big-endian
        })

        test('應該處理 WebSocket 未連接的情況', () => {
            mockWebSocket.readyState = MockWebSocket.CLOSED

            const testBlob = new Blob(['test'])
            uploader.send(testBlob)

            // 不應該發送任何數據
            expect(mockWebSocket.send).not.toHaveBeenCalled()
        })
    })

    describe('重連機制', () => {
        beforeEach(async () => {
            await uploader.connect('test-session-id')
        })

        test('應該在非正常關閉時嘗試重連', async () => {
            // 模擬非正常關閉
            mockWebSocket.simulateClose(false, 1006, 'Connection lost')

            // 等待重連邏輯觸發
            await new Promise(resolve => setTimeout(resolve, 100))

            // 應該嘗試重新創建 WebSocket
            expect(global.WebSocket).toHaveBeenCalledTimes(2)
        })

        test('應該在正常關閉時不嘗試重連', () => {
            const originalCreateWebSocket = global.WebSocket

            // 模擬正常關閉
            mockWebSocket.simulateClose(true, 1000, 'Normal closure')

            // 不應該嘗試重連
            expect(global.WebSocket).toHaveBeenCalledTimes(1)
        })

        test('應該有重連次數限制', async () => {
            // 模擬連續失敗的重連
            const originalConnect = uploader.connect
            let connectCallCount = 0

            uploader.connect = vi.fn().mockImplementation(() => {
                connectCallCount++
                if (connectCallCount <= 5) {
                    throw new Error('Connection failed')
                }
                return originalConnect.call(uploader, 'test-session-id')
            })

            // 觸發重連
            mockWebSocket.simulateClose(false, 1006, 'Connection lost')

            // 等待重連嘗試
            await new Promise(resolve => setTimeout(resolve, 200))

            // 應該有重連次數限制
            expect(connectCallCount).toBeLessThanOrEqual(5)
        })
    })

    describe('伺服器消息處理', () => {
        beforeEach(async () => {
            await uploader.connect('test-session-id')
        })

        test('應該處理 ACK 消息', () => {
            const consoleSpy = vi.spyOn(console, 'log').mockImplementation(() => { })

            mockWebSocket.simulateMessage({
                type: 'ack',
                chunk_sequence: 5
            })

            expect(consoleSpy).toHaveBeenCalledWith(
                expect.stringContaining('音訊切片 #5 確認收到')
            )

            consoleSpy.mockRestore()
        })

        test('應該處理上傳錯誤消息', () => {
            const consoleSpy = vi.spyOn(console, 'error').mockImplementation(() => { })

            mockWebSocket.simulateMessage({
                type: 'upload_error',
                chunk_sequence: 3,
                error: 'Upload failed'
            })

            expect(consoleSpy).toHaveBeenCalledWith(
                expect.stringContaining('上傳錯誤 #3'),
                'Upload failed'
            )

            consoleSpy.mockRestore()
        })

        test('應該處理連接建立消息', () => {
            const consoleSpy = vi.spyOn(console, 'log').mockImplementation(() => { })

            mockWebSocket.simulateMessage({
                type: 'connection_established'
            })

            expect(consoleSpy).toHaveBeenCalledWith(
                expect.stringContaining('連接已建立')
            )

            consoleSpy.mockRestore()
        })

        test('應該處理非 JSON 消息', () => {
            const consoleSpy = vi.spyOn(console, 'log').mockImplementation(() => { })

            // 模擬非 JSON 數據
            const messageEvent = new MessageEvent('message', { data: 'plain text' })
            mockWebSocket.onmessage?.(messageEvent)

            expect(consoleSpy).toHaveBeenCalledWith(
                expect.stringContaining('收到非 JSON 消息'),
                'plain text'
            )

            consoleSpy.mockRestore()
        })
    })

    describe('開發模式診斷', () => {
        const originalNodeEnv = process.env.NODE_ENV

        beforeEach(async () => {
            // 使用 vi.stubEnv 來模擬環境變數
            vi.stubEnv('NODE_ENV', 'development')
            await uploader.connect('test-session-id')

            // 清除 window.__rec
            delete (window as any).__rec
        })

        afterEach(() => {
            vi.unstubAllEnvs()
        })

        test('應該在開發模式下記錄診斷信息', () => {
            const testBlob = new Blob(['test'], { type: 'audio/webm' })

            uploader.send(testBlob)

            expect((window as any).__rec).toBeDefined()
            expect((window as any).__rec.chunksSent).toBe(1)
            expect((window as any).__rec.totalBytes).toBe(testBlob.size)
            expect((window as any).__rec.sessionId).toBe('test-session-id')
        })

        test('應該累積診斷統計', () => {
            const blob1 = new Blob(['data1'])
            const blob2 = new Blob(['data2'])

            uploader.send(blob1)
            uploader.send(blob2)

            const rec = (window as any).__rec
            expect(rec.chunksSent).toBe(2)
            expect(rec.totalBytes).toBe(blob1.size + blob2.size)
            expect(rec.lastSequence).toBe(1)
        })
    })

    describe('連接狀態', () => {
        test('應該正確報告連接狀態', async () => {
            expect(uploader.connectionState).toBe('NOT_CREATED')

            const connectPromise = uploader.connect('test-session-id')
            expect(uploader.connectionState).toBe('CONNECTING')

            await connectPromise
            expect(uploader.connectionState).toBe('OPEN')

            uploader.close()
            expect(uploader.connectionState).toBe('NOT_CREATED')
        })

        test('應該正確檢查連接狀態', async () => {
            expect(uploader.isConnected).toBe(false)

            await uploader.connect('test-session-id')
            expect(uploader.isConnected).toBe(true)

            uploader.close()
            expect(uploader.isConnected).toBe(false)
        })
    })
})


# END FILE CONTENTS


# File: pnpm-lock.yaml

lockfileVersion: '9.0'

settings:
  autoInstallPeers: true
  excludeLinksFromLockfile: false

importers:

  .:
    devDependencies:
      '@playwright/test':
        specifier: ^1.54.1
        version: 1.54.1
      jszip:
        specifier: ^3.10.1
        version: 3.10.1

packages:

  '@playwright/test@1.54.1':
    resolution: {integrity: sha512-FS8hQ12acieG2dYSksmLOF7BNxnVf2afRJdCuM1eMSxj6QTSE6G4InGF7oApGgDb65MX7AwMVlIkpru0yZA4Xw==}
    engines: {node: '>=18'}
    hasBin: true

  core-util-is@1.0.3:
    resolution: {integrity: sha512-ZQBvi1DcpJ4GDqanjucZ2Hj3wEO5pZDS89BWbkcrvdxksJorwUDDZamX9ldFkp9aw2lmBDLgkObEA4DWNJ9FYQ==}

  fsevents@2.3.2:
    resolution: {integrity: sha512-xiqMQR4xAeHTuB9uWm+fFRcIOgKBMiOBP+eXiyT7jsgVCq1bkVygt00oASowB7EdtpOHaaPgKt812P9ab+DDKA==}
    engines: {node: ^8.16.0 || ^10.6.0 || >=11.0.0}
    os: [darwin]

  immediate@3.0.6:
    resolution: {integrity: sha512-XXOFtyqDjNDAQxVfYxuF7g9Il/IbWmmlQg2MYKOH8ExIT1qg6xc4zyS3HaEEATgs1btfzxq15ciUiY7gjSXRGQ==}

  inherits@2.0.4:
    resolution: {integrity: sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==}

  isarray@1.0.0:
    resolution: {integrity: sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==}

  jszip@3.10.1:
    resolution: {integrity: sha512-xXDvecyTpGLrqFrvkrUSoxxfJI5AH7U8zxxtVclpsUtMCq4JQ290LY8AW5c7Ggnr/Y/oK+bQMbqK2qmtk3pN4g==}

  lie@3.3.0:
    resolution: {integrity: sha512-UaiMJzeWRlEujzAuw5LokY1L5ecNQYZKfmyZ9L7wDHb/p5etKaxXhohBcrw0EYby+G/NA52vRSN4N39dxHAIwQ==}

  pako@1.0.11:
    resolution: {integrity: sha512-4hLB8Py4zZce5s4yd9XzopqwVv/yGNhV1Bl8NTmCq1763HeK2+EwVTv+leGeL13Dnh2wfbqowVPXCIO0z4taYw==}

  playwright-core@1.54.1:
    resolution: {integrity: sha512-Nbjs2zjj0htNhzgiy5wu+3w09YetDx5pkrpI/kZotDlDUaYk0HVA5xrBVPdow4SAUIlhgKcJeJg4GRKW6xHusA==}
    engines: {node: '>=18'}
    hasBin: true

  playwright@1.54.1:
    resolution: {integrity: sha512-peWpSwIBmSLi6aW2auvrUtf2DqY16YYcCMO8rTVx486jKmDTJg7UAhyrraP98GB8BoPURZP8+nxO7TSd4cPr5g==}
    engines: {node: '>=18'}
    hasBin: true

  process-nextick-args@2.0.1:
    resolution: {integrity: sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag==}

  readable-stream@2.3.8:
    resolution: {integrity: sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==}

  safe-buffer@5.1.2:
    resolution: {integrity: sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==}

  setimmediate@1.0.5:
    resolution: {integrity: sha512-MATJdZp8sLqDl/68LfQmbP8zKPLQNV6BIZoIgrscFDQ+RsvK/BxeDQOgyxKKoh0y/8h3BqVFnCqQ/gd+reiIXA==}

  string_decoder@1.1.1:
    resolution: {integrity: sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==}

  util-deprecate@1.0.2:
    resolution: {integrity: sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==}

snapshots:

  '@playwright/test@1.54.1':
    dependencies:
      playwright: 1.54.1

  core-util-is@1.0.3: {}

  fsevents@2.3.2:
    optional: true

  immediate@3.0.6: {}

  inherits@2.0.4: {}

  isarray@1.0.0: {}

  jszip@3.10.1:
    dependencies:
      lie: 3.3.0
      pako: 1.0.11
      readable-stream: 2.3.8
      setimmediate: 1.0.5

  lie@3.3.0:
    dependencies:
      immediate: 3.0.6

  pako@1.0.11: {}

  playwright-core@1.54.1: {}

  playwright@1.54.1:
    dependencies:
      playwright-core: 1.54.1
    optionalDependencies:
      fsevents: 2.3.2

  process-nextick-args@2.0.1: {}

  readable-stream@2.3.8:
    dependencies:
      core-util-is: 1.0.3
      inherits: 2.0.4
      isarray: 1.0.0
      process-nextick-args: 2.0.1
      safe-buffer: 5.1.2
      string_decoder: 1.1.1
      util-deprecate: 1.0.2

  safe-buffer@5.1.2: {}

  setimmediate@1.0.5: {}

  string_decoder@1.1.1:
    dependencies:
      safe-buffer: 5.1.2

  util-deprecate@1.0.2: {}


# END FILE CONTENTS


# File: frontend/hooks/use-session.ts

"use client"

import { useState, useCallback, useMemo } from 'react'
import axios from 'axios'
import { sessionAPI, type SessionCreateRequest, type SessionResponse } from '../lib/api'

interface UseSessionReturn {
    currentSession: SessionResponse | null
    isLoading: boolean
    error: string | null
    createNoteSession: (title?: string, content?: string) => Promise<SessionResponse | null>
    createRecordingSession: (title?: string, content?: string, lang_code?: string, stt_provider?: string) => Promise<SessionResponse | null>
    upgradeToRecording: () => Promise<SessionResponse | null>
    finishSession: () => Promise<void>
    deleteSession: () => Promise<void>
    clearSession: () => void
    checkActiveSession: () => Promise<SessionResponse | null>
}

export function useSession(): UseSessionReturn {
    const [currentSession, setCurrentSession] = useState<SessionResponse | null>(null)
    const [isLoading, setIsLoading] = useState(false)
    const [error, setError] = useState<string | null>(null)

    const clearError = useCallback(() => {
        setError(null)
    }, [])

    const checkActiveSession = useCallback(async (): Promise<SessionResponse | null> => {
        setIsLoading(true)
        clearError()

        try {
            const activeSession = await sessionAPI.getActiveSession()
            if (activeSession) {
                setCurrentSession(activeSession)
                console.log('✅ 已恢復活躍會話狀態:', activeSession)
                return activeSession
            } else {
                console.log('ℹ️ 沒有活躍會話，使用預設狀態')
                return null
            }
        } catch (err) {
            // 如果是網路錯誤，且是初始化階段，則靜默處理
            if (err instanceof Error && err.message.includes('Network Error')) {
                console.warn('⚠️ Backend API 連線暫時失敗，將在後續重試:', err.message)
                return null // 靜默失敗，不設置錯誤狀態
            }

            const errorMessage = err instanceof Error ? err.message : '檢查活躍會話失敗'
            setError(errorMessage)
            console.error('❌ 檢查活躍會話失敗:', err)
            return null
        } finally {
            setIsLoading(false)
        }
    }, [clearError])
    const createNoteSession = useCallback(async (title?: string, content?: string): Promise<SessionResponse | null> => {
        setIsLoading(true)
        clearError()

        try {
            const sessionData: SessionCreateRequest = {
                title,
                type: 'note_only',
                content,
            }

            const session = await sessionAPI.createSession(sessionData)
            setCurrentSession(session)
            console.log('✅ 純筆記會話建立成功:', session)
            return session
        } catch (err) {
            // 特別處理 409 衝突錯誤
            if (axios.isAxiosError(err) && err.response?.status === 409) {
                const conflictMessage = '檢測到活躍會話衝突，請重新整理頁面後再試'
                setError(conflictMessage)
                console.error('❌ 會話衝突錯誤 (409):', err.response?.data?.detail || err.message)
                return null
            }

            const errorMessage = err instanceof Error ? err.message : '建立會話失敗'
            setError(errorMessage)
            console.error('❌ 建立純筆記會話失敗:', err)
            return null
        } finally {
            setIsLoading(false)
        }
    }, [clearError])

    const createRecordingSession = useCallback(async (title?: string, content?: string, lang_code?: string, stt_provider?: string): Promise<SessionResponse | null> => {
        setIsLoading(true)
        clearError()

        try {
            const sessionData: SessionCreateRequest = {
                title,
                type: 'recording',
                content,
                lang_code,
                stt_provider,
            }

            const session = await sessionAPI.createSession(sessionData)
            setCurrentSession(session)
            console.log('✅ 錄音會話建立成功:', session)
            return session
        } catch (err) {
            // 特別處理 409 衝突錯誤
            if (axios.isAxiosError(err) && err.response?.status === 409) {
                const conflictMessage = '檢測到活躍會話衝突，請重新整理頁面後再試'
                setError(conflictMessage)
                console.error('❌ 會話衝突錯誤 (409):', err.response?.data?.detail || err.message)
                return null
            }

            const errorMessage = err instanceof Error ? err.message : '建立錄音會話失敗'
            setError(errorMessage)
            console.error('❌ 建立錄音會話失敗:', err)
            return null
        } finally {
            setIsLoading(false)
        }
    }, [clearError])

    const upgradeToRecording = useCallback(async (): Promise<SessionResponse | null> => {
        if (!currentSession) {
            setError('沒有活躍的會話可以升級')
            return null
        }

        if (currentSession.type === 'recording') {
            console.log('🔄 會話已經是錄音模式')
            return currentSession
        }

        setIsLoading(true)
        clearError()

        try {
            const updatedSession = await sessionAPI.upgradeToRecording(currentSession.id)
            setCurrentSession(updatedSession)
            console.log('✅ 會話升級為錄音模式成功:', updatedSession)
            return updatedSession
        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : '升級會話失敗'
            setError(errorMessage)
            console.error('❌ 升級會話失敗:', err)
            return null
        } finally {
            setIsLoading(false)
        }
    }, [currentSession, clearError])

    const finishSession = useCallback(async (): Promise<void> => {
        if (!currentSession) {
            console.log('🔄 沒有活躍的會話需要完成')
            return
        }

        setIsLoading(true)
        clearError()

        try {
            await sessionAPI.finishSession(currentSession.id)
            console.log('✅ 會話完成成功:', currentSession.id)
            // 保持 session 資料，只更新狀態
            setCurrentSession((prev: SessionResponse | null) => prev ? { ...prev, status: 'completed' } : null)
        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : '完成會話失敗'
            setError(errorMessage)
            console.error('❌ 完成會話失敗:', err)
        } finally {
            setIsLoading(false)
        }
    }, [currentSession, clearError])

    const deleteSession = useCallback(async (): Promise<void> => {
        if (!currentSession) {
            console.log('🔄 沒有活躍的會話需要刪除')
            return
        }

        setIsLoading(true)
        clearError()

        try {
            await sessionAPI.deleteSession(currentSession.id)
            console.log('✅ 會話刪除成功:', currentSession.id)
            setCurrentSession(null)
        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : '刪除會話失敗'
            setError(errorMessage)
            console.error('❌ 刪除會話失敗:', err)
        } finally {
            setIsLoading(false)
        }
    }, [currentSession, clearError])

    const clearSession = useCallback(() => {
        setCurrentSession(null)
        setError(null)
        console.log('🔄 會話已清除')
    }, [])

    return useMemo(() => ({
        currentSession,
        isLoading,
        error,
        createNoteSession,
        createRecordingSession,
        upgradeToRecording,
        finishSession,
        deleteSession,
        clearSession,
        checkActiveSession,
    }), [
        currentSession,
        isLoading,
        error,
        createNoteSession,
        createRecordingSession,
        upgradeToRecording,
        finishSession,
        deleteSession,
        clearSession,
        checkActiveSession,
    ])
}


# END FILE CONTENTS


# File: frontend/lib/__tests__/migration-adapter.test.ts

import { describe, test, expect, beforeEach, vi } from 'vitest'
import { StateSyncBridge } from '../migration-adapter'
import { AppStateContextValue } from '../../types/app-state-context'
import { LegacyAppStateHook } from '../migration-adapter'

// Mock localStorage
const localStorageMock = {
    getItem: vi.fn(),
    setItem: vi.fn(),
    removeItem: vi.fn(),
}
Object.defineProperty(window, 'localStorage', { value: localStorageMock })

describe('StateSyncBridge', () => {
    let bridge: StateSyncBridge
    let mockNewContext: AppStateContextValue
    let mockLegacyHook: LegacyAppStateHook

    beforeEach(() => {
        bridge = new StateSyncBridge()

        // Mock new context
        mockNewContext = {
            appData: {
                state: 'default',
                transcriptEntries: [],
                editorContent: '',
                isRecording: false,
                recordingTime: 0,
                session: null,
            },
            isLoading: false,
            error: null,
            dispatch: vi.fn(),
            setState: vi.fn(),
            setRecording: vi.fn(),
            setRecordingTime: vi.fn(),
            setEditorContent: vi.fn(),
            setTranscriptEntries: vi.fn(),
            addTranscriptEntry: vi.fn(),
            setSession: vi.fn(),
            updateSessionStatus: vi.fn(),
            resetState: vi.fn(),
            setLoading: vi.fn(),
            setError: vi.fn(),
        }

        // Mock legacy hook
        mockLegacyHook = {
            appData: {
                state: 'default',
                transcriptEntries: [],
                editorContent: '',
                isRecording: false,
                recordingTime: 0,
                session: null,
            },
            isLoading: false,
            error: null,
            startRecording: vi.fn(),
            stopRecording: vi.fn(),
            newNote: vi.fn(),
            saveLocalDraft: vi.fn(),
            session: null,
            recordingError: null,
            transcriptError: null,
            createNoteSession: vi.fn(),
            sessionLoading: false,
        }
    })

    test('should register new context successfully', () => {
        bridge.registerNewContext(mockNewContext)
        expect(bridge.getSyncStatus().enabled).toBe(true)
    })

    test('should register legacy hook successfully', () => {
        bridge.registerLegacyHook(mockLegacyHook)
        expect(bridge.getSyncStatus().enabled).toBe(true)
    })

    test('should enable and disable sync', () => {
        bridge.disableSync()
        expect(bridge.getSyncStatus().enabled).toBe(false)

        bridge.enableSync()
        expect(bridge.getSyncStatus().enabled).toBe(true)
    })

    test('should provide sync status', () => {
        const status = bridge.getSyncStatus()
        expect(status).toHaveProperty('enabled')
        expect(status).toHaveProperty('lastSync')
        expect(status).toHaveProperty('inProgress')
    })
})


# END FILE CONTENTS


# File: frontend/components/ui/sonner.tsx

"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }


# END FILE CONTENTS


# File: frontend/components.json

{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

# END FILE CONTENTS


# File: frontend/components/ui/skeleton.tsx

import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }


# END FILE CONTENTS


# File: .cursor/rules/playwright-e2e-testing.mdc

---
alwaysApply: false
---

<!-- Source: https://github.com/PatrickJS/awesome-cursorrules/blob/main/rules/playwright-e2e-testing-cursorrules-prompt-file/.cursorrules -->

# Auto-detect TypeScript Usage

Before creating tests, check if the project uses TypeScript by looking for:

- tsconfig.json file
- .ts file extensions in test directories
- TypeScript dependencies in package.json
  Adjust file extensions (.ts/.js) and syntax based on this detection.

# End-to-End UI Testing Focus

Generate tests that focus on critical user flows (e.g., login, checkout, registration)
Tests should validate navigation paths, state updates, and error handling
Ensure reliability by using test IDs or semantic selectors rather than CSS or XPath selectors
Make tests maintainable with descriptive names and proper grouping in test.describe blocks
Use Playwright's page.route for API mocking to create isolated, deterministic tests

# Best Practices

**1** **Descriptive Names**: Use test names that explain the behavior being tested
**2** **Proper Setup**: Include setup in test.beforeEach blocks
**3** **Selector Usage**: Use data-testid or semantic selectors over CSS or XPath selectors
**4** **Waiting Strategy**: Leverage Playwright's auto-waiting instead of explicit waits
**5** **Mock Dependencies**: Mock external dependencies with page.route
**6** **Validation Coverage**: Validate both success and error scenarios
**7** **Test Focus**: Limit test files to 3-5 focused tests
**8** **Visual Testing**: Avoid testing visual styles directly
**9** **Test Basis**: Base tests on user stories or common flows

# Input/Output Expectations

**Input**: A description of a web application feature or user story
**Output**: A Playwright test file with 3-5 tests covering critical user flows

# Example End-to-End Test

When testing a login page, implement the following pattern:

```js
import { test, expect } from '@playwright/test';

test.describe('Login Page', () => {
  test.beforeEach(async ({ page }) => {
    await page.route('/api/login', (route) => {
      const body = route.request().postDataJSON();
      if (body.username === 'validUser' && body.password === 'validPass') {
        route.fulfill({
          status: 200,
          body: JSON.stringify({ message: 'Login successful' }),
        });
      } else {
        route.fulfill({
          status: 401,
          body: JSON.stringify({ error: 'Invalid credentials' }),
        });
      }
    });
    await page.goto('/login');
  });

  test('should allow user to log in with valid credentials', async ({
    page,
  }) => {
    await page.locator('[data-testid="username"]').fill('validUser');
    await page.locator('[data-testid="password"]').fill('validPass');
    await page.locator('[data-testid="submit"]').click();
    await expect(page.locator('[data-testid="welcome-message"]')).toBeVisible();
    await expect(page.locator('[data-testid="welcome-message"]')).toHaveText(
      /Welcome, validUser/
    );
  });

  test('should show an error message for invalid credentials', async ({
    page,
  }) => {
    await page.locator('[data-testid="username"]').fill('invalidUser');
    await page.locator('[data-testid="password"]').fill('wrongPass');
    await page.locator('[data-testid="submit"]').click();
    await expect(page.locator('[data-testid="error-message"]')).toBeVisible();
    await expect(page.locator('[data-testid="error-message"]')).toHaveText(
      'Invalid credentials'
    );
  });
});
```


# END FILE CONTENTS


# File: frontend/hooks/use-app-state.ts

"use client"

import { useState, useCallback, useEffect, useRef } from "react"
import type { AppData, AppState, SessionStatus, SessionType } from "../types/app-state"
import { useSession } from "./use-session"
import { useRecording } from "./use-recording"
import { useNotes } from "./use-notes"
import { useTranscript } from "./use-transcript"
import { TranscriptMessage } from "../lib/websocket"
import { useToast } from "@/components/ui/use-toast"

// 前後端狀態映射規則
const mapBackendToFrontendState = (
  status: SessionStatus,
  type: SessionType,
  isRecording: boolean,
  transcriptsPresent: boolean
): AppState => {
  const timestamp = Date.now()
  const isoTimestamp = new Date().toISOString()

  console.log('🔄 [狀態映射] 輸入參數 (詳細時序):', {
    status,
    type,
    isRecording,
    transcriptsPresent,
    timestamp,
    isoTimestamp,
    note: '檢查時序和邏輯流程'
  })

  let resultState: AppState

  // 詳細的狀態轉換邏輯和時序追蹤
  switch (status) {
    case "draft":
      resultState = "default"
      console.log('🔄 [狀態映射] draft → default (時序正常)')
      break
    case "active":
      if (type === "recording") {
        if (!isRecording) {
          resultState = "default"
          console.log('🔄 [狀態映射] recording session 但 isRecording=false → default (時序檢查通過)', {
            timestamp,
            reason: 'recording session inactive'
          })
        } else {
          // 關鍵的狀態轉換邏輯：recording_waiting → recording_active
          if (transcriptsPresent) {
            resultState = "recording_active"
            console.log(`🔄 [狀態映射] ✅ 關鍵轉換: recording_waiting → recording_active (時序成功)`, {
              transcriptsPresent,
              timestamp,
              trigger: 'first_transcript_received'
            })
          } else {
            resultState = "recording_waiting"
            console.log(`🔄 [狀態映射] 保持 recording_waiting 狀態 (等待逐字稿)`, {
              transcriptsPresent,
              timestamp,
              waiting: 'for_first_transcript'
            })
          }
        }
      } else {
        resultState = "default"
        console.log('🔄 [狀態映射] active session 但 type != recording → default', {
          type,
          timestamp
        })
      }
      break
    case "processing":
      resultState = "processing"
      console.log('🔄 [狀態映射] processing → processing (時序正常)', { timestamp })
      break
    case "completed":
      resultState = "finished"
      console.log('🔄 [狀態映射] completed → finished (時序正常)', { timestamp })
      break
    case "error":
      resultState = "default" // 錯誤時回到預設狀態
      console.log('🔄 [狀態映射] error → default (錯誤恢復)', {
        timestamp,
        recovery: true
      })
      break
    default:
      resultState = "default"
      console.log('🔄 [狀態映射] unknown → default (安全回退)', {
        unknownStatus: status,
        timestamp
      })
      break
  }

  console.log(`🔄 [狀態映射] 最終結果 (時序追蹤): ${status}(${type}) → ${resultState}`, {
    inputParams: { status, type, isRecording, transcriptsPresent },
    output: resultState,
    timestamp,
    duration: Date.now() - timestamp
  })

  return resultState
}

export function useAppState() {
  const [appData, setAppData] = useState<AppData>({
    state: "default",
    transcriptEntries: [],
    editorContent: "",
    isRecording: false,
    recordingTime: 0,
    session: null,
  })

  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)

  // 使用各個專門的 hooks
  const session = useSession()
  const recording = useRecording()
  const notes = useNotes()
  const transcript = useTranscript()
  const { toast } = useToast()

  // 使用 useRef 追蹤前一個狀態值，避免循環依賴
  const prevStateRef = useRef<AppState>('default')
  const prevTranscriptCompletedRef = useRef(false)
  const prevErrorStateRef = useRef<{ recording: string | null, transcript: string | null }>({
    recording: null,
    transcript: null
  })

  // 優化的狀態映射函數，確保時序可預測性
  const mapStateFromSession = useCallback((
    currentSession: any,
    isRecording: boolean,
    transcripts: any[]
  ) => {
    const executionTimestamp = Date.now()

    if (!currentSession) {
      console.log('🔄 [狀態映射] 無活躍會話 → default', { executionTimestamp })
      return 'default'
    }

    // 實作更可靠的 transcriptsPresent 計算
    const transcriptsPresent = Array.isArray(transcripts) && transcripts.length > 0

    console.log('🔄 [狀態映射] 執行時序檢查:', {
      sessionId: currentSession.id,
      sessionStatus: currentSession.status,
      sessionType: currentSession.type,
      isRecording,
      transcriptCount: transcripts.length,
      transcriptsPresent,
      executionTimestamp,
      transcriptsSample: transcripts.slice(0, 2).map(t => ({
        text: t.text?.substring(0, 30) + '...',
        start_time: t.start_time,
        type: t.type
      })),
      note: '時序同步檢查完成'
    })

    const result = mapBackendToFrontendState(
      currentSession.status,
      currentSession.type,
      isRecording,
      transcriptsPresent
    )

    console.log('🔄 [狀態映射] 執行結果:', {
      input: {
        sessionStatus: currentSession.status,
        sessionType: currentSession.type,
        isRecording,
        transcriptsPresent
      },
      output: result,
      executionTimestamp,
      executionDuration: Date.now() - executionTimestamp
    })

    return result
  }, [])

  // 狀態同步：前端狀態與後端 session status 對應 - 強化一致性
  useEffect(() => {
    const activeSession = session.currentSession
    const effectExecutionTime = Date.now()

    console.log('🔄 [狀態同步] useEffect 觸發 (強化一致性版):', {
      hasActiveSession: !!activeSession,
      sessionId: activeSession?.id,
      sessionStatus: activeSession?.status,
      sessionType: activeSession?.type,
      recordingIsRecording: recording.isRecording,
      appDataIsRecording: appData.isRecording,
      isRecordingConsistent: recording.isRecording === appData.isRecording,
      transcriptCount: transcript.transcripts.length,
      recordingTranscriptCount: recording.transcripts.length,
      currentAppState: prevStateRef.current,
      effectExecutionTime,
      note: '強化錄音狀態一致性檢查'
    })

    if (activeSession) {
      // 確保使用最新的 recording.transcripts 狀態
      const latestTranscripts = recording.transcripts
      const transcriptsPresent = Array.isArray(latestTranscripts) && latestTranscripts.length > 0

      console.log('🔄 [狀態同步] 逐字稿狀態計算 (時序保證):', {
        recordingTranscriptCount: latestTranscripts.length,
        transcriptsPresent,
        latestTranscriptTime: latestTranscripts[latestTranscripts.length - 1]?.start_time,
        latestTranscriptText: latestTranscripts[latestTranscripts.length - 1]?.text?.substring(0, 30) + '...',
        effectExecutionTime,
        note: '已確保時序同步'
      })

      // 關鍵修復：強制使用 recording.isRecording 而不是 appData.isRecording
      // 這確保狀態映射邏輯使用最新的錄音狀態
      const frontendState = mapStateFromSession(
        activeSession,
        recording.isRecording, // 直接使用 recording hook 的狀態
        latestTranscripts
      )

      // 檢查是否需要同時更新 isRecording 和 state
      const needsIsRecordingUpdate = appData.isRecording !== recording.isRecording
      const needsStateUpdate = frontendState !== prevStateRef.current

      if (needsIsRecordingUpdate || needsStateUpdate) {
        console.log(`🔄 [狀態同步] 執行狀態更新:`, {
          needsIsRecordingUpdate,
          needsStateUpdate,
          appDataIsRecording: appData.isRecording,
          recordingIsRecording: recording.isRecording,
          previousState: prevStateRef.current,
          newState: frontendState,
          stateChangeTimestamp: Date.now(),
          executionDuration: Date.now() - effectExecutionTime,
          triggerSource: 'comprehensive_state_sync'
        })

        setAppData(prev => ({
          ...prev,
          state: frontendState,
          isRecording: recording.isRecording, // 同時強制同步 isRecording
        }))

        prevStateRef.current = frontendState
      } else {
        console.log('🔄 [狀態同步] 所有狀態一致，跳過更新', {
          currentState: frontendState,
          isRecording: recording.isRecording,
          executionTime: Date.now() - effectExecutionTime
        })
      }
    }
  }, [session.currentSession, recording.isRecording, recording.transcripts, mapStateFromSession])
  // 依賴於 recording.transcripts 而非 length，確保內容變化時觸發狀態同步

  // 初始化應用狀態 - 只在組件掛載時執行一次
  useEffect(() => {
    let isMounted = true

    const initializeApp = async () => {
      console.log('🚀 初始化應用狀態...')
      setIsLoading(true)

      try {
        // 檢查是否有活躍會話
        const activeSession = await session.checkActiveSession()
        if (!isMounted) return // 組件已卸載，停止執行

        if (activeSession) {
          // 載入筆記內容
          await notes.loadNote(activeSession.id)
        } else {
          // 檢查是否有本地草稿
          const draftContent = localStorage.getItem('draft_note')
          if (draftContent) {
            setAppData(prev => ({ ...prev, editorContent: draftContent }))
            console.log('📝 載入本地草稿')
          }
        }
      } catch (error) {
        if (!isMounted) return // 組件已卸載，停止執行

        // 如果是網路錯誤，不要拋出錯誤，讓用戶正常使用應用
        if (error instanceof Error && error.message.includes('Network Error')) {
          console.warn('⚠️ 初始化時 Backend 連線失敗，使用離線模式:', error.message)

          // 檢查是否有本地草稿
          const draftContent = localStorage.getItem('draft_note')
          if (draftContent) {
            setAppData(prev => ({ ...prev, editorContent: draftContent }))
            console.log('📝 離線模式：載入本地草稿')
          }
        } else {
          console.error('❌ 初始化失敗:', error)
          setError(error instanceof Error ? error.message : '初始化失敗')
        }
      } finally {
        if (isMounted) {
          setIsLoading(false)
        }
      }
    }

    initializeApp()

    return () => {
      isMounted = false
    }
  }, []) // 空依賴項，只在組件掛載時執行一次

  // 同步錄音狀態 - 強化一致性檢查
  useEffect(() => {
    console.log('🔄 [錄音狀態同步] 更新 appData.isRecording:', {
      from: appData.isRecording,
      to: recording.isRecording,
      recordingTime: recording.recordingTime,
      timestamp: Date.now(),
      needsUpdate: appData.isRecording !== recording.isRecording
    })

    // 強制同步錄音狀態，確保一致性
    setAppData(prev => {
      const needsUpdate = prev.isRecording !== recording.isRecording || prev.recordingTime !== recording.recordingTime

      if (needsUpdate) {
        console.log('🔄 [錄音狀態同步] 執行狀態更新:', {
          prevIsRecording: prev.isRecording,
          newIsRecording: recording.isRecording,
          prevRecordingTime: prev.recordingTime,
          newRecordingTime: recording.recordingTime
        })
      }

      return {
        ...prev,
        isRecording: recording.isRecording,
        recordingTime: recording.recordingTime,
      }
    })
  }, [recording.isRecording, recording.recordingTime])

  // 移除重複的狀態一致性檢查，已整合到主要狀態同步邏輯中

  // 同步筆記內容
  useEffect(() => {
    setAppData(prev => ({
      ...prev,
      editorContent: notes.noteContent,
    }))
  }, [notes.noteContent])

  // 處理逐字稿更新 - 統一使用 recording.transcripts
  useEffect(() => {
    console.log('📝 [逐字稿更新] useEffect 觸發:', {
      recordingTranscriptCount: recording.transcripts.length,
      recordingTranscripts: recording.transcripts,
      currentState: appData.state,
      isRecording: appData.isRecording,
      note: '統一使用 recording.transcripts，避免雙重管理'
    })

    const transcriptEntries = recording.transcripts.map((transcriptMsg: TranscriptMessage) => {
      // 使用 start_time 並轉換為 HH:MM:SS 格式
      const startTime = transcriptMsg.start_time ?? 0
      const hours = Math.floor(startTime / 3600)
      const minutes = Math.floor((startTime % 3600) / 60)
      const seconds = Math.floor(startTime % 60)
      const timeStr = `${hours.toString().padStart(2, "0")}:${minutes.toString().padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`

      console.log('📝 [逐字稿轉換] 單個片段:', {
        text: transcriptMsg.text,
        timeStr,
        startTime,
        type: transcriptMsg.type
      })

      return {
        time: timeStr,
        text: transcriptMsg.text ?? '',
      }
    })

    console.log('📝 [逐字稿更新] 轉換完成:', {
      entriesCount: transcriptEntries.length,
      entries: transcriptEntries,
      firstEntry: transcriptEntries[0]?.text?.substring(0, 30) + '...',
      appDataBefore: appData.transcriptEntries
    })

    setAppData(prev => {
      console.log('📝 [逐字稿更新] setAppData 執行:', {
        prevTranscriptEntries: prev.transcriptEntries,
        newTranscriptEntries: transcriptEntries,
        isChanged: prev.transcriptEntries !== transcriptEntries
      })
      return {
        ...prev,
        transcriptEntries,
      }
    })
  }, [recording.transcripts])

  // 監聽轉錄完成，自動轉為 finished 狀態
  useEffect(() => {
    const currentCompleted = transcript.isCompleted
    const wasCompleted = prevTranscriptCompletedRef.current

    // 只在轉錄狀態從 false 變為 true 時處理
    if (currentCompleted && !wasCompleted && prevStateRef.current === "processing") {
      console.log('🔄 [轉錄完成] 轉錄完成，轉為 finished 狀態')

      setAppData(prev => {
        const newState = "finished"
        prevStateRef.current = newState
        return { ...prev, state: newState }
      })

      // 完成會話
      if (session.currentSession) {
        session.finishSession().catch(console.error)
      }
    }

    prevTranscriptCompletedRef.current = currentCompleted
  }, [
    transcript.isCompleted,
    session.currentSession,
    session.finishSession
  ])

  // 監聽錄音和轉錄錯誤，處理錯誤狀態
  useEffect(() => {
    const recordingError = recording.error
    const transcriptError = transcript.error
    const prevErrors = prevErrorStateRef.current

    // 只在錯誤狀態真正改變時處理（避免重複處理同樣的錯誤）
    if ((recordingError !== prevErrors.recording) || (transcriptError !== prevErrors.transcript)) {
      if (recordingError || transcriptError) {
        console.log('🚨 [錯誤處理] 檢測到錯誤:', {
          recordingError,
          transcriptError,
          currentState: prevStateRef.current,
          sessionId: session.currentSession?.id
        })

        const currentState = prevStateRef.current

        // 如果是錄音相關錯誤，停止錄音並回到預設狀態
        if (currentState === "recording_waiting" || currentState === "recording_active") {
          console.log('🚨 [錯誤處理] 錄音狀態錯誤，停止錄音並回到預設狀態')

          // 停止錄音
          recording.stopRecording()

          // 清理連線
          transcript.disconnect()

          // 回到預設狀態
          setAppData(prev => {
            prevStateRef.current = "default"
            return { ...prev, state: "default" }
          })

          // 顯示錯誤訊息
          const errorMessage = recordingError || transcriptError || '錄音或轉錄過程中發生錯誤'
          toast({
            title: '錄音錯誤',
            description: errorMessage,
            variant: 'destructive',
          })
        }

        // 如果是處理狀態的錯誤，也回到預設狀態
        if (currentState === "processing") {
          console.log('🚨 [錯誤處理] 處理狀態錯誤，回到預設狀態')

          setAppData(prev => {
            prevStateRef.current = "default"
            return { ...prev, state: "default" }
          })

          const errorMessage = transcriptError || recordingError || '處理轉錄過程中發生錯誤'
          toast({
            title: '處理錯誤',
            description: errorMessage,
            variant: 'destructive',
          })
        }
      }

      // 更新錯誤狀態追蹤
      prevErrorStateRef.current = {
        recording: recordingError,
        transcript: transcriptError
      }
    }
  }, [recording.error, transcript.error, session.currentSession, recording, transcript, toast])

  // 建立純筆記會話
  const createNoteSession = useCallback(async (title?: string) => {
    setIsLoading(true)
    setError(null)

    try {
      const newSession = await session.createNoteSession(title)
      if (newSession) {
        // 載入筆記內容
        await notes.loadNote(newSession.id)

        // 清除本地草稿
        localStorage.removeItem('draft_note')

        console.log('✅ 純筆記會話建立成功')

        toast({
          title: '筆記會話已建立',
          description: `會話 "${title}" 建立成功`,
        })
      }
    } catch (err) {
      // 特別處理會話衝突錯誤
      if (err instanceof Error && err.message.includes('檢測到活躍會話衝突')) {
        const conflictMsg = '偵測到會話衝突，請重新整理頁面後再試'
        console.error("🎤 startRecording: 會話衝突錯誤:", err.message)
        setError(conflictMsg)
        toast({
          title: '會話衝突',
          description: '目前已有活躍會話，請重新整理頁面後再試，或等待當前會話結束',
          variant: 'destructive'
        })
        return
      }

      const msg = err instanceof Error ? err.message : '開始錄音失敗'
      console.error("🎤 startRecording: 流程中發生錯誤:", msg)
      setError(msg)
      toast({ title: '錄音失敗', description: msg, variant: 'destructive' })
    } finally {
      setIsLoading(false)
      console.log("🎤 startRecording: 流程結束")
    }
  }, [session, recording, transcript, appData.editorContent, toast])

  // 建立錄音會話
  const createRecordingSession = useCallback(async (title?: string) => {
    setIsLoading(true)
    setError(null)

    try {
      const newSession = await session.createRecordingSession(title, appData.editorContent)
      if (newSession) {
        // 載入筆記內容
        await notes.loadNote(newSession.id)

        // 清除本地草稿
        localStorage.removeItem('draft_note')

        console.log('✅ 錄音會話建立成功')

        toast({
          title: '錄音會話已建立',
          description: `會話 "${title}" 建立成功`,
        })
      }
    } catch (err) {
      // 特別處理會話衝突錯誤
      if (err instanceof Error && err.message.includes('檢測到活躍會話衝突')) {
        const conflictMsg = '偵測到會話衝突，請重新整理頁面後再試'
        console.error("🎤 createRecordingSession: 會話衝突錯誤:", err.message)
        setError(conflictMsg)
        toast({
          title: '會話衝突',
          description: '目前已有活躍會話，請重新整理頁面後再試，或等待當前會話結束',
          variant: 'destructive'
        })
        return
      }

      const errorMessage = err instanceof Error ? err.message : '建立錄音會話失敗'
      setError(errorMessage)
      console.error('❌ 建立錄音會話失敗:', err)

      toast({
        title: '建立失敗',
        description: errorMessage,
        variant: 'destructive',
      })
    } finally {
      setIsLoading(false)
    }
  }, [session, notes, toast, appData.editorContent])

  // 開始錄音 - 支援四狀態流程
  const startRecording = useCallback(async (title?: string) => {
    console.log("🎤 startRecording: 流程開始")
    setIsLoading(true)
    try {
      // 先檢查是否有活躍會話，確保前端狀態與後端同步
      console.log("🎤 startRecording: 檢查活躍會話狀態")
      const latestActiveSession = await session.checkActiveSession()

      let sessionToRecord = latestActiveSession || session.currentSession
      console.log("🎤 startRecording: 會話狀態檢查結果:", {
        latestActiveSession: latestActiveSession?.id,
        currentSession: session.currentSession?.id,
        finalSessionToUse: sessionToRecord?.id
      })

      if (latestActiveSession && !session.currentSession) {
        console.log("🎤 startRecording: 檢測到活躍會話，同步前端狀態")
      }

      if (!sessionToRecord) {
        console.log("🎤 startRecording: 沒有 session，建立新的錄音 session")
        const newSession = await session.createRecordingSession(title, appData.editorContent)
        if (!newSession) {
          console.error("🎤 startRecording: 建立 session 失敗，回傳值為 null")
          throw new Error('無法建立新的錄音會話')
        }
        console.log("🎤 startRecording: Session 建立成功:", newSession)
        sessionToRecord = newSession
        localStorage.removeItem('draft_note')
      } else if (sessionToRecord.type === 'note_only') {
        console.log("🎤 startRecording: 偵測到 note_only session，進行升級")
        const upgradedSession = await session.upgradeToRecording()
        if (!upgradedSession) {
          console.error("🎤 startRecording: 升級 session 失敗，回傳值為 null")
          throw new Error('無法升級會話')
        }
        console.log("🎤 startRecording: Session 升級成功:", upgradedSession)
        sessionToRecord = upgradedSession
      } else if (sessionToRecord.type === 'recording') {
        console.log("🎤 startRecording: 使用現有的錄音會話:", sessionToRecord.id)
      }

      console.log("🎤 startRecording: 準備呼叫 recording.startRecording")
      // recording.startRecording 使用 TranscriptManager，統一管理逐字稿連接
      await recording.startRecording(sessionToRecord.id)
      console.log("🎤 startRecording: recording.startRecording 呼叫完畢")

      console.log("🎤 startRecording: 跳過 transcript.connect，避免雙重監聽器")
      // 移除重複連接：useRecording 已經透過 TranscriptManager 連接逐字稿
      // 避免 useTranscript 和 useRecording 同時添加監聽器導致競爭條件
      console.log("🎤 startRecording: 逐字稿將由 useRecording hook 統一管理")

      toast({ title: '錄音開始' })
    } catch (err) {
      // 特別處理會話衝突錯誤
      if (err instanceof Error && err.message.includes('檢測到活躍會話衝突')) {
        const conflictMsg = '偵測到會話衝突，請重新整理頁面後再試'
        console.error("🎤 startRecording: 會話衝突錯誤:", err.message)
        setError(conflictMsg)
        toast({
          title: '會話衝突',
          description: '目前已有活躍會話，請重新整理頁面後再試，或等待當前會話結束',
          variant: 'destructive'
        })
        return
      }

      const msg = err instanceof Error ? err.message : '開始錄音失敗'
      console.error("🎤 startRecording: 流程中發生錯誤:", msg)
      setError(msg)
      toast({ title: '錄音失敗', description: msg, variant: 'destructive' })
    } finally {
      setIsLoading(false)
      console.log("🎤 startRecording: 流程結束")
    }
  }, [session, recording, transcript, appData.editorContent, toast])

  // 升級會話為錄音模式
  const upgradeToRecording = useCallback(async () => {
    setIsLoading(true)
    setError(null)

    try {
      const updatedSession = await session.upgradeToRecording()
      if (updatedSession) {
        console.log('✅ 會話升級為錄音模式成功')

        toast({
          title: '升級成功',
          description: '會話已升級為錄音模式',
        })
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '升級會話失敗'
      setError(errorMessage)
      console.error('❌ 升級會話失敗:', err)

      toast({
        title: '升級失敗',
        description: errorMessage,
        variant: 'destructive',
      })
    } finally {
      setIsLoading(false)
    }
  }, [session, toast])

  // 停止錄音 - 自動轉為 processing 狀態
  const stopRecording = useCallback(async () => {
    setIsLoading(true)
    setError(null)

    try {
      await recording.stopRecording()

      // 斷開 transcript 連接
      transcript.disconnect()

      // 狀態轉為 processing
      setAppData(prev => ({ ...prev, state: "processing" }))

      console.log('✅ 錄音停止，開始處理逐字稿')

      toast({
        title: '處理中',
        description: '正在處理錄音內容，請稍候...',
      })
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '停止錄音失敗'
      setError(errorMessage)
      console.error('❌ 停止錄音失敗:', err)

      toast({
        title: '停止失敗',
        description: errorMessage,
        variant: 'destructive',
      })
    } finally {
      setIsLoading(false)
    }
  }, [recording, toast])

  // 完成會話
  const finishSession = useCallback(async () => {
    setIsLoading(true)
    setError(null)

    try {
      await session.finishSession()
      console.log('✅ 會話完成')

      toast({
        title: '會話完成',
        description: '您可以匯出筆記或開始新的筆記',
      })
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '完成會話失敗'
      setError(errorMessage)
      console.error('❌ 完成會話失敗:', err)

      toast({
        title: '完成失敗',
        description: errorMessage,
        variant: 'destructive',
      })
    } finally {
      setIsLoading(false)
    }
  }, [session, toast])

  // 開新筆記 - 清空當前資料，狀態回到 default
  const newNote = useCallback(async () => {
    setIsLoading(true)
    setError(null)

    try {
      // 如果有活躍會話，先刪除它
      if (session.currentSession) {
        console.log('🗑️ 刪除當前活躍會話:', session.currentSession.id)
        await session.deleteSession()
        console.log('✅ 會話刪除成功')
      }

      // 清空當前資料
      setAppData({
        state: "default",
        transcriptEntries: [],
        editorContent: "",
        isRecording: false,
        recordingTime: 0,
      })

      // 清除錄音和逐字稿狀態
      recording.clearTranscripts()
      transcript.clearTranscripts()
      notes.clearNote()

      // 清除本地草稿
      localStorage.removeItem('draft_note')

      console.log('🔄 已開始新筆記')

      toast({
        title: '新筆記',
        description: '已清空內容，可以開始新的筆記',
      })
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '開始新筆記失敗'
      setError(errorMessage)
      console.error('❌ 開始新筆記失敗:', err)

      toast({
        title: '操作失敗',
        description: errorMessage,
        variant: 'destructive',
      })
    } finally {
      setIsLoading(false)
    }
  }, [session, recording, transcript, notes, toast])

  // 自動儲存筆記內容到本地草稿
  const saveLocalDraft = useCallback((content: string) => {
    if (!session.currentSession && content.trim()) {
      localStorage.setItem('draft_note', content)
    }
  }, [session.currentSession])

  return {
    // 應用狀態
    appData,
    isLoading,
    error,

    // 會話管理
    createNoteSession,
    createRecordingSession,
    upgradeToRecording,
    finishSession,
    newNote,

    // 錄音控制
    startRecording,
    stopRecording,

    // 本地草稿
    saveLocalDraft,

    // 外部狀態
    session: session.currentSession,
    sessionLoading: session.isLoading,
    sessionError: session.error,

    // 錄音狀態
    recordingError: recording.error,

    // 逐字稿狀態
    transcriptConnected: transcript.isConnected,
    transcriptError: transcript.error,
    transcriptAutoScroll: transcript.autoScrollEnabled,
    enableAutoScroll: transcript.enableAutoScroll,
    disableAutoScroll: transcript.disableAutoScroll,
    scrollToLatest: transcript.scrollToLatest,
  }
}

export { mapBackendToFrontendState }


# END FILE CONTENTS


# File: frontend/lib/segmented-audio-recorder.ts

"use client"

import { getAudioChunkIntervalMs } from './config'

// 音訊錄製狀態
export type SegmentedAudioRecorderState = 'idle' | 'recording' | 'paused' | 'error'

// 音訊錄製配置
export interface SegmentedAudioRecorderConfig {
  segmentDuration: number // 每個段落時長（毫秒）
  mimeType: string // 音訊格式
  audioBitsPerSecond?: number // 音訊位元率
}

// 音訊段落資料
export interface AudioSegment {
  blob: Blob
  timestamp: number
  duration: number
  sequence: number
}

// 預設配置
const DEFAULT_CONFIG: SegmentedAudioRecorderConfig = {
  segmentDuration: getAudioChunkIntervalMs(), // 從環境變數讀取切片時長
  mimeType: 'audio/webm;codecs=opus',
  audioBitsPerSecond: 64000, // 64 kbps for configurable chunks（降低位元率）
}

/**
 * SegmentedAudioRecorder - 分段式音訊錄製器
 *
 * 核心特點：
 * - 使用遞迴啟動/停止 MediaRecorder 模式
 * - 每個 segment 包含完整 WebM Header
 * - 支援可配置的切片時長（預設 5 秒）
 * - 解決 Azure OpenAI Whisper API 檔頭問題
 */
export class SegmentedAudioRecorder {
  private stream: MediaStream | null = null
  private config: SegmentedAudioRecorderConfig
  private state: SegmentedAudioRecorderState = 'idle'
  private sequence: number = 0
  private recording = false
  private segmentTimeout: NodeJS.Timeout | null = null

  // 事件回調
  private onSegmentCallback?: (segment: AudioSegment) => void
  private onStateChangeCallback?: (state: SegmentedAudioRecorderState) => void
  private onErrorCallback?: (error: Error) => void
  private onStartCallback?: () => void

  constructor(config: Partial<SegmentedAudioRecorderConfig> = {}) {
    this.config = { ...DEFAULT_CONFIG, ...config }
  }

  /**
   * 初始化錄音器 - 獲取音訊權限
   */
  async initialize(): Promise<void> {
    if (this.stream) {
      return // 已初始化
    }

    try {
      this.stream = await navigator.mediaDevices.getUserMedia({ audio: true })
      console.log('🎤 [SegmentedAudioRecorder] 音訊權限獲取成功')
    } catch (error) {
      const errorMsg = error instanceof Error ? error.message : '獲取音訊權限失敗'
      this.handleError(new Error(errorMsg))
      throw error
    }
  }

  /**
   * 開始錄音 - 啟動遞迴分段錄音
   */
  async start(onSegmentAvailable: (segment: AudioSegment) => void): Promise<void> {
    if (this.recording) {
      throw new Error('錄製已在進行中')
    }

    if (!this.stream) {
      await this.initialize()
    }

    this.onSegmentCallback = onSegmentAvailable
    this.recording = true
    this.sequence = 0

    console.log('🎬 [SegmentedAudioRecorder] 開始分段錄音', {
      segmentDuration: this.config.segmentDuration,
      mimeType: this.config.mimeType,
      audioBitsPerSecond: this.config.audioBitsPerSecond
    })

    this.setState('recording')
    this.startSegment()
  }

  /**
   * 核心遞迴函式 - 啟動單個錄音段落
   */
  private startSegment(): void {
    if (!this.recording || !this.stream) {
      return
    }

    console.log(`🎵 [SegmentedAudioRecorder] 開始錄音段落 #${this.sequence}`)

    // 建立新的 MediaRecorder 實例
    const mediaRecorder = new MediaRecorder(this.stream, {
      mimeType: this.config.mimeType,
      audioBitsPerSecond: this.config.audioBitsPerSecond,
    })

    // 新增：設定錄音開始事件處理
    mediaRecorder.onstart = () => {
      console.log(`🚀 [SegmentedAudioRecorder] 段落 #${this.sequence} 錄音真正開始`)
      // 只在第一個段落觸發 onstart 回調
      if (this.sequence === 0 && this.onStartCallback) {
        console.log('🎯 [SegmentedAudioRecorder] 觸發錄音開始回調')
        this.onStartCallback()
      }
    }

    // 設定資料接收處理
    mediaRecorder.ondataavailable = (event) => {
      if (event.data.size > 0) {
        console.log(`📦 [SegmentedAudioRecorder] 段落 #${this.sequence} 完成`, {
          size: event.data.size,
          mimeType: this.config.mimeType,
          containsCompleteHeader: true // 每個段落都有完整檔頭
        })

        const segment: AudioSegment = {
          blob: event.data,
          timestamp: Date.now(),
          duration: this.config.segmentDuration,
          sequence: this.sequence++,
        }

        // 回調通知有新段落可用
        this.onSegmentCallback?.(segment)
      }
    }

    // 錯誤處理
    mediaRecorder.onerror = (event) => {
      console.error(`❌ [SegmentedAudioRecorder] 段落 #${this.sequence} 錯誤:`, event)
      this.handleError(new Error(`MediaRecorder 錯誤: ${event}`))
    }

    // 開始錄製此段落
    mediaRecorder.start()

    // 設定計時器，在指定時間後結束此段落並開始下一段
    this.segmentTimeout = setTimeout(() => {
      if (mediaRecorder.state === 'recording') {
        // 請求數據並停止 MediaRecorder
        mediaRecorder.requestData() // 觸發 ondataavailable
        mediaRecorder.stop()        // 結束此段

        // 如果仍在錄音狀態，遞迴開始下一段
        if (this.recording) {
          // 短暫延遲確保前一段完全結束
          setTimeout(() => {
            this.startSegment()
          }, 50)
        }
      }
    }, this.config.segmentDuration)
  }

  /**
   * 停止錄音
   */
  stop(): void {
    console.log('⏹️ [SegmentedAudioRecorder] 停止錄音')

    this.recording = false

    // 清除計時器
    if (this.segmentTimeout) {
      clearTimeout(this.segmentTimeout)
      this.segmentTimeout = null
    }

    this.setState('idle')
  }

  /**
   * 清理資源
   */
  cleanup(): void {
    this.stop()

    if (this.stream) {
      this.stream.getTracks().forEach(track => track.stop())
      this.stream = null
    }

    this.sequence = 0
    console.log('🧹 SegmentedAudioRecorder 已清理')
  }

  /**
   * 檢查是否正在錄音
   */
  get isRecording(): boolean {
    return this.recording
  }

  /**
   * 獲取當前序號
   */
  get currentSequence(): number {
    return this.sequence
  }

  /**
   * 獲取當前狀態
   */
  get currentState(): SegmentedAudioRecorderState {
    return this.state
  }

  /**
   * 獲取當前配置
   */
  get currentConfig(): SegmentedAudioRecorderConfig {
    return { ...this.config }
  }

  // 設定狀態
  private setState(newState: SegmentedAudioRecorderState): void {
    this.state = newState
    this.onStateChangeCallback?.(newState)
  }

  // 錯誤處理
  private handleError(error: Error): void {
    console.error('❌ SegmentedAudioRecorder 錯誤:', error)
    this.setState('error')
    this.recording = false
    this.onErrorCallback?.(error)
  }

  // 事件回調設定
  onSegment(callback: (segment: AudioSegment) => void): void {
    this.onSegmentCallback = callback
  }

  onStateChange(callback: (state: SegmentedAudioRecorderState) => void): void {
    this.onStateChangeCallback = callback
  }

  onError(callback: (error: Error) => void): void {
    this.onErrorCallback = callback
  }

  onStart(callback: () => void): void {
    this.onStartCallback = callback
  }
}

// 工廠函數
export const createSegmentedAudioRecorder = (config?: Partial<SegmentedAudioRecorderConfig>): SegmentedAudioRecorder => {
  return new SegmentedAudioRecorder(config)
}

/**
 * 檢查瀏覽器分段式音訊錄製支援
 */
export async function checkSegmentedAudioRecordingSupport(): Promise<{ isSupported: boolean; error?: string }> {
  if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
    return { isSupported: false, error: '瀏覽器不支援 MediaDevices API' }
  }

  if (!window.MediaRecorder) {
    return { isSupported: false, error: '瀏覽器不支援 MediaRecorder API' }
  }

  // 檢查 MIME 類型支援
  if (!MediaRecorder.isTypeSupported(DEFAULT_CONFIG.mimeType)) {
    return { isSupported: false, error: `不支援音訊格式: ${DEFAULT_CONFIG.mimeType}` }
  }

  try {
    const stream = await navigator.mediaDevices.getUserMedia({ audio: true })
    // 立即停止串流以釋放資源
    stream.getTracks().forEach(track => track.stop())
    return { isSupported: true }
  } catch (error) {
    return { isSupported: false, error: `無法獲取麥克風權限: ${error}` }
  }
}


# END FILE CONTENTS


# File: frontend/components/ui/collapsible.tsx

"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }


# END FILE CONTENTS


# File: frontend/lib/__tests__/network-restorer.test.ts

import { describe, expect, it, vi } from 'vitest'
import { emit } from '@/utils/event-bus'
import * as uploader from '@/lib/rest-audio-uploader'
import * as tm from '@/lib/transcript-manager'

describe('network restorer', () => {
    it('should retry and reconnect', async () => {
        const spyRetry = vi.spyOn(uploader.restAudioUploader, 'retryFailedSegments').mockResolvedValue({ uploaded: 1, remaining: 0 })
        const spyConnect = vi.spyOn(tm.transcriptManager, 'connect').mockReturnValue(Promise.resolve() as any)
        const spyIsConnected = vi.spyOn(tm.transcriptManager, 'isConnected').mockReturnValue(false)

        emit('network:restored')
        await vi.runAllTicks()

        expect(spyRetry).toHaveBeenCalled()
        expect(spyConnect).toHaveBeenCalled()
    })
})


# END FILE CONTENTS


# File: frontend/hooks/use-app-state-context.ts

"use client"

import React, { createContext, useContext, useReducer, useCallback, useEffect, useState } from "react"
import { AppStateContextValue, initialContextState } from "../types/app-state-context"
import { appStateReducer, AppStateReducerState } from "../lib/app-state-reducer"
import { InitialStateLoader } from "../lib/initial-state-loader"
import { AppState, SessionStatus, SessionType, TranscriptEntry } from "../types/app-state"
import { StateMachineManager } from '../lib/state-machine';
import { StateTransitionTrigger } from "../types/state-transitions";
import { ServiceRegistry, SERVICE_KEYS, serviceContainer } from "../lib/services";
import type { ISessionService, IRecordingService, ITranscriptService, TranscriptMessage } from "../lib/services";

const AppStateContext = createContext<AppStateContextValue | null>(null)

export function AppStateProvider({ children }: { children: React.ReactNode }) {
  const [state, dispatch] = useReducer(appStateReducer, initialContextState as AppStateReducerState)
  const [stateMachineManager, setStateMachineManager] = useState<StateMachineManager | null>(null);
  const [servicesInitialized, setServicesInitialized] = useState(false);

  // 初始化服務層
  useEffect(() => {
    async function initializeServices() {
      try {
        console.log('🚀 [AppStateProvider] 初始化服務層...')

        // 註冊並初始化所有服務
        await ServiceRegistry.initializeServices()

        setServicesInitialized(true)
        console.log('✅ [AppStateProvider] 服務層初始化完成')
      } catch (error) {
        console.error('❌ [AppStateProvider] 服務層初始化失敗:', error)
      }
    }

    initializeServices()
  }, [])

  // 載入初始狀態並初始化狀態機
  useEffect(() => {
    if (!servicesInitialized) {
      console.log('⏳ [AppStateProvider] 等待服務層初始化...')
      return
    }

    console.log('🔄 [AppStateProvider] 載入初始狀態...')

    // 檢查是否在瀏覽器環境
    if (typeof window !== 'undefined') {
      try {
        const initialAppData = InitialStateLoader.loadInitialAppData()

        // 更新 Context 狀態
        dispatch({ type: "SET_APP_STATE", payload: initialAppData.state })
        dispatch({ type: "SET_EDITOR_CONTENT", payload: initialAppData.editorContent })
        dispatch({ type: "SET_TRANSCRIPT_ENTRIES", payload: initialAppData.transcriptEntries })

        if (initialAppData.session) {
          dispatch({ type: "SET_SESSION", payload: initialAppData.session })
        }

        // 初始化狀態機並註冊副作用處理器
        const smManager = new StateMachineManager({
          currentState: initialAppData.state,
          isRecording: initialAppData.isRecording,
          transcriptCount: initialAppData.transcriptEntries.length,
          session: initialAppData.session || null,
          error: null
        });

        // 取得服務實例
        const sessionService = serviceContainer.resolve<ISessionService>(SERVICE_KEYS.SESSION_SERVICE)
        const recordingService = serviceContainer.resolve<IRecordingService>(SERVICE_KEYS.RECORDING_SERVICE)
        const transcriptService = serviceContainer.resolve<ITranscriptService>(SERVICE_KEYS.TRANSCRIPT_SERVICE)

        // 註冊副作用處理器 - CREATE_SESSION
        smManager.registerSideEffectHandler('CREATE_SESSION', {
          handleSideEffect: async (effect) => {
            console.log('🏗️ [副作用] CREATE_SESSION: 建立會話', effect);

            try {
              if (effect.type === 'CREATE_SESSION') {
                // 修復：建立會話前先檢查現有活躍會話
                console.log('🔍 [副作用] CREATE_SESSION: 檢查現有活躍會話')
                const existingSession = await sessionService.checkActiveSession()

                if (existingSession) {
                  console.log('⚠️ [副作用] CREATE_SESSION: 發現現有活躍會話，嘗試自動清理', {
                    existingSessionId: existingSession.id,
                    status: existingSession.status,
                    type: existingSession.type
                  })

                  try {
                    // 嘗試刪除現有活躍會話
                    await sessionService.deleteSession(existingSession.id)
                    console.log('✅ [副作用] CREATE_SESSION: 成功清理現有會話', existingSession.id)
                  } catch (cleanupError) {
                    console.warn('⚠️ [副作用] CREATE_SESSION: 清理現有會話失敗，繼續嘗試創建', cleanupError)
                  }
                }

                const sessionData = await sessionService.createRecordingSession(
                  effect.title || `錄音筆記 ${new Date().toLocaleString()}`
                )

                // 新增：等待會話在資料庫中完全可見
                const isReady = await sessionService.waitForSessionReady(sessionData.id)

                if (!isReady) {
                  throw new Error('會話創建超時，無法確認會話狀態')
                }

                // 更新 Context 狀態
                dispatch({
                  type: "SET_SESSION",
                  payload: {
                    id: sessionData.id,
                    status: sessionData.status as SessionStatus,
                    type: effect.sessionType
                  }
                })

                console.log('✅ [副作用] CREATE_SESSION 完成:', sessionData.id)

                // 移除 setTimeout，改為同步觸發 SESSION_CREATED 轉換
                if (stateMachineManager) {
                  stateMachineManager.getStateMachine().transition('SESSION_CREATED')
                }
              }
            } catch (error) {
              console.error('❌ [副作用] CREATE_SESSION 失敗:', error)

              // 修復：提供更明確的錯誤訊息
              let errorMessage = '建立會話失敗'
              if (error instanceof Error) {
                if (error.message.includes('409') || error.message.includes('衝突')) {
                  errorMessage = '會話衝突：請重新整理頁面後再試，或聯繫技術支援'
                } else if (error.message.includes('超時')) {
                  errorMessage = '會話創建超時：請檢查網路連接後重試'
                }
              }

              dispatch({ type: "SET_ERROR", payload: errorMessage })

              // 修復：確保清理 session 狀態
              dispatch({ type: "SET_SESSION", payload: null })

              // 移除 setTimeout，改為同步觸發錯誤轉換
              if (stateMachineManager) {
                stateMachineManager.getStateMachine().transition('ERROR_OCCURRED')
              }
            }
          }
        });



        // 註冊副作用處理器 - START_RECORDING
        smManager.registerSideEffectHandler('START_RECORDING', {
          handleSideEffect: async (effect) => {
            console.log('🎤 [副作用] START_RECORDING: 開始錄音', effect);

            try {
              const currentSession = smManager.getStateMachine().getContext().session
              if (!currentSession) {
                throw new Error('沒有活躍的會話')
              }

              await recordingService.startRecording(currentSession.id)

              // 更新錄音狀態
              dispatch({ type: "SET_RECORDING", payload: true })

              console.log('✅ [副作用] START_RECORDING 完成')
            } catch (error) {
              console.error('❌ [副作用] START_RECORDING 失敗:', error)
              dispatch({ type: "SET_ERROR", payload: '開始錄音失敗' })

              // 觸發錯誤轉換
              setTimeout(() => {
                if (stateMachineManager) {
                  stateMachineManager.getStateMachine().transition('ERROR_OCCURRED')
                }
              }, 100)
            }
          }
        });

        // 註冊副作用處理器 - CONNECT_WEBSOCKET
        smManager.registerSideEffectHandler('CONNECT_WEBSOCKET', {
          handleSideEffect: async (effect) => {
            console.log('🔌 [副作用] CONNECT_WEBSOCKET: 連接 WebSocket', effect);

            try {
              const currentSession = smManager.getStateMachine().getContext().session
              if (!currentSession) {
                throw new Error('沒有活躍的會話')
              }

              // 修復：添加連接超時處理
              const WEBSOCKET_TIMEOUT = 10000; // 10秒超時

              const connectionPromise = async () => {
                // 新增：WebSocket 連接前會話狀態預檢
                console.log('🔍 [副作用] CONNECT_WEBSOCKET: 開始會話狀態預檢', currentSession.id)

                const activeSession = await sessionService.checkActiveSession()
                if (!activeSession) {
                  throw new Error(`會話狀態預檢失敗：沒有活躍的會話`)
                }

                if (activeSession.id !== currentSession.id) {
                  throw new Error(`會話狀態預檢失敗：活躍會話 ${activeSession.id} 與期望的會話 ${currentSession.id} 不匹配`)
                }

                if (activeSession.status !== 'active') {
                  throw new Error(`會話狀態預檢失敗：會話 ${activeSession.id} 狀態為 ${activeSession.status}，期望為 active`)
                }

                if (activeSession.type !== 'recording') {
                  throw new Error(`會話狀態預檢失敗：會話 ${activeSession.id} 類型為 ${activeSession.type}，期望為 recording`)
                }

                console.log('✅ [副作用] CONNECT_WEBSOCKET: 會話狀態預檢通過', {
                  sessionId: activeSession.id,
                  status: activeSession.status,
                  type: activeSession.type
                })

                // 連接並添加監聽器 - 使用預檢通過的會話 ID
                await transcriptService.connect(activeSession.id)

                return activeSession
              }

              // 修復：使用 Promise.race 實現超時機制
              const timeoutPromise = new Promise<never>((_, reject) => {
                setTimeout(() => reject(new Error('WebSocket 連接超時')), WEBSOCKET_TIMEOUT)
              })

              const activeSession = await Promise.race([connectionPromise(), timeoutPromise])

              // 添加逐字稿監聽器
              const handleTranscript = (message: TranscriptMessage) => {
                if (message.type === 'transcript_segment' && message.text) {
                  const startTime = message.start_time ?? 0
                  const hours = Math.floor(startTime / 3600)
                  const minutes = Math.floor((startTime % 3600) / 60)
                  const seconds = Math.floor(startTime % 60)
                  const timeStr = `${hours.toString().padStart(2, "0")}:${minutes.toString().padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`

                  // 添加逐字稿到 Context
                  dispatch({
                    type: "ADD_TRANSCRIPT_ENTRY",
                    payload: {
                      time: timeStr,
                      text: message.text
                    }
                  })

                  // 如果是第一個逐字稿，觸發轉換
                  const currentContext = smManager.getStateMachine().getContext()
                  if (currentContext.transcriptCount === 0) {
                    setTimeout(() => {
                      smManager.getStateMachine().transition('FIRST_TRANSCRIPT_RECEIVED')
                    }, 100)
                  }
                } else if (message.type === 'transcript_complete') {
                  // 轉錄完成
                  setTimeout(() => {
                    smManager.getStateMachine().transition('PROCESSING_COMPLETED')
                  }, 100)
                } else if (message.type === 'error') {
                  console.error('🚨 [副作用] 逐字稿錯誤:', message)
                  dispatch({ type: "SET_ERROR", payload: '逐字稿處理錯誤' })

                  setTimeout(() => {
                    smManager.getStateMachine().transition('ERROR_OCCURRED')
                  }, 100)
                }
              }

              transcriptService.addTranscriptListener(activeSession.id, handleTranscript)

              console.log('✅ [副作用] CONNECT_WEBSOCKET 完成')
            } catch (error: unknown) {
              console.error('❌ [副作用] CONNECT_WEBSOCKET 失敗:', error)

              // 區分不同類型的錯誤提供明確的錯誤訊息
              let errorMessage = '連接逐字稿服務失敗'
              if (error instanceof Error) {
                if (error.message.includes('會話狀態預檢失敗')) {
                  errorMessage = '會話狀態驗證失敗'
                } else if (error.message.includes('沒有活躍的會話')) {
                  errorMessage = '沒有可用的會話'
                } else if (error.message.includes('WebSocket 連接超時')) {
                  errorMessage = 'WebSocket 連接超時，請檢查網路連接'
                }
              }

              dispatch({ type: "SET_ERROR", payload: errorMessage })

              setTimeout(() => {
                if (stateMachineManager) {
                  stateMachineManager.getStateMachine().transition('ERROR_OCCURRED')
                }
              }, 100)
            }
          }
        });



        // 註冊副作用處理器 - STOP_RECORDING
        smManager.registerSideEffectHandler('STOP_RECORDING', {
          handleSideEffect: async (effect) => {
            console.log('🛑 [副作用] STOP_RECORDING: 停止錄音', effect);

            try {
              await recordingService.stopRecording()

              // 更新錄音狀態
              dispatch({ type: "SET_RECORDING", payload: false })
              dispatch({ type: "SET_RECORDING_TIME", payload: 0 })

              console.log('✅ [副作用] STOP_RECORDING 完成')
            } catch (error) {
              console.error('❌ [副作用] STOP_RECORDING 失敗:', error)
              dispatch({ type: "SET_ERROR", payload: '停止錄音失敗' })
            }
          }
        });

        // 註冊副作用處理器 - DISCONNECT_WEBSOCKET
        smManager.registerSideEffectHandler('DISCONNECT_WEBSOCKET', {
          handleSideEffect: async (effect) => {
            console.log('🔌 [副作用] DISCONNECT_WEBSOCKET: 斷開 WebSocket', effect);

            try {
              const currentSession = smManager.getStateMachine().getContext().session
              if (currentSession) {
                await transcriptService.disconnect(currentSession.id)
              }

              console.log('✅ [副作用] DISCONNECT_WEBSOCKET 完成')
            } catch (error) {
              console.error('❌ [副作用] DISCONNECT_WEBSOCKET 失敗:', error)
            }
          }
        });

        // 註冊副作用處理器 - FINISH_SESSION
        smManager.registerSideEffectHandler('FINISH_SESSION', {
          handleSideEffect: async (effect) => {
            console.log('✅ [副作用] FINISH_SESSION: 完成會話', effect);

            try {
              const currentSession = smManager.getStateMachine().getContext().session
              if (currentSession) {
                await sessionService.finishSession(currentSession.id)

                // 更新會話狀態
                dispatch({
                  type: "UPDATE_SESSION_STATUS",
                  payload: "completed" as SessionStatus
                })
              }

              console.log('✅ [副作用] FINISH_SESSION 完成')
            } catch (error) {
              console.error('❌ [副作用] FINISH_SESSION 失敗:', error)
              dispatch({ type: "SET_ERROR", payload: '完成會話失敗' })
            }
          }
        });

        // 註冊副作用處理器 - CLEAR_TRANSCRIPTS
        smManager.registerSideEffectHandler('CLEAR_TRANSCRIPTS', {
          handleSideEffect: (effect) => {
            console.log('🧹 [副作用] CLEAR_TRANSCRIPTS: 清除逐字稿', effect);
            dispatch({ type: "SET_TRANSCRIPT_ENTRIES", payload: [] })
          }
        });

        // 註冊副作用處理器 - SAVE_DRAFT
        smManager.registerSideEffectHandler('SAVE_DRAFT', {
          handleSideEffect: (effect) => {
            console.log('💾 [副作用] SAVE_DRAFT: 儲存草稿', effect);
            // 當前已有自動儲存機制，這裡可以觸發立即儲存
          }
        });

        // 註冊副作用處理器 - SHOW_ERROR
        smManager.registerSideEffectHandler('SHOW_ERROR', {
          handleSideEffect: (effect) => {
            console.log('🚨 [副作用] SHOW_ERROR: 顯示錯誤', effect);
            if (effect.type === 'SHOW_ERROR') {
              dispatch({ type: "SET_ERROR", payload: effect.message })
            }
          }
        });

        // 修復：新增 ERROR_CLEANUP 副作用處理器，確保錯誤時狀態完全重置
        smManager.registerSideEffectHandler('ERROR_CLEANUP', {
          handleSideEffect: (effect) => {
            console.log('🧹 [副作用] ERROR_CLEANUP: 清理錯誤狀態', effect);

            // 清理所有相關狀態
            dispatch({ type: "SET_SESSION", payload: null })
            dispatch({ type: "SET_RECORDING", payload: false })
            dispatch({ type: "SET_RECORDING_TIME", payload: 0 })

            console.log('✅ [副作用] ERROR_CLEANUP: 狀態清理完成')
          }
        });

        setStateMachineManager(smManager);

        console.log('✅ [AppStateProvider] 初始狀態載入完成:', {
          state: initialAppData.state,
          hasSession: !!initialAppData.session,
          transcriptCount: initialAppData.transcriptEntries.length,
          contentLength: initialAppData.editorContent.length
        })
      } catch (error) {
        console.error('❌ [AppStateProvider] 載入初始狀態失敗:', error)
      }
    }
  }, [servicesInitialized])

  // 錄音時間追蹤
  useEffect(() => {
    let intervalId: NodeJS.Timeout | null = null

    if (state.appData.isRecording && servicesInitialized) {
      intervalId = setInterval(() => {
        const recordingService = serviceContainer.resolve<IRecordingService>(SERVICE_KEYS.RECORDING_SERVICE)
        console.log('Context instance', recordingService)
        const recordingTime = recordingService.getRecordingTime()
        dispatch({ type: "SET_RECORDING_TIME", payload: recordingTime })
      }, 1000)
    }

    return () => {
      if (intervalId) {
        clearInterval(intervalId)
      }
    }
  }, [state.appData.isRecording, servicesInitialized])

  // 狀態持久化
  useEffect(() => {
    // 檢查是否在瀏覽器環境且狀態已初始化
    if (typeof window !== 'undefined' && state.appData) {
      try {
        // 延遲儲存，避免在初始載入時立即儲存
        const timeoutId = setTimeout(() => {
          InitialStateLoader.saveAppState(state.appData)
        }, 1000) // 1秒延遲

        return () => clearTimeout(timeoutId)
      } catch (error) {
        console.error('❌ [AppStateProvider] 狀態持久化失敗:', error)
      }
    }
  }, [state.appData])

  // 將狀態變更同步到狀態機
  useEffect(() => {
    if (stateMachineManager) {
      stateMachineManager.getStateMachine().updateContext({
        currentState: state.appData.state,
        isRecording: state.appData.isRecording,
        transcriptCount: state.appData.transcriptEntries.length,
        session: state.appData.session,
        error: state.error
      });
    }
  }, [state, stateMachineManager]);

  const transition = useCallback((trigger: StateTransitionTrigger) => {
    if (!stateMachineManager) {
      console.error("狀態機尚未初始化");
      return null;
    }
    const result = stateMachineManager.getStateMachine().transition(trigger);
    if (result.success) {
      dispatch({ type: 'SET_APP_STATE', payload: result.newState });
    }
    return result;
  }, [stateMachineManager]);

  const setState = useCallback((newState: AppState) => {
    dispatch({ type: "SET_STATE", payload: newState })
  }, [])

  const setRecording = useCallback((isRecording: boolean) => {
    dispatch({ type: "SET_RECORDING", payload: isRecording })
  }, [])

  const setRecordingTime = useCallback((time: number) => {
    dispatch({ type: "SET_RECORDING_TIME", payload: time })
  }, [])

  const setEditorContent = useCallback((content: string) => {
    dispatch({ type: "SET_EDITOR_CONTENT", payload: content })
  }, [])

  const setTranscriptEntries = useCallback((entries: TranscriptEntry[]) => {
    dispatch({ type: "SET_TRANSCRIPT_ENTRIES", payload: entries })
  }, [])

  const addTranscriptEntry = useCallback((entry: TranscriptEntry) => {
    dispatch({ type: "ADD_TRANSCRIPT_ENTRY", payload: entry })
  }, [])

  const setSession = useCallback((session: { id: string; status: SessionStatus; type: SessionType } | null) => {
    dispatch({ type: "SET_SESSION", payload: session })
  }, [])

  const updateSessionStatus = useCallback((status: SessionStatus) => {
    dispatch({ type: "UPDATE_SESSION_STATUS", payload: status })
  }, [])

  const resetState = useCallback(() => {
    dispatch({ type: "RESET_STATE" })
  }, [])

  const setLoading = useCallback((loading: boolean) => {
    dispatch({ type: "SET_LOADING", payload: loading })
  }, [])

  const setError = useCallback((error: string | null) => {
    dispatch({ type: "SET_ERROR", payload: error })
  }, [])

  const contextValue: AppStateContextValue = {
    appData: state.appData,
    isLoading: state.isLoading,
    error: state.error,
    dispatch,
    setState,
    setRecording,
    setRecordingTime,
    setEditorContent,
    setTranscriptEntries,
    addTranscriptEntry,
    setSession,
    updateSessionStatus,
    resetState,
    setLoading,
    setError,
    transition,
  }

  return React.createElement(
    AppStateContext.Provider,
    { value: contextValue },
    children
  )
}

export function useAppStateContext(): AppStateContextValue {
  const context = useContext(AppStateContext)
  if (!context) {
    throw new Error("useAppStateContext 必須在 AppStateProvider 內使用")
  }
  return context
}

export { AppStateContext }


# END FILE CONTENTS


# File: frontend/components/ui/input-otp.tsx

"use client"

import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }


# END FILE CONTENTS


# File: frontend/lib/services/simple-recording-service.ts

"use client"

import { BaseService } from './base-service'
import { IRecordingService, RecordingState } from './interfaces'
import { AdvancedAudioRecorder, AudioSegment, checkAdvancedAudioRecordingSupport } from '../advanced-audio-recorder'
import { RestAudioUploader, UploadSegmentResponse } from '../rest-audio-uploader'
import { getAudioChunkIntervalMs } from '../config'
import { toast } from '@/hooks/use-toast'

/**
 * SimpleRecordingService - 簡化錄音管理服務
 *
 * Phase 2.5 重構：使用 AdvancedAudioRecorder 修復 WebM Header 問題
 * 整合 AdvancedAudioRecorder + RestAudioUploader
 *
 * 特點：
 * - 使用 AdvancedAudioRecorder（雙 MediaRecorder 無縫切換策略）
 * - 使用 RestAudioUploader（REST API 上傳）
 * - 移除 ack/missing 重傳機制
 * - 簡化錯誤處理和狀態管理
 * - 支援失敗檔案暫存到 IndexedDB
 */
export class SimpleRecordingService extends BaseService implements IRecordingService {
    protected readonly serviceName = 'SimpleRecordingService'

    // 錄音器和上傳器引用
    private audioRecorder: AdvancedAudioRecorder | null = null
    private audioUploader: RestAudioUploader | null = null

    // 錄音狀態
    private recordingState: RecordingState = {
        isRecording: false,
        recordingTime: 0,
        currentSessionId: null,
        error: null
    }

    // 計時器
    private recordingTimer: ReturnType<typeof setInterval> | null = null
    private uploadedSegments = new Set<number>()
    private failedSegments = new Set<number>()

    // 在 class SimpleRecordingService 內部加上：
    public stream: MediaStream | null = null
    private sessionId: string | null = null
    private timerStart: number | null = null

    /**
     * 服務初始化
     */
    async initialize(): Promise<void> {
        this.logInfo('服務初始化開始')

        // 檢查瀏覽器支援度
        const supportCheck = await checkAdvancedAudioRecordingSupport()
        if (!supportCheck.isSupported) {
            const errorMessage = `音頻錄製不支援: ${supportCheck.error || '未知錯誤'}`
            this.logWarning('瀏覽器支援度檢查失敗', supportCheck.error)
            throw new Error(errorMessage)
        }

        this.logSuccess('瀏覽器支援度檢查通過')
        this.logSuccess('初始化完成')
    }

    /**
     * 服務清理
     */
    async cleanup(): Promise<void> {
        this.logInfo('服務清理開始')

        // 如果正在錄音，先停止
        if (this.recordingState.isRecording) {
            await this.stopRecording()
        }

        // 清理音頻錄製器
        if (this.audioRecorder) {
            this.audioRecorder.cleanup()
            this.audioRecorder = null
        }

        // 清理上傳器
        if (this.audioUploader) {
            this.audioUploader.cleanup()
            this.audioUploader = null
        }

        // 清理計時器
        this.clearRecordingTimer()

        // 重置狀態
        this.resetRecordingState()

        this.logSuccess('清理完成')
    }

    /**
     * 開始錄音
     */
    async startRecording(sessionId: string): Promise<void> {
        try {
            this.logInfo(`開始錄音 - sessionId: ${sessionId}`)

            // 如果已經在錄音，先停止
            if (this.recordingState.isRecording) {
                this.logWarning('已在錄音中，先停止現有錄音')
                await this.stopRecording()
            }

            this.sessionId = sessionId
            this.recordingState.currentSessionId = sessionId

            // 請求麥克風權限
            await this.ensureStarted()

            // 初始化錄音器和上傳器
            await this.initMediaRecorder()

            // 更新狀態
            this.recordingState.isRecording = true
            this.recordingState.error = null

            // 啟動計時器
            this.timerStart = Date.now()
            this.startRecordingTimer()

            this.logSuccess(`錄音已開始 - sessionId: ${sessionId}`)
        } catch (error) {
            const errorMessage = error instanceof Error ? error.message : '開始錄音失敗'
            this.recordingState.error = errorMessage
            this.handleError('開始錄音', error)
            throw error
        }
    }

    /**
     * 停止錄音
     */
    async stopRecording(): Promise<void> {
        this.logInfo('停止錄音')

        try {
            // 更新狀態
            this.recordingState.isRecording = false

            // 停止音頻錄製器
            if (this.audioRecorder) {
                this.audioRecorder.stop()
                this.logInfo('音頻錄製器已停止')
            }

            // 停止計時器
            this.clearRecordingTimer()

            // 清理音頻錄製器
            if (this.audioRecorder) {
                this.audioRecorder.cleanup()
                this.audioRecorder = null
            }

            this.logSuccess('錄音停止成功', {
                sessionId: this.recordingState.currentSessionId,
                recordingTime: this.recordingState.recordingTime,
                uploadedSegments: this.uploadedSegments.size,
                failedSegments: this.failedSegments.size
            })

        } catch (error) {
            this.recordingState.error = error instanceof Error ? error.message : '停止錄音失敗'
            this.handleError('停止錄音', error)
        }
    }

    /**
     * 取得當前錄音狀態
     */
    getRecordingState(): RecordingState {
        return { ...this.recordingState }
    }

    /**
     * 檢查是否正在錄音
     */
    isRecording(): boolean {
        return this.recordingState.isRecording
    }

    /**
     * 取得錄音時間（秒）
     */
    getRecordingTime(): number {
        return this.timerStart ? (Date.now() - this.timerStart) / 1000 | 0 : 0
    }

    /**
     * 設定音頻錄製器事件處理
     */
    private setupAudioRecorderEvents(): void {
        if (!this.audioRecorder) return

        // 處理錄製錯誤
        this.audioRecorder.onError((error: Error) => {
            this.logWarning('音頻錄製器錯誤', error.message)
            this.recordingState.error = error.message
        })
    }

    /**
     * 設定上傳器事件處理
     */
    private setupUploaderEvents(): void {
        if (!this.audioUploader) return

        // 處理上傳成功
        this.audioUploader.onUploadSuccess((seq: number, response: UploadSegmentResponse) => {
            this.uploadedSegments.add(seq)
            this.logInfo('音頻段落上傳成功', {
                sequence: seq,
                size: response.size,
                totalUploaded: this.uploadedSegments.size
            })
        })

        // 處理上傳錯誤
        this.audioUploader.onUploadError((seq: number, error: string) => {
            this.failedSegments.add(seq)
            this.logWarning('音頻段落上傳失敗', {
                sequence: seq,
                error,
                totalFailed: this.failedSegments.size
            })
        })

        // 處理暫存到本地
        this.audioUploader.onCacheStored((seq: number) => {
            this.logInfo('音頻段落已暫存到本地', {
                sequence: seq,
                message: '可稍後重新上傳'
            })
        })
    }

    /**
     * 處理音頻段落
     */
    private async handleAudioSegment(segment: any): Promise<void> {
        console.log('🎤 [SimpleRecordingService] 收到音頻段落', {
            sequence: segment.sequence,
            size: segment.blob.size,
            duration: segment.duration,
            timestamp: new Date().toISOString()
        })

        this.logInfo(`收到音頻段落 - sequence: ${segment.sequence}, size: ${segment.blob.size}, duration: ${segment.duration}`)

        // 使用 REST API 上傳
        if (this.audioUploader) {
            try {
                await this.audioUploader.uploadSegment(segment.sequence, segment.blob)
            } catch (error) {
                // 錯誤已由 audioUploader 處理（重試或暫存）
                console.log(`⚠️ [SimpleRecordingService] 段落 #${segment.sequence} 上傳處理中`)
            }
        } else {
            this.logWarning(`音頻上傳器未初始化 - sequence: ${segment.sequence}`)
        }
    }

    /**
     * 重新上傳暫存的失敗段落
     */
    async retryFailedUploads(): Promise<void> {
        this.logInfo('開始重新上傳暫存的失敗段落')

        if (this.audioUploader) {
            try {
                await this.audioUploader.retryFailedSegments()
                this.logSuccess('暫存段落重新上傳完成')
            } catch (error) {
                this.logWarning('重新上傳暫存段落失敗', error)
            }
        }
    }

    /**
     * 取得暫存的失敗段落數量
     */
    async getCachedSegmentsCount(): Promise<number> {
        if (this.audioUploader) {
            return await this.audioUploader.getCachedSegmentsCount()
        }
        return 0
    }

    /**
     * 啟動錄音計時器
     */
    private startRecordingTimer(): void {
        this.clearRecordingTimer()
        this.recordingState.recordingTime = 0

        console.log('⏱️ [SimpleRecordingService] 計時器啟動')
        this.recordingTimer = setInterval(() => {
            this.recordingState.recordingTime += 1

            // 每 30 秒記錄一次錄音時間
            if (this.recordingState.recordingTime % 30 === 0) {
                this.logInfo('錄音進行中', {
                    recordingTime: this.recordingState.recordingTime,
                    minutes: Math.floor(this.recordingState.recordingTime / 60),
                    uploadedSegments: this.uploadedSegments.size,
                    failedSegments: this.failedSegments.size
                })
            }
        }, 1000)
    }

    /**
     * 清理錄音計時器
     */
    private clearRecordingTimer(): void {
        if (this.recordingTimer) {
            clearInterval(this.recordingTimer)
            this.recordingTimer = null
            console.log('⏹️ [SimpleRecordingService] 計時器清除')
        }
    }

    /**
     * 重置錄音狀態
     */
    private resetRecordingState(): void {
        this.recordingState = {
            isRecording: false,
            recordingTime: 0,
            currentSessionId: null,
            error: null
        }
        this.uploadedSegments.clear()
        this.failedSegments.clear()
    }

    /**
     * 清理錄音相關資源
     */
    private async cleanupRecordingResources(): Promise<void> {
        try {
            // 停止音頻錄製器
            if (this.audioRecorder) {
                this.audioRecorder.stop()
                this.audioRecorder.cleanup()
                this.audioRecorder = null
            }

            // 清理上傳器
            if (this.audioUploader) {
                this.audioUploader.cleanup()
                this.audioUploader = null
            }

            // 清理計時器
            this.clearRecordingTimer()

            // 重置狀態
            this.recordingState.isRecording = false

            this.logInfo('錄音資源清理完成')
        } catch (error) {
            this.logWarning('清理錄音資源時發生錯誤', error)
        }
    }

    /**
     * 獲取服務詳細狀態
     */
    async getDetailedStatus(): Promise<SimpleRecordingServiceStatus> {
        const baseStatus = this.getStatus()
        const supportCheck = await checkAdvancedAudioRecordingSupport()
        const cachedCount = await this.getCachedSegmentsCount()

        return {
            ...baseStatus,
            recordingState: this.getRecordingState(),
            audioSupport: {
                supported: supportCheck.isSupported,
                errors: supportCheck.error ? [supportCheck.error] : []
            },
            audioRecorderState: this.audioRecorder?.recording ? 'recording' : 'idle',
            uploadStats: {
                uploaded: this.uploadedSegments.size,
                failed: this.failedSegments.size,
                cached: cachedCount
            }
        }
    }

    async requestPermission(): Promise<boolean> {
        try {
            this.stream = await navigator.mediaDevices.getUserMedia({ audio: true })
            return true
        } catch (e) {
            toast({ title: '需要麥克風權限才能錄音', variant: 'destructive' })
            return false
        }
    }

    private async ensureStarted() {
        if (!this.stream) await this.start()
    }

    /**
     * 初始化 MediaRecorder 和相關元件
     */
    private async initMediaRecorder(): Promise<void> {
        try {
            this.logInfo('初始化 MediaRecorder')

            if (!this.stream) {
                throw new Error('音訊串流未初始化')
            }

            if (!this.sessionId) {
                throw new Error('Session ID 未設定')
            }

            // 創建音頻錄製器
            const chunkInterval = (await import('../config')).getAudioChunkIntervalMs()
            const { AdvancedAudioRecorder } = await import('../advanced-audio-recorder')
            this.audioRecorder = new AdvancedAudioRecorder({
                segmentDuration: chunkInterval,
                mimeType: 'audio/webm;codecs=opus',
                audioBitsPerSecond: 128000
            })

            // 設定錄製器事件（錯誤處理）
            this.setupAudioRecorderEvents()

            // 創建上傳器
            const { RestAudioUploader } = await import('../rest-audio-uploader')
            this.audioUploader = new RestAudioUploader()
            this.audioUploader.setSessionId(this.sessionId)

            // 設定上傳器事件
            this.setupUploaderEvents()

            // 開始錄音並傳入段落處理 callback
            await this.audioRecorder.start(async (segment) => {
                await this.handleAudioSegment(segment)
            })

            this.logSuccess(`MediaRecorder 初始化完成並開始錄音 - sessionId: ${this.sessionId}, chunkInterval: ${chunkInterval}ms`)
        } catch (error) {
            const errorMessage = error instanceof Error ? error.message : '未知錯誤'
            this.logWarning(`初始化 MediaRecorder 失敗: ${errorMessage}`)
            throw error
        }
    }

    // 若有 sessionId 變動需求，可加上：
    private updateSessionId(newSessionId: string): void {
        this.sessionId = newSessionId
        this.recordingState.currentSessionId = newSessionId
        if (this.audioUploader) {
            this.audioUploader.setSessionId(newSessionId)
        }
    }
}

/**
 * SimpleRecordingService 詳細狀態介面
 */
export interface SimpleRecordingServiceStatus {
    serviceName: string
    isInitialized: boolean
    isRunning: boolean
    timestamp: string
    recordingState: RecordingState
    audioSupport: {
        supported: boolean
        errors: string[]
    }
    audioRecorderState: string
    uploadStats: {
        uploaded: number
        failed: number
        cached: number
    }
}


# END FILE CONTENTS


# File: app/api/notes.py

"""
StudyScriber Notes 管理 API 端點

實作筆記儲存、自動儲存與 UPSERT 邏輯
"""

from datetime import datetime
from uuid import UUID
from fastapi import APIRouter, Depends, HTTPException, status
from supabase import Client
import json

from app.db.database import get_supabase_client
from app.schemas.note import (
    NoteSaveRequest, NoteOut, NoteSaveResponse, NoteConflictError
)

# 建立路由器
router = APIRouter(prefix="/api", tags=["筆記管理"])


@router.put("/notes/{session_id}", response_model=NoteSaveResponse)
async def save_note(
    session_id: UUID,
    request: NoteSaveRequest,
    supabase: Client = Depends(get_supabase_client)
) -> NoteSaveResponse:
    """
    儲存筆記內容 (B-003)

    - 實作 UPSERT 邏輯：有則更新，無則建立
    - 時間戳管理：檢查客戶端時間戳避免覆蓋較新內容
    - 權限檢查：確保會話存在且可編輯
    - 自動更新會話的 updated_at 時間戳
    """
    try:
        # 檢查會話是否存在且可編輯
        session = await _ensure_session_editable(supabase, session_id)

        # 檢查是否已存在筆記
        existing_note = await _get_existing_note(supabase, session_id)

        if existing_note:
            # 更新現有筆記
            updated_note = await _update_note(supabase, existing_note, request)
        else:
            # 建立新筆記
            updated_note = await _create_note(supabase, session_id, request)

        # 更新會話時間戳
        await _update_session_timestamp(supabase, session_id)

        # 準備時間戳
        server_ts = datetime.fromisoformat(updated_note['updated_at'].replace('Z', '+00:00')) if 'Z' in updated_note['updated_at'] else datetime.fromisoformat(updated_note['updated_at'])

        return NoteSaveResponse(
            success=True,
            message="筆記已成功儲存",
            server_ts=server_ts,
            note=NoteOut.model_validate(updated_note)
        )

    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail={"error": "internal_error", "message": f"儲存筆記時發生錯誤: {str(e)}"}
        )


@router.get("/notes/{session_id}", response_model=NoteOut)
async def get_note(
    session_id: UUID,
    supabase: Client = Depends(get_supabase_client)
) -> NoteOut:
    """
    取得筆記內容

    - 用於前端載入現有筆記
    - 如果筆記不存在則返回空白筆記
    """
    try:
        # 檢查會話是否存在
        await _ensure_session_exists(supabase, session_id)

        # 查詢筆記
        note = await _get_existing_note(supabase, session_id)

        if not note:
            # 如果筆記不存在，返回空白筆記
            note = {
                'session_id': str(session_id),
                'content': "",
                'updated_at': datetime.utcnow().isoformat(),
                'client_ts': None
            }

        return NoteOut.model_validate(note)

    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail={"error": "internal_error", "message": f"取得筆記時發生錯誤: {str(e)}"}
        )


# 私有輔助函式

async def _ensure_session_exists(supabase: Client, session_id: UUID) -> dict:
    """確保會話存在"""
    response = supabase.table("sessions").select("*").eq("id", str(session_id)).limit(1).execute()

    if not response.data:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail={"error": "session_not_found", "message": "指定的會話不存在"}
        )

    return response.data[0]


async def _ensure_session_editable(supabase: Client, session_id: UUID) -> dict:
    """確保會話存在且可編輯"""
    session = await _ensure_session_exists(supabase, session_id)

    # 檢查會話狀態是否允許編輯
    if session.get('status') == 'error':
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail={
                "error": "session_not_editable",
                "message": f"會話狀態為 {session.get('status')}，無法編輯筆記"
            }
        )

    return session


async def _get_existing_note(supabase: Client, session_id: UUID) -> dict | None:
    """取得現有筆記"""
    response = supabase.table("notes").select("id, session_id, content, client_ts, created_at, updated_at").eq("session_id", str(session_id)).limit(1).execute()

    return response.data[0] if response.data else None


async def _update_note(supabase: Client, note: dict, request: NoteSaveRequest) -> dict:
    """更新現有筆記"""
    # 檢查時間戳衝突（如果提供客戶端時間戳）
    if request.client_ts:
        note_updated_at = datetime.fromisoformat(note['updated_at'].replace('Z', '+00:00'))
        if note_updated_at > request.client_ts:
            # 準備伺服器端筆記資料
            server_note_data = {
                'session_id': str(note['session_id']),
                'content': note['content'],
                'updated_at': note_updated_at,
                'client_ts': note.get('client_ts')
            }

            # 建立錯誤物件
            conflict_error = NoteConflictError(
                message="客戶端筆記版本較舊，請重新載入最新版本",
                server_note=NoteOut.model_validate(server_note_data),
                client_ts=request.client_ts,
                server_ts=note_updated_at
            )

            # 使用 model_dump_json 確保完全序列化
            error_detail_str = conflict_error.model_dump_json()
            error_detail = json.loads(error_detail_str)

            raise HTTPException(
                status_code=status.HTTP_409_CONFLICT,
                detail=error_detail
            )

    # 更新筆記內容
    update_data = {
        'content': request.content,
        'client_ts': request.client_ts.isoformat() if request.client_ts else None,
        'updated_at': datetime.utcnow().isoformat()
    }

    response = supabase.table("notes").update(update_data).eq("session_id", str(note['session_id'])).execute()

    if not response.data:
        raise HTTPException(status_code=500, detail="無法更新筆記")

    return response.data[0]


async def _create_note(supabase: Client, session_id: UUID, request: NoteSaveRequest) -> dict:
    """建立新筆記"""
    current_time = datetime.utcnow().isoformat()
    note_data = {
        'session_id': str(session_id),
        'content': request.content,
        'client_ts': request.client_ts.isoformat() if request.client_ts else None,
        'updated_at': current_time
    }

    response = supabase.table("notes").insert(note_data).execute()

    if not response.data:
        raise HTTPException(status_code=500, detail="無法建立筆記")

    return response.data[0]


async def _update_session_timestamp(supabase: Client, session_id: UUID) -> None:
    """更新會話時間戳"""
    update_data = {
        'updated_at': datetime.utcnow().isoformat()
    }

    supabase.table("sessions").update(update_data).eq("id", str(session_id)).execute()


# END FILE CONTENTS


# File: app/services/stt/base.py

from __future__ import annotations

import abc
from typing import Dict, Any
from uuid import UUID

__all__ = ["ISTTProvider"]

class ISTTProvider(abc.ABC):
    """語音轉文字 Provider 介面。所有轉錄服務需實作此介面。"""

    @abc.abstractmethod
    async def transcribe(self, webm: bytes, session_id: UUID, chunk_seq: int) -> Dict[str, Any]:
        """轉錄指定 WebM 音訊。

        Args:
            webm: 原始 WebM 音訊二進位資料。
            session_id: 會話 ID。
            chunk_seq: 切片序號。

        Returns:
            dict: 需包含 text, start_offset, end_offset 等欄位，前端保持一致。"""

    @abc.abstractmethod
    def name(self) -> str:
        """回傳 Provider 名稱 (例如 'whisper', 'gemini')"""

    @abc.abstractmethod
    def max_rpm(self) -> int:
        """API 速率限制：每分鐘最大請求數 (RateLimiter 用)"""


# END FILE CONTENTS


# File: main.py

"""
StudyScriber FastAPI 應用程式主入口

雲端筆記應用：邊錄邊轉錄，支援純筆記與錄音模式
"""

import os
import uvicorn
from contextlib import asynccontextmanager
from fastapi import FastAPI, HTTPException, WebSocket
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse, Response
from datetime import datetime
import logging

# Task 5: Prometheus 監控支援
try:
    from prometheus_client import generate_latest, CONTENT_TYPE_LATEST
    PROMETHEUS_AVAILABLE = True
except ImportError:
    PROMETHEUS_AVAILABLE = False

from app.db.database import auto_init_database, check_database_connection, check_tables_exist, get_database_stats, get_database_mode
from app.api.sessions import router as sessions_router
from app.api.notes import router as notes_router
from app.api.segments import router as segments_router
from app.ws.upload_audio import router as upload_audio_router
from app.ws.transcript_feed import router as transcript_feed_router
from app.core.ffmpeg import check_ffmpeg_health
from app.core.config import settings
from app.core.container import container
from app.services.stt.factory import get_provider
from app.services.azure_openai_v2 import queue_manager

# 配置日誌
logging.basicConfig(level=settings.LOG_LEVEL, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    應用程式生命週期管理

    啟動時初始化資料庫，關閉時清理資源
    """
    # 啟動時執行
    logger.info("🚀 StudyScriber 正在啟動...")
    check_ffmpeg_health()
    await check_database_connection()

    # Task 3: 啟動隊列管理器
    try:
        await queue_manager.start_workers()
        logger.info("✅ 轉錄隊列管理器啟動成功")
    except Exception as e:
        logger.error(f"❌ 隊列管理器啟動失敗: {e}")

    yield

    # 關閉時執行
    logger.info("🔄 StudyScriber 正在關閉...")

    # Task 3: 停止隊列管理器
    try:
        await queue_manager.stop_workers()
        logger.info("✅ 轉錄隊列管理器已停止")
    except Exception as e:
        logger.warning(f"⚠️ 隊列管理器停止時發生錯誤: {e}")

# 建立 FastAPI 應用程式
app = FastAPI(
    title="StudyScriber API",
    description="雲端筆記應用：邊錄邊轉錄，支援純筆記與錄音模式",
    version="0.1.0",
    lifespan=lifespan
)

# CORS 設定
cors_origins = os.getenv("CORS_ORIGINS", "http://localhost:3000").split(",")
app.add_middleware(
    CORSMiddleware,
    allow_origins=cors_origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# 註冊路由
app.include_router(sessions_router)
app.include_router(notes_router)
app.include_router(segments_router)
app.include_router(upload_audio_router)
app.include_router(transcript_feed_router)


@app.get("/")
async def root():
    """根路由 - API 狀態檢查"""
    return {
        "message": "StudyScriber API is running",
        "version": "0.1.0",
        "status": "healthy"
    }


@app.get("/debug/container")
async def debug_container():
    """除錯端點 - 檢查 provider 狀態"""
    try:
        # 查詢 provider 狀態
        # 這裡僅示範查詢一個 session（可根據實際需求調整）
        from uuid import UUID
        test_session_id = UUID("00000000-0000-0000-0000-000000000000")  # TODO: 改為實際 session id
        provider = get_provider(test_session_id)
        return {
            "status": "success",
            "provider": provider.name(),
            "class_name": type(provider).__name__,
        }
    except Exception as e:
        return {
            "status": "error",
            "error": str(e)
        }


@app.get("/health")
async def health_check():
    """健康檢查端點"""
    try:
        db_ok = await check_database_connection()
        if not db_ok:
            raise HTTPException(status_code=503, detail="Database connection failed")
        tables_ok = await check_tables_exist()
        if not tables_ok:
            raise HTTPException(status_code=503, detail="Database tables missing")
        ffmpeg_health = check_ffmpeg_health()
        # 查詢 provider 狀態
        from uuid import UUID
        test_session_id = UUID("00000000-0000-0000-0000-000000000000")  # TODO: 改為實際 session id
        try:
            provider = get_provider(test_session_id)
            provider_available = provider is not None
        except Exception as e:
            logger.warning(f"Provider 解析失敗: {e}")
            provider_available = False
        return {
            "status": "healthy",
            "database": "connected",
            "tables": "available",
            "services": {
                "ffmpeg": {
                    "available": ffmpeg_health['ffmpeg_available'],
                    "status": ffmpeg_health['status'],
                    "version": ffmpeg_health.get('version', 'N/A'),
                    "processes": {
                        "active": ffmpeg_health.get('active_processes', 0),
                        "pooled": ffmpeg_health.get('pooled_processes', 0),
                        "max": ffmpeg_health.get('max_processes', 3)
                    }
                },
                "provider": {
                    "available": provider_available,
                    "service": provider.name() if provider_available else "Disabled"
                }
            }
        }
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=503, detail=f"Health check failed: {str(e)}")


@app.get("/database")
async def database_info():
    """資料庫資訊端點"""
    try:
        # 取得資料庫統計
        db_stats = await get_database_stats()

        # 取得連接模式
        connection_mode = get_database_mode()

        # 檢查連接狀態
        connection_ok = await check_database_connection()

        # 檢查表格狀態
        tables_ok = await check_tables_exist()

        return {
            "status": "success",
            "timestamp": datetime.utcnow().isoformat(),
            "connection": {
                "mode": connection_mode,
                "status": "connected" if connection_ok else "disconnected",
                "tables_available": tables_ok
            },
            "statistics": db_stats
        }

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"無法取得資料庫資訊: {str(e)}")


@app.get("/performance")
async def performance_stats():
    """效能統計端點"""
    try:
        # 取得轉錄服務效能統計
        # 這裡需要根據實際的 provider 架構來調整，
        # 例如，如果 provider 本身有 get_performance_report 方法
        # 則可以從 provider 獲取，否則返回預設值。
        # 目前，我們只保留了 queue_manager 的啟動/關閉，
        # 所以這裡返回一個預設值。
        return {
            "status": "success",
            "timestamp": datetime.utcnow().isoformat(),
            "transcription_service": {"status": "no_stats_available"},
            "ffmpeg_service": {
                "status": "N/A",
                "available": False,
                "active_processes": 0,
                "pooled_processes": 0
            }
        }

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"無法取得效能統計: {str(e)}")


@app.get("/debug/queue")
async def debug_queue():
    """Task 3 & 4: 除錯端點 - 檢查隊列狀態"""
    try:
        stats = queue_manager.get_stats()
        return {
            "status": "success",
            "queue_stats": stats,
            "timestamp": datetime.utcnow().isoformat()
        }
    except Exception as e:
        return {
            "status": "error",
            "queue_stats": {
                "error": str(e)
            }
        }


@app.get("/metrics")
async def metrics():
    """Task 5: Prometheus 監控指標端點"""
    if not PROMETHEUS_AVAILABLE:
        raise HTTPException(
            status_code=503,
            detail="Prometheus metrics not available - prometheus-client not installed"
        )

    try:
        # 生成 Prometheus 格式的監控指標
        metrics_data = generate_latest()
        return Response(
            content=metrics_data,
            media_type=CONTENT_TYPE_LATEST,
            headers={
                "Content-Type": CONTENT_TYPE_LATEST,
                "Cache-Control": "no-cache, no-store, must-revalidate",
                "Pragma": "no-cache",
                "Expires": "0"
            }
        )
    except Exception as e:
        logger.error(f"Failed to generate metrics: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Failed to generate metrics: {str(e)}"
        )


# 全域例外處理器
@app.exception_handler(Exception)
async def global_exception_handler(request, exc):
    """全域例外處理"""
    return JSONResponse(
        status_code=500,
        content={
            "error": "Internal server error",
            "message": str(exc),
            "path": str(request.url)
        }
    )


if __name__ == "__main__":
    # 設置 workers=1 確保在單一進程中運行，
    # 這對於使用內存存儲 WebSocket 連接狀態至關重要。
    # 多進程會導致每個進程有獨立的 ConnectionManager 實例。
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        workers=1
    )


# END FILE CONTENTS


# File: frontend/playwright.config.ts

import { defineConfig, devices } from '@playwright/test'

export default defineConfig({
    testDir: '../tests/frontend',
    outputDir: '../tests/frontend/test-results',
    timeout: 60000,
    use: {
        headless: true,
        baseURL: 'http://localhost:3100',
    },
    webServer: {
        command: 'pnpm dev --port 3100',
        url: 'http://localhost:3100',
        timeout: 120000,
        reuseExistingServer: !process.env.CI,
        cwd: '.',
    },
    projects: [
        {
            name: 'chromium',
            use: { ...devices['Desktop Chrome'] },
        },
    ],
})


# END FILE CONTENTS


# File: frontend/components/recording-waiting-state.tsx

"use client"

import { useState, useCallback } from "react"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Button } from "@/components/ui/button"
import { Square, AlertCircle } from "lucide-react"
import { Alert, AlertDescription } from "@/components/ui/alert"
import type { TranscriptEntry } from "../types/app-state"

interface RecordingWaitingStateProps {
    recordingTime: number
    onStopRecording: () => void
    transcriptEntries: TranscriptEntry[]
    error?: string | null
}

export function RecordingWaitingState({
    recordingTime,
    onStopRecording,
    transcriptEntries,
    error
}: RecordingWaitingStateProps) {
    const [isAutoScrollLocked, setIsAutoScrollLocked] = useState(true)

    const toggleAutoScrollLock = useCallback(() => {
        setIsAutoScrollLocked(prev => !prev)
    }, [])

    const formatTime = (seconds: number) => {
        const mins = Math.floor(seconds / 60)
        const secs = seconds % 60
        return `${mins.toString().padStart(2, "0")}:${secs.toString().padStart(2, "0")}`
    }

    return (
        <div className="h-full flex flex-col">
            <ScrollArea className="flex-1">
                {error && (
                    <Alert variant="destructive" className="m-4">
                        <AlertCircle className="h-4 w-4" />
                        <AlertDescription>{error}</AlertDescription>
                    </Alert>
                )}

                {transcriptEntries.length > 0 ? (
                    <div className="p-4 space-y-4">
                        {transcriptEntries.map((entry, index) => (
                            <div key={index} className="flex gap-4 text-sm">
                                <span className="text-muted-foreground font-mono">{entry.time}</span>
                                <span className="flex-1">{entry.text}</span>
                            </div>
                        ))}
                    </div>
                ) : (
                    <div className="flex flex-col items-center justify-center h-full p-8 text-muted-foreground text-center space-y-2">
                        <div className="text-sm">
                            Recording… {formatTime(recordingTime)}
                        </div>
                        <div className="text-xs">
                            {error ? "轉錄過程中發生錯誤" : "轉錄中"}
                        </div>
                    </div>
                )}
            </ScrollArea>

            <div className="p-4 border-t border-border flex justify-end">
                <Button onClick={onStopRecording} variant="destructive" size="sm" className="flex items-center gap-2">
                    <Square className="w-4 h-4" />
                    Stop
                </Button>
            </div>
        </div>
    )
}


# END FILE CONTENTS


# File: frontend/e2e/service-layer-integration.spec.ts

import { test, expect } from '@playwright/test'

/**
 * 服務層整合測試 - 完整驗證重構後的系統
 */

test.describe('服務層整合測試', () => {
    let consoleLogs: string[] = []
    let consoleErrors: string[] = []

    test.beforeEach(async ({ page }) => {
        consoleLogs = []
        consoleErrors = []

        // 監聽 console 輸出
        page.on('console', (msg) => {
            const text = `[${msg.type()}] ${msg.text()}`
            console.log(`🖥️  ${text}`)

            if (msg.type() === 'error') {
                consoleErrors.push(text)
            } else {
                consoleLogs.push(text)
            }
        })

        page.on('pageerror', (error) => {
            console.log(`❌ Page Error: ${error.message}`)
            consoleErrors.push(`PAGE_ERROR: ${error.message}`)
        })

        console.log('🚀 導航到應用...')
        await page.goto('/')
        await page.waitForLoadState('networkidle')
        console.log('✅ 頁面載入完成')
    })

    test('基礎架構驗證', async ({ page }) => {
        console.log('\n🔧 驗證服務層基礎架構...')

        await expect(page.locator('body')).toBeVisible()
        await page.waitForTimeout(3000)

        const result = await page.evaluate(() => ({
            hasWindow: typeof window !== 'undefined',
            windowKeys: Object.keys(window).length,
            appElements: document.querySelectorAll('[id*="root"], main, .app').length
        }))

        console.log('📊 基礎檢查:', result)
        console.log(`📊 Console Logs: ${consoleLogs.length}`)
        console.log(`❌ Errors: ${consoleErrors.length}`)
    })

    test('錄音功能完整測試', async ({ page }) => {
        console.log('\n🎤 測試錄音功能...')

        await page.context().grantPermissions(['microphone'])

        const buttons = await page.locator('button').all()
        console.log(`📊 找到 ${buttons.length} 個按鈕`)

        for (const button of buttons.slice(0, 3)) {
            const text = await button.textContent()
            const isVisible = await button.isVisible()
            const isEnabled = await button.isEnabled()

            console.log(`📋 按鈕: "${text}" - 可見:${isVisible}, 啟用:${isEnabled}`)

            if (isVisible && isEnabled && text?.trim()) {
                console.log(`🔄 點擊: "${text}"`)
                const logsBefore = consoleLogs.length

                await button.click()
                await page.waitForTimeout(2000)

                const newLogs = consoleLogs.slice(logsBefore)
                console.log(`📝 新增 ${newLogs.length} 條日誌`)
                newLogs.forEach(log => console.log(`   ${log}`))
            }
        }
    })

    test('服務層日誌分析', async ({ page }) => {
        console.log('\n🔍 分析服務層日誌...')

        await page.waitForTimeout(2000)

        // 觸發一些互動
        const elements = page.locator('button, input, [role="button"]')
        const count = await elements.count()

        for (let i = 0; i < Math.min(3, count); i++) {
            try {
                await elements.nth(i).click()
                await page.waitForTimeout(500)
            } catch { }
        }

        // 分析日誌
        const serviceLogs = consoleLogs.filter(log =>
            log.toLowerCase().includes('service') ||
            log.toLowerCase().includes('container')
        )

        const recordingLogs = consoleLogs.filter(log =>
            log.toLowerCase().includes('record') ||
            log.toLowerCase().includes('audio')
        )

        const stateLogs = consoleLogs.filter(log =>
            log.toLowerCase().includes('state') ||
            log.toLowerCase().includes('action')
        )

        console.log('\n📊 日誌分析:')
        console.log(`   服務層: ${serviceLogs.length}`)
        console.log(`   錄音: ${recordingLogs.length}`)
        console.log(`   狀態: ${stateLogs.length}`)
        console.log(`   總計: ${consoleLogs.length}`)
        console.log(`   錯誤: ${consoleErrors.length}`)

        if (serviceLogs.length > 0) {
            console.log('\n🔧 服務層日誌:')
            serviceLogs.forEach(log => console.log(`   ${log}`))
        }

        if (recordingLogs.length > 0) {
            console.log('\n🎤 錄音日誌:')
            recordingLogs.forEach(log => console.log(`   ${log}`))
        }
    })

    test.afterEach(async () => {
        console.log('\n📋 測試總結:')
        console.log(`📊 Console Logs: ${consoleLogs.length}`)
        console.log(`❌ Errors: ${consoleErrors.length}`)

        if (consoleErrors.length > 0) {
            console.log('\n❌ 錯誤詳情:')
            consoleErrors.forEach(error => console.log(`   ${error}`))
        }

        console.log('🏁 測試完成\n' + '='.repeat(50))
    })
})


# END FILE CONTENTS


# File: frontend/styles/globals.css

@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}


# END FILE CONTENTS


# File: app/api/__init__.py



# END FILE CONTENTS


# File: frontend/__tests__/integration/state-transitions.test.ts

import { beforeEach, describe, expect, test, vi } from 'vitest'
import { StateMachine } from '../../lib/state-machine'
import { featureFlagManager } from '../../lib/feature-flags'
import type { AppState } from '../../types/app-state'
import type { StateTransitionContext } from '../../types/state-transitions'

// Mock localStorage
const localStorageMock = {
    getItem: vi.fn(),
    setItem: vi.fn(),
    removeItem: vi.fn(),
    clear: vi.fn(),
}

Object.defineProperty(window, 'localStorage', {
    value: localStorageMock
})

describe('狀態轉換測試', () => {
    beforeEach(() => {
        vi.clearAllMocks()
        featureFlagManager.reset()
        featureFlagManager.enable('useNewStateManagement')
        localStorageMock.getItem.mockReturnValue(null)
    })

    describe('基本狀態轉換', () => {
        test('應該支援 default → recording_waiting 轉換', () => {
            const stateMachine = new StateMachine('default')

            const canTransition = stateMachine.canTransition('START_RECORDING')
            expect(canTransition).toBe(true)

            const newState = stateMachine.transition('START_RECORDING')
            expect(newState).toBe('recording_waiting')
        })

        test('應該支援 recording_waiting → recording_active 轉換', () => {
            const stateMachine = new StateMachine('recording_waiting')

            const canTransition = stateMachine.canTransition('RECORDING_STARTED')
            expect(canTransition).toBe(true)

            const newState = stateMachine.transition('RECORDING_STARTED')
            expect(newState).toBe('recording_active')
        })

        test('應該支援 recording_active → processing 轉換', () => {
            const stateMachine = new StateMachine('recording_active')

            const canTransition = stateMachine.canTransition('STOP_RECORDING')
            expect(canTransition).toBe(true)

            const newState = stateMachine.transition('STOP_RECORDING')
            expect(newState).toBe('processing')
        })

        test('應該支援 processing → finished 轉換', () => {
            const stateMachine = new StateMachine('processing')

            const canTransition = stateMachine.canTransition('PROCESSING_COMPLETE')
            expect(canTransition).toBe(true)

            const newState = stateMachine.transition('PROCESSING_COMPLETE')
            expect(newState).toBe('finished')
        })
    })

    describe('狀態轉換限制', () => {
        test('不應該允許無效的狀態轉換', () => {
            const stateMachine = new StateMachine('default')

            // 不能直接從 default 跳到 recording_active
            const canTransition = stateMachine.canTransition('RECORDING_STARTED')
            expect(canTransition).toBe(false)

            // 嘗試無效轉換應該拋出錯誤
            expect(() => {
                stateMachine.transition('RECORDING_STARTED')
            }).toThrow()
        })

        test('finished 狀態應該只能重置到 default', () => {
            const stateMachine = new StateMachine('finished')

            // 只能重置
            expect(stateMachine.canTransition('RESET')).toBe(true)
            expect(stateMachine.canTransition('START_RECORDING')).toBe(false)
            expect(stateMachine.canTransition('STOP_RECORDING')).toBe(false)

            const newState = stateMachine.transition('RESET')
            expect(newState).toBe('default')
        })

        test('應該支援從任何狀態重置到 default', () => {
            const states: AppState[] = ['default', 'recording_waiting', 'recording_active', 'processing', 'finished']

            states.forEach(state => {
                const stateMachine = new StateMachine(state)
                expect(stateMachine.canTransition('RESET')).toBe(true)
                expect(stateMachine.transition('RESET')).toBe('default')
            })
        })
    })

    describe('完整狀態流程', () => {
        test('應該支援完整的錄音流程', () => {
            const stateMachine = new StateMachine('default')

            // 完整流程：default → recording_waiting → recording_active → processing → finished
            expect(stateMachine.getCurrentState()).toBe('default')

            // 開始錄音
            const waitingState = stateMachine.transition('START_RECORDING')
            expect(waitingState).toBe('recording_waiting')

            // 錄音開始
            const activeState = stateMachine.transition('RECORDING_STARTED')
            expect(activeState).toBe('recording_active')

            // 停止錄音
            const processingState = stateMachine.transition('STOP_RECORDING')
            expect(processingState).toBe('processing')

            // 處理完成
            const finishedState = stateMachine.transition('PROCESSING_COMPLETE')
            expect(finishedState).toBe('finished')

            // 重置
            const resetState = stateMachine.transition('RESET')
            expect(resetState).toBe('default')
        })

        test('應該支援筆記模式流程', () => {
            const stateMachine = new StateMachine('default')

            // 筆記模式：default → finished (直接完成)
            expect(stateMachine.getCurrentState()).toBe('default')

            const finishedState = stateMachine.transition('FINISH_SESSION')
            expect(finishedState).toBe('finished')
        })
    })

    describe('錯誤恢復', () => {
        test('應該支援錯誤狀態恢復', () => {
            const stateMachine = new StateMachine('recording_active')

            // 從錄音中發生錯誤
            const errorState = stateMachine.transition('ERROR')
            expect(errorState).toBe('default')
        })

        test('應該支援會話升級', () => {
            const stateMachine = new StateMachine('default')

            // 升級到錄音模式
            const upgradedState = stateMachine.transition('UPGRADE_TO_RECORDING')
            expect(upgradedState).toBe('recording_waiting')
        })
    })

    describe('並發狀態變更', () => {
        test('狀態機應該是線程安全的', () => {
            const stateMachine = new StateMachine('default')
            const results: AppState[] = []

            // 模擬並發轉換
            const transitions = [
                'START_RECORDING',
                'RESET',
                'START_RECORDING',
                'RESET'
            ]

            transitions.forEach(trigger => {
                try {
                    const newState = stateMachine.transition(trigger as any)
                    results.push(newState)
                } catch (error) {
                    // 某些轉換可能失敗，這是預期的
                }
            })

            // 最後狀態應該是有效的
            const finalState = stateMachine.getCurrentState()
            const validStates: AppState[] = ['default', 'recording_waiting', 'recording_active', 'processing', 'finished']
            expect(validStates).toContain(finalState)
        })
    })

    describe('狀態歷史', () => {
        test('應該記錄狀態轉換歷史', () => {
            const stateMachine = new StateMachine('default')

            stateMachine.transition('START_RECORDING')
            stateMachine.transition('RECORDING_STARTED')
            stateMachine.transition('STOP_RECORDING')

            const history = stateMachine.getHistory()
            expect(history).toHaveLength(4) // 包含初始狀態
            expect(history[0]).toBe('default')
            expect(history[1]).toBe('recording_waiting')
            expect(history[2]).toBe('recording_active')
            expect(history[3]).toBe('processing')
        })

        test('應該支援回到上一個狀態', () => {
            const stateMachine = new StateMachine('default')

            stateMachine.transition('START_RECORDING')
            stateMachine.transition('RECORDING_STARTED')

            const canGoBack = stateMachine.canGoBack()
            expect(canGoBack).toBe(true)

            const previousState = stateMachine.goBack()
            expect(previousState).toBe('recording_waiting')
            expect(stateMachine.getCurrentState()).toBe('recording_waiting')
        })
    })
})


# END FILE CONTENTS


# File: frontend/lib/interfaces.ts

export interface ISessionService {
    ensureFreshRecordingSession(): Promise<void>
}


# END FILE CONTENTS


# File: frontend/lib/app-state-reducer.ts

import { AppStateAction, initialAppData } from "../types/app-state-context"
import { AppData } from "../types/app-state"

export interface AppStateReducerState {
  appData: AppData
  isLoading: boolean
  error: string | null
}

export function appStateReducer(
  state: AppStateReducerState,
  action: AppStateAction
): AppStateReducerState {
  console.log('🔄 [AppStateReducer] Action:', action.type, action)

  switch (action.type) {
    case "SET_STATE":
    case "SET_APP_STATE":  // 別名，為了向後相容
      return {
        ...state,
        appData: {
          ...state.appData,
          state: action.payload,
        },
      }

    case "SET_RECORDING":
      return {
        ...state,
        appData: {
          ...state.appData,
          isRecording: action.payload,
        },
      }

    case "SET_RECORDING_TIME":
      console.log('⏰ [AppStateReducer] 更新錄音時間:', action.payload)
      return {
        ...state,
        appData: {
          ...state.appData,
          recordingTime: action.payload,
        },
      }

    case "SET_EDITOR_CONTENT":
      return {
        ...state,
        appData: {
          ...state.appData,
          editorContent: action.payload,
        },
      }

    case "SET_TRANSCRIPT_ENTRIES":
      return {
        ...state,
        appData: {
          ...state.appData,
          transcriptEntries: action.payload,
        },
      }

    case "ADD_TRANSCRIPT_ENTRY":
      return {
        ...state,
        appData: {
          ...state.appData,
          transcriptEntries: [...state.appData.transcriptEntries, action.payload],
        },
      }

    case "SET_SESSION":
      return {
        ...state,
        appData: {
          ...state.appData,
          session: action.payload,
        },
      }

    case "UPDATE_SESSION_STATUS":
      if (!state.appData.session) {
        console.warn('🔄 [AppStateReducer] 試圖更新不存在的 session 狀態')
        return state
      }
      return {
        ...state,
        appData: {
          ...state.appData,
          session: {
            ...state.appData.session,
            status: action.payload,
          },
        },
      }

    case "RESET_STATE":
      return {
        ...state,
        appData: initialAppData,
        error: null,
      }

    case "SET_LOADING":
      return {
        ...state,
        isLoading: action.payload,
      }

    case "SET_ERROR":
      return {
        ...state,
        error: action.payload,
      }

    case "CLEAR_ERROR":
      return {
        ...state,
        error: null,
      }

    default:
      console.warn('🔄 [AppStateReducer] 未知的 action type:', action)
      return state
  }
}


# END FILE CONTENTS


# File: frontend/components/SessionLoadingOverlay.tsx

import React from 'react'

export default function SessionLoadingOverlay() {
    return (
        <div className="fixed inset-0 flex items-center justify-center bg-white/60 z-50">
            <div className="animate-spin rounded-full h-12 w-12 border-y-4 border-gray-400"></div>
            <p className="ml-4 text-gray-700">準備錄音會話中…</p>
        </div>
    )
}


# END FILE CONTENTS


# File: frontend/lib/app-store-zustand.ts

"use client"

import { create } from 'zustand'
import { serviceContainer, SERVICE_KEYS } from './services'
import type { ISessionService } from './services/interfaces'
import { AppState, SessionStatus, SessionType, TranscriptEntry } from '../types/app-state'
import { TranscriptManager } from './transcript-manager'

/**
 * App 狀態介面
 */
import { STTProvider } from './api'

interface AppStoreState {
  // 應用狀態
  appState: AppState
  isLoading: boolean
  error: string | null

  // 會話狀態
  session: {
    id: string
    status: SessionStatus
    type: SessionType
  } | null

  // 錄音狀態
  isRecording: boolean
  recordingTime: number
  recordingStartTime: number | null

  // 內部計時器
  timerId: NodeJS.Timeout | null

  // 逐字稿狀態
  transcriptEntries: TranscriptEntry[]

  // 編輯器狀態
  editorContent: string

  // STT Provider 狀態
  sttProvider: STTProvider
}

/**
 * App 操作介面
 */
interface AppStoreActions {
  // 核心業務操作
  startRecording: (title?: string) => Promise<void>
  stopRecording: () => Promise<void>

  // 狀態管理
  setState: (appState: AppState) => void
  setSession: (session: AppStoreState['session']) => void
  setRecording: (isRecording: boolean) => void
  setError: (error: string | null) => void
  clearError: () => void

  // 編輯器操作
  updateEditorContent: (content: string) => void
  addTranscriptEntry: (entry: TranscriptEntry) => void

  // 計時器操作
  startTimer: () => void
  stopTimer: () => void
  cleanup: () => void

  // 錄音時間操作
  setRecordingStart: (timestamp: number) => void

  // 狀態重置
  resetState: () => void

  // STT Provider 操作
  setSttProvider: (provider: STTProvider) => void
}

/**
 * 完整的 Store 類型
 */
type AppStore = AppStoreState & AppStoreActions

/**
 * 基於 Zustand 的 App Store
 *
 * 實現用戶要求的會話衝突處理策略：
 * 1. startRecording 時優先調用 ensureRecordingSession
 * 2. 優雅處理 409 衝突，自動載入現有會話
 * 3. 提供清晰的狀態管理和錯誤處理
 */
export const useAppStore = create<AppStore>((set, get) => ({
  // === 初始狀態 ===
  appState: 'default' as AppState,
  isLoading: false,
  error: null,
  session: null,
  isRecording: false,
  recordingTime: 0,
  recordingStartTime: null,
  timerId: null,
  transcriptEntries: [],
  editorContent: '',
  sttProvider: 'gpt4o' as STTProvider,

  // === 核心業務操作 ===

  /**
   * 開始錄音 - 使用雙 WebSocket 完整錄音流程
   */
  startRecording: async (title?: string) => {
    console.log('🎤 [AppStore] 開始雙 WebSocket 錄音流程')

    // 1. 設置等待狀態
    set({
      appState: 'recording_waiting',
      isLoading: true,
      error: null
    })

    try {
      // 2. 獲取當前的錄音開始時間（由 onstart 事件設置）
      const currentState = get()
      const startTs = currentState.recordingStartTime

      const startTsDate = typeof startTs === 'number' ? new Date(startTs as number).toISOString() : 'N/A'
      const hasStartTime = typeof startTs === 'number'

      console.log('🕐 [AppStore] 錄音開始時間:', {
        startTs,
        startTsDate,
        hasStartTime
      })

      // 3. 獲取 RecordingFlowService
      const { RecordingFlowService } = await import('./services/recording-flow-service')
      const recordingFlowService = new RecordingFlowService()
      await recordingFlowService.initialize()

      // 4. 啟動完整錄音流程（包含雙 WebSocket），傳遞開始時間戳和 STT Provider
      console.log('🔍 [AppStore] 啟動完整錄音流程...')
      const sessionResponse = await recordingFlowService.startRecordingFlow(
        title || `錄音筆記 ${new Date().toLocaleString()}`,
        undefined, // content
        startTs,   // 傳遞錄音開始時間戳
        currentState.sttProvider // 傳遞 STT Provider
      )

      console.log('✅ [AppStore] 雙 WebSocket 錄音流程啟動成功:', {
        sessionId: sessionResponse.id,
        withStartTs: !!startTs
      })

      // 5. 更新狀態，保持等待逐字稿
      set({
        appState: 'recording_waiting',
        session: {
          id: sessionResponse.id,
          status: sessionResponse.status as SessionStatus,
          type: sessionResponse.type as SessionType
        },
        isRecording: true,
        isLoading: false
      })

      // 6. 不需要再次啟動計時器，因為已經在 setRecordingStart 中啟動了
      console.log('🕐 [AppStore] 計時器已在 onstart 事件中啟動，錄音時間:', currentState.recordingTime)

        // 7. 儲存服務實例供停止時使用
        ; (globalThis as any).currentRecordingFlowService = recordingFlowService

      console.log('🎯 [AppStore] 雙 WebSocket 錄音模式啟動成功')

    } catch (error) {
      // 8. 錯誤處理
      const errorMessage = error instanceof Error ? error.message : '開始錄音失敗'
      console.error('❌ [AppStore] 無法開始錄音:', error)

      // 清理計時器（如果已啟動）
      get().stopTimer()

      set({
        appState: 'default',
        error: errorMessage,
        isLoading: false,
        session: null,
        isRecording: false
      })

      console.error('🚨 [AppStore] 雙 WebSocket 錄音啟動失敗，請重試')
    }
  },

  /**
   * 停止錄音 - 停止雙 WebSocket 錄音流程
   */
  stopRecording: async () => {
    console.log('🛑 [AppStore] 停止雙 WebSocket 錄音流程')

    // 停止計時器
    get().stopTimer()

    set({
      appState: 'processing',
      isLoading: true
    })

    try {
      // 獲取並調用 RecordingFlowService
      const recordingFlowService = (globalThis as any).currentRecordingFlowService

      if (recordingFlowService) {
        await recordingFlowService.stopRecordingFlow()
        await recordingFlowService.cleanup()

          // 清理全局引用
          ; (globalThis as any).currentRecordingFlowService = null

        console.log('✅ [AppStore] RecordingFlowService 停止成功')
      } else {
        console.warn('⚠️ [AppStore] 沒有找到活躍的 RecordingFlowService')
      }

      set({
        appState: 'finished',
        isRecording: false,
        isLoading: false
      })

      console.log('✅ [AppStore] 雙 WebSocket 錄音停止成功')

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : '停止錄音失敗'
      console.error('❌ [AppStore] 停止錄音失敗:', error)

      set({
        error: errorMessage,
        isLoading: false
      })
    }
  },

  // === 狀態管理操作 ===

  setState: (appState: AppState) => {
    set({ appState })
  },

  setSession: (session: AppStoreState['session']) => {
    set({ session })
  },

  setRecording: (isRecording: boolean) => {
    set({ isRecording })
  },

  setError: (error: string | null) => {
    set({ error })
  },

  clearError: () => {
    set({ error: null })
  },

  // === STT Provider 操作 ===

  setSttProvider: (provider: STTProvider) => {
    set({ sttProvider: provider })
    console.log('🔧 [AppStore] STT Provider 已更新:', provider)
  },

  // === 編輯器操作 ===

  updateEditorContent: (content: string) => {
    set({ editorContent: content })
  },

  addTranscriptEntry: (entry: TranscriptEntry) => {
    console.log('[S] add entry', entry.text.slice(0, 20))

    set((state) => {
      // 將新條目加入並按數值時間排序
      const timeToSeconds = (t: string): number => {
        const parts = t.split(':').map(Number)
        if (parts.length === 3) {
          const [hh, mm, ss] = parts
          return hh * 3600 + mm * 60 + ss
        } else if (parts.length === 2) {
          const [mm, ss] = parts
          return mm * 60 + ss
        }
        return 0
      }

      const getStart = (e: TranscriptEntry): number => e.startTime ?? timeToSeconds(e.time)

      const newEntries = [...state.transcriptEntries, entry].sort(
        (a, b) => getStart(a) - getStart(b)
      )
      return {
        transcriptEntries: newEntries,
        // 🎯 收到第一個逐字稿時，從 recording_waiting → recording_active
        appState: state.appState === 'recording_waiting' ? 'recording_active' : state.appState
      }
    })
  },

  setRecordingTime: (time: number) => {
    set({ recordingTime: time })
  },

  // 設置錄音開始時間並啟動基於實際時間的計時器
  setRecordingStart: (timestamp: number) => {
    console.log('🚀 [AppStore] 設置錄音開始時間:', new Date(timestamp).toISOString())
    set({ recordingStartTime: timestamp, recordingTime: 0 })

    // 啟動基於實際時間的計時器
    get().startTimer()
  },

  // 計時邏輯 - 修改為基於實際時間戳的計算
  startTimer: () => {
    const currentState = get()
    if (currentState.timerId) return // 防止重複啟動

    const timerId = setInterval(() => {
      const state = get()
      if (state.recordingStartTime) {
        const elapsed = Math.floor((Date.now() - state.recordingStartTime) / 1000)
        set({ recordingTime: elapsed })
      } else {
        // Fallback 到舊邏輯
        set(prevState => ({ recordingTime: prevState.recordingTime + 1 }))
      }
    }, 1000)

    set({ timerId })
    console.log('🕐 [AppStore] 錄音計時器已啟動')
  },

  stopTimer: () => {
    const currentState = get()
    if (currentState.timerId) {
      clearInterval(currentState.timerId)
      set({ timerId: null, recordingTime: 0, recordingStartTime: null })
      console.log('⏹️ [AppStore] 錄音計時器已停止並重置')
    }
  },

  cleanup: () => {
    const currentState = get()
    if (currentState.timerId) {
      clearInterval(currentState.timerId)
      set({ timerId: null })
      console.log('🧹 [AppStore] 計時器已清理')
    }
  },

  // === 狀態重置 ===

  resetState: () => {
    console.log('🔄 [AppStore] 重置狀態')

    // 清理計時器
    const currentState = get()
    if (currentState.timerId) {
      clearInterval(currentState.timerId)
    }

    set({
      appState: 'default',
      isLoading: false,
      error: null,
      session: null,
      isRecording: false,
      recordingTime: 0,
      recordingStartTime: null,
      timerId: null,
      transcriptEntries: [],
      editorContent: '',
      sttProvider: 'gpt4o' as STTProvider,
    })
  }
}))

/**
 * 便利的 Hook：只獲取狀態
 */
export const useAppState = () => useAppStore((state: AppStore) => ({
  appState: state.appState,
  isLoading: state.isLoading,
  error: state.error,
  session: state.session,
  isRecording: state.isRecording,
  recordingTime: state.recordingTime,
  transcriptEntries: state.transcriptEntries,
  editorContent: state.editorContent
}))

/**
 * 便利的 Hook：只獲取操作
 */
export const useAppActions = () => useAppStore((state: AppStore) => ({
  startRecording: state.startRecording,
  stopRecording: state.stopRecording,
  setState: state.setState,
  setSession: state.setSession,
  setRecording: state.setRecording,
  setError: state.setError,
  clearError: state.clearError,
  updateEditorContent: state.updateEditorContent,
  addTranscriptEntry: state.addTranscriptEntry,
  setRecordingStart: state.setRecordingStart,
  resetState: state.resetState
}))

export default useAppStore


# END FILE CONTENTS


# File: app/lib/settings_utils.py

"""
settings_utils.py
集中放一些會在多個模組用到、但必須動態讀取
get_settings() 的小函式，避免 module import 時
把 settings 綁死。
"""

from app.core.config import get_settings


def get_chunk_duration() -> int:
    """
    回傳目前 .env 中指定的切片長度 (秒)。
    每次呼叫都重新走 get_settings()，確保與
    .env → Settings 一致。
    """
    return get_settings().AUDIO_CHUNK_DURATION_SEC


def get_filter_thresholds():
    """
    回傳 (no_speech_thresh, logprob_thresh, compression_thresh)。
    同樣每次重新讀取設定。
    """
    s = get_settings()
    return s.FILTER_NO_SPEECH, s.FILTER_LOGPROB, s.FILTER_COMPRESSION


# END FILE CONTENTS


# File: frontend/components/ui/badge.tsx

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }


# END FILE CONTENTS


# File: app/api/segments.py

"""
StudyScriber 音檔切片上傳 API
"""

import logging
from uuid import UUID
from fastapi import APIRouter, UploadFile, File, BackgroundTasks, Depends, HTTPException
from starlette.status import HTTP_201_CREATED, HTTP_400_BAD_REQUEST, HTTP_409_CONFLICT
from supabase import Client

from app.core.config import Settings, get_settings
from app.db.database import get_supabase_client
from app.services.r2_client import get_r2_client
from app.services.azure_openai_v2 import SimpleAudioTranscriptionService
from app.services.transcript_feed import get_transcript_hub
from app.core.container import container
from app.utils.validators import valid_webm
from app.services.stt.factory import get_provider
from app.services.stt.save_utils import save_and_push_result


logger = logging.getLogger(__name__)

router = APIRouter(prefix="/api", tags=["音檔上傳"])

MAX_FILE_SIZE = 5 * 1024 * 1024  # 5 MB


@router.post("/segment", status_code=HTTP_201_CREATED)
async def upload_segment(
    sid: UUID,
    seq: int,
    file: UploadFile = File(...),
    background: BackgroundTasks = BackgroundTasks(),
    settings: Settings = Depends(get_settings),
    supabase: Client = Depends(get_supabase_client)
):
    """
    上傳 10 秒 WebM 音檔切片 (B-020)

    使用 Content-Length + UploadFile.spool_max_size 雙保險
    立即回應 ack，背景處理轉錄
    """

    # --- 基本驗證 ---
    if file.content_type not in ("audio/webm", "audio/webm;codecs=opus"):
        raise HTTPException(HTTP_400_BAD_REQUEST, "Unsupported media type. Expected audio/webm")

    # 讀取檔案內容
    blob = await file.read()

    # 檔案大小檢查
    if len(blob) > MAX_FILE_SIZE:
        raise HTTPException(HTTP_400_BAD_REQUEST, f"File too large: {len(blob)} bytes > {MAX_FILE_SIZE} bytes (5MB)")

    # 會話驗證 - 檢查 session 存在且狀態正確
    try:
        session_response = supabase.table("sessions").select("*").eq("id", str(sid)).eq("status", "active").limit(1).execute()
        if not session_response.data:
            raise HTTPException(HTTP_400_BAD_REQUEST, "Session not found or not active")

        session = session_response.data[0]
        if session.get('type') != 'recording':
            raise HTTPException(HTTP_400_BAD_REQUEST, "Session is not in recording mode")

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Session validation error: {e}")
        raise HTTPException(HTTP_400_BAD_REQUEST, "Session validation failed")

    # 序號唯一性檢查 - (session_id, seq) UNIQUE
    try:
        existing_response = supabase.table("audio_files").select("id").eq("session_id", str(sid)).eq("chunk_sequence", seq).limit(1).execute()
        if existing_response.data:
            raise HTTPException(HTTP_409_CONFLICT, f"Sequence {seq} already uploaded for this session. Please retry with next sequence or skip.")
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Sequence uniqueness check error: {e}")
        raise HTTPException(HTTP_400_BAD_REQUEST, "Sequence validation failed")

    # WebM 檔案格式基本驗證
    if not valid_webm(blob[:32]):
        raise HTTPException(HTTP_400_BAD_REQUEST, "Invalid WebM header. Please ensure file is properly encoded WebM format.")

    logger.info(f"✅ Validated WebM segment upload: session={sid}, seq={seq}, size={len(blob)} bytes")

    # --- 立即回 Ack，並丟背景任務 ---
    background.add_task(process_and_transcribe, sid, seq, blob)
    return {"ack": seq, "size": len(blob), "status": "accepted"}


async def process_and_transcribe(sid: UUID, seq: int, webm_blob: bytes):
    """
    背景任務：處理音檔切片並執行轉錄

    流程：R2 儲存 → 資料庫記錄 → FFmpeg 轉換 → Whisper 轉錄 → WebSocket 廣播
    """
    transcript_hub = get_transcript_hub()

    try:
        logger.info(f"🚀 [背景轉錄] 開始處理切片 {seq} (session: {sid}, size: {len(webm_blob)} bytes)")

        # 1. 儲存至 Cloudflare R2
        r2_client = get_r2_client()
        blob_path = await r2_client.store_segment(sid, seq, webm_blob)
        logger.info(f"📁 [R2 儲存] 切片 {seq} 已儲存至 {blob_path}")

        # 2. 記錄到資料庫 audio_files 表
        supabase = get_supabase_client()
        app_settings = get_settings()
        audio_file_data = {
            "session_id": str(sid),
            "chunk_sequence": seq,
            "r2_key": blob_path,
            "r2_bucket": r2_client.bucket_name,
            "file_size": len(webm_blob),
            "duration_seconds": app_settings.AUDIO_CHUNK_DURATION_SEC  # 從環境變數讀取切片時長
        }

        audio_response = supabase.table("audio_files").insert(audio_file_data).execute()
        if not audio_response.data:
            raise Exception("Failed to insert audio file record")

        logger.info(f"📝 [資料庫] 音檔記錄已建立: {audio_response.data[0]['id']}")

        # 3. 啟動轉錄服務
        try:
            provider = get_provider(sid)
            logger.info(f"🎯 [轉錄啟動] 開始轉錄切片 {seq} (provider={provider.name})")
            result = await provider.transcribe(webm_blob, sid, seq)
            if result:
                await save_and_push_result(sid, seq, result)
                logger.info(f"✅ [轉錄啟動] 切片 {seq} 轉錄成功")
            else:
                logger.warning(f"⚠️ [轉錄啟動] 切片 {seq} 轉錄失敗")
        except Exception as transcription_error:
            logger.error(f"❌ [轉錄服務錯誤] 切片 {seq}: {transcription_error}")
            await transcript_hub.broadcast_error(str(sid), "transcription_service_error", str(transcription_error), seq)

        logger.info(f"✅ [背景轉錄] 切片 {seq} 處理完成")

    except Exception as e:
        logger.error(f"❌ [背景轉錄] 切片 {seq} 處理失敗: {e}")
        # 標記切片錯誤狀態
        await _mark_segment_error(sid, seq, str(e))
        # 廣播錯誤到前端
        await transcript_hub.broadcast_error(str(sid), "processing_error", str(e), seq)


async def _mark_segment_error(sid: UUID, seq: int, error_message: str):
    """標記切片處理錯誤"""
    try:
        supabase = get_supabase_client()
        # 可以考慮在 audio_files 表添加 error_message 欄位，或建立錯誤記錄表
        logger.error(f"切片錯誤記錄: session={sid}, seq={seq}, error={error_message}")
    except Exception as e:
        logger.error(f"記錄切片錯誤失敗: {e}")





# END FILE CONTENTS


# File: frontend/components/ui/card.tsx

import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }


# END FILE CONTENTS


# File: frontend/components/ui/avatar.tsx

"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }


# END FILE CONTENTS


# File: frontend/components/upload-status-indicator.tsx

"use client"

import { useState, useEffect } from 'react'
import { Button } from './ui/button'
import { Alert, AlertDescription } from './ui/alert'
import { Badge } from './ui/badge'
import { RefreshCw, Upload, AlertTriangle, CheckCircle, Wifi, WifiOff } from 'lucide-react'
import { restAudioUploader } from '../lib/rest-audio-uploader'

interface UploadStats {
    uploaded: number
    failed: number
    cached: number
    retrying: boolean
}

interface UploadStatusIndicatorProps {
    sessionId?: string
    isRecording?: boolean
    className?: string
}

/**
 * UploadStatusIndicator - 上傳狀態指示器
 *
 * Phase 2 重構：顯示 REST API 上傳狀態
 *
 * 功能：
 * - 顯示上傳統計（成功/失敗/暫存）
 * - 提示暫存檔案可重新上傳
 * - 支援手動重試功能
 * - 網路狀態指示
 */
export function UploadStatusIndicator({
    sessionId,
    isRecording = false,
    className = ""
}: UploadStatusIndicatorProps) {
    const [uploadStats, setUploadStats] = useState<UploadStats>({
        uploaded: 0,
        failed: 0,
        cached: 0,
        retrying: false
    })
    const [isOnline, setIsOnline] = useState(true)
    const [lastUpdate, setLastUpdate] = useState(Date.now())

    // 監聽網路狀態
    useEffect(() => {
        const handleOnline = () => setIsOnline(true)
        const handleOffline = () => setIsOnline(false)

        window.addEventListener('online', handleOnline)
        window.addEventListener('offline', handleOffline)

        return () => {
            window.removeEventListener('online', handleOnline)
            window.removeEventListener('offline', handleOffline)
        }
    }, [])

    // 設置上傳器事件監聽
    useEffect(() => {
        if (!sessionId) return

        restAudioUploader.setSessionId(sessionId)

        // 監聽上傳成功
        const handleUploadSuccess = (seq: number) => {
            setUploadStats(prev => ({
                ...prev,
                uploaded: prev.uploaded + 1
            }))
            setLastUpdate(Date.now())
        }

        // 監聽上傳失敗
        const handleUploadError = (seq: number) => {
            setUploadStats(prev => ({
                ...prev,
                failed: prev.failed + 1
            }))
            setLastUpdate(Date.now())
        }

        // 監聽暫存到本地
        const handleCacheStored = (seq: number) => {
            setUploadStats(prev => ({
                ...prev,
                cached: prev.cached + 1
            }))
            setLastUpdate(Date.now())
        }

        restAudioUploader.onUploadSuccess(handleUploadSuccess)
        restAudioUploader.onUploadError(handleUploadError)
        restAudioUploader.onCacheStored(handleCacheStored)

        return () => {
            // 清理事件監聽器
            restAudioUploader.onUploadSuccess(() => { })
            restAudioUploader.onUploadError(() => { })
            restAudioUploader.onCacheStored(() => { })
        }
    }, [sessionId])

    // 定期更新暫存數量
    useEffect(() => {
        const updateCachedCount = async () => {
            if (sessionId && restAudioUploader) {
                const count = await restAudioUploader.getCachedSegmentsCount()
                setUploadStats(prev => ({
                    ...prev,
                    cached: count
                }))
            }
        }

        updateCachedCount()
        const interval = setInterval(updateCachedCount, 10000) // 每 10 秒更新一次

        return () => clearInterval(interval)
    }, [sessionId])

    // 重新上傳暫存檔案
    const handleRetryUploads = async () => {
        if (!sessionId || uploadStats.retrying) return

        setUploadStats(prev => ({ ...prev, retrying: true }))

        try {
            await restAudioUploader.retryFailedSegments()

            // 更新暫存數量
            const newCachedCount = await restAudioUploader.getCachedSegmentsCount()
            setUploadStats(prev => ({
                ...prev,
                cached: newCachedCount,
                retrying: false
            }))

            console.log('✅ [UploadStatusIndicator] 重新上傳完成')
        } catch (error) {
            console.error('❌ [UploadStatusIndicator] 重新上傳失敗:', error)
            setUploadStats(prev => ({ ...prev, retrying: false }))
        }
    }

    // 如果不在錄音且沒有統計數據，不顯示
    if (!isRecording && uploadStats.uploaded === 0 && uploadStats.failed === 0 && uploadStats.cached === 0) {
        return null
    }

    return (
        <div className={`space-y-2 ${className}`}>
            {/* 網路狀態指示 */}
            <div className="flex items-center gap-2 text-sm text-muted-foreground">
                {isOnline ? (
                    <Wifi className="h-4 w-4 text-green-500" />
                ) : (
                    <WifiOff className="h-4 w-4 text-red-500" />
                )}
                <span>{isOnline ? '線上' : '離線'}</span>
            </div>

            {/* 上傳統計 */}
            <div className="flex items-center gap-2 flex-wrap">
                {uploadStats.uploaded > 0 && (
                    <Badge variant="default" className="flex items-center gap-1">
                        <CheckCircle className="h-3 w-3" />
                        已上傳 {uploadStats.uploaded}
                    </Badge>
                )}

                {uploadStats.failed > 0 && (
                    <Badge variant="destructive" className="flex items-center gap-1">
                        <AlertTriangle className="h-3 w-3" />
                        失敗 {uploadStats.failed}
                    </Badge>
                )}

                {uploadStats.cached > 0 && (
                    <Badge variant="secondary" className="flex items-center gap-1">
                        <Upload className="h-3 w-3" />
                        暫存 {uploadStats.cached}
                    </Badge>
                )}
            </div>

            {/* 暫存檔案提示 */}
            {uploadStats.cached > 0 && (
                <Alert>
                    <AlertTriangle className="h-4 w-4" />
                    <AlertDescription className="flex items-center justify-between">
                        <span>
                            有 {uploadStats.cached} 個音頻段落暫存在本地。
                            {isOnline ? '可以重新上傳' : '請等待網路連線'}
                        </span>
                        {isOnline && (
                            <Button
                                size="sm"
                                variant="outline"
                                onClick={handleRetryUploads}
                                disabled={uploadStats.retrying}
                                className="ml-2"
                            >
                                {uploadStats.retrying ? (
                                    <>
                                        <RefreshCw className="h-3 w-3 mr-1 animate-spin" />
                                        重新上傳中...
                                    </>
                                ) : (
                                    <>
                                        <Upload className="h-3 w-3 mr-1" />
                                        重新上傳
                                    </>
                                )}
                            </Button>
                        )}
                    </AlertDescription>
                </Alert>
            )}

            {/* 錄音時的即時狀態 */}
            {isRecording && (
                <div className="text-xs text-muted-foreground">
                    上次更新：{new Date(lastUpdate).toLocaleTimeString()}
                </div>
            )}
        </div>
    )
}


# END FILE CONTENTS


# File: frontend/public/placeholder-logo.svg

<svg xmlns="http://www.w3.org/2000/svg" width="215" height="48" fill="none"><path fill="#000" d="M57.588 9.6h6L73.828 38h-5.2l-2.36-6.88h-11.36L52.548 38h-5.2l10.24-28.4Zm7.16 17.16-4.16-12.16-4.16 12.16h8.32Zm23.694-2.24c-.186-1.307-.706-2.32-1.56-3.04-.853-.72-1.866-1.08-3.04-1.08-1.68 0-2.986.613-3.92 1.84-.906 1.227-1.36 2.947-1.36 5.16s.454 3.933 1.36 5.16c.934 1.227 2.24 1.84 3.92 1.84 1.254 0 2.307-.373 3.16-1.12.854-.773 1.387-1.867 1.6-3.28l5.12.24c-.186 1.68-.733 3.147-1.64 4.4-.906 1.227-2.08 2.173-3.52 2.84-1.413.667-2.986 1-4.72 1-2.08 0-3.906-.453-5.48-1.36-1.546-.907-2.76-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84 0-2.24.427-4.187 1.28-5.84.88-1.68 2.094-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.68 0 3.227.32 4.64.96 1.414.64 2.56 1.56 3.44 2.76.907 1.2 1.454 2.6 1.64 4.2l-5.12.28Zm11.486-7.72.12 3.4c.534-1.227 1.307-2.173 2.32-2.84 1.04-.693 2.267-1.04 3.68-1.04 1.494 0 2.76.387 3.8 1.16 1.067.747 1.827 1.813 2.28 3.2.507-1.44 1.294-2.52 2.36-3.24 1.094-.747 2.414-1.12 3.96-1.12 1.414 0 2.64.307 3.68.92s1.84 1.52 2.4 2.72c.56 1.2.84 2.667.84 4.4V38h-4.96V25.92c0-1.813-.293-3.187-.88-4.12-.56-.96-1.413-1.44-2.56-1.44-.906 0-1.68.213-2.32.64-.64.427-1.133 1.053-1.48 1.88-.32.827-.48 1.84-.48 3.04V38h-4.56V25.92c0-1.2-.133-2.213-.4-3.04-.24-.827-.626-1.453-1.16-1.88-.506-.427-1.133-.64-1.88-.64-.906 0-1.68.227-2.32.68-.64.427-1.133 1.053-1.48 1.88-.32.827-.48 1.827-.48 3V38h-4.96V16.8h4.48Zm26.723 10.6c0-2.24.427-4.187 1.28-5.84.854-1.68 2.067-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.84 0 3.494.413 4.96 1.24 1.467.827 2.64 2.08 3.52 3.76.88 1.653 1.347 3.693 1.4 6.12v1.32h-15.08c.107 1.813.614 3.227 1.52 4.24.907.987 2.134 1.48 3.68 1.48.987 0 1.88-.253 2.68-.76a4.803 4.803 0 0 0 1.84-2.2l5.08.36c-.64 2.027-1.84 3.64-3.6 4.84-1.733 1.173-3.733 1.76-6 1.76-2.08 0-3.906-.453-5.48-1.36-1.573-.907-2.786-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84Zm15.16-2.04c-.213-1.733-.76-3.013-1.64-3.84-.853-.827-1.893-1.24-3.12-1.24-1.44 0-2.6.453-3.48 1.36-.88.88-1.44 2.12-1.68 3.72h9.92ZM163.139 9.6V38h-5.04V9.6h5.04Zm8.322 7.2.24 5.88-.64-.36c.32-2.053 1.094-3.56 2.32-4.52 1.254-.987 2.787-1.48 4.6-1.48 2.32 0 4.107.733 5.36 2.2 1.254 1.44 1.88 3.387 1.88 5.84V38h-4.96V25.92c0-1.253-.12-2.28-.36-3.08-.24-.8-.64-1.413-1.2-1.84-.533-.427-1.253-.64-2.16-.64-1.44 0-2.573.48-3.4 1.44-.8.933-1.2 2.307-1.2 4.12V38h-4.96V16.8h4.48Zm30.003 7.72c-.186-1.307-.706-2.32-1.56-3.04-.853-.72-1.866-1.08-3.04-1.08-1.68 0-2.986.613-3.92 1.84-.906 1.227-1.36 2.947-1.36 5.16s.454 3.933 1.36 5.16c.934 1.227 2.24 1.84 3.92 1.84 1.254 0 2.307-.373 3.16-1.12.854-.773 1.387-1.867 1.6-3.28l5.12.24c-.186 1.68-.733 3.147-1.64 4.4-.906 1.227-2.08 2.173-3.52 2.84-1.413.667-2.986 1-4.72 1-2.08 0-3.906-.453-5.48-1.36-1.546-.907-2.76-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84 0-2.24.427-4.187 1.28-5.84.88-1.68 2.094-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.68 0 3.227.32 4.64.96 1.414.64 2.56 1.56 3.44 2.76.907 1.2 1.454 2.6 1.64 4.2l-5.12.28Zm11.443 8.16V38h-5.6v-5.32h5.6Z"/><path fill="#171717" fill-rule="evenodd" d="m7.839 40.783 16.03-28.054L20 6 0 40.783h7.839Zm8.214 0H40L27.99 19.894l-4.02 7.032 3.976 6.914H20.02l-3.967 6.943Z" clip-rule="evenodd"/></svg>

# END FILE CONTENTS


# File: frontend/lib/services/service-container.ts

"use client"

import { BaseService, ServiceStatus } from './base-service'

/**
 * ServiceContainer - 服務依賴注入容器
 *
 * 參考後端 container.py 模式，提供：
 * - Singleton 模式 (參考 TranscriptManager.getInstance())
 * - 類型安全的服務註冊和解析
 * - 服務生命週期管理
 * - 依賴關係管理
 */
export class ServiceContainer {
    /**
     * Singleton 實例
     */
    private static instance: ServiceContainer | null = null

    /**
     * 服務工廠函數映射表
     * key: 服務識別符, value: 服務工廠函數
     */
    private readonly providers = new Map<string, () => any>()

    /**
     * 單例服務實例快取
     * key: 服務識別符, value: 服務實例
     */
    private readonly singletons = new Map<string, any>()

    /**
     * 已註冊的單例服務標識
     */
    private readonly singletonKeys = new Set<string>()

    /**
     * 私有建構子 (Singleton 模式)
     */
    private constructor() {
        // 開發模式下將實例掛到全域以利除錯
        if (typeof window !== 'undefined') {
            ; (window as any).serviceContainer = this
            console.log('🔧 [ServiceContainer] 服務容器已初始化')
        }
    }

    /**
     * 取得 ServiceContainer 實例 (Singleton)
     */
    static getInstance(): ServiceContainer {
        if (!ServiceContainer.instance) {
            ServiceContainer.instance = new ServiceContainer()
        }
        return ServiceContainer.instance
    }

    /**
     * 註冊服務工廠函數
     * 參考後端 container.py 的 register 方法
     *
     * @param key 服務識別符
     * @param factory 服務工廠函數
     */
    register<T>(key: string, factory: () => T): void {
        if (this.providers.has(key)) {
            console.warn(`⚠️ [ServiceContainer] 服務 "${key}" 已存在，將被覆蓋`)
        }

        this.providers.set(key, factory)
        console.log(`✅ [ServiceContainer] 服務 "${key}" 註冊成功`)
    }

    /**
     * 註冊單例服務
     * 單例服務只會被創建一次，後續調用返回同一實例
     *
     * @param key 服務識別符
     * @param factory 服務工廠函數
     */
    registerSingleton<T>(key: string, factory: () => T): void {
        this.register(key, factory)
        this.singletonKeys.add(key)
        console.log(`✅ [ServiceContainer] 單例服務 "${key}" 註冊成功`)
    }

    /**
     * 解析服務實例
     * 參考後端 container.py 的 resolve 方法
     *
     * @param key 服務識別符
     * @returns 服務實例
     * @throws 如果服務未註冊
     */
    resolve<T>(key: string): T {
        // 檢查單例快取
        if (this.singletonKeys.has(key) && this.singletons.has(key)) {
            return this.singletons.get(key) as T
        }

        // 取得工廠函數
        const provider = this.providers.get(key)
        if (!provider) {
            const error = `服務 "${key}" 未註冊`
            console.error(`❌ [ServiceContainer] ${error}`)
            throw new Error(error)
        }

        try {
            const instance = provider() as T

            // 單例服務快取實例
            if (this.singletonKeys.has(key)) {
                this.singletons.set(key, instance)
            }

            console.log(`✅ [ServiceContainer] 服務 "${key}" 解析成功`)
            return instance
        } catch (error) {
            console.error(`❌ [ServiceContainer] 創建服務 "${key}" 失敗:`, error)
            throw error
        }
    }

    /**
     * 檢查服務是否已註冊
     *
     * @param key 服務識別符
     */
    isRegistered(key: string): boolean {
        return this.providers.has(key)
    }

    /**
     * 取得所有已註冊的服務識別符
     */
    getRegisteredServices(): string[] {
        return Array.from(this.providers.keys())
    }

    /**
     * 清除指定服務註冊
     *
     * @param key 服務識別符
     */
    unregister(key: string): boolean {
        const hasProvider = this.providers.delete(key)
        this.singletons.delete(key)
        this.singletonKeys.delete(key)

        if (hasProvider) {
            console.log(`🗑️ [ServiceContainer] 服務 "${key}" 已清除`)
        }

        return hasProvider
    }

    /**
     * 清除所有服務註冊
     * 主要用於測試環境
     */
    clear(): void {
        const count = this.providers.size
        this.providers.clear()
        this.singletons.clear()
        this.singletonKeys.clear()
        console.log(`🗑️ [ServiceContainer] 已清除 ${count} 個服務`)
    }

    /**
     * 獲取容器狀態摘要
     */
    getContainerStatus(): ServiceContainerStatus {
        const registeredServices = this.getRegisteredServices()
        const activeSingletons = Array.from(this.singletons.keys())

        return {
            totalServices: registeredServices.length,
            activeSingletonsCount: activeSingletons.length,
            registeredServices,
            activeSingletons,
            timestamp: new Date().toISOString()
        }
    }

    /**
     * 初始化所有已註冊的 BaseService 實例
     * 用於應用程式啟動時統一初始化服務
     */
    async initializeServices(): Promise<ServiceInitializationResult[]> {
        const results: ServiceInitializationResult[] = []
        const services = this.getRegisteredServices()

        console.log(`🚀 [ServiceContainer] 開始初始化 ${services.length} 個服務...`)

        for (const serviceKey of services) {
            try {
                const service = this.resolve(serviceKey)

                // 檢查是否為 BaseService 實例
                if (service instanceof BaseService) {
                    await service.start()
                    results.push({
                        serviceKey,
                        success: true,
                        status: service.getStatus()
                    })
                    console.log(`✅ [ServiceContainer] 服務 "${serviceKey}" 初始化成功`)
                } else {
                    // 非 BaseService 實例，跳過初始化
                    results.push({
                        serviceKey,
                        success: true,
                        status: null,
                        message: '非 BaseService 實例，跳過初始化'
                    })
                    console.log(`ℹ️ [ServiceContainer] 服務 "${serviceKey}" 非 BaseService 實例，跳過初始化`)
                }
            } catch (error) {
                results.push({
                    serviceKey,
                    success: false,
                    error: error instanceof Error ? error.message : '未知錯誤'
                })
                console.error(`❌ [ServiceContainer] 服務 "${serviceKey}" 初始化失敗:`, error)
            }
        }

        const successCount = results.filter(r => r.success).length
        console.log(`🎯 [ServiceContainer] 服務初始化完成: ${successCount}/${services.length} 成功`)

        return results
    }

    /**
     * 清理所有已啟動的 BaseService 實例
     * 用於應用程式關閉時統一清理資源
     */
    async cleanupServices(): Promise<ServiceCleanupResult[]> {
        const results: ServiceCleanupResult[] = []
        const singletonKeys = Array.from(this.singletons.keys())

        console.log(`🛑 [ServiceContainer] 開始清理 ${singletonKeys.length} 個單例服務...`)

        for (const serviceKey of singletonKeys) {
            try {
                const service = this.singletons.get(serviceKey)

                if (service instanceof BaseService && service.isRunning) {
                    await service.stop()
                    results.push({
                        serviceKey,
                        success: true
                    })
                    console.log(`✅ [ServiceContainer] 服務 "${serviceKey}" 清理成功`)
                } else {
                    results.push({
                        serviceKey,
                        success: true,
                        message: '服務未運行或非 BaseService 實例'
                    })
                }
            } catch (error) {
                results.push({
                    serviceKey,
                    success: false,
                    error: error instanceof Error ? error.message : '未知錯誤'
                })
                console.error(`❌ [ServiceContainer] 服務 "${serviceKey}" 清理失敗:`, error)
            }
        }

        const successCount = results.filter(r => r.success).length
        console.log(`🎯 [ServiceContainer] 服務清理完成: ${successCount}/${singletonKeys.length} 成功`)

        return results
    }
}

/**
 * 服務容器錯誤類別
 */
export class ServiceContainerError extends Error {
    readonly errorType: 'UNREGISTERED_SERVICE' | 'CREATION_FAILED' | 'UNKNOWN'
    readonly serviceKey: string
    readonly originalError?: unknown

    constructor(
        message: string,
        errorType: 'UNREGISTERED_SERVICE' | 'CREATION_FAILED' | 'UNKNOWN',
        serviceKey: string,
        originalError?: unknown
    ) {
        super(message)
        this.name = 'ServiceContainerError'
        this.errorType = errorType
        this.serviceKey = serviceKey
        this.originalError = originalError
    }
}

/**
 * 容器狀態介面
 */
export interface ServiceContainerStatus {
    totalServices: number
    activeSingletonsCount: number
    registeredServices: string[]
    activeSingletons: string[]
    timestamp: string
}

/**
 * 服務初始化結果介面
 */
export interface ServiceInitializationResult {
    serviceKey: string
    success: boolean
    status?: ServiceStatus | null
    error?: string
    message?: string
}

/**
 * 服務清理結果介面
 */
export interface ServiceCleanupResult {
    serviceKey: string
    success: boolean
    error?: string
    message?: string
}

/**
 * 匯出全域容器實例 (Singleton)
 * 方便其他模組使用
 */
export const serviceContainer = ServiceContainer.getInstance()


# END FILE CONTENTS


# File: frontend/components/ui/select.tsx

"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}


# END FILE CONTENTS


# File: frontend/tsconfig.json

{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "target": "ES6",
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}


# END FILE CONTENTS


# File: frontend/components/ui/calendar.tsx

"use client"

import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ...props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ...props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }


# END FILE CONTENTS


# File: app/core/webm_header_repairer.py

"""
WebM 檔頭修復核心邏輯
提供檔頭提取、驗證和重組功能，解決 MediaRecorder 後續 chunk 缺乏 EBML 檔頭的問題
"""

import logging
import time
from typing import Optional, Tuple
from dataclasses import dataclass

from .ffmpeg import detect_webm_header_info, is_webm_header_complete, WebMHeaderInfo

logger = logging.getLogger(__name__)


@dataclass
class HeaderRepairResult:
    """檔頭修復結果"""
    success: bool = False
    repaired_data: Optional[bytes] = None
    original_header_size: int = 0
    audio_data_size: int = 0
    repair_time_ms: float = 0.0
    error_message: Optional[str] = None


@dataclass
class HeaderExtractionResult:
    """檔頭提取結果"""
    success: bool = False
    header_data: Optional[bytes] = None
    header_info: Optional[WebMHeaderInfo] = None
    extraction_time_ms: float = 0.0
    error_message: Optional[str] = None


class WebMHeaderRepairer:
    """
    WebM 檔頭修復核心引擎

    負責從第一個完整 chunk 提取檔頭模板，並將其應用到後續缺乏檔頭的 chunk 中
    """

    def __init__(self):
        """初始化 WebM 檔頭修復器"""
        self._repair_stats = {
            'total_extractions': 0,
            'successful_extractions': 0,
            'total_repairs': 0,
            'successful_repairs': 0,
            'total_repair_time_ms': 0.0
        }
        logger.info("WebMHeaderRepairer 初始化完成")

    def extract_header(self, complete_webm_chunk: bytes) -> HeaderExtractionResult:
        """
        從完整的 WebM chunk 中提取檔頭模板

        Args:
            complete_webm_chunk: 包含完整檔頭的 WebM chunk 數據

        Returns:
            HeaderExtractionResult: 檔頭提取結果
        """
        start_time = time.time()
        result = HeaderExtractionResult()

        try:
            self._repair_stats['total_extractions'] += 1

            # 1. 驗證輸入數據
            if not complete_webm_chunk or len(complete_webm_chunk) < 32:
                result.error_message = "輸入數據長度不足"
                return result

            # 2. 檢測檔頭完整性
            header_info = detect_webm_header_info(complete_webm_chunk)
            if not header_info.is_complete:
                result.error_message = f"檔頭不完整: {header_info.error_message}"
                return result

            # 3. 提取檔頭數據（從開始到第一個 Cluster）
            if header_info.header_size > 0:
                header_data = complete_webm_chunk[:header_info.header_size]

                # 4. 驗證提取的檔頭
                if self._validate_extracted_header(header_data):
                    result.success = True
                    result.header_data = header_data
                    result.header_info = header_info
                    self._repair_stats['successful_extractions'] += 1

                    logger.debug(f"成功提取檔頭: 大小={len(header_data)} bytes, "
                               f"編碼器={header_info.codec_type}, "
                               f"音軌數={header_info.track_count}")
                else:
                    result.error_message = "提取的檔頭驗證失敗"
            else:
                result.error_message = "無法確定檔頭大小"

        except Exception as e:
            result.error_message = f"檔頭提取異常: {str(e)}"
            logger.error(f"檔頭提取發生錯誤: {e}")

        finally:
            result.extraction_time_ms = (time.time() - start_time) * 1000

        return result

    def repair_chunk(self, header_template: bytes, incomplete_chunk: bytes) -> HeaderRepairResult:
        """
        使用檔頭模板修復不完整的 WebM chunk

        Args:
            header_template: 從完整 chunk 提取的檔頭模板
            incomplete_chunk: 缺乏檔頭的 WebM chunk

        Returns:
            HeaderRepairResult: 修復結果
        """
        start_time = time.time()
        result = HeaderRepairResult()

        try:
            self._repair_stats['total_repairs'] += 1

            # 1. 驗證輸入
            if not header_template or not incomplete_chunk:
                result.error_message = "輸入參數無效"
                return result

            if len(header_template) < 32 or len(incomplete_chunk) < 8:
                result.error_message = "數據長度不足"
                return result

            # 2. 檢測 incomplete_chunk 是否已經有檔頭
            if is_webm_header_complete(incomplete_chunk):
                # 如果已經有完整檔頭，直接返回原數據
                result.success = True
                result.repaired_data = incomplete_chunk
                result.original_header_size = 0
                result.audio_data_size = len(incomplete_chunk)
                logger.debug("Chunk 已有完整檔頭，無需修復")
                return result

            # 3. 檢測 incomplete_chunk 中的音頻數據起始位置
            audio_data_start = self._find_audio_data_start(incomplete_chunk)
            if audio_data_start == -1:
                result.error_message = "無法在 incomplete chunk 中找到有效的音頻數據"
                return result

            # 4. 提取音頻數據
            audio_data = incomplete_chunk[audio_data_start:]
            if len(audio_data) < 8:
                result.error_message = "音頻數據長度不足"
                return result

            # 5. 修復檔頭中的時間戳信息（如果需要）
            repaired_header = self._update_header_timestamps(header_template, incomplete_chunk)

            # 6. 拼接修復後的數據
            repaired_data = repaired_header + audio_data

            # 7. 驗證修復結果
            if self.validate_repaired_chunk(repaired_data):
                result.success = True
                result.repaired_data = repaired_data
                result.original_header_size = len(repaired_header)
                result.audio_data_size = len(audio_data)
                self._repair_stats['successful_repairs'] += 1

                logger.debug(f"成功修復 chunk: 檔頭={len(repaired_header)} bytes, "
                           f"音頻={len(audio_data)} bytes, "
                           f"總計={len(repaired_data)} bytes")
            else:
                result.error_message = "修復後的數據驗證失敗"

        except Exception as e:
            result.error_message = f"檔頭修復異常: {str(e)}"
            logger.error(f"檔頭修復發生錯誤: {e}")

        finally:
            repair_time_ms = (time.time() - start_time) * 1000
            result.repair_time_ms = repair_time_ms
            self._repair_stats['total_repair_time_ms'] += repair_time_ms

        return result

    def validate_repaired_chunk(self, repaired_chunk: bytes) -> bool:
        """
        驗證修復後的 WebM chunk 是否有效

        Args:
            repaired_chunk: 修復後的 WebM 數據

        Returns:
            bool: True 表示驗證通過，False 表示驗證失敗
        """
        try:
            if not repaired_chunk or len(repaired_chunk) < 32:
                return False

            # 1. 檢查是否有完整的檔頭
            if not is_webm_header_complete(repaired_chunk):
                logger.debug("修復後的 chunk 檔頭仍不完整")
                return False

            # 2. 檢測檔頭資訊
            header_info = detect_webm_header_info(repaired_chunk)
            if not header_info.is_complete:
                logger.debug(f"檔頭驗證失敗: {header_info.error_message}")
                return False

            # 3. 檢查數據長度合理性
            if header_info.header_size >= len(repaired_chunk):
                logger.debug("檔頭大小異常，等於或超過總數據大小")
                return False

            # 4. 檢查是否有音頻數據
            audio_data_size = len(repaired_chunk) - header_info.header_size
            if audio_data_size < 8:
                logger.debug("音頻數據長度不足")
                return False

            logger.debug(f"修復驗證通過: 檔頭={header_info.header_size} bytes, "
                        f"音頻={audio_data_size} bytes, "
                        f"編碼器={header_info.codec_type}")

            return True

        except Exception as e:
            logger.error(f"修復驗證發生錯誤: {e}")
            return False

    def get_repair_statistics(self) -> dict:
        """
        獲取修復統計信息

        Returns:
            dict: 包含修復統計數據的字典
        """
        stats = self._repair_stats.copy()

        # 計算成功率
        if stats['total_extractions'] > 0:
            stats['extraction_success_rate'] = stats['successful_extractions'] / stats['total_extractions']
        else:
            stats['extraction_success_rate'] = 0.0

        if stats['total_repairs'] > 0:
            stats['repair_success_rate'] = stats['successful_repairs'] / stats['total_repairs']
            stats['average_repair_time_ms'] = stats['total_repair_time_ms'] / stats['total_repairs']
        else:
            stats['repair_success_rate'] = 0.0
            stats['average_repair_time_ms'] = 0.0

        return stats

    def _validate_extracted_header(self, header_data: bytes) -> bool:
        """
        驗證提取的檔頭是否有效

        Args:
            header_data: 提取的檔頭數據

        Returns:
            bool: True 表示有效，False 表示無效
        """
        try:
            # 檢查基本長度
            if len(header_data) < 32:
                return False

            # 檢查 EBML header 標記
            if header_data[:4] != b'\x1A\x45\xDF\xA3':
                return False

            # 使用現有的檔頭檢測功能進行深度驗證
            header_info = detect_webm_header_info(header_data)
            return header_info.has_ebml_header and header_info.has_segment

        except Exception:
            return False

    def _find_audio_data_start(self, incomplete_chunk: bytes) -> int:
        """
        在不完整的 chunk 中尋找音頻數據的起始位置

        Args:
            incomplete_chunk: 不完整的 WebM chunk

        Returns:
            int: 音頻數據起始位置，-1 表示未找到
        """
        try:
            # 1. 檢查是否以 Cluster 元素開始 (0x1F43B675)
            cluster_marker = b'\x1F\x43\xB6\x75'
            if incomplete_chunk.startswith(cluster_marker):
                return 0  # 直接從 Cluster 開始

            # 2. 在前 64 bytes 中搜尋 Cluster 標記
            search_range = min(len(incomplete_chunk), 64)
            for i in range(search_range - len(cluster_marker) + 1):
                if incomplete_chunk[i:i + len(cluster_marker)] == cluster_marker:
                    return i

            # 3. 如果沒找到 Cluster，檢查是否包含其他音頻數據標記
            # SimpleBlock (0xA3) 或 Block (0xA1)
            audio_markers = [b'\xA3', b'\xA1']
            for marker in audio_markers:
                for i in range(search_range):
                    if incomplete_chunk[i:i + len(marker)] == marker:
                        return max(0, i - 8)  # 往前一點以包含可能的長度資訊

            # 4. 如果都沒找到，假設從開始就是音頻數據
            logger.debug("未找到明確的音頻數據標記，假設從頭開始")
            return 0

        except Exception as e:
            logger.debug(f"尋找音頻數據起始位置時發生錯誤: {e}")
            return 0  # 預設從開始處理

    def _update_header_timestamps(self, header_template: bytes, incomplete_chunk: bytes) -> bytes:
        """
        更新檔頭中的時間戳信息（如有需要）

        Args:
            header_template: 原始檔頭模板
            incomplete_chunk: 不完整的 chunk（可能包含時間戳信息）

        Returns:
            bytes: 更新後的檔頭數據
        """
        try:
            # 目前先返回原始檔頭模板
            # 未來可以實作更複雜的時間戳更新邏輯
            return header_template

        except Exception as e:
            logger.debug(f"更新檔頭時間戳時發生錯誤: {e}")
            return header_template


# END FILE CONTENTS


# File: frontend/app/layout.tsx

import type { Metadata } from 'next'
import './globals.css'
import { AppStateProviderWrapper } from '../providers/app-state-provider-wrapper'

export const metadata: Metadata = {
  title: 'study-scriber',
  description: 'study-scriber',
  generator: 'study-scriber',
}

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode
}>) {
  return (
    <html lang="en" data-testid="html-root">
      <body>
        <AppStateProviderWrapper>
          {children}
        </AppStateProviderWrapper>
      </body>
    </html>
  )
}


# END FILE CONTENTS


# File: frontend/components/ui/separator.tsx

"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }


# END FILE CONTENTS


# File: frontend/hooks/use-notes.ts

"use client"

import { useState, useCallback, useRef, useEffect, useMemo } from 'react'
import { notesAPI, type NoteUpdateRequest, type NoteResponse } from '../lib/api'
import { useLocalDraft } from './use-local-draft'

interface UseNotesReturn {
    noteContent: string
    lastSaved: Date | null
    isSaving: boolean
    error: string | null
    updateNote: (content: string) => void
    saveNote: (sessionId: string) => Promise<void>
    loadNote: (sessionId: string) => Promise<void>
    clearNote: () => void
    // 本地草稿相關
    hasDraft: boolean
    lastDraftTime: Date | null
    restoreDraft: () => void
    clearDraft: () => void
}

export function useNotes(): UseNotesReturn {
    const [noteContent, setNoteContent] = useState('')
    const [lastSaved, setLastSaved] = useState<Date | null>(null)
    const [isSaving, setIsSaving] = useState(false)
    const [error, setError] = useState<string | null>(null)

    const autoSaveTimeoutRef = useRef<NodeJS.Timeout | null>(null)
    const lastContentRef = useRef('')
    const currentSessionIdRef = useRef<string | null>(null)

    // 使用本地草稿功能
    const localDraft = useLocalDraft(currentSessionIdRef.current || undefined)

    // 清除自動儲存計時器
    const clearAutoSaveTimeout = useCallback(() => {
        if (autoSaveTimeoutRef.current) {
            clearTimeout(autoSaveTimeoutRef.current)
            autoSaveTimeoutRef.current = null
        }
    }, [])

    // 執行儲存操作
    const performSave = useCallback(async (sessionId: string, content: string): Promise<void> => {
        if (!content.trim() || content === lastContentRef.current) {
            return // 沒有變更，不需要儲存
        }

        setIsSaving(true)
        setError(null)

        try {
            const updateData: NoteUpdateRequest = {
                content,
                client_ts: new Date().toISOString()
            }

            await notesAPI.updateNote(sessionId, updateData)

            setLastSaved(new Date())
            lastContentRef.current = content
            console.log('✅ 筆記儲存成功')

        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : '儲存筆記失敗'
            setError(errorMessage)
            console.error('❌ 儲存筆記失敗:', err)
        } finally {
            setIsSaving(false)
        }
    }, [])

    // 手動儲存筆記
    const saveNote = useCallback(async (sessionId: string): Promise<void> => {
        clearAutoSaveTimeout()
        await performSave(sessionId, noteContent)
    }, [noteContent, performSave, clearAutoSaveTimeout])

    // 更新筆記內容（觸發自動儲存）
    const updateNote = useCallback((content: string): void => {
        setNoteContent(content)

        // 立即儲存本地草稿
        localDraft.saveDraft(content)

        // 如果有 session ID，設定自動儲存到伺服器
        if (currentSessionIdRef.current) {
            clearAutoSaveTimeout()

            // 10 秒後自動儲存到伺服器
            autoSaveTimeoutRef.current = setTimeout(() => {
                performSave(currentSessionIdRef.current!, content)
            }, 10000)
        }
    }, [performSave, clearAutoSaveTimeout, localDraft])

    // 載入筆記
    const loadNote = useCallback(async (sessionId: string): Promise<void> => {
        currentSessionIdRef.current = sessionId
        setError(null)

        try {
            const note = await notesAPI.getNote(sessionId)
            const serverContent = note.content
            const serverTimestamp = new Date(note.updated_at)

            // 檢查是否有較新的本地草稿
            if (localDraft.hasDraft && localDraft.isDraftNewer(serverTimestamp)) {
                console.log('⚠️ 發現較新的本地草稿，使用草稿內容')
                setNoteContent(localDraft.draftContent)
                lastContentRef.current = localDraft.draftContent
                // 不設定 lastSaved，因為草稿內容尚未同步到伺服器
            } else {
                setNoteContent(serverContent)
                lastContentRef.current = serverContent
                setLastSaved(serverTimestamp)
                // 清除過時的本地草稿
                localDraft.clearDraft()
            }

            console.log('✅ 筆記載入成功')

        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : '載入筆記失敗'
            setError(errorMessage)
            console.error('❌ 載入筆記失敗:', err)

            // 如果筆記不存在，檢查是否有本地草稿
            if (errorMessage.includes('404') || errorMessage.includes('not found')) {
                if (localDraft.hasDraft) {
                    console.log('📝 使用本地草稿內容')
                    setNoteContent(localDraft.draftContent)
                } else {
                    setNoteContent('')
                }
                lastContentRef.current = ''
                console.log('🔄 初始化空筆記')
            }
        }
    }, [localDraft])

    // 清除筆記
    const clearNote = useCallback(() => {
        clearAutoSaveTimeout()
        setNoteContent('')
        setLastSaved(null)
        setError(null)
        lastContentRef.current = ''
        currentSessionIdRef.current = null
        localDraft.clearDraft()
        console.log('🔄 筆記已清除')
    }, [clearAutoSaveTimeout, localDraft])

    // 還原本地草稿
    const restoreDraft = useCallback(() => {
        const draftContent = localDraft.loadDraft()
        if (draftContent) {
            setNoteContent(draftContent)
            console.log('🔄 已還原本地草稿')
        }
    }, [localDraft])

    // 組件卸載時清理
    useEffect(() => {
        return () => {
            clearAutoSaveTimeout()
        }
    }, [clearAutoSaveTimeout])

    return useMemo(() => ({
        noteContent,
        lastSaved,
        isSaving,
        error,
        updateNote,
        saveNote,
        loadNote,
        clearNote,
        hasDraft: localDraft.hasDraft,
        lastDraftTime: localDraft.lastDraftTime,
        restoreDraft,
        clearDraft: localDraft.clearDraft,
    }), [
        noteContent,
        lastSaved,
        isSaving,
        error,
        updateNote,
        saveNote,
        loadNote,
        clearNote,
        localDraft.hasDraft,
        localDraft.lastDraftTime,
        restoreDraft,
        localDraft.clearDraft,
    ])
}


# END FILE CONTENTS


# File: frontend/components/ui/popover.tsx

"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }


# END FILE CONTENTS


# File: app/lib/prom_helpers.py

from prometheus_client import REGISTRY
from typing import Any

def metric_exists(name: str) -> bool:
    """判斷 default CollectorRegistry 裡是否已有同名 metric"""
    return any(m.name == name for m in REGISTRY.collect())

def safe_counter(name: str, documentation: str, labelnames: list[str] | None = None) -> Any:
    from prometheus_client import Counter
    if name in REGISTRY._names_to_collectors:
        return REGISTRY._names_to_collectors[name]
    return Counter(name, documentation, labelnames or [])

def safe_gauge(name: str, documentation: str, labelnames: list[str] | None = None) -> Any:
    from prometheus_client import Gauge
    if name in REGISTRY._names_to_collectors:
        return REGISTRY._names_to_collectors[name]
    return Gauge(name, documentation, labelnames or [])

def safe_summary(name: str, documentation: str, labelnames: list[str] | None = None) -> Any:
    from prometheus_client import Summary
    if name in REGISTRY._names_to_collectors:
        return REGISTRY._names_to_collectors[name]
    return Summary(name, documentation, labelnames or [])


# END FILE CONTENTS


# File: frontend/components/ui/checkbox.tsx

"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }


# END FILE CONTENTS


# File: frontend/hooks/use-app-state-new.ts

"use client"

import { useCallback, useEffect, useState, useRef } from "react"
import { useAppStateContext } from "./use-app-state-context"
import { useSession } from "./use-session-adapter"
import { useRecording } from "./use-recording-adapter"
import { useNotes } from "./use-notes"
import { useTranscript } from "./use-transcript-adapter"
import { useToast } from "@/components/ui/use-toast"
import type { AppData } from "../types/app-state"
import { StateMachineManager } from '../lib/state-machine';

/**
 * 新版本的 useAppState Hook
 * 使用 Context 狀態管理，大幅簡化原本 868 行的複雜邏輯
 * 將狀態管理委託給 AppStateContext，Hook 只負責業務邏輯
 */
export function useAppStateNew() {
  const context = useAppStateContext()
  const { appData, isLoading, error, dispatch, transition } = context
  const session = useSession()
  const recording = useRecording()
  const notes = useNotes()
  const transcript = useTranscript()
  const { toast } = useToast()

  console.log('🔄 [useAppStateNew] Hook 初始化:', {
    currentState: appData.state,
    isRecording: appData.isRecording,
    sessionId: appData.session?.id,
    transcriptCount: appData.transcriptEntries.length
  })

  const stateMachineManagerRef = useRef<StateMachineManager | null>(null);

  // 確保狀態機管理器只初始化一次，避免 React StrictMode 重複初始化
  if (!stateMachineManagerRef.current) {
    console.log('🔄 [useAppStateNew] 初始化狀態機管理器');

    const smManager = new StateMachineManager({
      currentState: appData.state,
      isRecording: appData.isRecording,
      transcriptCount: appData.transcriptEntries.length,
      session: appData.session || null,
      error: error,
    });

    // 立即註冊副作用處理器
    smManager.registerSideEffectHandler('CREATE_SESSION', {
      handleSideEffect: async (effect) => {
        console.log('🏗️ [副作用] CREATE_SESSION: 建立會話', effect);
        // 從狀態機上下文獲取標題
        const context = smManager.getStateMachine().getContext();
        const title = context.pendingSessionTitle || 'New Recording';
        const newSession = await session.createRecordingSession(title, appData.editorContent);
        if (newSession) {
          dispatch({ type: 'SET_SESSION', payload: newSession });
          // 更新狀態機上下文
          smManager.getStateMachine().updateContext({
            currentState: appData.state,
            isRecording: appData.isRecording,
            transcriptCount: appData.transcriptEntries.length,
            session: newSession,
            error: error,
            pendingSessionTitle: undefined, // 清除待建立會話標題
          });
          localStorage.removeItem('draft_note');
        } else {
          throw new Error('無法建立錄音會話');
        }
      }
    });
    smManager.registerSideEffectHandler('START_RECORDING', {
      handleSideEffect: async () => {
        // 從狀態機上下文獲取最新的 session 資訊
        const context = smManager.getStateMachine().getContext();
        if (context.session?.id) {
          console.log('🎤 [副作用] START_RECORDING: 開始錄音', context.session.id);
          await recording.startRecording(context.session.id);
        } else {
          console.error('🎤 [副作用] START_RECORDING: 沒有可用的 session');
        }
      }
    });
    smManager.registerSideEffectHandler('STOP_RECORDING', {
      handleSideEffect: async () => {
        await stopRecording();
      }
    });
    smManager.registerSideEffectHandler('CONNECT_WEBSOCKET', {
      handleSideEffect: async () => {
        // 從狀態機上下文獲取最新的 session 資訊
        const context = smManager.getStateMachine().getContext();
        if (context.session?.id) {
          console.log('🔌 [副作用] CONNECT_WEBSOCKET: 連接 WebSocket', context.session.id);
          await transcript.connect(context.session.id);
        } else {
          console.error('🔌 [副作用] CONNECT_WEBSOCKET: 沒有可用的 session');
        }
      }
    });
    smManager.registerSideEffectHandler('DISCONNECT_WEBSOCKET', {
      handleSideEffect: () => {
        transcript.disconnect();
      }
    });
    smManager.registerSideEffectHandler('FINISH_SESSION', {
      handleSideEffect: async () => {
        await finishSession();
      }
    });

    stateMachineManagerRef.current = smManager;
  }

  const stateMachineManager = stateMachineManagerRef.current;

  useEffect(() => {
    stateMachineManager.getStateMachine().updateContext({
      currentState: appData.state,
      isRecording: appData.isRecording,
      transcriptCount: appData.transcriptEntries.length,
      session: appData.session,
      error: error,
    });
  }, [appData, error, stateMachineManager]);

  // 建立純筆記會話
  const createNoteSession = useCallback(async (title?: string) => {
    dispatch({ type: 'SET_LOADING', payload: true })
    dispatch({ type: 'CLEAR_ERROR' })

    try {
      const newSession = await session.createNoteSession(title ?? undefined)
      if (newSession) {
        dispatch({ type: 'SET_SESSION', payload: newSession })

        // 載入筆記內容
        if (newSession.id) {
          await notes.loadNote(newSession.id)
        }

        // 清除本地草稿
        localStorage.removeItem('draft_note')

        console.log('✅ [useAppStateNew] 純筆記會話建立成功')

        toast({
          title: '筆記會話已建立',
          description: `會話 "${title}" 建立成功`,
        })
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '建立筆記會話失敗'
      dispatch({ type: 'SET_ERROR', payload: errorMessage })

      console.error('❌ [useAppStateNew] 建立筆記會話失敗:', err)

      toast({
        title: '建立失敗',
        description: errorMessage,
        variant: 'destructive',
      })
    } finally {
      dispatch({ type: 'SET_LOADING', payload: false })
    }
  }, [session, notes, toast, dispatch])

  // 建立錄音會話
  const createRecordingSession = useCallback(async (title?: string) => {
    dispatch({ type: 'SET_LOADING', payload: true })
    dispatch({ type: 'CLEAR_ERROR' })

    try {
      const newSession = await session.createRecordingSession(title, appData.editorContent)
      if (newSession) {
        dispatch({ type: 'SET_SESSION', payload: newSession })

        // 載入筆記內容
        await notes.loadNote(newSession.id)

        // 清除本地草稿
        localStorage.removeItem('draft_note')

        console.log('✅ [useAppStateNew] 錄音會話建立成功')

        toast({
          title: '錄音會話已建立',
          description: `會話 "${title}" 建立成功`,
        })
      }
    } catch (err) {
      // 特別處理會話衝突錯誤
      if (err instanceof Error && err.message.includes('檢測到活躍會話衝突')) {
        const conflictMsg = '偵測到會話衝突，請重新整理頁面後再試'
        dispatch({ type: 'SET_ERROR', payload: conflictMsg })

        toast({
          title: '會話衝突',
          description: '目前已有活躍會話，請重新整理頁面後再試，或等待當前會話結束',
          variant: 'destructive'
        })
        return
      }

      const errorMessage = err instanceof Error ? err.message : '建立錄音會話失敗'
      dispatch({ type: 'SET_ERROR', payload: errorMessage })

      console.error('❌ [useAppStateNew] 建立錄音會話失敗:', err)

      toast({
        title: '建立失敗',
        description: errorMessage,
        variant: 'destructive',
      })
    } finally {
      dispatch({ type: 'SET_LOADING', payload: false })
    }
  }, [session, notes, toast, dispatch, appData.editorContent])

  // 開始錄音 - 完全委託給狀態機
  const startRecording = useCallback(async (title?: string) => {
    console.log("🎤 [useAppStateNew] startRecording: 觸發狀態機")

    // 檢查狀態機是否已初始化
    if (!stateMachineManager) {
      console.error("🎤 [useAppStateNew] 狀態機尚未初始化")
      toast({ title: '系統初始化中', description: '請稍後再試', variant: 'destructive' })
      return
    }

    dispatch({ type: 'SET_LOADING', payload: true })

    try {
      // 如果當前狀態不是 default，先重置狀態
      if (appData.state !== 'default') {
        console.log("🔄 [useAppStateNew] 當前狀態非 default，先重置狀態:", appData.state)
        dispatch({ type: 'RESET_STATE' })
        // 清除相關狀態
        recording.clearTranscripts()
        transcript.clearTranscripts()
        // 更新狀態機上下文
        stateMachineManager.getStateMachine().updateContext({
          currentState: 'default',
          isRecording: false,
          transcriptCount: 0,
          session: null,
          error: null,
        });
      }

      // 檢查是否有現有會話需要處理
      const latestActiveSession = await session.checkActiveSession()
      const currentSession = latestActiveSession || session.currentSession

      // 更新狀態機上下文，包含待建立會話的標題
      stateMachineManager.getStateMachine().updateContext({
        currentState: 'default', // 確保從 default 狀態開始
        isRecording: appData.isRecording,
        transcriptCount: appData.transcriptEntries.length,
        session: currentSession,
        error: error,
        pendingSessionTitle: title,  // 傳遞標題給狀態機
      });

      if (currentSession?.type === 'note_only') {
        // 升級現有會話
        console.log("🎤 [useAppStateNew] 升級現有會話為錄音模式")
        const upgradedSession = await session.upgradeToRecording()
        if (upgradedSession) {
          dispatch({ type: 'SET_SESSION', payload: upgradedSession })
          // 再次更新狀態機上下文
          stateMachineManager.getStateMachine().updateContext({
            currentState: 'default', // 確保從 default 狀態開始
            isRecording: appData.isRecording,
            transcriptCount: appData.transcriptEntries.length,
            session: upgradedSession,
            error: error,
            pendingSessionTitle: title,
          });
        }
      }

      // 觸發狀態轉換 - 讓狀態機處理所有邏輯
      console.log("🎤 [useAppStateNew] 準備觸發狀態轉換 USER_START_RECORDING")
      const result = transition('USER_START_RECORDING');
      console.log("🎤 [useAppStateNew] 狀態轉換結果:", result)

      if (!result?.success) {
        throw new Error(result?.error || '狀態轉換失敗');
      }

      console.log("🎤 [useAppStateNew] 狀態機處理完成")
      toast({ title: '錄音開始' })

    } catch (err) {
      const msg = err instanceof Error ? err.message : '開始錄音失敗'
      dispatch({ type: 'SET_ERROR', payload: msg })

      console.error("🎤 [useAppStateNew] 錄音失敗:", msg)
      toast({ title: '錄音失敗', description: msg, variant: 'destructive' })
    } finally {
      dispatch({ type: 'SET_LOADING', payload: false })
    }
  }, [session, toast, dispatch, transition, stateMachineManager, appData.state, appData.isRecording, appData.transcriptEntries, error, recording, transcript])

  // 升級會話為錄音模式
  const upgradeToRecording = useCallback(async () => {
    dispatch({ type: 'SET_LOADING', payload: true })
    dispatch({ type: 'CLEAR_ERROR' })

    try {
      const updatedSession = await session.upgradeToRecording()
      if (updatedSession) {
        dispatch({ type: 'SET_SESSION', payload: updatedSession })

        console.log('✅ [useAppStateNew] 會話升級為錄音模式成功')

        toast({
          title: '升級成功',
          description: '會話已升級為錄音模式',
        })
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '升級會話失敗'
      dispatch({ type: 'SET_ERROR', payload: errorMessage })

      console.error('❌ [useAppStateNew] 升級會話失敗:', err)

      toast({
        title: '升級失敗',
        description: errorMessage,
        variant: 'destructive',
      })
    } finally {
      dispatch({ type: 'SET_LOADING', payload: false })
    }
  }, [session, toast, dispatch])

  // 停止錄音
  const stopRecording = useCallback(async () => {
    dispatch({ type: 'SET_LOADING', payload: true })
    dispatch({ type: 'CLEAR_ERROR' })

    try {
      await recording.stopRecording()
      transcript.disconnect()

      // 觸發狀態轉換
      transition('USER_STOP_RECORDING');

      console.log('✅ [useAppStateNew] 錄音停止，開始處理逐字稿')

      toast({
        title: '處理中',
        description: '正在處理錄音內容，請稍候...',
      })
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '停止錄音失敗'
      dispatch({ type: 'SET_ERROR', payload: errorMessage })

      console.error('❌ [useAppStateNew] 停止錄音失敗:', err)

      toast({
        title: '停止失敗',
        description: errorMessage,
        variant: 'destructive',
      })
    } finally {
      dispatch({ type: 'SET_LOADING', payload: false })
    }
  }, [recording, transcript, toast, dispatch, transition])

  // 完成會話
  const finishSession = useCallback(async () => {
    dispatch({ type: 'SET_LOADING', payload: true })
    dispatch({ type: 'CLEAR_ERROR' })

    try {
      await session.finishSession()
      // 在這裡不需要觸發狀態轉換，因為 stopRecording 已經處理了
      // dispatch({ type: 'SET_APP_STATE', payload: 'finished' })

      console.log('✅ [useAppStateNew] 會話完成')

      toast({
        title: '會話完成',
        description: '您可以匯出筆記或開始新的筆記',
      })
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '完成會話失敗'
      dispatch({ type: 'SET_ERROR', payload: errorMessage })

      console.error('❌ [useAppStateNew] 完成會話失敗:', err)

      toast({
        title: '完成失敗',
        description: errorMessage,
        variant: 'destructive',
      })
    } finally {
      dispatch({ type: 'SET_LOADING', payload: false })
    }
  }, [session, toast, dispatch])

  // 開新筆記
  const newNote = useCallback(async () => {
    dispatch({ type: 'SET_LOADING', payload: true })
    dispatch({ type: 'CLEAR_ERROR' })

    try {
      // 如果有活躍會話，先刪除它
      if (session.currentSession) {
        console.log('🗑️ [useAppStateNew] 刪除當前活躍會話:', session.currentSession.id)
        await session.deleteSession()
      }

      // 觸發狀態轉換
      transition('USER_NEW_NOTE');

      // 重置所有狀態
      dispatch({ type: 'RESET_STATE' })

      // 清除相關狀態
      recording.clearTranscripts()
      transcript.clearTranscripts()
      notes.clearNote()

      // 清除本地草稿
      localStorage.removeItem('draft_note')

      console.log('🔄 [useAppStateNew] 已開始新筆記')

      toast({
        title: '新筆記',
        description: '已清空內容，可以開始新的筆記',
      })
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '開始新筆記失敗'
      dispatch({ type: 'SET_ERROR', payload: errorMessage })

      console.error('❌ [useAppStateNew] 開始新筆記失敗:', err)

      toast({
        title: '操作失敗',
        description: errorMessage,
        variant: 'destructive',
      })
    } finally {
      dispatch({ type: 'SET_LOADING', payload: false })
    }
  }, [session, recording, transcript, notes, toast, dispatch, transition])

  // 自動儲存筆記內容到本地草稿
  const saveLocalDraft = useCallback((content: string) => {
    if (!session.currentSession && content.trim()) {
      localStorage.setItem('draft_note', content)
    }
    dispatch({ type: 'SET_EDITOR_CONTENT', payload: content })
  }, [session.currentSession, dispatch])

  // 使用 useCallback 來記憶函數
  const createRecordingSessionCallback = useCallback(createRecordingSession, [session, notes, toast, dispatch, appData.editorContent]);
  const startRecordingCallback = useCallback(startRecording, [session, recording, toast, dispatch, appData.editorContent, transition]);
  const stopRecordingCallback = useCallback(stopRecording, [recording, transcript, toast, dispatch, transition]);
  const finishSessionCallback = useCallback(finishSession, [session, toast, dispatch]);
  const connectTranscriptCallback = useCallback(transcript.connect, [transcript]);
  const disconnectTranscriptCallback = useCallback(transcript.disconnect, [transcript]);

  return {
    // 應用狀態（向後相容）
    appData,
    isLoading,
    error,

    // 會話管理
    createNoteSession,
    createRecordingSession,
    upgradeToRecording,
    finishSession,
    newNote,

    // 錄音控制
    startRecording,
    stopRecording,

    // 本地草稿
    saveLocalDraft,

    // 外部狀態（向後相容）
    session: session.currentSession,
    sessionLoading: session.isLoading,
    sessionError: session.error,

    // 錄音狀態
    recordingError: recording.error,

    // 逐字稿狀態
    transcriptConnected: transcript.isConnected,
    transcriptError: transcript.error,
    transcriptAutoScroll: transcript.autoScrollEnabled,
    enableAutoScroll: transcript.enableAutoScroll,
    disableAutoScroll: transcript.disableAutoScroll,
    scrollToLatest: transcript.scrollToLatest,
  }
}


# END FILE CONTENTS


# File: app/services/azure_openai_v2.py

#!/usr/bin/env python3
"""
音訊轉錄服務 v2
使用大切片（10-15秒）+ 直接轉換的架構，避免複雜的 WebM 合併
"""

import asyncio
import logging
import subprocess
import tempfile
import time
from datetime import datetime
from pathlib import Path
from typing import Dict, Optional, Any, Set
from uuid import UUID
import json
import os
from asyncio import PriorityQueue, Semaphore

from openai import AsyncAzureOpenAI, RateLimitError
from httpx import Timeout

# Task 5: Prometheus 監控依賴
try:
    import prometheus_client as prom
    PROMETHEUS_AVAILABLE = True
except ImportError:
    PROMETHEUS_AVAILABLE = False
    logger.warning("prometheus-client 未安裝，監控指標將被停用")

from ..db.database import get_supabase_client
from app.core.config import settings
from app.core.ffmpeg import detect_audio_format
from app.core.webm_header_repairer import WebMHeaderRepairer
from app.ws.transcript_feed import manager as transcript_manager
from app.services.r2_client import R2Client

logger = logging.getLogger(__name__)

# Task 5: Prometheus 監控指標
if PROMETHEUS_AVAILABLE:
    # 轉錄請求計數器
    WHISPER_REQ_TOTAL = prom.Counter(
        "whisper_requests_total",
        "Total Whisper API requests",
        ["status", "deployment"]
    )

    # 轉錄延遲指標
    WHISPER_LATENCY_SECONDS = prom.Summary(
        "whisper_latency_seconds",
        "Whisper API latency",
        ["deployment"]
    )

    # 隊列積壓指標
    WHISPER_BACKLOG_GAUGE = prom.Gauge(
        "whisper_backlog_size",
        "Current queue backlog size"
    )

    # 隊列處理統計
    QUEUE_PROCESSED_TOTAL = prom.Counter(
        "queue_processed_total",
        "Total processed jobs",
        ["status"]
    )

    # 隊列等待時間
    QUEUE_WAIT_SECONDS = prom.Summary(
        "queue_wait_seconds",
        "Time jobs spend waiting in queue"
    )

    # 併發處理數量
    CONCURRENT_JOBS_GAUGE = prom.Gauge(
        "concurrent_transcription_jobs",
        "Current number of concurrent transcription jobs"
    )

    # 滑動視窗專用指標
    SLIDING_WINDOW_PERMITS = prom.Gauge(
        "sliding_window_available_permits",
        "Available permits in sliding window rate limiter"
    )

    SLIDING_WINDOW_ACTIVE_REQUESTS = prom.Gauge(
        "sliding_window_active_requests",
        "Current active requests in sliding window"
    )

    SLIDING_WINDOW_QUEUE_TIME = prom.Summary(
        "sliding_window_queue_seconds",
        "Time spent waiting for sliding window permit"
    )

    API_QUOTA_UTILIZATION = prom.Gauge(
        "azure_api_quota_utilization_percent",
        "Azure API quota utilization percentage"
    )

    RATE_LIMITER_TYPE = prom.Gauge(
        "rate_limiter_type",
        "Type of rate limiter in use (0=traditional, 1=sliding_window)",
        ["limiter_type"]
    )

    # 段落過濾指標
    WHISPER_SEGMENTS_FILTERED = prom.Counter(
        "whisper_segments_filtered_total",
        "Total number of segments filtered by quality checks",
        ["reason", "deployment"]
    )

    logger.info("📊 [Metrics] Prometheus 監控指標已初始化")
else:
    # 如果 Prometheus 不可用，創建空的佔位符
    class NoOpMetric:
        def inc(self, *args, **kwargs): pass
        def set(self, *args, **kwargs): pass
        def time(self): return self
        def __enter__(self): return self
        def __exit__(self, *args): pass
        def labels(self, *args, **kwargs): return self

    WHISPER_REQ_TOTAL = NoOpMetric()
    WHISPER_LATENCY_SECONDS = NoOpMetric()
    WHISPER_BACKLOG_GAUGE = NoOpMetric()
    QUEUE_PROCESSED_TOTAL = NoOpMetric()
    QUEUE_WAIT_SECONDS = NoOpMetric()
    CONCURRENT_JOBS_GAUGE = NoOpMetric()
    SLIDING_WINDOW_PERMITS = NoOpMetric()
    SLIDING_WINDOW_ACTIVE_REQUESTS = NoOpMetric()
    SLIDING_WINDOW_QUEUE_TIME = NoOpMetric()
    API_QUOTA_UTILIZATION = NoOpMetric()
    RATE_LIMITER_TYPE = NoOpMetric()
    WHISPER_SEGMENTS_FILTERED = NoOpMetric()

# 全域效能監控開關
ENABLE_PERFORMANCE_LOGGING = os.getenv("ENABLE_PERFORMANCE_LOGGING", "true").lower() == "true"

# Task 1: 優化的 timeout 配置
TIMEOUT = Timeout(connect=5, read=55, write=30, pool=5)

# Task 3: 併發控制與任務優先級配置（使用settings配置值）
# 改為從 settings 動態讀取，支援環境變數配置
QUEUE_HIGH_PRIORITY = 0  # 重試任務高優先級
QUEUE_NORMAL_PRIORITY = 1  # 正常任務

# Task 4: 音訊段落配置 - 移除硬編碼，使用配置值
# CHUNK_DURATION 現在在第 751 行從 settings.AUDIO_CHUNK_DURATION_SEC 讀取
PROCESSING_TIMEOUT = 60  # 處理超時時間（秒）

class PerformanceTimer:
    """效能計時器"""

    def __init__(self, operation_name: str):
        self.operation_name = operation_name
        self.start_time = None
        self.end_time = None

    def __enter__(self):
        self.start_time = time.time()
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.end_time = time.time()
        duration = self.get_duration()

        if ENABLE_PERFORMANCE_LOGGING:
            if duration > 1.0:  # 記錄超過1秒的操作
                logger.warning(f"⚠️  {self.operation_name} took {duration:.2f}s (slow)")
            else:
                logger.info(f"⏱️  {self.operation_name} completed in {duration:.2f}s")

    def get_duration(self) -> float:
        if self.start_time and self.end_time:
            return self.end_time - self.start_time
        return 0.0

# Task 2: 智能頻率限制處理器
class RateLimitHandler:
    """智能頻率限制處理器 - 避免過長等待"""

    def __init__(self):
        self._delay = 0
        logger.info("🚦 [RateLimitHandler] 頻率限制處理器已初始化")

    async def wait(self):
        """等待當前延遲時間"""
        if self._delay:
            logger.info(f"⏳ [RateLimitHandler] 等待 {self._delay}s 避免頻率限制")
            await asyncio.sleep(self._delay)

    def backoff(self):
        """增加退避延遲（指數退避，最大 60 秒）"""
        previous_delay = self._delay
        self._delay = min((self._delay or 5) * 2, 60)  # 最大 60 秒
        logger.warning(f"📈 [RateLimitHandler] 退避延遲：{previous_delay}s → {self._delay}s")

    def reset(self):
        """重置延遲（API 呼叫成功時）"""
        if self._delay > 0:
            logger.info(f"✅ [RateLimitHandler] 重置延遲：{self._delay}s → 0s")
            self._delay = 0

# 滑動視窗頻率限制處理器
class SlidingWindowRateLimiter:
    """滑動視窗頻率限制處理器 - 精確控制 API 配額使用"""

    def __init__(self, max_requests: int = 3, window_seconds: int = 60):
        """
        初始化滑動視窗頻率限制器

        Args:
            max_requests: 滑動視窗內最大請求數（預設 3）
            window_seconds: 滑動視窗時間長度（預設 60 秒）
        """
        self.max_requests = max_requests
        self.window_seconds = window_seconds
        self.semaphore = Semaphore(max_requests)
        self.active_requests = 0
        self.total_acquired = 0
        self.total_released = 0
        self._lock = asyncio.Lock()  # 保護統計數據的一致性

        logger.info(f"🪟 [SlidingWindow] 初始化完成：{max_requests} requests/{window_seconds}s")

    async def acquire(self) -> None:
        """
        取得 API 呼叫許可

        使用 semaphore 控制併發數，並通過 call_later 實現滑動視窗自動釋放
        """
        logger.debug(f"🎫 [SlidingWindow] 請求許可，當前活躍: {self.active_requests}/{self.max_requests}")

        # 記錄等待開始時間（用於 Prometheus 指標）
        wait_start_time = time.time()

        # 等待 semaphore 許可
        await self.semaphore.acquire()

        # 計算等待時間並更新 Prometheus 指標
        wait_duration = time.time() - wait_start_time
        SLIDING_WINDOW_QUEUE_TIME.observe(wait_duration)

        # 更新統計數據（使用鎖保護）
        async with self._lock:
            self.active_requests += 1
            self.total_acquired += 1

        # 更新 Prometheus 指標
        SLIDING_WINDOW_ACTIVE_REQUESTS.set(self.active_requests)
        SLIDING_WINDOW_PERMITS.set(self.max_requests - self.active_requests)

        # 更新配額利用率指標
        utilization = (self.active_requests / self.max_requests) * 100
        API_QUOTA_UTILIZATION.set(utilization)

        # 安排 window_seconds 後自動釋放許可
        try:
            loop = asyncio.get_event_loop()
            loop.call_later(self.window_seconds, self._release_permit)
            logger.debug(f"✅ [SlidingWindow] 許可已取得，活躍請求: {self.active_requests}, 將在 {self.window_seconds}s 後自動釋放")
        except Exception as e:
            # 如果 call_later 失敗，立即釋放許可避免死鎖
            logger.error(f"❌ [SlidingWindow] call_later 設定失敗: {e}")
            self.semaphore.release()
            async with self._lock:
                self.active_requests = max(0, self.active_requests - 1)
            # 回滾 Prometheus 指標
            SLIDING_WINDOW_ACTIVE_REQUESTS.set(self.active_requests)
            SLIDING_WINDOW_PERMITS.set(self.max_requests - self.active_requests)
            utilization = (self.active_requests / self.max_requests) * 100
            API_QUOTA_UTILIZATION.set(utilization)
            raise

    def _release_permit(self) -> None:
        """
        釋放許可（私有方法，由 call_later 調用）

        注意：此方法在事件循環的回調中執行，必須是同步的
        """
        try:
            self.semaphore.release()

            # 更新統計數據（注意：此處無法使用 async lock）
            # 使用原子操作確保一致性
            self.active_requests = max(0, self.active_requests - 1)
            self.total_released += 1

            # 更新 Prometheus 指標
            SLIDING_WINDOW_ACTIVE_REQUESTS.set(self.active_requests)
            SLIDING_WINDOW_PERMITS.set(self.max_requests - self.active_requests)

            # 更新配額利用率指標
            utilization = (self.active_requests / self.max_requests) * 100
            API_QUOTA_UTILIZATION.set(utilization)

            logger.debug(f"🎫 [SlidingWindow] 許可已自動釋放，活躍請求: {self.active_requests}")
        except Exception as e:
            logger.error(f"❌ [SlidingWindow] 釋放許可時發生錯誤: {e}")

    async def wait(self) -> None:
        """
        等待許可（相容於 RateLimitHandler 介面）

        此方法提供與現有 RateLimitHandler.wait() 相同的介面
        """
        await self.acquire()

    def get_stats(self) -> dict:
        """
        獲取滑動視窗統計資訊

        Returns:
            dict: 包含當前狀態的統計資訊
        """
        return {
            'type': 'sliding_window',
            'max_requests': self.max_requests,
            'window_seconds': self.window_seconds,
            'active_requests': self.active_requests,
            'available_permits': self.max_requests - self.active_requests,
            'total_acquired': self.total_acquired,
            'total_released': self.total_released,
            'utilization_percent': (self.active_requests / self.max_requests) * 100 if self.max_requests > 0 else 0,
            'is_at_capacity': self.active_requests >= self.max_requests
        }

    def reset(self) -> None:
        """
        重置統計數據（保持與 RateLimitHandler 介面一致）

        注意：此方法不會影響當前的 semaphore 狀態或活躍請求
        """
        logger.info(f"🔄 [SlidingWindow] 重置統計數據")
        self.total_acquired = 0
        self.total_released = 0

    def backoff(self) -> None:
        """
        退避處理（相容於 RateLimitHandler 介面）

        對於滑動視窗 Rate Limiter，退避實際上是由自動排隊機制處理，
        此方法主要用於記錄和統計目的
        """
        logger.warning(f"🚦 [SlidingWindow] 遇到 429 錯誤，滑動視窗將自動處理退避")

    @property
    def _delay(self) -> int:
        """
        模擬延遲屬性（相容於 RateLimitHandler 介面）

        對於滑動視窗，"延遲"概念是基於可用許可數量計算的預估等待時間
        """
        if self.active_requests >= self.max_requests:
            # 如果已達容量上限，估算需要等待的時間
            return max(1, self.window_seconds // 4)  # 估算等待時間
        return 0

    def __str__(self) -> str:
        """字串表示"""
        return f"SlidingWindowRateLimiter({self.max_requests}/{self.window_seconds}s, active={self.active_requests})"

    def __repr__(self) -> str:
        """詳細字串表示"""
        return f"SlidingWindowRateLimiter(max_requests={self.max_requests}, window_seconds={self.window_seconds}, active_requests={self.active_requests})"

# Task 3: 轉錄任務佇列管理器
class TranscriptionQueueManager:
    """優先級隊列管理器 - 確保順序處理並避免積壓"""

    def __init__(self):
        # 優先級隊列 (priority, timestamp, job_data)
        self.queue: PriorityQueue = PriorityQueue(maxsize=settings.MAX_QUEUE_SIZE)
        # 併發控制信號量（使用配置值）
        self.semaphore = Semaphore(settings.MAX_CONCURRENT_TRANSCRIPTIONS)
        # Worker 任務
        self.workers: list[asyncio.Task] = []
        # Task 4: 積壓監控任務
        self.backlog_monitor_task: Optional[asyncio.Task] = None
        # 統計數據
        self.total_processed = 0
        self.total_failed = 0
        self.total_retries = 0
        # Task 4: 積壓閾值和監控間隔（使用配置值）
        self.backlog_threshold = settings.QUEUE_BACKLOG_THRESHOLD
        self.monitor_interval = settings.QUEUE_MONITOR_INTERVAL
        self.last_backlog_alert = 0  # 上次積壓警報時間
        self.backlog_alert_cooldown = settings.QUEUE_ALERT_COOLDOWN
        # 運行狀態
        self.is_running = False

        logger.info(f"🎯 [QueueManager] 初始化完成：max_concurrent={settings.MAX_CONCURRENT_TRANSCRIPTIONS}, max_queue={settings.MAX_QUEUE_SIZE}")

    async def start_workers(self, num_workers: int = None):
        """啟動 Worker 任務"""
        if self.is_running:
            logger.warning("⚠️ [QueueManager] Workers already running")
            return

        # 使用配置值作為默認值
        if num_workers is None:
            num_workers = settings.TRANSCRIPTION_WORKERS_COUNT

        self.is_running = True
        logger.info(f"🚀 [QueueManager] 啟動 {num_workers} 個 Workers（配置值：{settings.TRANSCRIPTION_WORKERS_COUNT}）")

        # 啟動工作線程
        for i in range(num_workers):
            worker_task = asyncio.create_task(self._worker(f"Worker-{i+1}"))
            self.workers.append(worker_task)

        # Task 4: 啟動積壓監控
        self.backlog_monitor_task = asyncio.create_task(self._backlog_monitor())
        logger.info("📊 [QueueManager] 積壓監控已啟動")

    async def stop_workers(self):
        """停止所有 Workers"""
        if not self.is_running:
            return

        logger.info("⏹️ [QueueManager] 停止所有 Workers")
        self.is_running = False

        # Task 4: 停止積壓監控
        if self.backlog_monitor_task:
            self.backlog_monitor_task.cancel()
            try:
                await self.backlog_monitor_task
            except asyncio.CancelledError:
                pass

        # 取消所有 worker 任務
        for worker in self.workers:
            worker.cancel()

        # 等待所有任務完成
        await asyncio.gather(*self.workers, return_exceptions=True)
        self.workers.clear()

    async def enqueue_job(self, session_id: UUID, chunk_sequence: int, webm_data: bytes, priority: int = QUEUE_NORMAL_PRIORITY):
        """將轉錄任務加入隊列"""
        timestamp = time.time()
        job_data = {
            'session_id': session_id,
            'chunk_sequence': chunk_sequence,
            'webm_data': webm_data,
            'timestamp': timestamp,
            'retry_count': 0
        }

        try:
            # 使用 put_nowait 避免阻塞，如果隊列滿了會拋出異常
            self.queue.put_nowait((priority, timestamp, job_data))

            # Task 5: 更新隊列大小指標
            queue_size = self.queue.qsize()
            WHISPER_BACKLOG_GAUGE.set(queue_size)

            priority_name = "HIGH" if priority == QUEUE_HIGH_PRIORITY else "NORMAL"
            logger.info(f"📥 [QueueManager] 任務已入隊：session={session_id}, chunk={chunk_sequence}, priority={priority_name}, queue_size={queue_size}")

        except asyncio.QueueFull:
            logger.error(f"❌ [QueueManager] 隊列已滿 ({settings.MAX_QUEUE_SIZE})，丟棄任務：session={session_id}, chunk={chunk_sequence}")
            # 可以考慮廣播隊列滿的錯誤到前端
            await self._broadcast_queue_full_error(session_id, chunk_sequence)
            raise Exception(f"Transcription queue is full ({settings.MAX_QUEUE_SIZE}), please try again later")

    async def _worker(self, worker_name: str):
        """Worker 協程 - 處理隊列中的任務"""
        logger.info(f"👷 [QueueManager] {worker_name} 開始工作")

        while self.is_running:
            try:
                # 等待任務
                try:
                    priority, timestamp, job_data = await asyncio.wait_for(
                        self.queue.get(),
                        timeout=1.0  # 1秒超時，讓 worker 能定期檢查運行狀態
                    )
                except asyncio.TimeoutError:
                    continue  # 超時後繼續檢查運行狀態

                # 檢查任務是否過期
                age = time.time() - timestamp
                if age > settings.QUEUE_TIMEOUT_SECONDS:
                    logger.warning(f"⏰ [QueueManager] {worker_name} 丟棄過期任務：age={age:.1f}s, session={job_data['session_id']}, chunk={job_data['chunk_sequence']}")
                    self.queue.task_done()
                    continue

                # Task 5: 記錄隊列等待時間
                wait_time = time.time() - timestamp
                QUEUE_WAIT_SECONDS.observe(wait_time)

                # 獲取併發控制權
                async with self.semaphore:
                    session_id = job_data['session_id']
                    chunk_sequence = job_data['chunk_sequence']

                    logger.info(f"🔧 [QueueManager] {worker_name} 處理任務：session={session_id}, chunk={chunk_sequence}, age={age:.1f}s, wait={wait_time:.1f}s")

                    try:
                        # 執行轉錄
                        result = await self._process_transcription_job(job_data)

                        if result is True:
                            self.total_processed += 1
                            # Task 5: 記錄成功處理的任務
                            QUEUE_PROCESSED_TOTAL.labels(status="success").inc()
                            logger.info(f"✅ [QueueManager] {worker_name} 任務完成：session={session_id}, chunk={chunk_sequence}")
                        elif result == "filtered":
                            self.total_processed += 1
                            # Task 5: 記錄被過濾的任務
                            QUEUE_PROCESSED_TOTAL.labels(status="filtered").inc()
                            logger.info(f"🔇 [QueueManager] {worker_name} 任務被過濾（靜音），跳過重試：session={session_id}, chunk={chunk_sequence}")
                        else:
                            # 處理失敗，決定是否重試
                            # Task 5: 記錄失敗處理的任務
                            QUEUE_PROCESSED_TOTAL.labels(status="failed").inc()
                            await self._handle_job_failure(job_data, worker_name)

                    except Exception as e:
                        logger.error(f"💥 [QueueManager] {worker_name} 任務異常：session={session_id}, chunk={chunk_sequence}, error={e}")
                        # Task 5: 記錄異常處理的任務
                        QUEUE_PROCESSED_TOTAL.labels(status="exception").inc()
                        await self._handle_job_failure(job_data, worker_name)

                # 標記任務完成
                self.queue.task_done()

            except Exception as e:
                logger.error(f"💥 [QueueManager] {worker_name} Worker 異常：{e}")
                await asyncio.sleep(1)  # 短暫休息後繼續

        logger.info(f"👷 [QueueManager] {worker_name} 停止工作")

    async def _process_transcription_job(self, job_data: dict) -> bool:
        """處理單個轉錄任務"""
        session_id = job_data['session_id']
        chunk_sequence = job_data['chunk_sequence']
        webm_data = job_data['webm_data']

        try:
            # 獲取轉錄服務
            service = await initialize_transcription_service_v2()
            if not service:
                logger.error(f"❌ [QueueManager] 轉錄服務不可用：session={session_id}, chunk={chunk_sequence}")
                return False

            # 執行轉錄
            result = await service._transcribe_audio(webm_data, session_id, chunk_sequence)
            if result:
                # 檢查是否為被過濾的結果
                if isinstance(result, dict) and result.get("filtered"):
                    logger.info(f"🔇 [QueueManager] Chunk {chunk_sequence} 被靜音過濾，跳過重試：session={session_id}")
                    return "filtered"  # 返回特殊標記，表示不需要重試
                else:
                    # 儲存並廣播正常結果
                    await service._save_and_push_result(session_id, chunk_sequence, result)
                    return True
            else:
                logger.warning(f"⚠️ [QueueManager] 轉錄無結果：session={session_id}, chunk={chunk_sequence}")
                return False

        except RateLimitError as e:
            logger.warning(f"🚦 [頻率限制] Chunk {chunk_sequence} 遇到 429 錯誤：{str(e)}")
            # 注意：這裡不調用 rate_limit.backoff()，因為它是在轉錄服務中處理的
            return False
        except Exception as e:
            logger.error(f"❌ [QueueManager] 轉錄失敗：session={session_id}, chunk={chunk_sequence}, error={e}")
            return False

    async def _handle_job_failure(self, job_data: dict, worker_name: str):
        """處理任務失敗（暫時不 Retry）"""
        session_id = job_data['session_id']
        chunk_sequence = job_data['chunk_sequence']
        # retry_count = job_data.get('retry_count', 0)

        # 直接記錄失敗，不再重試
        self.total_failed += 1
        logger.error(f"❌ [QueueManager] {worker_name} 任務最終失敗：session={session_id}, chunk={chunk_sequence}, no_retry")

        # 廣播最終失敗通知
        await self._broadcast_final_failure(session_id, chunk_sequence)

    async def _broadcast_queue_full_error(self, session_id: UUID, chunk_sequence: int):
        """廣播隊列滿錯誤"""
        try:
            error_data = {
                "type": "transcription_error",
                "error_type": "queue_full",
                "message": f"轉錄隊列已滿 ({settings.MAX_QUEUE_SIZE})，請稍後重試",
                "session_id": str(session_id),
                "chunk_sequence": chunk_sequence,
                "timestamp": datetime.utcnow().isoformat()
            }
            await transcript_manager.broadcast(
                json.dumps(error_data),
                str(session_id)
            )
        except Exception as e:
            logger.error(f"Failed to broadcast queue full error: {e}")

    async def _broadcast_final_failure(self, session_id: UUID, chunk_sequence: int):
        """廣播最終失敗通知"""
        try:
            error_data = {
                "type": "transcription_error",
                "error_type": "final_failure",
                "message": f"段落 {chunk_sequence} 轉錄最終失敗，已達最大重試次數",
                "session_id": str(session_id),
                "chunk_sequence": chunk_sequence,
                "timestamp": datetime.utcnow().isoformat()
            }
            await transcript_manager.broadcast(
                json.dumps(error_data),
                str(session_id)
            )
        except Exception as e:
            logger.error(f"Failed to broadcast final failure: {e}")

    # Task 4: 積壓監控器
    async def _backlog_monitor(self):
        """積壓監控協程 - 定期檢查隊列積壓並通知前端"""
        logger.info("📊 [BacklogMonitor] 積壓監控開始")

        while self.is_running:
            try:
                queue_size = self.queue.qsize()
                current_time = time.time()

                # 檢查是否超過積壓閾值
                if queue_size > self.backlog_threshold:
                    # 檢查冷卻時間，避免頻繁通知
                    if current_time - self.last_backlog_alert > self.backlog_alert_cooldown:
                        await self._broadcast_backlog_alert(queue_size)
                        self.last_backlog_alert = current_time
                        logger.warning(f"⚠️ [BacklogMonitor] 隊列積壓警報：queue_size={queue_size}, threshold={self.backlog_threshold}")

                # 記錄隊列狀態（調試用）
                if queue_size > 0:
                    logger.debug(f"📊 [BacklogMonitor] 隊列狀態：size={queue_size}, processed={self.total_processed}, failed={self.total_failed}")

                # 等待下次檢查
                await asyncio.sleep(self.monitor_interval)

            except Exception as e:
                logger.error(f"💥 [BacklogMonitor] 監控異常：{e}")
                await asyncio.sleep(self.monitor_interval)

        logger.info("📊 [BacklogMonitor] 積壓監控停止")

    async def _broadcast_backlog_alert(self, queue_size: int):
        """廣播積壓警報到所有活躍會話"""
        try:
            # 計算預估等待時間
            estimated_wait_minutes = (queue_size * 12) // 60  # 假設每個任務平均 12 秒

            alert_data = {
                "event": "stt_backlog",
                "type": "backlog_alert",
                "queue_size": queue_size,
                "threshold": self.backlog_threshold,
                "estimated_wait_minutes": estimated_wait_minutes,
                "message": f"轉錄隊列積壓：{queue_size} 個任務等待處理，預估延遲 {estimated_wait_minutes} 分鐘",
                "timestamp": datetime.utcnow().isoformat(),
                "level": "warning" if queue_size < self.backlog_threshold * 2 else "critical"
            }

            # 廣播到所有活躍連接
            active_connections = getattr(transcript_manager, 'active_connections', {})
            if active_connections:
                broadcast_message = json.dumps(alert_data)

                # 廣播到所有會話
                for session_id in list(active_connections.keys()):
                    try:
                        await transcript_manager.broadcast(broadcast_message, session_id)
                    except Exception as e:
                        logger.warning(f"Failed to broadcast backlog alert to session {session_id}: {e}")

                logger.info(f"📢 [BacklogMonitor] 積壓警報已廣播到 {len(active_connections)} 個會話")
            else:
                logger.debug("📢 [BacklogMonitor] 無活躍會話，跳過積壓警報廣播")

        except Exception as e:
            logger.error(f"Failed to broadcast backlog alert: {e}")

    async def _broadcast_queue_recovery(self, queue_size: int):
        """廣播隊列恢復正常通知"""
        try:
            recovery_data = {
                "event": "stt_recovery",
                "type": "queue_recovery",
                "queue_size": queue_size,
                "message": f"轉錄隊列已恢復正常：當前 {queue_size} 個任務",
                "timestamp": datetime.utcnow().isoformat(),
                "level": "info"
            }

            # 廣播到所有活躍連接
            active_connections = getattr(transcript_manager, 'active_connections', {})
            if active_connections:
                broadcast_message = json.dumps(recovery_data)

                for session_id in list(active_connections.keys()):
                    try:
                        await transcript_manager.broadcast(broadcast_message, session_id)
                    except Exception as e:
                        logger.warning(f"Failed to broadcast recovery to session {session_id}: {e}")

                logger.info(f"📢 [BacklogMonitor] 恢復通知已廣播到 {len(active_connections)} 個會話")

        except Exception as e:
            logger.error(f"Failed to broadcast queue recovery: {e}")

    def get_stats(self) -> dict:
        """獲取隊列統計信息"""
        queue_size = self.queue.qsize()
        return {
            'queue_size': queue_size,
            'max_queue_size': settings.MAX_QUEUE_SIZE,
            'total_processed': self.total_processed,
            'total_failed': self.total_failed,
            'total_retries': self.total_retries,
            'workers_count': len(self.workers),
            'is_running': self.is_running,
            # Task 4: 積壓監控統計
            'backlog_threshold': self.backlog_threshold,
            'is_backlogged': queue_size > self.backlog_threshold,
            'monitor_interval': self.monitor_interval,
            'last_backlog_alert': self.last_backlog_alert,
            'estimated_wait_seconds': queue_size * 12 if queue_size > 0 else 0
        }

# 配置常數
CHUNK_DURATION = settings.AUDIO_CHUNK_DURATION_SEC  # 從配置讀取切片時長
PROCESSING_TIMEOUT = 30  # 處理超時（秒）
MAX_RETRIES = 3  # 最大重試次數

# 全域集合追蹤已廣播 active 相位的 session
_active_phase_sent: Set[str] = set()

# Rate Limiter 工廠函數
def get_rate_limiter():
    """
    Rate Limiter 工廠函數 - 根據配置選擇適當的頻率限制策略

    Returns:
        RateLimitHandler 或 SlidingWindowRateLimiter 實例
    """
    if settings.USE_SLIDING_WINDOW_RATE_LIMIT:
        logger.info(f"🪟 [配置] 使用滑動視窗頻率限制：{settings.SLIDING_WINDOW_MAX_REQUESTS} requests/{settings.SLIDING_WINDOW_SECONDS}s")

        # 更新 Rate Limiter 類型指標
        RATE_LIMITER_TYPE.labels(limiter_type="sliding_window").set(1)
        RATE_LIMITER_TYPE.labels(limiter_type="traditional").set(0)

        return SlidingWindowRateLimiter(
            max_requests=settings.SLIDING_WINDOW_MAX_REQUESTS,
            window_seconds=settings.SLIDING_WINDOW_SECONDS
        )
    else:
        logger.info("🚦 [配置] 使用傳統指數退避頻率限制")

        # 更新 Rate Limiter 類型指標
        RATE_LIMITER_TYPE.labels(limiter_type="traditional").set(1)
        RATE_LIMITER_TYPE.labels(limiter_type="sliding_window").set(0)

        return RateLimitHandler()

# 全域頻率限制處理器（動態選擇）
rate_limit = get_rate_limiter()

# Task 3: 全域隊列管理器
queue_manager = TranscriptionQueueManager()

class SimpleAudioTranscriptionService:
    """簡化的音訊轉錄服務"""

    def __init__(self, azure_client: AsyncAzureOpenAI, deployment_name: str):
        self.client = azure_client
        self.deployment_name = deployment_name
        self.processing_tasks: Dict[str, asyncio.Task] = {}

    def _keep(self, segment: dict) -> bool:
        """
        根據 Whisper verbose_json 回應判斷是否保留轉錄段落

        使用 no_speech_prob、avg_logprob、compression_ratio 等指標過濾幻覺內容

        Args:
            segment: Whisper verbose_json 格式的段落資料

        Returns:
            bool: True 表示保留段落，False 表示過濾掉
        """
        try:
            # 檢查必要欄位是否存在
            required_fields = ['no_speech_prob', 'avg_logprob', 'compression_ratio']
            for field in required_fields:
                if field not in segment:
                    logger.warning(f"🔍 [段落過濾] 段落缺少必要欄位 '{field}'，過濾掉")
                    WHISPER_SEGMENTS_FILTERED.labels(
                        reason="missing_field",
                        deployment=self.deployment_name
                    ).inc()
                    return False

            # 提取過濾指標
            no_speech_prob = segment['no_speech_prob']
            avg_logprob = segment['avg_logprob']
            compression_ratio = segment['compression_ratio']

            # 過濾條件 1: 靜音檢測 - no_speech_prob 過高
            if no_speech_prob >= settings.FILTER_NO_SPEECH:
                logger.debug(f"🔇 [段落過濾] 靜音機率過高: {no_speech_prob:.3f} >= {settings.FILTER_NO_SPEECH}")
                WHISPER_SEGMENTS_FILTERED.labels(
                    reason="no_speech",
                    deployment=self.deployment_name
                ).inc()
                return False

            # 過濾條件 2: 置信度檢測 - avg_logprob 過低
            if avg_logprob < settings.FILTER_LOGPROB:
                logger.debug(f"📉 [段落過濾] 置信度過低: {avg_logprob:.3f} < {settings.FILTER_LOGPROB}")
                WHISPER_SEGMENTS_FILTERED.labels(
                    reason="low_confidence",
                    deployment=self.deployment_name
                ).inc()
                return False

            # 過濾條件 3: 重複內容檢測 - compression_ratio 過高
            if compression_ratio > settings.FILTER_COMPRESSION:
                logger.debug(f"🔄 [段落過濾] 重複比率過高: {compression_ratio:.3f} > {settings.FILTER_COMPRESSION}")
                WHISPER_SEGMENTS_FILTERED.labels(
                    reason="high_compression",
                    deployment=self.deployment_name
                ).inc()
                return False

            # 所有檢查通過，保留段落
            logger.debug(f"✅ [段落過濾] 段落品質良好，保留")
            logger.debug(f"   - 靜音機率: {no_speech_prob:.3f} < {settings.FILTER_NO_SPEECH}")
            logger.debug(f"   - 置信度: {avg_logprob:.3f} >= {settings.FILTER_LOGPROB}")
            logger.debug(f"   - 重複比率: {compression_ratio:.3f} <= {settings.FILTER_COMPRESSION}")
            return True

        except Exception as e:
            logger.error(f"❌ [段落過濾] 過濾邏輯異常: {e}")
            # 異常情況下預設過濾掉，避免產出錯誤內容
            WHISPER_SEGMENTS_FILTERED.labels(
                reason="filter_error",
                deployment=self.deployment_name
            ).inc()
            return False

    # def _get_header_repairer(self) -> WebMHeaderRepairer:
    #     """延遲初始化 WebM 檔頭修復器 - 已停用，不再需要檔頭修復"""
    #     if self._header_repairer is None:
    #         self._header_repairer = WebMHeaderRepairer()
    #     return self._header_repairer

    # def _extract_and_cache_header(self, session_id: str, chunk_0_data: bytes) -> bool:
    #     """檔頭提取和緩存 - 已停用，每個 chunk 都有完整檔頭"""
    #     # 不再需要，每個 chunk 都包含完整 WebM Header
    #     return True

    # def _get_cached_header(self, session_id: str) -> Optional[bytes]:
    #     """獲取緩存檔頭 - 已停用，不再需要檔頭緩存"""
    #     # 不再需要，每個 chunk 都包含完整 WebM Header
    #     return None

    # def _clear_session_cache(self, session_id: str) -> None:
    #     """清理會話緩存 - 已停用"""
    #     # 不再需要緩存
    #     pass

    # def _cleanup_expired_cache(self) -> None:
    #     """清理過期緩存 - 已停用"""
    #     # 不再需要緩存管理
    #     pass

    async def process_audio_chunk(self, session_id: UUID, chunk_sequence: int, webm_data: bytes) -> bool:
        """
        處理單一音訊切片 - Task 3: 使用隊列系統

        Args:
            session_id: 會話 ID
            chunk_sequence: 切片序號
            webm_data: WebM 音訊數據

        Returns:
            bool: 處理是否成功（入隊成功即視為成功）
        """
        try:
            logger.info(f"🚀 [TranscriptionService] 提交轉錄任務：session={session_id}, chunk={chunk_sequence}, size={len(webm_data)} bytes")

            # Task 3: 將任務提交到隊列而非直接處理
            await queue_manager.enqueue_job(session_id, chunk_sequence, webm_data)

            # 返回 True 表示成功提交到隊列
            return True

        except Exception as e:
            logger.error(f"❌ [TranscriptionService] 提交任務失敗：session={session_id}, chunk={chunk_sequence}, error={e}")
            return False

    async def _process_chunk_async(self, session_id: UUID, chunk_sequence: int, webm_data: bytes):
        """非同步處理音訊切片 (WebM 直接轉錄架構 v2 + 檔頭修復)"""
        try:
            with PerformanceTimer(f"Process chunk {chunk_sequence} for session {session_id}"):
                session_id_str = str(session_id)
                logger.info(f"�� [WebM 直接轉錄] 開始處理音訊切片 {chunk_sequence} (session: {session_id}, size: {len(webm_data)} bytes)")

                # 步驟 1: 驗證和修復 WebM 數據（整合檔頭修復邏輯）
                processed_webm_data = await self._validate_and_repair_webm_data(session_id, chunk_sequence, webm_data)
                if processed_webm_data is None:
                    logger.error(f"❌ [驗證失敗] Chunk {chunk_sequence} 驗證失敗，跳過處理")
                    return

                # 步驟 3: WebM 直接轉錄 (使用修復後的數據)
                logger.info(f"⚡ [架構優化] 跳過 FFmpeg 轉換，直接轉錄 WebM (chunk {chunk_sequence})")
                transcript_result = await self._transcribe_audio(processed_webm_data, session_id, chunk_sequence)
                if not transcript_result:
                    logger.error(f"Failed to transcribe WebM chunk {chunk_sequence}")
                    return

                # 步驟 4: 儲存並推送結果
                await self._save_and_push_result(session_id, chunk_sequence, transcript_result)

                logger.info(f"✅ 成功處理音訊切片 {chunk_sequence}: '{transcript_result.get('text', '')[:50]}...'")

        except Exception as e:
            logger.error(f"Error processing chunk {chunk_sequence} for session {session_id}: {e}", exc_info=True)

    async def _validate_and_repair_webm_data(self, session_id: UUID, chunk_sequence: int, webm_data: bytes) -> Optional[bytes]:
        """
        簡化的 WebM 數據驗證（優化後架構）

        由於 SegmentedAudioRecorder 每個 chunk 都包含完整 WebM Header，
        不再需要複雜的檔頭修復邏輯，只需基本驗證即可。

        Args:
            session_id: 會話 ID
            chunk_sequence: 切片序號
            webm_data: 原始 WebM 音訊數據

        Returns:
            Optional[bytes]: 驗證後的 WebM 數據，驗證失敗時返回 None
        """
        start_time = time.time()

        try:
            # 步驟 1: 基本數據驗證
            if not webm_data or len(webm_data) < 50:
                logger.warning(f"WebM chunk {chunk_sequence} too small: {len(webm_data) if webm_data else 0} bytes")
                return None

            # 步驟 2: 簡化驗證 - 每個 chunk 都應該有完整檔頭
            logger.debug(f"🎯 [簡化驗證] Chunk {chunk_sequence} 數據大小: {len(webm_data)} bytes (session: {session_id})")

            # 檢查是否為 WebM 格式（簡單檢查 EBML header）
            if webm_data[:4] == b'\x1A\x45\xDF\xA3':
                logger.debug(f"✅ [檔頭檢查] Chunk {chunk_sequence} 包含完整 WebM EBML header")
            else:
                logger.warning(f"⚠️ [檔頭檢查] Chunk {chunk_sequence} 可能不是標準 WebM 格式，但繼續處理")

            # 步驟 3: 效能統計
            total_time = (time.time() - start_time) * 1000  # ms
            logger.debug(f"📊 [簡化處理] Chunk {chunk_sequence} 驗證完成 - 總計: {total_time:.1f}ms")

            # 效能警告（應該很快）
            if total_time > 10:  # 超過10ms警告（簡化後應該更快）
                logger.warning(f"⚠️ [效能警告] Chunk {chunk_sequence} 簡化驗證時間過長: {total_time:.1f}ms")

            return webm_data  # 直接返回原始數據

        except Exception as e:
            logger.error(f"❌ [簡化驗證] Chunk {chunk_sequence} 處理異常: {e}")
            return webm_data  # 降級使用原始數據

    async def _convert_webm_to_wav(self, webm_data: bytes, chunk_sequence: int, session_id: UUID) -> Optional[bytes]:
        """
        將 WebM / fMP4 轉換為 WAV (保留用於最終下載檔案)

        注意：在 WebM 直接轉錄架構 v2 中，此方法不再用於即時轉錄流程，
        而是保留作為最終匯出時生成 WAV 檔案的備選方案。
        """

        async def _broadcast_error(error_type: str, error_message: str, details: str = None):
            """透過 WebSocket 廣播錯誤訊息到前端"""
            try:
                from app.ws.transcript_feed import manager as transcript_manager

                # 生成音檔診斷資訊
                hex_header = webm_data[:32].hex(' ', 8).upper() if webm_data else "無數據"
                audio_format = detect_audio_format(webm_data)

                # 根據檢測到的格式提供建議
                def get_format_suggestion(audio_format: str) -> str:
                    suggestions = {
                        'fmp4': '建議檢查瀏覽器錄音設定，或嘗試使用 WebM 格式',
                        'mp4': '建議確認音檔完整性，或嘗試使用 WebM 格式',
                        'webm': '建議檢查 WebM 編碼器設定',
                        'unknown': '建議檢查瀏覽器是否支援音訊錄製，或嘗試重新整理頁面'
                    }
                    return suggestions.get(audio_format, '建議檢查音檔格式是否支援')

                error_data = {
                    "type": "conversion_error",
                    "error_type": error_type,
                    "message": error_message,
                    "details": details,
                    "session_id": str(session_id),
                    "chunk_sequence": chunk_sequence,
                    "timestamp": datetime.utcnow().isoformat(),
                    "diagnostics": {
                        "detected_format": audio_format,
                        "file_size": len(webm_data) if webm_data else 0,
                        "header_hex": hex_header,
                        "suggestion": get_format_suggestion(audio_format)
                    }
                }
                await transcript_manager.broadcast(
                    json.dumps(error_data),
                    str(session_id)
                )
                logger.info(f"🚨 [錯誤廣播] 已通知前端轉換錯誤: {error_type}")
                logger.debug(f"   - 格式診斷: {audio_format}, 大小: {len(webm_data) if webm_data else 0} bytes")
                logger.debug(f"   - 頭部數據: {hex_header}")
            except Exception as e:
                logger.error(f"Failed to broadcast error message: {e}")

        try:
            audio_format = detect_audio_format(webm_data)
            logger.info(f"🎵 [格式檢測] 檢測到音檔格式: {audio_format} (chunk {chunk_sequence}, 大小: {len(webm_data)} bytes)")

            with PerformanceTimer(f"{audio_format.upper()} to WAV conversion for chunk {chunk_sequence}"):

                # 基本 FFmpeg 參數
                cmd = ['ffmpeg']

                # 依來源格式決定輸入參數
                if audio_format == 'mp4':
                    # Safari 產出的 fragmented MP4 - 讓 FFmpeg 自動檢測格式
                    # 不指定 -f 參數，能更好處理各種 MP4 變體
                    pass
                elif audio_format == 'webm':
                    cmd += ['-f', 'webm']
                elif audio_format == 'ogg':
                    cmd += ['-f', 'ogg']
                elif audio_format == 'wav':
                    cmd += ['-f', 'wav']

                # 通用旗標：生成時間戳處理不完整流
                cmd += ['-fflags', '+genpts', '-i', 'pipe:0', '-ac', '1', '-ar', '16000', '-f', 'wav', '-y', 'pipe:1']

                logger.debug(f"🔧 [FFmpeg] 執行命令: {' '.join(cmd)}")

                process = await asyncio.create_subprocess_exec(
                    *cmd,
                    stdin=asyncio.subprocess.PIPE,
                    stdout=asyncio.subprocess.PIPE,
                    stderr=asyncio.subprocess.PIPE
                )

                stdout, stderr = await asyncio.wait_for(
                    process.communicate(input=webm_data),
                    timeout=PROCESSING_TIMEOUT
                )

                if process.returncode != 0:
                    error_msg = stderr.decode('utf-8', errors='ignore') if stderr else "Unknown error"
                    logger.error(f"❌ [FFmpeg 錯誤] 轉換失敗 chunk {chunk_sequence}")
                    logger.error(f"   - 格式: {audio_format}")
                    logger.error(f"   - 返回碼: {process.returncode}")
                    logger.error(f"   - 錯誤訊息: {error_msg}")
                    logger.error(f"   - 輸入大小: {len(webm_data)} bytes")

                    # 增強錯誤分析，特別針對 fragmented MP4 錯誤
                    if "could not find corresponding trex" in error_msg.lower():
                        error_reason = "Fragmented MP4 格式錯誤：缺少 Track Extends (trex) 盒，需要使用特殊的 movflags 參數"
                        detailed_suggestion = (
                            "🔧 解決方案：\n"
                            "1. 檢測到 fragmented MP4 格式，建議重新整理頁面\n"
                            "2. 如果問題持續，請嘗試使用不同瀏覽器\n"
                            "3. Safari 用戶建議切換至 Chrome 或 Firefox"
                        )
                    elif "trun track id unknown" in error_msg.lower():
                        error_reason = "Fragmented MP4 追蹤 ID 錯誤：Track Run (trun) 盒中的軌道 ID 無法識別"
                        detailed_suggestion = (
                            "🔧 解決方案：\n"
                            "1. 這是 fragmented MP4 特有錯誤\n"
                            "2. 建議重新錄音或重啟瀏覽器\n"
                            "3. 考慮降低錄音品質設定"
                        )
                    elif "Invalid data found when processing input" in error_msg:
                        error_reason = f"音檔格式 {audio_format} 與 FFmpeg 不兼容，可能是編碼問題"
                        detailed_suggestion = (
                            "🔧 解決方案：\n"
                            "1. 檢查音檔是否完整下載\n"
                            "2. 確認瀏覽器錄音格式設定\n"
                            "3. 嘗試重新開始錄音"
                        )
                    elif "No such file or directory" in error_msg:
                        error_reason = "FFmpeg 程式未找到或配置錯誤"
                        detailed_suggestion = (
                            "🔧 解決方案：\n"
                            "1. 請聯繫技術支援\n"
                            "2. 這是伺服器配置問題"
                        )
                    elif "Permission denied" in error_msg:
                        error_reason = "FFmpeg 權限不足"
                        detailed_suggestion = (
                            "🔧 解決方案：\n"
                            "1. 請聯繫技術支援\n"
                            "2. 這是伺服器權限問題"
                        )
                    else:
                        error_reason = f"FFmpeg 處理 {audio_format} 格式時發生未知錯誤"
                        detailed_suggestion = (
                            "🔧 解決方案：\n"
                            "1. 嘗試重新錄音\n"
                            "2. 檢查網路連線是否穩定\n"
                            "3. 如果問題持續，請聯繫技術支援"
                        )

                    # 記錄詳細診斷資訊
                    logger.error(f"   - 診斷結果: {error_reason}")
                    logger.error(f"   - 建議方案: {detailed_suggestion}")

                    await _broadcast_error("ffmpeg_conversion_failed", error_reason, detailed_suggestion)
                    return None

                if not stdout or len(stdout) < 100:
                    error_msg = f"FFmpeg 產生的 WAV 數據不足: {len(stdout) if stdout else 0} bytes"
                    logger.error(f"❌ [FFmpeg 警告] {error_msg}")
                    await _broadcast_error("insufficient_output", "轉換後的音檔數據不足，可能是靜音或損壞", error_msg)
                    return None

                logger.info(f"✅ [FFmpeg 成功] {audio_format.upper()} ({len(webm_data)} bytes) → WAV ({len(stdout)} bytes)")
                return stdout

        except asyncio.TimeoutError:
            error_msg = f"FFmpeg 轉換超時 (>{PROCESSING_TIMEOUT}秒)"
            logger.error(f"⏰ [FFmpeg 超時] {error_msg}")
            await _broadcast_error("conversion_timeout", "音檔轉換處理時間過長", error_msg)
            return None
        except Exception as e:
            error_msg = f"FFmpeg 轉換異常: {str(e)}"
            logger.error(f"💥 [FFmpeg 異常] {error_msg}")
            await _broadcast_error("conversion_exception", "音檔轉換過程中發生異常錯誤", error_msg)
            return None

    async def _transcribe_audio(self, webm_data: bytes, session_id: UUID, chunk_sequence: int) -> Optional[Dict[str, Any]]:
        """使用 Azure OpenAI Whisper 直接轉錄 WebM 音訊 (簡化: 只處理 text)"""
        from app.services.stt.factory import get_provider
        alt_provider = get_provider(session_id)
        if alt_provider and alt_provider.name() != "whisper":
            return await alt_provider.transcribe(webm_data, session_id, chunk_sequence)

        await rate_limit.wait()
        CONCURRENT_JOBS_GAUGE.inc()

        try:
            with WHISPER_LATENCY_SECONDS.labels(deployment=self.deployment_name).time():
                with PerformanceTimer(f"Whisper WebM transcription for chunk {chunk_sequence}"):
                    with tempfile.NamedTemporaryFile(suffix='.webm', delete=False) as temp_file:
                        temp_file.write(webm_data)
                        temp_file.flush()
                        try:
                            with open(temp_file.name, 'rb') as audio_file:
                                transcript = await self.client.audio.transcriptions.create(
                                    model=self.deployment_name,
                                    file=audio_file,
                                    language=getattr(settings, 'WHISPER_LANGUAGE', 'zh'),
                                    response_format="json",
                                    temperature=0
                                )
                            Path(temp_file.name).unlink(missing_ok=True)

                            # 只處理 {"text": ...} 結果
                            text = getattr(transcript, "text", None) or (transcript.get("text") if isinstance(transcript, dict) else None)
                            if not text or not text.strip():
                                WHISPER_REQ_TOTAL.labels(status="empty", deployment=self.deployment_name).inc()
                                return None
                            combined_text = text.strip()

                            # API 呼叫成功，重置頻率限制延遲
                            rate_limit.reset()
                            WHISPER_REQ_TOTAL.labels(status="success", deployment=self.deployment_name).inc()

                            return {
                                "text": combined_text,
                                "chunk_sequence": chunk_sequence,
                                "session_id": str(session_id),
                                "timestamp": datetime.utcnow().isoformat(),
                                "language": getattr(settings, 'WHISPER_LANGUAGE', 'zh-TW'),
                                "start_offset": 0.0,
                                "end_offset": settings.AUDIO_CHUNK_DURATION_SEC
                            }
                        finally:
                            Path(temp_file.name).unlink(missing_ok=True)
        except RateLimitError as e:
            logger.warning(f"🚦 [頻率限制] Chunk {chunk_sequence} 遇到 429 錯誤：{str(e)}")
            rate_limit.backoff()
            WHISPER_REQ_TOTAL.labels(status="rate_limit", deployment=self.deployment_name).inc()
            if isinstance(rate_limit, SlidingWindowRateLimiter):
                stats = rate_limit.get_stats()
                if stats['is_at_capacity']:
                    error_msg = f"API 配額已滿（{stats['active_requests']}/{stats['max_requests']}），請等待約 {rate_limit._delay}s"
                else:
                    error_msg = f"API 頻率限制，滑動視窗排隊處理中（{stats['available_permits']} 個許可可用）"
            else:
                error_msg = f"API 頻率限制，將在 {rate_limit._delay}s 後重試"
            await self._broadcast_transcription_error(
                session_id,
                chunk_sequence,
                "rate_limit_error",
                error_msg
            )
            return None
        except Exception as e:
            logger.error(f"WebM direct transcription failed for chunk {chunk_sequence}: {e}")
            WHISPER_REQ_TOTAL.labels(status="error", deployment=self.deployment_name).inc()
            await self._broadcast_transcription_error(session_id, chunk_sequence, "whisper_api_error", f"Azure OpenAI Whisper WebM 轉錄失敗: {str(e)}")
            return None
        finally:
            CONCURRENT_JOBS_GAUGE.dec()

    async def _save_and_push_result(self, session_id: UUID, chunk_sequence: int, transcript_result: Dict[str, Any]):
        """儲存轉錄結果並推送到前端"""
        try:
            supabase = get_supabase_client()
            session_response = supabase.table("sessions").select("started_at").eq("id", str(session_id)).limit(1).execute()
            started_at = None
            if session_response.data and session_response.data[0].get('started_at'):
                started_at = session_response.data[0]['started_at']
            chunk_start_seconds = chunk_sequence * settings.AUDIO_CHUNK_DURATION_SEC
            start_time = chunk_start_seconds + transcript_result.get('start_offset', 0)
            end_time = chunk_start_seconds + transcript_result.get('end_offset', settings.AUDIO_CHUNK_DURATION_SEC)
            if started_at:
                logger.info(
                    f"🕐 [時間計算 v2] 精確開始時間: {started_at}, "
                    f"chunk={chunk_sequence}, chunk_start={chunk_start_seconds}s, "
                    f"offset=({transcript_result.get('start_offset', 0)}s-{transcript_result.get('end_offset', 0)}s) → "
                    f"absolute=({start_time}s-{end_time}s)"
                )
            else:
                logger.info(
                    f"🕐 [時間計算 v2] 未檢測到 started_at，使用 fallback 相對時間。" \
                    f"chunk={chunk_sequence}, chunk_start={chunk_start_seconds}s, " \
                    f"offset=({transcript_result.get('start_offset', 0)}s-{transcript_result.get('end_offset', 0)}s) → " \
                    f"relative=({start_time}s-{end_time}s)"
                )
            segment_data = {
                "session_id": str(session_id),
                "chunk_sequence": chunk_sequence,
                "text": transcript_result['text'],
                "start_time": start_time,
                "end_time": end_time,
                "confidence": 1.0,
                "lang_code": transcript_result.get('language', 'zh-TW'),
                "created_at": transcript_result['timestamp']
            }
            response = supabase.table("transcript_segments").insert(segment_data).execute()
            if response.data:
                segment_id = response.data[0]['id']
                logger.debug(f"Saved transcript segment {segment_id} for chunk {chunk_sequence}")
                if str(session_id) not in _active_phase_sent:
                    logger.info(f"🚀 [轉錄推送] 首次廣播 active 相位到 session {session_id}")
                    await transcript_manager.broadcast(
                        json.dumps({"phase": "active"}),
                        str(session_id)
                    )
                    _active_phase_sent.add(str(session_id))
                    logger.info(f"✅ [轉錄推送] Active 相位廣播完成 for session {session_id}")
                transcript_message = {
                    "type": "transcript_segment",
                    "session_id": str(session_id),
                    "segment_id": segment_id,
                    "text": transcript_result['text'],
                    "chunk_sequence": chunk_sequence,
                    "start_sequence": chunk_sequence,
                    "start_time": segment_data['start_time'],
                    "end_time": segment_data['end_time'],
                    "confidence": segment_data['confidence'],
                    "timestamp": segment_data['created_at']
                }
                logger.info(f"📡 [轉錄推送] 廣播逐字稿片段到 session {session_id}:")
                logger.info(f"   - 文字: '{transcript_result['text'][:50]}{'...' if len(transcript_result['text']) > 50 else ''}'")
                logger.info(f"   - 序號: {chunk_sequence}")
                logger.info(f"   - 時間: {segment_data['start_time']}s - {segment_data['end_time']}s")
                await transcript_manager.broadcast(
                    json.dumps(transcript_message),
                    str(session_id)
                )
                logger.info(f"✅ [轉錄推送] 逐字稿片段廣播完成 for session {session_id}")
                logger.info(f"廣播轉錄完成訊息到 session {session_id}")
                await transcript_manager.broadcast(
                    json.dumps({
                        "type": "transcript_complete",
                        "session_id": str(session_id),
                        "message": "Transcription completed for the batch."
                    }),
                    str(session_id)
                )
                logger.info(f"轉錄任務完成 for session: {session_id}, chunk: {chunk_sequence}")
        except Exception as e:
            logger.error(f"Failed to save/push transcript for chunk {chunk_sequence}: {e}")
            await self._broadcast_transcription_error(session_id, chunk_sequence, "database_error", f"資料庫操作失敗: {str(e)}")

    async def _broadcast_transcription_error(self, session_id: UUID, chunk_sequence: int, error_type: str, error_message: str):
        """廣播轉錄錯誤到前端"""
        try:
            from app.ws.transcript_feed import manager as transcript_manager
            error_data = {
                "type": "transcription_error",
                "error_type": error_type,
                "message": error_message,
                "session_id": str(session_id),
                "chunk_sequence": chunk_sequence,
                "timestamp": datetime.utcnow().isoformat()
            }
            await transcript_manager.broadcast(
                json.dumps(error_data),
                str(session_id)
            )
            logger.info(f"🚨 [轉錄錯誤廣播] 已通知前端轉錄錯誤: {error_type}")
        except Exception as e:
            logger.error(f"Failed to broadcast transcription error: {e}")

    # TODO: 在此處實現更優雅的關閉邏輯
    logger.info("Transcription service is shutting down...")

# ----------------------
# 兼容舊測試的工廠函式與全域變數
# ----------------------

_transcription_service_v2: Optional[SimpleAudioTranscriptionService] = None


def get_azure_openai_client() -> Optional[AsyncAzureOpenAI]:
    """Task 1: 建立異步 AzureOpenAI 用戶端，包含優化的 timeout 和重試配置"""
    api_key = os.getenv("AZURE_OPENAI_API_KEY")
    endpoint = os.getenv("AZURE_OPENAI_ENDPOINT")
    if not api_key or not endpoint:
        logger.warning("⚠️ [客戶端初始化] Azure OpenAI 環境變數缺失")
        return None

    # Task 1: 創建異步客戶端，包含 timeout 和減少重試次數
    client = AsyncAzureOpenAI(
        api_key=api_key,
        azure_endpoint=endpoint,
        api_version="2024-06-01",
        timeout=TIMEOUT,
        max_retries=2,  # 由 5 次降到 2 次，避免積壓
    )

    logger.info("✅ [客戶端初始化] AsyncAzureOpenAI 客戶端已創建")
    logger.info(f"   - Timeout: connect={TIMEOUT.connect}s, read={TIMEOUT.read}s")
    logger.info(f"   - Max retries: 2 (優化後)")

    return client


def get_whisper_deployment_name() -> Optional[str]:
    """取得 Whisper 部署名稱，環境變數缺值時回傳 None。"""
    return os.getenv("WHISPER_DEPLOYMENT_NAME")


async def initialize_transcription_service_v2() -> Optional[SimpleAudioTranscriptionService]:
    """初始化並快取 SimpleAudioTranscriptionService 實例。若設定不足則回傳 None。"""
    global _transcription_service_v2
    if _transcription_service_v2 is not None:
        return _transcription_service_v2

    client = get_azure_openai_client()
    deployment = get_whisper_deployment_name()
    if not client or not deployment:
        logger.warning("Azure OpenAI 設定不足，無法初始化轉錄服務 v2")
        return None

    _transcription_service_v2 = SimpleAudioTranscriptionService(client, deployment)
    logger.info("✅ Transcription service v2 initialized with async client")
    return _transcription_service_v2


def cleanup_transcription_service_v2():
    """清理全域轉錄服務實例。"""
    global _transcription_service_v2
    _transcription_service_v2 = None


# END FILE CONTENTS


# File: docs/auto-retry-upload-spec.md

# 自動補傳與 WebSocket 線上恢復功能規格

## 目標
當使用者裝置在錄音過程中離線，系統應能在偵測到重新連線（`window.online`）後：
1. 自動補傳離線期間快取於 IndexedDB 的 WebM 音檔切片。
2. 重新建立 Transcript WebSocket 連線，持續即時顯示逐字稿。
3. 全程無需使用者手動介入，確保資料完整且即時體驗一致。

---

## 功能需求
### FR-1 自動補傳
- 監聽 `window` 的 `online` 事件；觸發時調用 `restAudioUploader.retryFailedSegments()`。
- 呼叫完成後，若補傳成功，應更新 `UploadStatusIndicator` 的統計（uploaded/failed/cached）。
- 若補傳過程再次失敗，需保留於 IndexedDB，並以 toast 或 UI badge 提示使用者。

### FR-2 重新連線 Transcript WebSocket
- 在 `online` 事件同一流程中：
  - 檢查目前 SessionId（可由 `SimpleRecordingService` 或 AppState 取得）。
  - 若 `transcriptManager.isConnected(sessionId)` 為 `false`，呼叫 `transcriptManager.connect(sessionId)` 重新連線。
- 重新連線應重設 `TranscriptManager` 的重連計數，避免先前達上限後不再重試。

### FR-3 與既有機制協同
- 保留 `TranscriptManager` 現有的指數退避重連邏輯；`online` 事件僅作「強制立即重連」。
- 保留 `RestAudioUploader` 既有的自動重試三次 + 暫存流程。

### FR-4 UX 與可視化
- `UploadStatusIndicator` 在自動補傳期間顯示 loading spinner（reuse `retrying` state）。
- 成功後 toast：`暫存段落已全部上傳完成`。
- 若仍有未成功項目，toast：`仍有 {count} 段落待上傳，將於線上時自動重試`。

---

## 非功能需求
| 類別       | 需求                                                        |
| ---------- | ----------------------------------------------------------- |
| **可靠性** | 上線後 2 秒內完成第一波補傳與重連；補傳失敗不影響後續重試。 |
| **效能**   | 單次補傳批次最多 20 個切片，超過則分批（避免阻塞 UI）。     |
| **維護性** | 相關邏輯集中於單一 Hook / Service，並具備單元測試覆蓋。     |

---

## 待辦事項（Task Breakdown）

| #    | 描述                                                                                                                                         | 類型       | 依賴 |
| ---- | -------------------------------------------------------------------------------------------------------------------------------------------- | ---------- | ---- |
| T-01 | 建立 `useNetworkRestorer` Hook：監聽 `online` 事件並發布 custom event `network:restored`                                                     | Structural | —    |
| T-02 | 在 `UploadStatusIndicator` 中註冊 `network:restored`，呼叫 `restAudioUploader.retryFailedSegments()` 並處理 UI state                         | Behavioral | T-01 |
| T-03 | 在 `SimpleRecordingService`（或 TranscriptService）中註冊 `network:restored`，檢查 `sessionId` 並呼叫 `transcriptManager.connect(sessionId)` | Behavioral | T-01 |
| T-04 | 重構 `TranscriptManager`：提供 `resetReconnectAttempts(sessionId)` 公開方法                                                                  | Structural | —    |
| T-05 | 單元測試：                                                                                                                                   |
  - 模擬 offline → online 流程，驗證 `retryFailedSegments`、`connect` 被呼叫
  - 驗證 UI 指示更新 | Test | T-02, T-03 |
| T-06 | E2E 測試（Playwright）：模擬斷網 30s 後恢復，確認逐字稿完整 & 無缺片 | Test | T-02, T-03 |
| T-07 | 文件更新：README、SPEC.md、開發者指南加入離線行為說明 | Doc | T-02–T-06 |

> **TDD 提示**：每個 Behavioral Task 先寫失敗測試，再實作；Structural Task 確認現有測試仍全部通過。

---

## 風險與備註
- **行動裝置省電策略** 可能延遲 `online` 事件觸發；需在 resume App 時補充檢查 IndexedDB。 
- **IndexedDB 容量**：多次長時間離線可能累積大量切片，需考慮清理策略（未納入本次工作）。

---

*最後更新：{{DATE_NOW}}* 


# END FILE CONTENTS


# File: frontend/components/ui/use-toast.ts

"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }


# END FILE CONTENTS


# File: frontend/components/ui/ExportButton.tsx

"use client"

import { useState } from 'react'
import { downloadZip } from '@/utils/export'
import { sessionAPI, notesAPI } from '@/lib/api'
import { toast } from '@/hooks/use-toast'
import { useSession } from '@/hooks/use-session'

interface Props {
    sid: string
    editorContent: string
}

export default function ExportButton({ sid, editorContent }: Props) {
    const [busy, setBusy] = useState(false)
    const { waitUntilCompleted } = useSession()

    const handleExport = async () => {
        if (busy) return
        setBusy(true)

        try {
            // 1️⃣ 等待 completed
            const ok = await waitUntilCompleted(sid, 30_000)
            if (!ok) {
                toast({ title: '後端仍在處理逐字稿，請稍候再試' })
                return
            }

            // 2️⃣ 儲存筆記
            await notesAPI.updateNote(sid, { content: editorContent })

            // 3️⃣ 下載 ZIP
            await downloadZip(sid)
        } catch (err) {
            console.error(err)
            toast({ title: '匯出失敗，請稍後重試', variant: 'destructive' })
        } finally {
            setBusy(false)
        }
    }

    return (
        <button
            className="btn btn-primary flex items-center gap-2"
            disabled={busy}
            onClick={handleExport}
        >
            {busy && (
                <svg className="animate-spin h-4 w-4" viewBox="0 0 24 24">
                    <circle
                        className="opacity-25"
                        cx="12" cy="12" r="10"
                        stroke="currentColor"
                        strokeWidth="4"
                        fill="none"
                    />
                    <path
                        className="opacity-75"
                        fill="currentColor"
                        d="M4 12a8 8 0 018-8v4l3-3-3-3v4A8 8 8 0 104 12z"
                    />
                </svg>
            )}
            Export&nbsp;ZIP
        </button>
    )
}


# END FILE CONTENTS


# File: app/api/export.py

from fastapi import APIRouter, HTTPException, status
from fastapi.responses import StreamingResponse
from uuid import UUID
import io, zipfile
from app.db.database import get_supabase_client

router = APIRouter(prefix="/api/export", tags=["export"])

def _sec_to_ts(sec: float) -> str:
    h = int(sec // 3600)
    m = int((sec % 3600) // 60)
    s = int(sec % 60)
    return f"[{h:02d}:{m:02d}:{s:02d}]"

@router.get("/{sid}", response_class=StreamingResponse)
async def export_resource(sid: UUID, type: str = "zip"):
    try:
        if type != "zip":
            raise HTTPException(status.HTTP_400_BAD_REQUEST, "unsupported type")

        sb = get_supabase_client()

        # 1. session 必須 completed
        session = (
            sb.table("sessions")
            .select("status")
            .eq("id", str(sid))
            .limit(1)
            .execute()
            .data
        )
        if not session:
            raise HTTPException(status.HTTP_404_NOT_FOUND, "session not found")
        if session[0]["status"] != "completed":
            raise HTTPException(status.HTTP_202_ACCEPTED, "session not finished")

        # 2. 讀 note：欄位名稱可能是 markdown / body / content
        note_row = (
            sb.table("notes")
            .select("content, markdown, body")
            .eq("session_id", str(sid))
            .limit(1)
            .execute()
            .data
        )
        if not note_row:
            raise HTTPException(status.HTTP_404_NOT_FOUND, "note not found")
        note = note_row[0]
        note_md = note.get("content") or note.get("markdown") or note.get("body") or ""

        # 3. 逐字稿：優先用有時間戳的 segments，沒有就退回 full_text
        seg_rows = (
            sb.table("transcript_segments")
            .select("text, start_time")
            .eq("session_id", str(sid))
            .order("chunk_sequence")
            .execute()
            .data
        )

        if seg_rows:
            transcript_txt = "\n".join(
                f"{_sec_to_ts(seg.get('start_time', 0))} {seg.get('text', '').strip()}"
                for seg in seg_rows
            )
        else:
            # fallback 讀 transcripts.full_text
            full = (
                sb.table("transcripts")
                .select("full_text")
                .eq("session_id", str(sid))
                .limit(1)
                .execute()
                .data
            )
            transcript_txt = (full[0]["full_text"] if full else "").strip()

        # 4. 打包 ZIP
        buf = io.BytesIO()
        with zipfile.ZipFile(buf, "w", zipfile.ZIP_DEFLATED) as zf:
            zf.writestr("note.md", note_md.strip())
            zf.writestr("transcript.txt", transcript_txt)
        buf.seek(0)

        headers = {
            "Content-Disposition": f'attachment; filename="{sid}.zip"'
        }
        return StreamingResponse(buf, media_type="application/zip", headers=headers)
    except HTTPException as e:
        # FastAPI HTTPException 直接丟出
        raise e
    except Exception as e:
        import traceback
        print(f"[EXPORT ERROR] {e}")
        print(traceback.format_exc())
        raise HTTPException(status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f"Export failed: {e}")


# END FILE CONTENTS


# File: frontend/components/ui/dialog.tsx

"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}


# END FILE CONTENTS


# File: frontend/components/ui/toggle.tsx

"use client"

import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3 min-w-10",
        sm: "h-9 px-2.5 min-w-9",
        lg: "h-11 px-5 min-w-11",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }


# END FILE CONTENTS


# File: frontend/hooks/use-transcript.ts

"use client"

import { useState, useCallback, useRef, useEffect } from 'react'
import { transcriptManager, TranscriptMessage } from '../lib/transcript-manager'

interface UseTranscriptReturn {
    transcripts: TranscriptMessage[]
    isConnected: boolean
    isCompleted: boolean
    error: string | null
    connect: (sessionId: string) => Promise<void>
    disconnect: () => void
    clearTranscripts: () => void
    // 自動捲動功能
    autoScrollEnabled: boolean
    enableAutoScroll: () => void
    disableAutoScroll: () => void
    scrollToLatest: () => void
    setScrollContainer: (element: HTMLElement | null) => void
}

export function useTranscript(): UseTranscriptReturn {
    const [transcripts, setTranscripts] = useState<TranscriptMessage[]>([])
    const [isConnected, setIsConnected] = useState(false)
    const [isCompleted, setIsCompleted] = useState(false)
    const [error, setError] = useState<string | null>(null)
    const [autoScrollEnabled, setAutoScrollEnabled] = useState(true)

    const containerRef = useRef<HTMLElement | null>(null)
    const currentSessionIdRef = useRef<string | null>(null)

    // 處理逐字稿接收與合併邏輯
    const handleTranscript = useCallback((transcript: TranscriptMessage) => {
        console.log('📝 [useTranscript] 收到逐字稿訊息:', {
            type: transcript.type,
            text: transcript.text,
            textLength: transcript.text?.length || 0,
            start_time: transcript.start_time,
            end_time: transcript.end_time,
            confidence: transcript.confidence,
            sessionId: currentSessionIdRef.current,
            currentTranscriptCount: transcripts.length,
            timestamp: new Date().toISOString()
        })

        // 處理轉錄完成通知
        if (transcript.type === 'transcript_complete' || transcript.message === 'transcription_complete') {
            console.log('✅ [useTranscript] 逐字稿轉錄完成，設定 isCompleted=true')
            setIsCompleted(true)
            return
        }

        // 處理轉錄錯誤 (需要類型轉換因為 TranscriptMessage 不包含錯誤類型)
        const anyMessage = transcript as any
        if (anyMessage.type === 'error' || anyMessage.type === 'transcription_error') {
            console.error('🚨 [useTranscript] 收到轉錄錯誤:', transcript)
            const errorMessage = anyMessage.error_message || anyMessage.details || '轉錄過程中發生錯誤'
            setError(errorMessage)
            return
        }

        // 只處理逐字稿片段類型的訊息
        if (transcript.type !== 'transcript_segment') {
            console.log('⚠️ [useTranscript] 跳過非逐字稿片段訊息:', transcript.type)
            return
        }

        if (!transcript.text) {
            console.log('⚠️ [useTranscript] 跳過空文字逐字稿')
            return
        }

        console.log('🔄 [useTranscript] 開始處理逐字稿片段...')

        setTranscripts((prev) => {
            console.log('📊 [useTranscript] 合併前狀態:', {
                existingCount: prev.length,
                newSegmentText: transcript.text,
                newSegmentTime: transcript.start_time
            })

            const newTranscripts = mergeSegments(prev, transcript)

            console.log('📊 [useTranscript] 合併後狀態:', {
                newCount: newTranscripts.length,
                countChange: newTranscripts.length - prev.length,
                lastSegmentText: newTranscripts[newTranscripts.length - 1]?.text?.substring(0, 50) + '...'
            })

            console.log(`✅ [useTranscript] 逐字稿更新完成: ${prev.length} → ${newTranscripts.length} 個片段`)
            return newTranscripts
        })
    }, [transcripts.length])

    // 逐字稿片段合併邏輯 - 禁用合併，確保每句話都有獨立時間戳
    const mergeSegments = useCallback((
        existingSegments: TranscriptMessage[],
        newSegment: TranscriptMessage
    ): TranscriptMessage[] => {
        // 禁用合併邏輯，直接添加新片段
        // 用戶要求：「一句話一個時間戳」，不要將逐字稿合併
        return [...existingSegments, newSegment]
    }, [])

    // 自動捲動功能
    const scrollToLatest = useCallback(() => {
        if (containerRef.current && autoScrollEnabled) {
            containerRef.current.scrollTop = containerRef.current.scrollHeight
        }
    }, [autoScrollEnabled])

    // 檢測使用者滾動 - 離底部 >60px 時禁用自動捲動
    const handleScroll = useCallback((event: Event) => {
        const container = event.target as HTMLElement
        if (!container) return

        const { scrollTop, scrollHeight, clientHeight } = container
        const distanceFromBottom = scrollHeight - scrollTop - clientHeight

        if (distanceFromBottom > 60) {
            setAutoScrollEnabled(false)
        } else if (distanceFromBottom <= 10) {
            setAutoScrollEnabled(true)
        }
    }, [])

    // 設定自動捲動容器
    const setScrollContainer = useCallback((element: HTMLElement | null) => {
        if (containerRef.current) {
            containerRef.current.removeEventListener('scroll', handleScroll)
        }

        containerRef.current = element

        if (element) {
            element.addEventListener('scroll', handleScroll)
        }
    }, [handleScroll])

    // 啟用自動捲動
    const enableAutoScroll = useCallback(() => {
        setAutoScrollEnabled(true)
        scrollToLatest()
    }, [scrollToLatest])

    // 禁用自動捲動
    const disableAutoScroll = useCallback(() => {
        setAutoScrollEnabled(false)
    }, [])

    // 連接 TranscriptManager
    const connect = useCallback(async (sessionId: string): Promise<void> => {
        try {
            setError(null)
            setIsCompleted(false)

            // 移除舊的監聽器
            if (currentSessionIdRef.current) {
                transcriptManager.removeListener(currentSessionIdRef.current, handleTranscript)
            }

            // 連接到新的 session
            await transcriptManager.connect(sessionId)
            transcriptManager.addListener(sessionId, handleTranscript)

            currentSessionIdRef.current = sessionId
            setIsConnected(transcriptManager.isConnected(sessionId))

            console.log('✅ use-transcript 連接成功，Session ID:', sessionId)

        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : '連接逐字稿服務失敗'
            setError(errorMessage)
            setIsConnected(false)
            console.error('❌ use-transcript 連接失敗:', err)
        }
    }, [handleTranscript])

    // 斷開連接
    const disconnect = useCallback(() => {
        if (currentSessionIdRef.current) {
            transcriptManager.removeListener(currentSessionIdRef.current, handleTranscript)
            // 注意：不呼叫 transcriptManager.disconnect，因為其他組件可能還在使用
            currentSessionIdRef.current = null
        }

        setIsConnected(false)
        console.log('🔌 use-transcript 斷開連接')
    }, [handleTranscript])

    // 清空逐字稿
    const clearTranscripts = useCallback(() => {
        setTranscripts([])
        setIsCompleted(false)
        console.log('🔄 use-transcript 逐字稿已清除')
    }, [])

    // 自動捲動效果
    useEffect(() => {
        if (transcripts.length > 0) {
            scrollToLatest()
        }
    }, [transcripts, scrollToLatest])

    // 清理資源
    useEffect(() => {
        return () => {
            if (currentSessionIdRef.current) {
                transcriptManager.removeListener(currentSessionIdRef.current, handleTranscript)
            }

            if (containerRef.current) {
                containerRef.current.removeEventListener('scroll', handleScroll)
            }
        }
    }, [handleTranscript, handleScroll])

    return {
        transcripts,
        isConnected,
        isCompleted,
        error,
        connect,
        disconnect,
        clearTranscripts,
        autoScrollEnabled,
        enableAutoScroll,
        disableAutoScroll,
        scrollToLatest,
        setScrollContainer,
    }
}


# END FILE CONTENTS


# File: app/services/stt/factory.py

# app/services/stt/factory.py
from __future__ import annotations

import logging
from typing import Dict, Type
from uuid import UUID

from app.db.database import get_supabase_client
from app.services.stt.interfaces import ISTTProvider
from app.services.stt.whisper_provider import WhisperProvider
from app.services.stt.gpt4o_provider import GPT4oProvider
from app.services.stt.gemini_provider import GeminiProvider
from app.core.config import get_settings

logger = logging.getLogger(__name__)

settings = get_settings()
# ------------------------------------------------------------------
# 1. provider singleton cache
# ------------------------------------------------------------------
_provider_cache: Dict[str, ISTTProvider] = {}


def _instance(cls: Type[ISTTProvider]) -> ISTTProvider:
    """
    lazy singleton per provider class
    Provider 類別必須有 `name` class 屬性 (str)
    """
    if cls.name not in _provider_cache:
        _provider_cache[cls.name] = cls()
    return _provider_cache[cls.name]


# ------------------------------------------------------------------
# 2. public API
# ------------------------------------------------------------------
def get_provider(session_id: UUID) -> ISTTProvider:
    """
    根據 sessions.stt_provider 欄位，回傳對應 ISTTProvider 物件。
    預設 whisper。
    """
    supa = get_supabase_client()
    row = (
        supa.table("sessions")
        .select("stt_provider")
        .eq("id", str(session_id))
        .single()
        .execute()
    )

    provider_code: str = (
    row.data or {}
).get("stt_provider", settings.STT_PROVIDER_DEFAULT).lower()

    match provider_code:
        case "gpt4o" | "gpt-4o":
            return _instance(GPT4oProvider)
        case "gemini" | "google_gemini":
            return _instance(GeminiProvider)
        case "whisper" | _:
            # 包含 None / 空字串 → whisper
            return _instance(WhisperProvider)


# END FILE CONTENTS


# File: frontend/components/ui/sidebar.tsx

"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}


# END FILE CONTENTS


# File: frontend/components/ui/aspect-ratio.tsx

"use client"

import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }


# END FILE CONTENTS


# File: frontend/components/ui/slider.tsx

"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }


# END FILE CONTENTS


# File: frontend/components/ui/form.tsx

"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}


# END FILE CONTENTS


# File: frontend/lib/utils.ts

import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


# END FILE CONTENTS


# File: frontend/utils/time.ts

export const formatTime = (sec: number): string => {
    const minutes = Math.floor(sec / 60)
    const seconds = Math.floor(sec % 60)
    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`
}


# END FILE CONTENTS


# File: frontend/study-scriber.tsx

"use client"

import dynamic from "next/dynamic"
import "easymde/dist/easymde.min.css"
import { useMemo, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { RotateCcw, Download } from "lucide-react"


// 動態匯入 SimpleMDE 以避免 SSR 問題
// 透過 .then(mod => mod.default) 明確取用 default export，
// 以避免 Next.js 在處理 CommonJS 與 ESM 混用時，
// 可能將整個 module 物件當作 React 元件而導致無法完成載入。
const SimpleMDE = dynamic(() => import("react-simplemde-editor").then(mod => mod.default), {
  ssr: false,
  loading: () => (
    <div className="h-full flex items-center justify-center text-muted-foreground">
      載入編輯器中...
    </div>
  ),
})

import { useAppStore } from "./lib/app-store-zustand"
import { DefaultState } from "./components/default-state"
import { RecordingState } from "./components/recording-state"
import { WaitingState } from "./components/waiting-state"
import { FinishState } from "./components/finish-state"
import { ProviderContextMenu } from "./components/provider-context-menu"

export default function Component() {
  // 使用 Zustand store
  const appState = useAppStore(state => state.appState)
  const isLoading = useAppStore(state => state.isLoading)
  const error = useAppStore(state => state.error)
  const session = useAppStore(state => state.session)
  const isRecording = useAppStore(state => state.isRecording)
  const recordingTime = useAppStore(state => state.recordingTime)
  const transcriptEntries = useAppStore(state => state.transcriptEntries)
  const editorContent = useAppStore(state => state.editorContent)
  const sttProvider = useAppStore(state => state.sttProvider)

  // Actions
  const startRecording = useAppStore(state => state.startRecording)
  const stopRecording = useAppStore(state => state.stopRecording)
  const updateEditorContent = useAppStore(state => state.updateEditorContent)
  const resetState = useAppStore(state => state.resetState)
  const setSttProvider = useAppStore(state => state.setSttProvider)
  // ✅ 移除 draftTitle 狀態 - 標題不再必填

  // 預先載入 SimpleMDE，避免第一次載入時卡在 loading
  useEffect(() => {
    if (typeof (SimpleMDE as any).preload === 'function') {
      (SimpleMDE as any).preload()
    }
  }, [])

  // 使用 Zustand store - 所有狀態已在上方宣告

  // 檢查並清理異常的 localStorage 狀態
  useEffect(() => {
    if (typeof window !== 'undefined') {
      const appStateData = localStorage.getItem('app_state_v1')
      if (appStateData) {
        try {
          const parsedState = JSON.parse(appStateData)
          console.log("🔍 [StudyScriber] 檢查 localStorage 狀態:", parsedState)

          // 如果狀態是異常的錄音狀態，清除它
          if (parsedState.state && ['recording_waiting', 'recording_active', 'processing'].includes(parsedState.state)) {
            console.log("🧹 [StudyScriber] 清除異常的 localStorage 狀態")
            localStorage.removeItem('app_state_v1')
            localStorage.removeItem('last_session')
            // 刷新頁面以重新初始化
            window.location.reload()
            return
          }
        } catch (error) {
          console.error("❌ [StudyScriber] 解析 localStorage 失敗:", error)
          localStorage.removeItem('app_state_v1')
          localStorage.removeItem('last_session')
        }
      }
    }
  }, [])

  // 追蹤狀態流轉
  console.log("[DEBUG] appState:", appState)
  console.log("[DEBUG] isRecording:", isRecording)
  if (session) {
    console.log("[DEBUG] session.status:", session.status, "session.type:", session.type)
  } else {
    console.log("[DEBUG] session: null")
  }

  // 添加調試功能到 window
  if (typeof window !== 'undefined') {
    // 暴露完整狀態到 window.appData 以便診斷
    (window as any).appData = {
      state: appState,
      isRecording,
      recordingTime,
      transcriptEntries,
      editorContent,
      session,
      isLoading,
      error
    }
  }

  // 暴露錄音狀態到 window 以便調試
  if (typeof window !== 'undefined') {
    (window as any).recordingHook = { isRecording, recordingTime }
  }

  // 暴露 session 到 window 以便調試
  if (typeof window !== 'undefined') {
    (window as any).sessionHook = {
      currentSession: session,
      isLoading: isLoading,
      error: error
    }
  }

  useEffect(() => {
    console.log("📱 StudyScriber: state 更新:", {
      state: appState,
      isRecording: isRecording,
      recordingTime: recordingTime,
      transcriptEntries: transcriptEntries,
      editorContent: editorContent,
      session: session,
      isLoading: isLoading,
      error: error,
    })
  }, [appState, isRecording, recordingTime, transcriptEntries, editorContent, session, isLoading, error])

  const editorOptions = useMemo(() => {
    return {
      spellChecker: false,
      placeholder: "Start writing your notes...",
      status: false,
      toolbar: [
        "bold",
        "italic",
        "strikethrough",
        "|",
        "heading-1",
        "heading-2",
        "heading-3",
        "|",
        "quote",
        "unordered-list",
        "ordered-list",
        "|",
        "link",
        "image",
        "table",
        "|",
        "preview",
        "side-by-side",
        "fullscreen",
      ] as const,
      autofocus: true,
      tabSize: 2,
    }
  }, [])

  const renderRightPanel = () => {
    // 狀態異常檢查：如果是 recording_waiting 但沒有 session，應該顯示 default 狀態
    if (appState === "recording_waiting" && !session) {
      console.log("⚠️ [StudyScriber] 檢測到狀態異常: recording_waiting 但沒有 session，顯示 DefaultState")
      return <DefaultState
        onStartRecording={() => {
          console.log("📱 StudyScriber: 準備調用 startRecording（狀態修復）")
          startRecording()
        }}
      />
    }

    switch (appState) {
      case "default":
        console.log("🔄 [StudyScriber] 渲染 DefaultState，startRecording 函數:", typeof startRecording)
        return <DefaultState
          onStartRecording={() => {
            console.log("📱 StudyScriber: 準備調用 startRecording")
            console.log("📱 StudyScriber: startRecording 函數類型:", typeof startRecording)
            startRecording()
          }}
        />
      case "recording_active":
        return (
          <RecordingState
            transcriptEntries={transcriptEntries}
            recordingTime={recordingTime}
            onStopRecording={stopRecording}
            error={error}
          />
        )
      case "recording_waiting":
        return (
          <RecordingState
            transcriptEntries={transcriptEntries}
            recordingTime={recordingTime}
            onStopRecording={stopRecording}
            error={error}
          />
        )
      case "processing":
        return <WaitingState />
      case "finished":
        return (
          <FinishState
            transcriptEntries={transcriptEntries}
            onExport={() => {
              // TODO: 實現匯出功能
              console.log('Export functionality not implemented yet')
            }}
            onToLatest={() => {
              // TODO: 實現捲動到最新功能
              console.log('To Latest functionality not implemented yet')
            }}
          />
        )
      default:
        return <DefaultState
          onStartRecording={() => {
            console.log("📱 StudyScriber: 準備調用 startRecording (default)")
            startRecording()
          }}
        />
    }
  }

  return (
    <div className="h-screen bg-background flex flex-col" suppressHydrationWarning={true}>
      {/* Full Width Header - Fixed height of 80px */}
      <div className="bg-background border-b border-border px-6 flex-shrink-0 w-full h-20 flex justify-between items-center">
        <h1 className="text-2xl font-semibold text-foreground">Study Scriber</h1>

        {/* Header action buttons */}
        <div className="flex items-center gap-2">
          {/* New note 按鈕 - 在有活躍會話或需要的狀態下顯示 */}
          {((appState === "default" && !!session) ||
            appState === "recording_waiting" ||
            appState === "recording_active" ||
            appState === "finished") && (
              <Button variant="outline" onClick={resetState} size="sm" className="px-4 h-8 flex items-center gap-2">
                <RotateCcw className="w-4 h-4" />
                New note
              </Button>
            )}

          {/* Export 按鈕 - 只在 finished 狀態顯示 */}
          {appState === "finished" && (
            <Button onClick={() => console.log('Export functionality')} size="sm" className="px-4 h-8 flex items-center gap-2">
              <Download className="w-4 h-4" />
              Export
            </Button>
          )}

          <ProviderContextMenu
            currentProvider={sttProvider}
            onProviderChange={setSttProvider}
            disabled={appState === 'recording_active' || appState === 'processing' || appState === 'recording_waiting'}
          />
        </div>
      </div>

      {/* Main Content Area */}
      <div className="flex-1 flex overflow-hidden">
        {/* Left Panel (Editor) */}
        <div className="flex-1 border-r border-border h-full">
          <SimpleMDE
            value={editorContent}
            onChange={updateEditorContent}
            options={editorOptions}
            className="h-full"
          />
        </div>

        {/* Right Panel (Recording/Transcription) */}
        <div className="w-1/3 min-w-[400px] max-w-[500px] flex-shrink-0 h-full overflow-y-auto">
          {renderRightPanel()}
        </div>
      </div>
    </div>
  )
}


# END FILE CONTENTS


# File: frontend/lib/services/session-service.ts

"use client"

import { BaseService } from './base-service'
import { ISessionService } from './interfaces'
import { sessionAPI, type SessionCreateRequest, type SessionResponse } from '../api'
import axios from 'axios'

/**
 * SessionService - 會話管理服務
 *
 * 重構現有的 sessionAPI 邏輯到服務層，提供：
 * - 會話創建（純筆記、錄音模式）
 * - 會話升級（純筆記 → 錄音模式）
 * - 會話狀態管理
 * - 統一錯誤處理和重試機制
 */
import { STTProvider } from '../api'

export class SessionService extends BaseService implements ISessionService {
    protected readonly serviceName = 'SessionService'

    /**
     * 服務初始化
     * 重用現有的 sessionAPI 配置和攔截器
     */
    async initialize(): Promise<void> {
        this.logInfo('服務初始化開始')

        // 檢查 sessionAPI 可用性
        try {
            // 簡單的健康檢查 - 嘗試獲取活躍會話
            await this.checkActiveSession()
            this.logSuccess('API 連接檢查', '後端 API 連接正常')
        } catch (error) {
            // 網路錯誤不影響初始化，記錄警告即可
            if (axios.isAxiosError(error) && error.code === 'ERR_NETWORK') {
                this.logWarning('API 連接檢查失敗，但不影響服務初始化', error.message)
            } else {
                this.logWarning('初始化健康檢查失敗', error)
            }
        }

        this.logSuccess('初始化完成')
    }

    /**
     * 服務清理
     */
    async cleanup(): Promise<void> {
        this.logInfo('服務清理開始')
        // SessionService 主要是無狀態的，無需特殊清理
        this.logSuccess('清理完成')
    }

    /**
     * 確保錄音會話存在 - 優雅處理會話衝突
     *
     * 策略：
     * 1. 優先嘗試創建新的錄音會話
     * 2. 若遇到 409 衝突，改為獲取現有活躍會話
     * 3. 確保返回可用的錄音會話
     */
    async ensureRecordingSession(title?: string, content?: string, startTs?: number, sttProvider?: STTProvider): Promise<SessionResponse> {
        this.logInfo('確保錄音會話存在 - 強制新建策略', { title, hasContent: !!content, hasStartTs: !!startTs, sttProvider })

        try {
            // 1. 檢查並完成任何現有活躍會話
            const existingSession = await this.checkActiveSession()
            if (existingSession) {
                this.logInfo('檢測到現有活躍會話，準備完成', {
                    sessionId: existingSession.id,
                    type: existingSession.type,
                    status: existingSession.status
                })

                await this.finishSession(existingSession.id)
                this.logSuccess('現有會話已完成', { sessionId: existingSession.id })
            } else {
                this.logInfo('沒有現有活躍會話')
            }

            // 2. 強制創建新會話
            const newSession = await this.createRecordingSession(
                title,
                content,
                startTs,
                sttProvider
            )

            this.logSuccess('強制新建策略完成', {
                newSessionId: newSession.id,
                type: newSession.type,
                status: newSession.status,
                sttProvider
            })

            return newSession

        } catch (error) {
            if (error instanceof Error && error.message.includes('409')) {
                // 遇到衝突，獲取現有活躍會話
                this.logWarning('會話衝突，嘗試獲取現有活躍會話')
                const activeSession = await this.checkActiveSession()
                if (activeSession) {
                    return activeSession
                }
            }
            this.handleError('確保錄音會話存在 - 強制新建策略', error as Error)
        }
    }

    /**
     * 創建錄音會話
     * 重用 sessionAPI.createSession 的重試機制和錯誤處理
     */
    async createRecordingSession(title?: string, content?: string, startTs?: number, sttProvider?: STTProvider): Promise<SessionResponse> {
        this.logInfo('創建錄音會話', { title, hasContent: !!content, hasStartTs: !!startTs, sttProvider })

        try {
            const sessionData: SessionCreateRequest = {
                title,
                type: 'recording',
                content,
                start_ts: startTs,
                stt_provider: sttProvider
            }

            const session = await sessionAPI.createSession(sessionData)

            this.logSuccess('錄音會話創建成功', {
                sessionId: session.id,
                type: session.type,
                status: session.status,
                withStartTs: !!startTs,
                sttProvider
            })

            return session
        } catch (error) {
            // 不在這裡處理 409 錯誤，交由 ensureRecordingSession 處理
            this.handleError('創建錄音會話', error)
        }
    }

    /**
     * 創建純筆記會話
     * 重用 sessionAPI.createSession 的重試機制和錯誤處理
     */
    async createNoteSession(title?: string, content?: string): Promise<SessionResponse> {
        this.logInfo('創建純筆記會話', { title, hasContent: !!content })

        try {
            const sessionData: SessionCreateRequest = {
                title,
                type: 'note_only',
                content,
            }

            const session = await sessionAPI.createSession(sessionData)

            this.logSuccess('純筆記會話創建成功', {
                sessionId: session.id,
                type: session.type,
                status: session.status
            })

            return session
        } catch (error) {
            // 處理會話衝突錯誤（409）
            if (axios.isAxiosError(error) && error.response?.status === 409) {
                const conflictMessage = '檢測到活躍會話衝突，請重新整理頁面後再試'
                this.logWarning('會話衝突錯誤 (409)', {
                    detail: error.response?.data?.detail,
                    message: error.message
                })
                this.handleError('創建純筆記會話', new Error(conflictMessage))
            }

            this.handleError('創建純筆記會話', error)
        }
    }

    /**
     * 升級會話至錄音模式
     * 重用 sessionAPI.upgradeToRecording 的重試機制和錯誤處理
     */
    async upgradeToRecording(sessionId: string): Promise<SessionResponse> {
        this.logInfo('升級會話至錄音模式', { sessionId })

        try {
            // 先檢查會話是否存在和狀態
            const currentSession = await this.checkActiveSession()

            if (!currentSession) {
                this.handleError('升級會話至錄音模式', new Error('沒有活躍的會話可以升級'))
            }

            if (currentSession!.id !== sessionId) {
                this.handleError('升級會話至錄音模式',
                    new Error(`會話 ID 不匹配：要求升級 ${sessionId}，但活躍會話為 ${currentSession!.id}`))
            }

            if (currentSession!.type === 'recording') {
                this.logInfo('會話已經是錄音模式，返回現有會話', { sessionId })
                return currentSession!
            }

            const updatedSession = await sessionAPI.upgradeToRecording(sessionId)

            this.logSuccess('會話升級成功', {
                sessionId: updatedSession.id,
                oldType: currentSession!.type,
                newType: updatedSession.type,
                status: updatedSession.status
            })

            return updatedSession
        } catch (error) {
            this.handleError('升級會話至錄音模式', error)
        }
    }

    /**
     * 完成會話
     * 重用 sessionAPI.finishSession 的重試機制和錯誤處理
     */
    async finishSession(sessionId: string): Promise<void> {
        this.logInfo('完成會話', { sessionId })

        try {
            await sessionAPI.finishSession(sessionId)

            this.logSuccess('會話完成成功', { sessionId })
        } catch (error) {
            this.handleError('完成會話', error)
        }
    }

    /**
     * 檢查活躍會話
     * 重用 sessionAPI.getActiveSession 的重試機制和錯誤處理
     */
    async checkActiveSession(): Promise<SessionResponse | null> {
        this.logInfo('檢查活躍會話')

        try {
            const activeSession = await sessionAPI.getActiveSession()

            if (activeSession) {
                this.logSuccess('活躍會話檢查', {
                    sessionId: activeSession.id,
                    type: activeSession.type,
                    status: activeSession.status
                })
                return activeSession
            } else {
                this.logInfo('沒有活躍會話')
                return null
            }
        } catch (error) {
            // 網路錯誤不應該拋出，只記錄警告
            if (axios.isAxiosError(error) && error.code === 'ERR_NETWORK') {
                this.logWarning('Backend API 連線暫時失敗，將在後續重試', error.message)
                return null
            }

            this.handleError('檢查活躍會話', error)
        }
    }

    /**
     * 等待會話在資料庫中完全可見
     * 用於解決會話創建後立即查詢可能失敗的時序問題
     */
    async waitForSessionReady(sessionId: string, maxWaitTime: number = 5000): Promise<boolean> {
        this.logInfo('等待會話準備就緒', { sessionId, maxWaitTime })

        const startTime = Date.now()
        const checkInterval = 200 // 每 200ms 檢查一次

        while (Date.now() - startTime < maxWaitTime) {
            try {
                const activeSession = await this.checkActiveSession()

                if (activeSession && activeSession.id === sessionId) {
                    // 進一步驗證會話狀態
                    if (activeSession.status === 'active' && activeSession.type === 'recording') {
                        this.logSuccess('會話已準備就緒', {
                            sessionId,
                            status: activeSession.status,
                            type: activeSession.type,
                            waitTime: Date.now() - startTime
                        })
                        return true
                    }
                }
            } catch (error) {
                // 檢查失敗時繼續等待，不拋出錯誤
                this.logWarning('會話狀態檢查失敗，繼續等待', {
                    sessionId,
                    error: error instanceof Error ? error.message : String(error)
                })
            }

            // 等待下次檢查
            await new Promise(resolve => setTimeout(resolve, checkInterval))
        }

        this.logWarning('等待會話準備就緒超時', {
            sessionId,
            maxWaitTime,
            actualWaitTime: Date.now() - startTime
        })

        return false
    }

    /**
     * 刪除會話
     * 重用 sessionAPI.deleteSession 的重試機制和錯誤處理
     */
    async deleteSession(sessionId: string): Promise<void> {
        this.logInfo('刪除會話', { sessionId })

        try {
            const result = await sessionAPI.deleteSession(sessionId)

            this.logSuccess('會話刪除成功', {
                sessionId,
                result
            })
        } catch (error) {
            this.handleError('刪除會話', error)
        }
    }

    /**
     * 獲取服務狀態摘要
     * 擴展基礎狀態信息，包含 API 連接狀態
     */
    async getServiceStatus(): Promise<SessionServiceStatus> {
        const baseStatus = this.getStatus()

        // 檢查 API 連接狀態
        let apiConnected = false
        let lastApiCheck: string | null = null

        try {
            await this.checkActiveSession()
            apiConnected = true
            lastApiCheck = new Date().toISOString()
        } catch {
            apiConnected = false
            lastApiCheck = new Date().toISOString()
        }

        return {
            ...baseStatus,
            apiConnected,
            lastApiCheck
        }
    }
}

/**
 * SessionService 狀態介面
 * 擴展基礎服務狀態，包含 API 特定信息
 */
export interface SessionServiceStatus {
    serviceName: string
    isInitialized: boolean
    isRunning: boolean
    timestamp: string
    apiConnected: boolean
    lastApiCheck: string | null
}


# END FILE CONTENTS


# File: app/db/supabase_init.sql

/* -----------------------------------------------
StudyScriber – Supabase Database Bootstrap v2025-07-13
------------------------------------------------- */

-- ---------- ENUM TYPES ----------
DO $$ BEGIN
    CREATE TYPE session_type AS ENUM ('note_only', 'recording');
EXCEPTION WHEN duplicate_object THEN NULL; END $$;

DO $$ BEGIN
    CREATE TYPE session_status AS ENUM ('active', 'completed', 'error');
EXCEPTION WHEN duplicate_object THEN NULL; END $$;

DO $$ BEGIN
    CREATE TYPE lang_code AS ENUM ('zh-TW', 'en-US');
EXCEPTION WHEN duplicate_object THEN NULL; END $$;

COMMENT ON TYPE lang_code IS '語言代碼：zh-TW=繁體中文；en-US=美式英文';

-- ---------- TABLE: sessions ----------
CREATE TABLE IF NOT EXISTS sessions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid (),
    type session_type NOT NULL DEFAULT 'note_only',
    status session_status NOT NULL DEFAULT 'active',
    title VARCHAR(255) DEFAULT '未命名筆記',
    lang_code lang_code NOT NULL DEFAULT 'zh-TW', -- ★ 改名
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    started_at TIMESTAMPTZ,
    stt_provider TEXT,
    completed_at TIMESTAMPTZ
);

-- ---------- TABLE: notes ----------
CREATE TABLE IF NOT EXISTS notes (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid (),
    session_id UUID NOT NULL REFERENCES sessions (id) ON DELETE CASCADE,
    content TEXT NOT NULL DEFAULT '',
    client_ts TIMESTAMPTZ,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (session_id) -- 每個 session 僅一條 note
);

-- ---------- TABLE: audio_files ----------
CREATE TABLE IF NOT EXISTS audio_files (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid (),
    session_id UUID NOT NULL REFERENCES sessions (id) ON DELETE CASCADE,
    chunk_sequence INTEGER NOT NULL,
    r2_key TEXT NOT NULL,
    r2_bucket TEXT NOT NULL,
    file_size INTEGER NOT NULL,
    duration_seconds DECIMAL(10, 3),
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (session_id, chunk_sequence)
);

-- ---------- TABLE: transcript_segments ----------
CREATE TABLE IF NOT EXISTS transcript_segments (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid (),
    session_id UUID NOT NULL REFERENCES sessions (id) ON DELETE CASCADE,
    chunk_sequence INTEGER NOT NULL,
    start_time DECIMAL(10, 3) NOT NULL,
    end_time DECIMAL(10, 3) NOT NULL,
    text TEXT NOT NULL,
    confidence DECIMAL(5, 4) DEFAULT 0.0,
    lang_code lang_code DEFAULT 'zh-TW', -- ★ 改名
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

-- ---------- TABLE: transcripts ----------
CREATE TABLE IF NOT EXISTS transcripts (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid (),
    session_id UUID NOT NULL REFERENCES sessions (id) ON DELETE CASCADE,
    full_text TEXT NOT NULL DEFAULT '',
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (session_id) -- 每個 session 僅一條完整逐字稿
);

-- ---------- INDEXES ----------
CREATE INDEX IF NOT EXISTS idx_sessions_status ON sessions (status);

CREATE INDEX IF NOT EXISTS idx_sessions_created_at ON sessions (created_at);

CREATE INDEX IF NOT EXISTS idx_notes_session_id ON notes (session_id);

CREATE INDEX IF NOT EXISTS idx_audio_files_session_id ON audio_files (session_id);

CREATE INDEX IF NOT EXISTS idx_audio_files_sequence ON audio_files (session_id, chunk_sequence);

CREATE INDEX IF NOT EXISTS idx_transcript_segments_session_id ON transcript_segments (session_id);

CREATE INDEX IF NOT EXISTS idx_transcript_segments_sequence ON transcript_segments (session_id, chunk_sequence);

CREATE INDEX IF NOT EXISTS idx_transcripts_session_id ON transcripts (session_id);

-- ---------- TRIGGER: update updated_at ----------
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS trigger LANGUAGE plpgsql AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END $$;

DROP TRIGGER IF EXISTS update_sessions_updated_at ON sessions;

DROP TRIGGER IF EXISTS update_notes_updated_at ON notes;

DROP TRIGGER IF EXISTS update_transcripts_updated_at ON transcripts;

CREATE TRIGGER update_sessions_updated_at
    BEFORE UPDATE ON sessions
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_notes_updated_at
    BEFORE UPDATE ON notes
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_transcripts_updated_at
    BEFORE UPDATE ON transcripts
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- ---------- TRIGGER: single active session ----------
CREATE OR REPLACE FUNCTION check_single_active_session()
RETURNS trigger LANGUAGE plpgsql AS $$
BEGIN
    IF NEW.status = 'active' THEN
        UPDATE sessions
           SET status      = 'completed',
               completed_at = CURRENT_TIMESTAMP
         WHERE status = 'active'
           AND id      <> NEW.id;
    END IF;
    RETURN NEW;
END $$;

DROP TRIGGER IF EXISTS ensure_single_active_session ON sessions;

CREATE TRIGGER ensure_single_active_session
    BEFORE INSERT OR UPDATE ON sessions
    FOR EACH ROW EXECUTE FUNCTION check_single_active_session();

-- ---------- DONE ----------
SELECT 'StudyScriber 資料庫初始化完成！' AS message;


# END FILE CONTENTS


# File: frontend/components/ui/tooltip.tsx

"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }


# END FILE CONTENTS


# File: frontend/components/ui/dropdown-menu.tsx

"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}


# END FILE CONTENTS


# File: app/ws/transcript_feed.py

import asyncio
import logging
import json
from fastapi import APIRouter, WebSocket, WebSocketDisconnect
from typing import Dict, List

logger = logging.getLogger(__name__)
router = APIRouter()

class ConnectionManager:
    def __init__(self):
        # 將活躍連接儲存在字典中，以 session_id 為鍵
        self.active_connections: Dict[str, List[WebSocket]] = {}
        logger.info("ConnectionManager (In-Memory) 已初始化")

    async def connect(self, websocket: WebSocket, session_id: str):
        await websocket.accept()
        if session_id not in self.active_connections:
            self.active_connections[session_id] = []
        self.active_connections[session_id].append(websocket)
        logger.info(f"WebSocket 客戶端已連接到 session_id: {session_id}。目前該 session 有 {len(self.active_connections[session_id])} 個連接。")

    def disconnect(self, websocket: WebSocket, session_id: str):
        if session_id in self.active_connections:
            try:
                self.active_connections[session_id].remove(websocket)
                logger.info(f"WebSocket 客戶端已從 session_id: {session_id} 斷開。")
                if not self.active_connections[session_id]:
                    del self.active_connections[session_id]
                    logger.info(f"Session_id: {session_id} 已無連接，從管理器中移除。")
            except ValueError:
                logger.warning(f"嘗試斷開一個不存在於 session_id: {session_id} 的 WebSocket 連接。")
        else:
            logger.warning(f"嘗試從一個不存在的 session_id: {session_id} 斷開連接。")

    async def broadcast(self, message: str, session_id: str):
        if session_id in self.active_connections and self.active_connections[session_id]:
            client_count = len(self.active_connections[session_id])
            logger.info(f"📡 [ConnectionManager] 正在向 session_id: {session_id} 的 {client_count} 個客戶端廣播訊息")

            # 記錄訊息內容（簡化版）
            try:
                import json
                parsed_msg = json.loads(message)
                msg_type = parsed_msg.get('type', parsed_msg.get('phase', 'unknown'))
                logger.info(f"📡 [ConnectionManager] 訊息類型: {msg_type}")
                if 'text' in parsed_msg:
                    text_preview = parsed_msg['text'][:30] + ('...' if len(parsed_msg['text']) > 30 else '')
                    logger.info(f"📡 [ConnectionManager] 文字預覽: '{text_preview}'")
            except:
                logger.info(f"📡 [ConnectionManager] 原始訊息: {message[:100]}...")

            # 建立一個任務列表以併發發送
            tasks = [connection.send_text(message) for connection in self.active_connections[session_id]]
            results = await asyncio.gather(*tasks, return_exceptions=True)

            # 檢查發送結果
            success_count = sum(1 for r in results if not isinstance(r, Exception))
            error_count = len(results) - success_count

            if error_count > 0:
                logger.warning(f"📡 [ConnectionManager] 廣播結果: {success_count} 成功, {error_count} 失敗")
                for i, result in enumerate(results):
                    if isinstance(result, Exception):
                        logger.error(f"📡 [ConnectionManager] 客戶端 {i} 發送失敗: {result}")
            else:
                logger.info(f"✅ [ConnectionManager] 廣播成功: 所有 {client_count} 個客戶端都收到訊息")
        else:
            logger.warning(f"⚠️ [ConnectionManager] 廣播失敗：找不到 session_id: {session_id} 的活躍連接")
            logger.info(f"📊 [ConnectionManager] 目前活躍 sessions: {list(self.active_connections.keys())}")

# 建立一個全域的 ConnectionManager 實例
manager = ConnectionManager()

@router.websocket("/ws/transcript_feed/{session_id}")
async def websocket_endpoint(websocket: WebSocket, session_id: str):
    """
    用於接收即時逐字稿的 WebSocket 端點。

    - 每个 session_id 建立一個獨立的廣播頻道。
    - 客戶端連接後，會加入對應 session_id 的頻道並監聽訊息。
    - 後端轉錄服務完成後，會將結果發布到此頻道。
    """
    await manager.connect(websocket, session_id)
    # 新增：告知前端等待階段
    await websocket.send_text(json.dumps({"phase": "waiting"}))
    try:
        # 保持連線開啟以接收廣播
        while True:
            # 這個迴圈主要是為了維持連線狀態，
            # receive_text() 會等待客戶端發送訊息。
            # 我們可以設定一個 timeout 來定期檢查連線或進行清理。
            await websocket.receive_text()

    except WebSocketDisconnect:
        logger.info(f"WebSocket for session {session_id} 主動斷開連接。")
        manager.disconnect(websocket, session_id)
    except Exception as e:
        logger.error(f"WebSocket for session {session_id} 發生意外錯誤: {e}")
        manager.disconnect(websocket, session_id)


# END FILE CONTENTS


# File: frontend/constants/providers.ts

export const PROVIDERS = [
  { code: 'whisper', label: 'Azure Whisper' },
  { code: 'gpt4o', label: 'Azure GPT-4o-transcribe' },
];


# END FILE CONTENTS


# File: frontend/app/globals.css

@tailwind base;
@tailwind components;
@tailwind utilities;
@import "easymde/dist/easymde.min.css";

@theme {
  --color-background: oklch(1 0 0);
  --color-foreground: oklch(0.145 0 0);
  --color-muted: oklch(0.898 0 0);
  --color-muted-foreground: oklch(0.478 0 0);
  --color-border: oklch(0.898 0 0);
  --color-primary: oklch(0.205 0 0);
  --color-primary-foreground: oklch(0.985 0 0);
}

:root {
  --border: 210, 12%, 83%;
}

/* Custom SimpleMDE styling to match design system */
.CodeMirror {
  font-family: ui-sans-serif, system-ui, sans-serif;
  font-size: 14px;
  line-height: 1.6;
  color: oklch(0.145 0 0);
  background-color: oklch(1 0 0);
  border: none;
  padding: 16px;
}

.editor-toolbar {
  border: none;
  background-color: oklch(1 0 0);
  padding: 16px;
  border-bottom: 1px solid oklch(0.898 0 0);
}

.editor-toolbar a {
  color: oklch(0.478 0 0) !important;
  border: none !important;
  padding: 8px !important;
  margin: 0 4px !important;
}

.editor-toolbar a:hover {
  background-color: oklch(0.898 0 0) !important;
  color: oklch(0.145 0 0) !important;
}

.editor-toolbar.fullscreen {
  background-color: oklch(1 0 0);
}

.CodeMirror-fullscreen {
  background-color: oklch(1 0 0);
}

/* Make SimpleMDE container fill full height */
.editor-container .react-simplemde-editor {
  height: 100%;
  display: flex;
  flex-direction: column;
}

.editor-container .editor-toolbar {
  flex-shrink: 0;
}

.editor-container .CodeMirror {
  flex: 1;
  height: auto !important;
}

.editor-container .CodeMirror-scroll {
  min-height: 100%;
}

.EasyMDEContainer .editor-toolbar {
  border: 0px solid transparent !important;
}

.EasyMDEContainer .CodeMirror-wrap {
  border-width: 1px 0px 0px 0px !important;
}

# END FILE CONTENTS


# File: frontend/lib/stream/audio-uploader.ts

"use client"

/**
 * AudioUploader - 音訊上傳 WebSocket 類別
 *
 * 負責建立 /ws/upload_audio/{sessionId} WebSocket 連接
 * 並發送音訊切片到後端進行語音辨識
 */
export class AudioUploader {
    private ws: WebSocket | null = null
    private sessionId: string | null = null
    private sequenceNumber = 0  // 音訊切片序號
    private reconnectAttempts = 0  // 重連嘗試次數
    private maxReconnectAttempts = 5  // 最大重連次數
    private reconnectDelay = 1000  // 重連延遲（毫秒）
    private pendingChunks: Map<number, Blob> = new Map()  // 待重發的音訊切片

    /**
     * 連接音訊上傳 WebSocket
     */
    async connect(sessionId: string): Promise<void> {
        this.sessionId = sessionId
        this.sequenceNumber = 0  // 重置序號
        this.reconnectAttempts = 0  // 重置重連計數
        this.pendingChunks.clear()  // 清空待處理切片

        const wsBaseUrl = process.env.NEXT_PUBLIC_WS_URL || 'ws://localhost:8000'
        const wsUrl = `${wsBaseUrl}/ws/upload_audio/${sessionId}`

        console.log('🔌 [AudioUploader] 正在連接:', wsUrl)

        this.ws = new WebSocket(wsUrl)

        return new Promise((resolve, reject) => {
            if (!this.ws) return reject(new Error('WebSocket 創建失敗'))

            this.ws.onopen = () => {
                console.log('✅ [AudioUploader] WebSocket 連接成功:', sessionId)
                resolve()
            }

            this.ws.onerror = (error) => {
                console.error('❌ [AudioUploader] WebSocket 錯誤:', error)
                reject(new Error('AudioUploader WebSocket 連接失敗'))
            }

            this.ws.onclose = (event) => {
                console.log('🔌 [AudioUploader] WebSocket 連接已關閉:', {
                    code: event.code,
                    reason: event.reason,
                    sessionId: this.sessionId,
                    wasClean: event.wasClean
                })

                // 如果不是手動關閉，嘗試重連
                if (!event.wasClean && this.sessionId && this.reconnectAttempts < this.maxReconnectAttempts) {
                    this.attemptReconnect()
                }
            }

            this.ws.onmessage = (event) => {
                try {
                    const message = JSON.parse(event.data)
                    this.handleServerMessage(message)
                } catch (error) {
                    console.log('📥 [AudioUploader] 收到非 JSON 消息:', event.data)
                }
            }
        })
    }

    /**
     * 處理伺服器消息
     */
    private handleServerMessage(message: any): void {
        console.log('📥 [AudioUploader] 收到伺服器消息:', message)

        switch (message.type) {
            case 'ack':
                console.log(`✅ [AudioUploader] 音訊切片 #${message.chunk_sequence} 確認收到`)
                break
            case 'upload_error':
                console.error(`❌ [AudioUploader] 上傳錯誤 #${message.chunk_sequence}:`, message.error)
                break
            case 'connection_established':
                console.log('✅ [AudioUploader] 連接已建立')
                break
            default:
                console.log('📥 [AudioUploader] 未知消息類型:', message.type)
        }
    }

    /**
     * 發送音訊切片（修正的 4-byte sequence + Blob 格式）
     * 合併序號和音檔數據為一個二進制消息，使用小端序與後端匹配
     */
    async send(blob: Blob, sequence?: number): Promise<void> {
        if (this.ws?.readyState !== WebSocket.OPEN) {
            console.warn('⚠️ [AudioUploader] WebSocket 未連接，無法發送音訊數據', {
                readyState: this.ws?.readyState,
                expectedState: WebSocket.OPEN,
                sessionId: this.sessionId,
                sequence: sequence ?? this.sequenceNumber
            })
            return
        }

        // 使用傳入的序號或內部序號
        const currentSequence = sequence ?? this.sequenceNumber

        console.log(`📤 [AudioUploader] 準備發送音訊切片 #${currentSequence}`, {
            blobSize: blob.size,
            mimeType: blob.type,
            sessionId: this.sessionId,
            timestamp: new Date().toISOString()
        })

        try {
            // 修正：將序號和音檔數據合併為一個二進制消息
            // 4-byte sequence (小端序) + Blob 數據
            const sequenceBuffer = new ArrayBuffer(4)
            const sequenceView = new DataView(sequenceBuffer)
            sequenceView.setUint32(0, currentSequence, true) // true = 小端序，與後端匹配

            // 將序號和音檔數據合併
            const blobArrayBuffer = await blob.arrayBuffer()
            const combinedBuffer = new ArrayBuffer(4 + blobArrayBuffer.byteLength)
            const combinedView = new Uint8Array(combinedBuffer)

            // 複製序號到合併緩衝區
            combinedView.set(new Uint8Array(sequenceBuffer), 0)
            // 複製音檔數據到合併緩衝區
            combinedView.set(new Uint8Array(blobArrayBuffer), 4)

            // 一次性發送合併的二進制數據
            this.ws.send(combinedBuffer)

            console.log(`✅ [AudioUploader] 音訊切片 #${currentSequence} 發送成功: ${blob.size} bytes (總計: ${combinedBuffer.byteLength} bytes)`)

            // DEV 模式診斷計數
            if (process.env.NODE_ENV === 'development') {
                this.updateDevDiagnostics(currentSequence, blob.size)
            }

            // 只有使用內部序號時才遞增
            if (sequence === undefined) {
                this.sequenceNumber++
            }

        } catch (error) {
            console.error(`❌ [AudioUploader] 發送音訊切片 #${currentSequence} 失敗:`, error)
            this.handleSendError(currentSequence, error)
        }
    }

    /**
     * 處理發送錯誤的重試機制
     */
    private handleSendError(sequence: number, error: any): void {
        console.error(`❌ [AudioUploader] 序號 #${sequence} 發送錯誤:`, error)
        // 可以在這裡實作重試邏輯
        // 例如：將失敗的序號加入重試佇列
    }

    /**
     * 嘗試重新連接 WebSocket
     */
    private async attemptReconnect(): Promise<void> {
        this.reconnectAttempts++

        console.log(`🔄 [AudioUploader] 嘗試重連 (#${this.reconnectAttempts}/${this.maxReconnectAttempts})`)

        // 漸進式延遲重連
        const delay = this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1)

        setTimeout(async () => {
            try {
                if (this.sessionId) {
                    await this.connect(this.sessionId)
                    console.log('✅ [AudioUploader] 重連成功')
                    this.reconnectAttempts = 0 // 重置重連計數

                    // 重新發送待處理的音訊切片
                    this.resendPendingChunks()
                }
            } catch (error) {
                console.error(`❌ [AudioUploader] 重連失敗 (#${this.reconnectAttempts}):`, error)

                if (this.reconnectAttempts < this.maxReconnectAttempts) {
                    this.attemptReconnect()
                } else {
                    console.error('❌ [AudioUploader] 已達重連最大次數，停止嘗試')
                }
            }
        }, delay)
    }

    /**
     * 重新發送待處理的音訊切片
     */
    private resendPendingChunks(): void {
        if (this.pendingChunks.size === 0) return

        console.log(`🔄 [AudioUploader] 重新發送 ${this.pendingChunks.size} 個待處理切片`)

        for (const [sequence, blob] of this.pendingChunks.entries()) {
            this.send(blob, sequence)
        }

        // 清空待處理切片
        this.pendingChunks.clear()
    }

    /**
     * 更新開發模式診斷信息
     */
    private updateDevDiagnostics(sequence: number, blobSize: number): void {
        if (!(window as any).__rec) {
            (window as any).__rec = {
                chunksSent: 0,
                totalBytes: 0,
                isRecording: false,
                sessionId: null,
                lastSequence: -1,
                errors: 0
            }
        }

        const rec = (window as any).__rec
        rec.chunksSent++
        rec.totalBytes += blobSize
        rec.sessionId = this.sessionId
        rec.isRecording = true
        rec.lastSequence = sequence

        console.log(`🔍 [AudioUploader] DEV 診斷:`, {
            chunksSent: rec.chunksSent,
            totalBytes: rec.totalBytes,
            lastSequence: sequence,
            sessionId: this.sessionId
        })
    }

    /**
     * 重置序號（重新開始錄音時使用）
     */
    resetSequence(): void {
        this.sequenceNumber = 0
        console.log('🔄 [AudioUploader] 序號已重置')
    }

    /**
     * 關閉 WebSocket 連接
     */
    close(): void {
        if (this.ws) {
            this.ws.close()
            this.ws = null
        }

        this.sessionId = null
        this.sequenceNumber = 0
        this.reconnectAttempts = 0
        this.pendingChunks.clear()

        // 更新 DEV 模式診斷狀態
        if (process.env.NODE_ENV === 'development' && (window as any).__rec) {
            (window as any).__rec.isRecording = false
        }

        console.log('🔌 [AudioUploader] WebSocket 已關閉')
    }

    /**
     * 檢查連接狀態
     */
    get isConnected(): boolean {
        return this.ws?.readyState === WebSocket.OPEN
    }

    /**
     * 獲取當前會話 ID
     */
    get currentSessionId(): string | null {
        return this.sessionId
    }

    /**
     * 獲取當前序號
     */
    get currentSequence(): number {
        return this.sequenceNumber
    }

    /**
     * 獲取 WebSocket 狀態
     */
    get connectionState(): string {
        if (!this.ws) return 'NOT_CREATED'

        switch (this.ws.readyState) {
            case WebSocket.CONNECTING: return 'CONNECTING'
            case WebSocket.OPEN: return 'OPEN'
            case WebSocket.CLOSING: return 'CLOSING'
            case WebSocket.CLOSED: return 'CLOSED'
            default: return 'UNKNOWN'
        }
    }
}

/**
 * 默認的音訊上傳器實例
 * 可在整個應用中共用
 */
export const audioUploader = new AudioUploader()


# END FILE CONTENTS


# File: frontend/components/ui/label.tsx

"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }


# END FILE CONTENTS


# File: app/api/sessions.py

"""
StudyScriber Session 管理 API 端點

使用 Supabase Client 實作會話建立、完成和升級功能
"""

from uuid import UUID
from typing import Dict, Any
from datetime import datetime
from fastapi import APIRouter, Depends, HTTPException, status
from supabase import Client
from app.core.config import get_settings

from app.db.database import get_supabase_client
from app.schemas.session import (
    SessionCreateRequest, SessionOut, SessionUpgradeRequest,
    SessionFinishRequest, SessionStatusResponse, SessionStatus, SessionType, LanguageCode,
    SessionProviderUpdateRequest
)

# 建立路由器
router = APIRouter(prefix="/api", tags=["會話管理"])


@router.post("/session", response_model=SessionOut, status_code=status.HTTP_201_CREATED)
async def create_session(
    request: SessionCreateRequest,
    supabase: Client = Depends(get_supabase_client)
) -> SessionOut:
    """
    建立新會話 (B-001)

    - 支援兩種模式：純筆記 (note_only) 或錄音模式 (recording)
    - 確保同時只有一個活躍會話
    - 自動建立對應的空白筆記記錄
    - 支援精確的錄音開始時間戳
    """
    try:
        # 檢查是否有其他活躍會話
        active_session_response = supabase.table("sessions").select("id").eq("status", "active").limit(1).execute()
        if active_session_response.data:
            raise HTTPException(
                status_code=status.HTTP_409_CONFLICT,
                detail="已有一個活躍的會話，無法建立新會話。"
            )

        session_data = {
            "title": request.title,
            "type": request.type.value,
            "language": request.language.value,
            "status": SessionStatus.ACTIVE.value,
            "stt_provider": request.stt_provider or get_settings().STT_PROVIDER_DEFAULT
        }

        # 如果有提供 start_ts，轉換為 PostgreSQL 時間戳格式
        if request.start_ts is not None:
            started_at = datetime.fromtimestamp(request.start_ts / 1000).isoformat()
            session_data["started_at"] = started_at
            print(f"🕐 [SessionAPI] 設定錄音開始時間: {started_at} (原始時間戳: {request.start_ts})")

        # 若為錄音模式且仍未設定 started_at，則預設為目前時間 (UTC)
        if request.type == SessionType.RECORDING and "started_at" not in session_data:
            session_data["started_at"] = datetime.utcnow().isoformat()

        response = supabase.table("sessions").insert(session_data, returning="representation").execute()

        if not response.data:
            raise HTTPException(status_code=500, detail="無法建立會話")

        new_session = response.data[0]
        session_id = new_session['id']

        note_data = {"session_id": session_id, "content": request.content or ""}
        supabase.table("notes").insert(note_data).execute()

        return SessionOut.model_validate(new_session)

    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail={"error": "internal_error", "message": f"建立會話時發生錯誤: {str(e)}"}
        )


@router.patch("/session/{session_id}/finish", response_model=SessionStatusResponse)
async def finish_session(
    session_id: UUID,
    supabase: Client = Depends(get_supabase_client)
) -> SessionStatusResponse:
    """
    完成會話 (B-002)

    - 將活躍會話標記為完成
    - 設定完成時間
    - 釋放會話鎖定，允許建立新會話
    """
    try:
        # 檢查會話是否存在且活躍
        session_response = supabase.table("sessions").select("*").eq("id", str(session_id)).eq("status", "active").limit(1).execute()
        if not session_response.data:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="找不到活躍的會話或會話已被完成。"
            )

        # 準備更新數據
        update_data = {
            "status": SessionStatus.COMPLETED.value,
            "completed_at": datetime.utcnow().isoformat()
        }

        # 更新會話狀態
        response = supabase.table("sessions").update(update_data).eq("id", str(session_id)).execute()

        if not response.data:
            raise HTTPException(status_code=500, detail="無法更新會話狀態")

        updated_session = response.data[0]

        return SessionStatusResponse(
            success=True,
            message=f"會話 '{updated_session.get('title') or session_id}' 已成功完成",
            session=SessionOut.model_validate(updated_session)
        )

    except HTTPException:
        # 重新拋出已處理的 HTTP 異常
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail={"error": "internal_error", "message": f"完成會話時發生錯誤: {str(e)}"}
        )


@router.delete("/session/{session_id}", response_model=SessionStatusResponse)
async def delete_session(
    session_id: UUID,
    supabase: Client = Depends(get_supabase_client)
) -> SessionStatusResponse:
    """
    刪除會話及其所有相關數據 (B-020)

    - 刪除指定的會話及其所有關聯數據（筆記、音檔、逐字稿等）
    - 由於資料庫有 CASCADE DELETE 約束，會自動清理所有相關表格的數據
    - 此操作不可逆，請謹慎使用
    """
    try:
        # 檢查會話是否存在
        session_response = supabase.table("sessions").select("*").eq("id", str(session_id)).limit(1).execute()
        if not session_response.data:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="找不到指定的會話。"
            )

        session_data = session_response.data[0]
        session_title = session_data.get('title', '未命名筆記')

        # 刪除會話（會自動級聯刪除所有相關數據）
        delete_response = supabase.table("sessions").delete().eq("id", str(session_id)).execute()

        if not delete_response.data:
            raise HTTPException(status_code=500, detail="無法刪除會話")

        return SessionStatusResponse(
            success=True,
            message=f"會話 '{session_title}' ({session_id}) 及其所有相關數據已成功刪除",
            session=None
        )

    except HTTPException:
        # 重新拋出已處理的 HTTP 異常
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail={"error": "internal_error", "message": f"刪除會話時發生錯誤: {str(e)}"}
        )


@router.patch("/session/{session_id}/upgrade", response_model=SessionOut)
async def upgrade_session_to_recording(
    session_id: UUID,
    request: SessionUpgradeRequest,
    supabase: Client = Depends(get_supabase_client)
) -> SessionOut:
    """
    升級會話至錄音模式 (B-015)

    - 將純筆記會話升級為錄音模式
    - 只有 active 狀態的 note_only 會話可以升級
    """
    try:
        # 檢查會話是否可以升級
        session_response = supabase.table("sessions").select("*").eq("id", str(session_id)).eq("status", "active").eq("type", "note_only").limit(1).execute()
        if not session_response.data:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="只有活躍的純筆記會話才能升級。"
            )

        # 準備更新數據
        update_data = {
            "type": SessionType.RECORDING.value,
            "language": request.language.value,
            "started_at": datetime.utcnow().isoformat(),
        }

        # 執行升級
        response = supabase.table("sessions").update(update_data).eq("id", str(session_id)).execute()

        if not response.data:
            raise HTTPException(status_code=500, detail="無法升級會話")

        updated_session = response.data[0]

        return SessionOut.model_validate(updated_session)

    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail={"error": "internal_error", "message": f"升級會話時發生錯誤: {str(e)}"}
        )


@router.get("/session/active", response_model=SessionOut, status_code=status.HTTP_200_OK)
async def get_active_session(
    supabase: Client = Depends(get_supabase_client)
) -> SessionOut:
    """
    取得目前活躍的會話

    - 用於前端檢查是否有進行中的會話
    - 如果沒有活躍會話則返回 404
    """
    response = supabase.table("sessions").select("*").eq("status", "active").limit(1).execute()
    if not response.data:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail={"error": "no_active_session", "message": "目前沒有活躍的會話"}
        )

    return SessionOut.model_validate(response.data[0])


@router.get("/session/{session_id}", response_model=SessionOut)
async def get_session(
    session_id: UUID,
    supabase: Client = Depends(get_supabase_client)
) -> SessionOut:
    """
    取得指定會話的詳細資訊

    - 用於檢視會話狀態和資訊
    """
    response = supabase.table("sessions").select("*").eq("id", str(session_id)).limit(1).execute()

    if not response.data:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail={"error": "session_not_found", "message": "找不到指定的會話"}
        )

    return SessionOut.model_validate(response.data[0])


@router.patch("/session/{session_id}/provider", response_model=SessionOut)
async def update_session_provider(
    session_id: UUID,
    request: SessionProviderUpdateRequest,
    supabase: Client = Depends(get_supabase_client)
) -> SessionOut:
    """
    更新會話 STT Provider (B-016)

    - 僅在尚未上傳音檔時允許切換
    - 支援 whisper 和 gemini 之間的切換
    - 驗證 Provider 的有效性
    """
    try:
        # 檢查會話是否存在且為活躍狀態
        session_response = supabase.table("sessions").select("*").eq("id", str(session_id)).eq("status", "active").limit(1).execute()
        if not session_response.data:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="找不到活躍的會話。"
            )

        # 檢查是否已有音檔上傳（透過 audio_files 表）
        audio_files_response = supabase.table("audio_files").select("id").eq("session_id", str(session_id)).limit(1).execute()
        if audio_files_response.data:
            raise HTTPException(
                status_code=status.HTTP_409_CONFLICT,
                detail="已開始錄音，無法更改 STT Provider。"
            )

        # 驗證 Provider 有效性
        valid_providers = ["whisper", "gemini"]
        if request.stt_provider not in valid_providers:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail=f"無效的 STT Provider。支援的選項：{', '.join(valid_providers)}"
            )

        # 更新 Provider
        update_data = {
            "stt_provider": request.stt_provider,
            "updated_at": datetime.utcnow().isoformat()
        }

        response = supabase.table("sessions").update(update_data).eq("id", str(session_id)).execute()

        if not response.data:
            raise HTTPException(status_code=500, detail="無法更新 STT Provider")

        updated_session = response.data[0]

        logger.info(f"✅ [SessionAPI] 成功更新 session {session_id} STT Provider: {request.stt_provider}")
        return SessionOut.model_validate(updated_session)

    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail={"error": "internal_error", "message": f"更新 STT Provider 時發生錯誤: {str(e)}"}
        )


# END FILE CONTENTS


# File: package.json

{
	"devDependencies": {
		"@playwright/test": "^1.54.1",
		"jszip": "^3.10.1"
	},
	"packageManager": "pnpm@10.7.0+sha1.66453f13fbf9078d3db193718206a8d738afdbdb"
}


# END FILE CONTENTS


# File: frontend/components/recording-active-state.tsx

"use client"

import { useEffect, useRef, useState, useCallback } from "react"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Button } from "@/components/ui/button"
import { Square, Clock } from "lucide-react"
import type { TranscriptEntry } from "../types/app-state"

interface RecordingActiveStateProps {
    transcriptEntries: TranscriptEntry[]
    recordingTime: number
    onStopRecording: () => void
}

// 格式化錄音時間為 HH:MM:SS 格式
function formatRecordingTime(seconds: number): string {
    const hours = Math.floor(seconds / 3600)
    const minutes = Math.floor((seconds % 3600) / 60)
    const secs = seconds % 60

    if (hours > 0) {
        return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`
    }
    return `${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`
}

export function RecordingActiveState({ transcriptEntries, recordingTime, onStopRecording }: RecordingActiveStateProps) {
    const scrollAreaRef = useRef<HTMLDivElement>(null)
    const [isAutoScrollLocked, setIsAutoScrollLocked] = useState(true)
    const [userScrollTimeout, setUserScrollTimeout] = useState<NodeJS.Timeout | null>(null)

    // 自動捲動到底部
    const autoScroll = useCallback(() => {
        if (isAutoScrollLocked && scrollAreaRef.current) {
            const scrollContainer = scrollAreaRef.current.querySelector('[data-radix-scroll-area-viewport]')
            if (scrollContainer) {
                scrollContainer.scrollTop = scrollContainer.scrollHeight
            }
        }
    }, [isAutoScrollLocked])

    // 檢測使用者捲動行為
    const unlockOnScroll = useCallback(
        (event: Event) => {
            const target = event.target as HTMLElement
            if (target) {
                const { scrollTop, scrollHeight, clientHeight } = target
                const isAtBottom = Math.abs(scrollHeight - clientHeight - scrollTop) < 10

                if (!isAtBottom && isAutoScrollLocked) {
                    setIsAutoScrollLocked(false)
                } else if (isAtBottom && !isAutoScrollLocked) {
                    setIsAutoScrollLocked(true)
                }

                if (userScrollTimeout) clearTimeout(userScrollTimeout)

                const timeout = setTimeout(() => {
                    if (!isAutoScrollLocked) setIsAutoScrollLocked(true)
                }, 3000)

                setUserScrollTimeout(timeout)
            }
        },
        [isAutoScrollLocked, userScrollTimeout]
    )

    // 手動切換自動捲動鎖定狀態（保持功能但不顯示按鈕）
    const toggleAutoScrollLock = useCallback(() => setIsAutoScrollLocked(prev => !prev), [])

    // 禁用合併段落邏輯 - 用戶要求一句話一個時間戳
    const mergeSegments = useCallback((entries: TranscriptEntry[]): TranscriptEntry[] => {
        // 直接返回原始條目，不進行任何合併
        return entries
    }, [])

    // 自動捲動
    useEffect(() => {
        autoScroll()
    }, [transcriptEntries, autoScroll])

    // 監聽捲動
    useEffect(() => {
        const scrollContainer = scrollAreaRef.current?.querySelector('[data-radix-scroll-area-viewport]')
        if (scrollContainer) {
            scrollContainer.addEventListener("scroll", unlockOnScroll)
            return () => scrollContainer.removeEventListener("scroll", unlockOnScroll)
        }
    }, [unlockOnScroll])

    // 清理計時器
    useEffect(() => {
        return () => {
            if (userScrollTimeout) {
                clearTimeout(userScrollTimeout)
            }
        }
    }, [userScrollTimeout])

    const mergedEntries = mergeSegments(transcriptEntries)

    return (
        <div className="h-full flex flex-col">
            <ScrollArea className="flex-1" ref={scrollAreaRef}>
                <div className="p-6 space-y-4">
                    {mergedEntries.map((entry, index) => (
                        <div key={index} className="flex gap-4 text-sm">
                            <span className="text-muted-foreground font-mono text-xs mt-1 min-w-[40px] flex-shrink-0">
                                {entry.time}
                            </span>
                            <span className="text-foreground leading-relaxed flex-1">{entry.text}</span>
                        </div>
                    ))}
                </div>
            </ScrollArea>

            <div className="p-4 border-t border-border flex justify-between items-center">
                <div className="flex items-center gap-2 text-muted-foreground">
                    <Clock className="w-4 h-4" />
                    <span className="font-mono text-sm">
                        {formatRecordingTime(recordingTime)}
                    </span>
                </div>

                <Button onClick={onStopRecording} variant="destructive" size="sm" className="flex items-center gap-2">
                    <Square className="w-4 h-4" />
                    Stop
                </Button>
            </div>
        </div>
    )
}


# END FILE CONTENTS


# File: frontend/hooks/useNetworkRestorer.ts

"use client"
import { useEffect } from 'react'
import { emit } from '@/utils/event-bus'

export function useNetworkRestorer() {
    useEffect(() => {
        const handler = () => emit('network:restored')
        window.addEventListener('online', handler)
        return () => window.removeEventListener('online', handler)
    }, [])
}


# END FILE CONTENTS


# File: app/utils/validators.py

"""
檔案驗證工具

實作各種檔案格式的基本驗證功能
"""

import logging

logger = logging.getLogger(__name__)


def valid_webm(head: bytes) -> bool:
    """
    驗證 WebM 檔案格式

    檢查 EBML header 魔術數字 0x1A45DFA3
    WebM 是基於 Matroska 容器格式，使用 EBML 編碼

    Args:
        head: 檔案開頭的位元組資料（至少需要 4 bytes）

    Returns:
        bool: 如果是有效的 WebM 檔案則返回 True
    """
    if len(head) < 4:
        logger.warning("檔案過小，無法進行 WebM 格式驗證")
        return False

    # EBML header 魔術數字: 0x1A45DFA3
    ebml_header = b"\x1A\x45\xDF\xA3"

    is_valid = head.startswith(ebml_header)

    if is_valid:
        logger.debug("✅ WebM 檔案格式驗證通過")
    else:
        logger.warning(f"❌ WebM 檔案格式驗證失敗: 期望 {ebml_header.hex()}, 實際 {head[:4].hex()}")

    return is_valid


def valid_audio_size(size_bytes: int, max_size: int = 5 * 1024 * 1024) -> bool:
    """
    驗證音檔大小

    Args:
        size_bytes: 檔案大小（位元組）
        max_size: 最大允許大小（預設 5MB）

    Returns:
        bool: 如果檔案大小在允許範圍內則返回 True
    """
    is_valid = 0 < size_bytes <= max_size

    if is_valid:
        logger.debug(f"✅ 音檔大小驗證通過: {size_bytes} bytes")
    else:
        logger.warning(f"❌ 音檔大小驗證失敗: {size_bytes} bytes (限制: {max_size} bytes)")

    return is_valid


def valid_sequence_number(seq: int, min_seq: int = 0, max_seq: int = 9999) -> bool:
    """
    驗證序號範圍

    Args:
        seq: 序號
        min_seq: 最小序號（預設 0）
        max_seq: 最大序號（預設 9999）

    Returns:
        bool: 如果序號在有效範圍內則返回 True
    """
    is_valid = min_seq <= seq <= max_seq

    if is_valid:
        logger.debug(f"✅ 序號驗證通過: {seq}")
    else:
        logger.warning(f"❌ 序號驗證失敗: {seq} (範圍: {min_seq}-{max_seq})")

    return is_valid


# END FILE CONTENTS


# File: frontend/lib/__tests__/advanced-audio-recorder.test.ts

import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest'
import { AdvancedAudioRecorder, checkAdvancedAudioRecordingSupport } from '../advanced-audio-recorder'

// Track created instances
let mockInstances: any[] = []

const MockMediaRecorder = vi.fn().mockImplementation((stream: any, options: any) => {
    // Create individual mock functions for each instance
    const instanceStart = vi.fn()
    const instanceStop = vi.fn()
    const instanceRequestData = vi.fn()

    const instance = {
        start: instanceStart,
        stop: instanceStop,
        requestData: instanceRequestData,
        state: 'inactive',
        ondataavailable: null,
        onerror: null,
        mimeType: options.mimeType,
        audioBitsPerSecond: options.audioBitsPerSecond,
        stream,
        options
    }
    mockInstances.push(instance)
    return instance
}) as any

MockMediaRecorder.isTypeSupported = vi.fn().mockReturnValue(true)

// Mock getUserMedia
const mockGetUserMedia = vi.fn()

describe('AdvancedAudioRecorder', () => {
    let recorder: AdvancedAudioRecorder
    let mockStream: any

    beforeEach(() => {
        // Reset mocks
        vi.clearAllMocks()
        mockInstances = [] // Reset instances array

        // Setup global mocks
        global.MediaRecorder = MockMediaRecorder as any

        // Reset and setup isTypeSupported mock
        MockMediaRecorder.isTypeSupported.mockClear()
        MockMediaRecorder.isTypeSupported.mockReturnValue(true)

        global.navigator = {
            mediaDevices: {
                getUserMedia: mockGetUserMedia
            }
        } as any

        // Mock stream
        mockStream = {
            getTracks: vi.fn().mockReturnValue([
                { stop: vi.fn() }
            ])
        }
        mockGetUserMedia.mockResolvedValue(mockStream)

        // Create recorder instance
        recorder = new AdvancedAudioRecorder({
            segmentDuration: 10000,
            mimeType: 'audio/webm;codecs=opus',
            audioBitsPerSecond: 128000
        })
    })

    afterEach(() => {
        recorder.cleanup()
    })

    describe('checkAdvancedAudioRecordingSupport', () => {
        it('should return supported when all APIs are available', async () => {
            const result = await checkAdvancedAudioRecordingSupport()
            expect(result.isSupported).toBe(true)
        })

        it('should return unsupported when MediaDevices is not available', async () => {
            global.navigator = {} as any
            const result = await checkAdvancedAudioRecordingSupport()
            expect(result.isSupported).toBe(false)
            expect(result.error).toContain('MediaDevices API')
        })

        it('should return unsupported when MediaRecorder is not available', async () => {
            delete (global as any).MediaRecorder
            const result = await checkAdvancedAudioRecordingSupport()
            expect(result.isSupported).toBe(false)
            expect(result.error).toContain('MediaRecorder API')
        })

        it('should return unsupported when mime type is not supported', async () => {
            MockMediaRecorder.isTypeSupported.mockReturnValue(false)
            const result = await checkAdvancedAudioRecordingSupport()
            expect(result.isSupported).toBe(false)
            expect(result.error).toContain('音訊格式')
        })
    })

    describe('AdvancedAudioRecorder', () => {
        it('should initialize with default config', () => {
            expect(recorder.currentConfig).toEqual({
                segmentDuration: 10000,
                mimeType: 'audio/webm;codecs=opus',
                audioBitsPerSecond: 128000
            })
        })

        it('should accept custom config', () => {
            const customRecorder = new AdvancedAudioRecorder({
                segmentDuration: 5000,
                audioBitsPerSecond: 64000
            })
            expect(customRecorder.currentConfig.segmentDuration).toBe(5000)
            expect(customRecorder.currentConfig.audioBitsPerSecond).toBe(64000)
        })

        it('should initialize media stream', async () => {
            await recorder.initialize()
            expect(mockGetUserMedia).toHaveBeenCalledWith({ audio: true })
        })

        it('should not reinitialize if already initialized', async () => {
            await recorder.initialize()
            await recorder.initialize()
            expect(mockGetUserMedia).toHaveBeenCalledTimes(1)
        })

        it('should start recording with dual MediaRecorder strategy', async () => {
            const onSegmentCallback = vi.fn()
            await recorder.start(onSegmentCallback)

            expect(recorder.recording).toBe(true)
            expect(mockInstances[0].start).toHaveBeenCalledTimes(1) // Current recorder started
        })

        it('should create MediaRecorder with correct options', async () => {
            const onSegmentCallback = vi.fn()
            await recorder.start(onSegmentCallback)

            // Check if MediaRecorder was created with correct options
            expect(MockMediaRecorder).toHaveBeenCalledWith(
                mockStream,
                {
                    mimeType: 'audio/webm;codecs=opus',
                    audioBitsPerSecond: 128000
                }
            )
        })

        it('should handle segment data available', async () => {
            const onSegmentCallback = vi.fn()
            await recorder.start(onSegmentCallback)

            // Get the first MediaRecorder instance created
            const mockRecorderInstance = mockInstances[0]

            // Simulate data available event
            const mockBlob = new Blob(['test data'], { type: 'audio/webm' })
            const mockEvent = { data: mockBlob }

            if (mockRecorderInstance.ondataavailable) {
                mockRecorderInstance.ondataavailable(mockEvent)
            }

            expect(onSegmentCallback).toHaveBeenCalledWith({
                blob: mockBlob,
                timestamp: expect.any(Number),
                duration: 10000,
                sequence: 0
            })
        })

        it('should increment sequence number for each segment', async () => {
            const onSegmentCallback = vi.fn()
            await recorder.start(onSegmentCallback)

            const mockRecorderInstance = mockInstances[0]
            const mockBlob = new Blob(['test data'], { type: 'audio/webm' })
            const mockEvent = { data: mockBlob }

            // First segment
            if (mockRecorderInstance.ondataavailable) {
                mockRecorderInstance.ondataavailable(mockEvent)
            }
            expect(onSegmentCallback).toHaveBeenLastCalledWith(
                expect.objectContaining({ sequence: 0 })
            )

            // Second segment
            if (mockRecorderInstance.ondataavailable) {
                mockRecorderInstance.ondataavailable(mockEvent)
            }
            expect(onSegmentCallback).toHaveBeenLastCalledWith(
                expect.objectContaining({ sequence: 1 })
            )
        })

        it('should stop recording and cleanup', async () => {
            const onSegmentCallback = vi.fn()
            await recorder.start(onSegmentCallback)

            expect(recorder.recording).toBe(true)

            recorder.stop()

            expect(recorder.recording).toBe(false)
            // Verify that at least 2 MediaRecorder instances were created (dual strategy)
            expect(mockInstances.length).toBeGreaterThanOrEqual(2)
        })

        it('should prevent starting when already recording', async () => {
            const onSegmentCallback = vi.fn()
            await recorder.start(onSegmentCallback)

            await expect(recorder.start(onSegmentCallback)).rejects.toThrow('錄製已在進行中')
        })

        it('should handle MediaRecorder errors', async () => {
            const onSegmentCallback = vi.fn()
            const onErrorCallback = vi.fn()
            recorder.onError(onErrorCallback)

            await recorder.start(onSegmentCallback)

            const mockRecorderInstance = mockInstances[0]
            const mockError = new Error('MediaRecorder error')

            if (mockRecorderInstance.onerror) {
                mockRecorderInstance.onerror(mockError)
            }

            expect(onErrorCallback).toHaveBeenCalledWith(expect.any(Error))
            expect(recorder.recording).toBe(false)
        })

        it('should cleanup resources properly', async () => {
            const onSegmentCallback = vi.fn()
            await recorder.start(onSegmentCallback)

            recorder.cleanup()

            expect(recorder.recording).toBe(false)
            expect(mockStream.getTracks()[0].stop).toHaveBeenCalled()
        })

        it('should schedule recorder swap after segment duration', async () => {
            vi.useFakeTimers()

            const onSegmentCallback = vi.fn()
            await recorder.start(onSegmentCallback)

            // Initially should have 2 recorders (current + next)
            expect(mockInstances.length).toBe(2)

            // Fast-forward time to trigger swap
            vi.advanceTimersByTime(10000)

            // After swap, should have created additional recorders
            expect(mockInstances.length).toBeGreaterThan(2)

            // Verify recorder is still recording
            expect(recorder.recording).toBe(true)

            vi.useRealTimers()
        })

        it('should not swap recorders after stop is called', async () => {
            vi.useFakeTimers()

            const onSegmentCallback = vi.fn()
            await recorder.start(onSegmentCallback)

            recorder.stop()

            // Fast-forward time
            vi.advanceTimersByTime(10000)

            // Should not start additional recorders after stop
            expect(mockInstances[0].start).toHaveBeenCalledTimes(1)

            vi.useRealTimers()
        })
    })
})


# END FILE CONTENTS


# File: frontend/__tests__/integration/state-transitions.test.tsx

import { beforeEach, describe, expect, test, vi } from 'vitest'
import { renderHook, act } from '@testing-library/react'
import { createElement } from 'react'
import { AppStateProvider } from '../../hooks/use-app-state-context'
import { StateMachine } from '../../lib/state-machine'
import { featureFlagManager } from '../../lib/feature-flags'
import type { ReactNode } from 'react'
import type { AppState } from '../../types/app-state'

// Mock localStorage
const localStorageMock = {
    getItem: vi.fn(),
    setItem: vi.fn(),
    removeItem: vi.fn(),
    clear: vi.fn(),
}

Object.defineProperty(window, 'localStorage', {
    value: localStorageMock
})

function TestWrapper({ children }: { children: ReactNode }) {
    return createElement(AppStateProvider, null, children)
}

describe('狀態轉換測試', () => {
    beforeEach(() => {
        vi.clearAllMocks()
        featureFlagManager.reset()
        featureFlagManager.enable('useNewStateManagement')
        localStorageMock.getItem.mockReturnValue(null)
    })

    describe('基本狀態轉換', () => {
        test('應該支援 default → recording_waiting 轉換', () => {
            const stateMachine = new StateMachine('default')

            const canTransition = stateMachine.canTransition('START_RECORDING')
            expect(canTransition).toBe(true)

            const newState = stateMachine.transition('START_RECORDING')
            expect(newState).toBe('recording_waiting')
        })

        test('應該支援 recording_waiting → recording_active 轉換', () => {
            const stateMachine = new StateMachine('recording_waiting')

            const canTransition = stateMachine.canTransition('RECORDING_STARTED')
            expect(canTransition).toBe(true)

            const newState = stateMachine.transition('RECORDING_STARTED')
            expect(newState).toBe('recording_active')
        })

        test('應該支援 recording_active → processing 轉換', () => {
            const stateMachine = new StateMachine('recording_active')

            const canTransition = stateMachine.canTransition('STOP_RECORDING')
            expect(canTransition).toBe(true)

            const newState = stateMachine.transition('STOP_RECORDING')
            expect(newState).toBe('processing')
        })

        test('應該支援 processing → finished 轉換', () => {
            const stateMachine = new StateMachine('processing')

            const canTransition = stateMachine.canTransition('PROCESSING_COMPLETE')
            expect(canTransition).toBe(true)

            const newState = stateMachine.transition('PROCESSING_COMPLETE')
            expect(newState).toBe('finished')
        })
    })

    describe('狀態轉換限制', () => {
        test('不應該允許無效的狀態轉換', () => {
            const stateMachine = new StateMachine('default')

            // 不能直接從 default 跳到 recording_active
            const canTransition = stateMachine.canTransition('RECORDING_STARTED')
            expect(canTransition).toBe(false)

            // 嘗試無效轉換應該拋出錯誤
            expect(() => {
                stateMachine.transition('RECORDING_STARTED')
            }).toThrow()
        })

        test('finished 狀態應該只能重置到 default', () => {
            const stateMachine = new StateMachine('finished')

            // 只能重置
            expect(stateMachine.canTransition('RESET')).toBe(true)
            expect(stateMachine.canTransition('START_RECORDING')).toBe(false)
            expect(stateMachine.canTransition('STOP_RECORDING')).toBe(false)

            const newState = stateMachine.transition('RESET')
            expect(newState).toBe('default')
        })

        test('應該支援從任何狀態重置到 default', () => {
            const states: AppState[] = ['default', 'recording_waiting', 'recording_active', 'processing', 'finished']

            states.forEach(state => {
                const stateMachine = new StateMachine(state)
                expect(stateMachine.canTransition('RESET')).toBe(true)
                expect(stateMachine.transition('RESET')).toBe('default')
            })
        })
    })

    describe('完整狀態流程', () => {
        test('應該支援完整的錄音流程', () => {
            const stateMachine = new StateMachine('default')

            // 完整流程：default → recording_waiting → recording_active → processing → finished
            expect(stateMachine.getCurrentState()).toBe('default')

            // 開始錄音
            const waitingState = stateMachine.transition('START_RECORDING')
            expect(waitingState).toBe('recording_waiting')

            // 錄音開始
            const activeState = stateMachine.transition('RECORDING_STARTED')
            expect(activeState).toBe('recording_active')

            // 停止錄音
            const processingState = stateMachine.transition('STOP_RECORDING')
            expect(processingState).toBe('processing')

            // 處理完成
            const finishedState = stateMachine.transition('PROCESSING_COMPLETE')
            expect(finishedState).toBe('finished')

            // 重置
            const resetState = stateMachine.transition('RESET')
            expect(resetState).toBe('default')
        })

        test('應該支援筆記模式流程', () => {
            const stateMachine = new StateMachine('default')

            // 筆記模式：default → finished (直接完成)
            expect(stateMachine.getCurrentState()).toBe('default')

            const finishedState = stateMachine.transition('FINISH_SESSION')
            expect(finishedState).toBe('finished')
        })
    })

    describe('錯誤恢復', () => {
        test('應該支援錯誤狀態恢復', () => {
            const stateMachine = new StateMachine('recording_active')

            // 從錄音中發生錯誤
            const errorState = stateMachine.transition('ERROR')
            expect(errorState).toBe('default')
        })

        test('應該支援會話升級', () => {
            const stateMachine = new StateMachine('default')

            // 升級到錄音模式
            const upgradedState = stateMachine.transition('UPGRADE_TO_RECORDING')
            expect(upgradedState).toBe('recording_waiting')
        })
    })

    describe('並發狀態變更', () => {
        test('狀態機應該是線程安全的', () => {
            const stateMachine = new StateMachine('default')
            const results: AppState[] = []

            // 模擬並發轉換
            const transitions = [
                'START_RECORDING',
                'RESET',
                'START_RECORDING',
                'RESET'
            ]

            transitions.forEach(trigger => {
                try {
                    const newState = stateMachine.transition(trigger as any)
                    results.push(newState)
                } catch (error) {
                    // 某些轉換可能失敗，這是預期的
                }
            })

            // 最後狀態應該是有效的
            const finalState = stateMachine.getCurrentState()
            const validStates: AppState[] = ['default', 'recording_waiting', 'recording_active', 'processing', 'finished']
            expect(validStates).toContain(finalState)
        })
    })

    describe('狀態歷史', () => {
        test('應該記錄狀態轉換歷史', () => {
            const stateMachine = new StateMachine('default')

            stateMachine.transition('START_RECORDING')
            stateMachine.transition('RECORDING_STARTED')
            stateMachine.transition('STOP_RECORDING')

            const history = stateMachine.getHistory()
            expect(history).toHaveLength(4) // 包含初始狀態
            expect(history[0]).toBe('default')
            expect(history[1]).toBe('recording_waiting')
            expect(history[2]).toBe('recording_active')
            expect(history[3]).toBe('processing')
        })

        test('應該支援回到上一個狀態', () => {
            const stateMachine = new StateMachine('default')

            stateMachine.transition('START_RECORDING')
            stateMachine.transition('RECORDING_STARTED')

            const canGoBack = stateMachine.canGoBack()
            expect(canGoBack).toBe(true)

            const previousState = stateMachine.goBack()
            expect(previousState).toBe('recording_waiting')
            expect(stateMachine.getCurrentState()).toBe('recording_waiting')
        })
    })
})


# END FILE CONTENTS


# File: frontend/types/websocket-messages.ts

/* ============================================================
 * 型別安全：所有 WS 訊息的 Discriminated Union
 * ============================================================
 */

/** 共用欄位（可視需求增刪） */
interface BaseMessage {
    /** 來源伺服器時間（毫秒） */
    timestamp: number
}

/** 逐字稿片段 */
export interface TranscriptSegmentMessage extends BaseMessage {
    type: 'transcript_segment'
    text: string
    start_time: number
    end_time: number
    confidence: number
}

/** 連線建立成功 */
export interface ConnectionEstablishedMessage extends BaseMessage {
    type: 'connection_established'
    message: string
}

/** 整段逐字稿完成 */
export interface TranscriptCompleteMessage extends BaseMessage {
    type: 'transcript_complete'
    message: string
}

/** 心跳回覆 */
export interface HeartbeatAckMessage extends BaseMessage {
    type: 'heartbeat_ack'
}

/** Pong 回覆 */
export interface PongMessage extends BaseMessage {
    type: 'pong'
}

/** 一般錯誤 */
export interface ErrorMessage extends BaseMessage {
    type: 'error'
    error_type: string
    error_message: string
    details?: unknown
}

/** 轉錄服務錯誤 */
export interface TranscriptionErrorMessage extends BaseMessage {
    type: 'transcription_error'
    error_type: string
    error_message: string
}

/** 後端狀態切換（無 type 欄位，另拆） */
export interface PhaseMessage {
    phase: 'waiting' | 'active'
}

/** → 最終 Union */
export type WSMessage =
    | TranscriptSegmentMessage
    | ConnectionEstablishedMessage
    | TranscriptCompleteMessage
    | HeartbeatAckMessage
    | PongMessage
    | ErrorMessage
    | TranscriptionErrorMessage
    | PhaseMessage


# END FILE CONTENTS
