---
description:
globs:
alwaysApply: false
---
<!-- Source: https://x.com/lis186/status/1933375334738767937/?rw_tt_thread=True&s=09&t=h5yOWySic0MDe7a-rgiE5Q&__readwiseLocation= -->

# 開發筆記記錄規則

此規則定義 AI assistant 如何在開發過程中自動記錄重大決策、遇到的問題與解決方法，形成完整的開發筆記。

## 目的

自動追蹤並記錄每個功能開發過程中的：
- 重大技術決策與理由
- 遇到的問題及解決方案
- 品質指標達成情況
- 開發經驗與學習心得

這些記錄將幫助團隊：
- 確認開發方向正確性
- 避免重複犯錯
- 建立知識庫
- 提升開發效率

## 記錄觸發時機

AI 應在以下情況自動更新開發筆記：

1. **開始新任務時**: 創建新的任務記錄
2. **做出技術決策時**: 記錄決策內容與理由
3. **遇到問題時**: 記錄問題現象與解決過程
4. **完成功能時**: 更新品質指標與完成狀態
5. **學到新知識時**: 記錄學習心得

## 記錄格式規範

### 文件位置
所有開發筆記存放在 `.cursor/rules/development-notes/` 目錄中，每個主要功能或模組一個文件。

### 命名規則
- 文件名：`[模組名稱]-dev-notes.md`
- 例如：`user-auth-dev-notes.md`、`payment-system-dev-notes.md`

### 內容格式範本

```markdown
# [模組名稱] 開發筆記

## Task X.X: [任務名稱] (完成日期: YYYY-MM-DD)

### 重大技術決策
- **決策內容**: [具體決策描述]
  - **理由**: [決策原因與考量因素]
  - **替代方案**: [曾考慮的其他選項]
  - **影響範圍**: [對系統的影響]

- **技術選型**: [選擇的技術/框架/工具]
  - **考量因素**: [選型標準與評估過程]
  - **優勢**: [選擇此技術的好處]
  - **風險**: [潛在風險與應對策略]

- **架構設計**: [架構決定]
  - **設計原則**: [遵循的設計原則]
  - **擴展性考量**: [未來擴展的設計]

### 遇到的問題及解決方案

#### 問題 1: [問題簡要描述]
- **問題現象**: [具體錯誤或問題描述，包含錯誤訊息]
- **發生時間**: [何時發現問題]
- **根本原因**: [深入分析問題成因]
- **解決方案**:
  ```
  [具體解決步驟和代碼修改]
  ```
- **驗證方法**: [如何確認問題已解決]
- **學習心得**: [避免類似問題的經驗與預防措施]

### 品質指標達成情況
- **測試覆蓋率**: X% (目標: Y%)
- **測試通過率**: X/X (通過/總數)
- **編譯狀態**: 無錯誤/警告 ✅ | 有問題 ❌
- **Lint 檢查**: 通過 ✅ | 需修正 ❌
- **效能指標**: [API 回應時間、記憶體使用量等]
- **安全檢查**: [安全漏洞掃描結果]

### 開發里程碑
- [ ] 需求分析完成
- [ ] 技術方案確定
- [ ] 核心功能開發
- [ ] 測試撰寫完成
- [ ] Code Review 通過
- [ ] 部署測試完成
- [ ] 正式上線

### 後續改進計畫
- [需要優化的地方]
- [技術債務]
- [功能增強建議]
```

## AI 執行指引

### 自動記錄行為

1. **任務開始時**
   ```
   AI 檢測到新功能開發開始 →
   創建對應的開發筆記文件 →
   初始化任務記錄區塊
   ```

2. **技術決策時**
   ```
   AI 提出或討論技術方案 →
   自動在筆記中記錄決策內容、理由、替代方案 →
   標記決策時間與上下文
   ```

3. **問題解決時**
   ```
   遇到錯誤或問題 →
   記錄問題現象與分析過程 →
   記錄解決方案與驗證結果 →
   總結學習心得
   ```

4. **品質檢查時**
   ```
   執行測試或檢查 →
   更新品質指標數據 →
   標記未通過的項目與改進計畫
   ```

### 記錄原則

1. **即時記錄**: 在問題發生和解決的當下立即記錄
2. **詳細準確**: 記錄具體的錯誤訊息、代碼片段、解決步驟
3. **結構化**: 遵循統一的格式範本
4. **可搜尋**: 使用明確的關鍵字和標籤
5. **持續更新**: 隨著開發進程不斷補充和完善

### 提醒機制

AI 應在以下時候主動提醒更新開發筆記：
- 完成一個重要功能後
- 解決一個複雜問題後
- 做出重大架構決策後
- 每日開發結束時

## 使用範例

當 AI 幫助用戶解決一個資料庫連接問題時，應該自動執行：

1. 在對應的開發筆記文件中添加問題記錄
2. 記錄問題現象、根本原因、解決步驟
3. 更新品質指標（如果有測試）
4. 總結學習心得和預防措施

這樣用戶在功能開發完成時，就能直接查看開發筆記，確認開發方向和品質狀況。
