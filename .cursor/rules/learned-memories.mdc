---
description:
globs:
alwaysApply: true
---
# Project Memory

This file stores project-specific knowledge, conventions, and user preferences learned by the AI assistant.

## User Preferences

- **語言偏好**: 使用台灣繁體中文 (zh-tw) 進行溝通
- **Python 縮排設定**: 使用者希望 Python 檔案按 Tab 鍵時一律使用 4 個空白縮排
- **設定複雜度**: 使用者偏好簡潔的設定，不要過於複雜的工具配置
- **開發工具**: 當需要執行 Python 腳本或管理依賴時，應優先使用 `uv`

## Technical Decisions

- **Python 縮排**: 專案統一使用 4 個空白縮排，符合 PEP 8 標準
- **行長度限制**: 使用 79 字元符合 PEP 8 標準
- **設定檔案**: 只保留 .editorconfig 和基本的 pyproject.toml
- **資料庫選擇**: 使用 Supabase PostgreSQL 作為主要資料庫
- **檔案儲存**: 音訊檔案使用 Cloudflare R2 儲存，降低成本
- **語音識別**: 使用 Azure OpenAI Whisper API 進行音檔轉錄
- **前端框架**: 使用 Next.js + React + TypeScript + Tailwind CSS

## Project Conventions

- **縮排標準**: Python 檔案必須使用 4 個空白，不使用 Tab 字元
- **簡潔原則**: 避免過度複雜的工具設定和配置檔案
- **基本工具**: 只使用必要的格式化工具（Black、isort）
- **前端狀態管理**: StudyScriber 採用四狀態設計：default(預設畫面，可寫筆記) → recording(錄音中，即時逐字稿) → processing(處理逐字稿，使用者等待) → finished(完整逐字稿，可匯出或開新筆記)
- **會話類型**: 支援兩種會話類型：note_only（純筆記）和 recording（錄音），可從純筆記升級到錄音模式
- **併發控制**: 同時只能有一個非 completed/error 狀態的 session

## Architecture Patterns

- **前後端分離**: FastAPI 後端 + Next.js 前端
- **即時通訊**: 使用 WebSocket 處理音檔上傳和逐字稿推送
- **狀態同步**: 前端狀態與後端 session status 對應
- **檔案命名**: 音檔使用格式 `audio/{session_id}/chunk_{sequence:04d}.webm`
- **資料流**: 前端錄音 → WebSocket 上傳 → R2 儲存 → 批次轉錄 → WebSocket 推送結果

## Tool Usage

- **查官方 Spec**: 套用第三方工具或程式時，先使用 Context7 工具確認最新且正確用法
- **前端測試**: 前端測試時，使用 MCP Playwright 檢查前端行為
- **Python 執行**: 優先使用 `uv run python main.py` 取代 `python main.py`
- **依賴管理**: 使用 uv 進行 Python 依賴管理

## Business Logic

- **核心價值**: 提供「邊錄邊轉錄」的雲端筆記服務
- **目標族群**: 成年自學者
- **主要功能**: 可選錄音、即時逐字稿、Markdown 筆記與匯出
- **使用場景**: 支援純筛記、先筆記後錄音、邊錄邊記三種模式
- **匯出格式**: 純筆記(.md) 或 完整包(.webm + transcript.txt + note.md)
