"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./hooks/use-app-state-new.ts":
/*!************************************!*\
  !*** ./hooks/use-app-state-new.ts ***!
  \************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useAppStateNew: () => (/* binding */ useAppStateNew)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@15.2.4_@babel+core@7.27.4_@playwright+test@1.53.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _use_app_state_context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./use-app-state-context */ \"(app-pages-browser)/./hooks/use-app-state-context.ts\");\n/* harmony import */ var _use_session_adapter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./use-session-adapter */ \"(app-pages-browser)/./hooks/use-session-adapter.ts\");\n/* harmony import */ var _use_recording_adapter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./use-recording-adapter */ \"(app-pages-browser)/./hooks/use-recording-adapter.ts\");\n/* harmony import */ var _use_notes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./use-notes */ \"(app-pages-browser)/./hooks/use-notes.ts\");\n/* harmony import */ var _use_transcript_adapter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./use-transcript-adapter */ \"(app-pages-browser)/./hooks/use-transcript-adapter.ts\");\n/* harmony import */ var _components_ui_use_toast__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/components/ui/use-toast */ \"(app-pages-browser)/./components/ui/use-toast.ts\");\n/* harmony import */ var _lib_state_machine__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../lib/state-machine */ \"(app-pages-browser)/./lib/state-machine.ts\");\n/* __next_internal_client_entry_do_not_use__ useAppStateNew auto */ \n\n\n\n\n\n\n\n/**\n * 新版本的 useAppState Hook\n * 使用 Context 狀態管理，大幅簡化原本 868 行的複雜邏輯\n * 將狀態管理委託給 AppStateContext，Hook 只負責業務邏輯\n */ function useAppStateNew() {\n    var _appData_session;\n    const context = (0,_use_app_state_context__WEBPACK_IMPORTED_MODULE_1__.useAppStateContext)();\n    const { appData, isLoading, error, dispatch, transition } = context;\n    const session = (0,_use_session_adapter__WEBPACK_IMPORTED_MODULE_2__.useSession)();\n    const recording = (0,_use_recording_adapter__WEBPACK_IMPORTED_MODULE_3__.useRecording)();\n    const notes = (0,_use_notes__WEBPACK_IMPORTED_MODULE_4__.useNotes)();\n    const transcript = (0,_use_transcript_adapter__WEBPACK_IMPORTED_MODULE_5__.useTranscript)();\n    const { toast } = (0,_components_ui_use_toast__WEBPACK_IMPORTED_MODULE_6__.useToast)();\n    console.log('🔄 [useAppStateNew] Hook 初始化:', {\n        currentState: appData.state,\n        isRecording: appData.isRecording,\n        sessionId: (_appData_session = appData.session) === null || _appData_session === void 0 ? void 0 : _appData_session.id,\n        transcriptCount: appData.transcriptEntries.length\n    });\n    const [stateMachineManager] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        \"useAppStateNew.useState\": ()=>{\n            const smManager = new _lib_state_machine__WEBPACK_IMPORTED_MODULE_7__.StateMachineManager({\n                currentState: appData.state,\n                isRecording: appData.isRecording,\n                transcriptCount: appData.transcriptEntries.length,\n                session: appData.session || null,\n                error: error\n            });\n            // 立即註冊副作用處理器\n            smManager.registerSideEffectHandler('CREATE_SESSION', {\n                handleSideEffect: {\n                    \"useAppStateNew.useState\": async (effect)=>{\n                        console.log('🏗️ [副作用] CREATE_SESSION: 建立會話', effect);\n                        // 這裡需要傳入標題，我們可以從某個地方獲取或使用預設值\n                        const title = 'New Recording'; // 預設標題，之後可以改進\n                        const newSession = await session.createRecordingSession(title, appData.editorContent);\n                        if (newSession) {\n                            dispatch({\n                                type: 'SET_SESSION',\n                                payload: newSession\n                            });\n                            // 更新狀態機上下文\n                            smManager.getStateMachine().updateContext({\n                                currentState: appData.state,\n                                isRecording: appData.isRecording,\n                                transcriptCount: appData.transcriptEntries.length,\n                                session: newSession,\n                                error: error\n                            });\n                            localStorage.removeItem('draft_note');\n                        } else {\n                            throw new Error('無法建立錄音會話');\n                        }\n                    }\n                }[\"useAppStateNew.useState\"]\n            });\n            smManager.registerSideEffectHandler('START_RECORDING', {\n                handleSideEffect: {\n                    \"useAppStateNew.useState\": async ()=>{\n                        var _context_session;\n                        // 從狀態機上下文獲取最新的 session 資訊\n                        const context = smManager.getStateMachine().getContext();\n                        if ((_context_session = context.session) === null || _context_session === void 0 ? void 0 : _context_session.id) {\n                            console.log('🎤 [副作用] START_RECORDING: 開始錄音', context.session.id);\n                            await recording.startRecording(context.session.id);\n                        } else {\n                            console.error('🎤 [副作用] START_RECORDING: 沒有可用的 session');\n                        }\n                    }\n                }[\"useAppStateNew.useState\"]\n            });\n            smManager.registerSideEffectHandler('STOP_RECORDING', {\n                handleSideEffect: {\n                    \"useAppStateNew.useState\": async ()=>{\n                        await stopRecording();\n                    }\n                }[\"useAppStateNew.useState\"]\n            });\n            smManager.registerSideEffectHandler('CONNECT_WEBSOCKET', {\n                handleSideEffect: {\n                    \"useAppStateNew.useState\": async ()=>{\n                        var _context_session;\n                        // 從狀態機上下文獲取最新的 session 資訊\n                        const context = smManager.getStateMachine().getContext();\n                        if ((_context_session = context.session) === null || _context_session === void 0 ? void 0 : _context_session.id) {\n                            console.log('🔌 [副作用] CONNECT_WEBSOCKET: 連接 WebSocket', context.session.id);\n                            await transcript.connect(context.session.id);\n                        } else {\n                            console.error('🔌 [副作用] CONNECT_WEBSOCKET: 沒有可用的 session');\n                        }\n                    }\n                }[\"useAppStateNew.useState\"]\n            });\n            smManager.registerSideEffectHandler('DISCONNECT_WEBSOCKET', {\n                handleSideEffect: {\n                    \"useAppStateNew.useState\": ()=>{\n                        transcript.disconnect();\n                    }\n                }[\"useAppStateNew.useState\"]\n            });\n            smManager.registerSideEffectHandler('FINISH_SESSION', {\n                handleSideEffect: {\n                    \"useAppStateNew.useState\": async ()=>{\n                        await finishSession();\n                    }\n                }[\"useAppStateNew.useState\"]\n            });\n            return smManager;\n        }\n    }[\"useAppStateNew.useState\"]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useAppStateNew.useEffect\": ()=>{\n            stateMachineManager.getStateMachine().updateContext({\n                currentState: appData.state,\n                isRecording: appData.isRecording,\n                transcriptCount: appData.transcriptEntries.length,\n                session: appData.session,\n                error: error\n            });\n        }\n    }[\"useAppStateNew.useEffect\"], [\n        appData,\n        error,\n        stateMachineManager\n    ]);\n    // 建立純筆記會話\n    const createNoteSession = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useAppStateNew.useCallback[createNoteSession]\": async (title)=>{\n            dispatch({\n                type: 'SET_LOADING',\n                payload: true\n            });\n            dispatch({\n                type: 'CLEAR_ERROR'\n            });\n            try {\n                const newSession = await session.createNoteSession(title);\n                if (newSession) {\n                    dispatch({\n                        type: 'SET_SESSION',\n                        payload: newSession\n                    });\n                    // 載入筆記內容\n                    await notes.loadNote(newSession.id);\n                    // 清除本地草稿\n                    localStorage.removeItem('draft_note');\n                    console.log('✅ [useAppStateNew] 純筆記會話建立成功');\n                    toast({\n                        title: '筆記會話已建立',\n                        description: '會話 \"'.concat(title, '\" 建立成功')\n                    });\n                }\n            } catch (err) {\n                const errorMessage = err instanceof Error ? err.message : '建立筆記會話失敗';\n                dispatch({\n                    type: 'SET_ERROR',\n                    payload: errorMessage\n                });\n                console.error('❌ [useAppStateNew] 建立筆記會話失敗:', err);\n                toast({\n                    title: '建立失敗',\n                    description: errorMessage,\n                    variant: 'destructive'\n                });\n            } finally{\n                dispatch({\n                    type: 'SET_LOADING',\n                    payload: false\n                });\n            }\n        }\n    }[\"useAppStateNew.useCallback[createNoteSession]\"], [\n        session,\n        notes,\n        toast,\n        dispatch\n    ]);\n    // 建立錄音會話\n    const createRecordingSession = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useAppStateNew.useCallback[createRecordingSession]\": async (title)=>{\n            dispatch({\n                type: 'SET_LOADING',\n                payload: true\n            });\n            dispatch({\n                type: 'CLEAR_ERROR'\n            });\n            try {\n                const newSession = await session.createRecordingSession(title, appData.editorContent);\n                if (newSession) {\n                    dispatch({\n                        type: 'SET_SESSION',\n                        payload: newSession\n                    });\n                    // 載入筆記內容\n                    await notes.loadNote(newSession.id);\n                    // 清除本地草稿\n                    localStorage.removeItem('draft_note');\n                    console.log('✅ [useAppStateNew] 錄音會話建立成功');\n                    toast({\n                        title: '錄音會話已建立',\n                        description: '會話 \"'.concat(title, '\" 建立成功')\n                    });\n                }\n            } catch (err) {\n                // 特別處理會話衝突錯誤\n                if (err instanceof Error && err.message.includes('檢測到活躍會話衝突')) {\n                    const conflictMsg = '偵測到會話衝突，請重新整理頁面後再試';\n                    dispatch({\n                        type: 'SET_ERROR',\n                        payload: conflictMsg\n                    });\n                    toast({\n                        title: '會話衝突',\n                        description: '目前已有活躍會話，請重新整理頁面後再試，或等待當前會話結束',\n                        variant: 'destructive'\n                    });\n                    return;\n                }\n                const errorMessage = err instanceof Error ? err.message : '建立錄音會話失敗';\n                dispatch({\n                    type: 'SET_ERROR',\n                    payload: errorMessage\n                });\n                console.error('❌ [useAppStateNew] 建立錄音會話失敗:', err);\n                toast({\n                    title: '建立失敗',\n                    description: errorMessage,\n                    variant: 'destructive'\n                });\n            } finally{\n                dispatch({\n                    type: 'SET_LOADING',\n                    payload: false\n                });\n            }\n        }\n    }[\"useAppStateNew.useCallback[createRecordingSession]\"], [\n        session,\n        notes,\n        toast,\n        dispatch,\n        appData.editorContent\n    ]);\n    // 開始錄音 - 完全委託給狀態機\n    const startRecording = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useAppStateNew.useCallback[startRecording]\": async (title)=>{\n            console.log(\"🎤 [useAppStateNew] startRecording: 觸發狀態機\");\n            dispatch({\n                type: 'SET_LOADING',\n                payload: true\n            });\n            try {\n                // 檢查是否有現有會話需要處理\n                const latestActiveSession = await session.checkActiveSession();\n                const currentSession = latestActiveSession || session.currentSession;\n                if (currentSession) {\n                    if (currentSession.type === 'note_only') {\n                        // 升級現有會話\n                        console.log(\"🎤 [useAppStateNew] 升級現有會話為錄音模式\");\n                        const upgradedSession = await session.upgradeToRecording();\n                        if (upgradedSession) {\n                            dispatch({\n                                type: 'SET_SESSION',\n                                payload: upgradedSession\n                            });\n                            // 更新狀態機上下文\n                            stateMachineManager.getStateMachine().updateContext({\n                                currentState: appData.state,\n                                isRecording: appData.isRecording,\n                                transcriptCount: appData.transcriptEntries.length,\n                                session: upgradedSession,\n                                error: error\n                            });\n                        }\n                    } else {\n                        // 使用現有錄音會話\n                        console.log(\"🎤 [useAppStateNew] 使用現有錄音會話\");\n                        stateMachineManager.getStateMachine().updateContext({\n                            currentState: appData.state,\n                            isRecording: appData.isRecording,\n                            transcriptCount: appData.transcriptEntries.length,\n                            session: currentSession,\n                            error: error\n                        });\n                    }\n                }\n                // 觸發狀態轉換 - 讓狀態機處理所有邏輯\n                const result = transition('USER_START_RECORDING');\n                if (!(result === null || result === void 0 ? void 0 : result.success)) {\n                    throw new Error((result === null || result === void 0 ? void 0 : result.error) || '狀態轉換失敗');\n                }\n                console.log(\"🎤 [useAppStateNew] 狀態機處理完成\");\n                toast({\n                    title: '錄音開始'\n                });\n            } catch (err) {\n                const msg = err instanceof Error ? err.message : '開始錄音失敗';\n                dispatch({\n                    type: 'SET_ERROR',\n                    payload: msg\n                });\n                console.error(\"🎤 [useAppStateNew] 錄音失敗:\", msg);\n                toast({\n                    title: '錄音失敗',\n                    description: msg,\n                    variant: 'destructive'\n                });\n            } finally{\n                dispatch({\n                    type: 'SET_LOADING',\n                    payload: false\n                });\n            }\n        }\n    }[\"useAppStateNew.useCallback[startRecording]\"], [\n        session,\n        toast,\n        dispatch,\n        transition,\n        stateMachineManager,\n        appData.state,\n        appData.isRecording,\n        appData.transcriptEntries,\n        error\n    ]);\n    // 升級會話為錄音模式\n    const upgradeToRecording = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useAppStateNew.useCallback[upgradeToRecording]\": async ()=>{\n            dispatch({\n                type: 'SET_LOADING',\n                payload: true\n            });\n            dispatch({\n                type: 'CLEAR_ERROR'\n            });\n            try {\n                const updatedSession = await session.upgradeToRecording();\n                if (updatedSession) {\n                    dispatch({\n                        type: 'SET_SESSION',\n                        payload: updatedSession\n                    });\n                    console.log('✅ [useAppStateNew] 會話升級為錄音模式成功');\n                    toast({\n                        title: '升級成功',\n                        description: '會話已升級為錄音模式'\n                    });\n                }\n            } catch (err) {\n                const errorMessage = err instanceof Error ? err.message : '升級會話失敗';\n                dispatch({\n                    type: 'SET_ERROR',\n                    payload: errorMessage\n                });\n                console.error('❌ [useAppStateNew] 升級會話失敗:', err);\n                toast({\n                    title: '升級失敗',\n                    description: errorMessage,\n                    variant: 'destructive'\n                });\n            } finally{\n                dispatch({\n                    type: 'SET_LOADING',\n                    payload: false\n                });\n            }\n        }\n    }[\"useAppStateNew.useCallback[upgradeToRecording]\"], [\n        session,\n        toast,\n        dispatch\n    ]);\n    // 停止錄音\n    const stopRecording = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useAppStateNew.useCallback[stopRecording]\": async ()=>{\n            dispatch({\n                type: 'SET_LOADING',\n                payload: true\n            });\n            dispatch({\n                type: 'CLEAR_ERROR'\n            });\n            try {\n                await recording.stopRecording();\n                transcript.disconnect();\n                // 觸發狀態轉換\n                transition('USER_STOP_RECORDING');\n                console.log('✅ [useAppStateNew] 錄音停止，開始處理逐字稿');\n                toast({\n                    title: '處理中',\n                    description: '正在處理錄音內容，請稍候...'\n                });\n            } catch (err) {\n                const errorMessage = err instanceof Error ? err.message : '停止錄音失敗';\n                dispatch({\n                    type: 'SET_ERROR',\n                    payload: errorMessage\n                });\n                console.error('❌ [useAppStateNew] 停止錄音失敗:', err);\n                toast({\n                    title: '停止失敗',\n                    description: errorMessage,\n                    variant: 'destructive'\n                });\n            } finally{\n                dispatch({\n                    type: 'SET_LOADING',\n                    payload: false\n                });\n            }\n        }\n    }[\"useAppStateNew.useCallback[stopRecording]\"], [\n        recording,\n        transcript,\n        toast,\n        dispatch,\n        transition\n    ]);\n    // 完成會話\n    const finishSession = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useAppStateNew.useCallback[finishSession]\": async ()=>{\n            dispatch({\n                type: 'SET_LOADING',\n                payload: true\n            });\n            dispatch({\n                type: 'CLEAR_ERROR'\n            });\n            try {\n                await session.finishSession();\n                // 在這裡不需要觸發狀態轉換，因為 stopRecording 已經處理了\n                // dispatch({ type: 'SET_APP_STATE', payload: 'finished' })\n                console.log('✅ [useAppStateNew] 會話完成');\n                toast({\n                    title: '會話完成',\n                    description: '您可以匯出筆記或開始新的筆記'\n                });\n            } catch (err) {\n                const errorMessage = err instanceof Error ? err.message : '完成會話失敗';\n                dispatch({\n                    type: 'SET_ERROR',\n                    payload: errorMessage\n                });\n                console.error('❌ [useAppStateNew] 完成會話失敗:', err);\n                toast({\n                    title: '完成失敗',\n                    description: errorMessage,\n                    variant: 'destructive'\n                });\n            } finally{\n                dispatch({\n                    type: 'SET_LOADING',\n                    payload: false\n                });\n            }\n        }\n    }[\"useAppStateNew.useCallback[finishSession]\"], [\n        session,\n        toast,\n        dispatch\n    ]);\n    // 開新筆記\n    const newNote = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useAppStateNew.useCallback[newNote]\": async ()=>{\n            dispatch({\n                type: 'SET_LOADING',\n                payload: true\n            });\n            dispatch({\n                type: 'CLEAR_ERROR'\n            });\n            try {\n                // 如果有活躍會話，先刪除它\n                if (session.currentSession) {\n                    console.log('🗑️ [useAppStateNew] 刪除當前活躍會話:', session.currentSession.id);\n                    await session.deleteSession();\n                }\n                // 觸發狀態轉換\n                transition('USER_NEW_NOTE');\n                // 重置所有狀態\n                dispatch({\n                    type: 'RESET_STATE'\n                });\n                // 清除相關狀態\n                recording.clearTranscripts();\n                transcript.clearTranscripts();\n                notes.clearNote();\n                // 清除本地草稿\n                localStorage.removeItem('draft_note');\n                console.log('🔄 [useAppStateNew] 已開始新筆記');\n                toast({\n                    title: '新筆記',\n                    description: '已清空內容，可以開始新的筆記'\n                });\n            } catch (err) {\n                const errorMessage = err instanceof Error ? err.message : '開始新筆記失敗';\n                dispatch({\n                    type: 'SET_ERROR',\n                    payload: errorMessage\n                });\n                console.error('❌ [useAppStateNew] 開始新筆記失敗:', err);\n                toast({\n                    title: '操作失敗',\n                    description: errorMessage,\n                    variant: 'destructive'\n                });\n            } finally{\n                dispatch({\n                    type: 'SET_LOADING',\n                    payload: false\n                });\n            }\n        }\n    }[\"useAppStateNew.useCallback[newNote]\"], [\n        session,\n        recording,\n        transcript,\n        notes,\n        toast,\n        dispatch,\n        transition\n    ]);\n    // 自動儲存筆記內容到本地草稿\n    const saveLocalDraft = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useAppStateNew.useCallback[saveLocalDraft]\": (content)=>{\n            if (!session.currentSession && content.trim()) {\n                localStorage.setItem('draft_note', content);\n            }\n            dispatch({\n                type: 'SET_EDITOR_CONTENT',\n                payload: content\n            });\n        }\n    }[\"useAppStateNew.useCallback[saveLocalDraft]\"], [\n        session.currentSession,\n        dispatch\n    ]);\n    // 使用 useCallback 來記憶函數\n    const createRecordingSessionCallback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(createRecordingSession, [\n        session,\n        notes,\n        toast,\n        dispatch,\n        appData.editorContent\n    ]);\n    const startRecordingCallback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(startRecording, [\n        session,\n        recording,\n        toast,\n        dispatch,\n        appData.editorContent,\n        transition\n    ]);\n    const stopRecordingCallback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(stopRecording, [\n        recording,\n        transcript,\n        toast,\n        dispatch,\n        transition\n    ]);\n    const finishSessionCallback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(finishSession, [\n        session,\n        toast,\n        dispatch\n    ]);\n    const connectTranscriptCallback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(transcript.connect, [\n        transcript\n    ]);\n    const disconnectTranscriptCallback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(transcript.disconnect, [\n        transcript\n    ]);\n    return {\n        // 應用狀態（向後相容）\n        appData,\n        isLoading,\n        error,\n        // 會話管理\n        createNoteSession,\n        createRecordingSession,\n        upgradeToRecording,\n        finishSession,\n        newNote,\n        // 錄音控制\n        startRecording,\n        stopRecording,\n        // 本地草稿\n        saveLocalDraft,\n        // 外部狀態（向後相容）\n        session: session.currentSession,\n        sessionLoading: session.isLoading,\n        sessionError: session.error,\n        // 錄音狀態\n        recordingError: recording.error,\n        // 逐字稿狀態\n        transcriptConnected: transcript.isConnected,\n        transcriptError: transcript.error,\n        transcriptAutoScroll: transcript.autoScrollEnabled,\n        enableAutoScroll: transcript.enableAutoScroll,\n        disableAutoScroll: transcript.disableAutoScroll,\n        scrollToLatest: transcript.scrollToLatest\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2hvb2tzL3VzZS1hcHAtc3RhdGUtbmV3LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7b0VBRWdFO0FBQ0o7QUFDVjtBQUNJO0FBQ2hCO0FBQ2tCO0FBQ0o7QUFFTztBQUUzRDs7OztDQUlDLEdBQ00sU0FBU1U7UUFZREM7SUFYYixNQUFNQyxVQUFVVCwwRUFBa0JBO0lBQ2xDLE1BQU0sRUFBRVEsT0FBTyxFQUFFRSxTQUFTLEVBQUVDLEtBQUssRUFBRUMsUUFBUSxFQUFFQyxVQUFVLEVBQUUsR0FBR0o7SUFDNUQsTUFBTUssVUFBVWIsZ0VBQVVBO0lBQzFCLE1BQU1jLFlBQVliLG9FQUFZQTtJQUM5QixNQUFNYyxRQUFRYixvREFBUUE7SUFDdEIsTUFBTWMsYUFBYWIsc0VBQWFBO0lBQ2hDLE1BQU0sRUFBRWMsS0FBSyxFQUFFLEdBQUdiLGtFQUFRQTtJQUUxQmMsUUFBUUMsR0FBRyxDQUFDLGlDQUFpQztRQUMzQ0MsY0FBY2IsUUFBUWMsS0FBSztRQUMzQkMsYUFBYWYsUUFBUWUsV0FBVztRQUNoQ0MsU0FBUyxHQUFFaEIsbUJBQUFBLFFBQVFNLE9BQU8sY0FBZk4sdUNBQUFBLGlCQUFpQmlCLEVBQUU7UUFDOUJDLGlCQUFpQmxCLFFBQVFtQixpQkFBaUIsQ0FBQ0MsTUFBTTtJQUNuRDtJQUVBLE1BQU0sQ0FBQ0Msb0JBQW9CLEdBQUc5QiwrQ0FBUUE7bUNBQUM7WUFDckMsTUFBTStCLFlBQVksSUFBSXhCLG1FQUFtQkEsQ0FBQztnQkFDeENlLGNBQWNiLFFBQVFjLEtBQUs7Z0JBQzNCQyxhQUFhZixRQUFRZSxXQUFXO2dCQUNoQ0csaUJBQWlCbEIsUUFBUW1CLGlCQUFpQixDQUFDQyxNQUFNO2dCQUNqRGQsU0FBU04sUUFBUU0sT0FBTyxJQUFJO2dCQUM1QkgsT0FBT0E7WUFDVDtZQUVBLGFBQWE7WUFDYm1CLFVBQVVDLHlCQUF5QixDQUFDLGtCQUFrQjtnQkFDcERDLGdCQUFnQjsrQ0FBRSxPQUFPQzt3QkFDdkJk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QUNBZjtRQUNBNEI7UUFDQWQ7UUFDQW1CO1FBRUEsT0FBTztRQUNQdkI7UUFDQUM7UUFFQSxPQUFPO1FBQ1AwQjtRQUVBLGFBQWE7UUFDYjNELFNBQVNBLFFBQVFnRCxjQUFjO1FBQy9CcUIsZ0JBQWdCckUsUUFBUUosU0FBUztRQUNqQzBFLGNBQWN0RSxRQUFRSCxLQUFLO1FBRTNCLE9BQU87UUFDUDBFLGdCQUFnQnRFLFVBQVVKLEtBQUs7UUFFL0IsUUFBUTtRQUNSMkUscUJBQXFCckUsV0FBV3NFLFdBQVc7UUFDM0NDLGlCQUFpQnZFLFdBQVdOLEtBQUs7UUFDakM4RSxzQkFBc0J4RSxXQUFXeUUsaUJBQWlCO1FBQ2xEQyxrQkFBa0IxRSxXQUFXMEUsZ0JBQWdCO1FBQzdDQyxtQkFBbUIzRSxXQUFXMkUsaUJBQWlCO1FBQy9DQyxnQkFBZ0I1RSxXQUFXNEUsY0FBYztJQUMzQztBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvaXRzdWtpL0RvY3VtZW50cy9HaXQvc3R1ZHktc2NyaWJlci9mcm9udGVuZC9ob29rcy91c2UtYXBwLXN0YXRlLW5ldy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBjbGllbnRcIlxuXG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VTdGF0ZSwgdXNlUmVmIH0gZnJvbSBcInJlYWN0XCJcbmltcG9ydCB7IHVzZUFwcFN0YXRlQ29udGV4dCB9IGZyb20gXCIuL3VzZS1hcHAtc3RhdGUtY29udGV4dFwiXG5pbXBvcnQgeyB1c2VTZXNzaW9uIH0gZnJvbSBcIi4vdXNlLXNlc3Npb24tYWRhcHRlclwiXG5pbXBvcnQgeyB1c2VSZWNvcmRpbmcgfSBmcm9tIFwiLi91c2UtcmVjb3JkaW5nLWFkYXB0ZXJcIlxuaW1wb3J0IHsgdXNlTm90ZXMgfSBmcm9tIFwiLi91c2Utbm90ZXNcIlxuaW1wb3J0IHsgdXNlVHJhbnNjcmlwdCB9IGZyb20gXCIuL3VzZS10cmFuc2NyaXB0LWFkYXB0ZXJcIlxuaW1wb3J0IHsgdXNlVG9hc3QgfSBmcm9tIFwiQC9jb21wb25lbnRzL3VpL3VzZS10b2FzdFwiXG5pbXBvcnQgdHlwZSB7IEFwcERhdGEgfSBmcm9tIFwiLi4vdHlwZXMvYXBwLXN0YXRlXCJcbmltcG9ydCB7IFN0YXRlTWFjaGluZU1hbmFnZXIgfSBmcm9tICcuLi9saWIvc3RhdGUtbWFjaGluZSc7XG5cbi8qKlxuICog5paw54mI5pys55qEIHVzZUFwcFN0YXRlIEhvb2tcbiAqIOS9v+eUqCBDb250ZXh0IOeLgOaFi+euoeeQhu+8jOWkp+W5heewoeWMluWOn+acrCA4Njgg6KGM55qE6KSH6Zuc6YKP6LyvXG4gKiDlsIfni4DmhYvnrqHnkIblp5ToqJfntaYgQXBwU3RhdGVDb250ZXh077yMSG9vayDlj6rosqDosqzmpa3li5npgo/ovK9cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUFwcFN0YXRlTmV3KCkge1xuICBjb25zdCBjb250ZXh0ID0gdXNlQXBwU3RhdGVDb250ZXh0KClcbiAgY29uc3QgeyBhcHBEYXRhLCBpc0xvYWRpbmcsIGVycm9yLCBkaXNwYXRjaCwgdHJhbnNpdGlvbiB9ID0gY29udGV4dFxuICBjb25zdCBzZXNzaW9uID0gdXNlU2Vzc2lvbigpXG4gIGNvbnN0IHJlY29yZGluZyA9IHVzZVJlY29yZGluZygpXG4gIGNvbnN0IG5vdGVzID0gdXNlTm90ZXMoKVxuICBjb25zdCB0cmFuc2NyaXB0ID0gdXNlVHJhbnNjcmlwdCgpXG4gIGNvbnN0IHsgdG9hc3QgfSA9IHVzZVRvYXN0KClcblxuICBjb25zb2xlLmxvZygn8J+UhCBbdXNlQXBwU3RhdGVOZXddIEhvb2sg5Yid5aeL5YyWOicsIHtcbiAgICBjdXJyZW50U3RhdGU6IGFwcERhdGEuc3RhdGUsXG4gICAgaXNSZWNvcmRpbmc6IGFwcERhdGEuaXNSZWNvcmRpbmcsXG4gICAgc2Vzc2lvbklkOiBhcHBEYXRhLnNlc3Npb24/LmlkLFxuICAgIHRyYW5zY3JpcHRDb3VudDogYXBwRGF0YS50cmFuc2NyaXB0RW50cmllcy5sZW5ndGhcbiAgfSlcblxuICBjb25zdCBbc3RhdGVNYWNoaW5lTWFuYWdlcl0gPSB1c2VTdGF0ZSgoKSA9PiB7XG4gICAgY29uc3Qgc21NYW5hZ2VyID0gbmV3IFN0YXRlTWFjaGluZU1hbmFnZXIoe1xuICAgICAgY3VycmVudFN0YXRlOiBhcHBEYXRhLnN0YXRlLFxuICAgICAgaXNSZWNvcmRpbmc6IGFwcERhdGEuaXNSZWNvcmRpbmcsXG4gICAgICB0cmFuc2NyaXB0Q291bnQ6IGFwcERhdGEudHJhbnNjcmlwdEVudHJpZXMubGVuZ3RoLFxuICAgICAgc2Vzc2lvbjogYXBwRGF0YS5zZXNzaW9uIHx8IG51bGwsXG4gICAgICBlcnJvcjogZXJyb3IsXG4gICAgfSk7XG5cbiAgICAvLyDnq4vljbPoqLvlhorlia/kvZznlKjomZXnkIblmahcbiAgICBzbU1hbmFnZXIucmVnaXN0ZXJTaWRlRWZmZWN0SGFuZGxlcignQ1JFQVRFX1NFU1NJT04nLCB7XG4gICAgICBoYW5kbGVTaWRlRWZmZWN0OiBhc3luYyAoZWZmZWN0KSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCfwn4+X77iPIFvlia/kvZznlKhdIENSRUFURV9TRVNTSU9OOiDlu7rnq4vmnIPoqbEnLCBlZmZlY3QpO1xuICAgICAgICAvLyDpgJnoo6HpnIDopoHlgrPlhaXmqJnpoYzvvIzmiJHlgJHlj6/ku6Xlvp7mn5DlgIvlnLDmlrnnjbLlj5bmiJbkvb/nlKjpoJDoqK3lgLxcbiAgICAgICAgY29uc3QgdGl0bGUgPSAnTmV3IFJlY29yZGluZyc7IC8vIOmgkOioreaomemhjO+8jOS5i+W+jOWPr+S7peaUuemAslxuICAgICAgICBjb25zdCBuZXdTZXNzaW9uID0gYXdhaXQgc2Vzc2lvbi5jcmVhdGVSZWNvcmRpbmdTZXNzaW9uKHRpdGxlLCBhcHBEYXRhLmVkaXRvckNvbnRlbnQpO1xuICAgICAgICBpZiAobmV3U2Vzc2lvbikge1xuICAgICAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ1NFVF9TRVNTSU9OJywgcGF5bG9hZDogbmV3U2Vzc2lvbiB9KTtcbiAgICAgICAgICAvLyDmm7TmlrDni4DmhYvmqZ/kuIrkuIvmlodcbiAgICAgICAgICBzbU1hbmFnZXIuZ2V0U3RhdGVNYWNoaW5lKCkudXBkYXRlQ29udGV4dCh7XG4gICAgICAgICAgICBjdXJyZW50U3RhdGU6IGFwcERhdGEuc3RhdGUsXG4gICAgICAgICAgICBpc1JlY29yZGluZzogYXBwRGF0YS5pc1JlY29yZGluZyxcbiAgICAgICAgICAgIHRyYW5zY3JpcHRDb3VudDogYXBwRGF0YS50cmFuc2NyaXB0RW50cmllcy5sZW5ndGgsXG4gICAgICAgICAgICBzZXNzaW9uOiBuZXdTZXNzaW9uLFxuICAgICAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdkcmFmdF9ub3RlJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCfnhKHms5Xlu7rnq4vpjITpn7PmnIPoqbEnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHNtTWFuYWdlci5yZWdpc3RlclNpZGVFZmZlY3RIYW5kbGVyKCdTVEFSVF9SRUNPUkRJTkcnLCB7XG4gICAgICBoYW5kbGVTaWRlRWZmZWN0OiBhc3luYyAoKSA9PiB7XG4gICAgICAgIC8vIOW+nueLgOaFi+apn+S4iuS4i+aWh+eNsuWPluacgOaWsOeahCBzZXNzaW9uIOizh+ioilxuICAgICAgICBjb25zdCBjb250ZXh0ID0gc21NYW5hZ2VyLmdldFN0YXRlTWFjaGluZSgpLmdldENvbnRleHQoKTtcbiAgICAgICAgaWYgKGNvbnRleHQuc2Vzc2lvbj8uaWQpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygn8J+OpCBb5Ymv5L2c55SoXSBTVEFSVF9SRUNPUkRJTkc6IOmWi+Wni+mMhOmfsycsIGNvbnRleHQuc2Vzc2lvbi5pZCk7XG4gICAgICAgICAgYXdhaXQgcmVjb3JkaW5nLnN0YXJ0UmVjb3JkaW5nKGNvbnRleHQuc2Vzc2lvbi5pZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcign8J+OpCBb5Ymv5L2c55SoXSBTVEFSVF9SRUNPUkRJTkc6IOaykuacieWPr+eUqOeahCBzZXNzaW9uJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBzbU1hbmFnZXIucmVnaXN0ZXJTaWRlRWZmZWN0SGFuZGxlcignU1RPUF9SRUNPUkRJTkcnLCB7XG4gICAgICBoYW5kbGVTaWRlRWZmZWN0OiBhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IHN0b3BSZWNvcmRpbmcoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBzbU1hbmFnZXIucmVnaXN0ZXJTaWRlRWZmZWN0SGFuZGxlcignQ09OTkVDVF9XRUJTT0NLRVQnLCB7XG4gICAgICBoYW5kbGVTaWRlRWZmZWN0OiBhc3luYyAoKSA9PiB7XG4gICAgICAgIC8vIOW+nueLgOaFi+apn+S4iuS4i+aWh+eNsuWPluacgOaWsOeahCBzZXNzaW9uIOizh+ioilxuICAgICAgICBjb25zdCBjb250ZXh0ID0gc21NYW5hZ2VyLmdldFN0YXRlTWFjaGluZSgpLmdldENvbnRleHQoKTtcbiAgICAgICAgaWYgKGNvbnRleHQuc2Vzc2lvbj8uaWQpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygn8J+UjCBb5Ymv5L2c55SoXSBDT05ORUNUX1dFQlNPQ0tFVDog6YCj5o6lIFdlYlNvY2tldCcsIGNvbnRleHQuc2Vzc2lvbi5pZCk7XG4gICAgICAgICAgYXdhaXQgdHJhbnNjcmlwdC5jb25uZWN0KGNvbnRleHQuc2Vzc2lvbi5pZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcign8J+UjCBb5Ymv5L2c55SoXSBDT05ORUNUX1dFQlNPQ0tFVDog5rKS5pyJ5Y+v55So55qEIHNlc3Npb24nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHNtTWFuYWdlci5yZWdpc3RlclNpZGVFZmZlY3RIYW5kbGVyKCdESVNDT05ORUNUX1dFQlNPQ0tFVCcsIHtcbiAgICAgIGhhbmRsZVNpZGVFZmZlY3Q6ICgpID0+IHtcbiAgICAgICAgdHJhbnNjcmlwdC5kaXNjb25uZWN0KCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgc21NYW5hZ2VyLnJlZ2lzdGVyU2lkZUVmZmVjdEhhbmRsZXIoJ0ZJTklTSF9TRVNTSU9OJywge1xuICAgICAgaGFuZGxlU2lkZUVmZmVjdDogYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCBmaW5pc2hTZXNzaW9uKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc21NYW5hZ2VyO1xuICB9KTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHN0YXRlTWFjaGluZU1hbmFnZXIuZ2V0U3RhdGVNYWNoaW5lKCkudXBkYXRlQ29udGV4dCh7XG4gICAgICBjdXJyZW50U3RhdGU6IGFwcERhdGEuc3RhdGUsXG4gICAgICBpc1JlY29yZGluZzogYXBwRGF0YS5pc1JlY29yZGluZyxcbiAgICAgIHRyYW5zY3JpcHRDb3VudDogYXBwRGF0YS50cmFuc2NyaXB0RW50cmllcy5sZW5ndGgsXG4gICAgICBzZXNzaW9uOiBhcHBEYXRhLnNlc3Npb24sXG4gICAgICBlcnJvcjogZXJyb3IsXG4gICAgfSk7XG4gIH0sIFthcHBEYXRhLCBlcnJvciwgc3RhdGVNYWNoaW5lTWFuYWdlcl0pO1xuXG4gIC8vIOW7uueri+e0lOethuiomOacg+ipsVxuICBjb25zdCBjcmVhdGVOb3RlU2Vzc2lvbiA9IHVzZUNhbGxiYWNrKGFzeW5jICh0aXRsZTogc3RyaW5nKSA9PiB7XG4gICAgZGlzcGF0Y2goeyB0eXBlOiAnU0VUX0xPQURJTkcnLCBwYXlsb2FkOiB0cnVlIH0pXG4gICAgZGlzcGF0Y2goeyB0eXBlOiAnQ0xFQVJfRVJST1InIH0pXG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgbmV3U2Vzc2lvbiA9IGF3YWl0IHNlc3Npb24uY3JlYXRlTm90ZVNlc3Npb24odGl0bGUpXG4gICAgICBpZiAobmV3U2Vzc2lvbikge1xuICAgICAgICBkaXNwYXRjaCh7IHR5cGU6ICdTRVRfU0VTU0lPTicsIHBheWxvYWQ6IG5ld1Nlc3Npb24gfSlcblxuICAgICAgICAvLyDovInlhaXnrYboqJjlhaflrrlcbiAgICAgICAgYXdhaXQgbm90ZXMubG9hZE5vdGUobmV3U2Vzc2lvbi5pZClcblxuICAgICAgICAvLyDmuIXpmaTmnKzlnLDojYnnqL9cbiAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ2RyYWZ0X25vdGUnKVxuXG4gICAgICAgIGNvbnNvbGUubG9nKCfinIUgW3VzZUFwcFN0YXRlTmV3XSDntJTnrYboqJjmnIPoqbHlu7rnq4vmiJDlip8nKVxuXG4gICAgICAgIHRvYXN0KHtcbiAgICAgICAgICB0aXRsZTogJ+ethuiomOacg+ipseW3suW7uueriycsXG4gICAgICAgICAgZGVzY3JpcHRpb246IGDmnIPoqbEgXCIke3RpdGxlfVwiIOW7uueri+aIkOWKn2AsXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBlcnIgaW5zdGFuY2VvZiBFcnJvciA/IGVyci5tZXNzYWdlIDogJ+W7uueri+ethuiomOacg+ipseWkseaVlydcbiAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ1NFVF9FUlJPUicsIHBheWxvYWQ6IGVycm9yTWVzc2FnZSB9KVxuXG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgW3VzZUFwcFN0YXRlTmV3XSDlu7rnq4vnrYboqJjmnIPoqbHlpLHmlZc6JywgZXJyKVxuXG4gICAgICB0b2FzdCh7XG4gICAgICAgIHRpdGxlOiAn5bu656uL5aSx5pWXJyxcbiAgICAgICAgZGVzY3JpcHRpb246IGVycm9yTWVzc2FnZSxcbiAgICAgICAgdmFyaWFudDogJ2Rlc3RydWN0aXZlJyxcbiAgICAgIH0pXG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ1NFVF9MT0FESU5HJywgcGF5bG9hZDogZmFsc2UgfSlcbiAgICB9XG4gIH0sIFtzZXNzaW9uLCBub3RlcywgdG9hc3QsIGRpc3BhdGNoXSlcblxuICAvLyDlu7rnq4vpjITpn7PmnIPoqbFcbiAgY29uc3QgY3JlYXRlUmVjb3JkaW5nU2Vzc2lvbiA9IHVzZUNhbGxiYWNrKGFzeW5jICh0aXRsZTogc3RyaW5nKSA9PiB7XG4gICAgZGlzcGF0Y2goeyB0eXBlOiAnU0VUX0xPQURJTkcnLCBwYXlsb2FkOiB0cnVlIH0pXG4gICAgZGlzcGF0Y2goeyB0eXBlOiAnQ0xFQVJfRVJST1InIH0pXG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgbmV3U2Vzc2lvbiA9IGF3YWl0IHNlc3Npb24uY3JlYXRlUmVjb3JkaW5nU2Vzc2lvbih0aXRsZSwgYXBwRGF0YS5lZGl0b3JDb250ZW50KVxuICAgICAgaWYgKG5ld1Nlc3Npb24pIHtcbiAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiAnU0VUX1NFU1NJT04nLCBwYXlsb2FkOiBuZXdTZXNzaW9uIH0pXG5cbiAgICAgICAgLy8g6LyJ5YWl562G6KiY5YWn5a65XG4gICAgICAgIGF3YWl0IG5vdGVzLmxvYWROb3RlKG5ld1Nlc3Npb24uaWQpXG5cbiAgICAgICAgLy8g5riF6Zmk5pys5Zyw6I2J56i/XG4gICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdkcmFmdF9ub3RlJylcblxuICAgICAgICBjb25zb2xlLmxvZygn4pyFIFt1c2VBcHBTdGF0ZU5ld10g6YyE6Z+z5pyD6Kmx5bu656uL5oiQ5YqfJylcblxuICAgICAgICB0b2FzdCh7XG4gICAgICAgICAgdGl0bGU6ICfpjITpn7PmnIPoqbHlt7Llu7rnq4snLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBg5pyD6KmxIFwiJHt0aXRsZX1cIiDlu7rnq4vmiJDlip9gLFxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgLy8g54m55Yil6JmV55CG5pyD6Kmx6KGd56qB6Yyv6KqkXG4gICAgICBpZiAoZXJyIGluc3RhbmNlb2YgRXJyb3IgJiYgZXJyLm1lc3NhZ2UuaW5jbHVkZXMoJ+aqoua4rOWIsOa0u+i6jeacg+ipseihneeqgScpKSB7XG4gICAgICAgIGNvbnN0IGNvbmZsaWN0TXNnID0gJ+WBtea4rOWIsOacg+ipseihneeqge+8jOiri+mHjeaWsOaVtOeQhumggemdouW+jOWGjeippidcbiAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiAnU0VUX0VSUk9SJywgcGF5bG9hZDogY29uZmxpY3RNc2cgfSlcblxuICAgICAgICB0b2FzdCh7XG4gICAgICAgICAgdGl0bGU6ICfmnIPoqbHooZ3nqoEnLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiAn55uu5YmN5bey5pyJ5rS76LqN5pyD6Kmx77yM6KuL6YeN5paw5pW055CG6aCB6Z2i5b6M5YaN6Kmm77yM5oiW562J5b6F55W25YmN5pyD6Kmx57WQ5p2fJyxcbiAgICAgICAgICB2YXJpYW50OiAnZGVzdHJ1Y3RpdmUnXG4gICAgICAgIH0pXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBlcnIgaW5zdGFuY2VvZiBFcnJvciA/IGVyci5tZXNzYWdlIDogJ+W7uueri+mMhOmfs+acg+ipseWkseaVlydcbiAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ1NFVF9FUlJPUicsIHBheWxvYWQ6IGVycm9yTWVzc2FnZSB9KVxuXG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgW3VzZUFwcFN0YXRlTmV3XSDlu7rnq4vpjITpn7PmnIPoqbHlpLHmlZc6JywgZXJyKVxuXG4gICAgICB0b2FzdCh7XG4gICAgICAgIHRpdGxlOiAn5bu656uL5aSx5pWXJyxcbiAgICAgICAgZGVzY3JpcHRpb246IGVycm9yTWVzc2FnZSxcbiAgICAgICAgdmFyaWFudDogJ2Rlc3RydWN0aXZlJyxcbiAgICAgIH0pXG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ1NFVF9MT0FESU5HJywgcGF5bG9hZDogZmFsc2UgfSlcbiAgICB9XG4gIH0sIFtzZXNzaW9uLCBub3RlcywgdG9hc3QsIGRpc3BhdGNoLCBhcHBEYXRhLmVkaXRvckNvbnRlbnRdKVxuXG4gIC8vIOmWi+Wni+mMhOmfsyAtIOWujOWFqOWnlOiol+e1pueLgOaFi+apn1xuICBjb25zdCBzdGFydFJlY29yZGluZyA9IHVzZUNhbGxiYWNrKGFzeW5jICh0aXRsZTogc3RyaW5nKSA9PiB7XG4gICAgY29uc29sZS5sb2coXCLwn46kIFt1c2VBcHBTdGF0ZU5ld10gc3RhcnRSZWNvcmRpbmc6IOinuOeZvOeLgOaFi+apn1wiKVxuICAgIGRpc3BhdGNoKHsgdHlwZTogJ1NFVF9MT0FESU5HJywgcGF5bG9hZDogdHJ1ZSB9KVxuXG4gICAgdHJ5IHtcbiAgICAgIC8vIOaqouafpeaYr+WQpuacieePvuacieacg+ipsemcgOimgeiZleeQhlxuICAgICAgY29uc3QgbGF0ZXN0QWN0aXZlU2Vzc2lvbiA9IGF3YWl0IHNlc3Npb24uY2hlY2tBY3RpdmVTZXNzaW9uKClcbiAgICAgIGNvbnN0IGN1cnJlbnRTZXNzaW9uID0gbGF0ZXN0QWN0aXZlU2Vzc2lvbiB8fCBzZXNzaW9uLmN1cnJlbnRTZXNzaW9uXG5cbiAgICAgIGlmIChjdXJyZW50U2Vzc2lvbikge1xuICAgICAgICBpZiAoY3VycmVudFNlc3Npb24udHlwZSA9PT0gJ25vdGVfb25seScpIHtcbiAgICAgICAgICAvLyDljYfntJrnj77mnInmnIPoqbFcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIvCfjqQgW3VzZUFwcFN0YXRlTmV3XSDljYfntJrnj77mnInmnIPoqbHngrrpjITpn7PmqKHlvI9cIilcbiAgICAgICAgICBjb25zdCB1cGdyYWRlZFNlc3Npb24gPSBhd2FpdCBzZXNzaW9uLnVwZ3JhZGVUb1JlY29yZGluZygpXG4gICAgICAgICAgaWYgKHVwZ3JhZGVkU2Vzc2lvbikge1xuICAgICAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiAnU0VUX1NFU1NJT04nLCBwYXlsb2FkOiB1cGdyYWRlZFNlc3Npb24gfSlcbiAgICAgICAgICAgIC8vIOabtOaWsOeLgOaFi+apn+S4iuS4i+aWh1xuICAgICAgICAgICAgc3RhdGVNYWNoaW5lTWFuYWdlci5nZXRTdGF0ZU1hY2hpbmUoKS51cGRhdGVDb250ZXh0KHtcbiAgICAgICAgICAgICAgY3VycmVudFN0YXRlOiBhcHBEYXRhLnN0YXRlLFxuICAgICAgICAgICAgICBpc1JlY29yZGluZzogYXBwRGF0YS5pc1JlY29yZGluZyxcbiAgICAgICAgICAgICAgdHJhbnNjcmlwdENvdW50OiBhcHBEYXRhLnRyYW5zY3JpcHRFbnRyaWVzLmxlbmd0aCxcbiAgICAgICAgICAgICAgc2Vzc2lvbjogdXBncmFkZWRTZXNzaW9uLFxuICAgICAgICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8g5L2/55So54++5pyJ6YyE6Z+z5pyD6KmxXG4gICAgICAgICAgY29uc29sZS5sb2coXCLwn46kIFt1c2VBcHBTdGF0ZU5ld10g5L2/55So54++5pyJ6YyE6Z+z5pyD6KmxXCIpXG4gICAgICAgICAgc3RhdGVNYWNoaW5lTWFuYWdlci5nZXRTdGF0ZU1hY2hpbmUoKS51cGRhdGVDb250ZXh0KHtcbiAgICAgICAgICAgIGN1cnJlbnRTdGF0ZTogYXBwRGF0YS5zdGF0ZSxcbiAgICAgICAgICAgIGlzUmVjb3JkaW5nOiBhcHBEYXRhLmlzUmVjb3JkaW5nLFxuICAgICAgICAgICAgdHJhbnNjcmlwdENvdW50OiBhcHBEYXRhLnRyYW5zY3JpcHRFbnRyaWVzLmxlbmd0aCxcbiAgICAgICAgICAgIHNlc3Npb246IGN1cnJlbnRTZXNzaW9uLFxuICAgICAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIOinuOeZvOeLgOaFi+i9ieaPmyAtIOiuk+eLgOaFi+apn+iZleeQhuaJgOaciemCj+i8r1xuICAgICAgY29uc3QgcmVzdWx0ID0gdHJhbnNpdGlvbignVVNFUl9TVEFSVF9SRUNPUkRJTkcnKTtcblxuICAgICAgaWYgKCFyZXN1bHQ/LnN1Y2Nlc3MpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlc3VsdD8uZXJyb3IgfHwgJ+eLgOaFi+i9ieaPm+WkseaVlycpO1xuICAgICAgfVxuXG4gICAgICBjb25zb2xlLmxvZyhcIvCfjqQgW3VzZUFwcFN0YXRlTmV3XSDni4DmhYvmqZ/omZXnkIblrozmiJBcIilcbiAgICAgIHRvYXN0KHsgdGl0bGU6ICfpjITpn7Pplovlp4snIH0pXG5cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGNvbnN0IG1zZyA9IGVyciBpbnN0YW5jZW9mIEVycm9yID8gZXJyLm1lc3NhZ2UgOiAn6ZaL5aeL6YyE6Z+z5aSx5pWXJ1xuICAgICAgZGlzcGF0Y2goeyB0eXBlOiAnU0VUX0VSUk9SJywgcGF5bG9hZDogbXNnIH0pXG5cbiAgICAgIGNvbnNvbGUuZXJyb3IoXCLwn46kIFt1c2VBcHBTdGF0ZU5ld10g6YyE6Z+z5aSx5pWXOlwiLCBtc2cpXG4gICAgICB0b2FzdCh7IHRpdGxlOiAn6YyE6Z+z5aSx5pWXJywgZGVzY3JpcHRpb246IG1zZywgdmFyaWFudDogJ2Rlc3RydWN0aXZlJyB9KVxuICAgIH0gZmluYWxseSB7XG4gICAgICBkaXNwYXRjaCh7IHR5cGU6ICdTRVRfTE9BRElORycsIHBheWxvYWQ6IGZhbHNlIH0pXG4gICAgfVxuICB9LCBbc2Vzc2lvbiwgdG9hc3QsIGRpc3BhdGNoLCB0cmFuc2l0aW9uLCBzdGF0ZU1hY2hpbmVNYW5hZ2VyLCBhcHBEYXRhLnN0YXRlLCBhcHBEYXRhLmlzUmVjb3JkaW5nLCBhcHBEYXRhLnRyYW5zY3JpcHRFbnRyaWVzLCBlcnJvcl0pXG5cbiAgLy8g5Y2H57Sa5pyD6Kmx54K66YyE6Z+z5qih5byPXG4gIGNvbnN0IHVwZ3JhZGVUb1JlY29yZGluZyA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICBkaXNwYXRjaCh7IHR5cGU6ICdTRVRfTE9BRElORycsIHBheWxvYWQ6IHRydWUgfSlcbiAgICBkaXNwYXRjaCh7IHR5cGU6ICdDTEVBUl9FUlJPUicgfSlcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCB1cGRhdGVkU2Vzc2lvbiA9IGF3YWl0IHNlc3Npb24udXBncmFkZVRvUmVjb3JkaW5nKClcbiAgICAgIGlmICh1cGRhdGVkU2Vzc2lvbikge1xuICAgICAgICBkaXNwYXRjaCh7IHR5cGU6ICdTRVRfU0VTU0lPTicsIHBheWxvYWQ6IHVwZGF0ZWRTZXNzaW9uIH0pXG5cbiAgICAgICAgY29uc29sZS5sb2coJ+KchSBbdXNlQXBwU3RhdGVOZXddIOacg+ipseWNh+e0mueCuumMhOmfs+aooeW8j+aIkOWKnycpXG5cbiAgICAgICAgdG9hc3Qoe1xuICAgICAgICAgIHRpdGxlOiAn5Y2H57Sa5oiQ5YqfJyxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJ+acg+ipseW3suWNh+e0mueCuumMhOmfs+aooeW8jycsXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBlcnIgaW5zdGFuY2VvZiBFcnJvciA/IGVyci5tZXNzYWdlIDogJ+WNh+e0muacg+ipseWkseaVlydcbiAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ1NFVF9FUlJPUicsIHBheWxvYWQ6IGVycm9yTWVzc2FnZSB9KVxuXG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgW3VzZUFwcFN0YXRlTmV3XSDljYfntJrmnIPoqbHlpLHmlZc6JywgZXJyKVxuXG4gICAgICB0b2FzdCh7XG4gICAgICAgIHRpdGxlOiAn5Y2H57Sa5aSx5pWXJyxcbiAgICAgICAgZGVzY3JpcHRpb246IGVycm9yTWVzc2FnZSxcbiAgICAgICAgdmFyaWFudDogJ2Rlc3RydWN0aXZlJyxcbiAgICAgIH0pXG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ1NFVF9MT0FESU5HJywgcGF5bG9hZDogZmFsc2UgfSlcbiAgICB9XG4gIH0sIFtzZXNzaW9uLCB0b2FzdCwgZGlzcGF0Y2hdKVxuXG4gIC8vIOWBnOatoumMhOmfs1xuICBjb25zdCBzdG9wUmVjb3JkaW5nID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xuICAgIGRpc3BhdGNoKHsgdHlwZTogJ1NFVF9MT0FESU5HJywgcGF5bG9hZDogdHJ1ZSB9KVxuICAgIGRpc3BhdGNoKHsgdHlwZTogJ0NMRUFSX0VSUk9SJyB9KVxuXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHJlY29yZGluZy5zdG9wUmVjb3JkaW5nKClcbiAgICAgIHRyYW5zY3JpcHQuZGlzY29ubmVjdCgpXG5cbiAgICAgIC8vIOinuOeZvOeLgOaFi+i9ieaPm1xuICAgICAgdHJhbnNpdGlvbignVVNFUl9TVE9QX1JFQ09SRElORycpO1xuXG4gICAgICBjb25zb2xlLmxvZygn4pyFIFt1c2VBcHBTdGF0ZU5ld10g6YyE6Z+z5YGc5q2i77yM6ZaL5aeL6JmV55CG6YCQ5a2X56i/JylcblxuICAgICAgdG9hc3Qoe1xuICAgICAgICB0aXRsZTogJ+iZleeQhuS4rScsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAn5q2j5Zyo6JmV55CG6YyE6Z+z5YWn5a6577yM6KuL56iN5YCZLi4uJyxcbiAgICAgIH0pXG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBlcnIgaW5zdGFuY2VvZiBFcnJvciA/IGVyci5tZXNzYWdlIDogJ+WBnOatoumMhOmfs+WkseaVlydcbiAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ1NFVF9FUlJPUicsIHBheWxvYWQ6IGVycm9yTWVzc2FnZSB9KVxuXG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgW3VzZUFwcFN0YXRlTmV3XSDlgZzmraLpjITpn7PlpLHmlZc6JywgZXJyKVxuXG4gICAgICB0b2FzdCh7XG4gICAgICAgIHRpdGxlOiAn5YGc5q2i5aSx5pWXJyxcbiAgICAgICAgZGVzY3JpcHRpb246IGVycm9yTWVzc2FnZSxcbiAgICAgICAgdmFyaWFudDogJ2Rlc3RydWN0aXZlJyxcbiAgICAgIH0pXG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ1NFVF9MT0FESU5HJywgcGF5bG9hZDogZmFsc2UgfSlcbiAgICB9XG4gIH0sIFtyZWNvcmRpbmcsIHRyYW5zY3JpcHQsIHRvYXN0LCBkaXNwYXRjaCwgdHJhbnNpdGlvbl0pXG5cbiAgLy8g5a6M5oiQ5pyD6KmxXG4gIGNvbnN0IGZpbmlzaFNlc3Npb24gPSB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XG4gICAgZGlzcGF0Y2goeyB0eXBlOiAnU0VUX0xPQURJTkcnLCBwYXlsb2FkOiB0cnVlIH0pXG4gICAgZGlzcGF0Y2goeyB0eXBlOiAnQ0xFQVJfRVJST1InIH0pXG5cbiAgICB0cnkge1xuICAgICAgYXdhaXQgc2Vzc2lvbi5maW5pc2hTZXNzaW9uKClcbiAgICAgIC8vIOWcqOmAmeijoeS4jemcgOimgeinuOeZvOeLgOaFi+i9ieaPm++8jOWboOeCuiBzdG9wUmVjb3JkaW5nIOW3sue2k+iZleeQhuS6hlxuICAgICAgLy8gZGlzcGF0Y2goeyB0eXBlOiAnU0VUX0FQUF9TVEFURScsIHBheWxvYWQ6ICdmaW5pc2hlZCcgfSlcblxuICAgICAgY29uc29sZS5sb2coJ+KchSBbdXNlQXBwU3RhdGVOZXddIOacg+ipseWujOaIkCcpXG5cbiAgICAgIHRvYXN0KHtcbiAgICAgICAgdGl0bGU6ICfmnIPoqbHlrozmiJAnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ+aCqOWPr+S7peWMr+WHuuethuiomOaIlumWi+Wni+aWsOeahOethuiomCcsXG4gICAgICB9KVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gZXJyIGluc3RhbmNlb2YgRXJyb3IgPyBlcnIubWVzc2FnZSA6ICflrozmiJDmnIPoqbHlpLHmlZcnXG4gICAgICBkaXNwYXRjaCh7IHR5cGU6ICdTRVRfRVJST1InLCBwYXlsb2FkOiBlcnJvck1lc3NhZ2UgfSlcblxuICAgICAgY29uc29sZS5lcnJvcign4p2MIFt1c2VBcHBTdGF0ZU5ld10g5a6M5oiQ5pyD6Kmx5aSx5pWXOicsIGVycilcblxuICAgICAgdG9hc3Qoe1xuICAgICAgICB0aXRsZTogJ+WujOaIkOWkseaVlycsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBlcnJvck1lc3NhZ2UsXG4gICAgICAgIHZhcmlhbnQ6ICdkZXN0cnVjdGl2ZScsXG4gICAgICB9KVxuICAgIH0gZmluYWxseSB7XG4gICAgICBkaXNwYXRjaCh7IHR5cGU6ICdTRVRfTE9BRElORycsIHBheWxvYWQ6IGZhbHNlIH0pXG4gICAgfVxuICB9LCBbc2Vzc2lvbiwgdG9hc3QsIGRpc3BhdGNoXSlcblxuICAvLyDplovmlrDnrYboqJhcbiAgY29uc3QgbmV3Tm90ZSA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICBkaXNwYXRjaCh7IHR5cGU6ICdTRVRfTE9BRElORycsIHBheWxvYWQ6IHRydWUgfSlcbiAgICBkaXNwYXRjaCh7IHR5cGU6ICdDTEVBUl9FUlJPUicgfSlcblxuICAgIHRyeSB7XG4gICAgICAvLyDlpoLmnpzmnInmtLvouo3mnIPoqbHvvIzlhYjliKrpmaTlroNcbiAgICAgIGlmIChzZXNzaW9uLmN1cnJlbnRTZXNzaW9uKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCfwn5eR77iPIFt1c2VBcHBTdGF0ZU5ld10g5Yiq6Zmk55W25YmN5rS76LqN5pyD6KmxOicsIHNlc3Npb24uY3VycmVudFNlc3Npb24uaWQpXG4gICAgICAgIGF3YWl0IHNlc3Npb24uZGVsZXRlU2Vzc2lvbigpXG4gICAgICB9XG5cbiAgICAgIC8vIOinuOeZvOeLgOaFi+i9ieaPm1xuICAgICAgdHJhbnNpdGlvbignVVNFUl9ORVdfTk9URScpO1xuXG4gICAgICAvLyDph43nva7miYDmnInni4DmhYtcbiAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ1JFU0VUX1NUQVRFJyB9KVxuXG4gICAgICAvLyDmuIXpmaTnm7jpl5zni4DmhYtcbiAgICAgIHJlY29yZGluZy5jbGVhclRyYW5zY3JpcHRzKClcbiAgICAgIHRyYW5zY3JpcHQuY2xlYXJUcmFuc2NyaXB0cygpXG4gICAgICBub3Rlcy5jbGVhck5vdGUoKVxuXG4gICAgICAvLyDmuIXpmaTmnKzlnLDojYnnqL9cbiAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdkcmFmdF9ub3RlJylcblxuICAgICAgY29uc29sZS5sb2coJ/CflIQgW3VzZUFwcFN0YXRlTmV3XSDlt7Lplovlp4vmlrDnrYboqJgnKVxuXG4gICAgICB0b2FzdCh7XG4gICAgICAgIHRpdGxlOiAn5paw562G6KiYJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICflt7LmuIXnqbrlhaflrrnvvIzlj6/ku6Xplovlp4vmlrDnmoTnrYboqJgnLFxuICAgICAgfSlcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGVyciBpbnN0YW5jZW9mIEVycm9yID8gZXJyLm1lc3NhZ2UgOiAn6ZaL5aeL5paw562G6KiY5aSx5pWXJ1xuICAgICAgZGlzcGF0Y2goeyB0eXBlOiAnU0VUX0VSUk9SJywgcGF5bG9hZDogZXJyb3JNZXNzYWdlIH0pXG5cbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBbdXNlQXBwU3RhdGVOZXddIOmWi+Wni+aWsOethuiomOWkseaVlzonLCBlcnIpXG5cbiAgICAgIHRvYXN0KHtcbiAgICAgICAgdGl0bGU6ICfmk43kvZzlpLHmlZcnLFxuICAgICAgICBkZXNjcmlwdGlvbjogZXJyb3JNZXNzYWdlLFxuICAgICAgICB2YXJpYW50OiAnZGVzdHJ1Y3RpdmUnLFxuICAgICAgfSlcbiAgICB9IGZpbmFsbHkge1xuICAgICAgZGlzcGF0Y2goeyB0eXBlOiAnU0VUX0xPQURJTkcnLCBwYXlsb2FkOiBmYWxzZSB9KVxuICAgIH1cbiAgfSwgW3Nlc3Npb24sIHJlY29yZGluZywgdHJhbnNjcmlwdCwgbm90ZXMsIHRvYXN0LCBkaXNwYXRjaCwgdHJhbnNpdGlvbl0pXG5cbiAgLy8g6Ieq5YuV5YSy5a2Y562G6KiY5YWn5a655Yiw5pys5Zyw6I2J56i/XG4gIGNvbnN0IHNhdmVMb2NhbERyYWZ0ID0gdXNlQ2FsbGJhY2soKGNvbnRlbnQ6IHN0cmluZykgPT4ge1xuICAgIGlmICghc2Vzc2lvbi5jdXJyZW50U2Vzc2lvbiAmJiBjb250ZW50LnRyaW0oKSkge1xuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2RyYWZ0X25vdGUnLCBjb250ZW50KVxuICAgIH1cbiAgICBkaXNwYXRjaCh7IHR5cGU6ICdTRVRfRURJVE9SX0NPTlRFTlQnLCBwYXlsb2FkOiBjb250ZW50IH0pXG4gIH0sIFtzZXNzaW9uLmN1cnJlbnRTZXNzaW9uLCBkaXNwYXRjaF0pXG5cbiAgLy8g5L2/55SoIHVzZUNhbGxiYWNrIOS+huiomOaGtuWHveaVuFxuICBjb25zdCBjcmVhdGVSZWNvcmRpbmdTZXNzaW9uQ2FsbGJhY2sgPSB1c2VDYWxsYmFjayhjcmVhdGVSZWNvcmRpbmdTZXNzaW9uLCBbc2Vzc2lvbiwgbm90ZXMsIHRvYXN0LCBkaXNwYXRjaCwgYXBwRGF0YS5lZGl0b3JDb250ZW50XSk7XG4gIGNvbnN0IHN0YXJ0UmVjb3JkaW5nQ2FsbGJhY2sgPSB1c2VDYWxsYmFjayhzdGFydFJlY29yZGluZywgW3Nlc3Npb24sIHJlY29yZGluZywgdG9hc3QsIGRpc3BhdGNoLCBhcHBEYXRhLmVkaXRvckNvbnRlbnQsIHRyYW5zaXRpb25dKTtcbiAgY29uc3Qgc3RvcFJlY29yZGluZ0NhbGxiYWNrID0gdXNlQ2FsbGJhY2soc3RvcFJlY29yZGluZywgW3JlY29yZGluZywgdHJhbnNjcmlwdCwgdG9hc3QsIGRpc3BhdGNoLCB0cmFuc2l0aW9uXSk7XG4gIGNvbnN0IGZpbmlzaFNlc3Npb25DYWxsYmFjayA9IHVzZUNhbGxiYWNrKGZpbmlzaFNlc3Npb24sIFtzZXNzaW9uLCB0b2FzdCwgZGlzcGF0Y2hdKTtcbiAgY29uc3QgY29ubmVjdFRyYW5zY3JpcHRDYWxsYmFjayA9IHVzZUNhbGxiYWNrKHRyYW5zY3JpcHQuY29ubmVjdCwgW3RyYW5zY3JpcHRdKTtcbiAgY29uc3QgZGlzY29ubmVjdFRyYW5zY3JpcHRDYWxsYmFjayA9IHVzZUNhbGxiYWNrKHRyYW5zY3JpcHQuZGlzY29ubmVjdCwgW3RyYW5zY3JpcHRdKTtcblxuICByZXR1cm4ge1xuICAgIC8vIOaHieeUqOeLgOaFi++8iOWQkeW+jOebuOWuue+8iVxuICAgIGFwcERhdGEsXG4gICAgaXNMb2FkaW5nLFxuICAgIGVycm9yLFxuXG4gICAgLy8g5pyD6Kmx566h55CGXG4gICAgY3JlYXRlTm90ZVNlc3Npb24sXG4gICAgY3JlYXRlUmVjb3JkaW5nU2Vzc2lvbixcbiAgICB1cGdyYWRlVG9SZWNvcmRpbmcsXG4gICAgZmluaXNoU2Vzc2lvbixcbiAgICBuZXdOb3RlLFxuXG4gICAgLy8g6YyE6Z+z5o6n5Yi2XG4gICAgc3RhcnRSZWNvcmRpbmcsXG4gICAgc3RvcFJlY29yZGluZyxcblxuICAgIC8vIOacrOWcsOiNieeov1xuICAgIHNhdmVMb2NhbERyYWZ0LFxuXG4gICAgLy8g5aSW6YOo54uA5oWL77yI5ZCR5b6M55u45a6577yJXG4gICAgc2Vzc2lvbjogc2Vzc2lvbi5jdXJyZW50U2Vzc2lvbixcbiAgICBzZXNzaW9uTG9hZGluZzogc2Vzc2lvbi5pc0xvYWRpbmcsXG4gICAgc2Vzc2lvbkVycm9yOiBzZXNzaW9uLmVycm9yLFxuXG4gICAgLy8g6YyE6Z+z54uA5oWLXG4gICAgcmVjb3JkaW5nRXJyb3I6IHJlY29yZGluZy5lcnJvcixcblxuICAgIC8vIOmAkOWtl+eov+eLgOaFi1xuICAgIHRyYW5zY3JpcHRDb25uZWN0ZWQ6IHRyYW5zY3JpcHQuaXNDb25uZWN0ZWQsXG4gICAgdHJhbnNjcmlwdEVycm9yOiB0cmFuc2NyaXB0LmVycm9yLFxuICAgIHRyYW5zY3JpcHRBdXRvU2Nyb2xsOiB0cmFuc2NyaXB0LmF1dG9TY3JvbGxFbmFibGVkLFxuICAgIGVuYWJsZUF1dG9TY3JvbGw6IHRyYW5zY3JpcHQuZW5hYmxlQXV0b1Njcm9sbCxcbiAgICBkaXNhYmxlQXV0b1Njcm9sbDogdHJhbnNjcmlwdC5kaXNhYmxlQXV0b1Njcm9sbCxcbiAgICBzY3JvbGxUb0xhdGVzdDogdHJhbnNjcmlwdC5zY3JvbGxUb0xhdGVzdCxcbiAgfVxufVxuIl0sIm5hbWVzIjpbInVzZUNhbGxiYWNrIiwidXNlRWZmZWN0IiwidXNlU3RhdGUiLCJ1c2VBcHBTdGF0ZUNvbnRleHQiLCJ1c2VTZXNzaW9uIiwidXNlUmVjb3JkaW5nIiwidXNlTm90ZXMiLCJ1c2VUcmFuc2NyaXB0IiwidXNlVG9hc3QiLCJTdGF0ZU1hY2hpbmVNYW5hZ2VyIiwidXNlQXBwU3RhdGVOZXciLCJhcHBEYXRhIiwiY29udGV4dCIsImlzTG9hZGluZyIsImVycm9yIiwiZGlzcGF0Y2giLCJ0cmFuc2l0aW9uIiwic2Vzc2lvbiIsInJlY29yZGluZyIsIm5vdGVzIiwidHJhbnNjcmlwdCIsInRvYXN0IiwiY29uc29sZSIsImxvZyIsImN1cnJlbnRTdGF0ZSIsInN0YXRlIiwiaXNSZWNvcmRpbmciLCJzZXNzaW9uSWQiLCJpZCIsInRyYW5zY3JpcHRDb3VudCIsInRyYW5zY3JpcHRFbnRyaWVzIiwibGVuZ3RoIiwic3RhdGVNYWNoaW5lTWFuYWdlciIsInNtTWFuYWdlciIsInJlZ2lzdGVyU2lkZUVmZmVjdEhhbmRsZXIiLCJoYW5kbGVTaWRlRWZmZWN0IiwiZWZmZWN0IiwidGl0bGUiLCJuZXdTZXNzaW9uIiwiY3JlYXRlUmVjb3JkaW5nU2Vzc2lvbiIsImVkaXRvckNvbnRlbnQiLCJ0eXBlIiwicGF5bG9hZCIsImdldFN0YXRlTWFjaGluZSIsInVwZGF0ZUNvbnRleHQiLCJsb2NhbFN0b3JhZ2UiLCJyZW1vdmVJdGVtIiwiRXJyb3IiLCJnZXRDb250ZXh0Iiwic3RhcnRSZWNvcmRpbmciLCJzdG9wUmVjb3JkaW5nIiwiY29ubmVjdCIsImRpc2Nvbm5lY3QiLCJmaW5pc2hTZXNzaW9uIiwiY3JlYXRlTm90ZVNlc3Npb24iLCJsb2FkTm90ZSIsImRlc2NyaXB0aW9uIiwiZXJyIiwiZXJyb3JNZXNzYWdlIiwibWVzc2FnZSIsInZhcmlhbnQiLCJpbmNsdWRlcyIsImNvbmZsaWN0TXNnIiwibGF0ZXN0QWN0aXZlU2Vzc2lvbiIsImNoZWNrQWN0aXZlU2Vzc2lvbiIsImN1cnJlbnRTZXNzaW9uIiwidXBncmFkZWRTZXNzaW9uIiwidXBncmFkZVRvUmVjb3JkaW5nIiwicmVzdWx0Iiwic3VjY2VzcyIsIm1zZyIsInVwZGF0ZWRTZXNzaW9uIiwibmV3Tm90ZSIsImRlbGV0ZVNlc3Npb24iLCJjbGVhclRyYW5zY3JpcHRzIiwiY2xlYXJOb3RlIiwic2F2ZUxvY2FsRHJhZnQiLCJjb250ZW50IiwidHJpbSIsInNldEl0ZW0iLCJjcmVhdGVSZWNvcmRpbmdTZXNzaW9uQ2FsbGJhY2siLCJzdGFydFJlY29yZGluZ0NhbGxiYWNrIiwic3RvcFJlY29yZGluZ0NhbGxiYWNrIiwiZmluaXNoU2Vzc2lvbkNhbGxiYWNrIiwiY29ubmVjdFRyYW5zY3JpcHRDYWxsYmFjayIsImRpc2Nvbm5lY3RUcmFuc2NyaXB0Q2FsbGJhY2siLCJzZXNzaW9uTG9hZGluZyIsInNlc3Npb25FcnJvciIsInJlY29yZGluZ0Vycm9yIiwidHJhbnNjcmlwdENvbm5lY3RlZCIsImlzQ29ubmVjdGVkIiwidHJhbnNjcmlwdEVycm9yIiwidHJhbnNjcmlwdEF1dG9TY3JvbGwiLCJhdXRvU2Nyb2xsRW5hYmxlZCIsImVuYWJsZUF1dG9TY3JvbGwiLCJkaXNhYmxlQXV0b1Njcm9sbCIsInNjcm9sbFRvTGF0ZXN0Il0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./hooks/use-app-state-new.ts\n"));

/***/ })

});