"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/initial-state-loader.ts":
/*!*************************************!*\
  !*** ./lib/initial-state-loader.ts ***!
  \*************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InitialStateLoader: () => (/* binding */ InitialStateLoader)\n/* harmony export */ });\n/* __next_internal_client_entry_do_not_use__ InitialStateLoader auto */ /**\n * 初始狀態載入器\n * 負責從 localStorage 或其他持久化存儲載入初始狀態\n */ class InitialStateLoader {\n    /**\n     * 載入初始應用狀態\n     * 優先順序：localStorage > 預設狀態\n     */ static loadInitialAppData() {\n        console.log('🔄 [InitialStateLoader] 開始載入初始狀態');\n        try {\n            // 1. 載入草稿筆記\n            const draftContent = this.loadDraftNote();\n            // 2. 載入上次會話資訊（如果有的話）\n            const lastSession = this.loadLastSession();\n            // 3. 載入完整應用狀態（如果有的話）\n            const savedAppState = this.loadSavedAppState();\n            // 修正：如果儲存的狀態是暫時性或已完成的，則重置為預設狀態\n            console.log('🔍 [InitialStateLoader] 檢查儲存的狀態:', {\n                savedState: savedAppState === null || savedAppState === void 0 ? void 0 : savedAppState.state,\n                shouldReset: (savedAppState === null || savedAppState === void 0 ? void 0 : savedAppState.state) && [\n                    'recording_waiting',\n                    'recording_active',\n                    'processing',\n                    'finished'\n                ].includes(savedAppState.state)\n            });\n            const validInitialState = (savedAppState === null || savedAppState === void 0 ? void 0 : savedAppState.state) && ![\n                'recording_waiting',\n                'recording_active',\n                'processing',\n                'finished'\n            ].includes(savedAppState.state) ? savedAppState.state : 'default';\n            console.log('🔍 [InitialStateLoader] 最終初始狀態:', validInitialState);\n            const initialAppData = {\n                state: validInitialState,\n                transcriptEntries: (savedAppState === null || savedAppState === void 0 ? void 0 : savedAppState.transcriptEntries) || [],\n                editorContent: draftContent || '',\n                isRecording: false,\n                recordingTime: 0,\n                session: lastSession\n            };\n            console.log('🔄 [InitialStateLoader] 初始狀態載入完成:', {\n                hasDraftContent: !!draftContent,\n                hasLastSession: !!lastSession,\n                hasSavedAppState: !!savedAppState,\n                state: initialAppData.state,\n                transcriptCount: initialAppData.transcriptEntries.length\n            });\n            return initialAppData;\n        } catch (error) {\n            console.error('❌ [InitialStateLoader] 載入初始狀態失敗:', error);\n            return this.getDefaultAppData();\n        }\n    }\n    /**\n     * 載入草稿筆記內容\n     */ static loadDraftNote() {\n        try {\n            const draft = localStorage.getItem(this.STORAGE_KEYS.DRAFT_NOTE);\n            return draft || '';\n        } catch (error) {\n            console.warn('⚠️ [InitialStateLoader] 載入草稿筆記失敗:', error);\n            return '';\n        }\n    }\n    /**\n     * 載入上次會話資訊\n     */ static loadLastSession() {\n        try {\n            const sessionData = localStorage.getItem(this.STORAGE_KEYS.LAST_SESSION);\n            if (!sessionData) return null;\n            const session = JSON.parse(sessionData);\n            // 驗證會話資料結構\n            if (session && typeof session === 'object' && session.id) {\n                // 只有在會話狀態不是 completed 或 error 時才恢復\n                if (session.status === 'completed' || session.status === 'error') {\n                    console.log('🔄 [InitialStateLoader] 上次會話已完成，不恢復:', session.status);\n                    return null;\n                }\n                console.log('🔄 [InitialStateLoader] 恢復上次會話:', {\n                    id: session.id,\n                    status: session.status,\n                    type: session.type\n                });\n                return session;\n            }\n            return null;\n        } catch (error) {\n            console.warn('⚠️ [InitialStateLoader] 載入上次會話失敗:', error);\n            return null;\n        }\n    }\n    /**\n     * 載入完整的應用狀態\n     */ static loadSavedAppState() {\n        try {\n            const stateData = localStorage.getItem(this.STORAGE_KEYS.APP_STATE);\n            if (!stateData) return null;\n            const savedState = JSON.parse(stateData);\n            // 驗證狀態資料結構\n            if (savedState && typeof savedState === 'object') {\n                console.log('🔄 [InitialStateLoader] 載入已儲存的應用狀態');\n                return savedState;\n            }\n            return null;\n        } catch (error) {\n            console.warn('⚠️ [InitialStateLoader] 載入應用狀態失敗:', error);\n            return null;\n        }\n    }\n    /**\n     * 獲取預設應用狀態\n     */ static getDefaultAppData() {\n        console.log('🔄 [InitialStateLoader] 使用預設狀態');\n        return {\n            state: 'default',\n            transcriptEntries: [],\n            editorContent: '',\n            isRecording: false,\n            recordingTime: 0,\n            session: null\n        };\n    }\n    /**\n     * 儲存應用狀態到 localStorage\n     */ static saveAppState(appData) {\n        try {\n            // 儲存完整應用狀態（排除敏感資訊）\n            const stateToSave = {\n                state: appData.state,\n                transcriptEntries: appData.transcriptEntries\n            };\n            localStorage.setItem(this.STORAGE_KEYS.APP_STATE, JSON.stringify(stateToSave));\n            // 儲存會話資訊\n            if (appData.session) {\n                localStorage.setItem(this.STORAGE_KEYS.LAST_SESSION, JSON.stringify(appData.session));\n            } else {\n                localStorage.removeItem(this.STORAGE_KEYS.LAST_SESSION);\n            }\n            console.log('💾 [InitialStateLoader] 應用狀態已儲存');\n        } catch (error) {\n            console.error('❌ [InitialStateLoader] 儲存應用狀態失敗:', error);\n        }\n    }\n    /**\n     * 清除所有持久化狀態\n     */ static clearPersistedState() {\n        try {\n            localStorage.removeItem(this.STORAGE_KEYS.APP_STATE);\n            localStorage.removeItem(this.STORAGE_KEYS.LAST_SESSION);\n            // 注意：不清除 DRAFT_NOTE，因為那是用戶的草稿內容\n            console.log('🗑️ [InitialStateLoader] 持久化狀態已清除');\n        } catch (error) {\n            console.error('❌ [InitialStateLoader] 清除持久化狀態失敗:', error);\n        }\n    }\n    /**\n     * 檢查是否有持久化狀態\n     */ static hasPersistedState() {\n        try {\n            return !!(localStorage.getItem(this.STORAGE_KEYS.APP_STATE) || localStorage.getItem(this.STORAGE_KEYS.LAST_SESSION));\n        } catch (error) {\n            console.warn('⚠️ [InitialStateLoader] 檢查持久化狀態失敗:', error);\n            return false;\n        }\n    }\n}\nInitialStateLoader.STORAGE_KEYS = {\n    DRAFT_NOTE: 'draft_note',\n    LAST_SESSION: 'last_session',\n    APP_STATE: 'app_state_v1'\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/initial-state-loader.ts\n"));

/***/ })

});