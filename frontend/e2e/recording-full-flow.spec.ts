import { test, expect, Page } from '@playwright/test'

/**
 * ÂÆåÊï¥ÈåÑÈü≥ÊµÅÁ®ã E2E Ê∏¨Ë©¶
 * Ê∏¨Ë©¶ÂæûÈñãÂßãÈåÑÈü≥Âà∞ÂÅúÊ≠¢ÈåÑÈü≥ÁöÑÂÆåÊï¥ÊµÅÁ®ãÔºåÁ¢∫‰øùÊâÄÊúâÁãÄÊÖãËΩâÊèõÊ≠£Â∏∏
 */

test.describe('ÂÆåÊï¥ÈåÑÈü≥ÊµÅÁ®ãÊ∏¨Ë©¶', () => {
  let page: Page

  test.beforeEach(async ({ page: testPage }) => {
    page = testPage
    
    // Ë®≠ÁΩÆÂ™íÈ´îÊ¨äÈôê
    await page.context().grantPermissions(['microphone'])
    
    // ÂâçÂæÄÊáâÁî®Á®ãÂºè
    await page.goto('http://localhost:3000')
    await page.waitForLoadState('networkidle')
    
    // ÂïüÁî®Êñ∞ÂäüËÉΩÊ®ôË™å
    await page.evaluate(() => {
      if ((window as any).featureFlags) {
        (window as any).featureFlags.enableAll()
      }
    })
    await page.reload()
    await page.waitForLoadState('networkidle')
  })

  test('ÊáâË©≤ËÉΩÂ§†ÂÆåÊàêÂÆåÊï¥ÁöÑÈåÑÈü≥ÊµÅÁ®ã', async () => {
    console.log('üé¨ ÈñãÂßãÂÆåÊï¥ÈåÑÈü≥ÊµÅÁ®ãÊ∏¨Ë©¶')

    // Ê≠•È©ü 1: Ê™¢Êü•ÂàùÂßãÁãÄÊÖã
    await test.step('Ê™¢Êü•ÂàùÂßãÁãÄÊÖã', async () => {
      const initialState = await page.evaluate(() => {
        return {
          hasFeatureFlags: !!(window as any).featureFlags,
          hasRecordingService: !!(window as any).recordingService,
          hasTranscriptService: !!(window as any).transcriptService
        }
      })
      
      console.log('ÂàùÂßãÁãÄÊÖã:', initialState)
      expect(page.url()).toContain('localhost:3000')
    })

    // Ê≠•È©ü 2: Â∞ãÊâæ‰∏¶ÈªûÊìäÈåÑÈü≥ÊåâÈàï
    await test.step('ÂïüÂãïÈåÑÈü≥', async () => {
      // Â∞ãÊâæÈåÑÈü≥ÊåâÈàïÁöÑÂ§öÁ®ÆÂèØËÉΩÈÅ∏ÊìáÂô®
      const recordingButtonSelectors = [
        'button:has-text("ÈñãÂßãÈåÑÈü≥")',
        'button:has-text("ÈåÑÈü≥")',
        'button:has-text("Start Recording")',
        'button:has-text("Record")',
        '[data-testid="start-recording"]',
        '.record-button',
        'button[aria-label*="ÈåÑÈü≥"]',
        'button[aria-label*="record"]'
      ]

      let buttonFound = false
      
      for (const selector of recordingButtonSelectors) {
        const button = page.locator(selector).first()
        if (await button.count() > 0 && await button.isVisible()) {
          console.log(`‚úÖ ÊâæÂà∞ÈåÑÈü≥ÊåâÈàï: ${selector}`)
          await button.click()
          buttonFound = true
          break
        }
      }

      // Â¶ÇÊûúÊâæ‰∏çÂà∞ÊåâÈàïÔºåÂòóË©¶Áõ¥Êé•ÂëºÂè´ÊúçÂãô
      if (!buttonFound) {
        console.log('üîÑ Êú™ÊâæÂà∞ÈåÑÈü≥ÊåâÈàïÔºåÂòóË©¶Áõ¥Êé•ÂïüÂãïÈåÑÈü≥ÊúçÂãô')
        
        const serviceResult = await page.evaluate(async () => {
          try {
            // ÂòóË©¶Áõ¥Êé•ÂëºÂè´ RecordingFlowService
            const recordingFlowService = (window as any).recordingFlowService
            if (recordingFlowService && recordingFlowService.startRecordingFlow) {
              const session = await recordingFlowService.startRecordingFlow(
                `E2E Ê∏¨Ë©¶ÈåÑÈü≥ ${new Date().toLocaleString()}`
              )
              return { success: true, sessionId: session?.id }
            }
            return { success: false, reason: 'RecordingFlowService not available' }
          } catch (error) {
            return { 
              success: false, 
              error: error instanceof Error ? error.message : String(error) 
            }
          }
        })

        console.log('ÊúçÂãôÂïüÂãïÁµêÊûú:', serviceResult)
        expect(serviceResult.success).toBe(true)
      }

      await page.waitForTimeout(2000)
    })

    // Ê≠•È©ü 3: È©óË≠âÈåÑÈü≥ÁãÄÊÖã
    await test.step('È©óË≠âÈåÑÈü≥ÁãÄÊÖã', async () => {
      // Ê™¢Êü•ÈåÑÈü≥ÁãÄÊÖãÊåáÁ§∫Âô®
      const recordingIndicators = [
        '[data-testid="recording-indicator"]',
        '.recording-active',
        'text=/ÈåÑÈü≥‰∏≠|Recording/',
        '.pulse', // ÂèØËÉΩÁöÑÂãïÁï´ÊåáÁ§∫Âô®
        '[data-recording="true"]'
      ]

      let indicatorFound = false
      
      for (const selector of recordingIndicators) {
        const indicator = page.locator(selector).first()
        if (await indicator.count() > 0) {
          await expect(indicator).toBeVisible()
          console.log(`‚úÖ ÊâæÂà∞ÈåÑÈü≥ÁãÄÊÖãÊåáÁ§∫Âô®: ${selector}`)
          indicatorFound = true
          break
        }
      }

      // ÈÄèÈÅé JavaScript Ê™¢Êü•ÈåÑÈü≥ÁãÄÊÖã
      const recordingStatus = await page.evaluate(() => {
        const recordingService = (window as any).recordingService
        const recordingFlowService = (window as any).recordingFlowService
        
        return {
          isRecording: recordingService?.isRecording?.() || false,
          isFlowActive: recordingFlowService?.isFlowRunning?.() || false,
          hasActiveSession: !!recordingFlowService?.getCurrentSession?.(),
          appState: (window as any).useAppStore?.getState?.()?.appState
        }
      })

      console.log('ÈåÑÈü≥ÁãÄÊÖãÊ™¢Êü•:', recordingStatus)
      
      // Ëá≥Â∞ëÊúâ‰∏ÄÂÄãÁãÄÊÖãÊåáÊ®ôÊáâË©≤È°ØÁ§∫ÈåÑÈü≥‰∏≠
      expect(
        indicatorFound || 
        recordingStatus.isRecording || 
        recordingStatus.isFlowActive ||
        recordingStatus.appState === 'recording_active'
      ).toBe(true)
    })

    // Ê≠•È©ü 4: Ê™¢Êü• WebSocket ÈÄ£Êé•
    await test.step('Ê™¢Êü• WebSocket ÈÄ£Êé•', async () => {
      const wsStatus = await page.evaluate(() => {
        const transcriptService = (window as any).transcriptService
        const currentSession = (window as any).recordingFlowService?.getCurrentSession?.()
        
        return {
          hasTranscriptService: !!transcriptService,
          isConnected: currentSession ? 
            transcriptService?.isConnected?.(currentSession.id) : false,
          currentSessionId: currentSession?.id,
          websocketSupport: typeof WebSocket !== 'undefined'
        }
      })

      console.log('WebSocket ÁãÄÊÖã:', wsStatus)
      
      expect(wsStatus.websocketSupport).toBe(true)
      expect(wsStatus.hasTranscriptService).toBe(true)
    })

    // Ê≠•È©ü 5: Á≠âÂæÖ‰∏ÄÊÆµÊôÇÈñìÊ®°Êì¨ÈåÑÈü≥
    await test.step('Ê®°Êì¨ÈåÑÈü≥ÈÅéÁ®ã', async () => {
      console.log('üéôÔ∏è Ê®°Êì¨ÈåÑÈü≥‰∏≠...')
      
      // Á≠âÂæÖ 3 ÁßíÊ®°Êì¨ÈåÑÈü≥
      await page.waitForTimeout(3000)
      
      // Ê™¢Êü•ÊòØÂê¶ÊúâÈÄêÂ≠óÁ®øÊï∏Êìö
      const transcriptCheck = await page.evaluate(() => {
        const store = (window as any).useAppStore?.getState?.()
        return {
          transcriptEntries: store?.transcriptEntries?.length || 0,
          hasTranscriptData: (store?.transcriptEntries?.length || 0) > 0
        }
      })

      console.log('ÈÄêÂ≠óÁ®øÊ™¢Êü•:', transcriptCheck)
    })

    // Ê≠•È©ü 6: ÂÅúÊ≠¢ÈåÑÈü≥
    await test.step('ÂÅúÊ≠¢ÈåÑÈü≥', async () => {
      console.log('‚èπÔ∏è ÂÅúÊ≠¢ÈåÑÈü≥')
      
      // Â∞ãÊâæÂÅúÊ≠¢ÈåÑÈü≥ÊåâÈàï
      const stopButtonSelectors = [
        'button:has-text("ÂÅúÊ≠¢ÈåÑÈü≥")',
        'button:has-text("ÂÅúÊ≠¢")',
        'button:has-text("Stop Recording")',
        'button:has-text("Stop")',
        '[data-testid="stop-recording"]',
        '.stop-button'
      ]

      let stopButtonFound = false
      
      for (const selector of stopButtonSelectors) {
        const button = page.locator(selector).first()
        if (await button.count() > 0 && await button.isVisible()) {
          console.log(`‚úÖ ÊâæÂà∞ÂÅúÊ≠¢ÊåâÈàï: ${selector}`)
          await button.click()
          stopButtonFound = true
          break
        }
      }

      // Â¶ÇÊûúÊâæ‰∏çÂà∞ÂÅúÊ≠¢ÊåâÈàïÔºåÂòóË©¶Áõ¥Êé•ÂëºÂè´ÊúçÂãô
      if (!stopButtonFound) {
        console.log('üîÑ Êú™ÊâæÂà∞ÂÅúÊ≠¢ÊåâÈàïÔºåÂòóË©¶Áõ¥Êé•ÂëºÂè´ÂÅúÊ≠¢ÊúçÂãô')
        
        const stopResult = await page.evaluate(async () => {
          try {
            const recordingFlowService = (window as any).recordingFlowService
            if (recordingFlowService && recordingFlowService.stopRecordingFlow) {
              await recordingFlowService.stopRecordingFlow()
              return { success: true }
            }
            return { success: false, reason: 'RecordingFlowService not available' }
          } catch (error) {
            return { 
              success: false, 
              error: error instanceof Error ? error.message : String(error) 
            }
          }
        })

        console.log('ÂÅúÊ≠¢ÊúçÂãôÁµêÊûú:', stopResult)
      }

      await page.waitForTimeout(2000)
    })

    // Ê≠•È©ü 7: È©óË≠âÂÅúÊ≠¢ÂæåÁãÄÊÖã
    await test.step('È©óË≠âÂÅúÊ≠¢ÂæåÁãÄÊÖã', async () => {
      const finalStatus = await page.evaluate(() => {
        const recordingService = (window as any).recordingService
        const recordingFlowService = (window as any).recordingFlowService
        const store = (window as any).useAppStore?.getState?.()
        
        return {
          isRecording: recordingService?.isRecording?.() || false,
          isFlowActive: recordingFlowService?.isFlowRunning?.() || false,
          appState: store?.appState,
          transcriptReady: store?.transcriptReady,
          sessionData: recordingFlowService?.getCurrentSession?.()
        }
      })

      console.log('ÊúÄÁµÇÁãÄÊÖã:', finalStatus)
      
      // ÈåÑÈü≥ÊáâË©≤Â∑≤ÂÅúÊ≠¢
      expect(finalStatus.isRecording).toBe(false)
      
      // Ê™¢Êü•ÁãÄÊÖãÊòØÂê¶Ê≠£Á¢∫ËΩâÊèõ
      const validFinalStates = ['processing', 'finished', 'default']
      expect(validFinalStates).toContain(finalStatus.appState)
    })

    console.log('üéâ ÂÆåÊï¥ÈåÑÈü≥ÊµÅÁ®ãÊ∏¨Ë©¶ÂÆåÊàê')
  })

  test('ÊáâË©≤Ê≠£Á¢∫ËôïÁêÜÈåÑÈü≥Ê¨äÈôêË¢´ÊãíÁµïÁöÑÊÉÖÊ≥Å', async () => {
    console.log('üö´ Ê∏¨Ë©¶Ê¨äÈôêÊãíÁµïÊÉÖÂ¢É')
    
    // ÊãíÁµïÈ∫•ÂÖãÈ¢®Ê¨äÈôê
    await page.context().clearPermissions()
    
    // ÂòóË©¶ÂïüÂãïÈåÑÈü≥
    const permissionResult = await page.evaluate(async () => {
      try {
        const recordingFlowService = (window as any).recordingFlowService
        if (recordingFlowService && recordingFlowService.startRecordingFlow) {
          await recordingFlowService.startRecordingFlow('Ê¨äÈôêÊ∏¨Ë©¶')
          return { success: true }
        }
        return { success: false, reason: 'Service not available' }
      } catch (error) {
        return { 
          success: false, 
          error: error instanceof Error ? error.message : String(error) 
        }
      }
    })

    console.log('Ê¨äÈôêÊãíÁµïÁµêÊûú:', permissionResult)
    
    // ÊáâË©≤Â§±Êïó‰∏¶ÂåÖÂê´Ê¨äÈôêÁõ∏ÈóúÈåØË™§
    expect(permissionResult.success).toBe(false)
    expect(permissionResult.error).toMatch(/Ê¨äÈôê|permission/i)
  })

  test('ÊáâË©≤ËÉΩÂ§†ËôïÁêÜÁ∂≤Ë∑Ø‰∏≠Êñ∑ÊÉÖÊ≥Å', async () => {
    console.log('üåê Ê∏¨Ë©¶Á∂≤Ë∑Ø‰∏≠Êñ∑ÊÉÖÂ¢É')
    
    // È¶ñÂÖàÂïüÂãïÊ≠£Â∏∏ÈåÑÈü≥
    await page.evaluate(async () => {
      try {
        const recordingFlowService = (window as any).recordingFlowService
        if (recordingFlowService) {
          await recordingFlowService.startRecordingFlow('Á∂≤Ë∑ØÊ∏¨Ë©¶')
        }
      } catch (error) {
        console.log('ÂïüÂãïÈåÑÈü≥ÊôÇÁôºÁîüÈåØË™§:', error)
      }
    })

    await page.waitForTimeout(1000)

    // Ê®°Êì¨Á∂≤Ë∑Ø‰∏≠Êñ∑
    await page.context().setOffline(true)
    await page.waitForTimeout(2000)

    // ÊÅ¢Âæ©Á∂≤Ë∑Ø
    await page.context().setOffline(false)
    await page.waitForTimeout(1000)

    // Ê™¢Êü•Á≥ªÁµ±ÊòØÂê¶ËÉΩÊ≠£Â∏∏ÊÅ¢Âæ©
    const recoveryStatus = await page.evaluate(() => {
      const networkRestorer = (window as any).networkRestorer
      return {
        hasRestorer: !!networkRestorer,
        isOnline: navigator.onLine
      }
    })

    console.log('Á∂≤Ë∑ØÊÅ¢Âæ©ÁãÄÊÖã:', recoveryStatus)
    expect(recoveryStatus.isOnline).toBe(true)
  })
})